// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/native/services/surfaceflinger/layerproto/display.proto

#include "frameworks/native/services/surfaceflinger/layerproto/display.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SizeProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto;
namespace android {
namespace surfaceflinger {
class DisplayProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayProto> _instance;
} _DisplayProto_default_instance_;
}  // namespace surfaceflinger
}  // namespace android
static void InitDefaultsscc_info_DisplayProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::surfaceflinger::_DisplayProto_default_instance_;
    new (ptr) ::android::surfaceflinger::DisplayProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::surfaceflinger::DisplayProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DisplayProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_DisplayProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto}, {
      &scc_info_SizeProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,
      &scc_info_RectProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,
      &scc_info_TransformProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fcommon_2eproto.base,}};

namespace android {
namespace surfaceflinger {

// ===================================================================

void DisplayProto::InitAsDefaultInstance() {
  ::android::surfaceflinger::_DisplayProto_default_instance_._instance.get_mutable()->size_ = const_cast< ::android::surfaceflinger::SizeProto*>(
      ::android::surfaceflinger::SizeProto::internal_default_instance());
  ::android::surfaceflinger::_DisplayProto_default_instance_._instance.get_mutable()->layer_stack_space_rect_ = const_cast< ::android::surfaceflinger::RectProto*>(
      ::android::surfaceflinger::RectProto::internal_default_instance());
  ::android::surfaceflinger::_DisplayProto_default_instance_._instance.get_mutable()->transform_ = const_cast< ::android::surfaceflinger::TransformProto*>(
      ::android::surfaceflinger::TransformProto::internal_default_instance());
}
class DisplayProto::_Internal {
 public:
  static const ::android::surfaceflinger::SizeProto& size(const DisplayProto* msg);
  static const ::android::surfaceflinger::RectProto& layer_stack_space_rect(const DisplayProto* msg);
  static const ::android::surfaceflinger::TransformProto& transform(const DisplayProto* msg);
};

const ::android::surfaceflinger::SizeProto&
DisplayProto::_Internal::size(const DisplayProto* msg) {
  return *msg->size_;
}
const ::android::surfaceflinger::RectProto&
DisplayProto::_Internal::layer_stack_space_rect(const DisplayProto* msg) {
  return *msg->layer_stack_space_rect_;
}
const ::android::surfaceflinger::TransformProto&
DisplayProto::_Internal::transform(const DisplayProto* msg) {
  return *msg->transform_;
}
void DisplayProto::clear_size() {
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
void DisplayProto::clear_layer_stack_space_rect() {
  if (GetArenaNoVirtual() == nullptr && layer_stack_space_rect_ != nullptr) {
    delete layer_stack_space_rect_;
  }
  layer_stack_space_rect_ = nullptr;
}
void DisplayProto::clear_transform() {
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
DisplayProto::DisplayProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.surfaceflinger.DisplayProto)
}
DisplayProto::DisplayProto(const DisplayProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_size()) {
    size_ = new ::android::surfaceflinger::SizeProto(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from.has_layer_stack_space_rect()) {
    layer_stack_space_rect_ = new ::android::surfaceflinger::RectProto(*from.layer_stack_space_rect_);
  } else {
    layer_stack_space_rect_ = nullptr;
  }
  if (from.has_transform()) {
    transform_ = new ::android::surfaceflinger::TransformProto(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&layer_stack_) -
    reinterpret_cast<char*>(&id_)) + sizeof(layer_stack_));
  // @@protoc_insertion_point(copy_constructor:android.surfaceflinger.DisplayProto)
}

void DisplayProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_stack_) -
      reinterpret_cast<char*>(&size_)) + sizeof(layer_stack_));
}

DisplayProto::~DisplayProto() {
  // @@protoc_insertion_point(destructor:android.surfaceflinger.DisplayProto)
  SharedDtor();
}

void DisplayProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete layer_stack_space_rect_;
  if (this != internal_default_instance()) delete transform_;
}

void DisplayProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayProto& DisplayProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayProto_frameworks_2fnative_2fservices_2fsurfaceflinger_2flayerproto_2fdisplay_2eproto.base);
  return *internal_default_instance();
}


void DisplayProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.surfaceflinger.DisplayProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && layer_stack_space_rect_ != nullptr) {
    delete layer_stack_space_rect_;
  }
  layer_stack_space_rect_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_stack_) -
      reinterpret_cast<char*>(&id_)) + sizeof(layer_stack_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisplayProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 layer_stack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          layer_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.SizeProto size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.RectProto layer_stack_space_rect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_layer_stack_space_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .android.surfaceflinger.TransformProto transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisplayProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.surfaceflinger.DisplayProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "android.surfaceflinger.DisplayProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 layer_stack = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_stack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.SizeProto size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.RectProto layer_stack_space_rect = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_layer_stack_space_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .android.surfaceflinger.TransformProto transform = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.surfaceflinger.DisplayProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.surfaceflinger.DisplayProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisplayProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.surfaceflinger.DisplayProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "android.surfaceflinger.DisplayProto.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // uint32 layer_stack = 3;
  if (this->layer_stack() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->layer_stack(), output);
  }

  // .android.surfaceflinger.SizeProto size = 4;
  if (this->has_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::size(this), output);
  }

  // .android.surfaceflinger.RectProto layer_stack_space_rect = 5;
  if (this->has_layer_stack_space_rect()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::layer_stack_space_rect(this), output);
  }

  // .android.surfaceflinger.TransformProto transform = 6;
  if (this->has_transform()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::transform(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.surfaceflinger.DisplayProto)
}

size_t DisplayProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.surfaceflinger.DisplayProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .android.surfaceflinger.SizeProto size = 4;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .android.surfaceflinger.RectProto layer_stack_space_rect = 5;
  if (this->has_layer_stack_space_rect()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layer_stack_space_rect_);
  }

  // .android.surfaceflinger.TransformProto transform = 6;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 layer_stack = 3;
  if (this->layer_stack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->layer_stack());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisplayProto*>(
      &from));
}

void DisplayProto::MergeFrom(const DisplayProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.surfaceflinger.DisplayProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_size()) {
    mutable_size()->::android::surfaceflinger::SizeProto::MergeFrom(from.size());
  }
  if (from.has_layer_stack_space_rect()) {
    mutable_layer_stack_space_rect()->::android::surfaceflinger::RectProto::MergeFrom(from.layer_stack_space_rect());
  }
  if (from.has_transform()) {
    mutable_transform()->::android::surfaceflinger::TransformProto::MergeFrom(from.transform());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.layer_stack() != 0) {
    set_layer_stack(from.layer_stack());
  }
}

void DisplayProto::CopyFrom(const DisplayProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.surfaceflinger.DisplayProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayProto::IsInitialized() const {
  return true;
}

void DisplayProto::InternalSwap(DisplayProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(layer_stack_space_rect_, other->layer_stack_space_rect_);
  swap(transform_, other->transform_);
  swap(id_, other->id_);
  swap(layer_stack_, other->layer_stack_);
}

std::string DisplayProto::GetTypeName() const {
  return "android.surfaceflinger.DisplayProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace surfaceflinger
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::surfaceflinger::DisplayProto* Arena::CreateMaybeMessage< ::android::surfaceflinger::DisplayProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::surfaceflinger::DisplayProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
