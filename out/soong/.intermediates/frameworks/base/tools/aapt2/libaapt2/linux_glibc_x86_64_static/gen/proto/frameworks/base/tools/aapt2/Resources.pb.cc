// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/tools/aapt2/Resources.proto

#include "frameworks/base/tools/aapt2/Resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllowNew_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Array_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Array_Element_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Attribute_Symbol_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Boolean_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CompoundValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConfigValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fConfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Configuration_frameworks_2fbase_2ftools_2faapt2_2fConfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntryId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileReference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Id_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MacroBody_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamespaceAlias_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Overlayable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OverlayableItem_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Package_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PackageId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Plural_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Plural_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Primitive_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Primitive_EmptyType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Primitive_NullType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StagedId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_String_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringPool_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Style_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Style_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StyleString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StyleString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Styleable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Styleable_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StyledString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StyledString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToolFingerprint_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Type_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypeId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UntranslatableSection_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Value_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Visibility_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_XmlAttribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_XmlNamespace_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
namespace aapt {
namespace pb {
class StringPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringPool> _instance;
} _StringPool_default_instance_;
class SourcePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourcePosition> _instance;
} _SourcePosition_default_instance_;
class SourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Source> _instance;
} _Source_default_instance_;
class ToolFingerprintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToolFingerprint> _instance;
} _ToolFingerprint_default_instance_;
class ResourceTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceTable> _instance;
} _ResourceTable_default_instance_;
class PackageIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PackageId> _instance;
} _PackageId_default_instance_;
class PackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Package> _instance;
} _Package_default_instance_;
class TypeIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TypeId> _instance;
} _TypeId_default_instance_;
class TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type> _instance;
} _Type_default_instance_;
class VisibilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Visibility> _instance;
} _Visibility_default_instance_;
class AllowNewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllowNew> _instance;
} _AllowNew_default_instance_;
class OverlayableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Overlayable> _instance;
} _Overlayable_default_instance_;
class OverlayableItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverlayableItem> _instance;
} _OverlayableItem_default_instance_;
class StagedIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StagedId> _instance;
} _StagedId_default_instance_;
class EntryIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntryId> _instance;
} _EntryId_default_instance_;
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
class ConfigValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigValue> _instance;
} _ConfigValue_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Value> _instance;
  const ::aapt::pb::Item* item_;
  const ::aapt::pb::CompoundValue* compound_value_;
} _Value_default_instance_;
class ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Item> _instance;
  const ::aapt::pb::Reference* ref_;
  const ::aapt::pb::String* str_;
  const ::aapt::pb::RawString* raw_str_;
  const ::aapt::pb::StyledString* styled_str_;
  const ::aapt::pb::FileReference* file_;
  const ::aapt::pb::Id* id_;
  const ::aapt::pb::Primitive* prim_;
} _Item_default_instance_;
class CompoundValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompoundValue> _instance;
  const ::aapt::pb::Attribute* attr_;
  const ::aapt::pb::Style* style_;
  const ::aapt::pb::Styleable* styleable_;
  const ::aapt::pb::Array* array_;
  const ::aapt::pb::Plural* plural_;
  const ::aapt::pb::MacroBody* macro_;
} _CompoundValue_default_instance_;
class BooleanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Boolean> _instance;
} _Boolean_default_instance_;
class ReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reference> _instance;
} _Reference_default_instance_;
class IdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Id> _instance;
} _Id_default_instance_;
class StringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<String> _instance;
} _String_default_instance_;
class RawStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawString> _instance;
} _RawString_default_instance_;
class StyledString_SpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StyledString_Span> _instance;
} _StyledString_Span_default_instance_;
class StyledStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StyledString> _instance;
} _StyledString_default_instance_;
class FileReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileReference> _instance;
} _FileReference_default_instance_;
class Primitive_NullTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Primitive_NullType> _instance;
} _Primitive_NullType_default_instance_;
class Primitive_EmptyTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Primitive_EmptyType> _instance;
} _Primitive_EmptyType_default_instance_;
class PrimitiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Primitive> _instance;
  const ::aapt::pb::Primitive_NullType* null_value_;
  const ::aapt::pb::Primitive_EmptyType* empty_value_;
  float float_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dimension_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_decimal_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 int_hexadecimal_value_;
  bool boolean_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_argb8_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_rgb8_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_argb4_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_rgb4_value_;
  float dimension_value_deprecated_;
  float fraction_value_deprecated_;
} _Primitive_default_instance_;
class Attribute_SymbolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attribute_Symbol> _instance;
} _Attribute_Symbol_default_instance_;
class AttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Attribute> _instance;
} _Attribute_default_instance_;
class Style_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Style_Entry> _instance;
} _Style_Entry_default_instance_;
class StyleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Style> _instance;
} _Style_default_instance_;
class Styleable_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Styleable_Entry> _instance;
} _Styleable_Entry_default_instance_;
class StyleableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Styleable> _instance;
} _Styleable_default_instance_;
class Array_ElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Array_Element> _instance;
} _Array_Element_default_instance_;
class ArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Array> _instance;
} _Array_default_instance_;
class Plural_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plural_Entry> _instance;
} _Plural_Entry_default_instance_;
class PluralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plural> _instance;
} _Plural_default_instance_;
class XmlNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XmlNode> _instance;
  const ::aapt::pb::XmlElement* element_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
} _XmlNode_default_instance_;
class XmlElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XmlElement> _instance;
} _XmlElement_default_instance_;
class XmlNamespaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XmlNamespace> _instance;
} _XmlNamespace_default_instance_;
class XmlAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<XmlAttribute> _instance;
} _XmlAttribute_default_instance_;
class MacroBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MacroBody> _instance;
} _MacroBody_default_instance_;
class NamespaceAliasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamespaceAlias> _instance;
} _NamespaceAlias_default_instance_;
class StyleString_SpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StyleString_Span> _instance;
} _StyleString_Span_default_instance_;
class StyleStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StyleString> _instance;
} _StyleString_default_instance_;
class UntranslatableSectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UntranslatableSection> _instance;
} _UntranslatableSection_default_instance_;
}  // namespace pb
}  // namespace aapt
static void InitDefaultsscc_info_AllowNew_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_AllowNew_default_instance_;
    new (ptr) ::aapt::pb::AllowNew();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::AllowNew::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllowNew_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AllowNew_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Array_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Array_default_instance_;
    new (ptr) ::aapt::pb::Array();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Array::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Array_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Array_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Array_Element_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Array_Element_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Array_Element_default_instance_;
    new (ptr) ::aapt::pb::Array_Element();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Array_Element::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Array_Element_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Array_Element_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Attribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Attribute_default_instance_;
    new (ptr) ::aapt::pb::Attribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Attribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Attribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Attribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Attribute_Symbol_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Attribute_Symbol_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Attribute_Symbol_default_instance_;
    new (ptr) ::aapt::pb::Attribute_Symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Attribute_Symbol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Attribute_Symbol_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Attribute_Symbol_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Boolean_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Boolean_default_instance_;
    new (ptr) ::aapt::pb::Boolean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Boolean::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Boolean_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Boolean_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_CompoundValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_CompoundValue_default_instance_;
    new (ptr) ::aapt::pb::CompoundValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::CompoundValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CompoundValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_CompoundValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Attribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Style_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Styleable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Array_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Plural_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_MacroBody_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_ConfigValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_ConfigValue_default_instance_;
    new (ptr) ::aapt::pb::ConfigValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::ConfigValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConfigValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ConfigValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Configuration_frameworks_2fbase_2ftools_2faapt2_2fConfiguration_2eproto.base,
      &scc_info_Value_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Entry_default_instance_;
    new (ptr) ::aapt::pb::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_EntryId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Visibility_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_AllowNew_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_OverlayableItem_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_ConfigValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_StagedId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_EntryId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_EntryId_default_instance_;
    new (ptr) ::aapt::pb::EntryId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::EntryId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntryId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EntryId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_FileReference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_FileReference_default_instance_;
    new (ptr) ::aapt::pb::FileReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::FileReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileReference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FileReference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Id_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Id_default_instance_;
    new (ptr) ::aapt::pb::Id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Id_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Id_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Item_default_instance_;
    new (ptr) ::aapt::pb::Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_String_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_RawString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_StyledString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_FileReference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Id_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Primitive_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_MacroBody_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_MacroBody_default_instance_;
    new (ptr) ::aapt::pb::MacroBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::MacroBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MacroBody_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_MacroBody_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_StyleString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_UntranslatableSection_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_NamespaceAlias_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_NamespaceAlias_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_NamespaceAlias_default_instance_;
    new (ptr) ::aapt::pb::NamespaceAlias();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::NamespaceAlias::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamespaceAlias_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NamespaceAlias_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Overlayable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Overlayable_default_instance_;
    new (ptr) ::aapt::pb::Overlayable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Overlayable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Overlayable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Overlayable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_OverlayableItem_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_OverlayableItem_default_instance_;
    new (ptr) ::aapt::pb::OverlayableItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::OverlayableItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OverlayableItem_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OverlayableItem_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Package_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Package_default_instance_;
    new (ptr) ::aapt::pb::Package();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Package::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Package_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Package_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_PackageId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Type_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_PackageId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_PackageId_default_instance_;
    new (ptr) ::aapt::pb::PackageId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::PackageId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PackageId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PackageId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Plural_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Plural_default_instance_;
    new (ptr) ::aapt::pb::Plural();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Plural::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Plural_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Plural_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Plural_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Plural_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Plural_Entry_default_instance_;
    new (ptr) ::aapt::pb::Plural_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Plural_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Plural_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Plural_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Primitive_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Primitive_default_instance_;
    new (ptr) ::aapt::pb::Primitive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Primitive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Primitive_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Primitive_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Primitive_NullType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Primitive_EmptyType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Primitive_EmptyType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Primitive_EmptyType_default_instance_;
    new (ptr) ::aapt::pb::Primitive_EmptyType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Primitive_EmptyType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Primitive_EmptyType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Primitive_EmptyType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Primitive_NullType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Primitive_NullType_default_instance_;
    new (ptr) ::aapt::pb::Primitive_NullType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Primitive_NullType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Primitive_NullType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Primitive_NullType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_RawString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_RawString_default_instance_;
    new (ptr) ::aapt::pb::RawString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::RawString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RawString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Reference_default_instance_;
    new (ptr) ::aapt::pb::Reference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Reference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Boolean_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_ResourceTable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_ResourceTable_default_instance_;
    new (ptr) ::aapt::pb::ResourceTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::ResourceTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResourceTable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ResourceTable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_StringPool_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Package_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Overlayable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_ToolFingerprint_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Source_default_instance_;
    new (ptr) ::aapt::pb::Source();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Source::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_SourcePosition_default_instance_;
    new (ptr) ::aapt::pb::SourcePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::SourcePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_StagedId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_StagedId_default_instance_;
    new (ptr) ::aapt::pb::StagedId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::StagedId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StagedId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StagedId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_String_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_String_default_instance_;
    new (ptr) ::aapt::pb::String();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::String::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_String_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_String_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_StringPool_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_StringPool_default_instance_;
    new (ptr) ::aapt::pb::StringPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::StringPool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringPool_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StringPool_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Style_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Style_default_instance_;
    new (ptr) ::aapt::pb::Style();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Style::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Style_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Style_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Style_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Style_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Style_Entry_default_instance_;
    new (ptr) ::aapt::pb::Style_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Style_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Style_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Style_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_StyleString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_StyleString_default_instance_;
    new (ptr) ::aapt::pb::StyleString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::StyleString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StyleString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StyleString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_StyleString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_StyleString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_StyleString_Span_default_instance_;
    new (ptr) ::aapt::pb::StyleString_Span();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::StyleString_Span::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StyleString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StyleString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Styleable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Styleable_default_instance_;
    new (ptr) ::aapt::pb::Styleable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Styleable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Styleable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Styleable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Styleable_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Styleable_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Styleable_Entry_default_instance_;
    new (ptr) ::aapt::pb::Styleable_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Styleable_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Styleable_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Styleable_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_StyledString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_StyledString_default_instance_;
    new (ptr) ::aapt::pb::StyledString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::StyledString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StyledString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StyledString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_StyledString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_StyledString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_StyledString_Span_default_instance_;
    new (ptr) ::aapt::pb::StyledString_Span();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::StyledString_Span::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StyledString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StyledString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_ToolFingerprint_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_ToolFingerprint_default_instance_;
    new (ptr) ::aapt::pb::ToolFingerprint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::ToolFingerprint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToolFingerprint_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ToolFingerprint_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Type_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Type_default_instance_;
    new (ptr) ::aapt::pb::Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Type_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Type_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_TypeId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_TypeId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_TypeId_default_instance_;
    new (ptr) ::aapt::pb::TypeId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::TypeId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypeId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TypeId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_UntranslatableSection_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_UntranslatableSection_default_instance_;
    new (ptr) ::aapt::pb::UntranslatableSection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::UntranslatableSection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UntranslatableSection_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UntranslatableSection_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {}};

static void InitDefaultsscc_info_Value_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Value_default_instance_;
    new (ptr) ::aapt::pb::Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Value_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Value_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_CompoundValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_Visibility_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_Visibility_default_instance_;
    new (ptr) ::aapt::pb::Visibility();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::Visibility::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Visibility_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Visibility_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_XmlAttribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_XmlAttribute_default_instance_;
    new (ptr) ::aapt::pb::XmlAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::XmlAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_XmlAttribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_XmlAttribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_XmlNode_default_instance_;
    new (ptr) ::aapt::pb::XmlNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::aapt::pb::_XmlElement_default_instance_;
    new (ptr) ::aapt::pb::XmlElement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::XmlNode::InitAsDefaultInstance();
  ::aapt::pb::XmlElement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_XmlNamespace_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_XmlAttribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
      &scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static void InitDefaultsscc_info_XmlNamespace_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aapt::pb::_XmlNamespace_default_instance_;
    new (ptr) ::aapt::pb::XmlNamespace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aapt::pb::XmlNamespace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_XmlNamespace_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_XmlNamespace_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto}, {
      &scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[50];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StringPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StringPool, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::SourcePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::SourcePosition, line_number_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::SourcePosition, column_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Source, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Source, path_idx_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Source, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ToolFingerprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ToolFingerprint, tool_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ToolFingerprint, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, source_pool_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, package_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, overlayable_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ResourceTable, tool_fingerprint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::PackageId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::PackageId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Package, package_id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Package, package_name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Package, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::TypeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::TypeId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Type, type_id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Type, name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Type, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, level_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Visibility, staged_api_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::AllowNew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::AllowNew, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::AllowNew, comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Overlayable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Overlayable, name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Overlayable, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Overlayable, actor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, policy_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::OverlayableItem, overlayable_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StagedId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StagedId, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StagedId, staged_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::EntryId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::EntryId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, entry_id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, visibility_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, allow_new_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, overlayable_item_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, config_value_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Entry, staged_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ConfigValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ConfigValue, config_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::ConfigValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, weak_),
  offsetof(::aapt::pb::ValueDefaultTypeInternal, item_),
  offsetof(::aapt::pb::ValueDefaultTypeInternal, compound_value_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Item, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::aapt::pb::ItemDefaultTypeInternal, ref_),
  offsetof(::aapt::pb::ItemDefaultTypeInternal, str_),
  offsetof(::aapt::pb::ItemDefaultTypeInternal, raw_str_),
  offsetof(::aapt::pb::ItemDefaultTypeInternal, styled_str_),
  offsetof(::aapt::pb::ItemDefaultTypeInternal, file_),
  offsetof(::aapt::pb::ItemDefaultTypeInternal, id_),
  offsetof(::aapt::pb::ItemDefaultTypeInternal, prim_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Item, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::CompoundValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::CompoundValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::aapt::pb::CompoundValueDefaultTypeInternal, attr_),
  offsetof(::aapt::pb::CompoundValueDefaultTypeInternal, style_),
  offsetof(::aapt::pb::CompoundValueDefaultTypeInternal, styleable_),
  offsetof(::aapt::pb::CompoundValueDefaultTypeInternal, array_),
  offsetof(::aapt::pb::CompoundValueDefaultTypeInternal, plural_),
  offsetof(::aapt::pb::CompoundValueDefaultTypeInternal, macro_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::CompoundValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Boolean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Boolean, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, type_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, private__),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, is_dynamic_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, type_flags_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Reference, allow_raw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::String, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::RawString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::RawString, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString_Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString_Span, tag_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString_Span, first_char_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString_Span, last_char_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString, value_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyledString, span_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::FileReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::FileReference, path_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::FileReference, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive_NullType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive_EmptyType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, null_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, empty_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, float_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, dimension_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, fraction_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, int_decimal_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, int_hexadecimal_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, boolean_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, color_argb8_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, color_rgb8_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, color_argb4_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, color_rgb4_value_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, dimension_value_deprecated_),
  offsetof(::aapt::pb::PrimitiveDefaultTypeInternal, fraction_value_deprecated_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Primitive, oneof_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, value_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute_Symbol, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, format_flags_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, min_int_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, max_int_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Attribute, symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, key_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style_Entry, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style, parent_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style, parent_source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Style, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable_Entry, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable_Entry, comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable_Entry, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Styleable, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array_Element, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array_Element, comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array_Element, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Array, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, comment_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, arity_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural_Entry, item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::Plural, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNode, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNode, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::aapt::pb::XmlNodeDefaultTypeInternal, element_),
  offsetof(::aapt::pb::XmlNodeDefaultTypeInternal, text_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNode, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNode, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, namespace_declaration_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, namespace_uri_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, attribute_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlElement, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNamespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNamespace, prefix_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNamespace, uri_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlNamespace, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, namespace_uri_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, source_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, resource_id_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::XmlAttribute, compiled_item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::MacroBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::MacroBody, raw_string_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::MacroBody, style_string_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::MacroBody, untranslatable_sections_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::MacroBody, namespace_stack_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::MacroBody, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::NamespaceAlias, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::NamespaceAlias, prefix_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::NamespaceAlias, package_name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::NamespaceAlias, is_private_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyleString_Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyleString_Span, name_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyleString_Span, start_index_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyleString_Span, end_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyleString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyleString, str_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::StyleString, spans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::UntranslatableSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aapt::pb::UntranslatableSection, start_index_),
  PROTOBUF_FIELD_OFFSET(::aapt::pb::UntranslatableSection, end_index_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aapt::pb::StringPool)},
  { 6, -1, sizeof(::aapt::pb::SourcePosition)},
  { 13, -1, sizeof(::aapt::pb::Source)},
  { 20, -1, sizeof(::aapt::pb::ToolFingerprint)},
  { 27, -1, sizeof(::aapt::pb::ResourceTable)},
  { 36, -1, sizeof(::aapt::pb::PackageId)},
  { 42, -1, sizeof(::aapt::pb::Package)},
  { 50, -1, sizeof(::aapt::pb::TypeId)},
  { 56, -1, sizeof(::aapt::pb::Type)},
  { 64, -1, sizeof(::aapt::pb::Visibility)},
  { 73, -1, sizeof(::aapt::pb::AllowNew)},
  { 80, -1, sizeof(::aapt::pb::Overlayable)},
  { 88, -1, sizeof(::aapt::pb::OverlayableItem)},
  { 97, -1, sizeof(::aapt::pb::StagedId)},
  { 104, -1, sizeof(::aapt::pb::EntryId)},
  { 110, -1, sizeof(::aapt::pb::Entry)},
  { 122, -1, sizeof(::aapt::pb::ConfigValue)},
  { 129, -1, sizeof(::aapt::pb::Value)},
  { 140, -1, sizeof(::aapt::pb::Item)},
  { 153, -1, sizeof(::aapt::pb::CompoundValue)},
  { 165, -1, sizeof(::aapt::pb::Boolean)},
  { 171, -1, sizeof(::aapt::pb::Reference)},
  { 183, -1, sizeof(::aapt::pb::Id)},
  { 188, -1, sizeof(::aapt::pb::String)},
  { 194, -1, sizeof(::aapt::pb::RawString)},
  { 200, -1, sizeof(::aapt::pb::StyledString_Span)},
  { 208, -1, sizeof(::aapt::pb::StyledString)},
  { 215, -1, sizeof(::aapt::pb::FileReference)},
  { 222, -1, sizeof(::aapt::pb::Primitive_NullType)},
  { 227, -1, sizeof(::aapt::pb::Primitive_EmptyType)},
  { 232, -1, sizeof(::aapt::pb::Primitive)},
  { 252, -1, sizeof(::aapt::pb::Attribute_Symbol)},
  { 262, -1, sizeof(::aapt::pb::Attribute)},
  { 271, -1, sizeof(::aapt::pb::Style_Entry)},
  { 280, -1, sizeof(::aapt::pb::Style)},
  { 288, -1, sizeof(::aapt::pb::Styleable_Entry)},
  { 296, -1, sizeof(::aapt::pb::Styleable)},
  { 302, -1, sizeof(::aapt::pb::Array_Element)},
  { 310, -1, sizeof(::aapt::pb::Array)},
  { 316, -1, sizeof(::aapt::pb::Plural_Entry)},
  { 325, -1, sizeof(::aapt::pb::Plural)},
  { 331, -1, sizeof(::aapt::pb::XmlNode)},
  { 340, -1, sizeof(::aapt::pb::XmlElement)},
  { 350, -1, sizeof(::aapt::pb::XmlNamespace)},
  { 358, -1, sizeof(::aapt::pb::XmlAttribute)},
  { 369, -1, sizeof(::aapt::pb::MacroBody)},
  { 379, -1, sizeof(::aapt::pb::NamespaceAlias)},
  { 387, -1, sizeof(::aapt::pb::StyleString_Span)},
  { 395, -1, sizeof(::aapt::pb::StyleString)},
  { 402, -1, sizeof(::aapt::pb::UntranslatableSection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_StringPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_SourcePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Source_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_ToolFingerprint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_ResourceTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_PackageId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Package_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_TypeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Visibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_AllowNew_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Overlayable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_OverlayableItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_StagedId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_EntryId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_ConfigValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_CompoundValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Boolean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Reference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_RawString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_StyledString_Span_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_StyledString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_FileReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Primitive_NullType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Primitive_EmptyType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Primitive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Attribute_Symbol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Attribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Style_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Style_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Styleable_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Styleable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Array_Element_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Array_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Plural_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_Plural_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_XmlNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_XmlElement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_XmlNamespace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_XmlAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_MacroBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_NamespaceAlias_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_StyleString_Span_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_StyleString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aapt::pb::_UntranslatableSection_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+frameworks/base/tools/aapt2/Resources."
  "proto\022\007aapt.pb\032/frameworks/base/tools/aa"
  "pt2/Configuration.proto\"\032\n\nStringPool\022\014\n"
  "\004data\030\001 \001(\014\"<\n\016SourcePosition\022\023\n\013line_nu"
  "mber\030\001 \001(\r\022\025\n\rcolumn_number\030\002 \001(\r\"E\n\006Sou"
  "rce\022\020\n\010path_idx\030\001 \001(\r\022)\n\010position\030\002 \001(\0132"
  "\027.aapt.pb.SourcePosition\"0\n\017ToolFingerpr"
  "int\022\014\n\004tool\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\"\273\001\n\rR"
  "esourceTable\022(\n\013source_pool\030\001 \001(\0132\023.aapt"
  ".pb.StringPool\022!\n\007package\030\002 \003(\0132\020.aapt.p"
  "b.Package\022)\n\013overlayable\030\003 \003(\0132\024.aapt.pb"
  ".Overlayable\0222\n\020tool_fingerprint\030\004 \003(\0132\030"
  ".aapt.pb.ToolFingerprint\"\027\n\tPackageId\022\n\n"
  "\002id\030\001 \001(\r\"d\n\007Package\022&\n\npackage_id\030\001 \001(\013"
  "2\022.aapt.pb.PackageId\022\024\n\014package_name\030\002 \001"
  "(\t\022\033\n\004type\030\003 \003(\0132\r.aapt.pb.Type\"\024\n\006TypeI"
  "d\022\n\n\002id\030\001 \001(\r\"U\n\004Type\022 \n\007type_id\030\001 \001(\0132\017"
  ".aapt.pb.TypeId\022\014\n\004name\030\002 \001(\t\022\035\n\005entry\030\003"
  " \003(\0132\016.aapt.pb.Entry\"\253\001\n\nVisibility\022(\n\005l"
  "evel\030\001 \001(\0162\031.aapt.pb.Visibility.Level\022\037\n"
  "\006source\030\002 \001(\0132\017.aapt.pb.Source\022\017\n\007commen"
  "t\030\003 \001(\t\022\022\n\nstaged_api\030\004 \001(\010\"-\n\005Level\022\013\n\007"
  "UNKNOWN\020\000\022\013\n\007PRIVATE\020\001\022\n\n\006PUBLIC\020\002\"<\n\010Al"
  "lowNew\022\037\n\006source\030\001 \001(\0132\017.aapt.pb.Source\022"
  "\017\n\007comment\030\002 \001(\t\"K\n\013Overlayable\022\014\n\004name\030"
  "\001 \001(\t\022\037\n\006source\030\002 \001(\0132\017.aapt.pb.Source\022\r"
  "\n\005actor\030\003 \001(\t\"\225\002\n\017OverlayableItem\022\037\n\006sou"
  "rce\030\001 \001(\0132\017.aapt.pb.Source\022\017\n\007comment\030\002 "
  "\001(\t\022/\n\006policy\030\003 \003(\0162\037.aapt.pb.Overlayabl"
  "eItem.Policy\022\027\n\017overlayable_idx\030\004 \001(\r\"\205\001"
  "\n\006Policy\022\010\n\004NONE\020\000\022\n\n\006PUBLIC\020\001\022\n\n\006SYSTEM"
  "\020\002\022\n\n\006VENDOR\020\003\022\013\n\007PRODUCT\020\004\022\r\n\tSIGNATURE"
  "\020\005\022\007\n\003ODM\020\006\022\007\n\003OEM\020\007\022\t\n\005ACTOR\020\010\022\024\n\020CONFI"
  "G_SIGNATURE\020\t\">\n\010StagedId\022\037\n\006source\030\001 \001("
  "\0132\017.aapt.pb.Source\022\021\n\tstaged_id\030\002 \001(\r\"\025\n"
  "\007EntryId\022\n\n\002id\030\001 \001(\r\"\216\002\n\005Entry\022\"\n\010entry_"
  "id\030\001 \001(\0132\020.aapt.pb.EntryId\022\014\n\004name\030\002 \001(\t"
  "\022\'\n\nvisibility\030\003 \001(\0132\023.aapt.pb.Visibilit"
  "y\022$\n\tallow_new\030\004 \001(\0132\021.aapt.pb.AllowNew\022"
  "2\n\020overlayable_item\030\005 \001(\0132\030.aapt.pb.Over"
  "layableItem\022*\n\014config_value\030\006 \003(\0132\024.aapt"
  ".pb.ConfigValue\022$\n\tstaged_id\030\007 \001(\0132\021.aap"
  "t.pb.StagedId\"T\n\013ConfigValue\022&\n\006config\030\001"
  " \001(\0132\026.aapt.pb.Configuration\022\035\n\005value\030\002 "
  "\001(\0132\016.aapt.pb.Value\"\241\001\n\005Value\022\037\n\006source\030"
  "\001 \001(\0132\017.aapt.pb.Source\022\017\n\007comment\030\002 \001(\t\022"
  "\014\n\004weak\030\003 \001(\010\022\035\n\004item\030\004 \001(\0132\r.aapt.pb.It"
  "emH\000\0220\n\016compound_value\030\005 \001(\0132\026.aapt.pb.C"
  "ompoundValueH\000B\007\n\005value\"\215\002\n\004Item\022!\n\003ref\030"
  "\001 \001(\0132\022.aapt.pb.ReferenceH\000\022\036\n\003str\030\002 \001(\013"
  "2\017.aapt.pb.StringH\000\022%\n\007raw_str\030\003 \001(\0132\022.a"
  "apt.pb.RawStringH\000\022+\n\nstyled_str\030\004 \001(\0132\025"
  ".aapt.pb.StyledStringH\000\022&\n\004file\030\005 \001(\0132\026."
  "aapt.pb.FileReferenceH\000\022\031\n\002id\030\006 \001(\0132\013.aa"
  "pt.pb.IdH\000\022\"\n\004prim\030\007 \001(\0132\022.aapt.pb.Primi"
  "tiveH\000B\007\n\005value\"\357\001\n\rCompoundValue\022\"\n\004att"
  "r\030\001 \001(\0132\022.aapt.pb.AttributeH\000\022\037\n\005style\030\002"
  " \001(\0132\016.aapt.pb.StyleH\000\022\'\n\tstyleable\030\003 \001("
  "\0132\022.aapt.pb.StyleableH\000\022\037\n\005array\030\004 \001(\0132\016"
  ".aapt.pb.ArrayH\000\022!\n\006plural\030\005 \001(\0132\017.aapt."
  "pb.PluralH\000\022#\n\005macro\030\006 \001(\0132\022.aapt.pb.Mac"
  "roBodyH\000B\007\n\005value\"\030\n\007Boolean\022\r\n\005value\030\001 "
  "\001(\010\"\320\001\n\tReference\022%\n\004type\030\001 \001(\0162\027.aapt.p"
  "b.Reference.Type\022\n\n\002id\030\002 \001(\r\022\014\n\004name\030\003 \001"
  "(\t\022\017\n\007private\030\004 \001(\010\022$\n\nis_dynamic\030\005 \001(\0132"
  "\020.aapt.pb.Boolean\022\022\n\ntype_flags\030\006 \001(\r\022\021\n"
  "\tallow_raw\030\007 \001(\010\"$\n\004Type\022\r\n\tREFERENCE\020\000\022"
  "\r\n\tATTRIBUTE\020\001\"\004\n\002Id\"\027\n\006String\022\r\n\005value\030"
  "\001 \001(\t\"\032\n\tRawString\022\r\n\005value\030\001 \001(\t\"\203\001\n\014St"
  "yledString\022\r\n\005value\030\001 \001(\t\022(\n\004span\030\002 \003(\0132"
  "\032.aapt.pb.StyledString.Span\032:\n\004Span\022\013\n\003t"
  "ag\030\001 \001(\t\022\022\n\nfirst_char\030\002 \001(\r\022\021\n\tlast_cha"
  "r\030\003 \001(\r\"\205\001\n\rFileReference\022\014\n\004path\030\001 \001(\t\022"
  ")\n\004type\030\002 \001(\0162\033.aapt.pb.FileReference.Ty"
  "pe\";\n\004Type\022\013\n\007UNKNOWN\020\000\022\007\n\003PNG\020\001\022\016\n\nBINA"
  "RY_XML\020\002\022\r\n\tPROTO_XML\020\003\"\203\004\n\tPrimitive\0221\n"
  "\nnull_value\030\001 \001(\0132\033.aapt.pb.Primitive.Nu"
  "llTypeH\000\0223\n\013empty_value\030\002 \001(\0132\034.aapt.pb."
  "Primitive.EmptyTypeH\000\022\025\n\013float_value\030\003 \001"
  "(\002H\000\022\031\n\017dimension_value\030\r \001(\rH\000\022\030\n\016fract"
  "ion_value\030\016 \001(\rH\000\022\033\n\021int_decimal_value\030\006"
  " \001(\005H\000\022\037\n\025int_hexadecimal_value\030\007 \001(\rH\000\022"
  "\027\n\rboolean_value\030\010 \001(\010H\000\022\033\n\021color_argb8_"
  "value\030\t \001(\rH\000\022\032\n\020color_rgb8_value\030\n \001(\rH"
  "\000\022\033\n\021color_argb4_value\030\013 \001(\rH\000\022\032\n\020color_"
  "rgb4_value\030\014 \001(\rH\000\022(\n\032dimension_value_de"
  "precated\030\004 \001(\002B\002\030\001H\000\022\'\n\031fraction_value_d"
  "eprecated\030\005 \001(\002B\002\030\001H\000\032\n\n\010NullType\032\013\n\tEmp"
  "tyTypeB\r\n\013oneof_value\"\220\003\n\tAttribute\022\024\n\014f"
  "ormat_flags\030\001 \001(\r\022\017\n\007min_int\030\002 \001(\005\022\017\n\007ma"
  "x_int\030\003 \001(\005\022)\n\006symbol\030\004 \003(\0132\031.aapt.pb.At"
  "tribute.Symbol\032y\n\006Symbol\022\037\n\006source\030\001 \001(\013"
  "2\017.aapt.pb.Source\022\017\n\007comment\030\002 \001(\t\022 \n\004na"
  "me\030\003 \001(\0132\022.aapt.pb.Reference\022\r\n\005value\030\004 "
  "\001(\r\022\014\n\004type\030\005 \001(\r\"\244\001\n\013FormatFlags\022\010\n\004NON"
  "E\020\000\022\t\n\003ANY\020\377\377\003\022\r\n\tREFERENCE\020\001\022\n\n\006STRING\020"
  "\002\022\013\n\007INTEGER\020\004\022\013\n\007BOOLEAN\020\010\022\t\n\005COLOR\020\020\022\t"
  "\n\005FLOAT\020 \022\r\n\tDIMENSION\020@\022\r\n\010FRACTION\020\200\001\022"
  "\n\n\004ENUM\020\200\200\004\022\013\n\005FLAGS\020\200\200\010\"\361\001\n\005Style\022\"\n\006pa"
  "rent\030\001 \001(\0132\022.aapt.pb.Reference\022&\n\rparent"
  "_source\030\002 \001(\0132\017.aapt.pb.Source\022#\n\005entry\030"
  "\003 \003(\0132\024.aapt.pb.Style.Entry\032w\n\005Entry\022\037\n\006"
  "source\030\001 \001(\0132\017.aapt.pb.Source\022\017\n\007comment"
  "\030\002 \001(\t\022\037\n\003key\030\003 \001(\0132\022.aapt.pb.Reference\022"
  "\033\n\004item\030\004 \001(\0132\r.aapt.pb.Item\"\221\001\n\tStyleab"
  "le\022\'\n\005entry\030\001 \003(\0132\030.aapt.pb.Styleable.En"
  "try\032[\n\005Entry\022\037\n\006source\030\001 \001(\0132\017.aapt.pb.S"
  "ource\022\017\n\007comment\030\002 \001(\t\022 \n\004attr\030\003 \001(\0132\022.a"
  "apt.pb.Reference\"\212\001\n\005Array\022\'\n\007element\030\001 "
  "\003(\0132\026.aapt.pb.Array.Element\032X\n\007Element\022\037"
  "\n\006source\030\001 \001(\0132\017.aapt.pb.Source\022\017\n\007comme"
  "nt\030\002 \001(\t\022\033\n\004item\030\003 \001(\0132\r.aapt.pb.Item\"\357\001"
  "\n\006Plural\022$\n\005entry\030\001 \003(\0132\025.aapt.pb.Plural"
  ".Entry\032|\n\005Entry\022\037\n\006source\030\001 \001(\0132\017.aapt.p"
  "b.Source\022\017\n\007comment\030\002 \001(\t\022$\n\005arity\030\003 \001(\016"
  "2\025.aapt.pb.Plural.Arity\022\033\n\004item\030\004 \001(\0132\r."
  "aapt.pb.Item\"A\n\005Arity\022\010\n\004ZERO\020\000\022\007\n\003ONE\020\001"
  "\022\007\n\003TWO\020\002\022\007\n\003FEW\020\003\022\010\n\004MANY\020\004\022\t\n\005OTHER\020\005\""
  "r\n\007XmlNode\022&\n\007element\030\001 \001(\0132\023.aapt.pb.Xm"
  "lElementH\000\022\016\n\004text\030\002 \001(\tH\000\022\'\n\006source\030\003 \001"
  "(\0132\027.aapt.pb.SourcePositionB\006\n\004node\"\262\001\n\n"
  "XmlElement\0224\n\025namespace_declaration\030\001 \003("
  "\0132\025.aapt.pb.XmlNamespace\022\025\n\rnamespace_ur"
  "i\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022(\n\tattribute\030\004 \003(\013"
  "2\025.aapt.pb.XmlAttribute\022\037\n\005child\030\005 \003(\0132\020"
  ".aapt.pb.XmlNode\"T\n\014XmlNamespace\022\016\n\006pref"
  "ix\030\001 \001(\t\022\013\n\003uri\030\002 \001(\t\022\'\n\006source\030\003 \001(\0132\027."
  "aapt.pb.SourcePosition\"\246\001\n\014XmlAttribute\022"
  "\025\n\rnamespace_uri\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005"
  "value\030\003 \001(\t\022\'\n\006source\030\004 \001(\0132\027.aapt.pb.So"
  "urcePosition\022\023\n\013resource_id\030\005 \001(\r\022$\n\rcom"
  "piled_item\030\006 \001(\0132\r.aapt.pb.Item\"\347\001\n\tMacr"
  "oBody\022\022\n\nraw_string\030\001 \001(\t\022*\n\014style_strin"
  "g\030\002 \001(\0132\024.aapt.pb.StyleString\022\?\n\027untrans"
  "latable_sections\030\003 \003(\0132\036.aapt.pb.Untrans"
  "latableSection\0220\n\017namespace_stack\030\004 \003(\0132"
  "\027.aapt.pb.NamespaceAlias\022\'\n\006source\030\005 \001(\013"
  "2\027.aapt.pb.SourcePosition\"J\n\016NamespaceAl"
  "ias\022\016\n\006prefix\030\001 \001(\t\022\024\n\014package_name\030\002 \001("
  "\t\022\022\n\nis_private\030\003 \001(\010\"\202\001\n\013StyleString\022\013\n"
  "\003str\030\001 \001(\t\022(\n\005spans\030\002 \003(\0132\031.aapt.pb.Styl"
  "eString.Span\032<\n\004Span\022\014\n\004name\030\001 \001(\t\022\023\n\013st"
  "art_index\030\002 \001(\r\022\021\n\tend_index\030\003 \001(\r\"\?\n\025Un"
  "translatableSection\022\023\n\013start_index\030\001 \001(\004"
  "\022\021\n\tend_index\030\002 \001(\004B\022\n\020com.android.aaptb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto_deps[1] = {
  &::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fConfiguration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto_sccs[49] = {
  &scc_info_AllowNew_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Array_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Array_Element_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Attribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Attribute_Symbol_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Boolean_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_CompoundValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_ConfigValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_EntryId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_FileReference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Id_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_MacroBody_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_NamespaceAlias_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Overlayable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_OverlayableItem_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Package_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_PackageId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Plural_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Plural_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Primitive_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Primitive_EmptyType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Primitive_NullType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_RawString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_ResourceTable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_StagedId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_String_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_StringPool_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Style_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Style_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_StyleString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_StyleString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Styleable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Styleable_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_StyledString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_StyledString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_ToolFingerprint_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Type_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_TypeId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_UntranslatableSection_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Value_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_Visibility_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_XmlAttribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
  &scc_info_XmlNamespace_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto = {
  &descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto, "frameworks/base/tools/aapt2/Resources.proto", 5807,
  &descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto_once, descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto_sccs, descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto_deps, 49, 1,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto, 50, file_level_enum_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto, file_level_service_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto), true);
namespace aapt {
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[0];
}
bool Visibility_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Visibility_Level Visibility::UNKNOWN;
constexpr Visibility_Level Visibility::PRIVATE;
constexpr Visibility_Level Visibility::PUBLIC;
constexpr Visibility_Level Visibility::Level_MIN;
constexpr Visibility_Level Visibility::Level_MAX;
constexpr int Visibility::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverlayableItem_Policy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[1];
}
bool OverlayableItem_Policy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OverlayableItem_Policy OverlayableItem::NONE;
constexpr OverlayableItem_Policy OverlayableItem::PUBLIC;
constexpr OverlayableItem_Policy OverlayableItem::SYSTEM;
constexpr OverlayableItem_Policy OverlayableItem::VENDOR;
constexpr OverlayableItem_Policy OverlayableItem::PRODUCT;
constexpr OverlayableItem_Policy OverlayableItem::SIGNATURE;
constexpr OverlayableItem_Policy OverlayableItem::ODM;
constexpr OverlayableItem_Policy OverlayableItem::OEM;
constexpr OverlayableItem_Policy OverlayableItem::ACTOR;
constexpr OverlayableItem_Policy OverlayableItem::CONFIG_SIGNATURE;
constexpr OverlayableItem_Policy OverlayableItem::Policy_MIN;
constexpr OverlayableItem_Policy OverlayableItem::Policy_MAX;
constexpr int OverlayableItem::Policy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reference_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[2];
}
bool Reference_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Reference_Type Reference::REFERENCE;
constexpr Reference_Type Reference::ATTRIBUTE;
constexpr Reference_Type Reference::Type_MIN;
constexpr Reference_Type Reference::Type_MAX;
constexpr int Reference::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileReference_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[3];
}
bool FileReference_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FileReference_Type FileReference::UNKNOWN;
constexpr FileReference_Type FileReference::PNG;
constexpr FileReference_Type FileReference::BINARY_XML;
constexpr FileReference_Type FileReference::PROTO_XML;
constexpr FileReference_Type FileReference::Type_MIN;
constexpr FileReference_Type FileReference::Type_MAX;
constexpr int FileReference::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Attribute_FormatFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[4];
}
bool Attribute_FormatFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 65535:
    case 65536:
    case 131072:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Attribute_FormatFlags Attribute::NONE;
constexpr Attribute_FormatFlags Attribute::ANY;
constexpr Attribute_FormatFlags Attribute::REFERENCE;
constexpr Attribute_FormatFlags Attribute::STRING;
constexpr Attribute_FormatFlags Attribute::INTEGER;
constexpr Attribute_FormatFlags Attribute::BOOLEAN;
constexpr Attribute_FormatFlags Attribute::COLOR;
constexpr Attribute_FormatFlags Attribute::FLOAT;
constexpr Attribute_FormatFlags Attribute::DIMENSION;
constexpr Attribute_FormatFlags Attribute::FRACTION;
constexpr Attribute_FormatFlags Attribute::ENUM;
constexpr Attribute_FormatFlags Attribute::FLAGS;
constexpr Attribute_FormatFlags Attribute::FormatFlags_MIN;
constexpr Attribute_FormatFlags Attribute::FormatFlags_MAX;
constexpr int Attribute::FormatFlags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Plural_Arity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto[5];
}
bool Plural_Arity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Plural_Arity Plural::ZERO;
constexpr Plural_Arity Plural::ONE;
constexpr Plural_Arity Plural::TWO;
constexpr Plural_Arity Plural::FEW;
constexpr Plural_Arity Plural::MANY;
constexpr Plural_Arity Plural::OTHER;
constexpr Plural_Arity Plural::Arity_MIN;
constexpr Plural_Arity Plural::Arity_MAX;
constexpr int Plural::Arity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StringPool::InitAsDefaultInstance() {
}
class StringPool::_Internal {
 public:
};

StringPool::StringPool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.StringPool)
}
StringPool::StringPool(const StringPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StringPool)
}

void StringPool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringPool_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringPool::~StringPool() {
  // @@protoc_insertion_point(destructor:aapt.pb.StringPool)
  SharedDtor();
}

void StringPool::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringPool& StringPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringPool_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void StringPool::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StringPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringPool::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.StringPool)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.StringPool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.StringPool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringPool::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.StringPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.StringPool)
}

::PROTOBUF_NAMESPACE_ID::uint8* StringPool::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StringPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StringPool)
  return target;
}

size_t StringPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StringPool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.StringPool)
  GOOGLE_DCHECK_NE(&from, this);
  const StringPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.StringPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.StringPool)
    MergeFrom(*source);
  }
}

void StringPool::MergeFrom(const StringPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StringPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void StringPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.StringPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringPool::CopyFrom(const StringPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StringPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringPool::IsInitialized() const {
  return true;
}

void StringPool::InternalSwap(StringPool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourcePosition::InitAsDefaultInstance() {
}
class SourcePosition::_Internal {
 public:
};

SourcePosition::SourcePosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.SourcePosition)
}
SourcePosition::SourcePosition(const SourcePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&line_number_, &from.line_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_number_) -
    reinterpret_cast<char*>(&line_number_)) + sizeof(column_number_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.SourcePosition)
}

void SourcePosition::SharedCtor() {
  ::memset(&line_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_number_) -
      reinterpret_cast<char*>(&line_number_)) + sizeof(column_number_));
}

SourcePosition::~SourcePosition() {
  // @@protoc_insertion_point(destructor:aapt.pb.SourcePosition)
  SharedDtor();
}

void SourcePosition::SharedDtor() {
}

void SourcePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourcePosition& SourcePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourcePosition_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void SourcePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.SourcePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&line_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_number_) -
      reinterpret_cast<char*>(&line_number_)) + sizeof(column_number_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SourcePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 line_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          line_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 column_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          column_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SourcePosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.SourcePosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 line_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 column_number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &column_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.SourcePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.SourcePosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SourcePosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.SourcePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line_number = 1;
  if (this->line_number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->line_number(), output);
  }

  // uint32 column_number = 2;
  if (this->column_number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->column_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.SourcePosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* SourcePosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.SourcePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line_number = 1;
  if (this->line_number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->line_number(), target);
  }

  // uint32 column_number = 2;
  if (this->column_number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->column_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.SourcePosition)
  return target;
}

size_t SourcePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.SourcePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 line_number = 1;
  if (this->line_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->line_number());
  }

  // uint32 column_number = 2;
  if (this->column_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->column_number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourcePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.SourcePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const SourcePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourcePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.SourcePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.SourcePosition)
    MergeFrom(*source);
  }
}

void SourcePosition::MergeFrom(const SourcePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.SourcePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line_number() != 0) {
    set_line_number(from.line_number());
  }
  if (from.column_number() != 0) {
    set_column_number(from.column_number());
  }
}

void SourcePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.SourcePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourcePosition::CopyFrom(const SourcePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.SourcePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourcePosition::IsInitialized() const {
  return true;
}

void SourcePosition::InternalSwap(SourcePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(line_number_, other->line_number_);
  swap(column_number_, other->column_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourcePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Source::InitAsDefaultInstance() {
  ::aapt::pb::_Source_default_instance_._instance.get_mutable()->position_ = const_cast< ::aapt::pb::SourcePosition*>(
      ::aapt::pb::SourcePosition::internal_default_instance());
}
class Source::_Internal {
 public:
  static const ::aapt::pb::SourcePosition& position(const Source* msg);
};

const ::aapt::pb::SourcePosition&
Source::_Internal::position(const Source* msg) {
  return *msg->position_;
}
Source::Source()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Source)
}
Source::Source(const Source& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::aapt::pb::SourcePosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  path_idx_ = from.path_idx_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Source)
}

void Source::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_idx_) -
      reinterpret_cast<char*>(&position_)) + sizeof(path_idx_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:aapt.pb.Source)
  SharedDtor();
}

void Source::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Source& Source::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Source_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Source)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  path_idx_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Source::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 path_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          path_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.SourcePosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Source::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Source)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 path_idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.SourcePosition position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Source)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Source::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Source)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 path_idx = 1;
  if (this->path_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->path_idx(), output);
  }

  // .aapt.pb.SourcePosition position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Source)
}

::PROTOBUF_NAMESPACE_ID::uint8* Source::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Source)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 path_idx = 1;
  if (this->path_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->path_idx(), target);
  }

  // .aapt.pb.SourcePosition position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Source)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aapt.pb.SourcePosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint32 path_idx = 1;
  if (this->path_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->path_idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Source::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Source)
  GOOGLE_DCHECK_NE(&from, this);
  const Source* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Source>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Source)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Source)
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Source)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::aapt::pb::SourcePosition::MergeFrom(from.position());
  }
  if (from.path_idx() != 0) {
    set_path_idx(from.path_idx());
  }
}

void Source::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::InternalSwap(Source* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(path_idx_, other->path_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Source::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToolFingerprint::InitAsDefaultInstance() {
}
class ToolFingerprint::_Internal {
 public:
};

ToolFingerprint::ToolFingerprint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.ToolFingerprint)
}
ToolFingerprint::ToolFingerprint(const ToolFingerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.tool().empty()) {
    tool_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tool_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.ToolFingerprint)
}

void ToolFingerprint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ToolFingerprint_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  tool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ToolFingerprint::~ToolFingerprint() {
  // @@protoc_insertion_point(destructor:aapt.pb.ToolFingerprint)
  SharedDtor();
}

void ToolFingerprint::SharedDtor() {
  tool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ToolFingerprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolFingerprint& ToolFingerprint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToolFingerprint_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void ToolFingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.ToolFingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tool_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ToolFingerprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tool(), ptr, ctx, "aapt.pb.ToolFingerprint.tool");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_version(), ptr, ctx, "aapt.pb.ToolFingerprint.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ToolFingerprint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.ToolFingerprint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tool = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tool()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tool().data(), static_cast<int>(this->tool().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.ToolFingerprint.tool"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.ToolFingerprint.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.ToolFingerprint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.ToolFingerprint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ToolFingerprint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.ToolFingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool = 1;
  if (this->tool().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tool().data(), static_cast<int>(this->tool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.ToolFingerprint.tool");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tool(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.ToolFingerprint.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.ToolFingerprint)
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolFingerprint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.ToolFingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tool = 1;
  if (this->tool().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tool().data(), static_cast<int>(this->tool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.ToolFingerprint.tool");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->tool(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.ToolFingerprint.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.ToolFingerprint)
  return target;
}

size_t ToolFingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.ToolFingerprint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tool = 1;
  if (this->tool().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tool());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolFingerprint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.ToolFingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolFingerprint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolFingerprint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.ToolFingerprint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.ToolFingerprint)
    MergeFrom(*source);
  }
}

void ToolFingerprint::MergeFrom(const ToolFingerprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.ToolFingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tool().size() > 0) {

    tool_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tool_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void ToolFingerprint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.ToolFingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolFingerprint::CopyFrom(const ToolFingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.ToolFingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolFingerprint::IsInitialized() const {
  return true;
}

void ToolFingerprint::InternalSwap(ToolFingerprint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tool_.Swap(&other->tool_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolFingerprint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceTable::InitAsDefaultInstance() {
  ::aapt::pb::_ResourceTable_default_instance_._instance.get_mutable()->source_pool_ = const_cast< ::aapt::pb::StringPool*>(
      ::aapt::pb::StringPool::internal_default_instance());
}
class ResourceTable::_Internal {
 public:
  static const ::aapt::pb::StringPool& source_pool(const ResourceTable* msg);
};

const ::aapt::pb::StringPool&
ResourceTable::_Internal::source_pool(const ResourceTable* msg) {
  return *msg->source_pool_;
}
ResourceTable::ResourceTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.ResourceTable)
}
ResourceTable::ResourceTable(const ResourceTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      package_(from.package_),
      overlayable_(from.overlayable_),
      tool_fingerprint_(from.tool_fingerprint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_pool()) {
    source_pool_ = new ::aapt::pb::StringPool(*from.source_pool_);
  } else {
    source_pool_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.ResourceTable)
}

void ResourceTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceTable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  source_pool_ = nullptr;
}

ResourceTable::~ResourceTable() {
  // @@protoc_insertion_point(destructor:aapt.pb.ResourceTable)
  SharedDtor();
}

void ResourceTable::SharedDtor() {
  if (this != internal_default_instance()) delete source_pool_;
}

void ResourceTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceTable& ResourceTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceTable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void ResourceTable::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.ResourceTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  package_.Clear();
  overlayable_.Clear();
  tool_fingerprint_.Clear();
  if (GetArenaNoVirtual() == nullptr && source_pool_ != nullptr) {
    delete source_pool_;
  }
  source_pool_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResourceTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.StringPool source_pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.Package package = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_package(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.Overlayable overlayable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_overlayable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tool_fingerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResourceTable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.ResourceTable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.StringPool source_pool = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_pool()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.Package package = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.Overlayable overlayable = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_overlayable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tool_fingerprint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.ResourceTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.ResourceTable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResourceTable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.ResourceTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.StringPool source_pool = 1;
  if (this->has_source_pool()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source_pool(this), output);
  }

  // repeated .aapt.pb.Package package = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->package(static_cast<int>(i)),
      output);
  }

  // repeated .aapt.pb.Overlayable overlayable = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlayable_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->overlayable(static_cast<int>(i)),
      output);
  }

  // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tool_fingerprint_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tool_fingerprint(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.ResourceTable)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceTable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.ResourceTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.StringPool source_pool = 1;
  if (this->has_source_pool()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source_pool(this), target);
  }

  // repeated .aapt.pb.Package package = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->package_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->package(static_cast<int>(i)), target);
  }

  // repeated .aapt.pb.Overlayable overlayable = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlayable_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->overlayable(static_cast<int>(i)), target);
  }

  // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tool_fingerprint_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tool_fingerprint(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.ResourceTable)
  return target;
}

size_t ResourceTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.ResourceTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Package package = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->package_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->package(static_cast<int>(i)));
    }
  }

  // repeated .aapt.pb.Overlayable overlayable = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->overlayable_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->overlayable(static_cast<int>(i)));
    }
  }

  // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tool_fingerprint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tool_fingerprint(static_cast<int>(i)));
    }
  }

  // .aapt.pb.StringPool source_pool = 1;
  if (this->has_source_pool()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_pool_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.ResourceTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.ResourceTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.ResourceTable)
    MergeFrom(*source);
  }
}

void ResourceTable::MergeFrom(const ResourceTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.ResourceTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  package_.MergeFrom(from.package_);
  overlayable_.MergeFrom(from.overlayable_);
  tool_fingerprint_.MergeFrom(from.tool_fingerprint_);
  if (from.has_source_pool()) {
    mutable_source_pool()->::aapt::pb::StringPool::MergeFrom(from.source_pool());
  }
}

void ResourceTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.ResourceTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceTable::CopyFrom(const ResourceTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.ResourceTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceTable::IsInitialized() const {
  return true;
}

void ResourceTable::InternalSwap(ResourceTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&package_)->InternalSwap(CastToBase(&other->package_));
  CastToBase(&overlayable_)->InternalSwap(CastToBase(&other->overlayable_));
  CastToBase(&tool_fingerprint_)->InternalSwap(CastToBase(&other->tool_fingerprint_));
  swap(source_pool_, other->source_pool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PackageId::InitAsDefaultInstance() {
}
class PackageId::_Internal {
 public:
};

PackageId::PackageId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.PackageId)
}
PackageId::PackageId(const PackageId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.PackageId)
}

void PackageId::SharedCtor() {
  id_ = 0u;
}

PackageId::~PackageId() {
  // @@protoc_insertion_point(destructor:aapt.pb.PackageId)
  SharedDtor();
}

void PackageId::SharedDtor() {
}

void PackageId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PackageId& PackageId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PackageId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void PackageId::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.PackageId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PackageId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PackageId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.PackageId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.PackageId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.PackageId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PackageId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.PackageId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.PackageId)
}

::PROTOBUF_NAMESPACE_ID::uint8* PackageId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.PackageId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.PackageId)
  return target;
}

size_t PackageId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.PackageId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackageId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.PackageId)
  GOOGLE_DCHECK_NE(&from, this);
  const PackageId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PackageId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.PackageId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.PackageId)
    MergeFrom(*source);
  }
}

void PackageId::MergeFrom(const PackageId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.PackageId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void PackageId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.PackageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageId::CopyFrom(const PackageId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.PackageId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageId::IsInitialized() const {
  return true;
}

void PackageId::InternalSwap(PackageId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Package::InitAsDefaultInstance() {
  ::aapt::pb::_Package_default_instance_._instance.get_mutable()->package_id_ = const_cast< ::aapt::pb::PackageId*>(
      ::aapt::pb::PackageId::internal_default_instance());
}
class Package::_Internal {
 public:
  static const ::aapt::pb::PackageId& package_id(const Package* msg);
};

const ::aapt::pb::PackageId&
Package::_Internal::package_id(const Package* msg) {
  return *msg->package_id_;
}
Package::Package()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Package)
}
Package::Package(const Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      type_(from.type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.package_name().empty()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  if (from.has_package_id()) {
    package_id_ = new ::aapt::pb::PackageId(*from.package_id_);
  } else {
    package_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Package)
}

void Package::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Package_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_id_ = nullptr;
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:aapt.pb.Package)
  SharedDtor();
}

void Package::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete package_id_;
}

void Package::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Package& Package::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Package_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && package_id_ != nullptr) {
    delete package_id_;
  }
  package_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Package::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.PackageId package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_package_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_package_name(), ptr, ctx, "aapt.pb.Package.package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Package::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Package)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.PackageId package_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_package_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->package_name().data(), static_cast<int>(this->package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Package.package_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.Type type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Package)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Package::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.PackageId package_id = 1;
  if (this->has_package_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::package_id(this), output);
  }

  // string package_name = 2;
  if (this->package_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Package.package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  // repeated .aapt.pb.Type type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->type(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Package)
}

::PROTOBUF_NAMESPACE_ID::uint8* Package::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.PackageId package_id = 1;
  if (this->has_package_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::package_id(this), target);
  }

  // string package_name = 2;
  if (this->package_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Package.package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->package_name(), target);
  }

  // repeated .aapt.pb.Type type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->type(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Package)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Type type = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->type(static_cast<int>(i)));
    }
  }

  // string package_name = 2;
  if (this->package_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->package_name());
  }

  // .aapt.pb.PackageId package_id = 1;
  if (this->has_package_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *package_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Package::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const Package* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Package>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Package)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Package)
    MergeFrom(*source);
  }
}

void Package::MergeFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  if (from.package_name().size() > 0) {

    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  if (from.has_package_id()) {
    mutable_package_id()->::aapt::pb::PackageId::MergeFrom(from.package_id());
  }
}

void Package::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::InternalSwap(Package* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&type_)->InternalSwap(CastToBase(&other->type_));
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(package_id_, other->package_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Package::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TypeId::InitAsDefaultInstance() {
}
class TypeId::_Internal {
 public:
};

TypeId::TypeId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.TypeId)
}
TypeId::TypeId(const TypeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.TypeId)
}

void TypeId::SharedCtor() {
  id_ = 0u;
}

TypeId::~TypeId() {
  // @@protoc_insertion_point(destructor:aapt.pb.TypeId)
  SharedDtor();
}

void TypeId::SharedDtor() {
}

void TypeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TypeId& TypeId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TypeId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void TypeId::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.TypeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TypeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TypeId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.TypeId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.TypeId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.TypeId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TypeId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.TypeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.TypeId)
}

::PROTOBUF_NAMESPACE_ID::uint8* TypeId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.TypeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.TypeId)
  return target;
}

size_t TypeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.TypeId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.TypeId)
  GOOGLE_DCHECK_NE(&from, this);
  const TypeId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TypeId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.TypeId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.TypeId)
    MergeFrom(*source);
  }
}

void TypeId::MergeFrom(const TypeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.TypeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void TypeId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.TypeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeId::CopyFrom(const TypeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.TypeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeId::IsInitialized() const {
  return true;
}

void TypeId::InternalSwap(TypeId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type::InitAsDefaultInstance() {
  ::aapt::pb::_Type_default_instance_._instance.get_mutable()->type_id_ = const_cast< ::aapt::pb::TypeId*>(
      ::aapt::pb::TypeId::internal_default_instance());
}
class Type::_Internal {
 public:
  static const ::aapt::pb::TypeId& type_id(const Type* msg);
};

const ::aapt::pb::TypeId&
Type::_Internal::type_id(const Type* msg) {
  return *msg->type_id_;
}
Type::Type()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Type)
}
Type::Type(const Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type_id()) {
    type_id_ = new ::aapt::pb::TypeId(*from.type_id_);
  } else {
    type_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Type)
}

void Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_id_ = nullptr;
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:aapt.pb.Type)
  SharedDtor();
}

void Type::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_id_;
}

void Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type& Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_id_ != nullptr) {
    delete type_id_;
  }
  type_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.TypeId type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_type_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "aapt.pb.Type.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.Entry entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Type::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Type)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.TypeId type_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_type_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Type.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.Entry entry = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Type)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Type::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.TypeId type_id = 1;
  if (this->has_type_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::type_id(this), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Type.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .aapt.pb.Entry entry = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->entry(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Type)
}

::PROTOBUF_NAMESPACE_ID::uint8* Type::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.TypeId type_id = 1;
  if (this->has_type_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::type_id(this), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Type.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .aapt.pb.Entry entry = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->entry(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Type)
  return target;
}

size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Type)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Entry entry = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entry(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aapt.pb.TypeId type_id = 1;
  if (this->has_type_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Type)
  GOOGLE_DCHECK_NE(&from, this);
  const Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Type)
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_type_id()) {
    mutable_type_id()->::aapt::pb::TypeId::MergeFrom(from.type_id());
  }
}

void Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::InternalSwap(Type* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entry_)->InternalSwap(CastToBase(&other->entry_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_id_, other->type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Visibility::InitAsDefaultInstance() {
  ::aapt::pb::_Visibility_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
}
class Visibility::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Visibility* msg);
};

const ::aapt::pb::Source&
Visibility::_Internal::source(const Visibility* msg) {
  return *msg->source_;
}
Visibility::Visibility()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Visibility)
}
Visibility::Visibility(const Visibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&staged_api_) -
    reinterpret_cast<char*>(&level_)) + sizeof(staged_api_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Visibility)
}

void Visibility::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Visibility_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&staged_api_) -
      reinterpret_cast<char*>(&source_)) + sizeof(staged_api_));
}

Visibility::~Visibility() {
  // @@protoc_insertion_point(destructor:aapt.pb.Visibility)
  SharedDtor();
}

void Visibility::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
}

void Visibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Visibility& Visibility::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Visibility_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Visibility::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Visibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&staged_api_) -
      reinterpret_cast<char*>(&level_)) + sizeof(staged_api_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Visibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Visibility.Level level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_level(static_cast<::aapt::pb::Visibility_Level>(val));
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Source source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.Visibility.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool staged_api = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          staged_api_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Visibility::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Visibility)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Visibility.Level level = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::aapt::pb::Visibility_Level >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Source source = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Visibility.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool staged_api = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &staged_api_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Visibility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Visibility)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Visibility::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Visibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Visibility.Level level = 1;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // .aapt.pb.Source source = 2;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::source(this), output);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Visibility.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // bool staged_api = 4;
  if (this->staged_api() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->staged_api(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Visibility)
}

::PROTOBUF_NAMESPACE_ID::uint8* Visibility::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Visibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Visibility.Level level = 1;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // .aapt.pb.Source source = 2;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::source(this), target);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Visibility.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // bool staged_api = 4;
  if (this->staged_api() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->staged_api(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Visibility)
  return target;
}

size_t Visibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Visibility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 3;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .aapt.pb.Visibility.Level level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->level());
  }

  // bool staged_api = 4;
  if (this->staged_api() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visibility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Visibility)
  GOOGLE_DCHECK_NE(&from, this);
  const Visibility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Visibility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Visibility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Visibility)
    MergeFrom(*source);
  }
}

void Visibility::MergeFrom(const Visibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Visibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.staged_api() != 0) {
    set_staged_api(from.staged_api());
  }
}

void Visibility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Visibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visibility::CopyFrom(const Visibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Visibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visibility::IsInitialized() const {
  return true;
}

void Visibility::InternalSwap(Visibility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(level_, other->level_);
  swap(staged_api_, other->staged_api_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Visibility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllowNew::InitAsDefaultInstance() {
  ::aapt::pb::_AllowNew_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
}
class AllowNew::_Internal {
 public:
  static const ::aapt::pb::Source& source(const AllowNew* msg);
};

const ::aapt::pb::Source&
AllowNew::_Internal::source(const AllowNew* msg) {
  return *msg->source_;
}
AllowNew::AllowNew()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.AllowNew)
}
AllowNew::AllowNew(const AllowNew& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.AllowNew)
}

void AllowNew::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllowNew_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_ = nullptr;
}

AllowNew::~AllowNew() {
  // @@protoc_insertion_point(destructor:aapt.pb.AllowNew)
  SharedDtor();
}

void AllowNew::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
}

void AllowNew::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowNew& AllowNew::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllowNew_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void AllowNew::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.AllowNew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllowNew::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.AllowNew.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllowNew::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.AllowNew)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.AllowNew.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.AllowNew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.AllowNew)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllowNew::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.AllowNew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.AllowNew.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.AllowNew)
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowNew::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.AllowNew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.AllowNew.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.AllowNew)
  return target;
}

size_t AllowNew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.AllowNew)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowNew::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.AllowNew)
  GOOGLE_DCHECK_NE(&from, this);
  const AllowNew* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllowNew>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.AllowNew)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.AllowNew)
    MergeFrom(*source);
  }
}

void AllowNew::MergeFrom(const AllowNew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.AllowNew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
}

void AllowNew::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.AllowNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllowNew::CopyFrom(const AllowNew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.AllowNew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowNew::IsInitialized() const {
  return true;
}

void AllowNew::InternalSwap(AllowNew* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowNew::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Overlayable::InitAsDefaultInstance() {
  ::aapt::pb::_Overlayable_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
}
class Overlayable::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Overlayable* msg);
};

const ::aapt::pb::Source&
Overlayable::_Internal::source(const Overlayable* msg) {
  return *msg->source_;
}
Overlayable::Overlayable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Overlayable)
}
Overlayable::Overlayable(const Overlayable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  actor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.actor().empty()) {
    actor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actor_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Overlayable)
}

void Overlayable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Overlayable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_ = nullptr;
}

Overlayable::~Overlayable() {
  // @@protoc_insertion_point(destructor:aapt.pb.Overlayable)
  SharedDtor();
}

void Overlayable::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
}

void Overlayable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Overlayable& Overlayable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Overlayable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Overlayable::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Overlayable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Overlayable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "aapt.pb.Overlayable.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Source source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string actor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_actor(), ptr, ctx, "aapt.pb.Overlayable.actor");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Overlayable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Overlayable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Overlayable.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Source source = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string actor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_actor()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->actor().data(), static_cast<int>(this->actor().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Overlayable.actor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Overlayable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Overlayable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Overlayable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Overlayable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Overlayable.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .aapt.pb.Source source = 2;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::source(this), output);
  }

  // string actor = 3;
  if (this->actor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->actor().data(), static_cast<int>(this->actor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Overlayable.actor");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->actor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Overlayable)
}

::PROTOBUF_NAMESPACE_ID::uint8* Overlayable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Overlayable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Overlayable.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .aapt.pb.Source source = 2;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::source(this), target);
  }

  // string actor = 3;
  if (this->actor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->actor().data(), static_cast<int>(this->actor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Overlayable.actor");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->actor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Overlayable)
  return target;
}

size_t Overlayable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Overlayable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string actor = 3;
  if (this->actor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->actor());
  }

  // .aapt.pb.Source source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Overlayable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Overlayable)
  GOOGLE_DCHECK_NE(&from, this);
  const Overlayable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Overlayable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Overlayable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Overlayable)
    MergeFrom(*source);
  }
}

void Overlayable::MergeFrom(const Overlayable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Overlayable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.actor().size() > 0) {

    actor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.actor_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
}

void Overlayable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Overlayable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Overlayable::CopyFrom(const Overlayable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Overlayable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Overlayable::IsInitialized() const {
  return true;
}

void Overlayable::InternalSwap(Overlayable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  actor_.Swap(&other->actor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Overlayable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OverlayableItem::InitAsDefaultInstance() {
  ::aapt::pb::_OverlayableItem_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
}
class OverlayableItem::_Internal {
 public:
  static const ::aapt::pb::Source& source(const OverlayableItem* msg);
};

const ::aapt::pb::Source&
OverlayableItem::_Internal::source(const OverlayableItem* msg) {
  return *msg->source_;
}
OverlayableItem::OverlayableItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.OverlayableItem)
}
OverlayableItem::OverlayableItem(const OverlayableItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      policy_(from.policy_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  overlayable_idx_ = from.overlayable_idx_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.OverlayableItem)
}

void OverlayableItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OverlayableItem_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overlayable_idx_) -
      reinterpret_cast<char*>(&source_)) + sizeof(overlayable_idx_));
}

OverlayableItem::~OverlayableItem() {
  // @@protoc_insertion_point(destructor:aapt.pb.OverlayableItem)
  SharedDtor();
}

void OverlayableItem::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
}

void OverlayableItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OverlayableItem& OverlayableItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OverlayableItem_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void OverlayableItem::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.OverlayableItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_.Clear();
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  overlayable_idx_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OverlayableItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.OverlayableItem.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_policy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_policy(static_cast<::aapt::pb::OverlayableItem_Policy>(val));
        } else goto handle_unusual;
        continue;
      // uint32 overlayable_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          overlayable_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OverlayableItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.OverlayableItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.OverlayableItem.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_policy(static_cast< ::aapt::pb::OverlayableItem_Policy >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_policy(static_cast< ::aapt::pb::OverlayableItem_Policy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 overlayable_idx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overlayable_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.OverlayableItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.OverlayableItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OverlayableItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.OverlayableItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.OverlayableItem.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
  if (this->policy_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_policy_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->policy_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->policy(i), output);
  }

  // uint32 overlayable_idx = 4;
  if (this->overlayable_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->overlayable_idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.OverlayableItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* OverlayableItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.OverlayableItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.OverlayableItem.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
  if (this->policy_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _policy_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->policy_, target);
  }

  // uint32 overlayable_idx = 4;
  if (this->overlayable_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->overlayable_idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.OverlayableItem)
  return target;
}

size_t OverlayableItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.OverlayableItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->policy_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->policy(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _policy_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // uint32 overlayable_idx = 4;
  if (this->overlayable_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->overlayable_idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OverlayableItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.OverlayableItem)
  GOOGLE_DCHECK_NE(&from, this);
  const OverlayableItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OverlayableItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.OverlayableItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.OverlayableItem)
    MergeFrom(*source);
  }
}

void OverlayableItem::MergeFrom(const OverlayableItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.OverlayableItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policy_.MergeFrom(from.policy_);
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.overlayable_idx() != 0) {
    set_overlayable_idx(from.overlayable_idx());
  }
}

void OverlayableItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.OverlayableItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverlayableItem::CopyFrom(const OverlayableItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.OverlayableItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlayableItem::IsInitialized() const {
  return true;
}

void OverlayableItem::InternalSwap(OverlayableItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  policy_.InternalSwap(&other->policy_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(overlayable_idx_, other->overlayable_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlayableItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StagedId::InitAsDefaultInstance() {
  ::aapt::pb::_StagedId_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
}
class StagedId::_Internal {
 public:
  static const ::aapt::pb::Source& source(const StagedId* msg);
};

const ::aapt::pb::Source&
StagedId::_Internal::source(const StagedId* msg) {
  return *msg->source_;
}
StagedId::StagedId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.StagedId)
}
StagedId::StagedId(const StagedId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  staged_id_ = from.staged_id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StagedId)
}

void StagedId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StagedId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&staged_id_) -
      reinterpret_cast<char*>(&source_)) + sizeof(staged_id_));
}

StagedId::~StagedId() {
  // @@protoc_insertion_point(destructor:aapt.pb.StagedId)
  SharedDtor();
}

void StagedId::SharedDtor() {
  if (this != internal_default_instance()) delete source_;
}

void StagedId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StagedId& StagedId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StagedId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void StagedId::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StagedId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  staged_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StagedId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 staged_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          staged_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StagedId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.StagedId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 staged_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &staged_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.StagedId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.StagedId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StagedId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.StagedId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // uint32 staged_id = 2;
  if (this->staged_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->staged_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.StagedId)
}

::PROTOBUF_NAMESPACE_ID::uint8* StagedId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StagedId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // uint32 staged_id = 2;
  if (this->staged_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->staged_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StagedId)
  return target;
}

size_t StagedId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StagedId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // uint32 staged_id = 2;
  if (this->staged_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->staged_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StagedId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.StagedId)
  GOOGLE_DCHECK_NE(&from, this);
  const StagedId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StagedId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.StagedId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.StagedId)
    MergeFrom(*source);
  }
}

void StagedId::MergeFrom(const StagedId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StagedId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.staged_id() != 0) {
    set_staged_id(from.staged_id());
  }
}

void StagedId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.StagedId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StagedId::CopyFrom(const StagedId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StagedId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StagedId::IsInitialized() const {
  return true;
}

void StagedId::InternalSwap(StagedId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(source_, other->source_);
  swap(staged_id_, other->staged_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StagedId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntryId::InitAsDefaultInstance() {
}
class EntryId::_Internal {
 public:
};

EntryId::EntryId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.EntryId)
}
EntryId::EntryId(const EntryId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.EntryId)
}

void EntryId::SharedCtor() {
  id_ = 0u;
}

EntryId::~EntryId() {
  // @@protoc_insertion_point(destructor:aapt.pb.EntryId)
  SharedDtor();
}

void EntryId::SharedDtor() {
}

void EntryId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntryId& EntryId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntryId_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void EntryId::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.EntryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EntryId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EntryId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.EntryId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.EntryId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.EntryId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EntryId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.EntryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.EntryId)
}

::PROTOBUF_NAMESPACE_ID::uint8* EntryId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.EntryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.EntryId)
  return target;
}

size_t EntryId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.EntryId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntryId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.EntryId)
  GOOGLE_DCHECK_NE(&from, this);
  const EntryId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntryId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.EntryId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.EntryId)
    MergeFrom(*source);
  }
}

void EntryId::MergeFrom(const EntryId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.EntryId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void EntryId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.EntryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryId::CopyFrom(const EntryId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.EntryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryId::IsInitialized() const {
  return true;
}

void EntryId::InternalSwap(EntryId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntryId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Entry::InitAsDefaultInstance() {
  ::aapt::pb::_Entry_default_instance_._instance.get_mutable()->entry_id_ = const_cast< ::aapt::pb::EntryId*>(
      ::aapt::pb::EntryId::internal_default_instance());
  ::aapt::pb::_Entry_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::aapt::pb::Visibility*>(
      ::aapt::pb::Visibility::internal_default_instance());
  ::aapt::pb::_Entry_default_instance_._instance.get_mutable()->allow_new_ = const_cast< ::aapt::pb::AllowNew*>(
      ::aapt::pb::AllowNew::internal_default_instance());
  ::aapt::pb::_Entry_default_instance_._instance.get_mutable()->overlayable_item_ = const_cast< ::aapt::pb::OverlayableItem*>(
      ::aapt::pb::OverlayableItem::internal_default_instance());
  ::aapt::pb::_Entry_default_instance_._instance.get_mutable()->staged_id_ = const_cast< ::aapt::pb::StagedId*>(
      ::aapt::pb::StagedId::internal_default_instance());
}
class Entry::_Internal {
 public:
  static const ::aapt::pb::EntryId& entry_id(const Entry* msg);
  static const ::aapt::pb::Visibility& visibility(const Entry* msg);
  static const ::aapt::pb::AllowNew& allow_new(const Entry* msg);
  static const ::aapt::pb::OverlayableItem& overlayable_item(const Entry* msg);
  static const ::aapt::pb::StagedId& staged_id(const Entry* msg);
};

const ::aapt::pb::EntryId&
Entry::_Internal::entry_id(const Entry* msg) {
  return *msg->entry_id_;
}
const ::aapt::pb::Visibility&
Entry::_Internal::visibility(const Entry* msg) {
  return *msg->visibility_;
}
const ::aapt::pb::AllowNew&
Entry::_Internal::allow_new(const Entry* msg) {
  return *msg->allow_new_;
}
const ::aapt::pb::OverlayableItem&
Entry::_Internal::overlayable_item(const Entry* msg) {
  return *msg->overlayable_item_;
}
const ::aapt::pb::StagedId&
Entry::_Internal::staged_id(const Entry* msg) {
  return *msg->staged_id_;
}
Entry::Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      config_value_(from.config_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_entry_id()) {
    entry_id_ = new ::aapt::pb::EntryId(*from.entry_id_);
  } else {
    entry_id_ = nullptr;
  }
  if (from.has_visibility()) {
    visibility_ = new ::aapt::pb::Visibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  if (from.has_allow_new()) {
    allow_new_ = new ::aapt::pb::AllowNew(*from.allow_new_);
  } else {
    allow_new_ = nullptr;
  }
  if (from.has_overlayable_item()) {
    overlayable_item_ = new ::aapt::pb::OverlayableItem(*from.overlayable_item_);
  } else {
    overlayable_item_ = nullptr;
  }
  if (from.has_staged_id()) {
    staged_id_ = new ::aapt::pb::StagedId(*from.staged_id_);
  } else {
    staged_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&entry_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&staged_id_) -
      reinterpret_cast<char*>(&entry_id_)) + sizeof(staged_id_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:aapt.pb.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entry_id_;
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete allow_new_;
  if (this != internal_default_instance()) delete overlayable_item_;
  if (this != internal_default_instance()) delete staged_id_;
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_value_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && entry_id_ != nullptr) {
    delete entry_id_;
  }
  entry_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && allow_new_ != nullptr) {
    delete allow_new_;
  }
  allow_new_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && overlayable_item_ != nullptr) {
    delete overlayable_item_;
  }
  overlayable_item_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && staged_id_ != nullptr) {
    delete staged_id_;
  }
  staged_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.EntryId entry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_entry_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "aapt.pb.Entry.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Visibility visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.AllowNew allow_new = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_allow_new(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.OverlayableItem overlayable_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_overlayable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.ConfigValue config_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_config_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.StagedId staged_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_staged_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.EntryId entry_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_entry_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Entry.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Visibility visibility = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_visibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.AllowNew allow_new = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allow_new()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.OverlayableItem overlayable_item = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_overlayable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.ConfigValue config_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_config_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.StagedId staged_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_staged_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.EntryId entry_id = 1;
  if (this->has_entry_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::entry_id(this), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Entry.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .aapt.pb.Visibility visibility = 3;
  if (this->has_visibility()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::visibility(this), output);
  }

  // .aapt.pb.AllowNew allow_new = 4;
  if (this->has_allow_new()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::allow_new(this), output);
  }

  // .aapt.pb.OverlayableItem overlayable_item = 5;
  if (this->has_overlayable_item()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::overlayable_item(this), output);
  }

  // repeated .aapt.pb.ConfigValue config_value = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_value_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->config_value(static_cast<int>(i)),
      output);
  }

  // .aapt.pb.StagedId staged_id = 7;
  if (this->has_staged_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::staged_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.EntryId entry_id = 1;
  if (this->has_entry_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::entry_id(this), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Entry.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .aapt.pb.Visibility visibility = 3;
  if (this->has_visibility()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::visibility(this), target);
  }

  // .aapt.pb.AllowNew allow_new = 4;
  if (this->has_allow_new()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::allow_new(this), target);
  }

  // .aapt.pb.OverlayableItem overlayable_item = 5;
  if (this->has_overlayable_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::overlayable_item(this), target);
  }

  // repeated .aapt.pb.ConfigValue config_value = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_value_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->config_value(static_cast<int>(i)), target);
  }

  // .aapt.pb.StagedId staged_id = 7;
  if (this->has_staged_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::staged_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.ConfigValue config_value = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->config_value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->config_value(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aapt.pb.EntryId entry_id = 1;
  if (this->has_entry_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entry_id_);
  }

  // .aapt.pb.Visibility visibility = 3;
  if (this->has_visibility()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *visibility_);
  }

  // .aapt.pb.AllowNew allow_new = 4;
  if (this->has_allow_new()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allow_new_);
  }

  // .aapt.pb.OverlayableItem overlayable_item = 5;
  if (this->has_overlayable_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overlayable_item_);
  }

  // .aapt.pb.StagedId staged_id = 7;
  if (this->has_staged_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *staged_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_value_.MergeFrom(from.config_value_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_entry_id()) {
    mutable_entry_id()->::aapt::pb::EntryId::MergeFrom(from.entry_id());
  }
  if (from.has_visibility()) {
    mutable_visibility()->::aapt::pb::Visibility::MergeFrom(from.visibility());
  }
  if (from.has_allow_new()) {
    mutable_allow_new()->::aapt::pb::AllowNew::MergeFrom(from.allow_new());
  }
  if (from.has_overlayable_item()) {
    mutable_overlayable_item()->::aapt::pb::OverlayableItem::MergeFrom(from.overlayable_item());
  }
  if (from.has_staged_id()) {
    mutable_staged_id()->::aapt::pb::StagedId::MergeFrom(from.staged_id());
  }
}

void Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&config_value_)->InternalSwap(CastToBase(&other->config_value_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entry_id_, other->entry_id_);
  swap(visibility_, other->visibility_);
  swap(allow_new_, other->allow_new_);
  swap(overlayable_item_, other->overlayable_item_);
  swap(staged_id_, other->staged_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfigValue::InitAsDefaultInstance() {
  ::aapt::pb::_ConfigValue_default_instance_._instance.get_mutable()->config_ = const_cast< ::aapt::pb::Configuration*>(
      ::aapt::pb::Configuration::internal_default_instance());
  ::aapt::pb::_ConfigValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::aapt::pb::Value*>(
      ::aapt::pb::Value::internal_default_instance());
}
class ConfigValue::_Internal {
 public:
  static const ::aapt::pb::Configuration& config(const ConfigValue* msg);
  static const ::aapt::pb::Value& value(const ConfigValue* msg);
};

const ::aapt::pb::Configuration&
ConfigValue::_Internal::config(const ConfigValue* msg) {
  return *msg->config_;
}
const ::aapt::pb::Value&
ConfigValue::_Internal::value(const ConfigValue* msg) {
  return *msg->value_;
}
void ConfigValue::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
ConfigValue::ConfigValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.ConfigValue)
}
ConfigValue::ConfigValue(const ConfigValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::aapt::pb::Configuration(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from.has_value()) {
    value_ = new ::aapt::pb::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.ConfigValue)
}

void ConfigValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&config_)) + sizeof(value_));
}

ConfigValue::~ConfigValue() {
  // @@protoc_insertion_point(destructor:aapt.pb.ConfigValue)
  SharedDtor();
}

void ConfigValue::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete value_;
}

void ConfigValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigValue& ConfigValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void ConfigValue::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.ConfigValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfigValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Configuration config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Value value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfigValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.ConfigValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Configuration config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Value value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.ConfigValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.ConfigValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfigValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.ConfigValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Configuration config = 1;
  if (this->has_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::config(this), output);
  }

  // .aapt.pb.Value value = 2;
  if (this->has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.ConfigValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.ConfigValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Configuration config = 1;
  if (this->has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::config(this), target);
  }

  // .aapt.pb.Value value = 2;
  if (this->has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.ConfigValue)
  return target;
}

size_t ConfigValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.ConfigValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aapt.pb.Configuration config = 1;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // .aapt.pb.Value value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.ConfigValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.ConfigValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.ConfigValue)
    MergeFrom(*source);
  }
}

void ConfigValue::MergeFrom(const ConfigValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.ConfigValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::aapt::pb::Configuration::MergeFrom(from.config());
  }
  if (from.has_value()) {
    mutable_value()->::aapt::pb::Value::MergeFrom(from.value());
  }
}

void ConfigValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.ConfigValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigValue::CopyFrom(const ConfigValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.ConfigValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigValue::IsInitialized() const {
  return true;
}

void ConfigValue::InternalSwap(ConfigValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::aapt::pb::_Value_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
  ::aapt::pb::_Value_default_instance_.item_ = const_cast< ::aapt::pb::Item*>(
      ::aapt::pb::Item::internal_default_instance());
  ::aapt::pb::_Value_default_instance_.compound_value_ = const_cast< ::aapt::pb::CompoundValue*>(
      ::aapt::pb::CompoundValue::internal_default_instance());
}
class Value::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Value* msg);
  static const ::aapt::pb::Item& item(const Value* msg);
  static const ::aapt::pb::CompoundValue& compound_value(const Value* msg);
};

const ::aapt::pb::Source&
Value::_Internal::source(const Value* msg) {
  return *msg->source_;
}
const ::aapt::pb::Item&
Value::_Internal::item(const Value* msg) {
  return *msg->value_.item_;
}
const ::aapt::pb::CompoundValue&
Value::_Internal::compound_value(const Value* msg) {
  return *msg->value_.compound_value_;
}
void Value::set_allocated_item(::aapt::pb::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    value_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Value.item)
}
void Value::set_allocated_compound_value(::aapt::pb::CompoundValue* compound_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (compound_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compound_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compound_value, submessage_arena);
    }
    set_has_compound_value();
    value_.compound_value_ = compound_value;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Value.compound_value)
}
Value::Value()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  weak_ = from.weak_;
  clear_has_value();
  switch (from.value_case()) {
    case kItem: {
      mutable_item()->::aapt::pb::Item::MergeFrom(from.item());
      break;
    }
    case kCompoundValue: {
      mutable_compound_value()->::aapt::pb::CompoundValue::MergeFrom(from.compound_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Value)
}

void Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Value_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weak_) -
      reinterpret_cast<char*>(&source_)) + sizeof(weak_));
  clear_has_value();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:aapt.pb.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
  if (has_value()) {
    clear_value();
  }
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Value_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.Value)
  switch (value_case()) {
    case kItem: {
      delete value_.item_;
      break;
    }
    case kCompoundValue: {
      delete value_.compound_value_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  weak_ = false;
  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.Value.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool weak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          weak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.CompoundValue compound_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_compound_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Value::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Value)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Value.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool weak = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &weak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Item item = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.CompoundValue compound_value = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compound_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Value)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Value::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Value.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // bool weak = 3;
  if (this->weak() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->weak(), output);
  }

  // .aapt.pb.Item item = 4;
  if (has_item()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::item(this), output);
  }

  // .aapt.pb.CompoundValue compound_value = 5;
  if (has_compound_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::compound_value(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Value)
}

::PROTOBUF_NAMESPACE_ID::uint8* Value::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Value.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // bool weak = 3;
  if (this->weak() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->weak(), target);
  }

  // .aapt.pb.Item item = 4;
  if (has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::item(this), target);
  }

  // .aapt.pb.CompoundValue compound_value = 5;
  if (has_compound_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::compound_value(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Value)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // bool weak = 3;
  if (this->weak() != 0) {
    total_size += 1 + 1;
  }

  switch (value_case()) {
    // .aapt.pb.Item item = 4;
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.item_);
      break;
    }
    // .aapt.pb.CompoundValue compound_value = 5;
    case kCompoundValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.compound_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.weak() != 0) {
    set_weak(from.weak());
  }
  switch (from.value_case()) {
    case kItem: {
      mutable_item()->::aapt::pb::Item::MergeFrom(from.item());
      break;
    }
    case kCompoundValue: {
      mutable_compound_value()->::aapt::pb::CompoundValue::MergeFrom(from.compound_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(weak_, other->weak_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Item::InitAsDefaultInstance() {
  ::aapt::pb::_Item_default_instance_.ref_ = const_cast< ::aapt::pb::Reference*>(
      ::aapt::pb::Reference::internal_default_instance());
  ::aapt::pb::_Item_default_instance_.str_ = const_cast< ::aapt::pb::String*>(
      ::aapt::pb::String::internal_default_instance());
  ::aapt::pb::_Item_default_instance_.raw_str_ = const_cast< ::aapt::pb::RawString*>(
      ::aapt::pb::RawString::internal_default_instance());
  ::aapt::pb::_Item_default_instance_.styled_str_ = const_cast< ::aapt::pb::StyledString*>(
      ::aapt::pb::StyledString::internal_default_instance());
  ::aapt::pb::_Item_default_instance_.file_ = const_cast< ::aapt::pb::FileReference*>(
      ::aapt::pb::FileReference::internal_default_instance());
  ::aapt::pb::_Item_default_instance_.id_ = const_cast< ::aapt::pb::Id*>(
      ::aapt::pb::Id::internal_default_instance());
  ::aapt::pb::_Item_default_instance_.prim_ = const_cast< ::aapt::pb::Primitive*>(
      ::aapt::pb::Primitive::internal_default_instance());
}
class Item::_Internal {
 public:
  static const ::aapt::pb::Reference& ref(const Item* msg);
  static const ::aapt::pb::String& str(const Item* msg);
  static const ::aapt::pb::RawString& raw_str(const Item* msg);
  static const ::aapt::pb::StyledString& styled_str(const Item* msg);
  static const ::aapt::pb::FileReference& file(const Item* msg);
  static const ::aapt::pb::Id& id(const Item* msg);
  static const ::aapt::pb::Primitive& prim(const Item* msg);
};

const ::aapt::pb::Reference&
Item::_Internal::ref(const Item* msg) {
  return *msg->value_.ref_;
}
const ::aapt::pb::String&
Item::_Internal::str(const Item* msg) {
  return *msg->value_.str_;
}
const ::aapt::pb::RawString&
Item::_Internal::raw_str(const Item* msg) {
  return *msg->value_.raw_str_;
}
const ::aapt::pb::StyledString&
Item::_Internal::styled_str(const Item* msg) {
  return *msg->value_.styled_str_;
}
const ::aapt::pb::FileReference&
Item::_Internal::file(const Item* msg) {
  return *msg->value_.file_;
}
const ::aapt::pb::Id&
Item::_Internal::id(const Item* msg) {
  return *msg->value_.id_;
}
const ::aapt::pb::Primitive&
Item::_Internal::prim(const Item* msg) {
  return *msg->value_.prim_;
}
void Item::set_allocated_ref(::aapt::pb::Reference* ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref, submessage_arena);
    }
    set_has_ref();
    value_.ref_ = ref;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.ref)
}
void Item::set_allocated_str(::aapt::pb::String* str) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (str) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      str = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, str, submessage_arena);
    }
    set_has_str();
    value_.str_ = str;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.str)
}
void Item::set_allocated_raw_str(::aapt::pb::RawString* raw_str) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (raw_str) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_str = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_str, submessage_arena);
    }
    set_has_raw_str();
    value_.raw_str_ = raw_str;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.raw_str)
}
void Item::set_allocated_styled_str(::aapt::pb::StyledString* styled_str) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (styled_str) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      styled_str = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styled_str, submessage_arena);
    }
    set_has_styled_str();
    value_.styled_str_ = styled_str;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.styled_str)
}
void Item::set_allocated_file(::aapt::pb::FileReference* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    value_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.file)
}
void Item::set_allocated_id(::aapt::pb::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
    value_.id_ = id;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.id)
}
void Item::set_allocated_prim(::aapt::pb::Primitive* prim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (prim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prim, submessage_arena);
    }
    set_has_prim();
    value_.prim_ = prim;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Item.prim)
}
Item::Item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kRef: {
      mutable_ref()->::aapt::pb::Reference::MergeFrom(from.ref());
      break;
    }
    case kStr: {
      mutable_str()->::aapt::pb::String::MergeFrom(from.str());
      break;
    }
    case kRawStr: {
      mutable_raw_str()->::aapt::pb::RawString::MergeFrom(from.raw_str());
      break;
    }
    case kStyledStr: {
      mutable_styled_str()->::aapt::pb::StyledString::MergeFrom(from.styled_str());
      break;
    }
    case kFile: {
      mutable_file()->::aapt::pb::FileReference::MergeFrom(from.file());
      break;
    }
    case kId: {
      mutable_id()->::aapt::pb::Id::MergeFrom(from.id());
      break;
    }
    case kPrim: {
      mutable_prim()->::aapt::pb::Primitive::MergeFrom(from.prim());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Item)
}

void Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  clear_has_value();
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:aapt.pb.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Item& Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Item_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Item::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.Item)
  switch (value_case()) {
    case kRef: {
      delete value_.ref_;
      break;
    }
    case kStr: {
      delete value_.str_;
      break;
    }
    case kRawStr: {
      delete value_.raw_str_;
      break;
    }
    case kStyledStr: {
      delete value_.styled_str_;
      break;
    }
    case kFile: {
      delete value_.file_;
      break;
    }
    case kId: {
      delete value_.id_;
      break;
    }
    case kPrim: {
      delete value_.prim_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Reference ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.String str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_str(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.RawString raw_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_raw_str(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.StyledString styled_str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_styled_str(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.FileReference file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Id id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Primitive prim = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_prim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Item::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Item)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Reference ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.String str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.RawString raw_str = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.StyledString styled_str = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_styled_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.FileReference file = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Id id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Primitive prim = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_prim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Item)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Item::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference ref = 1;
  if (has_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ref(this), output);
  }

  // .aapt.pb.String str = 2;
  if (has_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::str(this), output);
  }

  // .aapt.pb.RawString raw_str = 3;
  if (has_raw_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::raw_str(this), output);
  }

  // .aapt.pb.StyledString styled_str = 4;
  if (has_styled_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::styled_str(this), output);
  }

  // .aapt.pb.FileReference file = 5;
  if (has_file()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::file(this), output);
  }

  // .aapt.pb.Id id = 6;
  if (has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::id(this), output);
  }

  // .aapt.pb.Primitive prim = 7;
  if (has_prim()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::prim(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Item)
}

::PROTOBUF_NAMESPACE_ID::uint8* Item::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference ref = 1;
  if (has_ref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ref(this), target);
  }

  // .aapt.pb.String str = 2;
  if (has_str()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::str(this), target);
  }

  // .aapt.pb.RawString raw_str = 3;
  if (has_raw_str()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::raw_str(this), target);
  }

  // .aapt.pb.StyledString styled_str = 4;
  if (has_styled_str()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::styled_str(this), target);
  }

  // .aapt.pb.FileReference file = 5;
  if (has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::file(this), target);
  }

  // .aapt.pb.Id id = 6;
  if (has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::id(this), target);
  }

  // .aapt.pb.Primitive prim = 7;
  if (has_prim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::prim(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .aapt.pb.Reference ref = 1;
    case kRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.ref_);
      break;
    }
    // .aapt.pb.String str = 2;
    case kStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.str_);
      break;
    }
    // .aapt.pb.RawString raw_str = 3;
    case kRawStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.raw_str_);
      break;
    }
    // .aapt.pb.StyledString styled_str = 4;
    case kStyledStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.styled_str_);
      break;
    }
    // .aapt.pb.FileReference file = 5;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.file_);
      break;
    }
    // .aapt.pb.Id id = 6;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.id_);
      break;
    }
    // .aapt.pb.Primitive prim = 7;
    case kPrim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.prim_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kRef: {
      mutable_ref()->::aapt::pb::Reference::MergeFrom(from.ref());
      break;
    }
    case kStr: {
      mutable_str()->::aapt::pb::String::MergeFrom(from.str());
      break;
    }
    case kRawStr: {
      mutable_raw_str()->::aapt::pb::RawString::MergeFrom(from.raw_str());
      break;
    }
    case kStyledStr: {
      mutable_styled_str()->::aapt::pb::StyledString::MergeFrom(from.styled_str());
      break;
    }
    case kFile: {
      mutable_file()->::aapt::pb::FileReference::MergeFrom(from.file());
      break;
    }
    case kId: {
      mutable_id()->::aapt::pb::Id::MergeFrom(from.id());
      break;
    }
    case kPrim: {
      mutable_prim()->::aapt::pb::Primitive::MergeFrom(from.prim());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompoundValue::InitAsDefaultInstance() {
  ::aapt::pb::_CompoundValue_default_instance_.attr_ = const_cast< ::aapt::pb::Attribute*>(
      ::aapt::pb::Attribute::internal_default_instance());
  ::aapt::pb::_CompoundValue_default_instance_.style_ = const_cast< ::aapt::pb::Style*>(
      ::aapt::pb::Style::internal_default_instance());
  ::aapt::pb::_CompoundValue_default_instance_.styleable_ = const_cast< ::aapt::pb::Styleable*>(
      ::aapt::pb::Styleable::internal_default_instance());
  ::aapt::pb::_CompoundValue_default_instance_.array_ = const_cast< ::aapt::pb::Array*>(
      ::aapt::pb::Array::internal_default_instance());
  ::aapt::pb::_CompoundValue_default_instance_.plural_ = const_cast< ::aapt::pb::Plural*>(
      ::aapt::pb::Plural::internal_default_instance());
  ::aapt::pb::_CompoundValue_default_instance_.macro_ = const_cast< ::aapt::pb::MacroBody*>(
      ::aapt::pb::MacroBody::internal_default_instance());
}
class CompoundValue::_Internal {
 public:
  static const ::aapt::pb::Attribute& attr(const CompoundValue* msg);
  static const ::aapt::pb::Style& style(const CompoundValue* msg);
  static const ::aapt::pb::Styleable& styleable(const CompoundValue* msg);
  static const ::aapt::pb::Array& array(const CompoundValue* msg);
  static const ::aapt::pb::Plural& plural(const CompoundValue* msg);
  static const ::aapt::pb::MacroBody& macro(const CompoundValue* msg);
};

const ::aapt::pb::Attribute&
CompoundValue::_Internal::attr(const CompoundValue* msg) {
  return *msg->value_.attr_;
}
const ::aapt::pb::Style&
CompoundValue::_Internal::style(const CompoundValue* msg) {
  return *msg->value_.style_;
}
const ::aapt::pb::Styleable&
CompoundValue::_Internal::styleable(const CompoundValue* msg) {
  return *msg->value_.styleable_;
}
const ::aapt::pb::Array&
CompoundValue::_Internal::array(const CompoundValue* msg) {
  return *msg->value_.array_;
}
const ::aapt::pb::Plural&
CompoundValue::_Internal::plural(const CompoundValue* msg) {
  return *msg->value_.plural_;
}
const ::aapt::pb::MacroBody&
CompoundValue::_Internal::macro(const CompoundValue* msg) {
  return *msg->value_.macro_;
}
void CompoundValue::set_allocated_attr(::aapt::pb::Attribute* attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    set_has_attr();
    value_.attr_ = attr;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.attr)
}
void CompoundValue::set_allocated_style(::aapt::pb::Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    set_has_style();
    value_.style_ = style;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.style)
}
void CompoundValue::set_allocated_styleable(::aapt::pb::Styleable* styleable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (styleable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      styleable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, styleable, submessage_arena);
    }
    set_has_styleable();
    value_.styleable_ = styleable;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.styleable)
}
void CompoundValue::set_allocated_array(::aapt::pb::Array* array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array, submessage_arena);
    }
    set_has_array();
    value_.array_ = array;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.array)
}
void CompoundValue::set_allocated_plural(::aapt::pb::Plural* plural) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (plural) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plural = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plural, submessage_arena);
    }
    set_has_plural();
    value_.plural_ = plural;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.plural)
}
void CompoundValue::set_allocated_macro(::aapt::pb::MacroBody* macro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (macro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      macro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, macro, submessage_arena);
    }
    set_has_macro();
    value_.macro_ = macro;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.CompoundValue.macro)
}
CompoundValue::CompoundValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.CompoundValue)
}
CompoundValue::CompoundValue(const CompoundValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kAttr: {
      mutable_attr()->::aapt::pb::Attribute::MergeFrom(from.attr());
      break;
    }
    case kStyle: {
      mutable_style()->::aapt::pb::Style::MergeFrom(from.style());
      break;
    }
    case kStyleable: {
      mutable_styleable()->::aapt::pb::Styleable::MergeFrom(from.styleable());
      break;
    }
    case kArray: {
      mutable_array()->::aapt::pb::Array::MergeFrom(from.array());
      break;
    }
    case kPlural: {
      mutable_plural()->::aapt::pb::Plural::MergeFrom(from.plural());
      break;
    }
    case kMacro: {
      mutable_macro()->::aapt::pb::MacroBody::MergeFrom(from.macro());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.CompoundValue)
}

void CompoundValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompoundValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  clear_has_value();
}

CompoundValue::~CompoundValue() {
  // @@protoc_insertion_point(destructor:aapt.pb.CompoundValue)
  SharedDtor();
}

void CompoundValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void CompoundValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompoundValue& CompoundValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompoundValue_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void CompoundValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.CompoundValue)
  switch (value_case()) {
    case kAttr: {
      delete value_.attr_;
      break;
    }
    case kStyle: {
      delete value_.style_;
      break;
    }
    case kStyleable: {
      delete value_.styleable_;
      break;
    }
    case kArray: {
      delete value_.array_;
      break;
    }
    case kPlural: {
      delete value_.plural_;
      break;
    }
    case kMacro: {
      delete value_.macro_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void CompoundValue::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.CompoundValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompoundValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Attribute attr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_attr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Style style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Styleable styleable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_styleable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Array array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Plural plural = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_plural(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.MacroBody macro = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_macro(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompoundValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.CompoundValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Attribute attr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Style style = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_style()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Styleable styleable = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_styleable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Array array = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Plural plural = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_plural()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.MacroBody macro = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_macro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.CompoundValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.CompoundValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompoundValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.CompoundValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Attribute attr = 1;
  if (has_attr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::attr(this), output);
  }

  // .aapt.pb.Style style = 2;
  if (has_style()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::style(this), output);
  }

  // .aapt.pb.Styleable styleable = 3;
  if (has_styleable()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::styleable(this), output);
  }

  // .aapt.pb.Array array = 4;
  if (has_array()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::array(this), output);
  }

  // .aapt.pb.Plural plural = 5;
  if (has_plural()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::plural(this), output);
  }

  // .aapt.pb.MacroBody macro = 6;
  if (has_macro()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::macro(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.CompoundValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* CompoundValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.CompoundValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Attribute attr = 1;
  if (has_attr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::attr(this), target);
  }

  // .aapt.pb.Style style = 2;
  if (has_style()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::style(this), target);
  }

  // .aapt.pb.Styleable styleable = 3;
  if (has_styleable()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::styleable(this), target);
  }

  // .aapt.pb.Array array = 4;
  if (has_array()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::array(this), target);
  }

  // .aapt.pb.Plural plural = 5;
  if (has_plural()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::plural(this), target);
  }

  // .aapt.pb.MacroBody macro = 6;
  if (has_macro()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::macro(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.CompoundValue)
  return target;
}

size_t CompoundValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.CompoundValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .aapt.pb.Attribute attr = 1;
    case kAttr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.attr_);
      break;
    }
    // .aapt.pb.Style style = 2;
    case kStyle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.style_);
      break;
    }
    // .aapt.pb.Styleable styleable = 3;
    case kStyleable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.styleable_);
      break;
    }
    // .aapt.pb.Array array = 4;
    case kArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.array_);
      break;
    }
    // .aapt.pb.Plural plural = 5;
    case kPlural: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.plural_);
      break;
    }
    // .aapt.pb.MacroBody macro = 6;
    case kMacro: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.macro_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompoundValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.CompoundValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CompoundValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompoundValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.CompoundValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.CompoundValue)
    MergeFrom(*source);
  }
}

void CompoundValue::MergeFrom(const CompoundValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.CompoundValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kAttr: {
      mutable_attr()->::aapt::pb::Attribute::MergeFrom(from.attr());
      break;
    }
    case kStyle: {
      mutable_style()->::aapt::pb::Style::MergeFrom(from.style());
      break;
    }
    case kStyleable: {
      mutable_styleable()->::aapt::pb::Styleable::MergeFrom(from.styleable());
      break;
    }
    case kArray: {
      mutable_array()->::aapt::pb::Array::MergeFrom(from.array());
      break;
    }
    case kPlural: {
      mutable_plural()->::aapt::pb::Plural::MergeFrom(from.plural());
      break;
    }
    case kMacro: {
      mutable_macro()->::aapt::pb::MacroBody::MergeFrom(from.macro());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void CompoundValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.CompoundValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompoundValue::CopyFrom(const CompoundValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.CompoundValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompoundValue::IsInitialized() const {
  return true;
}

void CompoundValue::InternalSwap(CompoundValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompoundValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Boolean::InitAsDefaultInstance() {
}
class Boolean::_Internal {
 public:
};

Boolean::Boolean()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Boolean)
}
Boolean::Boolean(const Boolean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Boolean)
}

void Boolean::SharedCtor() {
  value_ = false;
}

Boolean::~Boolean() {
  // @@protoc_insertion_point(destructor:aapt.pb.Boolean)
  SharedDtor();
}

void Boolean::SharedDtor() {
}

void Boolean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Boolean& Boolean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Boolean_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Boolean::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Boolean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Boolean::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Boolean)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Boolean)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Boolean)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Boolean::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Boolean)
}

::PROTOBUF_NAMESPACE_ID::uint8* Boolean::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Boolean)
  return target;
}

size_t Boolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Boolean)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Boolean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  const Boolean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Boolean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Boolean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Boolean)
    MergeFrom(*source);
  }
}

void Boolean::MergeFrom(const Boolean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Boolean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boolean::CopyFrom(const Boolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boolean::IsInitialized() const {
  return true;
}

void Boolean::InternalSwap(Boolean* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Boolean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reference::InitAsDefaultInstance() {
  ::aapt::pb::_Reference_default_instance_._instance.get_mutable()->is_dynamic_ = const_cast< ::aapt::pb::Boolean*>(
      ::aapt::pb::Boolean::internal_default_instance());
}
class Reference::_Internal {
 public:
  static const ::aapt::pb::Boolean& is_dynamic(const Reference* msg);
};

const ::aapt::pb::Boolean&
Reference::_Internal::is_dynamic(const Reference* msg) {
  return *msg->is_dynamic_;
}
Reference::Reference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_is_dynamic()) {
    is_dynamic_ = new ::aapt::pb::Boolean(*from.is_dynamic_);
  } else {
    is_dynamic_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_flags_) -
    reinterpret_cast<char*>(&type_)) + sizeof(type_flags_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Reference)
}

void Reference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_dynamic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_flags_) -
      reinterpret_cast<char*>(&is_dynamic_)) + sizeof(type_flags_));
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:aapt.pb.Reference)
  SharedDtor();
}

void Reference::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete is_dynamic_;
}

void Reference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reference& Reference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && is_dynamic_ != nullptr) {
    delete is_dynamic_;
  }
  is_dynamic_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_flags_) -
      reinterpret_cast<char*>(&type_)) + sizeof(type_flags_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Reference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Reference.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::aapt::pb::Reference_Type>(val));
        } else goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "aapt.pb.Reference.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Boolean is_dynamic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_is_dynamic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          type_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_raw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          allow_raw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Reference::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Reference)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Reference.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aapt::pb::Reference_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Reference.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool private = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Boolean is_dynamic = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_is_dynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type_flags = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_raw = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Reference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Reference)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Reference::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Reference.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // bool private = 4;
  if (this->private_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->private_(), output);
  }

  // .aapt.pb.Boolean is_dynamic = 5;
  if (this->has_is_dynamic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::is_dynamic(this), output);
  }

  // uint32 type_flags = 6;
  if (this->type_flags() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->type_flags(), output);
  }

  // bool allow_raw = 7;
  if (this->allow_raw() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->allow_raw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Reference)
}

::PROTOBUF_NAMESPACE_ID::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Reference.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // bool private = 4;
  if (this->private_() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->private_(), target);
  }

  // .aapt.pb.Boolean is_dynamic = 5;
  if (this->has_is_dynamic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::is_dynamic(this), target);
  }

  // uint32 type_flags = 6;
  if (this->type_flags() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->type_flags(), target);
  }

  // bool allow_raw = 7;
  if (this->allow_raw() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->allow_raw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Reference)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .aapt.pb.Boolean is_dynamic = 5;
  if (this->has_is_dynamic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *is_dynamic_);
  }

  // .aapt.pb.Reference.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // bool private = 4;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_raw = 7;
  if (this->allow_raw() != 0) {
    total_size += 1 + 1;
  }

  // uint32 type_flags = 6;
  if (this->type_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->type_flags());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Reference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Reference)
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_is_dynamic()) {
    mutable_is_dynamic()->::aapt::pb::Boolean::MergeFrom(from.is_dynamic());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.private_() != 0) {
    set_private_(from.private_());
  }
  if (from.allow_raw() != 0) {
    set_allow_raw(from.allow_raw());
  }
  if (from.type_flags() != 0) {
    set_type_flags(from.type_flags());
  }
}

void Reference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_dynamic_, other->is_dynamic_);
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(private__, other->private__);
  swap(allow_raw_, other->allow_raw_);
  swap(type_flags_, other->type_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Id::InitAsDefaultInstance() {
}
class Id::_Internal {
 public:
};

Id::Id()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Id)
}
Id::Id(const Id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Id)
}

void Id::SharedCtor() {
}

Id::~Id() {
  // @@protoc_insertion_point(destructor:aapt.pb.Id)
  SharedDtor();
}

void Id::SharedDtor() {
}

void Id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Id& Id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Id_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Id::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Id::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Id)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Id)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Id)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Id::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Id)
}

::PROTOBUF_NAMESPACE_ID::uint8* Id::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Id)
  return target;
}

size_t Id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Id)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Id)
  GOOGLE_DCHECK_NE(&from, this);
  const Id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Id)
    MergeFrom(*source);
  }
}

void Id::MergeFrom(const Id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Id::CopyFrom(const Id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Id::IsInitialized() const {
  return true;
}

void Id::InternalSwap(Id* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void String::InitAsDefaultInstance() {
}
class String::_Internal {
 public:
};

String::String()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.String)
}
String::String(const String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.String)
}

void String::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_String_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

String::~String() {
  // @@protoc_insertion_point(destructor:aapt.pb.String)
  SharedDtor();
}

void String::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const String& String::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_String_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void String::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "aapt.pb.String.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool String::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.String)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.String.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.String)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.String)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void String::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.String.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.String)
}

::PROTOBUF_NAMESPACE_ID::uint8* String::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.String.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.String)
  return target;
}

size_t String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.String)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void String::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.String)
  GOOGLE_DCHECK_NE(&from, this);
  const String* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<String>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.String)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.String)
    MergeFrom(*source);
  }
}

void String::MergeFrom(const String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void String::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void String::CopyFrom(const String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {
  return true;
}

void String::InternalSwap(String* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata String::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawString::InitAsDefaultInstance() {
}
class RawString::_Internal {
 public:
};

RawString::RawString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.RawString)
}
RawString::RawString(const RawString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.RawString)
}

void RawString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RawString::~RawString() {
  // @@protoc_insertion_point(destructor:aapt.pb.RawString)
  SharedDtor();
}

void RawString::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RawString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawString& RawString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void RawString::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.RawString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "aapt.pb.RawString.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawString::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.RawString)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.RawString.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.RawString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.RawString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawString::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.RawString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.RawString.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.RawString)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawString::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.RawString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.RawString.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.RawString)
  return target;
}

size_t RawString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.RawString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.RawString)
  GOOGLE_DCHECK_NE(&from, this);
  const RawString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.RawString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.RawString)
    MergeFrom(*source);
  }
}

void RawString::MergeFrom(const RawString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.RawString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RawString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.RawString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawString::CopyFrom(const RawString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.RawString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawString::IsInitialized() const {
  return true;
}

void RawString::InternalSwap(RawString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RawString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StyledString_Span::InitAsDefaultInstance() {
}
class StyledString_Span::_Internal {
 public:
};

StyledString_Span::StyledString_Span()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.StyledString.Span)
}
StyledString_Span::StyledString_Span(const StyledString_Span& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.tag().empty()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&first_char_, &from.first_char_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_char_) -
    reinterpret_cast<char*>(&first_char_)) + sizeof(last_char_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StyledString.Span)
}

void StyledString_Span::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StyledString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_char_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_char_) -
      reinterpret_cast<char*>(&first_char_)) + sizeof(last_char_));
}

StyledString_Span::~StyledString_Span() {
  // @@protoc_insertion_point(destructor:aapt.pb.StyledString.Span)
  SharedDtor();
}

void StyledString_Span::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StyledString_Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StyledString_Span& StyledString_Span::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StyledString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void StyledString_Span::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StyledString.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_char_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_char_) -
      reinterpret_cast<char*>(&first_char_)) + sizeof(last_char_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StyledString_Span::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tag(), ptr, ctx, "aapt.pb.StyledString.Span.tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 first_char = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          first_char_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_char = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_char_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StyledString_Span::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.StyledString.Span)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.StyledString.Span.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 first_char = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_char_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_char = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_char_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.StyledString.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.StyledString.Span)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StyledString_Span::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.StyledString.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyledString.Span.tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // uint32 first_char = 2;
  if (this->first_char() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->first_char(), output);
  }

  // uint32 last_char = 3;
  if (this->last_char() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->last_char(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.StyledString.Span)
}

::PROTOBUF_NAMESPACE_ID::uint8* StyledString_Span::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StyledString.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyledString.Span.tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // uint32 first_char = 2;
  if (this->first_char() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->first_char(), target);
  }

  // uint32 last_char = 3;
  if (this->last_char() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_char(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StyledString.Span)
  return target;
}

size_t StyledString_Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StyledString.Span)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // uint32 first_char = 2;
  if (this->first_char() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->first_char());
  }

  // uint32 last_char = 3;
  if (this->last_char() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->last_char());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyledString_Span::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.StyledString.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const StyledString_Span* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyledString_Span>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.StyledString.Span)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.StyledString.Span)
    MergeFrom(*source);
  }
}

void StyledString_Span::MergeFrom(const StyledString_Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StyledString.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.first_char() != 0) {
    set_first_char(from.first_char());
  }
  if (from.last_char() != 0) {
    set_last_char(from.last_char());
  }
}

void StyledString_Span::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.StyledString.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyledString_Span::CopyFrom(const StyledString_Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StyledString.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyledString_Span::IsInitialized() const {
  return true;
}

void StyledString_Span::InternalSwap(StyledString_Span* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(first_char_, other->first_char_);
  swap(last_char_, other->last_char_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyledString_Span::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StyledString::InitAsDefaultInstance() {
}
class StyledString::_Internal {
 public:
};

StyledString::StyledString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.StyledString)
}
StyledString::StyledString(const StyledString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      span_(from.span_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StyledString)
}

void StyledString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StyledString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StyledString::~StyledString() {
  // @@protoc_insertion_point(destructor:aapt.pb.StyledString)
  SharedDtor();
}

void StyledString::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StyledString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StyledString& StyledString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StyledString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void StyledString::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StyledString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  span_.Clear();
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StyledString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "aapt.pb.StyledString.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.StyledString.Span span = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_span(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StyledString::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.StyledString)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.StyledString.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.StyledString.Span span = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.StyledString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.StyledString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StyledString::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.StyledString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyledString.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // repeated .aapt.pb.StyledString.Span span = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->span_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->span(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.StyledString)
}

::PROTOBUF_NAMESPACE_ID::uint8* StyledString::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StyledString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyledString.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // repeated .aapt.pb.StyledString.Span span = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->span_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->span(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StyledString)
  return target;
}

size_t StyledString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StyledString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.StyledString.Span span = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->span_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->span(static_cast<int>(i)));
    }
  }

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyledString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.StyledString)
  GOOGLE_DCHECK_NE(&from, this);
  const StyledString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyledString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.StyledString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.StyledString)
    MergeFrom(*source);
  }
}

void StyledString::MergeFrom(const StyledString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StyledString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  span_.MergeFrom(from.span_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void StyledString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.StyledString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyledString::CopyFrom(const StyledString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StyledString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyledString::IsInitialized() const {
  return true;
}

void StyledString::InternalSwap(StyledString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&span_)->InternalSwap(CastToBase(&other->span_));
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StyledString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileReference::InitAsDefaultInstance() {
}
class FileReference::_Internal {
 public:
};

FileReference::FileReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.FileReference)
}
FileReference::FileReference(const FileReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.FileReference)
}

void FileReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileReference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

FileReference::~FileReference() {
  // @@protoc_insertion_point(destructor:aapt.pb.FileReference)
  SharedDtor();
}

void FileReference::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileReference& FileReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileReference_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void FileReference::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.FileReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_path(), ptr, ctx, "aapt.pb.FileReference.path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.FileReference.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::aapt::pb::FileReference_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileReference::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.FileReference)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.FileReference.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.FileReference.Type type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::aapt::pb::FileReference_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.FileReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.FileReference)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileReference::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.FileReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.FileReference.path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // .aapt.pb.FileReference.Type type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.FileReference)
}

::PROTOBUF_NAMESPACE_ID::uint8* FileReference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.FileReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.FileReference.path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // .aapt.pb.FileReference.Type type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.FileReference)
  return target;
}

size_t FileReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.FileReference)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .aapt.pb.FileReference.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.FileReference)
  GOOGLE_DCHECK_NE(&from, this);
  const FileReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.FileReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.FileReference)
    MergeFrom(*source);
  }
}

void FileReference::MergeFrom(const FileReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.FileReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void FileReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.FileReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileReference::CopyFrom(const FileReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.FileReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileReference::IsInitialized() const {
  return true;
}

void FileReference::InternalSwap(FileReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Primitive_NullType::InitAsDefaultInstance() {
}
class Primitive_NullType::_Internal {
 public:
};

Primitive_NullType::Primitive_NullType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Primitive.NullType)
}
Primitive_NullType::Primitive_NullType(const Primitive_NullType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Primitive.NullType)
}

void Primitive_NullType::SharedCtor() {
}

Primitive_NullType::~Primitive_NullType() {
  // @@protoc_insertion_point(destructor:aapt.pb.Primitive.NullType)
  SharedDtor();
}

void Primitive_NullType::SharedDtor() {
}

void Primitive_NullType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Primitive_NullType& Primitive_NullType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Primitive_NullType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Primitive_NullType::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Primitive.NullType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Primitive_NullType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Primitive_NullType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Primitive.NullType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Primitive.NullType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Primitive.NullType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Primitive_NullType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Primitive.NullType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Primitive.NullType)
}

::PROTOBUF_NAMESPACE_ID::uint8* Primitive_NullType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Primitive.NullType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Primitive.NullType)
  return target;
}

size_t Primitive_NullType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Primitive.NullType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Primitive_NullType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Primitive.NullType)
  GOOGLE_DCHECK_NE(&from, this);
  const Primitive_NullType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Primitive_NullType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Primitive.NullType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Primitive.NullType)
    MergeFrom(*source);
  }
}

void Primitive_NullType::MergeFrom(const Primitive_NullType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Primitive.NullType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Primitive_NullType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Primitive.NullType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Primitive_NullType::CopyFrom(const Primitive_NullType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Primitive.NullType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Primitive_NullType::IsInitialized() const {
  return true;
}

void Primitive_NullType::InternalSwap(Primitive_NullType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Primitive_NullType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Primitive_EmptyType::InitAsDefaultInstance() {
}
class Primitive_EmptyType::_Internal {
 public:
};

Primitive_EmptyType::Primitive_EmptyType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Primitive.EmptyType)
}
Primitive_EmptyType::Primitive_EmptyType(const Primitive_EmptyType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Primitive.EmptyType)
}

void Primitive_EmptyType::SharedCtor() {
}

Primitive_EmptyType::~Primitive_EmptyType() {
  // @@protoc_insertion_point(destructor:aapt.pb.Primitive.EmptyType)
  SharedDtor();
}

void Primitive_EmptyType::SharedDtor() {
}

void Primitive_EmptyType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Primitive_EmptyType& Primitive_EmptyType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Primitive_EmptyType_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Primitive_EmptyType::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Primitive.EmptyType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Primitive_EmptyType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Primitive_EmptyType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Primitive.EmptyType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Primitive.EmptyType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Primitive.EmptyType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Primitive_EmptyType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Primitive.EmptyType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Primitive.EmptyType)
}

::PROTOBUF_NAMESPACE_ID::uint8* Primitive_EmptyType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Primitive.EmptyType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Primitive.EmptyType)
  return target;
}

size_t Primitive_EmptyType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Primitive.EmptyType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Primitive_EmptyType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Primitive.EmptyType)
  GOOGLE_DCHECK_NE(&from, this);
  const Primitive_EmptyType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Primitive_EmptyType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Primitive.EmptyType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Primitive.EmptyType)
    MergeFrom(*source);
  }
}

void Primitive_EmptyType::MergeFrom(const Primitive_EmptyType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Primitive.EmptyType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Primitive_EmptyType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Primitive.EmptyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Primitive_EmptyType::CopyFrom(const Primitive_EmptyType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Primitive.EmptyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Primitive_EmptyType::IsInitialized() const {
  return true;
}

void Primitive_EmptyType::InternalSwap(Primitive_EmptyType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Primitive_EmptyType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Primitive::InitAsDefaultInstance() {
  ::aapt::pb::_Primitive_default_instance_.null_value_ = const_cast< ::aapt::pb::Primitive_NullType*>(
      ::aapt::pb::Primitive_NullType::internal_default_instance());
  ::aapt::pb::_Primitive_default_instance_.empty_value_ = const_cast< ::aapt::pb::Primitive_EmptyType*>(
      ::aapt::pb::Primitive_EmptyType::internal_default_instance());
  ::aapt::pb::_Primitive_default_instance_.float_value_ = 0;
  ::aapt::pb::_Primitive_default_instance_.dimension_value_ = 0u;
  ::aapt::pb::_Primitive_default_instance_.fraction_value_ = 0u;
  ::aapt::pb::_Primitive_default_instance_.int_decimal_value_ = 0;
  ::aapt::pb::_Primitive_default_instance_.int_hexadecimal_value_ = 0u;
  ::aapt::pb::_Primitive_default_instance_.boolean_value_ = false;
  ::aapt::pb::_Primitive_default_instance_.color_argb8_value_ = 0u;
  ::aapt::pb::_Primitive_default_instance_.color_rgb8_value_ = 0u;
  ::aapt::pb::_Primitive_default_instance_.color_argb4_value_ = 0u;
  ::aapt::pb::_Primitive_default_instance_.color_rgb4_value_ = 0u;
  ::aapt::pb::_Primitive_default_instance_.dimension_value_deprecated_ = 0;
  ::aapt::pb::_Primitive_default_instance_.fraction_value_deprecated_ = 0;
}
class Primitive::_Internal {
 public:
  static const ::aapt::pb::Primitive_NullType& null_value(const Primitive* msg);
  static const ::aapt::pb::Primitive_EmptyType& empty_value(const Primitive* msg);
};

const ::aapt::pb::Primitive_NullType&
Primitive::_Internal::null_value(const Primitive* msg) {
  return *msg->oneof_value_.null_value_;
}
const ::aapt::pb::Primitive_EmptyType&
Primitive::_Internal::empty_value(const Primitive* msg) {
  return *msg->oneof_value_.empty_value_;
}
void Primitive::set_allocated_null_value(::aapt::pb::Primitive_NullType* null_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_value();
  if (null_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      null_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null_value, submessage_arena);
    }
    set_has_null_value();
    oneof_value_.null_value_ = null_value;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Primitive.null_value)
}
void Primitive::set_allocated_empty_value(::aapt::pb::Primitive_EmptyType* empty_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_value();
  if (empty_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      empty_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty_value, submessage_arena);
    }
    set_has_empty_value();
    oneof_value_.empty_value_ = empty_value;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Primitive.empty_value)
}
Primitive::Primitive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Primitive)
}
Primitive::Primitive(const Primitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_oneof_value();
  switch (from.oneof_value_case()) {
    case kNullValue: {
      mutable_null_value()->::aapt::pb::Primitive_NullType::MergeFrom(from.null_value());
      break;
    }
    case kEmptyValue: {
      mutable_empty_value()->::aapt::pb::Primitive_EmptyType::MergeFrom(from.empty_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kDimensionValue: {
      set_dimension_value(from.dimension_value());
      break;
    }
    case kFractionValue: {
      set_fraction_value(from.fraction_value());
      break;
    }
    case kIntDecimalValue: {
      set_int_decimal_value(from.int_decimal_value());
      break;
    }
    case kIntHexadecimalValue: {
      set_int_hexadecimal_value(from.int_hexadecimal_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kColorArgb8Value: {
      set_color_argb8_value(from.color_argb8_value());
      break;
    }
    case kColorRgb8Value: {
      set_color_rgb8_value(from.color_rgb8_value());
      break;
    }
    case kColorArgb4Value: {
      set_color_argb4_value(from.color_argb4_value());
      break;
    }
    case kColorRgb4Value: {
      set_color_rgb4_value(from.color_rgb4_value());
      break;
    }
    case kDimensionValueDeprecated: {
      set_dimension_value_deprecated(from.dimension_value_deprecated());
      break;
    }
    case kFractionValueDeprecated: {
      set_fraction_value_deprecated(from.fraction_value_deprecated());
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Primitive)
}

void Primitive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Primitive_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  clear_has_oneof_value();
}

Primitive::~Primitive() {
  // @@protoc_insertion_point(destructor:aapt.pb.Primitive)
  SharedDtor();
}

void Primitive::SharedDtor() {
  if (has_oneof_value()) {
    clear_oneof_value();
  }
}

void Primitive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Primitive& Primitive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Primitive_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Primitive::clear_oneof_value() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.Primitive)
  switch (oneof_value_case()) {
    case kNullValue: {
      delete oneof_value_.null_value_;
      break;
    }
    case kEmptyValue: {
      delete oneof_value_.empty_value_;
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDimensionValue: {
      // No need to clear
      break;
    }
    case kFractionValue: {
      // No need to clear
      break;
    }
    case kIntDecimalValue: {
      // No need to clear
      break;
    }
    case kIntHexadecimalValue: {
      // No need to clear
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kColorArgb8Value: {
      // No need to clear
      break;
    }
    case kColorRgb8Value: {
      // No need to clear
      break;
    }
    case kColorArgb4Value: {
      // No need to clear
      break;
    }
    case kColorRgb4Value: {
      // No need to clear
      break;
    }
    case kDimensionValueDeprecated: {
      // No need to clear
      break;
    }
    case kFractionValueDeprecated: {
      // No need to clear
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_VALUE_NOT_SET;
}


void Primitive::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Primitive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Primitive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Primitive.NullType null_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_null_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Primitive.EmptyType empty_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_empty_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dimension_value_deprecated = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          set_dimension_value_deprecated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fraction_value_deprecated = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          set_fraction_value_deprecated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 int_decimal_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          set_int_decimal_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 int_hexadecimal_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          set_int_hexadecimal_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool boolean_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          set_boolean_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color_argb8_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          set_color_argb8_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color_rgb8_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          set_color_rgb8_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color_argb4_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          set_color_argb4_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 color_rgb4_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          set_color_rgb4_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dimension_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          set_dimension_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fraction_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          set_fraction_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Primitive::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Primitive)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Primitive.NullType null_value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_null_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Primitive.EmptyType empty_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_empty_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float float_value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oneof_value_.float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dimension_value_deprecated = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oneof_value_.dimension_value_deprecated_)));
          set_has_dimension_value_deprecated();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fraction_value_deprecated = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oneof_value_.fraction_value_deprecated_)));
          set_has_fraction_value_deprecated();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 int_decimal_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &oneof_value_.int_decimal_value_)));
          set_has_int_decimal_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 int_hexadecimal_value = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_value_.int_hexadecimal_value_)));
          set_has_int_hexadecimal_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool boolean_value = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oneof_value_.boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color_argb8_value = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_value_.color_argb8_value_)));
          set_has_color_argb8_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color_rgb8_value = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_value_.color_rgb8_value_)));
          set_has_color_rgb8_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color_argb4_value = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_value_.color_argb4_value_)));
          set_has_color_argb4_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 color_rgb4_value = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_value_.color_rgb4_value_)));
          set_has_color_rgb4_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dimension_value = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_value_.dimension_value_)));
          set_has_dimension_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fraction_value = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          clear_oneof_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneof_value_.fraction_value_)));
          set_has_fraction_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Primitive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Primitive)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Primitive::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Primitive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Primitive.NullType null_value = 1;
  if (has_null_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::null_value(this), output);
  }

  // .aapt.pb.Primitive.EmptyType empty_value = 2;
  if (has_empty_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::empty_value(this), output);
  }

  // float float_value = 3;
  if (has_float_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->float_value(), output);
  }

  // float dimension_value_deprecated = 4 [deprecated = true];
  if (has_dimension_value_deprecated()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->dimension_value_deprecated(), output);
  }

  // float fraction_value_deprecated = 5 [deprecated = true];
  if (has_fraction_value_deprecated()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->fraction_value_deprecated(), output);
  }

  // int32 int_decimal_value = 6;
  if (has_int_decimal_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->int_decimal_value(), output);
  }

  // uint32 int_hexadecimal_value = 7;
  if (has_int_hexadecimal_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->int_hexadecimal_value(), output);
  }

  // bool boolean_value = 8;
  if (has_boolean_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->boolean_value(), output);
  }

  // uint32 color_argb8_value = 9;
  if (has_color_argb8_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->color_argb8_value(), output);
  }

  // uint32 color_rgb8_value = 10;
  if (has_color_rgb8_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->color_rgb8_value(), output);
  }

  // uint32 color_argb4_value = 11;
  if (has_color_argb4_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->color_argb4_value(), output);
  }

  // uint32 color_rgb4_value = 12;
  if (has_color_rgb4_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->color_rgb4_value(), output);
  }

  // uint32 dimension_value = 13;
  if (has_dimension_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->dimension_value(), output);
  }

  // uint32 fraction_value = 14;
  if (has_fraction_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->fraction_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Primitive)
}

::PROTOBUF_NAMESPACE_ID::uint8* Primitive::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Primitive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Primitive.NullType null_value = 1;
  if (has_null_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::null_value(this), target);
  }

  // .aapt.pb.Primitive.EmptyType empty_value = 2;
  if (has_empty_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::empty_value(this), target);
  }

  // float float_value = 3;
  if (has_float_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->float_value(), target);
  }

  // float dimension_value_deprecated = 4 [deprecated = true];
  if (has_dimension_value_deprecated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->dimension_value_deprecated(), target);
  }

  // float fraction_value_deprecated = 5 [deprecated = true];
  if (has_fraction_value_deprecated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->fraction_value_deprecated(), target);
  }

  // int32 int_decimal_value = 6;
  if (has_int_decimal_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->int_decimal_value(), target);
  }

  // uint32 int_hexadecimal_value = 7;
  if (has_int_hexadecimal_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->int_hexadecimal_value(), target);
  }

  // bool boolean_value = 8;
  if (has_boolean_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->boolean_value(), target);
  }

  // uint32 color_argb8_value = 9;
  if (has_color_argb8_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->color_argb8_value(), target);
  }

  // uint32 color_rgb8_value = 10;
  if (has_color_rgb8_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->color_rgb8_value(), target);
  }

  // uint32 color_argb4_value = 11;
  if (has_color_argb4_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->color_argb4_value(), target);
  }

  // uint32 color_rgb4_value = 12;
  if (has_color_rgb4_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->color_rgb4_value(), target);
  }

  // uint32 dimension_value = 13;
  if (has_dimension_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->dimension_value(), target);
  }

  // uint32 fraction_value = 14;
  if (has_fraction_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->fraction_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Primitive)
  return target;
}

size_t Primitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Primitive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_value_case()) {
    // .aapt.pb.Primitive.NullType null_value = 1;
    case kNullValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_value_.null_value_);
      break;
    }
    // .aapt.pb.Primitive.EmptyType empty_value = 2;
    case kEmptyValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_value_.empty_value_);
      break;
    }
    // float float_value = 3;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // uint32 dimension_value = 13;
    case kDimensionValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->dimension_value());
      break;
    }
    // uint32 fraction_value = 14;
    case kFractionValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fraction_value());
      break;
    }
    // int32 int_decimal_value = 6;
    case kIntDecimalValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->int_decimal_value());
      break;
    }
    // uint32 int_hexadecimal_value = 7;
    case kIntHexadecimalValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->int_hexadecimal_value());
      break;
    }
    // bool boolean_value = 8;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // uint32 color_argb8_value = 9;
    case kColorArgb8Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->color_argb8_value());
      break;
    }
    // uint32 color_rgb8_value = 10;
    case kColorRgb8Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->color_rgb8_value());
      break;
    }
    // uint32 color_argb4_value = 11;
    case kColorArgb4Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->color_argb4_value());
      break;
    }
    // uint32 color_rgb4_value = 12;
    case kColorRgb4Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->color_rgb4_value());
      break;
    }
    // float dimension_value_deprecated = 4 [deprecated = true];
    case kDimensionValueDeprecated: {
      total_size += 1 + 4;
      break;
    }
    // float fraction_value_deprecated = 5 [deprecated = true];
    case kFractionValueDeprecated: {
      total_size += 1 + 4;
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Primitive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Primitive)
  GOOGLE_DCHECK_NE(&from, this);
  const Primitive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Primitive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Primitive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Primitive)
    MergeFrom(*source);
  }
}

void Primitive::MergeFrom(const Primitive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Primitive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_value_case()) {
    case kNullValue: {
      mutable_null_value()->::aapt::pb::Primitive_NullType::MergeFrom(from.null_value());
      break;
    }
    case kEmptyValue: {
      mutable_empty_value()->::aapt::pb::Primitive_EmptyType::MergeFrom(from.empty_value());
      break;
    }
    case kFloatValue: {
      set_float_value(from.float_value());
      break;
    }
    case kDimensionValue: {
      set_dimension_value(from.dimension_value());
      break;
    }
    case kFractionValue: {
      set_fraction_value(from.fraction_value());
      break;
    }
    case kIntDecimalValue: {
      set_int_decimal_value(from.int_decimal_value());
      break;
    }
    case kIntHexadecimalValue: {
      set_int_hexadecimal_value(from.int_hexadecimal_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kColorArgb8Value: {
      set_color_argb8_value(from.color_argb8_value());
      break;
    }
    case kColorRgb8Value: {
      set_color_rgb8_value(from.color_rgb8_value());
      break;
    }
    case kColorArgb4Value: {
      set_color_argb4_value(from.color_argb4_value());
      break;
    }
    case kColorRgb4Value: {
      set_color_rgb4_value(from.color_rgb4_value());
      break;
    }
    case kDimensionValueDeprecated: {
      set_dimension_value_deprecated(from.dimension_value_deprecated());
      break;
    }
    case kFractionValueDeprecated: {
      set_fraction_value_deprecated(from.fraction_value_deprecated());
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
}

void Primitive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Primitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Primitive::CopyFrom(const Primitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Primitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Primitive::IsInitialized() const {
  return true;
}

void Primitive::InternalSwap(Primitive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(oneof_value_, other->oneof_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Primitive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Attribute_Symbol::InitAsDefaultInstance() {
  ::aapt::pb::_Attribute_Symbol_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
  ::aapt::pb::_Attribute_Symbol_default_instance_._instance.get_mutable()->name_ = const_cast< ::aapt::pb::Reference*>(
      ::aapt::pb::Reference::internal_default_instance());
}
class Attribute_Symbol::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Attribute_Symbol* msg);
  static const ::aapt::pb::Reference& name(const Attribute_Symbol* msg);
};

const ::aapt::pb::Source&
Attribute_Symbol::_Internal::source(const Attribute_Symbol* msg) {
  return *msg->source_;
}
const ::aapt::pb::Reference&
Attribute_Symbol::_Internal::name(const Attribute_Symbol* msg) {
  return *msg->name_;
}
Attribute_Symbol::Attribute_Symbol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Attribute.Symbol)
}
Attribute_Symbol::Attribute_Symbol(const Attribute_Symbol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from.has_name()) {
    name_ = new ::aapt::pb::Reference(*from.name_);
  } else {
    name_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Attribute.Symbol)
}

void Attribute_Symbol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Attribute_Symbol_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&source_)) + sizeof(type_));
}

Attribute_Symbol::~Attribute_Symbol() {
  // @@protoc_insertion_point(destructor:aapt.pb.Attribute.Symbol)
  SharedDtor();
}

void Attribute_Symbol::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete name_;
}

void Attribute_Symbol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attribute_Symbol& Attribute_Symbol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attribute_Symbol_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Attribute_Symbol::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Attribute.Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Attribute_Symbol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.Attribute.Symbol.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Reference name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Attribute_Symbol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Attribute.Symbol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Attribute.Symbol.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Reference name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Attribute.Symbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Attribute.Symbol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Attribute_Symbol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Attribute.Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Attribute.Symbol.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // .aapt.pb.Reference name = 3;
  if (this->has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::name(this), output);
  }

  // uint32 value = 4;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Attribute.Symbol)
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribute_Symbol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Attribute.Symbol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Attribute.Symbol.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // .aapt.pb.Reference name = 3;
  if (this->has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::name(this), target);
  }

  // uint32 value = 4;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Attribute.Symbol)
  return target;
}

size_t Attribute_Symbol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Attribute.Symbol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .aapt.pb.Reference name = 3;
  if (this->has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // uint32 value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribute_Symbol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Attribute.Symbol)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribute_Symbol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribute_Symbol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Attribute.Symbol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Attribute.Symbol)
    MergeFrom(*source);
  }
}

void Attribute_Symbol::MergeFrom(const Attribute_Symbol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Attribute.Symbol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.has_name()) {
    mutable_name()->::aapt::pb::Reference::MergeFrom(from.name());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Attribute_Symbol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Attribute.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute_Symbol::CopyFrom(const Attribute_Symbol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Attribute.Symbol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute_Symbol::IsInitialized() const {
  return true;
}

void Attribute_Symbol::InternalSwap(Attribute_Symbol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(name_, other->name_);
  swap(value_, other->value_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute_Symbol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Attribute::InitAsDefaultInstance() {
}
class Attribute::_Internal {
 public:
};

Attribute::Attribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      symbol_(from.symbol_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&format_flags_, &from.format_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_int_) -
    reinterpret_cast<char*>(&format_flags_)) + sizeof(max_int_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Attribute)
}

void Attribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Attribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  ::memset(&format_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_int_) -
      reinterpret_cast<char*>(&format_flags_)) + sizeof(max_int_));
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:aapt.pb.Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
}

void Attribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Attribute& Attribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Attribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.Clear();
  ::memset(&format_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_int_) -
      reinterpret_cast<char*>(&format_flags_)) + sizeof(max_int_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Attribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 format_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          format_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.Attribute.Symbol symbol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_symbol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Attribute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Attribute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 format_flags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_int = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_int = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.Attribute.Symbol symbol = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Attribute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Attribute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 format_flags = 1;
  if (this->format_flags() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->format_flags(), output);
  }

  // int32 min_int = 2;
  if (this->min_int() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->min_int(), output);
  }

  // int32 max_int = 3;
  if (this->max_int() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_int(), output);
  }

  // repeated .aapt.pb.Attribute.Symbol symbol = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->symbol_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->symbol(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Attribute)
}

::PROTOBUF_NAMESPACE_ID::uint8* Attribute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 format_flags = 1;
  if (this->format_flags() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->format_flags(), target);
  }

  // int32 min_int = 2;
  if (this->min_int() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->min_int(), target);
  }

  // int32 max_int = 3;
  if (this->max_int() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->max_int(), target);
  }

  // repeated .aapt.pb.Attribute.Symbol symbol = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->symbol_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->symbol(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Attribute)
  return target;
}

size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Attribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Attribute.Symbol symbol = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->symbol_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->symbol(static_cast<int>(i)));
    }
  }

  // uint32 format_flags = 1;
  if (this->format_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->format_flags());
  }

  // int32 min_int = 2;
  if (this->min_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_int());
  }

  // int32 max_int = 3;
  if (this->max_int() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_int());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Attribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Attribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Attribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Attribute)
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  symbol_.MergeFrom(from.symbol_);
  if (from.format_flags() != 0) {
    set_format_flags(from.format_flags());
  }
  if (from.min_int() != 0) {
    set_min_int(from.min_int());
  }
  if (from.max_int() != 0) {
    set_max_int(from.max_int());
  }
}

void Attribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  return true;
}

void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&symbol_)->InternalSwap(CastToBase(&other->symbol_));
  swap(format_flags_, other->format_flags_);
  swap(min_int_, other->min_int_);
  swap(max_int_, other->max_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Style_Entry::InitAsDefaultInstance() {
  ::aapt::pb::_Style_Entry_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
  ::aapt::pb::_Style_Entry_default_instance_._instance.get_mutable()->key_ = const_cast< ::aapt::pb::Reference*>(
      ::aapt::pb::Reference::internal_default_instance());
  ::aapt::pb::_Style_Entry_default_instance_._instance.get_mutable()->item_ = const_cast< ::aapt::pb::Item*>(
      ::aapt::pb::Item::internal_default_instance());
}
class Style_Entry::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Style_Entry* msg);
  static const ::aapt::pb::Reference& key(const Style_Entry* msg);
  static const ::aapt::pb::Item& item(const Style_Entry* msg);
};

const ::aapt::pb::Source&
Style_Entry::_Internal::source(const Style_Entry* msg) {
  return *msg->source_;
}
const ::aapt::pb::Reference&
Style_Entry::_Internal::key(const Style_Entry* msg) {
  return *msg->key_;
}
const ::aapt::pb::Item&
Style_Entry::_Internal::item(const Style_Entry* msg) {
  return *msg->item_;
}
Style_Entry::Style_Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Style.Entry)
}
Style_Entry::Style_Entry(const Style_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from.has_key()) {
    key_ = new ::aapt::pb::Reference(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from.has_item()) {
    item_ = new ::aapt::pb::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Style.Entry)
}

void Style_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Style_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_) -
      reinterpret_cast<char*>(&source_)) + sizeof(item_));
}

Style_Entry::~Style_Entry() {
  // @@protoc_insertion_point(destructor:aapt.pb.Style.Entry)
  SharedDtor();
}

void Style_Entry::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete item_;
}

void Style_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Style_Entry& Style_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Style_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Style_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Style.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Style_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.Style.Entry.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Reference key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Style_Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Style.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Style.Entry.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Reference key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Item item = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Style.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Style.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Style_Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Style.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Style.Entry.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // .aapt.pb.Reference key = 3;
  if (this->has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::key(this), output);
  }

  // .aapt.pb.Item item = 4;
  if (this->has_item()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::item(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Style.Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* Style_Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Style.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Style.Entry.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // .aapt.pb.Reference key = 3;
  if (this->has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::key(this), target);
  }

  // .aapt.pb.Item item = 4;
  if (this->has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::item(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Style.Entry)
  return target;
}

size_t Style_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Style.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .aapt.pb.Reference key = 3;
  if (this->has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  // .aapt.pb.Item item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Style_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Style.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Style_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Style_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Style.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Style.Entry)
    MergeFrom(*source);
  }
}

void Style_Entry::MergeFrom(const Style_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Style.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.has_key()) {
    mutable_key()->::aapt::pb::Reference::MergeFrom(from.key());
  }
  if (from.has_item()) {
    mutable_item()->::aapt::pb::Item::MergeFrom(from.item());
  }
}

void Style_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Style.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Style_Entry::CopyFrom(const Style_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Style.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Style_Entry::IsInitialized() const {
  return true;
}

void Style_Entry::InternalSwap(Style_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(key_, other->key_);
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Style_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Style::InitAsDefaultInstance() {
  ::aapt::pb::_Style_default_instance_._instance.get_mutable()->parent_ = const_cast< ::aapt::pb::Reference*>(
      ::aapt::pb::Reference::internal_default_instance());
  ::aapt::pb::_Style_default_instance_._instance.get_mutable()->parent_source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
}
class Style::_Internal {
 public:
  static const ::aapt::pb::Reference& parent(const Style* msg);
  static const ::aapt::pb::Source& parent_source(const Style* msg);
};

const ::aapt::pb::Reference&
Style::_Internal::parent(const Style* msg) {
  return *msg->parent_;
}
const ::aapt::pb::Source&
Style::_Internal::parent_source(const Style* msg) {
  return *msg->parent_source_;
}
Style::Style()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Style)
}
Style::Style(const Style& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parent()) {
    parent_ = new ::aapt::pb::Reference(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from.has_parent_source()) {
    parent_source_ = new ::aapt::pb::Source(*from.parent_source_);
  } else {
    parent_source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Style)
}

void Style::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Style_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  ::memset(&parent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_source_) -
      reinterpret_cast<char*>(&parent_)) + sizeof(parent_source_));
}

Style::~Style() {
  // @@protoc_insertion_point(destructor:aapt.pb.Style)
  SharedDtor();
}

void Style::SharedDtor() {
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete parent_source_;
}

void Style::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Style& Style::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Style_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Style::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parent_source_ != nullptr) {
    delete parent_source_;
  }
  parent_source_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Style::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Reference parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Source parent_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_parent_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.Style.Entry entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Style::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Style)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Reference parent = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Source parent_source = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_parent_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.Style.Entry entry = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Style)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Style)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Style::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference parent = 1;
  if (this->has_parent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::parent(this), output);
  }

  // .aapt.pb.Source parent_source = 2;
  if (this->has_parent_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::parent_source(this), output);
  }

  // repeated .aapt.pb.Style.Entry entry = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->entry(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Style)
}

::PROTOBUF_NAMESPACE_ID::uint8* Style::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Reference parent = 1;
  if (this->has_parent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::parent(this), target);
  }

  // .aapt.pb.Source parent_source = 2;
  if (this->has_parent_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::parent_source(this), target);
  }

  // repeated .aapt.pb.Style.Entry entry = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->entry(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Style)
  return target;
}

size_t Style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Style)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Style.Entry entry = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entry(static_cast<int>(i)));
    }
  }

  // .aapt.pb.Reference parent = 1;
  if (this->has_parent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // .aapt.pb.Source parent_source = 2;
  if (this->has_parent_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_source_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Style::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Style)
  GOOGLE_DCHECK_NE(&from, this);
  const Style* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Style>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Style)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Style)
    MergeFrom(*source);
  }
}

void Style::MergeFrom(const Style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Style)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from.has_parent()) {
    mutable_parent()->::aapt::pb::Reference::MergeFrom(from.parent());
  }
  if (from.has_parent_source()) {
    mutable_parent_source()->::aapt::pb::Source::MergeFrom(from.parent_source());
  }
}

void Style::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Style::CopyFrom(const Style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Style::IsInitialized() const {
  return true;
}

void Style::InternalSwap(Style* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entry_)->InternalSwap(CastToBase(&other->entry_));
  swap(parent_, other->parent_);
  swap(parent_source_, other->parent_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Style::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Styleable_Entry::InitAsDefaultInstance() {
  ::aapt::pb::_Styleable_Entry_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
  ::aapt::pb::_Styleable_Entry_default_instance_._instance.get_mutable()->attr_ = const_cast< ::aapt::pb::Reference*>(
      ::aapt::pb::Reference::internal_default_instance());
}
class Styleable_Entry::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Styleable_Entry* msg);
  static const ::aapt::pb::Reference& attr(const Styleable_Entry* msg);
};

const ::aapt::pb::Source&
Styleable_Entry::_Internal::source(const Styleable_Entry* msg) {
  return *msg->source_;
}
const ::aapt::pb::Reference&
Styleable_Entry::_Internal::attr(const Styleable_Entry* msg) {
  return *msg->attr_;
}
Styleable_Entry::Styleable_Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Styleable.Entry)
}
Styleable_Entry::Styleable_Entry(const Styleable_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from.has_attr()) {
    attr_ = new ::aapt::pb::Reference(*from.attr_);
  } else {
    attr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Styleable.Entry)
}

void Styleable_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Styleable_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attr_) -
      reinterpret_cast<char*>(&source_)) + sizeof(attr_));
}

Styleable_Entry::~Styleable_Entry() {
  // @@protoc_insertion_point(destructor:aapt.pb.Styleable.Entry)
  SharedDtor();
}

void Styleable_Entry::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete attr_;
}

void Styleable_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Styleable_Entry& Styleable_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Styleable_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Styleable_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Styleable.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Styleable_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.Styleable.Entry.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Reference attr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_attr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Styleable_Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Styleable.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Styleable.Entry.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Reference attr = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Styleable.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Styleable.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Styleable_Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Styleable.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Styleable.Entry.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // .aapt.pb.Reference attr = 3;
  if (this->has_attr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::attr(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Styleable.Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* Styleable_Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Styleable.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Styleable.Entry.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // .aapt.pb.Reference attr = 3;
  if (this->has_attr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::attr(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Styleable.Entry)
  return target;
}

size_t Styleable_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Styleable.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .aapt.pb.Reference attr = 3;
  if (this->has_attr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attr_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Styleable_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Styleable.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Styleable_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Styleable_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Styleable.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Styleable.Entry)
    MergeFrom(*source);
  }
}

void Styleable_Entry::MergeFrom(const Styleable_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Styleable.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.has_attr()) {
    mutable_attr()->::aapt::pb::Reference::MergeFrom(from.attr());
  }
}

void Styleable_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Styleable.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Styleable_Entry::CopyFrom(const Styleable_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Styleable.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Styleable_Entry::IsInitialized() const {
  return true;
}

void Styleable_Entry::InternalSwap(Styleable_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(attr_, other->attr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Styleable_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Styleable::InitAsDefaultInstance() {
}
class Styleable::_Internal {
 public:
};

Styleable::Styleable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Styleable)
}
Styleable::Styleable(const Styleable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Styleable)
}

void Styleable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Styleable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
}

Styleable::~Styleable() {
  // @@protoc_insertion_point(destructor:aapt.pb.Styleable)
  SharedDtor();
}

void Styleable::SharedDtor() {
}

void Styleable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Styleable& Styleable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Styleable_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Styleable::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Styleable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Styleable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .aapt.pb.Styleable.Entry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Styleable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Styleable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aapt.pb.Styleable.Entry entry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Styleable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Styleable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Styleable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Styleable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Styleable.Entry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entry(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Styleable)
}

::PROTOBUF_NAMESPACE_ID::uint8* Styleable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Styleable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Styleable.Entry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entry(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Styleable)
  return target;
}

size_t Styleable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Styleable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Styleable.Entry entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Styleable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Styleable)
  GOOGLE_DCHECK_NE(&from, this);
  const Styleable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Styleable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Styleable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Styleable)
    MergeFrom(*source);
  }
}

void Styleable::MergeFrom(const Styleable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Styleable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
}

void Styleable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Styleable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Styleable::CopyFrom(const Styleable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Styleable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Styleable::IsInitialized() const {
  return true;
}

void Styleable::InternalSwap(Styleable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entry_)->InternalSwap(CastToBase(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Styleable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Array_Element::InitAsDefaultInstance() {
  ::aapt::pb::_Array_Element_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
  ::aapt::pb::_Array_Element_default_instance_._instance.get_mutable()->item_ = const_cast< ::aapt::pb::Item*>(
      ::aapt::pb::Item::internal_default_instance());
}
class Array_Element::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Array_Element* msg);
  static const ::aapt::pb::Item& item(const Array_Element* msg);
};

const ::aapt::pb::Source&
Array_Element::_Internal::source(const Array_Element* msg) {
  return *msg->source_;
}
const ::aapt::pb::Item&
Array_Element::_Internal::item(const Array_Element* msg) {
  return *msg->item_;
}
Array_Element::Array_Element()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Array.Element)
}
Array_Element::Array_Element(const Array_Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from.has_item()) {
    item_ = new ::aapt::pb::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Array.Element)
}

void Array_Element::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Array_Element_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_) -
      reinterpret_cast<char*>(&source_)) + sizeof(item_));
}

Array_Element::~Array_Element() {
  // @@protoc_insertion_point(destructor:aapt.pb.Array.Element)
  SharedDtor();
}

void Array_Element::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete item_;
}

void Array_Element::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Array_Element& Array_Element::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Array_Element_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Array_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Array.Element)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Array_Element::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.Array.Element.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Item item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Array_Element::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Array.Element)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Array.Element.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Item item = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Array.Element)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Array.Element)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Array_Element::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Array.Element)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Array.Element.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // .aapt.pb.Item item = 3;
  if (this->has_item()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::item(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Array.Element)
}

::PROTOBUF_NAMESPACE_ID::uint8* Array_Element::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Array.Element)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Array.Element.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // .aapt.pb.Item item = 3;
  if (this->has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::item(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Array.Element)
  return target;
}

size_t Array_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Array.Element)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .aapt.pb.Item item = 3;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Array_Element::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Array.Element)
  GOOGLE_DCHECK_NE(&from, this);
  const Array_Element* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Array_Element>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Array.Element)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Array.Element)
    MergeFrom(*source);
  }
}

void Array_Element::MergeFrom(const Array_Element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Array.Element)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.has_item()) {
    mutable_item()->::aapt::pb::Item::MergeFrom(from.item());
  }
}

void Array_Element::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Array.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array_Element::CopyFrom(const Array_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Array.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array_Element::IsInitialized() const {
  return true;
}

void Array_Element::InternalSwap(Array_Element* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(item_, other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Array_Element::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Array::InitAsDefaultInstance() {
}
class Array::_Internal {
 public:
};

Array::Array()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Array)
}
Array::Array(const Array& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Array)
}

void Array::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Array_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
}

Array::~Array() {
  // @@protoc_insertion_point(destructor:aapt.pb.Array)
  SharedDtor();
}

void Array::SharedDtor() {
}

void Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Array& Array::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Array_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Array::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Array::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .aapt.pb.Array.Element element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Array::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Array)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aapt.pb.Array.Element element = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Array)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Array::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Array.Element element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->element(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Array)
}

::PROTOBUF_NAMESPACE_ID::uint8* Array::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Array.Element element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->element_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->element(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Array)
  return target;
}

size_t Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Array)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Array.Element element = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->element_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->element(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Array::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Array)
  GOOGLE_DCHECK_NE(&from, this);
  const Array* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Array>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Array)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Array)
    MergeFrom(*source);
  }
}

void Array::MergeFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void Array::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Array::CopyFrom(const Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Array::IsInitialized() const {
  return true;
}

void Array::InternalSwap(Array* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&element_)->InternalSwap(CastToBase(&other->element_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Array::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Plural_Entry::InitAsDefaultInstance() {
  ::aapt::pb::_Plural_Entry_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::Source*>(
      ::aapt::pb::Source::internal_default_instance());
  ::aapt::pb::_Plural_Entry_default_instance_._instance.get_mutable()->item_ = const_cast< ::aapt::pb::Item*>(
      ::aapt::pb::Item::internal_default_instance());
}
class Plural_Entry::_Internal {
 public:
  static const ::aapt::pb::Source& source(const Plural_Entry* msg);
  static const ::aapt::pb::Item& item(const Plural_Entry* msg);
};

const ::aapt::pb::Source&
Plural_Entry::_Internal::source(const Plural_Entry* msg) {
  return *msg->source_;
}
const ::aapt::pb::Item&
Plural_Entry::_Internal::item(const Plural_Entry* msg) {
  return *msg->item_;
}
Plural_Entry::Plural_Entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Plural.Entry)
}
Plural_Entry::Plural_Entry(const Plural_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.comment().empty()) {
    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::Source(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from.has_item()) {
    item_ = new ::aapt::pb::Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  arity_ = from.arity_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Plural.Entry)
}

void Plural_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plural_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arity_) -
      reinterpret_cast<char*>(&source_)) + sizeof(arity_));
}

Plural_Entry::~Plural_Entry() {
  // @@protoc_insertion_point(destructor:aapt.pb.Plural.Entry)
  SharedDtor();
}

void Plural_Entry::SharedDtor() {
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete item_;
}

void Plural_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plural_Entry& Plural_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plural_Entry_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Plural_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Plural.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  arity_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Plural_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_comment(), ptr, ctx, "aapt.pb.Plural.Entry.comment");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Plural.Arity arity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_arity(static_cast<::aapt::pb::Plural_Arity>(val));
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Plural_Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Plural.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.Plural.Entry.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Plural.Arity arity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_arity(static_cast< ::aapt::pb::Plural_Arity >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Item item = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Plural.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Plural.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Plural_Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Plural.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::source(this), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Plural.Entry.comment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // .aapt.pb.Plural.Arity arity = 3;
  if (this->arity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->arity(), output);
  }

  // .aapt.pb.Item item = 4;
  if (this->has_item()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::item(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Plural.Entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* Plural_Entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Plural.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::source(this), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.Plural.Entry.comment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // .aapt.pb.Plural.Arity arity = 3;
  if (this->arity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->arity(), target);
  }

  // .aapt.pb.Item item = 4;
  if (this->has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::item(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Plural.Entry)
  return target;
}

size_t Plural_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Plural.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .aapt.pb.Source source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .aapt.pb.Item item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .aapt.pb.Plural.Arity arity = 3;
  if (this->arity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->arity());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plural_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Plural.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Plural_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plural_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Plural.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Plural.Entry)
    MergeFrom(*source);
  }
}

void Plural_Entry::MergeFrom(const Plural_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Plural.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::Source::MergeFrom(from.source());
  }
  if (from.has_item()) {
    mutable_item()->::aapt::pb::Item::MergeFrom(from.item());
  }
  if (from.arity() != 0) {
    set_arity(from.arity());
  }
}

void Plural_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Plural.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plural_Entry::CopyFrom(const Plural_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Plural.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plural_Entry::IsInitialized() const {
  return true;
}

void Plural_Entry::InternalSwap(Plural_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(item_, other->item_);
  swap(arity_, other->arity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Plural_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Plural::InitAsDefaultInstance() {
}
class Plural::_Internal {
 public:
};

Plural::Plural()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.Plural)
}
Plural::Plural(const Plural& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aapt.pb.Plural)
}

void Plural::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plural_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
}

Plural::~Plural() {
  // @@protoc_insertion_point(destructor:aapt.pb.Plural)
  SharedDtor();
}

void Plural::SharedDtor() {
}

void Plural::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plural& Plural::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plural_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void Plural::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.Plural)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Plural::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .aapt.pb.Plural.Entry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Plural::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.Plural)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aapt.pb.Plural.Entry entry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.Plural)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.Plural)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Plural::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.Plural)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Plural.Entry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entry(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.Plural)
}

::PROTOBUF_NAMESPACE_ID::uint8* Plural::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.Plural)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.Plural.Entry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entry(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.Plural)
  return target;
}

size_t Plural::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.Plural)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.Plural.Entry entry = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plural::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.Plural)
  GOOGLE_DCHECK_NE(&from, this);
  const Plural* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plural>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.Plural)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.Plural)
    MergeFrom(*source);
  }
}

void Plural::MergeFrom(const Plural& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.Plural)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
}

void Plural::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.Plural)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plural::CopyFrom(const Plural& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.Plural)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plural::IsInitialized() const {
  return true;
}

void Plural::InternalSwap(Plural* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entry_)->InternalSwap(CastToBase(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Plural::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XmlNode::InitAsDefaultInstance() {
  ::aapt::pb::_XmlNode_default_instance_.element_ = const_cast< ::aapt::pb::XmlElement*>(
      ::aapt::pb::XmlElement::internal_default_instance());
  ::aapt::pb::_XmlNode_default_instance_.text_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::aapt::pb::_XmlNode_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::SourcePosition*>(
      ::aapt::pb::SourcePosition::internal_default_instance());
}
class XmlNode::_Internal {
 public:
  static const ::aapt::pb::XmlElement& element(const XmlNode* msg);
  static const ::aapt::pb::SourcePosition& source(const XmlNode* msg);
};

const ::aapt::pb::XmlElement&
XmlNode::_Internal::element(const XmlNode* msg) {
  return *msg->node_.element_;
}
const ::aapt::pb::SourcePosition&
XmlNode::_Internal::source(const XmlNode* msg) {
  return *msg->source_;
}
void XmlNode::set_allocated_element(::aapt::pb::XmlElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_node();
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    set_has_element();
    node_.element_ = element;
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlNode.element)
}
XmlNode::XmlNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.XmlNode)
}
XmlNode::XmlNode(const XmlNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source()) {
    source_ = new ::aapt::pb::SourcePosition(*from.source_);
  } else {
    source_ = nullptr;
  }
  clear_has_node();
  switch (from.node_case()) {
    case kElement: {
      mutable_element()->::aapt::pb::XmlElement::MergeFrom(from.element());
      break;
    }
    case kText: {
      set_text(from.text());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.XmlNode)
}

void XmlNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  source_ = nullptr;
  clear_has_node();
}

XmlNode::~XmlNode() {
  // @@protoc_insertion_point(destructor:aapt.pb.XmlNode)
  SharedDtor();
}

void XmlNode::SharedDtor() {
  if (this != internal_default_instance()) delete source_;
  if (has_node()) {
    clear_node();
  }
}

void XmlNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmlNode& XmlNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void XmlNode::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:aapt.pb.XmlNode)
  switch (node_case()) {
    case kElement: {
      delete node_.element_;
      break;
    }
    case kText: {
      node_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void XmlNode::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.XmlNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  clear_node();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmlNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aapt.pb.XmlElement element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_element(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "aapt.pb.XmlNode.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.SourcePosition source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmlNode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.XmlNode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aapt.pb.XmlElement element = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.XmlNode.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.SourcePosition source = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.XmlNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.XmlNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmlNode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.XmlNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.XmlElement element = 1;
  if (has_element()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::element(this), output);
  }

  // string text = 2;
  if (has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNode.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // .aapt.pb.SourcePosition source = 3;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::source(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.XmlNode)
}

::PROTOBUF_NAMESPACE_ID::uint8* XmlNode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.XmlNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aapt.pb.XmlElement element = 1;
  if (has_element()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::element(this), target);
  }

  // string text = 2;
  if (has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNode.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // .aapt.pb.SourcePosition source = 3;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::source(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.XmlNode)
  return target;
}

size_t XmlNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.XmlNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aapt.pb.SourcePosition source = 3;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  switch (node_case()) {
    // .aapt.pb.XmlElement element = 1;
    case kElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *node_.element_);
      break;
    }
    // string text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->text());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmlNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.XmlNode)
  GOOGLE_DCHECK_NE(&from, this);
  const XmlNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XmlNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.XmlNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.XmlNode)
    MergeFrom(*source);
  }
}

void XmlNode::MergeFrom(const XmlNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.XmlNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    mutable_source()->::aapt::pb::SourcePosition::MergeFrom(from.source());
  }
  switch (from.node_case()) {
    case kElement: {
      mutable_element()->::aapt::pb::XmlElement::MergeFrom(from.element());
      break;
    }
    case kText: {
      set_text(from.text());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
}

void XmlNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.XmlNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlNode::CopyFrom(const XmlNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.XmlNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlNode::IsInitialized() const {
  return true;
}

void XmlNode::InternalSwap(XmlNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(source_, other->source_);
  swap(node_, other->node_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata XmlNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XmlElement::InitAsDefaultInstance() {
}
class XmlElement::_Internal {
 public:
};

XmlElement::XmlElement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.XmlElement)
}
XmlElement::XmlElement(const XmlElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      namespace_declaration_(from.namespace_declaration_),
      attribute_(from.attribute_),
      child_(from.child_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.namespace_uri().empty()) {
    namespace_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namespace_uri_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.XmlElement)
}

void XmlElement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  namespace_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

XmlElement::~XmlElement() {
  // @@protoc_insertion_point(destructor:aapt.pb.XmlElement)
  SharedDtor();
}

void XmlElement::SharedDtor() {
  namespace_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void XmlElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmlElement& XmlElement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XmlElement_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void XmlElement::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.XmlElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace_declaration_.Clear();
  attribute_.Clear();
  child_.Clear();
  namespace_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmlElement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_namespace_declaration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // string namespace_uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_namespace_uri(), ptr, ctx, "aapt.pb.XmlElement.namespace_uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "aapt.pb.XmlElement.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.XmlAttribute attribute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.XmlNode child = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmlElement::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.XmlElement)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_namespace_declaration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace_uri = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_uri()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_uri().data(), static_cast<int>(this->namespace_uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.XmlElement.namespace_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.XmlElement.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.XmlAttribute attribute = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.XmlNode child = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.XmlElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.XmlElement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmlElement::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.XmlElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namespace_declaration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->namespace_declaration(static_cast<int>(i)),
      output);
  }

  // string namespace_uri = 2;
  if (this->namespace_uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_uri().data(), static_cast<int>(this->namespace_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlElement.namespace_uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->namespace_uri(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlElement.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .aapt.pb.XmlAttribute attribute = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->attribute(static_cast<int>(i)),
      output);
  }

  // repeated .aapt.pb.XmlNode child = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->child(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.XmlElement)
}

::PROTOBUF_NAMESPACE_ID::uint8* XmlElement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.XmlElement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namespace_declaration_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->namespace_declaration(static_cast<int>(i)), target);
  }

  // string namespace_uri = 2;
  if (this->namespace_uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_uri().data(), static_cast<int>(this->namespace_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlElement.namespace_uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->namespace_uri(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlElement.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .aapt.pb.XmlAttribute attribute = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->attribute(static_cast<int>(i)), target);
  }

  // repeated .aapt.pb.XmlNode child = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->child(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.XmlElement)
  return target;
}

size_t XmlElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.XmlElement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->namespace_declaration_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->namespace_declaration(static_cast<int>(i)));
    }
  }

  // repeated .aapt.pb.XmlAttribute attribute = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // repeated .aapt.pb.XmlNode child = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->child_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->child(static_cast<int>(i)));
    }
  }

  // string namespace_uri = 2;
  if (this->namespace_uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->namespace_uri());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmlElement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.XmlElement)
  GOOGLE_DCHECK_NE(&from, this);
  const XmlElement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XmlElement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.XmlElement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.XmlElement)
    MergeFrom(*source);
  }
}

void XmlElement::MergeFrom(const XmlElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.XmlElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namespace_declaration_.MergeFrom(from.namespace_declaration_);
  attribute_.MergeFrom(from.attribute_);
  child_.MergeFrom(from.child_);
  if (from.namespace_uri().size() > 0) {

    namespace_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namespace_uri_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void XmlElement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.XmlElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlElement::CopyFrom(const XmlElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.XmlElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlElement::IsInitialized() const {
  return true;
}

void XmlElement::InternalSwap(XmlElement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&namespace_declaration_)->InternalSwap(CastToBase(&other->namespace_declaration_));
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  CastToBase(&child_)->InternalSwap(CastToBase(&other->child_));
  namespace_uri_.Swap(&other->namespace_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata XmlElement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XmlNamespace::InitAsDefaultInstance() {
  ::aapt::pb::_XmlNamespace_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::SourcePosition*>(
      ::aapt::pb::SourcePosition::internal_default_instance());
}
class XmlNamespace::_Internal {
 public:
  static const ::aapt::pb::SourcePosition& source(const XmlNamespace* msg);
};

const ::aapt::pb::SourcePosition&
XmlNamespace::_Internal::source(const XmlNamespace* msg) {
  return *msg->source_;
}
XmlNamespace::XmlNamespace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.XmlNamespace)
}
XmlNamespace::XmlNamespace(const XmlNamespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uri().empty()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::SourcePosition(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.XmlNamespace)
}

void XmlNamespace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_XmlNamespace_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_ = nullptr;
}

XmlNamespace::~XmlNamespace() {
  // @@protoc_insertion_point(destructor:aapt.pb.XmlNamespace)
  SharedDtor();
}

void XmlNamespace::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
}

void XmlNamespace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmlNamespace& XmlNamespace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XmlNamespace_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void XmlNamespace::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.XmlNamespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmlNamespace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_prefix(), ptr, ctx, "aapt.pb.XmlNamespace.prefix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uri(), ptr, ctx, "aapt.pb.XmlNamespace.uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.SourcePosition source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmlNamespace::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.XmlNamespace)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string prefix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.XmlNamespace.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.XmlNamespace.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.SourcePosition source = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.XmlNamespace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.XmlNamespace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmlNamespace::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.XmlNamespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNamespace.prefix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNamespace.uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  // .aapt.pb.SourcePosition source = 3;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::source(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.XmlNamespace)
}

::PROTOBUF_NAMESPACE_ID::uint8* XmlNamespace::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.XmlNamespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNamespace.prefix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlNamespace.uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  // .aapt.pb.SourcePosition source = 3;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::source(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.XmlNamespace)
  return target;
}

size_t XmlNamespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.XmlNamespace)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // string uri = 2;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // .aapt.pb.SourcePosition source = 3;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmlNamespace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.XmlNamespace)
  GOOGLE_DCHECK_NE(&from, this);
  const XmlNamespace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XmlNamespace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.XmlNamespace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.XmlNamespace)
    MergeFrom(*source);
  }
}

void XmlNamespace::MergeFrom(const XmlNamespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.XmlNamespace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::SourcePosition::MergeFrom(from.source());
  }
}

void XmlNamespace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.XmlNamespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlNamespace::CopyFrom(const XmlNamespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.XmlNamespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlNamespace::IsInitialized() const {
  return true;
}

void XmlNamespace::InternalSwap(XmlNamespace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XmlNamespace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void XmlAttribute::InitAsDefaultInstance() {
  ::aapt::pb::_XmlAttribute_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::SourcePosition*>(
      ::aapt::pb::SourcePosition::internal_default_instance());
  ::aapt::pb::_XmlAttribute_default_instance_._instance.get_mutable()->compiled_item_ = const_cast< ::aapt::pb::Item*>(
      ::aapt::pb::Item::internal_default_instance());
}
class XmlAttribute::_Internal {
 public:
  static const ::aapt::pb::SourcePosition& source(const XmlAttribute* msg);
  static const ::aapt::pb::Item& compiled_item(const XmlAttribute* msg);
};

const ::aapt::pb::SourcePosition&
XmlAttribute::_Internal::source(const XmlAttribute* msg) {
  return *msg->source_;
}
const ::aapt::pb::Item&
XmlAttribute::_Internal::compiled_item(const XmlAttribute* msg) {
  return *msg->compiled_item_;
}
XmlAttribute::XmlAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.XmlAttribute)
}
XmlAttribute::XmlAttribute(const XmlAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  namespace_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.namespace_uri().empty()) {
    namespace_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namespace_uri_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::SourcePosition(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from.has_compiled_item()) {
    compiled_item_ = new ::aapt::pb::Item(*from.compiled_item_);
  } else {
    compiled_item_ = nullptr;
  }
  resource_id_ = from.resource_id_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.XmlAttribute)
}

void XmlAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_XmlAttribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  namespace_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_id_) -
      reinterpret_cast<char*>(&source_)) + sizeof(resource_id_));
}

XmlAttribute::~XmlAttribute() {
  // @@protoc_insertion_point(destructor:aapt.pb.XmlAttribute)
  SharedDtor();
}

void XmlAttribute::SharedDtor() {
  namespace_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete compiled_item_;
}

void XmlAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmlAttribute& XmlAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_XmlAttribute_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void XmlAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.XmlAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && compiled_item_ != nullptr) {
    delete compiled_item_;
  }
  compiled_item_ = nullptr;
  resource_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmlAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string namespace_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_namespace_uri(), ptr, ctx, "aapt.pb.XmlAttribute.namespace_uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "aapt.pb.XmlAttribute.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "aapt.pb.XmlAttribute.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.SourcePosition source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 resource_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.Item compiled_item = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_compiled_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmlAttribute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.XmlAttribute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string namespace_uri = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_uri()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_uri().data(), static_cast<int>(this->namespace_uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.XmlAttribute.namespace_uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.XmlAttribute.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.XmlAttribute.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.SourcePosition source = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 resource_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.Item compiled_item = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compiled_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.XmlAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.XmlAttribute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmlAttribute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.XmlAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace_uri = 1;
  if (this->namespace_uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_uri().data(), static_cast<int>(this->namespace_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.namespace_uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->namespace_uri(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // .aapt.pb.SourcePosition source = 4;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::source(this), output);
  }

  // uint32 resource_id = 5;
  if (this->resource_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->resource_id(), output);
  }

  // .aapt.pb.Item compiled_item = 6;
  if (this->has_compiled_item()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::compiled_item(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.XmlAttribute)
}

::PROTOBUF_NAMESPACE_ID::uint8* XmlAttribute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.XmlAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace_uri = 1;
  if (this->namespace_uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_uri().data(), static_cast<int>(this->namespace_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.namespace_uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->namespace_uri(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.XmlAttribute.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // .aapt.pb.SourcePosition source = 4;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::source(this), target);
  }

  // uint32 resource_id = 5;
  if (this->resource_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->resource_id(), target);
  }

  // .aapt.pb.Item compiled_item = 6;
  if (this->has_compiled_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::compiled_item(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.XmlAttribute)
  return target;
}

size_t XmlAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.XmlAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace_uri = 1;
  if (this->namespace_uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->namespace_uri());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .aapt.pb.SourcePosition source = 4;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .aapt.pb.Item compiled_item = 6;
  if (this->has_compiled_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compiled_item_);
  }

  // uint32 resource_id = 5;
  if (this->resource_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->resource_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmlAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.XmlAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const XmlAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XmlAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.XmlAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.XmlAttribute)
    MergeFrom(*source);
  }
}

void XmlAttribute::MergeFrom(const XmlAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.XmlAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.namespace_uri().size() > 0) {

    namespace_uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namespace_uri_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::SourcePosition::MergeFrom(from.source());
  }
  if (from.has_compiled_item()) {
    mutable_compiled_item()->::aapt::pb::Item::MergeFrom(from.compiled_item());
  }
  if (from.resource_id() != 0) {
    set_resource_id(from.resource_id());
  }
}

void XmlAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.XmlAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmlAttribute::CopyFrom(const XmlAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.XmlAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmlAttribute::IsInitialized() const {
  return true;
}

void XmlAttribute::InternalSwap(XmlAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  namespace_uri_.Swap(&other->namespace_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_, other->source_);
  swap(compiled_item_, other->compiled_item_);
  swap(resource_id_, other->resource_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XmlAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MacroBody::InitAsDefaultInstance() {
  ::aapt::pb::_MacroBody_default_instance_._instance.get_mutable()->style_string_ = const_cast< ::aapt::pb::StyleString*>(
      ::aapt::pb::StyleString::internal_default_instance());
  ::aapt::pb::_MacroBody_default_instance_._instance.get_mutable()->source_ = const_cast< ::aapt::pb::SourcePosition*>(
      ::aapt::pb::SourcePosition::internal_default_instance());
}
class MacroBody::_Internal {
 public:
  static const ::aapt::pb::StyleString& style_string(const MacroBody* msg);
  static const ::aapt::pb::SourcePosition& source(const MacroBody* msg);
};

const ::aapt::pb::StyleString&
MacroBody::_Internal::style_string(const MacroBody* msg) {
  return *msg->style_string_;
}
const ::aapt::pb::SourcePosition&
MacroBody::_Internal::source(const MacroBody* msg) {
  return *msg->source_;
}
MacroBody::MacroBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.MacroBody)
}
MacroBody::MacroBody(const MacroBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      untranslatable_sections_(from.untranslatable_sections_),
      namespace_stack_(from.namespace_stack_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.raw_string().empty()) {
    raw_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_string_);
  }
  if (from.has_style_string()) {
    style_string_ = new ::aapt::pb::StyleString(*from.style_string_);
  } else {
    style_string_ = nullptr;
  }
  if (from.has_source()) {
    source_ = new ::aapt::pb::SourcePosition(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.MacroBody)
}

void MacroBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MacroBody_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  raw_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_string_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&style_string_)) + sizeof(source_));
}

MacroBody::~MacroBody() {
  // @@protoc_insertion_point(destructor:aapt.pb.MacroBody)
  SharedDtor();
}

void MacroBody::SharedDtor() {
  raw_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_string_;
  if (this != internal_default_instance()) delete source_;
}

void MacroBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MacroBody& MacroBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MacroBody_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void MacroBody::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.MacroBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  untranslatable_sections_.Clear();
  namespace_stack_.Clear();
  raw_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && style_string_ != nullptr) {
    delete style_string_;
  }
  style_string_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MacroBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string raw_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_raw_string(), ptr, ctx, "aapt.pb.MacroBody.raw_string");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.StyleString style_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_style_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.UntranslatableSection untranslatable_sections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_untranslatable_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.NamespaceAlias namespace_stack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_namespace_stack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .aapt.pb.SourcePosition source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MacroBody::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.MacroBody)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string raw_string = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_string()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->raw_string().data(), static_cast<int>(this->raw_string().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.MacroBody.raw_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.StyleString style_string = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_style_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.UntranslatableSection untranslatable_sections = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_untranslatable_sections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.NamespaceAlias namespace_stack = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_namespace_stack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aapt.pb.SourcePosition source = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.MacroBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.MacroBody)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MacroBody::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.MacroBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw_string = 1;
  if (this->raw_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->raw_string().data(), static_cast<int>(this->raw_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.MacroBody.raw_string");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->raw_string(), output);
  }

  // .aapt.pb.StyleString style_string = 2;
  if (this->has_style_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::style_string(this), output);
  }

  // repeated .aapt.pb.UntranslatableSection untranslatable_sections = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->untranslatable_sections_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->untranslatable_sections(static_cast<int>(i)),
      output);
  }

  // repeated .aapt.pb.NamespaceAlias namespace_stack = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namespace_stack_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->namespace_stack(static_cast<int>(i)),
      output);
  }

  // .aapt.pb.SourcePosition source = 5;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::source(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.MacroBody)
}

::PROTOBUF_NAMESPACE_ID::uint8* MacroBody::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.MacroBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw_string = 1;
  if (this->raw_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->raw_string().data(), static_cast<int>(this->raw_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.MacroBody.raw_string");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->raw_string(), target);
  }

  // .aapt.pb.StyleString style_string = 2;
  if (this->has_style_string()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::style_string(this), target);
  }

  // repeated .aapt.pb.UntranslatableSection untranslatable_sections = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->untranslatable_sections_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->untranslatable_sections(static_cast<int>(i)), target);
  }

  // repeated .aapt.pb.NamespaceAlias namespace_stack = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->namespace_stack_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->namespace_stack(static_cast<int>(i)), target);
  }

  // .aapt.pb.SourcePosition source = 5;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::source(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.MacroBody)
  return target;
}

size_t MacroBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.MacroBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.UntranslatableSection untranslatable_sections = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->untranslatable_sections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->untranslatable_sections(static_cast<int>(i)));
    }
  }

  // repeated .aapt.pb.NamespaceAlias namespace_stack = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->namespace_stack_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->namespace_stack(static_cast<int>(i)));
    }
  }

  // string raw_string = 1;
  if (this->raw_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->raw_string());
  }

  // .aapt.pb.StyleString style_string = 2;
  if (this->has_style_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_string_);
  }

  // .aapt.pb.SourcePosition source = 5;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MacroBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.MacroBody)
  GOOGLE_DCHECK_NE(&from, this);
  const MacroBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MacroBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.MacroBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.MacroBody)
    MergeFrom(*source);
  }
}

void MacroBody::MergeFrom(const MacroBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.MacroBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  untranslatable_sections_.MergeFrom(from.untranslatable_sections_);
  namespace_stack_.MergeFrom(from.namespace_stack_);
  if (from.raw_string().size() > 0) {

    raw_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_string_);
  }
  if (from.has_style_string()) {
    mutable_style_string()->::aapt::pb::StyleString::MergeFrom(from.style_string());
  }
  if (from.has_source()) {
    mutable_source()->::aapt::pb::SourcePosition::MergeFrom(from.source());
  }
}

void MacroBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.MacroBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacroBody::CopyFrom(const MacroBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.MacroBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacroBody::IsInitialized() const {
  return true;
}

void MacroBody::InternalSwap(MacroBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&untranslatable_sections_)->InternalSwap(CastToBase(&other->untranslatable_sections_));
  CastToBase(&namespace_stack_)->InternalSwap(CastToBase(&other->namespace_stack_));
  raw_string_.Swap(&other->raw_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(style_string_, other->style_string_);
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MacroBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NamespaceAlias::InitAsDefaultInstance() {
}
class NamespaceAlias::_Internal {
 public:
};

NamespaceAlias::NamespaceAlias()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.NamespaceAlias)
}
NamespaceAlias::NamespaceAlias(const NamespaceAlias& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.prefix().empty()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.package_name().empty()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  is_private_ = from.is_private_;
  // @@protoc_insertion_point(copy_constructor:aapt.pb.NamespaceAlias)
}

void NamespaceAlias::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamespaceAlias_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_private_ = false;
}

NamespaceAlias::~NamespaceAlias() {
  // @@protoc_insertion_point(destructor:aapt.pb.NamespaceAlias)
  SharedDtor();
}

void NamespaceAlias::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamespaceAlias::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamespaceAlias& NamespaceAlias::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamespaceAlias_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void NamespaceAlias::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.NamespaceAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_private_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamespaceAlias::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_prefix(), ptr, ctx, "aapt.pb.NamespaceAlias.prefix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_package_name(), ptr, ctx, "aapt.pb.NamespaceAlias.package_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_private = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamespaceAlias::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.NamespaceAlias)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string prefix = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->prefix().data(), static_cast<int>(this->prefix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.NamespaceAlias.prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->package_name().data(), static_cast<int>(this->package_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.NamespaceAlias.package_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_private = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_private_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.NamespaceAlias)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.NamespaceAlias)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamespaceAlias::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.NamespaceAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.NamespaceAlias.prefix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prefix(), output);
  }

  // string package_name = 2;
  if (this->package_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.NamespaceAlias.package_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  // bool is_private = 3;
  if (this->is_private() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_private(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.NamespaceAlias)
}

::PROTOBUF_NAMESPACE_ID::uint8* NamespaceAlias::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.NamespaceAlias)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prefix().data(), static_cast<int>(this->prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.NamespaceAlias.prefix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // string package_name = 2;
  if (this->package_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->package_name().data(), static_cast<int>(this->package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.NamespaceAlias.package_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->package_name(), target);
  }

  // bool is_private = 3;
  if (this->is_private() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_private(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.NamespaceAlias)
  return target;
}

size_t NamespaceAlias::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.NamespaceAlias)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  // string package_name = 2;
  if (this->package_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->package_name());
  }

  // bool is_private = 3;
  if (this->is_private() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamespaceAlias::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.NamespaceAlias)
  GOOGLE_DCHECK_NE(&from, this);
  const NamespaceAlias* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamespaceAlias>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.NamespaceAlias)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.NamespaceAlias)
    MergeFrom(*source);
  }
}

void NamespaceAlias::MergeFrom(const NamespaceAlias& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.NamespaceAlias)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prefix().size() > 0) {

    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from.package_name().size() > 0) {

    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  if (from.is_private() != 0) {
    set_is_private(from.is_private());
  }
}

void NamespaceAlias::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.NamespaceAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamespaceAlias::CopyFrom(const NamespaceAlias& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.NamespaceAlias)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamespaceAlias::IsInitialized() const {
  return true;
}

void NamespaceAlias::InternalSwap(NamespaceAlias* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_private_, other->is_private_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamespaceAlias::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StyleString_Span::InitAsDefaultInstance() {
}
class StyleString_Span::_Internal {
 public:
};

StyleString_Span::StyleString_Span()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.StyleString.Span)
}
StyleString_Span::StyleString_Span(const StyleString_Span& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_index_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StyleString.Span)
}

void StyleString_Span::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StyleString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_index_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
}

StyleString_Span::~StyleString_Span() {
  // @@protoc_insertion_point(destructor:aapt.pb.StyleString.Span)
  SharedDtor();
}

void StyleString_Span::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StyleString_Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StyleString_Span& StyleString_Span::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StyleString_Span_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void StyleString_Span::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StyleString.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_index_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StyleString_Span::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "aapt.pb.StyleString.Span.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 end_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StyleString_Span::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.StyleString.Span)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.StyleString.Span.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.StyleString.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.StyleString.Span)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StyleString_Span::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.StyleString.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyleString.Span.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 start_index = 2;
  if (this->start_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // uint32 end_index = 3;
  if (this->end_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->end_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.StyleString.Span)
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleString_Span::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StyleString.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyleString.Span.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 start_index = 2;
  if (this->start_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_index(), target);
  }

  // uint32 end_index = 3;
  if (this->end_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StyleString.Span)
  return target;
}

size_t StyleString_Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StyleString.Span)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 start_index = 2;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->start_index());
  }

  // uint32 end_index = 3;
  if (this->end_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->end_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleString_Span::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.StyleString.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleString_Span* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleString_Span>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.StyleString.Span)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.StyleString.Span)
    MergeFrom(*source);
  }
}

void StyleString_Span::MergeFrom(const StyleString_Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StyleString.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.start_index() != 0) {
    set_start_index(from.start_index());
  }
  if (from.end_index() != 0) {
    set_end_index(from.end_index());
  }
}

void StyleString_Span::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.StyleString.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleString_Span::CopyFrom(const StyleString_Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StyleString.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleString_Span::IsInitialized() const {
  return true;
}

void StyleString_Span::InternalSwap(StyleString_Span* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_index_, other->start_index_);
  swap(end_index_, other->end_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleString_Span::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StyleString::InitAsDefaultInstance() {
}
class StyleString::_Internal {
 public:
};

StyleString::StyleString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.StyleString)
}
StyleString::StyleString(const StyleString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      spans_(from.spans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.str().empty()) {
    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  // @@protoc_insertion_point(copy_constructor:aapt.pb.StyleString)
}

void StyleString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StyleString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StyleString::~StyleString() {
  // @@protoc_insertion_point(destructor:aapt.pb.StyleString)
  SharedDtor();
}

void StyleString::SharedDtor() {
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StyleString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StyleString& StyleString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StyleString_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void StyleString::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.StyleString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StyleString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_str(), ptr, ctx, "aapt.pb.StyleString.str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aapt.pb.StyleString.Span spans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StyleString::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.StyleString)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string str = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), static_cast<int>(this->str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "aapt.pb.StyleString.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aapt.pb.StyleString.Span spans = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_spans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.StyleString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.StyleString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StyleString::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.StyleString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyleString.str");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // repeated .aapt.pb.StyleString.Span spans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spans_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->spans(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.StyleString)
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleString::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.StyleString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (this->str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aapt.pb.StyleString.str");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // repeated .aapt.pb.StyleString.Span spans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spans_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->spans(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.StyleString)
  return target;
}

size_t StyleString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.StyleString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aapt.pb.StyleString.Span spans = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->spans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->spans(static_cast<int>(i)));
    }
  }

  // string str = 1;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->str());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.StyleString)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.StyleString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.StyleString)
    MergeFrom(*source);
  }
}

void StyleString::MergeFrom(const StyleString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.StyleString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
}

void StyleString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.StyleString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleString::CopyFrom(const StyleString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.StyleString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleString::IsInitialized() const {
  return true;
}

void StyleString::InternalSwap(StyleString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&spans_)->InternalSwap(CastToBase(&other->spans_));
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UntranslatableSection::InitAsDefaultInstance() {
}
class UntranslatableSection::_Internal {
 public:
};

UntranslatableSection::UntranslatableSection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aapt.pb.UntranslatableSection)
}
UntranslatableSection::UntranslatableSection(const UntranslatableSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_index_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
  // @@protoc_insertion_point(copy_constructor:aapt.pb.UntranslatableSection)
}

void UntranslatableSection::SharedCtor() {
  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_index_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
}

UntranslatableSection::~UntranslatableSection() {
  // @@protoc_insertion_point(destructor:aapt.pb.UntranslatableSection)
  SharedDtor();
}

void UntranslatableSection::SharedDtor() {
}

void UntranslatableSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UntranslatableSection& UntranslatableSection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UntranslatableSection_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.base);
  return *internal_default_instance();
}


void UntranslatableSection::Clear() {
// @@protoc_insertion_point(message_clear_start:aapt.pb.UntranslatableSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_index_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UntranslatableSection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UntranslatableSection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:aapt.pb.UntranslatableSection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aapt.pb.UntranslatableSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aapt.pb.UntranslatableSection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UntranslatableSection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aapt.pb.UntranslatableSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_index = 1;
  if (this->start_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_index(), output);
  }

  // uint64 end_index = 2;
  if (this->end_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->end_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aapt.pb.UntranslatableSection)
}

::PROTOBUF_NAMESPACE_ID::uint8* UntranslatableSection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aapt.pb.UntranslatableSection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_index = 1;
  if (this->start_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_index(), target);
  }

  // uint64 end_index = 2;
  if (this->end_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aapt.pb.UntranslatableSection)
  return target;
}

size_t UntranslatableSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aapt.pb.UntranslatableSection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_index = 1;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_index());
  }

  // uint64 end_index = 2;
  if (this->end_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->end_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UntranslatableSection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aapt.pb.UntranslatableSection)
  GOOGLE_DCHECK_NE(&from, this);
  const UntranslatableSection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UntranslatableSection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aapt.pb.UntranslatableSection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aapt.pb.UntranslatableSection)
    MergeFrom(*source);
  }
}

void UntranslatableSection::MergeFrom(const UntranslatableSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aapt.pb.UntranslatableSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_index() != 0) {
    set_start_index(from.start_index());
  }
  if (from.end_index() != 0) {
    set_end_index(from.end_index());
  }
}

void UntranslatableSection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aapt.pb.UntranslatableSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UntranslatableSection::CopyFrom(const UntranslatableSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aapt.pb.UntranslatableSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UntranslatableSection::IsInitialized() const {
  return true;
}

void UntranslatableSection::InternalSwap(UntranslatableSection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_index_, other->start_index_);
  swap(end_index_, other->end_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UntranslatableSection::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace aapt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aapt::pb::StringPool* Arena::CreateMaybeMessage< ::aapt::pb::StringPool >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::StringPool >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::SourcePosition* Arena::CreateMaybeMessage< ::aapt::pb::SourcePosition >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::SourcePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Source* Arena::CreateMaybeMessage< ::aapt::pb::Source >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Source >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::ToolFingerprint* Arena::CreateMaybeMessage< ::aapt::pb::ToolFingerprint >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::ToolFingerprint >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::ResourceTable* Arena::CreateMaybeMessage< ::aapt::pb::ResourceTable >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::ResourceTable >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::PackageId* Arena::CreateMaybeMessage< ::aapt::pb::PackageId >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::PackageId >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Package* Arena::CreateMaybeMessage< ::aapt::pb::Package >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Package >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::TypeId* Arena::CreateMaybeMessage< ::aapt::pb::TypeId >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::TypeId >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Type* Arena::CreateMaybeMessage< ::aapt::pb::Type >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Type >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Visibility* Arena::CreateMaybeMessage< ::aapt::pb::Visibility >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Visibility >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::AllowNew* Arena::CreateMaybeMessage< ::aapt::pb::AllowNew >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::AllowNew >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Overlayable* Arena::CreateMaybeMessage< ::aapt::pb::Overlayable >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Overlayable >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::OverlayableItem* Arena::CreateMaybeMessage< ::aapt::pb::OverlayableItem >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::OverlayableItem >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::StagedId* Arena::CreateMaybeMessage< ::aapt::pb::StagedId >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::StagedId >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::EntryId* Arena::CreateMaybeMessage< ::aapt::pb::EntryId >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::EntryId >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Entry* Arena::CreateMaybeMessage< ::aapt::pb::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::ConfigValue* Arena::CreateMaybeMessage< ::aapt::pb::ConfigValue >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::ConfigValue >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Value* Arena::CreateMaybeMessage< ::aapt::pb::Value >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Item* Arena::CreateMaybeMessage< ::aapt::pb::Item >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::CompoundValue* Arena::CreateMaybeMessage< ::aapt::pb::CompoundValue >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::CompoundValue >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Boolean* Arena::CreateMaybeMessage< ::aapt::pb::Boolean >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Boolean >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Reference* Arena::CreateMaybeMessage< ::aapt::pb::Reference >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Id* Arena::CreateMaybeMessage< ::aapt::pb::Id >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Id >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::String* Arena::CreateMaybeMessage< ::aapt::pb::String >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::String >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::RawString* Arena::CreateMaybeMessage< ::aapt::pb::RawString >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::RawString >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::StyledString_Span* Arena::CreateMaybeMessage< ::aapt::pb::StyledString_Span >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::StyledString_Span >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::StyledString* Arena::CreateMaybeMessage< ::aapt::pb::StyledString >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::StyledString >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::FileReference* Arena::CreateMaybeMessage< ::aapt::pb::FileReference >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::FileReference >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Primitive_NullType* Arena::CreateMaybeMessage< ::aapt::pb::Primitive_NullType >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Primitive_NullType >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Primitive_EmptyType* Arena::CreateMaybeMessage< ::aapt::pb::Primitive_EmptyType >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Primitive_EmptyType >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Primitive* Arena::CreateMaybeMessage< ::aapt::pb::Primitive >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Primitive >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Attribute_Symbol* Arena::CreateMaybeMessage< ::aapt::pb::Attribute_Symbol >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Attribute_Symbol >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Attribute* Arena::CreateMaybeMessage< ::aapt::pb::Attribute >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Style_Entry* Arena::CreateMaybeMessage< ::aapt::pb::Style_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Style_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Style* Arena::CreateMaybeMessage< ::aapt::pb::Style >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Style >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Styleable_Entry* Arena::CreateMaybeMessage< ::aapt::pb::Styleable_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Styleable_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Styleable* Arena::CreateMaybeMessage< ::aapt::pb::Styleable >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Styleable >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Array_Element* Arena::CreateMaybeMessage< ::aapt::pb::Array_Element >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Array_Element >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Array* Arena::CreateMaybeMessage< ::aapt::pb::Array >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Array >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Plural_Entry* Arena::CreateMaybeMessage< ::aapt::pb::Plural_Entry >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Plural_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::Plural* Arena::CreateMaybeMessage< ::aapt::pb::Plural >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::Plural >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::XmlNode* Arena::CreateMaybeMessage< ::aapt::pb::XmlNode >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::XmlNode >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::XmlElement* Arena::CreateMaybeMessage< ::aapt::pb::XmlElement >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::XmlElement >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::XmlNamespace* Arena::CreateMaybeMessage< ::aapt::pb::XmlNamespace >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::XmlNamespace >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::XmlAttribute* Arena::CreateMaybeMessage< ::aapt::pb::XmlAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::XmlAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::MacroBody* Arena::CreateMaybeMessage< ::aapt::pb::MacroBody >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::MacroBody >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::NamespaceAlias* Arena::CreateMaybeMessage< ::aapt::pb::NamespaceAlias >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::NamespaceAlias >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::StyleString_Span* Arena::CreateMaybeMessage< ::aapt::pb::StyleString_Span >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::StyleString_Span >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::StyleString* Arena::CreateMaybeMessage< ::aapt::pb::StyleString >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::StyleString >(arena);
}
template<> PROTOBUF_NOINLINE ::aapt::pb::UntranslatableSection* Arena::CreateMaybeMessage< ::aapt::pb::UntranslatableSection >(Arena* arena) {
  return Arena::CreateInternal< ::aapt::pb::UntranslatableSection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
