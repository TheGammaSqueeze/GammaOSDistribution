// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/tools/aapt2/Resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/tools/aapt2/Configuration.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[50]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
namespace aapt {
namespace pb {
class AllowNew;
class AllowNewDefaultTypeInternal;
extern AllowNewDefaultTypeInternal _AllowNew_default_instance_;
class Array;
class ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class Array_Element;
class Array_ElementDefaultTypeInternal;
extern Array_ElementDefaultTypeInternal _Array_Element_default_instance_;
class Attribute;
class AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class Attribute_Symbol;
class Attribute_SymbolDefaultTypeInternal;
extern Attribute_SymbolDefaultTypeInternal _Attribute_Symbol_default_instance_;
class Boolean;
class BooleanDefaultTypeInternal;
extern BooleanDefaultTypeInternal _Boolean_default_instance_;
class CompoundValue;
class CompoundValueDefaultTypeInternal;
extern CompoundValueDefaultTypeInternal _CompoundValue_default_instance_;
class ConfigValue;
class ConfigValueDefaultTypeInternal;
extern ConfigValueDefaultTypeInternal _ConfigValue_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class EntryId;
class EntryIdDefaultTypeInternal;
extern EntryIdDefaultTypeInternal _EntryId_default_instance_;
class FileReference;
class FileReferenceDefaultTypeInternal;
extern FileReferenceDefaultTypeInternal _FileReference_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class MacroBody;
class MacroBodyDefaultTypeInternal;
extern MacroBodyDefaultTypeInternal _MacroBody_default_instance_;
class NamespaceAlias;
class NamespaceAliasDefaultTypeInternal;
extern NamespaceAliasDefaultTypeInternal _NamespaceAlias_default_instance_;
class Overlayable;
class OverlayableDefaultTypeInternal;
extern OverlayableDefaultTypeInternal _Overlayable_default_instance_;
class OverlayableItem;
class OverlayableItemDefaultTypeInternal;
extern OverlayableItemDefaultTypeInternal _OverlayableItem_default_instance_;
class Package;
class PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class PackageId;
class PackageIdDefaultTypeInternal;
extern PackageIdDefaultTypeInternal _PackageId_default_instance_;
class Plural;
class PluralDefaultTypeInternal;
extern PluralDefaultTypeInternal _Plural_default_instance_;
class Plural_Entry;
class Plural_EntryDefaultTypeInternal;
extern Plural_EntryDefaultTypeInternal _Plural_Entry_default_instance_;
class Primitive;
class PrimitiveDefaultTypeInternal;
extern PrimitiveDefaultTypeInternal _Primitive_default_instance_;
class Primitive_EmptyType;
class Primitive_EmptyTypeDefaultTypeInternal;
extern Primitive_EmptyTypeDefaultTypeInternal _Primitive_EmptyType_default_instance_;
class Primitive_NullType;
class Primitive_NullTypeDefaultTypeInternal;
extern Primitive_NullTypeDefaultTypeInternal _Primitive_NullType_default_instance_;
class RawString;
class RawStringDefaultTypeInternal;
extern RawStringDefaultTypeInternal _RawString_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class ResourceTable;
class ResourceTableDefaultTypeInternal;
extern ResourceTableDefaultTypeInternal _ResourceTable_default_instance_;
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class SourcePosition;
class SourcePositionDefaultTypeInternal;
extern SourcePositionDefaultTypeInternal _SourcePosition_default_instance_;
class StagedId;
class StagedIdDefaultTypeInternal;
extern StagedIdDefaultTypeInternal _StagedId_default_instance_;
class String;
class StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
class StringPool;
class StringPoolDefaultTypeInternal;
extern StringPoolDefaultTypeInternal _StringPool_default_instance_;
class Style;
class StyleDefaultTypeInternal;
extern StyleDefaultTypeInternal _Style_default_instance_;
class StyleString;
class StyleStringDefaultTypeInternal;
extern StyleStringDefaultTypeInternal _StyleString_default_instance_;
class StyleString_Span;
class StyleString_SpanDefaultTypeInternal;
extern StyleString_SpanDefaultTypeInternal _StyleString_Span_default_instance_;
class Style_Entry;
class Style_EntryDefaultTypeInternal;
extern Style_EntryDefaultTypeInternal _Style_Entry_default_instance_;
class Styleable;
class StyleableDefaultTypeInternal;
extern StyleableDefaultTypeInternal _Styleable_default_instance_;
class Styleable_Entry;
class Styleable_EntryDefaultTypeInternal;
extern Styleable_EntryDefaultTypeInternal _Styleable_Entry_default_instance_;
class StyledString;
class StyledStringDefaultTypeInternal;
extern StyledStringDefaultTypeInternal _StyledString_default_instance_;
class StyledString_Span;
class StyledString_SpanDefaultTypeInternal;
extern StyledString_SpanDefaultTypeInternal _StyledString_Span_default_instance_;
class ToolFingerprint;
class ToolFingerprintDefaultTypeInternal;
extern ToolFingerprintDefaultTypeInternal _ToolFingerprint_default_instance_;
class Type;
class TypeDefaultTypeInternal;
extern TypeDefaultTypeInternal _Type_default_instance_;
class TypeId;
class TypeIdDefaultTypeInternal;
extern TypeIdDefaultTypeInternal _TypeId_default_instance_;
class UntranslatableSection;
class UntranslatableSectionDefaultTypeInternal;
extern UntranslatableSectionDefaultTypeInternal _UntranslatableSection_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class Visibility;
class VisibilityDefaultTypeInternal;
extern VisibilityDefaultTypeInternal _Visibility_default_instance_;
class XmlAttribute;
class XmlAttributeDefaultTypeInternal;
extern XmlAttributeDefaultTypeInternal _XmlAttribute_default_instance_;
class XmlElement;
class XmlElementDefaultTypeInternal;
extern XmlElementDefaultTypeInternal _XmlElement_default_instance_;
class XmlNamespace;
class XmlNamespaceDefaultTypeInternal;
extern XmlNamespaceDefaultTypeInternal _XmlNamespace_default_instance_;
class XmlNode;
class XmlNodeDefaultTypeInternal;
extern XmlNodeDefaultTypeInternal _XmlNode_default_instance_;
}  // namespace pb
}  // namespace aapt
PROTOBUF_NAMESPACE_OPEN
template<> ::aapt::pb::AllowNew* Arena::CreateMaybeMessage<::aapt::pb::AllowNew>(Arena*);
template<> ::aapt::pb::Array* Arena::CreateMaybeMessage<::aapt::pb::Array>(Arena*);
template<> ::aapt::pb::Array_Element* Arena::CreateMaybeMessage<::aapt::pb::Array_Element>(Arena*);
template<> ::aapt::pb::Attribute* Arena::CreateMaybeMessage<::aapt::pb::Attribute>(Arena*);
template<> ::aapt::pb::Attribute_Symbol* Arena::CreateMaybeMessage<::aapt::pb::Attribute_Symbol>(Arena*);
template<> ::aapt::pb::Boolean* Arena::CreateMaybeMessage<::aapt::pb::Boolean>(Arena*);
template<> ::aapt::pb::CompoundValue* Arena::CreateMaybeMessage<::aapt::pb::CompoundValue>(Arena*);
template<> ::aapt::pb::ConfigValue* Arena::CreateMaybeMessage<::aapt::pb::ConfigValue>(Arena*);
template<> ::aapt::pb::Entry* Arena::CreateMaybeMessage<::aapt::pb::Entry>(Arena*);
template<> ::aapt::pb::EntryId* Arena::CreateMaybeMessage<::aapt::pb::EntryId>(Arena*);
template<> ::aapt::pb::FileReference* Arena::CreateMaybeMessage<::aapt::pb::FileReference>(Arena*);
template<> ::aapt::pb::Id* Arena::CreateMaybeMessage<::aapt::pb::Id>(Arena*);
template<> ::aapt::pb::Item* Arena::CreateMaybeMessage<::aapt::pb::Item>(Arena*);
template<> ::aapt::pb::MacroBody* Arena::CreateMaybeMessage<::aapt::pb::MacroBody>(Arena*);
template<> ::aapt::pb::NamespaceAlias* Arena::CreateMaybeMessage<::aapt::pb::NamespaceAlias>(Arena*);
template<> ::aapt::pb::Overlayable* Arena::CreateMaybeMessage<::aapt::pb::Overlayable>(Arena*);
template<> ::aapt::pb::OverlayableItem* Arena::CreateMaybeMessage<::aapt::pb::OverlayableItem>(Arena*);
template<> ::aapt::pb::Package* Arena::CreateMaybeMessage<::aapt::pb::Package>(Arena*);
template<> ::aapt::pb::PackageId* Arena::CreateMaybeMessage<::aapt::pb::PackageId>(Arena*);
template<> ::aapt::pb::Plural* Arena::CreateMaybeMessage<::aapt::pb::Plural>(Arena*);
template<> ::aapt::pb::Plural_Entry* Arena::CreateMaybeMessage<::aapt::pb::Plural_Entry>(Arena*);
template<> ::aapt::pb::Primitive* Arena::CreateMaybeMessage<::aapt::pb::Primitive>(Arena*);
template<> ::aapt::pb::Primitive_EmptyType* Arena::CreateMaybeMessage<::aapt::pb::Primitive_EmptyType>(Arena*);
template<> ::aapt::pb::Primitive_NullType* Arena::CreateMaybeMessage<::aapt::pb::Primitive_NullType>(Arena*);
template<> ::aapt::pb::RawString* Arena::CreateMaybeMessage<::aapt::pb::RawString>(Arena*);
template<> ::aapt::pb::Reference* Arena::CreateMaybeMessage<::aapt::pb::Reference>(Arena*);
template<> ::aapt::pb::ResourceTable* Arena::CreateMaybeMessage<::aapt::pb::ResourceTable>(Arena*);
template<> ::aapt::pb::Source* Arena::CreateMaybeMessage<::aapt::pb::Source>(Arena*);
template<> ::aapt::pb::SourcePosition* Arena::CreateMaybeMessage<::aapt::pb::SourcePosition>(Arena*);
template<> ::aapt::pb::StagedId* Arena::CreateMaybeMessage<::aapt::pb::StagedId>(Arena*);
template<> ::aapt::pb::String* Arena::CreateMaybeMessage<::aapt::pb::String>(Arena*);
template<> ::aapt::pb::StringPool* Arena::CreateMaybeMessage<::aapt::pb::StringPool>(Arena*);
template<> ::aapt::pb::Style* Arena::CreateMaybeMessage<::aapt::pb::Style>(Arena*);
template<> ::aapt::pb::StyleString* Arena::CreateMaybeMessage<::aapt::pb::StyleString>(Arena*);
template<> ::aapt::pb::StyleString_Span* Arena::CreateMaybeMessage<::aapt::pb::StyleString_Span>(Arena*);
template<> ::aapt::pb::Style_Entry* Arena::CreateMaybeMessage<::aapt::pb::Style_Entry>(Arena*);
template<> ::aapt::pb::Styleable* Arena::CreateMaybeMessage<::aapt::pb::Styleable>(Arena*);
template<> ::aapt::pb::Styleable_Entry* Arena::CreateMaybeMessage<::aapt::pb::Styleable_Entry>(Arena*);
template<> ::aapt::pb::StyledString* Arena::CreateMaybeMessage<::aapt::pb::StyledString>(Arena*);
template<> ::aapt::pb::StyledString_Span* Arena::CreateMaybeMessage<::aapt::pb::StyledString_Span>(Arena*);
template<> ::aapt::pb::ToolFingerprint* Arena::CreateMaybeMessage<::aapt::pb::ToolFingerprint>(Arena*);
template<> ::aapt::pb::Type* Arena::CreateMaybeMessage<::aapt::pb::Type>(Arena*);
template<> ::aapt::pb::TypeId* Arena::CreateMaybeMessage<::aapt::pb::TypeId>(Arena*);
template<> ::aapt::pb::UntranslatableSection* Arena::CreateMaybeMessage<::aapt::pb::UntranslatableSection>(Arena*);
template<> ::aapt::pb::Value* Arena::CreateMaybeMessage<::aapt::pb::Value>(Arena*);
template<> ::aapt::pb::Visibility* Arena::CreateMaybeMessage<::aapt::pb::Visibility>(Arena*);
template<> ::aapt::pb::XmlAttribute* Arena::CreateMaybeMessage<::aapt::pb::XmlAttribute>(Arena*);
template<> ::aapt::pb::XmlElement* Arena::CreateMaybeMessage<::aapt::pb::XmlElement>(Arena*);
template<> ::aapt::pb::XmlNamespace* Arena::CreateMaybeMessage<::aapt::pb::XmlNamespace>(Arena*);
template<> ::aapt::pb::XmlNode* Arena::CreateMaybeMessage<::aapt::pb::XmlNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aapt {
namespace pb {

enum Visibility_Level : int {
  Visibility_Level_UNKNOWN = 0,
  Visibility_Level_PRIVATE = 1,
  Visibility_Level_PUBLIC = 2,
  Visibility_Level_Visibility_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Visibility_Level_Visibility_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Visibility_Level_IsValid(int value);
constexpr Visibility_Level Visibility_Level_Level_MIN = Visibility_Level_UNKNOWN;
constexpr Visibility_Level Visibility_Level_Level_MAX = Visibility_Level_PUBLIC;
constexpr int Visibility_Level_Level_ARRAYSIZE = Visibility_Level_Level_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_Level_descriptor();
template<typename T>
inline const std::string& Visibility_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Visibility_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Visibility_Level_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Visibility_Level_descriptor(), enum_t_value);
}
inline bool Visibility_Level_Parse(
    const std::string& name, Visibility_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Visibility_Level>(
    Visibility_Level_descriptor(), name, value);
}
enum OverlayableItem_Policy : int {
  OverlayableItem_Policy_NONE = 0,
  OverlayableItem_Policy_PUBLIC = 1,
  OverlayableItem_Policy_SYSTEM = 2,
  OverlayableItem_Policy_VENDOR = 3,
  OverlayableItem_Policy_PRODUCT = 4,
  OverlayableItem_Policy_SIGNATURE = 5,
  OverlayableItem_Policy_ODM = 6,
  OverlayableItem_Policy_OEM = 7,
  OverlayableItem_Policy_ACTOR = 8,
  OverlayableItem_Policy_CONFIG_SIGNATURE = 9,
  OverlayableItem_Policy_OverlayableItem_Policy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OverlayableItem_Policy_OverlayableItem_Policy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OverlayableItem_Policy_IsValid(int value);
constexpr OverlayableItem_Policy OverlayableItem_Policy_Policy_MIN = OverlayableItem_Policy_NONE;
constexpr OverlayableItem_Policy OverlayableItem_Policy_Policy_MAX = OverlayableItem_Policy_CONFIG_SIGNATURE;
constexpr int OverlayableItem_Policy_Policy_ARRAYSIZE = OverlayableItem_Policy_Policy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverlayableItem_Policy_descriptor();
template<typename T>
inline const std::string& OverlayableItem_Policy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OverlayableItem_Policy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OverlayableItem_Policy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OverlayableItem_Policy_descriptor(), enum_t_value);
}
inline bool OverlayableItem_Policy_Parse(
    const std::string& name, OverlayableItem_Policy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OverlayableItem_Policy>(
    OverlayableItem_Policy_descriptor(), name, value);
}
enum Reference_Type : int {
  Reference_Type_REFERENCE = 0,
  Reference_Type_ATTRIBUTE = 1,
  Reference_Type_Reference_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Reference_Type_Reference_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Reference_Type_IsValid(int value);
constexpr Reference_Type Reference_Type_Type_MIN = Reference_Type_REFERENCE;
constexpr Reference_Type Reference_Type_Type_MAX = Reference_Type_ATTRIBUTE;
constexpr int Reference_Type_Type_ARRAYSIZE = Reference_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reference_Type_descriptor();
template<typename T>
inline const std::string& Reference_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reference_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reference_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reference_Type_descriptor(), enum_t_value);
}
inline bool Reference_Type_Parse(
    const std::string& name, Reference_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reference_Type>(
    Reference_Type_descriptor(), name, value);
}
enum FileReference_Type : int {
  FileReference_Type_UNKNOWN = 0,
  FileReference_Type_PNG = 1,
  FileReference_Type_BINARY_XML = 2,
  FileReference_Type_PROTO_XML = 3,
  FileReference_Type_FileReference_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileReference_Type_FileReference_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileReference_Type_IsValid(int value);
constexpr FileReference_Type FileReference_Type_Type_MIN = FileReference_Type_UNKNOWN;
constexpr FileReference_Type FileReference_Type_Type_MAX = FileReference_Type_PROTO_XML;
constexpr int FileReference_Type_Type_ARRAYSIZE = FileReference_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileReference_Type_descriptor();
template<typename T>
inline const std::string& FileReference_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileReference_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileReference_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileReference_Type_descriptor(), enum_t_value);
}
inline bool FileReference_Type_Parse(
    const std::string& name, FileReference_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileReference_Type>(
    FileReference_Type_descriptor(), name, value);
}
enum Attribute_FormatFlags : int {
  Attribute_FormatFlags_NONE = 0,
  Attribute_FormatFlags_ANY = 65535,
  Attribute_FormatFlags_REFERENCE = 1,
  Attribute_FormatFlags_STRING = 2,
  Attribute_FormatFlags_INTEGER = 4,
  Attribute_FormatFlags_BOOLEAN = 8,
  Attribute_FormatFlags_COLOR = 16,
  Attribute_FormatFlags_FLOAT = 32,
  Attribute_FormatFlags_DIMENSION = 64,
  Attribute_FormatFlags_FRACTION = 128,
  Attribute_FormatFlags_ENUM = 65536,
  Attribute_FormatFlags_FLAGS = 131072,
  Attribute_FormatFlags_Attribute_FormatFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Attribute_FormatFlags_Attribute_FormatFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Attribute_FormatFlags_IsValid(int value);
constexpr Attribute_FormatFlags Attribute_FormatFlags_FormatFlags_MIN = Attribute_FormatFlags_NONE;
constexpr Attribute_FormatFlags Attribute_FormatFlags_FormatFlags_MAX = Attribute_FormatFlags_FLAGS;
constexpr int Attribute_FormatFlags_FormatFlags_ARRAYSIZE = Attribute_FormatFlags_FormatFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Attribute_FormatFlags_descriptor();
template<typename T>
inline const std::string& Attribute_FormatFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Attribute_FormatFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Attribute_FormatFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Attribute_FormatFlags_descriptor(), enum_t_value);
}
inline bool Attribute_FormatFlags_Parse(
    const std::string& name, Attribute_FormatFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Attribute_FormatFlags>(
    Attribute_FormatFlags_descriptor(), name, value);
}
enum Plural_Arity : int {
  Plural_Arity_ZERO = 0,
  Plural_Arity_ONE = 1,
  Plural_Arity_TWO = 2,
  Plural_Arity_FEW = 3,
  Plural_Arity_MANY = 4,
  Plural_Arity_OTHER = 5,
  Plural_Arity_Plural_Arity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Plural_Arity_Plural_Arity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Plural_Arity_IsValid(int value);
constexpr Plural_Arity Plural_Arity_Arity_MIN = Plural_Arity_ZERO;
constexpr Plural_Arity Plural_Arity_Arity_MAX = Plural_Arity_OTHER;
constexpr int Plural_Arity_Arity_ARRAYSIZE = Plural_Arity_Arity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Plural_Arity_descriptor();
template<typename T>
inline const std::string& Plural_Arity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Plural_Arity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Plural_Arity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Plural_Arity_descriptor(), enum_t_value);
}
inline bool Plural_Arity_Parse(
    const std::string& name, Plural_Arity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Plural_Arity>(
    Plural_Arity_descriptor(), name, value);
}
// ===================================================================

class StringPool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.StringPool) */ {
 public:
  StringPool();
  virtual ~StringPool();

  StringPool(const StringPool& from);
  StringPool(StringPool&& from) noexcept
    : StringPool() {
    *this = ::std::move(from);
  }

  inline StringPool& operator=(const StringPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringPool& operator=(StringPool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringPool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringPool* internal_default_instance() {
    return reinterpret_cast<const StringPool*>(
               &_StringPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringPool& a, StringPool& b) {
    a.Swap(&b);
  }
  inline void Swap(StringPool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringPool* New() const final {
    return CreateMaybeMessage<StringPool>(nullptr);
  }

  StringPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringPool& from);
  void MergeFrom(const StringPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.StringPool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:aapt.pb.StringPool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class SourcePosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.SourcePosition) */ {
 public:
  SourcePosition();
  virtual ~SourcePosition();

  SourcePosition(const SourcePosition& from);
  SourcePosition(SourcePosition&& from) noexcept
    : SourcePosition() {
    *this = ::std::move(from);
  }

  inline SourcePosition& operator=(const SourcePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourcePosition& operator=(SourcePosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourcePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourcePosition* internal_default_instance() {
    return reinterpret_cast<const SourcePosition*>(
               &_SourcePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SourcePosition& a, SourcePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SourcePosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourcePosition* New() const final {
    return CreateMaybeMessage<SourcePosition>(nullptr);
  }

  SourcePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourcePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourcePosition& from);
  void MergeFrom(const SourcePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourcePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.SourcePosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineNumberFieldNumber = 1,
    kColumnNumberFieldNumber = 2,
  };
  // uint32 line_number = 1;
  void clear_line_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number() const;
  void set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 column_number = 2;
  void clear_column_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_number() const;
  void set_column_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.SourcePosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Source :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Source) */ {
 public:
  Source();
  virtual ~Source();

  Source(const Source& from);
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Source& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }
  inline void Swap(Source* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return CreateMaybeMessage<Source>(nullptr);
  }

  Source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Source";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kPathIdxFieldNumber = 1,
  };
  // .aapt.pb.SourcePosition position = 2;
  bool has_position() const;
  void clear_position();
  const ::aapt::pb::SourcePosition& position() const;
  ::aapt::pb::SourcePosition* release_position();
  ::aapt::pb::SourcePosition* mutable_position();
  void set_allocated_position(::aapt::pb::SourcePosition* position);

  // uint32 path_idx = 1;
  void clear_path_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 path_idx() const;
  void set_path_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.Source)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::aapt::pb::SourcePosition* position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 path_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class ToolFingerprint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.ToolFingerprint) */ {
 public:
  ToolFingerprint();
  virtual ~ToolFingerprint();

  ToolFingerprint(const ToolFingerprint& from);
  ToolFingerprint(ToolFingerprint&& from) noexcept
    : ToolFingerprint() {
    *this = ::std::move(from);
  }

  inline ToolFingerprint& operator=(const ToolFingerprint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolFingerprint& operator=(ToolFingerprint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToolFingerprint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToolFingerprint* internal_default_instance() {
    return reinterpret_cast<const ToolFingerprint*>(
               &_ToolFingerprint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ToolFingerprint& a, ToolFingerprint& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolFingerprint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToolFingerprint* New() const final {
    return CreateMaybeMessage<ToolFingerprint>(nullptr);
  }

  ToolFingerprint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToolFingerprint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToolFingerprint& from);
  void MergeFrom(const ToolFingerprint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolFingerprint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.ToolFingerprint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToolFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string tool = 1;
  void clear_tool();
  const std::string& tool() const;
  void set_tool(const std::string& value);
  void set_tool(std::string&& value);
  void set_tool(const char* value);
  void set_tool(const char* value, size_t size);
  std::string* mutable_tool();
  std::string* release_tool();
  void set_allocated_tool(std::string* tool);

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // @@protoc_insertion_point(class_scope:aapt.pb.ToolFingerprint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class ResourceTable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.ResourceTable) */ {
 public:
  ResourceTable();
  virtual ~ResourceTable();

  ResourceTable(const ResourceTable& from);
  ResourceTable(ResourceTable&& from) noexcept
    : ResourceTable() {
    *this = ::std::move(from);
  }

  inline ResourceTable& operator=(const ResourceTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceTable& operator=(ResourceTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceTable* internal_default_instance() {
    return reinterpret_cast<const ResourceTable*>(
               &_ResourceTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourceTable& a, ResourceTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceTable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceTable* New() const final {
    return CreateMaybeMessage<ResourceTable>(nullptr);
  }

  ResourceTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceTable& from);
  void MergeFrom(const ResourceTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.ResourceTable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 2,
    kOverlayableFieldNumber = 3,
    kToolFingerprintFieldNumber = 4,
    kSourcePoolFieldNumber = 1,
  };
  // repeated .aapt.pb.Package package = 2;
  int package_size() const;
  void clear_package();
  ::aapt::pb::Package* mutable_package(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Package >*
      mutable_package();
  const ::aapt::pb::Package& package(int index) const;
  ::aapt::pb::Package* add_package();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Package >&
      package() const;

  // repeated .aapt.pb.Overlayable overlayable = 3;
  int overlayable_size() const;
  void clear_overlayable();
  ::aapt::pb::Overlayable* mutable_overlayable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Overlayable >*
      mutable_overlayable();
  const ::aapt::pb::Overlayable& overlayable(int index) const;
  ::aapt::pb::Overlayable* add_overlayable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Overlayable >&
      overlayable() const;

  // repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
  int tool_fingerprint_size() const;
  void clear_tool_fingerprint();
  ::aapt::pb::ToolFingerprint* mutable_tool_fingerprint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ToolFingerprint >*
      mutable_tool_fingerprint();
  const ::aapt::pb::ToolFingerprint& tool_fingerprint(int index) const;
  ::aapt::pb::ToolFingerprint* add_tool_fingerprint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ToolFingerprint >&
      tool_fingerprint() const;

  // .aapt.pb.StringPool source_pool = 1;
  bool has_source_pool() const;
  void clear_source_pool();
  const ::aapt::pb::StringPool& source_pool() const;
  ::aapt::pb::StringPool* release_source_pool();
  ::aapt::pb::StringPool* mutable_source_pool();
  void set_allocated_source_pool(::aapt::pb::StringPool* source_pool);

  // @@protoc_insertion_point(class_scope:aapt.pb.ResourceTable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Package > package_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Overlayable > overlayable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ToolFingerprint > tool_fingerprint_;
  ::aapt::pb::StringPool* source_pool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class PackageId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.PackageId) */ {
 public:
  PackageId();
  virtual ~PackageId();

  PackageId(const PackageId& from);
  PackageId(PackageId&& from) noexcept
    : PackageId() {
    *this = ::std::move(from);
  }

  inline PackageId& operator=(const PackageId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageId& operator=(PackageId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PackageId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageId* internal_default_instance() {
    return reinterpret_cast<const PackageId*>(
               &_PackageId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PackageId& a, PackageId& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageId* New() const final {
    return CreateMaybeMessage<PackageId>(nullptr);
  }

  PackageId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PackageId& from);
  void MergeFrom(const PackageId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.PackageId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.PackageId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Package :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Package) */ {
 public:
  Package();
  virtual ~Package();

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Package& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Package* New() const final {
    return CreateMaybeMessage<Package>(nullptr);
  }

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Package";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 3,
    kPackageNameFieldNumber = 2,
    kPackageIdFieldNumber = 1,
  };
  // repeated .aapt.pb.Type type = 3;
  int type_size() const;
  void clear_type();
  ::aapt::pb::Type* mutable_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Type >*
      mutable_type();
  const ::aapt::pb::Type& type(int index) const;
  ::aapt::pb::Type* add_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Type >&
      type() const;

  // string package_name = 2;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // .aapt.pb.PackageId package_id = 1;
  bool has_package_id() const;
  void clear_package_id();
  const ::aapt::pb::PackageId& package_id() const;
  ::aapt::pb::PackageId* release_package_id();
  ::aapt::pb::PackageId* mutable_package_id();
  void set_allocated_package_id(::aapt::pb::PackageId* package_id);

  // @@protoc_insertion_point(class_scope:aapt.pb.Package)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Type > type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::aapt::pb::PackageId* package_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class TypeId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.TypeId) */ {
 public:
  TypeId();
  virtual ~TypeId();

  TypeId(const TypeId& from);
  TypeId(TypeId&& from) noexcept
    : TypeId() {
    *this = ::std::move(from);
  }

  inline TypeId& operator=(const TypeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeId& operator=(TypeId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeId* internal_default_instance() {
    return reinterpret_cast<const TypeId*>(
               &_TypeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TypeId& a, TypeId& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeId* New() const final {
    return CreateMaybeMessage<TypeId>(nullptr);
  }

  TypeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeId& from);
  void MergeFrom(const TypeId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.TypeId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.TypeId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Type :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Type) */ {
 public:
  Type();
  virtual ~Type();

  Type(const Type& from);
  Type(Type&& from) noexcept
    : Type() {
    *this = ::std::move(from);
  }

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type& operator=(Type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Type* internal_default_instance() {
    return reinterpret_cast<const Type*>(
               &_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Type& a, Type& b) {
    a.Swap(&b);
  }
  inline void Swap(Type* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Type* New() const final {
    return CreateMaybeMessage<Type>(nullptr);
  }

  Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Type";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 3,
    kNameFieldNumber = 2,
    kTypeIdFieldNumber = 1,
  };
  // repeated .aapt.pb.Entry entry = 3;
  int entry_size() const;
  void clear_entry();
  ::aapt::pb::Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Entry >*
      mutable_entry();
  const ::aapt::pb::Entry& entry(int index) const;
  ::aapt::pb::Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Entry >&
      entry() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .aapt.pb.TypeId type_id = 1;
  bool has_type_id() const;
  void clear_type_id();
  const ::aapt::pb::TypeId& type_id() const;
  ::aapt::pb::TypeId* release_type_id();
  ::aapt::pb::TypeId* mutable_type_id();
  void set_allocated_type_id(::aapt::pb::TypeId* type_id);

  // @@protoc_insertion_point(class_scope:aapt.pb.Type)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Entry > entry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::aapt::pb::TypeId* type_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Visibility :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Visibility) */ {
 public:
  Visibility();
  virtual ~Visibility();

  Visibility(const Visibility& from);
  Visibility(Visibility&& from) noexcept
    : Visibility() {
    *this = ::std::move(from);
  }

  inline Visibility& operator=(const Visibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline Visibility& operator=(Visibility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Visibility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visibility* internal_default_instance() {
    return reinterpret_cast<const Visibility*>(
               &_Visibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Visibility& a, Visibility& b) {
    a.Swap(&b);
  }
  inline void Swap(Visibility* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Visibility* New() const final {
    return CreateMaybeMessage<Visibility>(nullptr);
  }

  Visibility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Visibility>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Visibility& from);
  void MergeFrom(const Visibility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visibility* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Visibility";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Visibility_Level Level;
  static constexpr Level UNKNOWN =
    Visibility_Level_UNKNOWN;
  static constexpr Level PRIVATE =
    Visibility_Level_PRIVATE;
  static constexpr Level PUBLIC =
    Visibility_Level_PUBLIC;
  static inline bool Level_IsValid(int value) {
    return Visibility_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    Visibility_Level_Level_MIN;
  static constexpr Level Level_MAX =
    Visibility_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    Visibility_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Level_descriptor() {
    return Visibility_Level_descriptor();
  }
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return Visibility_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(const std::string& name,
      Level* value) {
    return Visibility_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 3,
    kSourceFieldNumber = 2,
    kLevelFieldNumber = 1,
    kStagedApiFieldNumber = 4,
  };
  // string comment = 3;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 2;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // .aapt.pb.Visibility.Level level = 1;
  void clear_level();
  ::aapt::pb::Visibility_Level level() const;
  void set_level(::aapt::pb::Visibility_Level value);

  // bool staged_api = 4;
  void clear_staged_api();
  bool staged_api() const;
  void set_staged_api(bool value);

  // @@protoc_insertion_point(class_scope:aapt.pb.Visibility)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  int level_;
  bool staged_api_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class AllowNew :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.AllowNew) */ {
 public:
  AllowNew();
  virtual ~AllowNew();

  AllowNew(const AllowNew& from);
  AllowNew(AllowNew&& from) noexcept
    : AllowNew() {
    *this = ::std::move(from);
  }

  inline AllowNew& operator=(const AllowNew& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowNew& operator=(AllowNew&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllowNew& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllowNew* internal_default_instance() {
    return reinterpret_cast<const AllowNew*>(
               &_AllowNew_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AllowNew& a, AllowNew& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowNew* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllowNew* New() const final {
    return CreateMaybeMessage<AllowNew>(nullptr);
  }

  AllowNew* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllowNew>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllowNew& from);
  void MergeFrom(const AllowNew& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowNew* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.AllowNew";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kSourceFieldNumber = 1,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // @@protoc_insertion_point(class_scope:aapt.pb.AllowNew)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Overlayable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Overlayable) */ {
 public:
  Overlayable();
  virtual ~Overlayable();

  Overlayable(const Overlayable& from);
  Overlayable(Overlayable&& from) noexcept
    : Overlayable() {
    *this = ::std::move(from);
  }

  inline Overlayable& operator=(const Overlayable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Overlayable& operator=(Overlayable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Overlayable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Overlayable* internal_default_instance() {
    return reinterpret_cast<const Overlayable*>(
               &_Overlayable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Overlayable& a, Overlayable& b) {
    a.Swap(&b);
  }
  inline void Swap(Overlayable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Overlayable* New() const final {
    return CreateMaybeMessage<Overlayable>(nullptr);
  }

  Overlayable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Overlayable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Overlayable& from);
  void MergeFrom(const Overlayable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Overlayable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Overlayable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kActorFieldNumber = 3,
    kSourceFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string actor = 3;
  void clear_actor();
  const std::string& actor() const;
  void set_actor(const std::string& value);
  void set_actor(std::string&& value);
  void set_actor(const char* value);
  void set_actor(const char* value, size_t size);
  std::string* mutable_actor();
  std::string* release_actor();
  void set_allocated_actor(std::string* actor);

  // .aapt.pb.Source source = 2;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // @@protoc_insertion_point(class_scope:aapt.pb.Overlayable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_;
  ::aapt::pb::Source* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class OverlayableItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.OverlayableItem) */ {
 public:
  OverlayableItem();
  virtual ~OverlayableItem();

  OverlayableItem(const OverlayableItem& from);
  OverlayableItem(OverlayableItem&& from) noexcept
    : OverlayableItem() {
    *this = ::std::move(from);
  }

  inline OverlayableItem& operator=(const OverlayableItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OverlayableItem& operator=(OverlayableItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OverlayableItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OverlayableItem* internal_default_instance() {
    return reinterpret_cast<const OverlayableItem*>(
               &_OverlayableItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OverlayableItem& a, OverlayableItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OverlayableItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OverlayableItem* New() const final {
    return CreateMaybeMessage<OverlayableItem>(nullptr);
  }

  OverlayableItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OverlayableItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OverlayableItem& from);
  void MergeFrom(const OverlayableItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OverlayableItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.OverlayableItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OverlayableItem_Policy Policy;
  static constexpr Policy NONE =
    OverlayableItem_Policy_NONE;
  static constexpr Policy PUBLIC =
    OverlayableItem_Policy_PUBLIC;
  static constexpr Policy SYSTEM =
    OverlayableItem_Policy_SYSTEM;
  static constexpr Policy VENDOR =
    OverlayableItem_Policy_VENDOR;
  static constexpr Policy PRODUCT =
    OverlayableItem_Policy_PRODUCT;
  static constexpr Policy SIGNATURE =
    OverlayableItem_Policy_SIGNATURE;
  static constexpr Policy ODM =
    OverlayableItem_Policy_ODM;
  static constexpr Policy OEM =
    OverlayableItem_Policy_OEM;
  static constexpr Policy ACTOR =
    OverlayableItem_Policy_ACTOR;
  static constexpr Policy CONFIG_SIGNATURE =
    OverlayableItem_Policy_CONFIG_SIGNATURE;
  static inline bool Policy_IsValid(int value) {
    return OverlayableItem_Policy_IsValid(value);
  }
  static constexpr Policy Policy_MIN =
    OverlayableItem_Policy_Policy_MIN;
  static constexpr Policy Policy_MAX =
    OverlayableItem_Policy_Policy_MAX;
  static constexpr int Policy_ARRAYSIZE =
    OverlayableItem_Policy_Policy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Policy_descriptor() {
    return OverlayableItem_Policy_descriptor();
  }
  template<typename T>
  static inline const std::string& Policy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Policy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Policy_Name.");
    return OverlayableItem_Policy_Name(enum_t_value);
  }
  static inline bool Policy_Parse(const std::string& name,
      Policy* value) {
    return OverlayableItem_Policy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyFieldNumber = 3,
    kCommentFieldNumber = 2,
    kSourceFieldNumber = 1,
    kOverlayableIdxFieldNumber = 4,
  };
  // repeated .aapt.pb.OverlayableItem.Policy policy = 3;
  int policy_size() const;
  void clear_policy();
  ::aapt::pb::OverlayableItem_Policy policy(int index) const;
  void set_policy(int index, ::aapt::pb::OverlayableItem_Policy value);
  void add_policy(::aapt::pb::OverlayableItem_Policy value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& policy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_policy();

  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // uint32 overlayable_idx = 4;
  void clear_overlayable_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 overlayable_idx() const;
  void set_overlayable_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.OverlayableItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> policy_;
  mutable std::atomic<int> _policy_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 overlayable_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class StagedId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.StagedId) */ {
 public:
  StagedId();
  virtual ~StagedId();

  StagedId(const StagedId& from);
  StagedId(StagedId&& from) noexcept
    : StagedId() {
    *this = ::std::move(from);
  }

  inline StagedId& operator=(const StagedId& from) {
    CopyFrom(from);
    return *this;
  }
  inline StagedId& operator=(StagedId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StagedId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StagedId* internal_default_instance() {
    return reinterpret_cast<const StagedId*>(
               &_StagedId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StagedId& a, StagedId& b) {
    a.Swap(&b);
  }
  inline void Swap(StagedId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StagedId* New() const final {
    return CreateMaybeMessage<StagedId>(nullptr);
  }

  StagedId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StagedId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StagedId& from);
  void MergeFrom(const StagedId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StagedId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.StagedId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kStagedIdFieldNumber = 2,
  };
  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // uint32 staged_id = 2;
  void clear_staged_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 staged_id() const;
  void set_staged_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.StagedId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::aapt::pb::Source* source_;
  ::PROTOBUF_NAMESPACE_ID::uint32 staged_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class EntryId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.EntryId) */ {
 public:
  EntryId();
  virtual ~EntryId();

  EntryId(const EntryId& from);
  EntryId(EntryId&& from) noexcept
    : EntryId() {
    *this = ::std::move(from);
  }

  inline EntryId& operator=(const EntryId& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntryId& operator=(EntryId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntryId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntryId* internal_default_instance() {
    return reinterpret_cast<const EntryId*>(
               &_EntryId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EntryId& a, EntryId& b) {
    a.Swap(&b);
  }
  inline void Swap(EntryId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntryId* New() const final {
    return CreateMaybeMessage<EntryId>(nullptr);
  }

  EntryId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntryId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntryId& from);
  void MergeFrom(const EntryId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.EntryId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.EntryId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigValueFieldNumber = 6,
    kNameFieldNumber = 2,
    kEntryIdFieldNumber = 1,
    kVisibilityFieldNumber = 3,
    kAllowNewFieldNumber = 4,
    kOverlayableItemFieldNumber = 5,
    kStagedIdFieldNumber = 7,
  };
  // repeated .aapt.pb.ConfigValue config_value = 6;
  int config_value_size() const;
  void clear_config_value();
  ::aapt::pb::ConfigValue* mutable_config_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ConfigValue >*
      mutable_config_value();
  const ::aapt::pb::ConfigValue& config_value(int index) const;
  ::aapt::pb::ConfigValue* add_config_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ConfigValue >&
      config_value() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .aapt.pb.EntryId entry_id = 1;
  bool has_entry_id() const;
  void clear_entry_id();
  const ::aapt::pb::EntryId& entry_id() const;
  ::aapt::pb::EntryId* release_entry_id();
  ::aapt::pb::EntryId* mutable_entry_id();
  void set_allocated_entry_id(::aapt::pb::EntryId* entry_id);

  // .aapt.pb.Visibility visibility = 3;
  bool has_visibility() const;
  void clear_visibility();
  const ::aapt::pb::Visibility& visibility() const;
  ::aapt::pb::Visibility* release_visibility();
  ::aapt::pb::Visibility* mutable_visibility();
  void set_allocated_visibility(::aapt::pb::Visibility* visibility);

  // .aapt.pb.AllowNew allow_new = 4;
  bool has_allow_new() const;
  void clear_allow_new();
  const ::aapt::pb::AllowNew& allow_new() const;
  ::aapt::pb::AllowNew* release_allow_new();
  ::aapt::pb::AllowNew* mutable_allow_new();
  void set_allocated_allow_new(::aapt::pb::AllowNew* allow_new);

  // .aapt.pb.OverlayableItem overlayable_item = 5;
  bool has_overlayable_item() const;
  void clear_overlayable_item();
  const ::aapt::pb::OverlayableItem& overlayable_item() const;
  ::aapt::pb::OverlayableItem* release_overlayable_item();
  ::aapt::pb::OverlayableItem* mutable_overlayable_item();
  void set_allocated_overlayable_item(::aapt::pb::OverlayableItem* overlayable_item);

  // .aapt.pb.StagedId staged_id = 7;
  bool has_staged_id() const;
  void clear_staged_id();
  const ::aapt::pb::StagedId& staged_id() const;
  ::aapt::pb::StagedId* release_staged_id();
  ::aapt::pb::StagedId* mutable_staged_id();
  void set_allocated_staged_id(::aapt::pb::StagedId* staged_id);

  // @@protoc_insertion_point(class_scope:aapt.pb.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ConfigValue > config_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::aapt::pb::EntryId* entry_id_;
  ::aapt::pb::Visibility* visibility_;
  ::aapt::pb::AllowNew* allow_new_;
  ::aapt::pb::OverlayableItem* overlayable_item_;
  ::aapt::pb::StagedId* staged_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class ConfigValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.ConfigValue) */ {
 public:
  ConfigValue();
  virtual ~ConfigValue();

  ConfigValue(const ConfigValue& from);
  ConfigValue(ConfigValue&& from) noexcept
    : ConfigValue() {
    *this = ::std::move(from);
  }

  inline ConfigValue& operator=(const ConfigValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigValue& operator=(ConfigValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigValue* internal_default_instance() {
    return reinterpret_cast<const ConfigValue*>(
               &_ConfigValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ConfigValue& a, ConfigValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigValue* New() const final {
    return CreateMaybeMessage<ConfigValue>(nullptr);
  }

  ConfigValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigValue& from);
  void MergeFrom(const ConfigValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.ConfigValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .aapt.pb.Configuration config = 1;
  bool has_config() const;
  void clear_config();
  const ::aapt::pb::Configuration& config() const;
  ::aapt::pb::Configuration* release_config();
  ::aapt::pb::Configuration* mutable_config();
  void set_allocated_config(::aapt::pb::Configuration* config);

  // .aapt.pb.Value value = 2;
  bool has_value() const;
  void clear_value();
  const ::aapt::pb::Value& value() const;
  ::aapt::pb::Value* release_value();
  ::aapt::pb::Value* mutable_value();
  void set_allocated_value(::aapt::pb::Value* value);

  // @@protoc_insertion_point(class_scope:aapt.pb.ConfigValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::aapt::pb::Configuration* config_;
  ::aapt::pb::Value* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Value :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Value& default_instance();

  enum ValueCase {
    kItem = 4,
    kCompoundValue = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Value";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kSourceFieldNumber = 1,
    kWeakFieldNumber = 3,
    kItemFieldNumber = 4,
    kCompoundValueFieldNumber = 5,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // bool weak = 3;
  void clear_weak();
  bool weak() const;
  void set_weak(bool value);

  // .aapt.pb.Item item = 4;
  bool has_item() const;
  void clear_item();
  const ::aapt::pb::Item& item() const;
  ::aapt::pb::Item* release_item();
  ::aapt::pb::Item* mutable_item();
  void set_allocated_item(::aapt::pb::Item* item);

  // .aapt.pb.CompoundValue compound_value = 5;
  bool has_compound_value() const;
  void clear_compound_value();
  const ::aapt::pb::CompoundValue& compound_value() const;
  ::aapt::pb::CompoundValue* release_compound_value();
  ::aapt::pb::CompoundValue* mutable_compound_value();
  void set_allocated_compound_value(::aapt::pb::CompoundValue* compound_value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:aapt.pb.Value)
 private:
  class _Internal;
  void set_has_item();
  void set_has_compound_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  bool weak_;
  union ValueUnion {
    ValueUnion() {}
    ::aapt::pb::Item* item_;
    ::aapt::pb::CompoundValue* compound_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Item& default_instance();

  enum ValueCase {
    kRef = 1,
    kStr = 2,
    kRawStr = 3,
    kStyledStr = 4,
    kFile = 5,
    kId = 6,
    kPrim = 7,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(nullptr);
  }

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefFieldNumber = 1,
    kStrFieldNumber = 2,
    kRawStrFieldNumber = 3,
    kStyledStrFieldNumber = 4,
    kFileFieldNumber = 5,
    kIdFieldNumber = 6,
    kPrimFieldNumber = 7,
  };
  // .aapt.pb.Reference ref = 1;
  bool has_ref() const;
  void clear_ref();
  const ::aapt::pb::Reference& ref() const;
  ::aapt::pb::Reference* release_ref();
  ::aapt::pb::Reference* mutable_ref();
  void set_allocated_ref(::aapt::pb::Reference* ref);

  // .aapt.pb.String str = 2;
  bool has_str() const;
  void clear_str();
  const ::aapt::pb::String& str() const;
  ::aapt::pb::String* release_str();
  ::aapt::pb::String* mutable_str();
  void set_allocated_str(::aapt::pb::String* str);

  // .aapt.pb.RawString raw_str = 3;
  bool has_raw_str() const;
  void clear_raw_str();
  const ::aapt::pb::RawString& raw_str() const;
  ::aapt::pb::RawString* release_raw_str();
  ::aapt::pb::RawString* mutable_raw_str();
  void set_allocated_raw_str(::aapt::pb::RawString* raw_str);

  // .aapt.pb.StyledString styled_str = 4;
  bool has_styled_str() const;
  void clear_styled_str();
  const ::aapt::pb::StyledString& styled_str() const;
  ::aapt::pb::StyledString* release_styled_str();
  ::aapt::pb::StyledString* mutable_styled_str();
  void set_allocated_styled_str(::aapt::pb::StyledString* styled_str);

  // .aapt.pb.FileReference file = 5;
  bool has_file() const;
  void clear_file();
  const ::aapt::pb::FileReference& file() const;
  ::aapt::pb::FileReference* release_file();
  ::aapt::pb::FileReference* mutable_file();
  void set_allocated_file(::aapt::pb::FileReference* file);

  // .aapt.pb.Id id = 6;
  bool has_id() const;
  void clear_id();
  const ::aapt::pb::Id& id() const;
  ::aapt::pb::Id* release_id();
  ::aapt::pb::Id* mutable_id();
  void set_allocated_id(::aapt::pb::Id* id);

  // .aapt.pb.Primitive prim = 7;
  bool has_prim() const;
  void clear_prim();
  const ::aapt::pb::Primitive& prim() const;
  ::aapt::pb::Primitive* release_prim();
  ::aapt::pb::Primitive* mutable_prim();
  void set_allocated_prim(::aapt::pb::Primitive* prim);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:aapt.pb.Item)
 private:
  class _Internal;
  void set_has_ref();
  void set_has_str();
  void set_has_raw_str();
  void set_has_styled_str();
  void set_has_file();
  void set_has_id();
  void set_has_prim();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::aapt::pb::Reference* ref_;
    ::aapt::pb::String* str_;
    ::aapt::pb::RawString* raw_str_;
    ::aapt::pb::StyledString* styled_str_;
    ::aapt::pb::FileReference* file_;
    ::aapt::pb::Id* id_;
    ::aapt::pb::Primitive* prim_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class CompoundValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.CompoundValue) */ {
 public:
  CompoundValue();
  virtual ~CompoundValue();

  CompoundValue(const CompoundValue& from);
  CompoundValue(CompoundValue&& from) noexcept
    : CompoundValue() {
    *this = ::std::move(from);
  }

  inline CompoundValue& operator=(const CompoundValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompoundValue& operator=(CompoundValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompoundValue& default_instance();

  enum ValueCase {
    kAttr = 1,
    kStyle = 2,
    kStyleable = 3,
    kArray = 4,
    kPlural = 5,
    kMacro = 6,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompoundValue* internal_default_instance() {
    return reinterpret_cast<const CompoundValue*>(
               &_CompoundValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CompoundValue& a, CompoundValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CompoundValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompoundValue* New() const final {
    return CreateMaybeMessage<CompoundValue>(nullptr);
  }

  CompoundValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompoundValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompoundValue& from);
  void MergeFrom(const CompoundValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompoundValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.CompoundValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 1,
    kStyleFieldNumber = 2,
    kStyleableFieldNumber = 3,
    kArrayFieldNumber = 4,
    kPluralFieldNumber = 5,
    kMacroFieldNumber = 6,
  };
  // .aapt.pb.Attribute attr = 1;
  bool has_attr() const;
  void clear_attr();
  const ::aapt::pb::Attribute& attr() const;
  ::aapt::pb::Attribute* release_attr();
  ::aapt::pb::Attribute* mutable_attr();
  void set_allocated_attr(::aapt::pb::Attribute* attr);

  // .aapt.pb.Style style = 2;
  bool has_style() const;
  void clear_style();
  const ::aapt::pb::Style& style() const;
  ::aapt::pb::Style* release_style();
  ::aapt::pb::Style* mutable_style();
  void set_allocated_style(::aapt::pb::Style* style);

  // .aapt.pb.Styleable styleable = 3;
  bool has_styleable() const;
  void clear_styleable();
  const ::aapt::pb::Styleable& styleable() const;
  ::aapt::pb::Styleable* release_styleable();
  ::aapt::pb::Styleable* mutable_styleable();
  void set_allocated_styleable(::aapt::pb::Styleable* styleable);

  // .aapt.pb.Array array = 4;
  bool has_array() const;
  void clear_array();
  const ::aapt::pb::Array& array() const;
  ::aapt::pb::Array* release_array();
  ::aapt::pb::Array* mutable_array();
  void set_allocated_array(::aapt::pb::Array* array);

  // .aapt.pb.Plural plural = 5;
  bool has_plural() const;
  void clear_plural();
  const ::aapt::pb::Plural& plural() const;
  ::aapt::pb::Plural* release_plural();
  ::aapt::pb::Plural* mutable_plural();
  void set_allocated_plural(::aapt::pb::Plural* plural);

  // .aapt.pb.MacroBody macro = 6;
  bool has_macro() const;
  void clear_macro();
  const ::aapt::pb::MacroBody& macro() const;
  ::aapt::pb::MacroBody* release_macro();
  ::aapt::pb::MacroBody* mutable_macro();
  void set_allocated_macro(::aapt::pb::MacroBody* macro);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:aapt.pb.CompoundValue)
 private:
  class _Internal;
  void set_has_attr();
  void set_has_style();
  void set_has_styleable();
  void set_has_array();
  void set_has_plural();
  void set_has_macro();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::aapt::pb::Attribute* attr_;
    ::aapt::pb::Style* style_;
    ::aapt::pb::Styleable* styleable_;
    ::aapt::pb::Array* array_;
    ::aapt::pb::Plural* plural_;
    ::aapt::pb::MacroBody* macro_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Boolean :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Boolean) */ {
 public:
  Boolean();
  virtual ~Boolean();

  Boolean(const Boolean& from);
  Boolean(Boolean&& from) noexcept
    : Boolean() {
    *this = ::std::move(from);
  }

  inline Boolean& operator=(const Boolean& from) {
    CopyFrom(from);
    return *this;
  }
  inline Boolean& operator=(Boolean&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Boolean& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Boolean* internal_default_instance() {
    return reinterpret_cast<const Boolean*>(
               &_Boolean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Boolean& a, Boolean& b) {
    a.Swap(&b);
  }
  inline void Swap(Boolean* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Boolean* New() const final {
    return CreateMaybeMessage<Boolean>(nullptr);
  }

  Boolean* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Boolean>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Boolean& from);
  void MergeFrom(const Boolean& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Boolean* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Boolean";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:aapt.pb.Boolean)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Reference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(Reference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const final {
    return CreateMaybeMessage<Reference>(nullptr);
  }

  Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Reference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reference_Type Type;
  static constexpr Type REFERENCE =
    Reference_Type_REFERENCE;
  static constexpr Type ATTRIBUTE =
    Reference_Type_ATTRIBUTE;
  static inline bool Type_IsValid(int value) {
    return Reference_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Reference_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Reference_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Reference_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Reference_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Reference_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Reference_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIsDynamicFieldNumber = 5,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kPrivateFieldNumber = 4,
    kAllowRawFieldNumber = 7,
    kTypeFlagsFieldNumber = 6,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .aapt.pb.Boolean is_dynamic = 5;
  bool has_is_dynamic() const;
  void clear_is_dynamic();
  const ::aapt::pb::Boolean& is_dynamic() const;
  ::aapt::pb::Boolean* release_is_dynamic();
  ::aapt::pb::Boolean* mutable_is_dynamic();
  void set_allocated_is_dynamic(::aapt::pb::Boolean* is_dynamic);

  // .aapt.pb.Reference.Type type = 1;
  void clear_type();
  ::aapt::pb::Reference_Type type() const;
  void set_type(::aapt::pb::Reference_Type value);

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool private = 4;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);

  // bool allow_raw = 7;
  void clear_allow_raw();
  bool allow_raw() const;
  void set_allow_raw(bool value);

  // uint32 type_flags = 6;
  void clear_type_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_flags() const;
  void set_type_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.Reference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::aapt::pb::Boolean* is_dynamic_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool private__;
  bool allow_raw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Id :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Id) */ {
 public:
  Id();
  virtual ~Id();

  Id(const Id& from);
  Id(Id&& from) noexcept
    : Id() {
    *this = ::std::move(from);
  }

  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Id& operator=(Id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
               &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Id& a, Id& b) {
    a.Swap(&b);
  }
  inline void Swap(Id* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Id* New() const final {
    return CreateMaybeMessage<Id>(nullptr);
  }

  Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Id>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Id& from);
  void MergeFrom(const Id& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Id";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:aapt.pb.Id)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class String :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.String) */ {
 public:
  String();
  virtual ~String();

  String(const String& from);
  String(String&& from) noexcept
    : String() {
    *this = ::std::move(from);
  }

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }
  inline String& operator=(String&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const String& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(String& a, String& b) {
    a.Swap(&b);
  }
  inline void Swap(String* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline String* New() const final {
    return CreateMaybeMessage<String>(nullptr);
  }

  String* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<String>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(String* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.String";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:aapt.pb.String)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class RawString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.RawString) */ {
 public:
  RawString();
  virtual ~RawString();

  RawString(const RawString& from);
  RawString(RawString&& from) noexcept
    : RawString() {
    *this = ::std::move(from);
  }

  inline RawString& operator=(const RawString& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawString& operator=(RawString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawString* internal_default_instance() {
    return reinterpret_cast<const RawString*>(
               &_RawString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(RawString& a, RawString& b) {
    a.Swap(&b);
  }
  inline void Swap(RawString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawString* New() const final {
    return CreateMaybeMessage<RawString>(nullptr);
  }

  RawString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawString& from);
  void MergeFrom(const RawString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.RawString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:aapt.pb.RawString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class StyledString_Span :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.StyledString.Span) */ {
 public:
  StyledString_Span();
  virtual ~StyledString_Span();

  StyledString_Span(const StyledString_Span& from);
  StyledString_Span(StyledString_Span&& from) noexcept
    : StyledString_Span() {
    *this = ::std::move(from);
  }

  inline StyledString_Span& operator=(const StyledString_Span& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyledString_Span& operator=(StyledString_Span&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StyledString_Span& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyledString_Span* internal_default_instance() {
    return reinterpret_cast<const StyledString_Span*>(
               &_StyledString_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StyledString_Span& a, StyledString_Span& b) {
    a.Swap(&b);
  }
  inline void Swap(StyledString_Span* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyledString_Span* New() const final {
    return CreateMaybeMessage<StyledString_Span>(nullptr);
  }

  StyledString_Span* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyledString_Span>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyledString_Span& from);
  void MergeFrom(const StyledString_Span& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyledString_Span* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.StyledString.Span";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kFirstCharFieldNumber = 2,
    kLastCharFieldNumber = 3,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // uint32 first_char = 2;
  void clear_first_char();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_char() const;
  void set_first_char(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 last_char = 3;
  void clear_last_char();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_char() const;
  void set_last_char(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.StyledString.Span)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_char_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_char_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class StyledString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.StyledString) */ {
 public:
  StyledString();
  virtual ~StyledString();

  StyledString(const StyledString& from);
  StyledString(StyledString&& from) noexcept
    : StyledString() {
    *this = ::std::move(from);
  }

  inline StyledString& operator=(const StyledString& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyledString& operator=(StyledString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StyledString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyledString* internal_default_instance() {
    return reinterpret_cast<const StyledString*>(
               &_StyledString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(StyledString& a, StyledString& b) {
    a.Swap(&b);
  }
  inline void Swap(StyledString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyledString* New() const final {
    return CreateMaybeMessage<StyledString>(nullptr);
  }

  StyledString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyledString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyledString& from);
  void MergeFrom(const StyledString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyledString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.StyledString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StyledString_Span Span;

  // accessors -------------------------------------------------------

  enum : int {
    kSpanFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // repeated .aapt.pb.StyledString.Span span = 2;
  int span_size() const;
  void clear_span();
  ::aapt::pb::StyledString_Span* mutable_span(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyledString_Span >*
      mutable_span();
  const ::aapt::pb::StyledString_Span& span(int index) const;
  ::aapt::pb::StyledString_Span* add_span();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyledString_Span >&
      span() const;

  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:aapt.pb.StyledString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyledString_Span > span_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class FileReference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.FileReference) */ {
 public:
  FileReference();
  virtual ~FileReference();

  FileReference(const FileReference& from);
  FileReference(FileReference&& from) noexcept
    : FileReference() {
    *this = ::std::move(from);
  }

  inline FileReference& operator=(const FileReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileReference& operator=(FileReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileReference* internal_default_instance() {
    return reinterpret_cast<const FileReference*>(
               &_FileReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FileReference& a, FileReference& b) {
    a.Swap(&b);
  }
  inline void Swap(FileReference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileReference* New() const final {
    return CreateMaybeMessage<FileReference>(nullptr);
  }

  FileReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileReference& from);
  void MergeFrom(const FileReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.FileReference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FileReference_Type Type;
  static constexpr Type UNKNOWN =
    FileReference_Type_UNKNOWN;
  static constexpr Type PNG =
    FileReference_Type_PNG;
  static constexpr Type BINARY_XML =
    FileReference_Type_BINARY_XML;
  static constexpr Type PROTO_XML =
    FileReference_Type_PROTO_XML;
  static inline bool Type_IsValid(int value) {
    return FileReference_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    FileReference_Type_Type_MIN;
  static constexpr Type Type_MAX =
    FileReference_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    FileReference_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return FileReference_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return FileReference_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return FileReference_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // .aapt.pb.FileReference.Type type = 2;
  void clear_type();
  ::aapt::pb::FileReference_Type type() const;
  void set_type(::aapt::pb::FileReference_Type value);

  // @@protoc_insertion_point(class_scope:aapt.pb.FileReference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Primitive_NullType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Primitive.NullType) */ {
 public:
  Primitive_NullType();
  virtual ~Primitive_NullType();

  Primitive_NullType(const Primitive_NullType& from);
  Primitive_NullType(Primitive_NullType&& from) noexcept
    : Primitive_NullType() {
    *this = ::std::move(from);
  }

  inline Primitive_NullType& operator=(const Primitive_NullType& from) {
    CopyFrom(from);
    return *this;
  }
  inline Primitive_NullType& operator=(Primitive_NullType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Primitive_NullType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Primitive_NullType* internal_default_instance() {
    return reinterpret_cast<const Primitive_NullType*>(
               &_Primitive_NullType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Primitive_NullType& a, Primitive_NullType& b) {
    a.Swap(&b);
  }
  inline void Swap(Primitive_NullType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Primitive_NullType* New() const final {
    return CreateMaybeMessage<Primitive_NullType>(nullptr);
  }

  Primitive_NullType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Primitive_NullType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Primitive_NullType& from);
  void MergeFrom(const Primitive_NullType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Primitive_NullType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Primitive.NullType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:aapt.pb.Primitive.NullType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Primitive_EmptyType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Primitive.EmptyType) */ {
 public:
  Primitive_EmptyType();
  virtual ~Primitive_EmptyType();

  Primitive_EmptyType(const Primitive_EmptyType& from);
  Primitive_EmptyType(Primitive_EmptyType&& from) noexcept
    : Primitive_EmptyType() {
    *this = ::std::move(from);
  }

  inline Primitive_EmptyType& operator=(const Primitive_EmptyType& from) {
    CopyFrom(from);
    return *this;
  }
  inline Primitive_EmptyType& operator=(Primitive_EmptyType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Primitive_EmptyType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Primitive_EmptyType* internal_default_instance() {
    return reinterpret_cast<const Primitive_EmptyType*>(
               &_Primitive_EmptyType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Primitive_EmptyType& a, Primitive_EmptyType& b) {
    a.Swap(&b);
  }
  inline void Swap(Primitive_EmptyType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Primitive_EmptyType* New() const final {
    return CreateMaybeMessage<Primitive_EmptyType>(nullptr);
  }

  Primitive_EmptyType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Primitive_EmptyType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Primitive_EmptyType& from);
  void MergeFrom(const Primitive_EmptyType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Primitive_EmptyType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Primitive.EmptyType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:aapt.pb.Primitive.EmptyType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Primitive :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Primitive) */ {
 public:
  Primitive();
  virtual ~Primitive();

  Primitive(const Primitive& from);
  Primitive(Primitive&& from) noexcept
    : Primitive() {
    *this = ::std::move(from);
  }

  inline Primitive& operator=(const Primitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Primitive& operator=(Primitive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Primitive& default_instance();

  enum OneofValueCase {
    kNullValue = 1,
    kEmptyValue = 2,
    kFloatValue = 3,
    kDimensionValue = 13,
    kFractionValue = 14,
    kIntDecimalValue = 6,
    kIntHexadecimalValue = 7,
    kBooleanValue = 8,
    kColorArgb8Value = 9,
    kColorRgb8Value = 10,
    kColorArgb4Value = 11,
    kColorRgb4Value = 12,
    kDimensionValueDeprecated = 4,
    kFractionValueDeprecated = 5,
    ONEOF_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Primitive* internal_default_instance() {
    return reinterpret_cast<const Primitive*>(
               &_Primitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Primitive& a, Primitive& b) {
    a.Swap(&b);
  }
  inline void Swap(Primitive* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Primitive* New() const final {
    return CreateMaybeMessage<Primitive>(nullptr);
  }

  Primitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Primitive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Primitive& from);
  void MergeFrom(const Primitive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Primitive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Primitive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Primitive_NullType NullType;
  typedef Primitive_EmptyType EmptyType;

  // accessors -------------------------------------------------------

  enum : int {
    kNullValueFieldNumber = 1,
    kEmptyValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kDimensionValueFieldNumber = 13,
    kFractionValueFieldNumber = 14,
    kIntDecimalValueFieldNumber = 6,
    kIntHexadecimalValueFieldNumber = 7,
    kBooleanValueFieldNumber = 8,
    kColorArgb8ValueFieldNumber = 9,
    kColorRgb8ValueFieldNumber = 10,
    kColorArgb4ValueFieldNumber = 11,
    kColorRgb4ValueFieldNumber = 12,
    kDimensionValueDeprecatedFieldNumber = 4,
    kFractionValueDeprecatedFieldNumber = 5,
  };
  // .aapt.pb.Primitive.NullType null_value = 1;
  bool has_null_value() const;
  void clear_null_value();
  const ::aapt::pb::Primitive_NullType& null_value() const;
  ::aapt::pb::Primitive_NullType* release_null_value();
  ::aapt::pb::Primitive_NullType* mutable_null_value();
  void set_allocated_null_value(::aapt::pb::Primitive_NullType* null_value);

  // .aapt.pb.Primitive.EmptyType empty_value = 2;
  bool has_empty_value() const;
  void clear_empty_value();
  const ::aapt::pb::Primitive_EmptyType& empty_value() const;
  ::aapt::pb::Primitive_EmptyType* release_empty_value();
  ::aapt::pb::Primitive_EmptyType* mutable_empty_value();
  void set_allocated_empty_value(::aapt::pb::Primitive_EmptyType* empty_value);

  // float float_value = 3;
  private:
  bool has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);

  // uint32 dimension_value = 13;
  private:
  bool has_dimension_value() const;
  public:
  void clear_dimension_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 dimension_value() const;
  void set_dimension_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 fraction_value = 14;
  private:
  bool has_fraction_value() const;
  public:
  void clear_fraction_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 fraction_value() const;
  void set_fraction_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 int_decimal_value = 6;
  private:
  bool has_int_decimal_value() const;
  public:
  void clear_int_decimal_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_decimal_value() const;
  void set_int_decimal_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 int_hexadecimal_value = 7;
  private:
  bool has_int_hexadecimal_value() const;
  public:
  void clear_int_hexadecimal_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 int_hexadecimal_value() const;
  void set_int_hexadecimal_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool boolean_value = 8;
  private:
  bool has_boolean_value() const;
  public:
  void clear_boolean_value();
  bool boolean_value() const;
  void set_boolean_value(bool value);

  // uint32 color_argb8_value = 9;
  private:
  bool has_color_argb8_value() const;
  public:
  void clear_color_argb8_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 color_argb8_value() const;
  void set_color_argb8_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 color_rgb8_value = 10;
  private:
  bool has_color_rgb8_value() const;
  public:
  void clear_color_rgb8_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 color_rgb8_value() const;
  void set_color_rgb8_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 color_argb4_value = 11;
  private:
  bool has_color_argb4_value() const;
  public:
  void clear_color_argb4_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 color_argb4_value() const;
  void set_color_argb4_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 color_rgb4_value = 12;
  private:
  bool has_color_rgb4_value() const;
  public:
  void clear_color_rgb4_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 color_rgb4_value() const;
  void set_color_rgb4_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float dimension_value_deprecated = 4 [deprecated = true];
  private:
  bool has_dimension_value_deprecated() const;
  public:
  PROTOBUF_DEPRECATED void clear_dimension_value_deprecated();
  PROTOBUF_DEPRECATED float dimension_value_deprecated() const;
  PROTOBUF_DEPRECATED void set_dimension_value_deprecated(float value);

  // float fraction_value_deprecated = 5 [deprecated = true];
  private:
  bool has_fraction_value_deprecated() const;
  public:
  PROTOBUF_DEPRECATED void clear_fraction_value_deprecated();
  PROTOBUF_DEPRECATED float fraction_value_deprecated() const;
  PROTOBUF_DEPRECATED void set_fraction_value_deprecated(float value);

  void clear_oneof_value();
  OneofValueCase oneof_value_case() const;
  // @@protoc_insertion_point(class_scope:aapt.pb.Primitive)
 private:
  class _Internal;
  void set_has_null_value();
  void set_has_empty_value();
  void set_has_float_value();
  void set_has_dimension_value();
  void set_has_fraction_value();
  void set_has_int_decimal_value();
  void set_has_int_hexadecimal_value();
  void set_has_boolean_value();
  void set_has_color_argb8_value();
  void set_has_color_rgb8_value();
  void set_has_color_argb4_value();
  void set_has_color_rgb4_value();
  void set_has_dimension_value_deprecated();
  void set_has_fraction_value_deprecated();

  inline bool has_oneof_value() const;
  inline void clear_has_oneof_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union OneofValueUnion {
    OneofValueUnion() {}
    ::aapt::pb::Primitive_NullType* null_value_;
    ::aapt::pb::Primitive_EmptyType* empty_value_;
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 dimension_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 fraction_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int_decimal_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 int_hexadecimal_value_;
    bool boolean_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 color_argb8_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 color_rgb8_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 color_argb4_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 color_rgb4_value_;
    float dimension_value_deprecated_;
    float fraction_value_deprecated_;
  } oneof_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Attribute_Symbol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Attribute.Symbol) */ {
 public:
  Attribute_Symbol();
  virtual ~Attribute_Symbol();

  Attribute_Symbol(const Attribute_Symbol& from);
  Attribute_Symbol(Attribute_Symbol&& from) noexcept
    : Attribute_Symbol() {
    *this = ::std::move(from);
  }

  inline Attribute_Symbol& operator=(const Attribute_Symbol& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute_Symbol& operator=(Attribute_Symbol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribute_Symbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attribute_Symbol* internal_default_instance() {
    return reinterpret_cast<const Attribute_Symbol*>(
               &_Attribute_Symbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Attribute_Symbol& a, Attribute_Symbol& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribute_Symbol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attribute_Symbol* New() const final {
    return CreateMaybeMessage<Attribute_Symbol>(nullptr);
  }

  Attribute_Symbol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribute_Symbol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribute_Symbol& from);
  void MergeFrom(const Attribute_Symbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute_Symbol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Attribute.Symbol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kSourceFieldNumber = 1,
    kNameFieldNumber = 3,
    kValueFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // .aapt.pb.Reference name = 3;
  bool has_name() const;
  void clear_name();
  const ::aapt::pb::Reference& name() const;
  ::aapt::pb::Reference* release_name();
  ::aapt::pb::Reference* mutable_name();
  void set_allocated_name(::aapt::pb::Reference* name);

  // uint32 value = 4;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.Attribute.Symbol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  ::aapt::pb::Reference* name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Attribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Attribute) */ {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Attribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Attribute* New() const final {
    return CreateMaybeMessage<Attribute>(nullptr);
  }

  Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Attribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Attribute_Symbol Symbol;

  typedef Attribute_FormatFlags FormatFlags;
  static constexpr FormatFlags NONE =
    Attribute_FormatFlags_NONE;
  static constexpr FormatFlags ANY =
    Attribute_FormatFlags_ANY;
  static constexpr FormatFlags REFERENCE =
    Attribute_FormatFlags_REFERENCE;
  static constexpr FormatFlags STRING =
    Attribute_FormatFlags_STRING;
  static constexpr FormatFlags INTEGER =
    Attribute_FormatFlags_INTEGER;
  static constexpr FormatFlags BOOLEAN =
    Attribute_FormatFlags_BOOLEAN;
  static constexpr FormatFlags COLOR =
    Attribute_FormatFlags_COLOR;
  static constexpr FormatFlags FLOAT =
    Attribute_FormatFlags_FLOAT;
  static constexpr FormatFlags DIMENSION =
    Attribute_FormatFlags_DIMENSION;
  static constexpr FormatFlags FRACTION =
    Attribute_FormatFlags_FRACTION;
  static constexpr FormatFlags ENUM =
    Attribute_FormatFlags_ENUM;
  static constexpr FormatFlags FLAGS =
    Attribute_FormatFlags_FLAGS;
  static inline bool FormatFlags_IsValid(int value) {
    return Attribute_FormatFlags_IsValid(value);
  }
  static constexpr FormatFlags FormatFlags_MIN =
    Attribute_FormatFlags_FormatFlags_MIN;
  static constexpr FormatFlags FormatFlags_MAX =
    Attribute_FormatFlags_FormatFlags_MAX;
  static constexpr int FormatFlags_ARRAYSIZE =
    Attribute_FormatFlags_FormatFlags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FormatFlags_descriptor() {
    return Attribute_FormatFlags_descriptor();
  }
  template<typename T>
  static inline const std::string& FormatFlags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FormatFlags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FormatFlags_Name.");
    return Attribute_FormatFlags_Name(enum_t_value);
  }
  static inline bool FormatFlags_Parse(const std::string& name,
      FormatFlags* value) {
    return Attribute_FormatFlags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 4,
    kFormatFlagsFieldNumber = 1,
    kMinIntFieldNumber = 2,
    kMaxIntFieldNumber = 3,
  };
  // repeated .aapt.pb.Attribute.Symbol symbol = 4;
  int symbol_size() const;
  void clear_symbol();
  ::aapt::pb::Attribute_Symbol* mutable_symbol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Attribute_Symbol >*
      mutable_symbol();
  const ::aapt::pb::Attribute_Symbol& symbol(int index) const;
  ::aapt::pb::Attribute_Symbol* add_symbol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Attribute_Symbol >&
      symbol() const;

  // uint32 format_flags = 1;
  void clear_format_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 format_flags() const;
  void set_format_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 min_int = 2;
  void clear_min_int();
  ::PROTOBUF_NAMESPACE_ID::int32 min_int() const;
  void set_min_int(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_int = 3;
  void clear_max_int();
  ::PROTOBUF_NAMESPACE_ID::int32 max_int() const;
  void set_max_int(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.Attribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Attribute_Symbol > symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_int_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_int_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Style_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Style.Entry) */ {
 public:
  Style_Entry();
  virtual ~Style_Entry();

  Style_Entry(const Style_Entry& from);
  Style_Entry(Style_Entry&& from) noexcept
    : Style_Entry() {
    *this = ::std::move(from);
  }

  inline Style_Entry& operator=(const Style_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Style_Entry& operator=(Style_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Style_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Style_Entry* internal_default_instance() {
    return reinterpret_cast<const Style_Entry*>(
               &_Style_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Style_Entry& a, Style_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Style_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Style_Entry* New() const final {
    return CreateMaybeMessage<Style_Entry>(nullptr);
  }

  Style_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Style_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Style_Entry& from);
  void MergeFrom(const Style_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Style_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Style.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kSourceFieldNumber = 1,
    kKeyFieldNumber = 3,
    kItemFieldNumber = 4,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // .aapt.pb.Reference key = 3;
  bool has_key() const;
  void clear_key();
  const ::aapt::pb::Reference& key() const;
  ::aapt::pb::Reference* release_key();
  ::aapt::pb::Reference* mutable_key();
  void set_allocated_key(::aapt::pb::Reference* key);

  // .aapt.pb.Item item = 4;
  bool has_item() const;
  void clear_item();
  const ::aapt::pb::Item& item() const;
  ::aapt::pb::Item* release_item();
  ::aapt::pb::Item* mutable_item();
  void set_allocated_item(::aapt::pb::Item* item);

  // @@protoc_insertion_point(class_scope:aapt.pb.Style.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  ::aapt::pb::Reference* key_;
  ::aapt::pb::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Style :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Style) */ {
 public:
  Style();
  virtual ~Style();

  Style(const Style& from);
  Style(Style&& from) noexcept
    : Style() {
    *this = ::std::move(from);
  }

  inline Style& operator=(const Style& from) {
    CopyFrom(from);
    return *this;
  }
  inline Style& operator=(Style&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Style& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Style* internal_default_instance() {
    return reinterpret_cast<const Style*>(
               &_Style_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Style& a, Style& b) {
    a.Swap(&b);
  }
  inline void Swap(Style* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Style* New() const final {
    return CreateMaybeMessage<Style>(nullptr);
  }

  Style* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Style>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Style& from);
  void MergeFrom(const Style& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Style* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Style";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Style_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 3,
    kParentFieldNumber = 1,
    kParentSourceFieldNumber = 2,
  };
  // repeated .aapt.pb.Style.Entry entry = 3;
  int entry_size() const;
  void clear_entry();
  ::aapt::pb::Style_Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Style_Entry >*
      mutable_entry();
  const ::aapt::pb::Style_Entry& entry(int index) const;
  ::aapt::pb::Style_Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Style_Entry >&
      entry() const;

  // .aapt.pb.Reference parent = 1;
  bool has_parent() const;
  void clear_parent();
  const ::aapt::pb::Reference& parent() const;
  ::aapt::pb::Reference* release_parent();
  ::aapt::pb::Reference* mutable_parent();
  void set_allocated_parent(::aapt::pb::Reference* parent);

  // .aapt.pb.Source parent_source = 2;
  bool has_parent_source() const;
  void clear_parent_source();
  const ::aapt::pb::Source& parent_source() const;
  ::aapt::pb::Source* release_parent_source();
  ::aapt::pb::Source* mutable_parent_source();
  void set_allocated_parent_source(::aapt::pb::Source* parent_source);

  // @@protoc_insertion_point(class_scope:aapt.pb.Style)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Style_Entry > entry_;
  ::aapt::pb::Reference* parent_;
  ::aapt::pb::Source* parent_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Styleable_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Styleable.Entry) */ {
 public:
  Styleable_Entry();
  virtual ~Styleable_Entry();

  Styleable_Entry(const Styleable_Entry& from);
  Styleable_Entry(Styleable_Entry&& from) noexcept
    : Styleable_Entry() {
    *this = ::std::move(from);
  }

  inline Styleable_Entry& operator=(const Styleable_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Styleable_Entry& operator=(Styleable_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Styleable_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Styleable_Entry* internal_default_instance() {
    return reinterpret_cast<const Styleable_Entry*>(
               &_Styleable_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Styleable_Entry& a, Styleable_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Styleable_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Styleable_Entry* New() const final {
    return CreateMaybeMessage<Styleable_Entry>(nullptr);
  }

  Styleable_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Styleable_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Styleable_Entry& from);
  void MergeFrom(const Styleable_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Styleable_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Styleable.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kSourceFieldNumber = 1,
    kAttrFieldNumber = 3,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // .aapt.pb.Reference attr = 3;
  bool has_attr() const;
  void clear_attr();
  const ::aapt::pb::Reference& attr() const;
  ::aapt::pb::Reference* release_attr();
  ::aapt::pb::Reference* mutable_attr();
  void set_allocated_attr(::aapt::pb::Reference* attr);

  // @@protoc_insertion_point(class_scope:aapt.pb.Styleable.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  ::aapt::pb::Reference* attr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Styleable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Styleable) */ {
 public:
  Styleable();
  virtual ~Styleable();

  Styleable(const Styleable& from);
  Styleable(Styleable&& from) noexcept
    : Styleable() {
    *this = ::std::move(from);
  }

  inline Styleable& operator=(const Styleable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Styleable& operator=(Styleable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Styleable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Styleable* internal_default_instance() {
    return reinterpret_cast<const Styleable*>(
               &_Styleable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Styleable& a, Styleable& b) {
    a.Swap(&b);
  }
  inline void Swap(Styleable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Styleable* New() const final {
    return CreateMaybeMessage<Styleable>(nullptr);
  }

  Styleable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Styleable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Styleable& from);
  void MergeFrom(const Styleable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Styleable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Styleable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Styleable_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // repeated .aapt.pb.Styleable.Entry entry = 1;
  int entry_size() const;
  void clear_entry();
  ::aapt::pb::Styleable_Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Styleable_Entry >*
      mutable_entry();
  const ::aapt::pb::Styleable_Entry& entry(int index) const;
  ::aapt::pb::Styleable_Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Styleable_Entry >&
      entry() const;

  // @@protoc_insertion_point(class_scope:aapt.pb.Styleable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Styleable_Entry > entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Array_Element :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Array.Element) */ {
 public:
  Array_Element();
  virtual ~Array_Element();

  Array_Element(const Array_Element& from);
  Array_Element(Array_Element&& from) noexcept
    : Array_Element() {
    *this = ::std::move(from);
  }

  inline Array_Element& operator=(const Array_Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array_Element& operator=(Array_Element&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Array_Element& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Array_Element* internal_default_instance() {
    return reinterpret_cast<const Array_Element*>(
               &_Array_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Array_Element& a, Array_Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Array_Element* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Array_Element* New() const final {
    return CreateMaybeMessage<Array_Element>(nullptr);
  }

  Array_Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Array_Element>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Array_Element& from);
  void MergeFrom(const Array_Element& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Array_Element* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Array.Element";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kSourceFieldNumber = 1,
    kItemFieldNumber = 3,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // .aapt.pb.Item item = 3;
  bool has_item() const;
  void clear_item();
  const ::aapt::pb::Item& item() const;
  ::aapt::pb::Item* release_item();
  ::aapt::pb::Item* mutable_item();
  void set_allocated_item(::aapt::pb::Item* item);

  // @@protoc_insertion_point(class_scope:aapt.pb.Array.Element)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  ::aapt::pb::Item* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Array :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Array) */ {
 public:
  Array();
  virtual ~Array();

  Array(const Array& from);
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array& operator=(Array&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Array* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Array* New() const final {
    return CreateMaybeMessage<Array>(nullptr);
  }

  Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Array>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Array";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Array_Element Element;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .aapt.pb.Array.Element element = 1;
  int element_size() const;
  void clear_element();
  ::aapt::pb::Array_Element* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Array_Element >*
      mutable_element();
  const ::aapt::pb::Array_Element& element(int index) const;
  ::aapt::pb::Array_Element* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Array_Element >&
      element() const;

  // @@protoc_insertion_point(class_scope:aapt.pb.Array)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Array_Element > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Plural_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Plural.Entry) */ {
 public:
  Plural_Entry();
  virtual ~Plural_Entry();

  Plural_Entry(const Plural_Entry& from);
  Plural_Entry(Plural_Entry&& from) noexcept
    : Plural_Entry() {
    *this = ::std::move(from);
  }

  inline Plural_Entry& operator=(const Plural_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plural_Entry& operator=(Plural_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Plural_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plural_Entry* internal_default_instance() {
    return reinterpret_cast<const Plural_Entry*>(
               &_Plural_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Plural_Entry& a, Plural_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Plural_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Plural_Entry* New() const final {
    return CreateMaybeMessage<Plural_Entry>(nullptr);
  }

  Plural_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Plural_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Plural_Entry& from);
  void MergeFrom(const Plural_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plural_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Plural.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kSourceFieldNumber = 1,
    kItemFieldNumber = 4,
    kArityFieldNumber = 3,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);

  // .aapt.pb.Source source = 1;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::Source& source() const;
  ::aapt::pb::Source* release_source();
  ::aapt::pb::Source* mutable_source();
  void set_allocated_source(::aapt::pb::Source* source);

  // .aapt.pb.Item item = 4;
  bool has_item() const;
  void clear_item();
  const ::aapt::pb::Item& item() const;
  ::aapt::pb::Item* release_item();
  ::aapt::pb::Item* mutable_item();
  void set_allocated_item(::aapt::pb::Item* item);

  // .aapt.pb.Plural.Arity arity = 3;
  void clear_arity();
  ::aapt::pb::Plural_Arity arity() const;
  void set_arity(::aapt::pb::Plural_Arity value);

  // @@protoc_insertion_point(class_scope:aapt.pb.Plural.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::aapt::pb::Source* source_;
  ::aapt::pb::Item* item_;
  int arity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class Plural :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.Plural) */ {
 public:
  Plural();
  virtual ~Plural();

  Plural(const Plural& from);
  Plural(Plural&& from) noexcept
    : Plural() {
    *this = ::std::move(from);
  }

  inline Plural& operator=(const Plural& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plural& operator=(Plural&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Plural& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plural* internal_default_instance() {
    return reinterpret_cast<const Plural*>(
               &_Plural_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Plural& a, Plural& b) {
    a.Swap(&b);
  }
  inline void Swap(Plural* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Plural* New() const final {
    return CreateMaybeMessage<Plural>(nullptr);
  }

  Plural* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Plural>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Plural& from);
  void MergeFrom(const Plural& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plural* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.Plural";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Plural_Entry Entry;

  typedef Plural_Arity Arity;
  static constexpr Arity ZERO =
    Plural_Arity_ZERO;
  static constexpr Arity ONE =
    Plural_Arity_ONE;
  static constexpr Arity TWO =
    Plural_Arity_TWO;
  static constexpr Arity FEW =
    Plural_Arity_FEW;
  static constexpr Arity MANY =
    Plural_Arity_MANY;
  static constexpr Arity OTHER =
    Plural_Arity_OTHER;
  static inline bool Arity_IsValid(int value) {
    return Plural_Arity_IsValid(value);
  }
  static constexpr Arity Arity_MIN =
    Plural_Arity_Arity_MIN;
  static constexpr Arity Arity_MAX =
    Plural_Arity_Arity_MAX;
  static constexpr int Arity_ARRAYSIZE =
    Plural_Arity_Arity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Arity_descriptor() {
    return Plural_Arity_descriptor();
  }
  template<typename T>
  static inline const std::string& Arity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Arity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Arity_Name.");
    return Plural_Arity_Name(enum_t_value);
  }
  static inline bool Arity_Parse(const std::string& name,
      Arity* value) {
    return Plural_Arity_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
  };
  // repeated .aapt.pb.Plural.Entry entry = 1;
  int entry_size() const;
  void clear_entry();
  ::aapt::pb::Plural_Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Plural_Entry >*
      mutable_entry();
  const ::aapt::pb::Plural_Entry& entry(int index) const;
  ::aapt::pb::Plural_Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Plural_Entry >&
      entry() const;

  // @@protoc_insertion_point(class_scope:aapt.pb.Plural)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Plural_Entry > entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class XmlNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.XmlNode) */ {
 public:
  XmlNode();
  virtual ~XmlNode();

  XmlNode(const XmlNode& from);
  XmlNode(XmlNode&& from) noexcept
    : XmlNode() {
    *this = ::std::move(from);
  }

  inline XmlNode& operator=(const XmlNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline XmlNode& operator=(XmlNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XmlNode& default_instance();

  enum NodeCase {
    kElement = 1,
    kText = 2,
    NODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmlNode* internal_default_instance() {
    return reinterpret_cast<const XmlNode*>(
               &_XmlNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(XmlNode& a, XmlNode& b) {
    a.Swap(&b);
  }
  inline void Swap(XmlNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XmlNode* New() const final {
    return CreateMaybeMessage<XmlNode>(nullptr);
  }

  XmlNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XmlNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XmlNode& from);
  void MergeFrom(const XmlNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmlNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.XmlNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 3,
    kElementFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // .aapt.pb.SourcePosition source = 3;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::SourcePosition& source() const;
  ::aapt::pb::SourcePosition* release_source();
  ::aapt::pb::SourcePosition* mutable_source();
  void set_allocated_source(::aapt::pb::SourcePosition* source);

  // .aapt.pb.XmlElement element = 1;
  bool has_element() const;
  void clear_element();
  const ::aapt::pb::XmlElement& element() const;
  ::aapt::pb::XmlElement* release_element();
  ::aapt::pb::XmlElement* mutable_element();
  void set_allocated_element(::aapt::pb::XmlElement* element);

  // string text = 2;
  private:
  bool has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:aapt.pb.XmlNode)
 private:
  class _Internal;
  void set_has_element();
  void set_has_text();

  inline bool has_node() const;
  inline void clear_has_node();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::aapt::pb::SourcePosition* source_;
  union NodeUnion {
    NodeUnion() {}
    ::aapt::pb::XmlElement* element_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  } node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class XmlElement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.XmlElement) */ {
 public:
  XmlElement();
  virtual ~XmlElement();

  XmlElement(const XmlElement& from);
  XmlElement(XmlElement&& from) noexcept
    : XmlElement() {
    *this = ::std::move(from);
  }

  inline XmlElement& operator=(const XmlElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline XmlElement& operator=(XmlElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XmlElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmlElement* internal_default_instance() {
    return reinterpret_cast<const XmlElement*>(
               &_XmlElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(XmlElement& a, XmlElement& b) {
    a.Swap(&b);
  }
  inline void Swap(XmlElement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XmlElement* New() const final {
    return CreateMaybeMessage<XmlElement>(nullptr);
  }

  XmlElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XmlElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XmlElement& from);
  void MergeFrom(const XmlElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmlElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.XmlElement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceDeclarationFieldNumber = 1,
    kAttributeFieldNumber = 4,
    kChildFieldNumber = 5,
    kNamespaceUriFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  // repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
  int namespace_declaration_size() const;
  void clear_namespace_declaration();
  ::aapt::pb::XmlNamespace* mutable_namespace_declaration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNamespace >*
      mutable_namespace_declaration();
  const ::aapt::pb::XmlNamespace& namespace_declaration(int index) const;
  ::aapt::pb::XmlNamespace* add_namespace_declaration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNamespace >&
      namespace_declaration() const;

  // repeated .aapt.pb.XmlAttribute attribute = 4;
  int attribute_size() const;
  void clear_attribute();
  ::aapt::pb::XmlAttribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlAttribute >*
      mutable_attribute();
  const ::aapt::pb::XmlAttribute& attribute(int index) const;
  ::aapt::pb::XmlAttribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlAttribute >&
      attribute() const;

  // repeated .aapt.pb.XmlNode child = 5;
  int child_size() const;
  void clear_child();
  ::aapt::pb::XmlNode* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNode >*
      mutable_child();
  const ::aapt::pb::XmlNode& child(int index) const;
  ::aapt::pb::XmlNode* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNode >&
      child() const;

  // string namespace_uri = 2;
  void clear_namespace_uri();
  const std::string& namespace_uri() const;
  void set_namespace_uri(const std::string& value);
  void set_namespace_uri(std::string&& value);
  void set_namespace_uri(const char* value);
  void set_namespace_uri(const char* value, size_t size);
  std::string* mutable_namespace_uri();
  std::string* release_namespace_uri();
  void set_allocated_namespace_uri(std::string* namespace_uri);

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:aapt.pb.XmlElement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNamespace > namespace_declaration_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlAttribute > attribute_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNode > child_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class XmlNamespace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.XmlNamespace) */ {
 public:
  XmlNamespace();
  virtual ~XmlNamespace();

  XmlNamespace(const XmlNamespace& from);
  XmlNamespace(XmlNamespace&& from) noexcept
    : XmlNamespace() {
    *this = ::std::move(from);
  }

  inline XmlNamespace& operator=(const XmlNamespace& from) {
    CopyFrom(from);
    return *this;
  }
  inline XmlNamespace& operator=(XmlNamespace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XmlNamespace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmlNamespace* internal_default_instance() {
    return reinterpret_cast<const XmlNamespace*>(
               &_XmlNamespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(XmlNamespace& a, XmlNamespace& b) {
    a.Swap(&b);
  }
  inline void Swap(XmlNamespace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XmlNamespace* New() const final {
    return CreateMaybeMessage<XmlNamespace>(nullptr);
  }

  XmlNamespace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XmlNamespace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XmlNamespace& from);
  void MergeFrom(const XmlNamespace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmlNamespace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.XmlNamespace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kUriFieldNumber = 2,
    kSourceFieldNumber = 3,
  };
  // string prefix = 1;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);

  // string uri = 2;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);

  // .aapt.pb.SourcePosition source = 3;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::SourcePosition& source() const;
  ::aapt::pb::SourcePosition* release_source();
  ::aapt::pb::SourcePosition* mutable_source();
  void set_allocated_source(::aapt::pb::SourcePosition* source);

  // @@protoc_insertion_point(class_scope:aapt.pb.XmlNamespace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::aapt::pb::SourcePosition* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class XmlAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.XmlAttribute) */ {
 public:
  XmlAttribute();
  virtual ~XmlAttribute();

  XmlAttribute(const XmlAttribute& from);
  XmlAttribute(XmlAttribute&& from) noexcept
    : XmlAttribute() {
    *this = ::std::move(from);
  }

  inline XmlAttribute& operator=(const XmlAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline XmlAttribute& operator=(XmlAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XmlAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmlAttribute* internal_default_instance() {
    return reinterpret_cast<const XmlAttribute*>(
               &_XmlAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(XmlAttribute& a, XmlAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(XmlAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XmlAttribute* New() const final {
    return CreateMaybeMessage<XmlAttribute>(nullptr);
  }

  XmlAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XmlAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XmlAttribute& from);
  void MergeFrom(const XmlAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmlAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.XmlAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceUriFieldNumber = 1,
    kNameFieldNumber = 2,
    kValueFieldNumber = 3,
    kSourceFieldNumber = 4,
    kCompiledItemFieldNumber = 6,
    kResourceIdFieldNumber = 5,
  };
  // string namespace_uri = 1;
  void clear_namespace_uri();
  const std::string& namespace_uri() const;
  void set_namespace_uri(const std::string& value);
  void set_namespace_uri(std::string&& value);
  void set_namespace_uri(const char* value);
  void set_namespace_uri(const char* value, size_t size);
  std::string* mutable_namespace_uri();
  std::string* release_namespace_uri();
  void set_allocated_namespace_uri(std::string* namespace_uri);

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // .aapt.pb.SourcePosition source = 4;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::SourcePosition& source() const;
  ::aapt::pb::SourcePosition* release_source();
  ::aapt::pb::SourcePosition* mutable_source();
  void set_allocated_source(::aapt::pb::SourcePosition* source);

  // .aapt.pb.Item compiled_item = 6;
  bool has_compiled_item() const;
  void clear_compiled_item();
  const ::aapt::pb::Item& compiled_item() const;
  ::aapt::pb::Item* release_compiled_item();
  ::aapt::pb::Item* mutable_compiled_item();
  void set_allocated_compiled_item(::aapt::pb::Item* compiled_item);

  // uint32 resource_id = 5;
  void clear_resource_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 resource_id() const;
  void set_resource_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.XmlAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::aapt::pb::SourcePosition* source_;
  ::aapt::pb::Item* compiled_item_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resource_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class MacroBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.MacroBody) */ {
 public:
  MacroBody();
  virtual ~MacroBody();

  MacroBody(const MacroBody& from);
  MacroBody(MacroBody&& from) noexcept
    : MacroBody() {
    *this = ::std::move(from);
  }

  inline MacroBody& operator=(const MacroBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacroBody& operator=(MacroBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MacroBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacroBody* internal_default_instance() {
    return reinterpret_cast<const MacroBody*>(
               &_MacroBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MacroBody& a, MacroBody& b) {
    a.Swap(&b);
  }
  inline void Swap(MacroBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacroBody* New() const final {
    return CreateMaybeMessage<MacroBody>(nullptr);
  }

  MacroBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacroBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MacroBody& from);
  void MergeFrom(const MacroBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MacroBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.MacroBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUntranslatableSectionsFieldNumber = 3,
    kNamespaceStackFieldNumber = 4,
    kRawStringFieldNumber = 1,
    kStyleStringFieldNumber = 2,
    kSourceFieldNumber = 5,
  };
  // repeated .aapt.pb.UntranslatableSection untranslatable_sections = 3;
  int untranslatable_sections_size() const;
  void clear_untranslatable_sections();
  ::aapt::pb::UntranslatableSection* mutable_untranslatable_sections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::UntranslatableSection >*
      mutable_untranslatable_sections();
  const ::aapt::pb::UntranslatableSection& untranslatable_sections(int index) const;
  ::aapt::pb::UntranslatableSection* add_untranslatable_sections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::UntranslatableSection >&
      untranslatable_sections() const;

  // repeated .aapt.pb.NamespaceAlias namespace_stack = 4;
  int namespace_stack_size() const;
  void clear_namespace_stack();
  ::aapt::pb::NamespaceAlias* mutable_namespace_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::NamespaceAlias >*
      mutable_namespace_stack();
  const ::aapt::pb::NamespaceAlias& namespace_stack(int index) const;
  ::aapt::pb::NamespaceAlias* add_namespace_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::NamespaceAlias >&
      namespace_stack() const;

  // string raw_string = 1;
  void clear_raw_string();
  const std::string& raw_string() const;
  void set_raw_string(const std::string& value);
  void set_raw_string(std::string&& value);
  void set_raw_string(const char* value);
  void set_raw_string(const char* value, size_t size);
  std::string* mutable_raw_string();
  std::string* release_raw_string();
  void set_allocated_raw_string(std::string* raw_string);

  // .aapt.pb.StyleString style_string = 2;
  bool has_style_string() const;
  void clear_style_string();
  const ::aapt::pb::StyleString& style_string() const;
  ::aapt::pb::StyleString* release_style_string();
  ::aapt::pb::StyleString* mutable_style_string();
  void set_allocated_style_string(::aapt::pb::StyleString* style_string);

  // .aapt.pb.SourcePosition source = 5;
  bool has_source() const;
  void clear_source();
  const ::aapt::pb::SourcePosition& source() const;
  ::aapt::pb::SourcePosition* release_source();
  ::aapt::pb::SourcePosition* mutable_source();
  void set_allocated_source(::aapt::pb::SourcePosition* source);

  // @@protoc_insertion_point(class_scope:aapt.pb.MacroBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::UntranslatableSection > untranslatable_sections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::NamespaceAlias > namespace_stack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_string_;
  ::aapt::pb::StyleString* style_string_;
  ::aapt::pb::SourcePosition* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class NamespaceAlias :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.NamespaceAlias) */ {
 public:
  NamespaceAlias();
  virtual ~NamespaceAlias();

  NamespaceAlias(const NamespaceAlias& from);
  NamespaceAlias(NamespaceAlias&& from) noexcept
    : NamespaceAlias() {
    *this = ::std::move(from);
  }

  inline NamespaceAlias& operator=(const NamespaceAlias& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamespaceAlias& operator=(NamespaceAlias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamespaceAlias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamespaceAlias* internal_default_instance() {
    return reinterpret_cast<const NamespaceAlias*>(
               &_NamespaceAlias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(NamespaceAlias& a, NamespaceAlias& b) {
    a.Swap(&b);
  }
  inline void Swap(NamespaceAlias* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamespaceAlias* New() const final {
    return CreateMaybeMessage<NamespaceAlias>(nullptr);
  }

  NamespaceAlias* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamespaceAlias>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamespaceAlias& from);
  void MergeFrom(const NamespaceAlias& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamespaceAlias* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.NamespaceAlias";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kPackageNameFieldNumber = 2,
    kIsPrivateFieldNumber = 3,
  };
  // string prefix = 1;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);

  // string package_name = 2;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // bool is_private = 3;
  void clear_is_private();
  bool is_private() const;
  void set_is_private(bool value);

  // @@protoc_insertion_point(class_scope:aapt.pb.NamespaceAlias)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  bool is_private_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class StyleString_Span :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.StyleString.Span) */ {
 public:
  StyleString_Span();
  virtual ~StyleString_Span();

  StyleString_Span(const StyleString_Span& from);
  StyleString_Span(StyleString_Span&& from) noexcept
    : StyleString_Span() {
    *this = ::std::move(from);
  }

  inline StyleString_Span& operator=(const StyleString_Span& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleString_Span& operator=(StyleString_Span&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StyleString_Span& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleString_Span* internal_default_instance() {
    return reinterpret_cast<const StyleString_Span*>(
               &_StyleString_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(StyleString_Span& a, StyleString_Span& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleString_Span* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleString_Span* New() const final {
    return CreateMaybeMessage<StyleString_Span>(nullptr);
  }

  StyleString_Span* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleString_Span>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleString_Span& from);
  void MergeFrom(const StyleString_Span& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleString_Span* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.StyleString.Span";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStartIndexFieldNumber = 2,
    kEndIndexFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint32 start_index = 2;
  void clear_start_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_index() const;
  void set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 end_index = 3;
  void clear_end_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_index() const;
  void set_end_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.StyleString.Span)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class StyleString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.StyleString) */ {
 public:
  StyleString();
  virtual ~StyleString();

  StyleString(const StyleString& from);
  StyleString(StyleString&& from) noexcept
    : StyleString() {
    *this = ::std::move(from);
  }

  inline StyleString& operator=(const StyleString& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleString& operator=(StyleString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StyleString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleString* internal_default_instance() {
    return reinterpret_cast<const StyleString*>(
               &_StyleString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(StyleString& a, StyleString& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleString* New() const final {
    return CreateMaybeMessage<StyleString>(nullptr);
  }

  StyleString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleString& from);
  void MergeFrom(const StyleString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.StyleString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StyleString_Span Span;

  // accessors -------------------------------------------------------

  enum : int {
    kSpansFieldNumber = 2,
    kStrFieldNumber = 1,
  };
  // repeated .aapt.pb.StyleString.Span spans = 2;
  int spans_size() const;
  void clear_spans();
  ::aapt::pb::StyleString_Span* mutable_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyleString_Span >*
      mutable_spans();
  const ::aapt::pb::StyleString_Span& spans(int index) const;
  ::aapt::pb::StyleString_Span* add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyleString_Span >&
      spans() const;

  // string str = 1;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);

  // @@protoc_insertion_point(class_scope:aapt.pb.StyleString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyleString_Span > spans_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// -------------------------------------------------------------------

class UntranslatableSection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aapt.pb.UntranslatableSection) */ {
 public:
  UntranslatableSection();
  virtual ~UntranslatableSection();

  UntranslatableSection(const UntranslatableSection& from);
  UntranslatableSection(UntranslatableSection&& from) noexcept
    : UntranslatableSection() {
    *this = ::std::move(from);
  }

  inline UntranslatableSection& operator=(const UntranslatableSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline UntranslatableSection& operator=(UntranslatableSection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UntranslatableSection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UntranslatableSection* internal_default_instance() {
    return reinterpret_cast<const UntranslatableSection*>(
               &_UntranslatableSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(UntranslatableSection& a, UntranslatableSection& b) {
    a.Swap(&b);
  }
  inline void Swap(UntranslatableSection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UntranslatableSection* New() const final {
    return CreateMaybeMessage<UntranslatableSection>(nullptr);
  }

  UntranslatableSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UntranslatableSection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UntranslatableSection& from);
  void MergeFrom(const UntranslatableSection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UntranslatableSection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aapt.pb.UntranslatableSection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto);
    return ::descriptor_table_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartIndexFieldNumber = 1,
    kEndIndexFieldNumber = 2,
  };
  // uint64 start_index = 1;
  void clear_start_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_index() const;
  void set_start_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 end_index = 2;
  void clear_end_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_index() const;
  void set_end_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:aapt.pb.UntranslatableSection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringPool

// bytes data = 1;
inline void StringPool::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StringPool::data() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StringPool.data)
  return data_.GetNoArena();
}
inline void StringPool::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.StringPool.data)
}
inline void StringPool::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.StringPool.data)
}
inline void StringPool::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.StringPool.data)
}
inline void StringPool::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.StringPool.data)
}
inline std::string* StringPool::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.StringPool.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StringPool::release_data() {
  // @@protoc_insertion_point(field_release:aapt.pb.StringPool.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StringPool::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.StringPool.data)
}

// -------------------------------------------------------------------

// SourcePosition

// uint32 line_number = 1;
inline void SourcePosition::clear_line_number() {
  line_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourcePosition::line_number() const {
  // @@protoc_insertion_point(field_get:aapt.pb.SourcePosition.line_number)
  return line_number_;
}
inline void SourcePosition::set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  line_number_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.SourcePosition.line_number)
}

// uint32 column_number = 2;
inline void SourcePosition::clear_column_number() {
  column_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourcePosition::column_number() const {
  // @@protoc_insertion_point(field_get:aapt.pb.SourcePosition.column_number)
  return column_number_;
}
inline void SourcePosition::set_column_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  column_number_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.SourcePosition.column_number)
}

// -------------------------------------------------------------------

// Source

// uint32 path_idx = 1;
inline void Source::clear_path_idx() {
  path_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Source::path_idx() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Source.path_idx)
  return path_idx_;
}
inline void Source::set_path_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  path_idx_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Source.path_idx)
}

// .aapt.pb.SourcePosition position = 2;
inline bool Source::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void Source::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::aapt::pb::SourcePosition& Source::position() const {
  const ::aapt::pb::SourcePosition* p = position_;
  // @@protoc_insertion_point(field_get:aapt.pb.Source.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::SourcePosition*>(
      &::aapt::pb::_SourcePosition_default_instance_);
}
inline ::aapt::pb::SourcePosition* Source::release_position() {
  // @@protoc_insertion_point(field_release:aapt.pb.Source.position)
  
  ::aapt::pb::SourcePosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::aapt::pb::SourcePosition* Source::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::SourcePosition>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Source.position)
  return position_;
}
inline void Source::set_allocated_position(::aapt::pb::SourcePosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Source.position)
}

// -------------------------------------------------------------------

// ToolFingerprint

// string tool = 1;
inline void ToolFingerprint::clear_tool() {
  tool_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ToolFingerprint::tool() const {
  // @@protoc_insertion_point(field_get:aapt.pb.ToolFingerprint.tool)
  return tool_.GetNoArena();
}
inline void ToolFingerprint::set_tool(const std::string& value) {
  
  tool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.ToolFingerprint.tool)
}
inline void ToolFingerprint::set_tool(std::string&& value) {
  
  tool_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.ToolFingerprint.tool)
}
inline void ToolFingerprint::set_tool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.ToolFingerprint.tool)
}
inline void ToolFingerprint::set_tool(const char* value, size_t size) {
  
  tool_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.ToolFingerprint.tool)
}
inline std::string* ToolFingerprint::mutable_tool() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.ToolFingerprint.tool)
  return tool_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ToolFingerprint::release_tool() {
  // @@protoc_insertion_point(field_release:aapt.pb.ToolFingerprint.tool)
  
  return tool_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ToolFingerprint::set_allocated_tool(std::string* tool) {
  if (tool != nullptr) {
    
  } else {
    
  }
  tool_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tool);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.ToolFingerprint.tool)
}

// string version = 2;
inline void ToolFingerprint::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ToolFingerprint::version() const {
  // @@protoc_insertion_point(field_get:aapt.pb.ToolFingerprint.version)
  return version_.GetNoArena();
}
inline void ToolFingerprint::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.ToolFingerprint.version)
}
inline void ToolFingerprint::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.ToolFingerprint.version)
}
inline void ToolFingerprint::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.ToolFingerprint.version)
}
inline void ToolFingerprint::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.ToolFingerprint.version)
}
inline std::string* ToolFingerprint::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.ToolFingerprint.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ToolFingerprint::release_version() {
  // @@protoc_insertion_point(field_release:aapt.pb.ToolFingerprint.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ToolFingerprint::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.ToolFingerprint.version)
}

// -------------------------------------------------------------------

// ResourceTable

// .aapt.pb.StringPool source_pool = 1;
inline bool ResourceTable::has_source_pool() const {
  return this != internal_default_instance() && source_pool_ != nullptr;
}
inline void ResourceTable::clear_source_pool() {
  if (GetArenaNoVirtual() == nullptr && source_pool_ != nullptr) {
    delete source_pool_;
  }
  source_pool_ = nullptr;
}
inline const ::aapt::pb::StringPool& ResourceTable::source_pool() const {
  const ::aapt::pb::StringPool* p = source_pool_;
  // @@protoc_insertion_point(field_get:aapt.pb.ResourceTable.source_pool)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::StringPool*>(
      &::aapt::pb::_StringPool_default_instance_);
}
inline ::aapt::pb::StringPool* ResourceTable::release_source_pool() {
  // @@protoc_insertion_point(field_release:aapt.pb.ResourceTable.source_pool)
  
  ::aapt::pb::StringPool* temp = source_pool_;
  source_pool_ = nullptr;
  return temp;
}
inline ::aapt::pb::StringPool* ResourceTable::mutable_source_pool() {
  
  if (source_pool_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::StringPool>(GetArenaNoVirtual());
    source_pool_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.ResourceTable.source_pool)
  return source_pool_;
}
inline void ResourceTable::set_allocated_source_pool(::aapt::pb::StringPool* source_pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_pool_;
  }
  if (source_pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_pool, submessage_arena);
    }
    
  } else {
    
  }
  source_pool_ = source_pool;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.ResourceTable.source_pool)
}

// repeated .aapt.pb.Package package = 2;
inline int ResourceTable::package_size() const {
  return package_.size();
}
inline void ResourceTable::clear_package() {
  package_.Clear();
}
inline ::aapt::pb::Package* ResourceTable::mutable_package(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.ResourceTable.package)
  return package_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Package >*
ResourceTable::mutable_package() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.ResourceTable.package)
  return &package_;
}
inline const ::aapt::pb::Package& ResourceTable::package(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.ResourceTable.package)
  return package_.Get(index);
}
inline ::aapt::pb::Package* ResourceTable::add_package() {
  // @@protoc_insertion_point(field_add:aapt.pb.ResourceTable.package)
  return package_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Package >&
ResourceTable::package() const {
  // @@protoc_insertion_point(field_list:aapt.pb.ResourceTable.package)
  return package_;
}

// repeated .aapt.pb.Overlayable overlayable = 3;
inline int ResourceTable::overlayable_size() const {
  return overlayable_.size();
}
inline void ResourceTable::clear_overlayable() {
  overlayable_.Clear();
}
inline ::aapt::pb::Overlayable* ResourceTable::mutable_overlayable(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.ResourceTable.overlayable)
  return overlayable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Overlayable >*
ResourceTable::mutable_overlayable() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.ResourceTable.overlayable)
  return &overlayable_;
}
inline const ::aapt::pb::Overlayable& ResourceTable::overlayable(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.ResourceTable.overlayable)
  return overlayable_.Get(index);
}
inline ::aapt::pb::Overlayable* ResourceTable::add_overlayable() {
  // @@protoc_insertion_point(field_add:aapt.pb.ResourceTable.overlayable)
  return overlayable_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Overlayable >&
ResourceTable::overlayable() const {
  // @@protoc_insertion_point(field_list:aapt.pb.ResourceTable.overlayable)
  return overlayable_;
}

// repeated .aapt.pb.ToolFingerprint tool_fingerprint = 4;
inline int ResourceTable::tool_fingerprint_size() const {
  return tool_fingerprint_.size();
}
inline void ResourceTable::clear_tool_fingerprint() {
  tool_fingerprint_.Clear();
}
inline ::aapt::pb::ToolFingerprint* ResourceTable::mutable_tool_fingerprint(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.ResourceTable.tool_fingerprint)
  return tool_fingerprint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ToolFingerprint >*
ResourceTable::mutable_tool_fingerprint() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.ResourceTable.tool_fingerprint)
  return &tool_fingerprint_;
}
inline const ::aapt::pb::ToolFingerprint& ResourceTable::tool_fingerprint(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.ResourceTable.tool_fingerprint)
  return tool_fingerprint_.Get(index);
}
inline ::aapt::pb::ToolFingerprint* ResourceTable::add_tool_fingerprint() {
  // @@protoc_insertion_point(field_add:aapt.pb.ResourceTable.tool_fingerprint)
  return tool_fingerprint_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ToolFingerprint >&
ResourceTable::tool_fingerprint() const {
  // @@protoc_insertion_point(field_list:aapt.pb.ResourceTable.tool_fingerprint)
  return tool_fingerprint_;
}

// -------------------------------------------------------------------

// PackageId

// uint32 id = 1;
inline void PackageId::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PackageId::id() const {
  // @@protoc_insertion_point(field_get:aapt.pb.PackageId.id)
  return id_;
}
inline void PackageId::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.PackageId.id)
}

// -------------------------------------------------------------------

// Package

// .aapt.pb.PackageId package_id = 1;
inline bool Package::has_package_id() const {
  return this != internal_default_instance() && package_id_ != nullptr;
}
inline void Package::clear_package_id() {
  if (GetArenaNoVirtual() == nullptr && package_id_ != nullptr) {
    delete package_id_;
  }
  package_id_ = nullptr;
}
inline const ::aapt::pb::PackageId& Package::package_id() const {
  const ::aapt::pb::PackageId* p = package_id_;
  // @@protoc_insertion_point(field_get:aapt.pb.Package.package_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::PackageId*>(
      &::aapt::pb::_PackageId_default_instance_);
}
inline ::aapt::pb::PackageId* Package::release_package_id() {
  // @@protoc_insertion_point(field_release:aapt.pb.Package.package_id)
  
  ::aapt::pb::PackageId* temp = package_id_;
  package_id_ = nullptr;
  return temp;
}
inline ::aapt::pb::PackageId* Package::mutable_package_id() {
  
  if (package_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::PackageId>(GetArenaNoVirtual());
    package_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Package.package_id)
  return package_id_;
}
inline void Package::set_allocated_package_id(::aapt::pb::PackageId* package_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete package_id_;
  }
  if (package_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      package_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package_id, submessage_arena);
    }
    
  } else {
    
  }
  package_id_ = package_id;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Package.package_id)
}

// string package_name = 2;
inline void Package::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Package::package_name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Package.package_name)
  return package_name_.GetNoArena();
}
inline void Package::set_package_name(const std::string& value) {
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Package.package_name)
}
inline void Package::set_package_name(std::string&& value) {
  
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Package.package_name)
}
inline void Package::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Package.package_name)
}
inline void Package::set_package_name(const char* value, size_t size) {
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Package.package_name)
}
inline std::string* Package::mutable_package_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Package.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Package::release_package_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.Package.package_name)
  
  return package_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Package::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    
  } else {
    
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Package.package_name)
}

// repeated .aapt.pb.Type type = 3;
inline int Package::type_size() const {
  return type_.size();
}
inline void Package::clear_type() {
  type_.Clear();
}
inline ::aapt::pb::Type* Package::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.Package.type)
  return type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Type >*
Package::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.Package.type)
  return &type_;
}
inline const ::aapt::pb::Type& Package::type(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.Package.type)
  return type_.Get(index);
}
inline ::aapt::pb::Type* Package::add_type() {
  // @@protoc_insertion_point(field_add:aapt.pb.Package.type)
  return type_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Type >&
Package::type() const {
  // @@protoc_insertion_point(field_list:aapt.pb.Package.type)
  return type_;
}

// -------------------------------------------------------------------

// TypeId

// uint32 id = 1;
inline void TypeId::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TypeId::id() const {
  // @@protoc_insertion_point(field_get:aapt.pb.TypeId.id)
  return id_;
}
inline void TypeId::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.TypeId.id)
}

// -------------------------------------------------------------------

// Type

// .aapt.pb.TypeId type_id = 1;
inline bool Type::has_type_id() const {
  return this != internal_default_instance() && type_id_ != nullptr;
}
inline void Type::clear_type_id() {
  if (GetArenaNoVirtual() == nullptr && type_id_ != nullptr) {
    delete type_id_;
  }
  type_id_ = nullptr;
}
inline const ::aapt::pb::TypeId& Type::type_id() const {
  const ::aapt::pb::TypeId* p = type_id_;
  // @@protoc_insertion_point(field_get:aapt.pb.Type.type_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::TypeId*>(
      &::aapt::pb::_TypeId_default_instance_);
}
inline ::aapt::pb::TypeId* Type::release_type_id() {
  // @@protoc_insertion_point(field_release:aapt.pb.Type.type_id)
  
  ::aapt::pb::TypeId* temp = type_id_;
  type_id_ = nullptr;
  return temp;
}
inline ::aapt::pb::TypeId* Type::mutable_type_id() {
  
  if (type_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::TypeId>(GetArenaNoVirtual());
    type_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Type.type_id)
  return type_id_;
}
inline void Type::set_allocated_type_id(::aapt::pb::TypeId* type_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_id_;
  }
  if (type_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_id, submessage_arena);
    }
    
  } else {
    
  }
  type_id_ = type_id;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Type.type_id)
}

// string name = 2;
inline void Type::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Type::name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Type.name)
  return name_.GetNoArena();
}
inline void Type::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Type.name)
}
inline void Type::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Type.name)
}
inline void Type::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Type.name)
}
inline void Type::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Type.name)
}
inline std::string* Type::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Type.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Type::release_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.Type.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Type::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Type.name)
}

// repeated .aapt.pb.Entry entry = 3;
inline int Type::entry_size() const {
  return entry_.size();
}
inline void Type::clear_entry() {
  entry_.Clear();
}
inline ::aapt::pb::Entry* Type::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.Type.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Entry >*
Type::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.Type.entry)
  return &entry_;
}
inline const ::aapt::pb::Entry& Type::entry(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.Type.entry)
  return entry_.Get(index);
}
inline ::aapt::pb::Entry* Type::add_entry() {
  // @@protoc_insertion_point(field_add:aapt.pb.Type.entry)
  return entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Entry >&
Type::entry() const {
  // @@protoc_insertion_point(field_list:aapt.pb.Type.entry)
  return entry_;
}

// -------------------------------------------------------------------

// Visibility

// .aapt.pb.Visibility.Level level = 1;
inline void Visibility::clear_level() {
  level_ = 0;
}
inline ::aapt::pb::Visibility_Level Visibility::level() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Visibility.level)
  return static_cast< ::aapt::pb::Visibility_Level >(level_);
}
inline void Visibility::set_level(::aapt::pb::Visibility_Level value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Visibility.level)
}

// .aapt.pb.Source source = 2;
inline bool Visibility::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void Visibility::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& Visibility::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Visibility.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Visibility::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Visibility.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Visibility::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Visibility.source)
  return source_;
}
inline void Visibility::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Visibility.source)
}

// string comment = 3;
inline void Visibility::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Visibility::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Visibility.comment)
  return comment_.GetNoArena();
}
inline void Visibility::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Visibility.comment)
}
inline void Visibility::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Visibility.comment)
}
inline void Visibility::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Visibility.comment)
}
inline void Visibility::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Visibility.comment)
}
inline std::string* Visibility::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Visibility.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Visibility::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.Visibility.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Visibility::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Visibility.comment)
}

// bool staged_api = 4;
inline void Visibility::clear_staged_api() {
  staged_api_ = false;
}
inline bool Visibility::staged_api() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Visibility.staged_api)
  return staged_api_;
}
inline void Visibility::set_staged_api(bool value) {
  
  staged_api_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Visibility.staged_api)
}

// -------------------------------------------------------------------

// AllowNew

// .aapt.pb.Source source = 1;
inline bool AllowNew::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void AllowNew::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& AllowNew::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.AllowNew.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* AllowNew::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.AllowNew.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* AllowNew::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.AllowNew.source)
  return source_;
}
inline void AllowNew::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.AllowNew.source)
}

// string comment = 2;
inline void AllowNew::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AllowNew::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.AllowNew.comment)
  return comment_.GetNoArena();
}
inline void AllowNew::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.AllowNew.comment)
}
inline void AllowNew::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.AllowNew.comment)
}
inline void AllowNew::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.AllowNew.comment)
}
inline void AllowNew::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.AllowNew.comment)
}
inline std::string* AllowNew::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.AllowNew.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AllowNew::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.AllowNew.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AllowNew::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.AllowNew.comment)
}

// -------------------------------------------------------------------

// Overlayable

// string name = 1;
inline void Overlayable::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Overlayable::name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Overlayable.name)
  return name_.GetNoArena();
}
inline void Overlayable::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Overlayable.name)
}
inline void Overlayable::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Overlayable.name)
}
inline void Overlayable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Overlayable.name)
}
inline void Overlayable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Overlayable.name)
}
inline std::string* Overlayable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Overlayable.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Overlayable::release_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.Overlayable.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Overlayable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Overlayable.name)
}

// .aapt.pb.Source source = 2;
inline bool Overlayable::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void Overlayable::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& Overlayable::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Overlayable.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Overlayable::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Overlayable.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Overlayable::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Overlayable.source)
  return source_;
}
inline void Overlayable::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Overlayable.source)
}

// string actor = 3;
inline void Overlayable::clear_actor() {
  actor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Overlayable::actor() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Overlayable.actor)
  return actor_.GetNoArena();
}
inline void Overlayable::set_actor(const std::string& value) {
  
  actor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Overlayable.actor)
}
inline void Overlayable::set_actor(std::string&& value) {
  
  actor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Overlayable.actor)
}
inline void Overlayable::set_actor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Overlayable.actor)
}
inline void Overlayable::set_actor(const char* value, size_t size) {
  
  actor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Overlayable.actor)
}
inline std::string* Overlayable::mutable_actor() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Overlayable.actor)
  return actor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Overlayable::release_actor() {
  // @@protoc_insertion_point(field_release:aapt.pb.Overlayable.actor)
  
  return actor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Overlayable::set_allocated_actor(std::string* actor) {
  if (actor != nullptr) {
    
  } else {
    
  }
  actor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Overlayable.actor)
}

// -------------------------------------------------------------------

// OverlayableItem

// .aapt.pb.Source source = 1;
inline bool OverlayableItem::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void OverlayableItem::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& OverlayableItem::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.OverlayableItem.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* OverlayableItem::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.OverlayableItem.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* OverlayableItem::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.OverlayableItem.source)
  return source_;
}
inline void OverlayableItem::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.OverlayableItem.source)
}

// string comment = 2;
inline void OverlayableItem::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OverlayableItem::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.OverlayableItem.comment)
  return comment_.GetNoArena();
}
inline void OverlayableItem::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.OverlayableItem.comment)
}
inline void OverlayableItem::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.OverlayableItem.comment)
}
inline void OverlayableItem::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.OverlayableItem.comment)
}
inline void OverlayableItem::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.OverlayableItem.comment)
}
inline std::string* OverlayableItem::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.OverlayableItem.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OverlayableItem::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.OverlayableItem.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OverlayableItem::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.OverlayableItem.comment)
}

// repeated .aapt.pb.OverlayableItem.Policy policy = 3;
inline int OverlayableItem::policy_size() const {
  return policy_.size();
}
inline void OverlayableItem::clear_policy() {
  policy_.Clear();
}
inline ::aapt::pb::OverlayableItem_Policy OverlayableItem::policy(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.OverlayableItem.policy)
  return static_cast< ::aapt::pb::OverlayableItem_Policy >(policy_.Get(index));
}
inline void OverlayableItem::set_policy(int index, ::aapt::pb::OverlayableItem_Policy value) {
  policy_.Set(index, value);
  // @@protoc_insertion_point(field_set:aapt.pb.OverlayableItem.policy)
}
inline void OverlayableItem::add_policy(::aapt::pb::OverlayableItem_Policy value) {
  policy_.Add(value);
  // @@protoc_insertion_point(field_add:aapt.pb.OverlayableItem.policy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
OverlayableItem::policy() const {
  // @@protoc_insertion_point(field_list:aapt.pb.OverlayableItem.policy)
  return policy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
OverlayableItem::mutable_policy() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.OverlayableItem.policy)
  return &policy_;
}

// uint32 overlayable_idx = 4;
inline void OverlayableItem::clear_overlayable_idx() {
  overlayable_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OverlayableItem::overlayable_idx() const {
  // @@protoc_insertion_point(field_get:aapt.pb.OverlayableItem.overlayable_idx)
  return overlayable_idx_;
}
inline void OverlayableItem::set_overlayable_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  overlayable_idx_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.OverlayableItem.overlayable_idx)
}

// -------------------------------------------------------------------

// StagedId

// .aapt.pb.Source source = 1;
inline bool StagedId::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void StagedId::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& StagedId::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.StagedId.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* StagedId::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.StagedId.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* StagedId::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.StagedId.source)
  return source_;
}
inline void StagedId::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.StagedId.source)
}

// uint32 staged_id = 2;
inline void StagedId::clear_staged_id() {
  staged_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StagedId::staged_id() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StagedId.staged_id)
  return staged_id_;
}
inline void StagedId::set_staged_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  staged_id_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.StagedId.staged_id)
}

// -------------------------------------------------------------------

// EntryId

// uint32 id = 1;
inline void EntryId::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EntryId::id() const {
  // @@protoc_insertion_point(field_get:aapt.pb.EntryId.id)
  return id_;
}
inline void EntryId::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.EntryId.id)
}

// -------------------------------------------------------------------

// Entry

// .aapt.pb.EntryId entry_id = 1;
inline bool Entry::has_entry_id() const {
  return this != internal_default_instance() && entry_id_ != nullptr;
}
inline void Entry::clear_entry_id() {
  if (GetArenaNoVirtual() == nullptr && entry_id_ != nullptr) {
    delete entry_id_;
  }
  entry_id_ = nullptr;
}
inline const ::aapt::pb::EntryId& Entry::entry_id() const {
  const ::aapt::pb::EntryId* p = entry_id_;
  // @@protoc_insertion_point(field_get:aapt.pb.Entry.entry_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::EntryId*>(
      &::aapt::pb::_EntryId_default_instance_);
}
inline ::aapt::pb::EntryId* Entry::release_entry_id() {
  // @@protoc_insertion_point(field_release:aapt.pb.Entry.entry_id)
  
  ::aapt::pb::EntryId* temp = entry_id_;
  entry_id_ = nullptr;
  return temp;
}
inline ::aapt::pb::EntryId* Entry::mutable_entry_id() {
  
  if (entry_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::EntryId>(GetArenaNoVirtual());
    entry_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Entry.entry_id)
  return entry_id_;
}
inline void Entry::set_allocated_entry_id(::aapt::pb::EntryId* entry_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete entry_id_;
  }
  if (entry_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      entry_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry_id, submessage_arena);
    }
    
  } else {
    
  }
  entry_id_ = entry_id;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Entry.entry_id)
}

// string name = 2;
inline void Entry::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Entry.name)
  return name_.GetNoArena();
}
inline void Entry::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Entry.name)
}
inline void Entry::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Entry.name)
}
inline void Entry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Entry.name)
}
inline void Entry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Entry.name)
}
inline std::string* Entry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Entry.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.Entry.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Entry.name)
}

// .aapt.pb.Visibility visibility = 3;
inline bool Entry::has_visibility() const {
  return this != internal_default_instance() && visibility_ != nullptr;
}
inline void Entry::clear_visibility() {
  if (GetArenaNoVirtual() == nullptr && visibility_ != nullptr) {
    delete visibility_;
  }
  visibility_ = nullptr;
}
inline const ::aapt::pb::Visibility& Entry::visibility() const {
  const ::aapt::pb::Visibility* p = visibility_;
  // @@protoc_insertion_point(field_get:aapt.pb.Entry.visibility)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Visibility*>(
      &::aapt::pb::_Visibility_default_instance_);
}
inline ::aapt::pb::Visibility* Entry::release_visibility() {
  // @@protoc_insertion_point(field_release:aapt.pb.Entry.visibility)
  
  ::aapt::pb::Visibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::aapt::pb::Visibility* Entry::mutable_visibility() {
  
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Visibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Entry.visibility)
  return visibility_;
}
inline void Entry::set_allocated_visibility(::aapt::pb::Visibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    
  } else {
    
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Entry.visibility)
}

// .aapt.pb.AllowNew allow_new = 4;
inline bool Entry::has_allow_new() const {
  return this != internal_default_instance() && allow_new_ != nullptr;
}
inline void Entry::clear_allow_new() {
  if (GetArenaNoVirtual() == nullptr && allow_new_ != nullptr) {
    delete allow_new_;
  }
  allow_new_ = nullptr;
}
inline const ::aapt::pb::AllowNew& Entry::allow_new() const {
  const ::aapt::pb::AllowNew* p = allow_new_;
  // @@protoc_insertion_point(field_get:aapt.pb.Entry.allow_new)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::AllowNew*>(
      &::aapt::pb::_AllowNew_default_instance_);
}
inline ::aapt::pb::AllowNew* Entry::release_allow_new() {
  // @@protoc_insertion_point(field_release:aapt.pb.Entry.allow_new)
  
  ::aapt::pb::AllowNew* temp = allow_new_;
  allow_new_ = nullptr;
  return temp;
}
inline ::aapt::pb::AllowNew* Entry::mutable_allow_new() {
  
  if (allow_new_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::AllowNew>(GetArenaNoVirtual());
    allow_new_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Entry.allow_new)
  return allow_new_;
}
inline void Entry::set_allocated_allow_new(::aapt::pb::AllowNew* allow_new) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete allow_new_;
  }
  if (allow_new) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allow_new = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_new, submessage_arena);
    }
    
  } else {
    
  }
  allow_new_ = allow_new;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Entry.allow_new)
}

// .aapt.pb.OverlayableItem overlayable_item = 5;
inline bool Entry::has_overlayable_item() const {
  return this != internal_default_instance() && overlayable_item_ != nullptr;
}
inline void Entry::clear_overlayable_item() {
  if (GetArenaNoVirtual() == nullptr && overlayable_item_ != nullptr) {
    delete overlayable_item_;
  }
  overlayable_item_ = nullptr;
}
inline const ::aapt::pb::OverlayableItem& Entry::overlayable_item() const {
  const ::aapt::pb::OverlayableItem* p = overlayable_item_;
  // @@protoc_insertion_point(field_get:aapt.pb.Entry.overlayable_item)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::OverlayableItem*>(
      &::aapt::pb::_OverlayableItem_default_instance_);
}
inline ::aapt::pb::OverlayableItem* Entry::release_overlayable_item() {
  // @@protoc_insertion_point(field_release:aapt.pb.Entry.overlayable_item)
  
  ::aapt::pb::OverlayableItem* temp = overlayable_item_;
  overlayable_item_ = nullptr;
  return temp;
}
inline ::aapt::pb::OverlayableItem* Entry::mutable_overlayable_item() {
  
  if (overlayable_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::OverlayableItem>(GetArenaNoVirtual());
    overlayable_item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Entry.overlayable_item)
  return overlayable_item_;
}
inline void Entry::set_allocated_overlayable_item(::aapt::pb::OverlayableItem* overlayable_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete overlayable_item_;
  }
  if (overlayable_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overlayable_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlayable_item, submessage_arena);
    }
    
  } else {
    
  }
  overlayable_item_ = overlayable_item;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Entry.overlayable_item)
}

// repeated .aapt.pb.ConfigValue config_value = 6;
inline int Entry::config_value_size() const {
  return config_value_.size();
}
inline void Entry::clear_config_value() {
  config_value_.Clear();
}
inline ::aapt::pb::ConfigValue* Entry::mutable_config_value(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.Entry.config_value)
  return config_value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ConfigValue >*
Entry::mutable_config_value() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.Entry.config_value)
  return &config_value_;
}
inline const ::aapt::pb::ConfigValue& Entry::config_value(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.Entry.config_value)
  return config_value_.Get(index);
}
inline ::aapt::pb::ConfigValue* Entry::add_config_value() {
  // @@protoc_insertion_point(field_add:aapt.pb.Entry.config_value)
  return config_value_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::ConfigValue >&
Entry::config_value() const {
  // @@protoc_insertion_point(field_list:aapt.pb.Entry.config_value)
  return config_value_;
}

// .aapt.pb.StagedId staged_id = 7;
inline bool Entry::has_staged_id() const {
  return this != internal_default_instance() && staged_id_ != nullptr;
}
inline void Entry::clear_staged_id() {
  if (GetArenaNoVirtual() == nullptr && staged_id_ != nullptr) {
    delete staged_id_;
  }
  staged_id_ = nullptr;
}
inline const ::aapt::pb::StagedId& Entry::staged_id() const {
  const ::aapt::pb::StagedId* p = staged_id_;
  // @@protoc_insertion_point(field_get:aapt.pb.Entry.staged_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::StagedId*>(
      &::aapt::pb::_StagedId_default_instance_);
}
inline ::aapt::pb::StagedId* Entry::release_staged_id() {
  // @@protoc_insertion_point(field_release:aapt.pb.Entry.staged_id)
  
  ::aapt::pb::StagedId* temp = staged_id_;
  staged_id_ = nullptr;
  return temp;
}
inline ::aapt::pb::StagedId* Entry::mutable_staged_id() {
  
  if (staged_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::StagedId>(GetArenaNoVirtual());
    staged_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Entry.staged_id)
  return staged_id_;
}
inline void Entry::set_allocated_staged_id(::aapt::pb::StagedId* staged_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete staged_id_;
  }
  if (staged_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      staged_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staged_id, submessage_arena);
    }
    
  } else {
    
  }
  staged_id_ = staged_id;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Entry.staged_id)
}

// -------------------------------------------------------------------

// ConfigValue

// .aapt.pb.Configuration config = 1;
inline bool ConfigValue::has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline const ::aapt::pb::Configuration& ConfigValue::config() const {
  const ::aapt::pb::Configuration* p = config_;
  // @@protoc_insertion_point(field_get:aapt.pb.ConfigValue.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Configuration*>(
      &::aapt::pb::_Configuration_default_instance_);
}
inline ::aapt::pb::Configuration* ConfigValue::release_config() {
  // @@protoc_insertion_point(field_release:aapt.pb.ConfigValue.config)
  
  ::aapt::pb::Configuration* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::aapt::pb::Configuration* ConfigValue::mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Configuration>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.ConfigValue.config)
  return config_;
}
inline void ConfigValue::set_allocated_config(::aapt::pb::Configuration* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.ConfigValue.config)
}

// .aapt.pb.Value value = 2;
inline bool ConfigValue::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline void ConfigValue::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::aapt::pb::Value& ConfigValue::value() const {
  const ::aapt::pb::Value* p = value_;
  // @@protoc_insertion_point(field_get:aapt.pb.ConfigValue.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Value*>(
      &::aapt::pb::_Value_default_instance_);
}
inline ::aapt::pb::Value* ConfigValue::release_value() {
  // @@protoc_insertion_point(field_release:aapt.pb.ConfigValue.value)
  
  ::aapt::pb::Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::aapt::pb::Value* ConfigValue::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.ConfigValue.value)
  return value_;
}
inline void ConfigValue::set_allocated_value(::aapt::pb::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.ConfigValue.value)
}

// -------------------------------------------------------------------

// Value

// .aapt.pb.Source source = 1;
inline bool Value::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void Value::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& Value::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Value.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Value::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Value.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Value::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Value.source)
  return source_;
}
inline void Value::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Value.source)
}

// string comment = 2;
inline void Value::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Value::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Value.comment)
  return comment_.GetNoArena();
}
inline void Value::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Value.comment)
}
inline void Value::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Value.comment)
}
inline void Value::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Value.comment)
}
inline void Value::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Value.comment)
}
inline std::string* Value::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Value.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Value::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.Value.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Value.comment)
}

// bool weak = 3;
inline void Value::clear_weak() {
  weak_ = false;
}
inline bool Value::weak() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Value.weak)
  return weak_;
}
inline void Value::set_weak(bool value) {
  
  weak_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Value.weak)
}

// .aapt.pb.Item item = 4;
inline bool Value::has_item() const {
  return value_case() == kItem;
}
inline void Value::set_has_item() {
  _oneof_case_[0] = kItem;
}
inline void Value::clear_item() {
  if (has_item()) {
    delete value_.item_;
    clear_has_value();
  }
}
inline ::aapt::pb::Item* Value::release_item() {
  // @@protoc_insertion_point(field_release:aapt.pb.Value.item)
  if (has_item()) {
    clear_has_value();
      ::aapt::pb::Item* temp = value_.item_;
    value_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Item& Value::item() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Value.item)
  return has_item()
      ? *value_.item_
      : *reinterpret_cast< ::aapt::pb::Item*>(&::aapt::pb::_Item_default_instance_);
}
inline ::aapt::pb::Item* Value::mutable_item() {
  if (!has_item()) {
    clear_value();
    set_has_item();
    value_.item_ = CreateMaybeMessage< ::aapt::pb::Item >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Value.item)
  return value_.item_;
}

// .aapt.pb.CompoundValue compound_value = 5;
inline bool Value::has_compound_value() const {
  return value_case() == kCompoundValue;
}
inline void Value::set_has_compound_value() {
  _oneof_case_[0] = kCompoundValue;
}
inline void Value::clear_compound_value() {
  if (has_compound_value()) {
    delete value_.compound_value_;
    clear_has_value();
  }
}
inline ::aapt::pb::CompoundValue* Value::release_compound_value() {
  // @@protoc_insertion_point(field_release:aapt.pb.Value.compound_value)
  if (has_compound_value()) {
    clear_has_value();
      ::aapt::pb::CompoundValue* temp = value_.compound_value_;
    value_.compound_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::CompoundValue& Value::compound_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Value.compound_value)
  return has_compound_value()
      ? *value_.compound_value_
      : *reinterpret_cast< ::aapt::pb::CompoundValue*>(&::aapt::pb::_CompoundValue_default_instance_);
}
inline ::aapt::pb::CompoundValue* Value::mutable_compound_value() {
  if (!has_compound_value()) {
    clear_value();
    set_has_compound_value();
    value_.compound_value_ = CreateMaybeMessage< ::aapt::pb::CompoundValue >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Value.compound_value)
  return value_.compound_value_;
}

inline bool Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Value::ValueCase Value::value_case() const {
  return Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Item

// .aapt.pb.Reference ref = 1;
inline bool Item::has_ref() const {
  return value_case() == kRef;
}
inline void Item::set_has_ref() {
  _oneof_case_[0] = kRef;
}
inline void Item::clear_ref() {
  if (has_ref()) {
    delete value_.ref_;
    clear_has_value();
  }
}
inline ::aapt::pb::Reference* Item::release_ref() {
  // @@protoc_insertion_point(field_release:aapt.pb.Item.ref)
  if (has_ref()) {
    clear_has_value();
      ::aapt::pb::Reference* temp = value_.ref_;
    value_.ref_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Reference& Item::ref() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Item.ref)
  return has_ref()
      ? *value_.ref_
      : *reinterpret_cast< ::aapt::pb::Reference*>(&::aapt::pb::_Reference_default_instance_);
}
inline ::aapt::pb::Reference* Item::mutable_ref() {
  if (!has_ref()) {
    clear_value();
    set_has_ref();
    value_.ref_ = CreateMaybeMessage< ::aapt::pb::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Item.ref)
  return value_.ref_;
}

// .aapt.pb.String str = 2;
inline bool Item::has_str() const {
  return value_case() == kStr;
}
inline void Item::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void Item::clear_str() {
  if (has_str()) {
    delete value_.str_;
    clear_has_value();
  }
}
inline ::aapt::pb::String* Item::release_str() {
  // @@protoc_insertion_point(field_release:aapt.pb.Item.str)
  if (has_str()) {
    clear_has_value();
      ::aapt::pb::String* temp = value_.str_;
    value_.str_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::String& Item::str() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Item.str)
  return has_str()
      ? *value_.str_
      : *reinterpret_cast< ::aapt::pb::String*>(&::aapt::pb::_String_default_instance_);
}
inline ::aapt::pb::String* Item::mutable_str() {
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_ = CreateMaybeMessage< ::aapt::pb::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Item.str)
  return value_.str_;
}

// .aapt.pb.RawString raw_str = 3;
inline bool Item::has_raw_str() const {
  return value_case() == kRawStr;
}
inline void Item::set_has_raw_str() {
  _oneof_case_[0] = kRawStr;
}
inline void Item::clear_raw_str() {
  if (has_raw_str()) {
    delete value_.raw_str_;
    clear_has_value();
  }
}
inline ::aapt::pb::RawString* Item::release_raw_str() {
  // @@protoc_insertion_point(field_release:aapt.pb.Item.raw_str)
  if (has_raw_str()) {
    clear_has_value();
      ::aapt::pb::RawString* temp = value_.raw_str_;
    value_.raw_str_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::RawString& Item::raw_str() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Item.raw_str)
  return has_raw_str()
      ? *value_.raw_str_
      : *reinterpret_cast< ::aapt::pb::RawString*>(&::aapt::pb::_RawString_default_instance_);
}
inline ::aapt::pb::RawString* Item::mutable_raw_str() {
  if (!has_raw_str()) {
    clear_value();
    set_has_raw_str();
    value_.raw_str_ = CreateMaybeMessage< ::aapt::pb::RawString >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Item.raw_str)
  return value_.raw_str_;
}

// .aapt.pb.StyledString styled_str = 4;
inline bool Item::has_styled_str() const {
  return value_case() == kStyledStr;
}
inline void Item::set_has_styled_str() {
  _oneof_case_[0] = kStyledStr;
}
inline void Item::clear_styled_str() {
  if (has_styled_str()) {
    delete value_.styled_str_;
    clear_has_value();
  }
}
inline ::aapt::pb::StyledString* Item::release_styled_str() {
  // @@protoc_insertion_point(field_release:aapt.pb.Item.styled_str)
  if (has_styled_str()) {
    clear_has_value();
      ::aapt::pb::StyledString* temp = value_.styled_str_;
    value_.styled_str_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::StyledString& Item::styled_str() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Item.styled_str)
  return has_styled_str()
      ? *value_.styled_str_
      : *reinterpret_cast< ::aapt::pb::StyledString*>(&::aapt::pb::_StyledString_default_instance_);
}
inline ::aapt::pb::StyledString* Item::mutable_styled_str() {
  if (!has_styled_str()) {
    clear_value();
    set_has_styled_str();
    value_.styled_str_ = CreateMaybeMessage< ::aapt::pb::StyledString >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Item.styled_str)
  return value_.styled_str_;
}

// .aapt.pb.FileReference file = 5;
inline bool Item::has_file() const {
  return value_case() == kFile;
}
inline void Item::set_has_file() {
  _oneof_case_[0] = kFile;
}
inline void Item::clear_file() {
  if (has_file()) {
    delete value_.file_;
    clear_has_value();
  }
}
inline ::aapt::pb::FileReference* Item::release_file() {
  // @@protoc_insertion_point(field_release:aapt.pb.Item.file)
  if (has_file()) {
    clear_has_value();
      ::aapt::pb::FileReference* temp = value_.file_;
    value_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::FileReference& Item::file() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Item.file)
  return has_file()
      ? *value_.file_
      : *reinterpret_cast< ::aapt::pb::FileReference*>(&::aapt::pb::_FileReference_default_instance_);
}
inline ::aapt::pb::FileReference* Item::mutable_file() {
  if (!has_file()) {
    clear_value();
    set_has_file();
    value_.file_ = CreateMaybeMessage< ::aapt::pb::FileReference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Item.file)
  return value_.file_;
}

// .aapt.pb.Id id = 6;
inline bool Item::has_id() const {
  return value_case() == kId;
}
inline void Item::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void Item::clear_id() {
  if (has_id()) {
    delete value_.id_;
    clear_has_value();
  }
}
inline ::aapt::pb::Id* Item::release_id() {
  // @@protoc_insertion_point(field_release:aapt.pb.Item.id)
  if (has_id()) {
    clear_has_value();
      ::aapt::pb::Id* temp = value_.id_;
    value_.id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Id& Item::id() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Item.id)
  return has_id()
      ? *value_.id_
      : *reinterpret_cast< ::aapt::pb::Id*>(&::aapt::pb::_Id_default_instance_);
}
inline ::aapt::pb::Id* Item::mutable_id() {
  if (!has_id()) {
    clear_value();
    set_has_id();
    value_.id_ = CreateMaybeMessage< ::aapt::pb::Id >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Item.id)
  return value_.id_;
}

// .aapt.pb.Primitive prim = 7;
inline bool Item::has_prim() const {
  return value_case() == kPrim;
}
inline void Item::set_has_prim() {
  _oneof_case_[0] = kPrim;
}
inline void Item::clear_prim() {
  if (has_prim()) {
    delete value_.prim_;
    clear_has_value();
  }
}
inline ::aapt::pb::Primitive* Item::release_prim() {
  // @@protoc_insertion_point(field_release:aapt.pb.Item.prim)
  if (has_prim()) {
    clear_has_value();
      ::aapt::pb::Primitive* temp = value_.prim_;
    value_.prim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Primitive& Item::prim() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Item.prim)
  return has_prim()
      ? *value_.prim_
      : *reinterpret_cast< ::aapt::pb::Primitive*>(&::aapt::pb::_Primitive_default_instance_);
}
inline ::aapt::pb::Primitive* Item::mutable_prim() {
  if (!has_prim()) {
    clear_value();
    set_has_prim();
    value_.prim_ = CreateMaybeMessage< ::aapt::pb::Primitive >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Item.prim)
  return value_.prim_;
}

inline bool Item::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Item::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Item::ValueCase Item::value_case() const {
  return Item::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CompoundValue

// .aapt.pb.Attribute attr = 1;
inline bool CompoundValue::has_attr() const {
  return value_case() == kAttr;
}
inline void CompoundValue::set_has_attr() {
  _oneof_case_[0] = kAttr;
}
inline void CompoundValue::clear_attr() {
  if (has_attr()) {
    delete value_.attr_;
    clear_has_value();
  }
}
inline ::aapt::pb::Attribute* CompoundValue::release_attr() {
  // @@protoc_insertion_point(field_release:aapt.pb.CompoundValue.attr)
  if (has_attr()) {
    clear_has_value();
      ::aapt::pb::Attribute* temp = value_.attr_;
    value_.attr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Attribute& CompoundValue::attr() const {
  // @@protoc_insertion_point(field_get:aapt.pb.CompoundValue.attr)
  return has_attr()
      ? *value_.attr_
      : *reinterpret_cast< ::aapt::pb::Attribute*>(&::aapt::pb::_Attribute_default_instance_);
}
inline ::aapt::pb::Attribute* CompoundValue::mutable_attr() {
  if (!has_attr()) {
    clear_value();
    set_has_attr();
    value_.attr_ = CreateMaybeMessage< ::aapt::pb::Attribute >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.CompoundValue.attr)
  return value_.attr_;
}

// .aapt.pb.Style style = 2;
inline bool CompoundValue::has_style() const {
  return value_case() == kStyle;
}
inline void CompoundValue::set_has_style() {
  _oneof_case_[0] = kStyle;
}
inline void CompoundValue::clear_style() {
  if (has_style()) {
    delete value_.style_;
    clear_has_value();
  }
}
inline ::aapt::pb::Style* CompoundValue::release_style() {
  // @@protoc_insertion_point(field_release:aapt.pb.CompoundValue.style)
  if (has_style()) {
    clear_has_value();
      ::aapt::pb::Style* temp = value_.style_;
    value_.style_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Style& CompoundValue::style() const {
  // @@protoc_insertion_point(field_get:aapt.pb.CompoundValue.style)
  return has_style()
      ? *value_.style_
      : *reinterpret_cast< ::aapt::pb::Style*>(&::aapt::pb::_Style_default_instance_);
}
inline ::aapt::pb::Style* CompoundValue::mutable_style() {
  if (!has_style()) {
    clear_value();
    set_has_style();
    value_.style_ = CreateMaybeMessage< ::aapt::pb::Style >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.CompoundValue.style)
  return value_.style_;
}

// .aapt.pb.Styleable styleable = 3;
inline bool CompoundValue::has_styleable() const {
  return value_case() == kStyleable;
}
inline void CompoundValue::set_has_styleable() {
  _oneof_case_[0] = kStyleable;
}
inline void CompoundValue::clear_styleable() {
  if (has_styleable()) {
    delete value_.styleable_;
    clear_has_value();
  }
}
inline ::aapt::pb::Styleable* CompoundValue::release_styleable() {
  // @@protoc_insertion_point(field_release:aapt.pb.CompoundValue.styleable)
  if (has_styleable()) {
    clear_has_value();
      ::aapt::pb::Styleable* temp = value_.styleable_;
    value_.styleable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Styleable& CompoundValue::styleable() const {
  // @@protoc_insertion_point(field_get:aapt.pb.CompoundValue.styleable)
  return has_styleable()
      ? *value_.styleable_
      : *reinterpret_cast< ::aapt::pb::Styleable*>(&::aapt::pb::_Styleable_default_instance_);
}
inline ::aapt::pb::Styleable* CompoundValue::mutable_styleable() {
  if (!has_styleable()) {
    clear_value();
    set_has_styleable();
    value_.styleable_ = CreateMaybeMessage< ::aapt::pb::Styleable >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.CompoundValue.styleable)
  return value_.styleable_;
}

// .aapt.pb.Array array = 4;
inline bool CompoundValue::has_array() const {
  return value_case() == kArray;
}
inline void CompoundValue::set_has_array() {
  _oneof_case_[0] = kArray;
}
inline void CompoundValue::clear_array() {
  if (has_array()) {
    delete value_.array_;
    clear_has_value();
  }
}
inline ::aapt::pb::Array* CompoundValue::release_array() {
  // @@protoc_insertion_point(field_release:aapt.pb.CompoundValue.array)
  if (has_array()) {
    clear_has_value();
      ::aapt::pb::Array* temp = value_.array_;
    value_.array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Array& CompoundValue::array() const {
  // @@protoc_insertion_point(field_get:aapt.pb.CompoundValue.array)
  return has_array()
      ? *value_.array_
      : *reinterpret_cast< ::aapt::pb::Array*>(&::aapt::pb::_Array_default_instance_);
}
inline ::aapt::pb::Array* CompoundValue::mutable_array() {
  if (!has_array()) {
    clear_value();
    set_has_array();
    value_.array_ = CreateMaybeMessage< ::aapt::pb::Array >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.CompoundValue.array)
  return value_.array_;
}

// .aapt.pb.Plural plural = 5;
inline bool CompoundValue::has_plural() const {
  return value_case() == kPlural;
}
inline void CompoundValue::set_has_plural() {
  _oneof_case_[0] = kPlural;
}
inline void CompoundValue::clear_plural() {
  if (has_plural()) {
    delete value_.plural_;
    clear_has_value();
  }
}
inline ::aapt::pb::Plural* CompoundValue::release_plural() {
  // @@protoc_insertion_point(field_release:aapt.pb.CompoundValue.plural)
  if (has_plural()) {
    clear_has_value();
      ::aapt::pb::Plural* temp = value_.plural_;
    value_.plural_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Plural& CompoundValue::plural() const {
  // @@protoc_insertion_point(field_get:aapt.pb.CompoundValue.plural)
  return has_plural()
      ? *value_.plural_
      : *reinterpret_cast< ::aapt::pb::Plural*>(&::aapt::pb::_Plural_default_instance_);
}
inline ::aapt::pb::Plural* CompoundValue::mutable_plural() {
  if (!has_plural()) {
    clear_value();
    set_has_plural();
    value_.plural_ = CreateMaybeMessage< ::aapt::pb::Plural >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.CompoundValue.plural)
  return value_.plural_;
}

// .aapt.pb.MacroBody macro = 6;
inline bool CompoundValue::has_macro() const {
  return value_case() == kMacro;
}
inline void CompoundValue::set_has_macro() {
  _oneof_case_[0] = kMacro;
}
inline void CompoundValue::clear_macro() {
  if (has_macro()) {
    delete value_.macro_;
    clear_has_value();
  }
}
inline ::aapt::pb::MacroBody* CompoundValue::release_macro() {
  // @@protoc_insertion_point(field_release:aapt.pb.CompoundValue.macro)
  if (has_macro()) {
    clear_has_value();
      ::aapt::pb::MacroBody* temp = value_.macro_;
    value_.macro_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::MacroBody& CompoundValue::macro() const {
  // @@protoc_insertion_point(field_get:aapt.pb.CompoundValue.macro)
  return has_macro()
      ? *value_.macro_
      : *reinterpret_cast< ::aapt::pb::MacroBody*>(&::aapt::pb::_MacroBody_default_instance_);
}
inline ::aapt::pb::MacroBody* CompoundValue::mutable_macro() {
  if (!has_macro()) {
    clear_value();
    set_has_macro();
    value_.macro_ = CreateMaybeMessage< ::aapt::pb::MacroBody >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.CompoundValue.macro)
  return value_.macro_;
}

inline bool CompoundValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void CompoundValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline CompoundValue::ValueCase CompoundValue::value_case() const {
  return CompoundValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Boolean

// bool value = 1;
inline void Boolean::clear_value() {
  value_ = false;
}
inline bool Boolean::value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Boolean.value)
  return value_;
}
inline void Boolean::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Boolean.value)
}

// -------------------------------------------------------------------

// Reference

// .aapt.pb.Reference.Type type = 1;
inline void Reference::clear_type() {
  type_ = 0;
}
inline ::aapt::pb::Reference_Type Reference::type() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Reference.type)
  return static_cast< ::aapt::pb::Reference_Type >(type_);
}
inline void Reference::set_type(::aapt::pb::Reference_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Reference.type)
}

// uint32 id = 2;
inline void Reference::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Reference::id() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Reference.id)
  return id_;
}
inline void Reference::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Reference.id)
}

// string name = 3;
inline void Reference::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Reference::name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Reference.name)
  return name_.GetNoArena();
}
inline void Reference::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Reference.name)
}
inline void Reference::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Reference.name)
}
inline void Reference::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Reference.name)
}
inline void Reference::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Reference.name)
}
inline std::string* Reference::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Reference.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Reference::release_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.Reference.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Reference::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Reference.name)
}

// bool private = 4;
inline void Reference::clear_private_() {
  private__ = false;
}
inline bool Reference::private_() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Reference.private)
  return private__;
}
inline void Reference::set_private_(bool value) {
  
  private__ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Reference.private)
}

// .aapt.pb.Boolean is_dynamic = 5;
inline bool Reference::has_is_dynamic() const {
  return this != internal_default_instance() && is_dynamic_ != nullptr;
}
inline void Reference::clear_is_dynamic() {
  if (GetArenaNoVirtual() == nullptr && is_dynamic_ != nullptr) {
    delete is_dynamic_;
  }
  is_dynamic_ = nullptr;
}
inline const ::aapt::pb::Boolean& Reference::is_dynamic() const {
  const ::aapt::pb::Boolean* p = is_dynamic_;
  // @@protoc_insertion_point(field_get:aapt.pb.Reference.is_dynamic)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Boolean*>(
      &::aapt::pb::_Boolean_default_instance_);
}
inline ::aapt::pb::Boolean* Reference::release_is_dynamic() {
  // @@protoc_insertion_point(field_release:aapt.pb.Reference.is_dynamic)
  
  ::aapt::pb::Boolean* temp = is_dynamic_;
  is_dynamic_ = nullptr;
  return temp;
}
inline ::aapt::pb::Boolean* Reference::mutable_is_dynamic() {
  
  if (is_dynamic_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Boolean>(GetArenaNoVirtual());
    is_dynamic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Reference.is_dynamic)
  return is_dynamic_;
}
inline void Reference::set_allocated_is_dynamic(::aapt::pb::Boolean* is_dynamic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete is_dynamic_;
  }
  if (is_dynamic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      is_dynamic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_dynamic, submessage_arena);
    }
    
  } else {
    
  }
  is_dynamic_ = is_dynamic;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Reference.is_dynamic)
}

// uint32 type_flags = 6;
inline void Reference::clear_type_flags() {
  type_flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Reference::type_flags() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Reference.type_flags)
  return type_flags_;
}
inline void Reference::set_type_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_flags_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Reference.type_flags)
}

// bool allow_raw = 7;
inline void Reference::clear_allow_raw() {
  allow_raw_ = false;
}
inline bool Reference::allow_raw() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Reference.allow_raw)
  return allow_raw_;
}
inline void Reference::set_allow_raw(bool value) {
  
  allow_raw_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Reference.allow_raw)
}

// -------------------------------------------------------------------

// Id

// -------------------------------------------------------------------

// String

// string value = 1;
inline void String::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& String::value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.String.value)
  return value_.GetNoArena();
}
inline void String::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.String.value)
}
inline void String::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.String.value)
}
inline void String::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.String.value)
}
inline void String::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.String.value)
}
inline std::string* String::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.String.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* String::release_value() {
  // @@protoc_insertion_point(field_release:aapt.pb.String.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void String::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.String.value)
}

// -------------------------------------------------------------------

// RawString

// string value = 1;
inline void RawString::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RawString::value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.RawString.value)
  return value_.GetNoArena();
}
inline void RawString::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.RawString.value)
}
inline void RawString::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.RawString.value)
}
inline void RawString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.RawString.value)
}
inline void RawString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.RawString.value)
}
inline std::string* RawString::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.RawString.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RawString::release_value() {
  // @@protoc_insertion_point(field_release:aapt.pb.RawString.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RawString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.RawString.value)
}

// -------------------------------------------------------------------

// StyledString_Span

// string tag = 1;
inline void StyledString_Span::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyledString_Span::tag() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyledString.Span.tag)
  return tag_.GetNoArena();
}
inline void StyledString_Span::set_tag(const std::string& value) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.StyledString.Span.tag)
}
inline void StyledString_Span::set_tag(std::string&& value) {
  
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.StyledString.Span.tag)
}
inline void StyledString_Span::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.StyledString.Span.tag)
}
inline void StyledString_Span::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.StyledString.Span.tag)
}
inline std::string* StyledString_Span::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.StyledString.Span.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyledString_Span::release_tag() {
  // @@protoc_insertion_point(field_release:aapt.pb.StyledString.Span.tag)
  
  return tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyledString_Span::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.StyledString.Span.tag)
}

// uint32 first_char = 2;
inline void StyledString_Span::clear_first_char() {
  first_char_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyledString_Span::first_char() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyledString.Span.first_char)
  return first_char_;
}
inline void StyledString_Span::set_first_char(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  first_char_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.StyledString.Span.first_char)
}

// uint32 last_char = 3;
inline void StyledString_Span::clear_last_char() {
  last_char_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyledString_Span::last_char() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyledString.Span.last_char)
  return last_char_;
}
inline void StyledString_Span::set_last_char(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_char_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.StyledString.Span.last_char)
}

// -------------------------------------------------------------------

// StyledString

// string value = 1;
inline void StyledString::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyledString::value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyledString.value)
  return value_.GetNoArena();
}
inline void StyledString::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.StyledString.value)
}
inline void StyledString::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.StyledString.value)
}
inline void StyledString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.StyledString.value)
}
inline void StyledString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.StyledString.value)
}
inline std::string* StyledString::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.StyledString.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyledString::release_value() {
  // @@protoc_insertion_point(field_release:aapt.pb.StyledString.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyledString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.StyledString.value)
}

// repeated .aapt.pb.StyledString.Span span = 2;
inline int StyledString::span_size() const {
  return span_.size();
}
inline void StyledString::clear_span() {
  span_.Clear();
}
inline ::aapt::pb::StyledString_Span* StyledString::mutable_span(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.StyledString.span)
  return span_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyledString_Span >*
StyledString::mutable_span() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.StyledString.span)
  return &span_;
}
inline const ::aapt::pb::StyledString_Span& StyledString::span(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyledString.span)
  return span_.Get(index);
}
inline ::aapt::pb::StyledString_Span* StyledString::add_span() {
  // @@protoc_insertion_point(field_add:aapt.pb.StyledString.span)
  return span_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyledString_Span >&
StyledString::span() const {
  // @@protoc_insertion_point(field_list:aapt.pb.StyledString.span)
  return span_;
}

// -------------------------------------------------------------------

// FileReference

// string path = 1;
inline void FileReference::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileReference::path() const {
  // @@protoc_insertion_point(field_get:aapt.pb.FileReference.path)
  return path_.GetNoArena();
}
inline void FileReference::set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.FileReference.path)
}
inline void FileReference::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.FileReference.path)
}
inline void FileReference::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.FileReference.path)
}
inline void FileReference::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.FileReference.path)
}
inline std::string* FileReference::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.FileReference.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileReference::release_path() {
  // @@protoc_insertion_point(field_release:aapt.pb.FileReference.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileReference::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.FileReference.path)
}

// .aapt.pb.FileReference.Type type = 2;
inline void FileReference::clear_type() {
  type_ = 0;
}
inline ::aapt::pb::FileReference_Type FileReference::type() const {
  // @@protoc_insertion_point(field_get:aapt.pb.FileReference.type)
  return static_cast< ::aapt::pb::FileReference_Type >(type_);
}
inline void FileReference::set_type(::aapt::pb::FileReference_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.FileReference.type)
}

// -------------------------------------------------------------------

// Primitive_NullType

// -------------------------------------------------------------------

// Primitive_EmptyType

// -------------------------------------------------------------------

// Primitive

// .aapt.pb.Primitive.NullType null_value = 1;
inline bool Primitive::has_null_value() const {
  return oneof_value_case() == kNullValue;
}
inline void Primitive::set_has_null_value() {
  _oneof_case_[0] = kNullValue;
}
inline void Primitive::clear_null_value() {
  if (has_null_value()) {
    delete oneof_value_.null_value_;
    clear_has_oneof_value();
  }
}
inline ::aapt::pb::Primitive_NullType* Primitive::release_null_value() {
  // @@protoc_insertion_point(field_release:aapt.pb.Primitive.null_value)
  if (has_null_value()) {
    clear_has_oneof_value();
      ::aapt::pb::Primitive_NullType* temp = oneof_value_.null_value_;
    oneof_value_.null_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Primitive_NullType& Primitive::null_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.null_value)
  return has_null_value()
      ? *oneof_value_.null_value_
      : *reinterpret_cast< ::aapt::pb::Primitive_NullType*>(&::aapt::pb::_Primitive_NullType_default_instance_);
}
inline ::aapt::pb::Primitive_NullType* Primitive::mutable_null_value() {
  if (!has_null_value()) {
    clear_oneof_value();
    set_has_null_value();
    oneof_value_.null_value_ = CreateMaybeMessage< ::aapt::pb::Primitive_NullType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Primitive.null_value)
  return oneof_value_.null_value_;
}

// .aapt.pb.Primitive.EmptyType empty_value = 2;
inline bool Primitive::has_empty_value() const {
  return oneof_value_case() == kEmptyValue;
}
inline void Primitive::set_has_empty_value() {
  _oneof_case_[0] = kEmptyValue;
}
inline void Primitive::clear_empty_value() {
  if (has_empty_value()) {
    delete oneof_value_.empty_value_;
    clear_has_oneof_value();
  }
}
inline ::aapt::pb::Primitive_EmptyType* Primitive::release_empty_value() {
  // @@protoc_insertion_point(field_release:aapt.pb.Primitive.empty_value)
  if (has_empty_value()) {
    clear_has_oneof_value();
      ::aapt::pb::Primitive_EmptyType* temp = oneof_value_.empty_value_;
    oneof_value_.empty_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::Primitive_EmptyType& Primitive::empty_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.empty_value)
  return has_empty_value()
      ? *oneof_value_.empty_value_
      : *reinterpret_cast< ::aapt::pb::Primitive_EmptyType*>(&::aapt::pb::_Primitive_EmptyType_default_instance_);
}
inline ::aapt::pb::Primitive_EmptyType* Primitive::mutable_empty_value() {
  if (!has_empty_value()) {
    clear_oneof_value();
    set_has_empty_value();
    oneof_value_.empty_value_ = CreateMaybeMessage< ::aapt::pb::Primitive_EmptyType >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Primitive.empty_value)
  return oneof_value_.empty_value_;
}

// float float_value = 3;
inline bool Primitive::has_float_value() const {
  return oneof_value_case() == kFloatValue;
}
inline void Primitive::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Primitive::clear_float_value() {
  if (has_float_value()) {
    oneof_value_.float_value_ = 0;
    clear_has_oneof_value();
  }
}
inline float Primitive::float_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.float_value)
  if (has_float_value()) {
    return oneof_value_.float_value_;
  }
  return 0;
}
inline void Primitive::set_float_value(float value) {
  if (!has_float_value()) {
    clear_oneof_value();
    set_has_float_value();
  }
  oneof_value_.float_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.float_value)
}

// uint32 dimension_value = 13;
inline bool Primitive::has_dimension_value() const {
  return oneof_value_case() == kDimensionValue;
}
inline void Primitive::set_has_dimension_value() {
  _oneof_case_[0] = kDimensionValue;
}
inline void Primitive::clear_dimension_value() {
  if (has_dimension_value()) {
    oneof_value_.dimension_value_ = 0u;
    clear_has_oneof_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Primitive::dimension_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.dimension_value)
  if (has_dimension_value()) {
    return oneof_value_.dimension_value_;
  }
  return 0u;
}
inline void Primitive::set_dimension_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_dimension_value()) {
    clear_oneof_value();
    set_has_dimension_value();
  }
  oneof_value_.dimension_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.dimension_value)
}

// uint32 fraction_value = 14;
inline bool Primitive::has_fraction_value() const {
  return oneof_value_case() == kFractionValue;
}
inline void Primitive::set_has_fraction_value() {
  _oneof_case_[0] = kFractionValue;
}
inline void Primitive::clear_fraction_value() {
  if (has_fraction_value()) {
    oneof_value_.fraction_value_ = 0u;
    clear_has_oneof_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Primitive::fraction_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.fraction_value)
  if (has_fraction_value()) {
    return oneof_value_.fraction_value_;
  }
  return 0u;
}
inline void Primitive::set_fraction_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_fraction_value()) {
    clear_oneof_value();
    set_has_fraction_value();
  }
  oneof_value_.fraction_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.fraction_value)
}

// int32 int_decimal_value = 6;
inline bool Primitive::has_int_decimal_value() const {
  return oneof_value_case() == kIntDecimalValue;
}
inline void Primitive::set_has_int_decimal_value() {
  _oneof_case_[0] = kIntDecimalValue;
}
inline void Primitive::clear_int_decimal_value() {
  if (has_int_decimal_value()) {
    oneof_value_.int_decimal_value_ = 0;
    clear_has_oneof_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Primitive::int_decimal_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.int_decimal_value)
  if (has_int_decimal_value()) {
    return oneof_value_.int_decimal_value_;
  }
  return 0;
}
inline void Primitive::set_int_decimal_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!has_int_decimal_value()) {
    clear_oneof_value();
    set_has_int_decimal_value();
  }
  oneof_value_.int_decimal_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.int_decimal_value)
}

// uint32 int_hexadecimal_value = 7;
inline bool Primitive::has_int_hexadecimal_value() const {
  return oneof_value_case() == kIntHexadecimalValue;
}
inline void Primitive::set_has_int_hexadecimal_value() {
  _oneof_case_[0] = kIntHexadecimalValue;
}
inline void Primitive::clear_int_hexadecimal_value() {
  if (has_int_hexadecimal_value()) {
    oneof_value_.int_hexadecimal_value_ = 0u;
    clear_has_oneof_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Primitive::int_hexadecimal_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.int_hexadecimal_value)
  if (has_int_hexadecimal_value()) {
    return oneof_value_.int_hexadecimal_value_;
  }
  return 0u;
}
inline void Primitive::set_int_hexadecimal_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_int_hexadecimal_value()) {
    clear_oneof_value();
    set_has_int_hexadecimal_value();
  }
  oneof_value_.int_hexadecimal_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.int_hexadecimal_value)
}

// bool boolean_value = 8;
inline bool Primitive::has_boolean_value() const {
  return oneof_value_case() == kBooleanValue;
}
inline void Primitive::set_has_boolean_value() {
  _oneof_case_[0] = kBooleanValue;
}
inline void Primitive::clear_boolean_value() {
  if (has_boolean_value()) {
    oneof_value_.boolean_value_ = false;
    clear_has_oneof_value();
  }
}
inline bool Primitive::boolean_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.boolean_value)
  if (has_boolean_value()) {
    return oneof_value_.boolean_value_;
  }
  return false;
}
inline void Primitive::set_boolean_value(bool value) {
  if (!has_boolean_value()) {
    clear_oneof_value();
    set_has_boolean_value();
  }
  oneof_value_.boolean_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.boolean_value)
}

// uint32 color_argb8_value = 9;
inline bool Primitive::has_color_argb8_value() const {
  return oneof_value_case() == kColorArgb8Value;
}
inline void Primitive::set_has_color_argb8_value() {
  _oneof_case_[0] = kColorArgb8Value;
}
inline void Primitive::clear_color_argb8_value() {
  if (has_color_argb8_value()) {
    oneof_value_.color_argb8_value_ = 0u;
    clear_has_oneof_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Primitive::color_argb8_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.color_argb8_value)
  if (has_color_argb8_value()) {
    return oneof_value_.color_argb8_value_;
  }
  return 0u;
}
inline void Primitive::set_color_argb8_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_color_argb8_value()) {
    clear_oneof_value();
    set_has_color_argb8_value();
  }
  oneof_value_.color_argb8_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.color_argb8_value)
}

// uint32 color_rgb8_value = 10;
inline bool Primitive::has_color_rgb8_value() const {
  return oneof_value_case() == kColorRgb8Value;
}
inline void Primitive::set_has_color_rgb8_value() {
  _oneof_case_[0] = kColorRgb8Value;
}
inline void Primitive::clear_color_rgb8_value() {
  if (has_color_rgb8_value()) {
    oneof_value_.color_rgb8_value_ = 0u;
    clear_has_oneof_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Primitive::color_rgb8_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.color_rgb8_value)
  if (has_color_rgb8_value()) {
    return oneof_value_.color_rgb8_value_;
  }
  return 0u;
}
inline void Primitive::set_color_rgb8_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_color_rgb8_value()) {
    clear_oneof_value();
    set_has_color_rgb8_value();
  }
  oneof_value_.color_rgb8_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.color_rgb8_value)
}

// uint32 color_argb4_value = 11;
inline bool Primitive::has_color_argb4_value() const {
  return oneof_value_case() == kColorArgb4Value;
}
inline void Primitive::set_has_color_argb4_value() {
  _oneof_case_[0] = kColorArgb4Value;
}
inline void Primitive::clear_color_argb4_value() {
  if (has_color_argb4_value()) {
    oneof_value_.color_argb4_value_ = 0u;
    clear_has_oneof_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Primitive::color_argb4_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.color_argb4_value)
  if (has_color_argb4_value()) {
    return oneof_value_.color_argb4_value_;
  }
  return 0u;
}
inline void Primitive::set_color_argb4_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_color_argb4_value()) {
    clear_oneof_value();
    set_has_color_argb4_value();
  }
  oneof_value_.color_argb4_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.color_argb4_value)
}

// uint32 color_rgb4_value = 12;
inline bool Primitive::has_color_rgb4_value() const {
  return oneof_value_case() == kColorRgb4Value;
}
inline void Primitive::set_has_color_rgb4_value() {
  _oneof_case_[0] = kColorRgb4Value;
}
inline void Primitive::clear_color_rgb4_value() {
  if (has_color_rgb4_value()) {
    oneof_value_.color_rgb4_value_ = 0u;
    clear_has_oneof_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Primitive::color_rgb4_value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.color_rgb4_value)
  if (has_color_rgb4_value()) {
    return oneof_value_.color_rgb4_value_;
  }
  return 0u;
}
inline void Primitive::set_color_rgb4_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_color_rgb4_value()) {
    clear_oneof_value();
    set_has_color_rgb4_value();
  }
  oneof_value_.color_rgb4_value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.color_rgb4_value)
}

// float dimension_value_deprecated = 4 [deprecated = true];
inline bool Primitive::has_dimension_value_deprecated() const {
  return oneof_value_case() == kDimensionValueDeprecated;
}
inline void Primitive::set_has_dimension_value_deprecated() {
  _oneof_case_[0] = kDimensionValueDeprecated;
}
inline void Primitive::clear_dimension_value_deprecated() {
  if (has_dimension_value_deprecated()) {
    oneof_value_.dimension_value_deprecated_ = 0;
    clear_has_oneof_value();
  }
}
inline float Primitive::dimension_value_deprecated() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.dimension_value_deprecated)
  if (has_dimension_value_deprecated()) {
    return oneof_value_.dimension_value_deprecated_;
  }
  return 0;
}
inline void Primitive::set_dimension_value_deprecated(float value) {
  if (!has_dimension_value_deprecated()) {
    clear_oneof_value();
    set_has_dimension_value_deprecated();
  }
  oneof_value_.dimension_value_deprecated_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.dimension_value_deprecated)
}

// float fraction_value_deprecated = 5 [deprecated = true];
inline bool Primitive::has_fraction_value_deprecated() const {
  return oneof_value_case() == kFractionValueDeprecated;
}
inline void Primitive::set_has_fraction_value_deprecated() {
  _oneof_case_[0] = kFractionValueDeprecated;
}
inline void Primitive::clear_fraction_value_deprecated() {
  if (has_fraction_value_deprecated()) {
    oneof_value_.fraction_value_deprecated_ = 0;
    clear_has_oneof_value();
  }
}
inline float Primitive::fraction_value_deprecated() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Primitive.fraction_value_deprecated)
  if (has_fraction_value_deprecated()) {
    return oneof_value_.fraction_value_deprecated_;
  }
  return 0;
}
inline void Primitive::set_fraction_value_deprecated(float value) {
  if (!has_fraction_value_deprecated()) {
    clear_oneof_value();
    set_has_fraction_value_deprecated();
  }
  oneof_value_.fraction_value_deprecated_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Primitive.fraction_value_deprecated)
}

inline bool Primitive::has_oneof_value() const {
  return oneof_value_case() != ONEOF_VALUE_NOT_SET;
}
inline void Primitive::clear_has_oneof_value() {
  _oneof_case_[0] = ONEOF_VALUE_NOT_SET;
}
inline Primitive::OneofValueCase Primitive::oneof_value_case() const {
  return Primitive::OneofValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Attribute_Symbol

// .aapt.pb.Source source = 1;
inline bool Attribute_Symbol::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void Attribute_Symbol::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& Attribute_Symbol::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.Symbol.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Attribute_Symbol::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Attribute.Symbol.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Attribute_Symbol::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Attribute.Symbol.source)
  return source_;
}
inline void Attribute_Symbol::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Attribute.Symbol.source)
}

// string comment = 2;
inline void Attribute_Symbol::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Attribute_Symbol::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.Symbol.comment)
  return comment_.GetNoArena();
}
inline void Attribute_Symbol::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Attribute.Symbol.comment)
}
inline void Attribute_Symbol::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Attribute.Symbol.comment)
}
inline void Attribute_Symbol::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Attribute.Symbol.comment)
}
inline void Attribute_Symbol::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Attribute.Symbol.comment)
}
inline std::string* Attribute_Symbol::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Attribute.Symbol.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Attribute_Symbol::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.Attribute.Symbol.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute_Symbol::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Attribute.Symbol.comment)
}

// .aapt.pb.Reference name = 3;
inline bool Attribute_Symbol::has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline void Attribute_Symbol::clear_name() {
  if (GetArenaNoVirtual() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
inline const ::aapt::pb::Reference& Attribute_Symbol::name() const {
  const ::aapt::pb::Reference* p = name_;
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.Symbol.name)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Reference*>(
      &::aapt::pb::_Reference_default_instance_);
}
inline ::aapt::pb::Reference* Attribute_Symbol::release_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.Attribute.Symbol.name)
  
  ::aapt::pb::Reference* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::aapt::pb::Reference* Attribute_Symbol::mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Reference>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Attribute.Symbol.name)
  return name_;
}
inline void Attribute_Symbol::set_allocated_name(::aapt::pb::Reference* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Attribute.Symbol.name)
}

// uint32 value = 4;
inline void Attribute_Symbol::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Attribute_Symbol::value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.Symbol.value)
  return value_;
}
inline void Attribute_Symbol::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Attribute.Symbol.value)
}

// uint32 type = 5;
inline void Attribute_Symbol::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Attribute_Symbol::type() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.Symbol.type)
  return type_;
}
inline void Attribute_Symbol::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Attribute.Symbol.type)
}

// -------------------------------------------------------------------

// Attribute

// uint32 format_flags = 1;
inline void Attribute::clear_format_flags() {
  format_flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Attribute::format_flags() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.format_flags)
  return format_flags_;
}
inline void Attribute::set_format_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  format_flags_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Attribute.format_flags)
}

// int32 min_int = 2;
inline void Attribute::clear_min_int() {
  min_int_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attribute::min_int() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.min_int)
  return min_int_;
}
inline void Attribute::set_min_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_int_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Attribute.min_int)
}

// int32 max_int = 3;
inline void Attribute::clear_max_int() {
  max_int_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Attribute::max_int() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.max_int)
  return max_int_;
}
inline void Attribute::set_max_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_int_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Attribute.max_int)
}

// repeated .aapt.pb.Attribute.Symbol symbol = 4;
inline int Attribute::symbol_size() const {
  return symbol_.size();
}
inline void Attribute::clear_symbol() {
  symbol_.Clear();
}
inline ::aapt::pb::Attribute_Symbol* Attribute::mutable_symbol(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.Attribute.symbol)
  return symbol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Attribute_Symbol >*
Attribute::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.Attribute.symbol)
  return &symbol_;
}
inline const ::aapt::pb::Attribute_Symbol& Attribute::symbol(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.Attribute.symbol)
  return symbol_.Get(index);
}
inline ::aapt::pb::Attribute_Symbol* Attribute::add_symbol() {
  // @@protoc_insertion_point(field_add:aapt.pb.Attribute.symbol)
  return symbol_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Attribute_Symbol >&
Attribute::symbol() const {
  // @@protoc_insertion_point(field_list:aapt.pb.Attribute.symbol)
  return symbol_;
}

// -------------------------------------------------------------------

// Style_Entry

// .aapt.pb.Source source = 1;
inline bool Style_Entry::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void Style_Entry::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& Style_Entry::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Style.Entry.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Style_Entry::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Style.Entry.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Style_Entry::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Style.Entry.source)
  return source_;
}
inline void Style_Entry::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Style.Entry.source)
}

// string comment = 2;
inline void Style_Entry::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Style_Entry::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Style.Entry.comment)
  return comment_.GetNoArena();
}
inline void Style_Entry::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Style.Entry.comment)
}
inline void Style_Entry::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Style.Entry.comment)
}
inline void Style_Entry::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Style.Entry.comment)
}
inline void Style_Entry::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Style.Entry.comment)
}
inline std::string* Style_Entry::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Style.Entry.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Style_Entry::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.Style.Entry.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Style_Entry::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Style.Entry.comment)
}

// .aapt.pb.Reference key = 3;
inline bool Style_Entry::has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline void Style_Entry::clear_key() {
  if (GetArenaNoVirtual() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::aapt::pb::Reference& Style_Entry::key() const {
  const ::aapt::pb::Reference* p = key_;
  // @@protoc_insertion_point(field_get:aapt.pb.Style.Entry.key)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Reference*>(
      &::aapt::pb::_Reference_default_instance_);
}
inline ::aapt::pb::Reference* Style_Entry::release_key() {
  // @@protoc_insertion_point(field_release:aapt.pb.Style.Entry.key)
  
  ::aapt::pb::Reference* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::aapt::pb::Reference* Style_Entry::mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Reference>(GetArenaNoVirtual());
    key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Style.Entry.key)
  return key_;
}
inline void Style_Entry::set_allocated_key(::aapt::pb::Reference* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Style.Entry.key)
}

// .aapt.pb.Item item = 4;
inline bool Style_Entry::has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline void Style_Entry::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::aapt::pb::Item& Style_Entry::item() const {
  const ::aapt::pb::Item* p = item_;
  // @@protoc_insertion_point(field_get:aapt.pb.Style.Entry.item)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Item*>(
      &::aapt::pb::_Item_default_instance_);
}
inline ::aapt::pb::Item* Style_Entry::release_item() {
  // @@protoc_insertion_point(field_release:aapt.pb.Style.Entry.item)
  
  ::aapt::pb::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::aapt::pb::Item* Style_Entry::mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Style.Entry.item)
  return item_;
}
inline void Style_Entry::set_allocated_item(::aapt::pb::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Style.Entry.item)
}

// -------------------------------------------------------------------

// Style

// .aapt.pb.Reference parent = 1;
inline bool Style::has_parent() const {
  return this != internal_default_instance() && parent_ != nullptr;
}
inline void Style::clear_parent() {
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
inline const ::aapt::pb::Reference& Style::parent() const {
  const ::aapt::pb::Reference* p = parent_;
  // @@protoc_insertion_point(field_get:aapt.pb.Style.parent)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Reference*>(
      &::aapt::pb::_Reference_default_instance_);
}
inline ::aapt::pb::Reference* Style::release_parent() {
  // @@protoc_insertion_point(field_release:aapt.pb.Style.parent)
  
  ::aapt::pb::Reference* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::aapt::pb::Reference* Style::mutable_parent() {
  
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Reference>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Style.parent)
  return parent_;
}
inline void Style::set_allocated_parent(::aapt::pb::Reference* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_;
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    
  } else {
    
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Style.parent)
}

// .aapt.pb.Source parent_source = 2;
inline bool Style::has_parent_source() const {
  return this != internal_default_instance() && parent_source_ != nullptr;
}
inline void Style::clear_parent_source() {
  if (GetArenaNoVirtual() == nullptr && parent_source_ != nullptr) {
    delete parent_source_;
  }
  parent_source_ = nullptr;
}
inline const ::aapt::pb::Source& Style::parent_source() const {
  const ::aapt::pb::Source* p = parent_source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Style.parent_source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Style::release_parent_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Style.parent_source)
  
  ::aapt::pb::Source* temp = parent_source_;
  parent_source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Style::mutable_parent_source() {
  
  if (parent_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    parent_source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Style.parent_source)
  return parent_source_;
}
inline void Style::set_allocated_parent_source(::aapt::pb::Source* parent_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_source_;
  }
  if (parent_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_source, submessage_arena);
    }
    
  } else {
    
  }
  parent_source_ = parent_source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Style.parent_source)
}

// repeated .aapt.pb.Style.Entry entry = 3;
inline int Style::entry_size() const {
  return entry_.size();
}
inline void Style::clear_entry() {
  entry_.Clear();
}
inline ::aapt::pb::Style_Entry* Style::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.Style.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Style_Entry >*
Style::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.Style.entry)
  return &entry_;
}
inline const ::aapt::pb::Style_Entry& Style::entry(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.Style.entry)
  return entry_.Get(index);
}
inline ::aapt::pb::Style_Entry* Style::add_entry() {
  // @@protoc_insertion_point(field_add:aapt.pb.Style.entry)
  return entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Style_Entry >&
Style::entry() const {
  // @@protoc_insertion_point(field_list:aapt.pb.Style.entry)
  return entry_;
}

// -------------------------------------------------------------------

// Styleable_Entry

// .aapt.pb.Source source = 1;
inline bool Styleable_Entry::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void Styleable_Entry::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& Styleable_Entry::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Styleable.Entry.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Styleable_Entry::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Styleable.Entry.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Styleable_Entry::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Styleable.Entry.source)
  return source_;
}
inline void Styleable_Entry::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Styleable.Entry.source)
}

// string comment = 2;
inline void Styleable_Entry::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Styleable_Entry::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Styleable.Entry.comment)
  return comment_.GetNoArena();
}
inline void Styleable_Entry::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Styleable.Entry.comment)
}
inline void Styleable_Entry::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Styleable.Entry.comment)
}
inline void Styleable_Entry::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Styleable.Entry.comment)
}
inline void Styleable_Entry::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Styleable.Entry.comment)
}
inline std::string* Styleable_Entry::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Styleable.Entry.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Styleable_Entry::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.Styleable.Entry.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Styleable_Entry::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Styleable.Entry.comment)
}

// .aapt.pb.Reference attr = 3;
inline bool Styleable_Entry::has_attr() const {
  return this != internal_default_instance() && attr_ != nullptr;
}
inline void Styleable_Entry::clear_attr() {
  if (GetArenaNoVirtual() == nullptr && attr_ != nullptr) {
    delete attr_;
  }
  attr_ = nullptr;
}
inline const ::aapt::pb::Reference& Styleable_Entry::attr() const {
  const ::aapt::pb::Reference* p = attr_;
  // @@protoc_insertion_point(field_get:aapt.pb.Styleable.Entry.attr)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Reference*>(
      &::aapt::pb::_Reference_default_instance_);
}
inline ::aapt::pb::Reference* Styleable_Entry::release_attr() {
  // @@protoc_insertion_point(field_release:aapt.pb.Styleable.Entry.attr)
  
  ::aapt::pb::Reference* temp = attr_;
  attr_ = nullptr;
  return temp;
}
inline ::aapt::pb::Reference* Styleable_Entry::mutable_attr() {
  
  if (attr_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Reference>(GetArenaNoVirtual());
    attr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Styleable.Entry.attr)
  return attr_;
}
inline void Styleable_Entry::set_allocated_attr(::aapt::pb::Reference* attr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attr_;
  }
  if (attr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attr, submessage_arena);
    }
    
  } else {
    
  }
  attr_ = attr;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Styleable.Entry.attr)
}

// -------------------------------------------------------------------

// Styleable

// repeated .aapt.pb.Styleable.Entry entry = 1;
inline int Styleable::entry_size() const {
  return entry_.size();
}
inline void Styleable::clear_entry() {
  entry_.Clear();
}
inline ::aapt::pb::Styleable_Entry* Styleable::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.Styleable.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Styleable_Entry >*
Styleable::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.Styleable.entry)
  return &entry_;
}
inline const ::aapt::pb::Styleable_Entry& Styleable::entry(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.Styleable.entry)
  return entry_.Get(index);
}
inline ::aapt::pb::Styleable_Entry* Styleable::add_entry() {
  // @@protoc_insertion_point(field_add:aapt.pb.Styleable.entry)
  return entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Styleable_Entry >&
Styleable::entry() const {
  // @@protoc_insertion_point(field_list:aapt.pb.Styleable.entry)
  return entry_;
}

// -------------------------------------------------------------------

// Array_Element

// .aapt.pb.Source source = 1;
inline bool Array_Element::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void Array_Element::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& Array_Element::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Array.Element.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Array_Element::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Array.Element.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Array_Element::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Array.Element.source)
  return source_;
}
inline void Array_Element::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Array.Element.source)
}

// string comment = 2;
inline void Array_Element::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Array_Element::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Array.Element.comment)
  return comment_.GetNoArena();
}
inline void Array_Element::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Array.Element.comment)
}
inline void Array_Element::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Array.Element.comment)
}
inline void Array_Element::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Array.Element.comment)
}
inline void Array_Element::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Array.Element.comment)
}
inline std::string* Array_Element::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Array.Element.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Array_Element::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.Array.Element.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Array_Element::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Array.Element.comment)
}

// .aapt.pb.Item item = 3;
inline bool Array_Element::has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline void Array_Element::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::aapt::pb::Item& Array_Element::item() const {
  const ::aapt::pb::Item* p = item_;
  // @@protoc_insertion_point(field_get:aapt.pb.Array.Element.item)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Item*>(
      &::aapt::pb::_Item_default_instance_);
}
inline ::aapt::pb::Item* Array_Element::release_item() {
  // @@protoc_insertion_point(field_release:aapt.pb.Array.Element.item)
  
  ::aapt::pb::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::aapt::pb::Item* Array_Element::mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Array.Element.item)
  return item_;
}
inline void Array_Element::set_allocated_item(::aapt::pb::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Array.Element.item)
}

// -------------------------------------------------------------------

// Array

// repeated .aapt.pb.Array.Element element = 1;
inline int Array::element_size() const {
  return element_.size();
}
inline void Array::clear_element() {
  element_.Clear();
}
inline ::aapt::pb::Array_Element* Array::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.Array.element)
  return element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Array_Element >*
Array::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.Array.element)
  return &element_;
}
inline const ::aapt::pb::Array_Element& Array::element(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.Array.element)
  return element_.Get(index);
}
inline ::aapt::pb::Array_Element* Array::add_element() {
  // @@protoc_insertion_point(field_add:aapt.pb.Array.element)
  return element_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Array_Element >&
Array::element() const {
  // @@protoc_insertion_point(field_list:aapt.pb.Array.element)
  return element_;
}

// -------------------------------------------------------------------

// Plural_Entry

// .aapt.pb.Source source = 1;
inline bool Plural_Entry::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void Plural_Entry::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::Source& Plural_Entry::source() const {
  const ::aapt::pb::Source* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.Plural.Entry.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Source*>(
      &::aapt::pb::_Source_default_instance_);
}
inline ::aapt::pb::Source* Plural_Entry::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.Plural.Entry.source)
  
  ::aapt::pb::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::Source* Plural_Entry::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Plural.Entry.source)
  return source_;
}
inline void Plural_Entry::set_allocated_source(::aapt::pb::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Plural.Entry.source)
}

// string comment = 2;
inline void Plural_Entry::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Plural_Entry::comment() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Plural.Entry.comment)
  return comment_.GetNoArena();
}
inline void Plural_Entry::set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.Plural.Entry.comment)
}
inline void Plural_Entry::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.Plural.Entry.comment)
}
inline void Plural_Entry::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.Plural.Entry.comment)
}
inline void Plural_Entry::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.Plural.Entry.comment)
}
inline std::string* Plural_Entry::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.Plural.Entry.comment)
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Plural_Entry::release_comment() {
  // @@protoc_insertion_point(field_release:aapt.pb.Plural.Entry.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Plural_Entry::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Plural.Entry.comment)
}

// .aapt.pb.Plural.Arity arity = 3;
inline void Plural_Entry::clear_arity() {
  arity_ = 0;
}
inline ::aapt::pb::Plural_Arity Plural_Entry::arity() const {
  // @@protoc_insertion_point(field_get:aapt.pb.Plural.Entry.arity)
  return static_cast< ::aapt::pb::Plural_Arity >(arity_);
}
inline void Plural_Entry::set_arity(::aapt::pb::Plural_Arity value) {
  
  arity_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.Plural.Entry.arity)
}

// .aapt.pb.Item item = 4;
inline bool Plural_Entry::has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline void Plural_Entry::clear_item() {
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::aapt::pb::Item& Plural_Entry::item() const {
  const ::aapt::pb::Item* p = item_;
  // @@protoc_insertion_point(field_get:aapt.pb.Plural.Entry.item)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Item*>(
      &::aapt::pb::_Item_default_instance_);
}
inline ::aapt::pb::Item* Plural_Entry::release_item() {
  // @@protoc_insertion_point(field_release:aapt.pb.Plural.Entry.item)
  
  ::aapt::pb::Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::aapt::pb::Item* Plural_Entry::mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Item>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.Plural.Entry.item)
  return item_;
}
inline void Plural_Entry::set_allocated_item(::aapt::pb::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.Plural.Entry.item)
}

// -------------------------------------------------------------------

// Plural

// repeated .aapt.pb.Plural.Entry entry = 1;
inline int Plural::entry_size() const {
  return entry_.size();
}
inline void Plural::clear_entry() {
  entry_.Clear();
}
inline ::aapt::pb::Plural_Entry* Plural::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.Plural.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Plural_Entry >*
Plural::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.Plural.entry)
  return &entry_;
}
inline const ::aapt::pb::Plural_Entry& Plural::entry(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.Plural.entry)
  return entry_.Get(index);
}
inline ::aapt::pb::Plural_Entry* Plural::add_entry() {
  // @@protoc_insertion_point(field_add:aapt.pb.Plural.entry)
  return entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::Plural_Entry >&
Plural::entry() const {
  // @@protoc_insertion_point(field_list:aapt.pb.Plural.entry)
  return entry_;
}

// -------------------------------------------------------------------

// XmlNode

// .aapt.pb.XmlElement element = 1;
inline bool XmlNode::has_element() const {
  return node_case() == kElement;
}
inline void XmlNode::set_has_element() {
  _oneof_case_[0] = kElement;
}
inline void XmlNode::clear_element() {
  if (has_element()) {
    delete node_.element_;
    clear_has_node();
  }
}
inline ::aapt::pb::XmlElement* XmlNode::release_element() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlNode.element)
  if (has_element()) {
    clear_has_node();
      ::aapt::pb::XmlElement* temp = node_.element_;
    node_.element_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::aapt::pb::XmlElement& XmlNode::element() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlNode.element)
  return has_element()
      ? *node_.element_
      : *reinterpret_cast< ::aapt::pb::XmlElement*>(&::aapt::pb::_XmlElement_default_instance_);
}
inline ::aapt::pb::XmlElement* XmlNode::mutable_element() {
  if (!has_element()) {
    clear_node();
    set_has_element();
    node_.element_ = CreateMaybeMessage< ::aapt::pb::XmlElement >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlNode.element)
  return node_.element_;
}

// string text = 2;
inline bool XmlNode::has_text() const {
  return node_case() == kText;
}
inline void XmlNode::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void XmlNode::clear_text() {
  if (has_text()) {
    node_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_node();
  }
}
inline const std::string& XmlNode::text() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlNode.text)
  if (has_text()) {
    return node_.text_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void XmlNode::set_text(const std::string& value) {
  // @@protoc_insertion_point(field_set:aapt.pb.XmlNode.text)
  if (!has_text()) {
    clear_node();
    set_has_text();
    node_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  node_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.XmlNode.text)
}
inline void XmlNode::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:aapt.pb.XmlNode.text)
  if (!has_text()) {
    clear_node();
    set_has_text();
    node_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  node_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.XmlNode.text)
}
inline void XmlNode::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_text()) {
    clear_node();
    set_has_text();
    node_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  node_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.XmlNode.text)
}
inline void XmlNode::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_node();
    set_has_text();
    node_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  node_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.XmlNode.text)
}
inline std::string* XmlNode::mutable_text() {
  if (!has_text()) {
    clear_node();
    set_has_text();
    node_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlNode.text)
  return node_.text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XmlNode::release_text() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlNode.text)
  if (has_text()) {
    clear_has_node();
    return node_.text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void XmlNode::set_allocated_text(std::string* text) {
  if (has_node()) {
    clear_node();
  }
  if (text != nullptr) {
    set_has_text();
    node_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlNode.text)
}

// .aapt.pb.SourcePosition source = 3;
inline bool XmlNode::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void XmlNode::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::SourcePosition& XmlNode::source() const {
  const ::aapt::pb::SourcePosition* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.XmlNode.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::SourcePosition*>(
      &::aapt::pb::_SourcePosition_default_instance_);
}
inline ::aapt::pb::SourcePosition* XmlNode::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlNode.source)
  
  ::aapt::pb::SourcePosition* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::SourcePosition* XmlNode::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::SourcePosition>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlNode.source)
  return source_;
}
inline void XmlNode::set_allocated_source(::aapt::pb::SourcePosition* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlNode.source)
}

inline bool XmlNode::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void XmlNode::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline XmlNode::NodeCase XmlNode::node_case() const {
  return XmlNode::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// XmlElement

// repeated .aapt.pb.XmlNamespace namespace_declaration = 1;
inline int XmlElement::namespace_declaration_size() const {
  return namespace_declaration_.size();
}
inline void XmlElement::clear_namespace_declaration() {
  namespace_declaration_.Clear();
}
inline ::aapt::pb::XmlNamespace* XmlElement::mutable_namespace_declaration(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlElement.namespace_declaration)
  return namespace_declaration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNamespace >*
XmlElement::mutable_namespace_declaration() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.XmlElement.namespace_declaration)
  return &namespace_declaration_;
}
inline const ::aapt::pb::XmlNamespace& XmlElement::namespace_declaration(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlElement.namespace_declaration)
  return namespace_declaration_.Get(index);
}
inline ::aapt::pb::XmlNamespace* XmlElement::add_namespace_declaration() {
  // @@protoc_insertion_point(field_add:aapt.pb.XmlElement.namespace_declaration)
  return namespace_declaration_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNamespace >&
XmlElement::namespace_declaration() const {
  // @@protoc_insertion_point(field_list:aapt.pb.XmlElement.namespace_declaration)
  return namespace_declaration_;
}

// string namespace_uri = 2;
inline void XmlElement::clear_namespace_uri() {
  namespace_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XmlElement::namespace_uri() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlElement.namespace_uri)
  return namespace_uri_.GetNoArena();
}
inline void XmlElement::set_namespace_uri(const std::string& value) {
  
  namespace_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.XmlElement.namespace_uri)
}
inline void XmlElement::set_namespace_uri(std::string&& value) {
  
  namespace_uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.XmlElement.namespace_uri)
}
inline void XmlElement::set_namespace_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.XmlElement.namespace_uri)
}
inline void XmlElement::set_namespace_uri(const char* value, size_t size) {
  
  namespace_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.XmlElement.namespace_uri)
}
inline std::string* XmlElement::mutable_namespace_uri() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlElement.namespace_uri)
  return namespace_uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XmlElement::release_namespace_uri() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlElement.namespace_uri)
  
  return namespace_uri_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XmlElement::set_allocated_namespace_uri(std::string* namespace_uri) {
  if (namespace_uri != nullptr) {
    
  } else {
    
  }
  namespace_uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_uri);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlElement.namespace_uri)
}

// string name = 3;
inline void XmlElement::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XmlElement::name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlElement.name)
  return name_.GetNoArena();
}
inline void XmlElement::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.XmlElement.name)
}
inline void XmlElement::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.XmlElement.name)
}
inline void XmlElement::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.XmlElement.name)
}
inline void XmlElement::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.XmlElement.name)
}
inline std::string* XmlElement::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlElement.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XmlElement::release_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlElement.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XmlElement::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlElement.name)
}

// repeated .aapt.pb.XmlAttribute attribute = 4;
inline int XmlElement::attribute_size() const {
  return attribute_.size();
}
inline void XmlElement::clear_attribute() {
  attribute_.Clear();
}
inline ::aapt::pb::XmlAttribute* XmlElement::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlElement.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlAttribute >*
XmlElement::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.XmlElement.attribute)
  return &attribute_;
}
inline const ::aapt::pb::XmlAttribute& XmlElement::attribute(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlElement.attribute)
  return attribute_.Get(index);
}
inline ::aapt::pb::XmlAttribute* XmlElement::add_attribute() {
  // @@protoc_insertion_point(field_add:aapt.pb.XmlElement.attribute)
  return attribute_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlAttribute >&
XmlElement::attribute() const {
  // @@protoc_insertion_point(field_list:aapt.pb.XmlElement.attribute)
  return attribute_;
}

// repeated .aapt.pb.XmlNode child = 5;
inline int XmlElement::child_size() const {
  return child_.size();
}
inline void XmlElement::clear_child() {
  child_.Clear();
}
inline ::aapt::pb::XmlNode* XmlElement::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlElement.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNode >*
XmlElement::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.XmlElement.child)
  return &child_;
}
inline const ::aapt::pb::XmlNode& XmlElement::child(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlElement.child)
  return child_.Get(index);
}
inline ::aapt::pb::XmlNode* XmlElement::add_child() {
  // @@protoc_insertion_point(field_add:aapt.pb.XmlElement.child)
  return child_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::XmlNode >&
XmlElement::child() const {
  // @@protoc_insertion_point(field_list:aapt.pb.XmlElement.child)
  return child_;
}

// -------------------------------------------------------------------

// XmlNamespace

// string prefix = 1;
inline void XmlNamespace::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XmlNamespace::prefix() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlNamespace.prefix)
  return prefix_.GetNoArena();
}
inline void XmlNamespace::set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.XmlNamespace.prefix)
}
inline void XmlNamespace::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.XmlNamespace.prefix)
}
inline void XmlNamespace::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.XmlNamespace.prefix)
}
inline void XmlNamespace::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.XmlNamespace.prefix)
}
inline std::string* XmlNamespace::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlNamespace.prefix)
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XmlNamespace::release_prefix() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlNamespace.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XmlNamespace::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlNamespace.prefix)
}

// string uri = 2;
inline void XmlNamespace::clear_uri() {
  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XmlNamespace::uri() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlNamespace.uri)
  return uri_.GetNoArena();
}
inline void XmlNamespace::set_uri(const std::string& value) {
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.XmlNamespace.uri)
}
inline void XmlNamespace::set_uri(std::string&& value) {
  
  uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.XmlNamespace.uri)
}
inline void XmlNamespace::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.XmlNamespace.uri)
}
inline void XmlNamespace::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.XmlNamespace.uri)
}
inline std::string* XmlNamespace::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlNamespace.uri)
  return uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XmlNamespace::release_uri() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlNamespace.uri)
  
  return uri_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XmlNamespace::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlNamespace.uri)
}

// .aapt.pb.SourcePosition source = 3;
inline bool XmlNamespace::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void XmlNamespace::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::SourcePosition& XmlNamespace::source() const {
  const ::aapt::pb::SourcePosition* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.XmlNamespace.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::SourcePosition*>(
      &::aapt::pb::_SourcePosition_default_instance_);
}
inline ::aapt::pb::SourcePosition* XmlNamespace::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlNamespace.source)
  
  ::aapt::pb::SourcePosition* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::SourcePosition* XmlNamespace::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::SourcePosition>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlNamespace.source)
  return source_;
}
inline void XmlNamespace::set_allocated_source(::aapt::pb::SourcePosition* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlNamespace.source)
}

// -------------------------------------------------------------------

// XmlAttribute

// string namespace_uri = 1;
inline void XmlAttribute::clear_namespace_uri() {
  namespace_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XmlAttribute::namespace_uri() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlAttribute.namespace_uri)
  return namespace_uri_.GetNoArena();
}
inline void XmlAttribute::set_namespace_uri(const std::string& value) {
  
  namespace_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.XmlAttribute.namespace_uri)
}
inline void XmlAttribute::set_namespace_uri(std::string&& value) {
  
  namespace_uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.XmlAttribute.namespace_uri)
}
inline void XmlAttribute::set_namespace_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.XmlAttribute.namespace_uri)
}
inline void XmlAttribute::set_namespace_uri(const char* value, size_t size) {
  
  namespace_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.XmlAttribute.namespace_uri)
}
inline std::string* XmlAttribute::mutable_namespace_uri() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlAttribute.namespace_uri)
  return namespace_uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XmlAttribute::release_namespace_uri() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlAttribute.namespace_uri)
  
  return namespace_uri_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XmlAttribute::set_allocated_namespace_uri(std::string* namespace_uri) {
  if (namespace_uri != nullptr) {
    
  } else {
    
  }
  namespace_uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_uri);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlAttribute.namespace_uri)
}

// string name = 2;
inline void XmlAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XmlAttribute::name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlAttribute.name)
  return name_.GetNoArena();
}
inline void XmlAttribute::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.XmlAttribute.name)
}
inline void XmlAttribute::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.XmlAttribute.name)
}
inline void XmlAttribute::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.XmlAttribute.name)
}
inline void XmlAttribute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.XmlAttribute.name)
}
inline std::string* XmlAttribute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlAttribute.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XmlAttribute::release_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlAttribute.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XmlAttribute::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlAttribute.name)
}

// string value = 3;
inline void XmlAttribute::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& XmlAttribute::value() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlAttribute.value)
  return value_.GetNoArena();
}
inline void XmlAttribute::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.XmlAttribute.value)
}
inline void XmlAttribute::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.XmlAttribute.value)
}
inline void XmlAttribute::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.XmlAttribute.value)
}
inline void XmlAttribute::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.XmlAttribute.value)
}
inline std::string* XmlAttribute::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlAttribute.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* XmlAttribute::release_value() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlAttribute.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void XmlAttribute::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlAttribute.value)
}

// .aapt.pb.SourcePosition source = 4;
inline bool XmlAttribute::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void XmlAttribute::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::SourcePosition& XmlAttribute::source() const {
  const ::aapt::pb::SourcePosition* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.XmlAttribute.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::SourcePosition*>(
      &::aapt::pb::_SourcePosition_default_instance_);
}
inline ::aapt::pb::SourcePosition* XmlAttribute::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlAttribute.source)
  
  ::aapt::pb::SourcePosition* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::SourcePosition* XmlAttribute::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::SourcePosition>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlAttribute.source)
  return source_;
}
inline void XmlAttribute::set_allocated_source(::aapt::pb::SourcePosition* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlAttribute.source)
}

// uint32 resource_id = 5;
inline void XmlAttribute::clear_resource_id() {
  resource_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 XmlAttribute::resource_id() const {
  // @@protoc_insertion_point(field_get:aapt.pb.XmlAttribute.resource_id)
  return resource_id_;
}
inline void XmlAttribute::set_resource_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  resource_id_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.XmlAttribute.resource_id)
}

// .aapt.pb.Item compiled_item = 6;
inline bool XmlAttribute::has_compiled_item() const {
  return this != internal_default_instance() && compiled_item_ != nullptr;
}
inline void XmlAttribute::clear_compiled_item() {
  if (GetArenaNoVirtual() == nullptr && compiled_item_ != nullptr) {
    delete compiled_item_;
  }
  compiled_item_ = nullptr;
}
inline const ::aapt::pb::Item& XmlAttribute::compiled_item() const {
  const ::aapt::pb::Item* p = compiled_item_;
  // @@protoc_insertion_point(field_get:aapt.pb.XmlAttribute.compiled_item)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::Item*>(
      &::aapt::pb::_Item_default_instance_);
}
inline ::aapt::pb::Item* XmlAttribute::release_compiled_item() {
  // @@protoc_insertion_point(field_release:aapt.pb.XmlAttribute.compiled_item)
  
  ::aapt::pb::Item* temp = compiled_item_;
  compiled_item_ = nullptr;
  return temp;
}
inline ::aapt::pb::Item* XmlAttribute::mutable_compiled_item() {
  
  if (compiled_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::Item>(GetArenaNoVirtual());
    compiled_item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.XmlAttribute.compiled_item)
  return compiled_item_;
}
inline void XmlAttribute::set_allocated_compiled_item(::aapt::pb::Item* compiled_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete compiled_item_;
  }
  if (compiled_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compiled_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compiled_item, submessage_arena);
    }
    
  } else {
    
  }
  compiled_item_ = compiled_item;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.XmlAttribute.compiled_item)
}

// -------------------------------------------------------------------

// MacroBody

// string raw_string = 1;
inline void MacroBody::clear_raw_string() {
  raw_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MacroBody::raw_string() const {
  // @@protoc_insertion_point(field_get:aapt.pb.MacroBody.raw_string)
  return raw_string_.GetNoArena();
}
inline void MacroBody::set_raw_string(const std::string& value) {
  
  raw_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.MacroBody.raw_string)
}
inline void MacroBody::set_raw_string(std::string&& value) {
  
  raw_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.MacroBody.raw_string)
}
inline void MacroBody::set_raw_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.MacroBody.raw_string)
}
inline void MacroBody::set_raw_string(const char* value, size_t size) {
  
  raw_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.MacroBody.raw_string)
}
inline std::string* MacroBody::mutable_raw_string() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.MacroBody.raw_string)
  return raw_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MacroBody::release_raw_string() {
  // @@protoc_insertion_point(field_release:aapt.pb.MacroBody.raw_string)
  
  return raw_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MacroBody::set_allocated_raw_string(std::string* raw_string) {
  if (raw_string != nullptr) {
    
  } else {
    
  }
  raw_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_string);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.MacroBody.raw_string)
}

// .aapt.pb.StyleString style_string = 2;
inline bool MacroBody::has_style_string() const {
  return this != internal_default_instance() && style_string_ != nullptr;
}
inline void MacroBody::clear_style_string() {
  if (GetArenaNoVirtual() == nullptr && style_string_ != nullptr) {
    delete style_string_;
  }
  style_string_ = nullptr;
}
inline const ::aapt::pb::StyleString& MacroBody::style_string() const {
  const ::aapt::pb::StyleString* p = style_string_;
  // @@protoc_insertion_point(field_get:aapt.pb.MacroBody.style_string)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::StyleString*>(
      &::aapt::pb::_StyleString_default_instance_);
}
inline ::aapt::pb::StyleString* MacroBody::release_style_string() {
  // @@protoc_insertion_point(field_release:aapt.pb.MacroBody.style_string)
  
  ::aapt::pb::StyleString* temp = style_string_;
  style_string_ = nullptr;
  return temp;
}
inline ::aapt::pb::StyleString* MacroBody::mutable_style_string() {
  
  if (style_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::StyleString>(GetArenaNoVirtual());
    style_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.MacroBody.style_string)
  return style_string_;
}
inline void MacroBody::set_allocated_style_string(::aapt::pb::StyleString* style_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete style_string_;
  }
  if (style_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      style_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_string, submessage_arena);
    }
    
  } else {
    
  }
  style_string_ = style_string;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.MacroBody.style_string)
}

// repeated .aapt.pb.UntranslatableSection untranslatable_sections = 3;
inline int MacroBody::untranslatable_sections_size() const {
  return untranslatable_sections_.size();
}
inline void MacroBody::clear_untranslatable_sections() {
  untranslatable_sections_.Clear();
}
inline ::aapt::pb::UntranslatableSection* MacroBody::mutable_untranslatable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.MacroBody.untranslatable_sections)
  return untranslatable_sections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::UntranslatableSection >*
MacroBody::mutable_untranslatable_sections() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.MacroBody.untranslatable_sections)
  return &untranslatable_sections_;
}
inline const ::aapt::pb::UntranslatableSection& MacroBody::untranslatable_sections(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.MacroBody.untranslatable_sections)
  return untranslatable_sections_.Get(index);
}
inline ::aapt::pb::UntranslatableSection* MacroBody::add_untranslatable_sections() {
  // @@protoc_insertion_point(field_add:aapt.pb.MacroBody.untranslatable_sections)
  return untranslatable_sections_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::UntranslatableSection >&
MacroBody::untranslatable_sections() const {
  // @@protoc_insertion_point(field_list:aapt.pb.MacroBody.untranslatable_sections)
  return untranslatable_sections_;
}

// repeated .aapt.pb.NamespaceAlias namespace_stack = 4;
inline int MacroBody::namespace_stack_size() const {
  return namespace_stack_.size();
}
inline void MacroBody::clear_namespace_stack() {
  namespace_stack_.Clear();
}
inline ::aapt::pb::NamespaceAlias* MacroBody::mutable_namespace_stack(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.MacroBody.namespace_stack)
  return namespace_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::NamespaceAlias >*
MacroBody::mutable_namespace_stack() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.MacroBody.namespace_stack)
  return &namespace_stack_;
}
inline const ::aapt::pb::NamespaceAlias& MacroBody::namespace_stack(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.MacroBody.namespace_stack)
  return namespace_stack_.Get(index);
}
inline ::aapt::pb::NamespaceAlias* MacroBody::add_namespace_stack() {
  // @@protoc_insertion_point(field_add:aapt.pb.MacroBody.namespace_stack)
  return namespace_stack_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::NamespaceAlias >&
MacroBody::namespace_stack() const {
  // @@protoc_insertion_point(field_list:aapt.pb.MacroBody.namespace_stack)
  return namespace_stack_;
}

// .aapt.pb.SourcePosition source = 5;
inline bool MacroBody::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void MacroBody::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::aapt::pb::SourcePosition& MacroBody::source() const {
  const ::aapt::pb::SourcePosition* p = source_;
  // @@protoc_insertion_point(field_get:aapt.pb.MacroBody.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::aapt::pb::SourcePosition*>(
      &::aapt::pb::_SourcePosition_default_instance_);
}
inline ::aapt::pb::SourcePosition* MacroBody::release_source() {
  // @@protoc_insertion_point(field_release:aapt.pb.MacroBody.source)
  
  ::aapt::pb::SourcePosition* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::aapt::pb::SourcePosition* MacroBody::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::aapt::pb::SourcePosition>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:aapt.pb.MacroBody.source)
  return source_;
}
inline void MacroBody::set_allocated_source(::aapt::pb::SourcePosition* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.MacroBody.source)
}

// -------------------------------------------------------------------

// NamespaceAlias

// string prefix = 1;
inline void NamespaceAlias::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NamespaceAlias::prefix() const {
  // @@protoc_insertion_point(field_get:aapt.pb.NamespaceAlias.prefix)
  return prefix_.GetNoArena();
}
inline void NamespaceAlias::set_prefix(const std::string& value) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.NamespaceAlias.prefix)
}
inline void NamespaceAlias::set_prefix(std::string&& value) {
  
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.NamespaceAlias.prefix)
}
inline void NamespaceAlias::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.NamespaceAlias.prefix)
}
inline void NamespaceAlias::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.NamespaceAlias.prefix)
}
inline std::string* NamespaceAlias::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.NamespaceAlias.prefix)
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NamespaceAlias::release_prefix() {
  // @@protoc_insertion_point(field_release:aapt.pb.NamespaceAlias.prefix)
  
  return prefix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NamespaceAlias::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.NamespaceAlias.prefix)
}

// string package_name = 2;
inline void NamespaceAlias::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NamespaceAlias::package_name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.NamespaceAlias.package_name)
  return package_name_.GetNoArena();
}
inline void NamespaceAlias::set_package_name(const std::string& value) {
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.NamespaceAlias.package_name)
}
inline void NamespaceAlias::set_package_name(std::string&& value) {
  
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.NamespaceAlias.package_name)
}
inline void NamespaceAlias::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.NamespaceAlias.package_name)
}
inline void NamespaceAlias::set_package_name(const char* value, size_t size) {
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.NamespaceAlias.package_name)
}
inline std::string* NamespaceAlias::mutable_package_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.NamespaceAlias.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NamespaceAlias::release_package_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.NamespaceAlias.package_name)
  
  return package_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NamespaceAlias::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    
  } else {
    
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.NamespaceAlias.package_name)
}

// bool is_private = 3;
inline void NamespaceAlias::clear_is_private() {
  is_private_ = false;
}
inline bool NamespaceAlias::is_private() const {
  // @@protoc_insertion_point(field_get:aapt.pb.NamespaceAlias.is_private)
  return is_private_;
}
inline void NamespaceAlias::set_is_private(bool value) {
  
  is_private_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.NamespaceAlias.is_private)
}

// -------------------------------------------------------------------

// StyleString_Span

// string name = 1;
inline void StyleString_Span::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyleString_Span::name() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyleString.Span.name)
  return name_.GetNoArena();
}
inline void StyleString_Span::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.StyleString.Span.name)
}
inline void StyleString_Span::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.StyleString.Span.name)
}
inline void StyleString_Span::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.StyleString.Span.name)
}
inline void StyleString_Span::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.StyleString.Span.name)
}
inline std::string* StyleString_Span::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.StyleString.Span.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyleString_Span::release_name() {
  // @@protoc_insertion_point(field_release:aapt.pb.StyleString.Span.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyleString_Span::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.StyleString.Span.name)
}

// uint32 start_index = 2;
inline void StyleString_Span::clear_start_index() {
  start_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleString_Span::start_index() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyleString.Span.start_index)
  return start_index_;
}
inline void StyleString_Span::set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.StyleString.Span.start_index)
}

// uint32 end_index = 3;
inline void StyleString_Span::clear_end_index() {
  end_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleString_Span::end_index() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyleString.Span.end_index)
  return end_index_;
}
inline void StyleString_Span::set_end_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_index_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.StyleString.Span.end_index)
}

// -------------------------------------------------------------------

// StyleString

// string str = 1;
inline void StyleString::clear_str() {
  str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyleString::str() const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyleString.str)
  return str_.GetNoArena();
}
inline void StyleString::set_str(const std::string& value) {
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:aapt.pb.StyleString.str)
}
inline void StyleString::set_str(std::string&& value) {
  
  str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:aapt.pb.StyleString.str)
}
inline void StyleString::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:aapt.pb.StyleString.str)
}
inline void StyleString::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:aapt.pb.StyleString.str)
}
inline std::string* StyleString::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:aapt.pb.StyleString.str)
  return str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyleString::release_str() {
  // @@protoc_insertion_point(field_release:aapt.pb.StyleString.str)
  
  return str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyleString::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:aapt.pb.StyleString.str)
}

// repeated .aapt.pb.StyleString.Span spans = 2;
inline int StyleString::spans_size() const {
  return spans_.size();
}
inline void StyleString::clear_spans() {
  spans_.Clear();
}
inline ::aapt::pb::StyleString_Span* StyleString::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:aapt.pb.StyleString.spans)
  return spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyleString_Span >*
StyleString::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:aapt.pb.StyleString.spans)
  return &spans_;
}
inline const ::aapt::pb::StyleString_Span& StyleString::spans(int index) const {
  // @@protoc_insertion_point(field_get:aapt.pb.StyleString.spans)
  return spans_.Get(index);
}
inline ::aapt::pb::StyleString_Span* StyleString::add_spans() {
  // @@protoc_insertion_point(field_add:aapt.pb.StyleString.spans)
  return spans_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aapt::pb::StyleString_Span >&
StyleString::spans() const {
  // @@protoc_insertion_point(field_list:aapt.pb.StyleString.spans)
  return spans_;
}

// -------------------------------------------------------------------

// UntranslatableSection

// uint64 start_index = 1;
inline void UntranslatableSection::clear_start_index() {
  start_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UntranslatableSection::start_index() const {
  // @@protoc_insertion_point(field_get:aapt.pb.UntranslatableSection.start_index)
  return start_index_;
}
inline void UntranslatableSection::set_start_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.UntranslatableSection.start_index)
}

// uint64 end_index = 2;
inline void UntranslatableSection::clear_end_index() {
  end_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UntranslatableSection::end_index() const {
  // @@protoc_insertion_point(field_get:aapt.pb.UntranslatableSection.end_index)
  return end_index_;
}
inline void UntranslatableSection::set_end_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_index_ = value;
  // @@protoc_insertion_point(field_set:aapt.pb.UntranslatableSection.end_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace aapt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::aapt::pb::Visibility_Level> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aapt::pb::Visibility_Level>() {
  return ::aapt::pb::Visibility_Level_descriptor();
}
template <> struct is_proto_enum< ::aapt::pb::OverlayableItem_Policy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aapt::pb::OverlayableItem_Policy>() {
  return ::aapt::pb::OverlayableItem_Policy_descriptor();
}
template <> struct is_proto_enum< ::aapt::pb::Reference_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aapt::pb::Reference_Type>() {
  return ::aapt::pb::Reference_Type_descriptor();
}
template <> struct is_proto_enum< ::aapt::pb::FileReference_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aapt::pb::FileReference_Type>() {
  return ::aapt::pb::FileReference_Type_descriptor();
}
template <> struct is_proto_enum< ::aapt::pb::Attribute_FormatFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aapt::pb::Attribute_FormatFlags>() {
  return ::aapt::pb::Attribute_FormatFlags_descriptor();
}
template <> struct is_proto_enum< ::aapt::pb::Plural_Arity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aapt::pb::Plural_Arity>() {
  return ::aapt::pb::Plural_Arity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2ftools_2faapt2_2fResources_2eproto
