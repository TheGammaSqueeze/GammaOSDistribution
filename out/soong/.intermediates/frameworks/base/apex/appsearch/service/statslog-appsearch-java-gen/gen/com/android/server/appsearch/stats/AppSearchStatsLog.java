// This file is autogenerated

package com.android.server.appsearch.stats;


import android.util.StatsEvent;
import android.util.StatsLog;


/**
 * Utility class for logging statistics events.
 */
public class AppSearchStatsLog {
    // Constants for atom codes.

    /**
     * AppSearchCallStatsReported app_search_call_stats_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_SEARCH_CALL_STATS_REPORTED, int sampling_interval, int num_skipped_sample, int uid, int database, int status_code, int total_latency_millis, int call_type, int estimated_binder_latency_millis, int num_operations_succeeded, int num_operations_failed);<br>
     */
    public static final int APP_SEARCH_CALL_STATS_REPORTED = 347;

    /**
     * AppSearchPutDocumentStatsReported app_search_put_document_stats_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED, int sampling_interval, int num_skipped_sample, int uid, int database, int status_code, int total_latency_millis, int generate_document_proto_latency_millis, int rewrite_document_types_latency_millis, int native_latency_millis, int native_document_store_latency_millis, int native_index_latency_millis, int native_index_merge_latency_millis, int native_document_size_bytes, int native_num_tokens_indexed, boolean native_exceeded_max_num_tokens);<br>
     */
    public static final int APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED = 348;

    /**
     * AppSearchInitializeStatsReported app_search_initialize_stats_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_SEARCH_INITIALIZE_STATS_REPORTED, int sampling_interval, int num_skipped_sample, int uid, int status_code, int total_latency_millis, boolean has_desync, int prepare_schema_and_namespaces_latency_millis, int prepare_visibility_file_latency_millis, int native_latency_millis, int native_document_store_recovery_cause, int native_index_restoration_cause, int native_schema_store_recovery_cause, int native_document_store_recovery_latency_millis, int native_index_restoration_latency_millis, int native_schema_store_recovery_latency_millis, int native_document_store_data_status, int native_num_documents, int native_num_schema_types, boolean has_reset, int reset_status_code);<br>
     */
    public static final int APP_SEARCH_INITIALIZE_STATS_REPORTED = 371;

    /**
     * AppSearchQueryStatsReported app_search_query_stats_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_SEARCH_QUERY_STATS_REPORTED, int sampling_interval, int num_skipped_sample, int uid, int database, int status_code, int total_latency_millis, int rewrite_search_spec_latency_millis, int rewrite_search_result_latency_millis, int visibility_scope, int native_latency_millis, int native_num_terms, int native_query_length, int native_num_namespaces_filtered, int native_num_schema_types_filtered, int native_requested_page_size, int native_num_results_returned_current_page, boolean native_is_first_page, int native_parse_query_latency_millis, int native_ranking_strategy, int native_num_documents_scored, int native_scoring_latency_millis, int native_ranking_latency_millis, int native_document_retrieval_latency_millis, int native_num_results_with_snippets);<br>
     */
    public static final int APP_SEARCH_QUERY_STATS_REPORTED = 372;

    /**
     * AppSearchRemoveStatsReported app_search_remove_stats_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_SEARCH_REMOVE_STATS_REPORTED, int sampling_interval, int num_previous_skipped_sample, int uid, int database, int status_code, int total_latency_millis, int native_latency_millis, int native_delete_type, int native_num_documents_deleted);<br>
     */
    public static final int APP_SEARCH_REMOVE_STATS_REPORTED = 377;

    /**
     * AppSearchOptimizeStatsReported app_search_optimize_stats_reported<br>
     * Usage: StatsLog.write(StatsLog.APP_SEARCH_OPTIMIZE_STATS_REPORTED, int sampling_interval, int num_previous_skipped_sample, int status_code, int total_latency_millis, int native_latency_millis, int native_document_store_optimize_latency_millis, int native_index_restoration_latency_millis, int native_num_original_documents, int native_num_deleted_documents, int native_num_expired_documents, long native_storage_size_before_bytes, long native_storage_size_after_bytes, long native_time_since_last_optimize_millis);<br>
     */
    public static final int APP_SEARCH_OPTIMIZE_STATS_REPORTED = 383;

    /**
     * AppSearchStorageInfo app_search_storage_info<br>
     * Usage: StatsLog.write(StatsLog.APP_SEARCH_STORAGE_INFO, int user, long total_storage_size_bytes, byte[] document_storage_info, byte[] schema_store_storage_info, byte[] index_storage_info);<br>
     */
    public static final int APP_SEARCH_STORAGE_INFO = 10116;

    // Constants for enum values.

    // Annotation constants.
    public static final byte ANNOTATION_ID_IS_UID = StatsLog.ANNOTATION_ID_IS_UID;
    public static final byte ANNOTATION_ID_TRUNCATE_TIMESTAMP = StatsLog.ANNOTATION_ID_TRUNCATE_TIMESTAMP;
    public static final byte ANNOTATION_ID_PRIMARY_FIELD = StatsLog.ANNOTATION_ID_PRIMARY_FIELD;
    public static final byte ANNOTATION_ID_EXCLUSIVE_STATE = StatsLog.ANNOTATION_ID_EXCLUSIVE_STATE;
    public static final byte ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID = StatsLog.ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID;
    public static final byte ANNOTATION_ID_TRIGGER_STATE_RESET = StatsLog.ANNOTATION_ID_TRIGGER_STATE_RESET;
    public static final byte ANNOTATION_ID_STATE_NESTED = StatsLog.ANNOTATION_ID_STATE_NESTED;

    // Write methods
    public static void write(int code, int arg1, int arg2, int arg3, int arg4, int arg5, boolean arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15, int arg16, int arg17, int arg18, boolean arg19, int arg20) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        if (APP_SEARCH_INITIALIZE_STATS_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeBoolean(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);
        builder.writeInt(arg15);
        builder.writeInt(arg16);
        builder.writeInt(arg17);
        builder.writeInt(arg18);
        builder.writeBoolean(arg19);
        builder.writeInt(arg20);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        if (APP_SEARCH_REMOVE_STATS_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        if (APP_SEARCH_CALL_STATS_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, boolean arg15) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        if (APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);
        builder.writeBoolean(arg15);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15, int arg16, boolean arg17, int arg18, int arg19, int arg20, int arg21, int arg22, int arg23, int arg24) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        if (APP_SEARCH_QUERY_STATS_REPORTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeInt(arg11);
        builder.writeInt(arg12);
        builder.writeInt(arg13);
        builder.writeInt(arg14);
        builder.writeInt(arg15);
        builder.writeInt(arg16);
        builder.writeBoolean(arg17);
        builder.writeInt(arg18);
        builder.writeInt(arg19);
        builder.writeInt(arg20);
        builder.writeInt(arg21);
        builder.writeInt(arg22);
        builder.writeInt(arg23);
        builder.writeInt(arg24);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, long arg11, long arg12, long arg13) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeInt(arg5);
        builder.writeInt(arg6);
        builder.writeInt(arg7);
        builder.writeInt(arg8);
        builder.writeInt(arg9);
        builder.writeInt(arg10);
        builder.writeLong(arg11);
        builder.writeLong(arg12);
        builder.writeLong(arg13);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, long arg2, byte[] arg3, byte[] arg4, byte[] arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeLong(arg2);
        builder.writeByteArray(null == arg3 ? new byte[0] : arg3);
        builder.writeByteArray(null == arg4 ? new byte[0] : arg4);
        builder.writeByteArray(null == arg5 ? new byte[0] : arg5);

        return builder.build();
    }

}
