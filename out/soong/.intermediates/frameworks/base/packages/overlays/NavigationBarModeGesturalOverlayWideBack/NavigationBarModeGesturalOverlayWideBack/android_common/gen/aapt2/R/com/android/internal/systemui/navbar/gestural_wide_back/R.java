/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.android.internal.systemui.navbar.gestural_wide_back;

public final class R {
  public static final class bool {
    /**
     * Controls whether seamless rotation should be allowed even though the navbar can move
     * (which normally prevents seamless rotation).
     */
    public static final int config_allowSeamlessRotationDespiteNavBarMoving=0x7f010000;
    /**
     * If true, attach the navigation bar to the app during app transition
     */
    public static final int config_attachNavBarToAppDuringTransition=0x7f010001;
    /**
     * Controls whether the side edge gestures can always trigger the transient nav bar to
     * show.
     */
    public static final int config_navBarAlwaysShowOnSideEdgeGesture=0x7f010002;
    /**
     * Controls whether the nav bar can move from the bottom to the side in landscape.
     * Only applies if the device display is not square.
     */
    public static final int config_navBarCanMove=0x7f010003;
    /**
     * Controls whether the navbar needs a scrim with
     * {@link Window#setEnsuringNavigationBarContrastWhenTransparent}.
     */
    public static final int config_navBarNeedsScrim=0x7f010004;
    /**
     * Controls whether the navigation bar lets through taps.
     */
    public static final int config_navBarTapThrough=0x7f010005;
  }
  public static final class dimen {
    /**
     * Controls the size of the back gesture inset.
     */
    public static final int config_backGestureInset=0x7f020000;
    /**
     * Height of the bottom navigation / system bar.
     */
    public static final int navigation_bar_frame_height=0x7f020001;
    /**
     * The height of the bottom navigation gesture area.
     */
    public static final int navigation_bar_gesture_height=0x7f020002;
    /**
     * Height of the bottom navigation / system bar.
     */
    public static final int navigation_bar_height=0x7f020003;
    /**
     * Height of the bottom navigation bar in portrait; often the same as @dimen/navigation_bar_height
     */
    public static final int navigation_bar_height_landscape=0x7f020004;
    /**
     * Width of the navigation bar when it is placed vertically on the screen
     */
    public static final int navigation_bar_width=0x7f020005;
  }
  public static final class integer {
    /**
     * Controls the navigation bar interaction mode:
     * 0: 3 button mode (back, home, overview buttons)
     * 1: 2 button mode (back, home buttons + swipe up for overview)
     * 2: gestures only for back, home and overview
     */
    public static final int config_navBarInteractionMode=0x7f030000;
    /**
     * Controls the opacity of the navigation bar depending on the visibility of the
     * various workspace stacks.
     * 0 - Nav bar is always opaque when either the freeform stack or docked stack is visible.
     * 1 - Nav bar is always translucent when the freeform stack is visible, otherwise always
     * opaque.
     * 2 - Nav bar is never forced opaque.
     */
    public static final int config_navBarOpacityMode=0x7f030001;
  }
  public static final class string {
    /**
     * Name of overlay [CHAR LIMIT=64]
     */
    public static final int navigation_bar_mode_title=0x7f040000;
  }
}