/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package android.support.fragment;

public final class R {
  public static final class array {
    /**
     * Color mode labels.
     */
    public static final int color_mode_labels=0x7f010000;
    /**
     * Duplex mode labels.
     */
    public static final int duplex_mode_labels=0x7f010001;
    public static final int mediasize_to_standard_map=0x7f010002;
    /**
     * Orientation labels.
     */
    public static final int orientation_labels=0x7f010003;
    public static final int page_options_values=0x7f010004;
  }
  public static final class attr {
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int columnCount=0x7f020000;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int coordinatorLayoutStyle=0x7f020001;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fastScrollEnabled=0x7f020002;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollHorizontalThumbDrawable=0x7f020003;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollHorizontalTrackDrawable=0x7f020004;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollVerticalThumbDrawable=0x7f020005;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollVerticalTrackDrawable=0x7f020006;
    /**
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int font=0x7f020007;
    /**
     * The authority of the Font Provider to be used for the request.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontProviderAuthority=0x7f020008;
    /**
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fontProviderCerts=0x7f020009;
    /**
     * The strategy to be used when fetching font data from a font provider in XML layouts.
     * This attribute is ignored when the resource is loaded from code, as it is equivalent to the
     * choice of API between {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int)} (blocking) and
     * {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int, FontCallback, Handler)}
     * (async).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
     * First, check the local cache, then if the requeted font is not cached, trigger a
     * request the font and continue with layout inflation. Once the font fetch succeeds, the
     * target text view will be refreshed with the downloaded font data. The
     * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
     * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
     * First, check the local cache, then if the requested font is not cached, request the
     * font from the provider and wait until it is finished.  You can change the length of
     * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
     * default typeface will be used instead.</td></tr>
     * </table>
     */
    public static final int fontProviderFetchStrategy=0x7f02000a;
    /**
     * The length of the timeout during fetching.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
     * timeout and wait until a reply is received from the font provider.</td></tr>
     * </table>
     */
    public static final int fontProviderFetchTimeout=0x7f02000b;
    /**
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontProviderPackage=0x7f02000c;
    /**
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontProviderQuery=0x7f02000d;
    /**
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int fontStyle=0x7f02000e;
    /**
     * The variation settings to be applied to the font. The string should be in the following
     * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
     * used, or the font used does not support variation settings, this attribute needs not be
     * specified.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontVariationSettings=0x7f02000f;
    /**
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int fontWeight=0x7f020010;
    /**
     * A reference to an array of integers representing the
     * locations of horizontal keylines in dp from the starting edge.
     * Child views can refer to these keylines for alignment using
     * layout_keyline="index" where index is a 0-based index into
     * this array.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keylines=0x7f020011;
    /**
     * Class name of the Layout Manager to be used.
     * <p/>
     * The class must extandroidx.recyclerview.widget.RecyclerViewView$LayoutManager
     * and have either a default constructor or constructor with the signature
     * (android.content.Context, android.util.AttributeSet, int, int).
     * <p/>
     * If the name starts with a '.', application package is prefixed.
     * Else, if the name contains a '.', the classname is assumed to be a full class name.
     * Else, the recycler view package naandroidx.appcompat.widgetdget) is prefixed.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int layoutManager=0x7f020012;
    /**
     * The id of an anchor view that this view should position relative to.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_anchor=0x7f020013;
    /**
     * Specifies how an object should position relative to an anchor, on both the X and Y axes,
     * within its parent's bounds.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int layout_anchorGravity=0x7f020014;
    /**
     * The class name of a Behavior class defining special runtime behavior
     * for this child view.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int layout_behavior=0x7f020015;
    /**
     * Specifies how this view dodges the inset edges of the CoordinatorLayout.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>77</td><td>Dodge all the inset edges.</td></tr>
     * <tr><td>bottom</td><td>50</td><td>Dodge the bottom inset edge.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Dodge the end inset edge.</td></tr>
     * <tr><td>left</td><td>3</td><td>Dodge the left inset edge.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't dodge any edges</td></tr>
     * <tr><td>right</td><td>5</td><td>Dodge the right inset edge.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Dodge the start inset edge.</td></tr>
     * <tr><td>top</td><td>30</td><td>Dodge the top inset edge.</td></tr>
     * </table>
     */
    public static final int layout_dodgeInsetEdges=0x7f020016;
    /**
     * Specifies how this view insets the CoordinatorLayout and make some other views
     * dodge it.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Inset the bottom edge.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Inset the end edge.</td></tr>
     * <tr><td>left</td><td>3</td><td>Inset the left edge.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't inset.</td></tr>
     * <tr><td>right</td><td>5</td><td>Inset the right edge.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Inset the start edge.</td></tr>
     * <tr><td>top</td><td>30</td><td>Inset the top edge.</td></tr>
     * </table>
     */
    public static final int layout_insetEdge=0x7f020017;
    /**
     * The index of a keyline this view should position relative to.
     * android:layout_gravity will affect how the view aligns to the
     * specified keyline.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_keyline=0x7f020018;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int reverseLayout=0x7f020019;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int spanCount=0x7f02001a;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int stackFromEnd=0x7f02001b;
    /**
     * Drawable to display behind the status bar when the view is set to draw behind it.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int statusBarBackground=0x7f02001c;
    /**
     * The index of the font in the tcc font file. If the font file referenced is not in the
     * tcc format, this attribute needs not be specified.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int ttcIndex=0x7f02001d;
  }
  public static final class color {
    public static final int material_grey_500=0x7f030000;
    public static final int notification_action_color_filter=0x7f030001;
    public static final int notification_icon_bg_color=0x7f030002;
    public static final int notification_material_background_media_default_color=0x7f030003;
    public static final int primary_text_default_material_dark=0x7f030004;
    public static final int print_preview_scrim_color=0x7f030005;
    public static final int ripple_material_light=0x7f030006;
    public static final int secondary_text_default_material_dark=0x7f030007;
    public static final int secondary_text_default_material_light=0x7f030008;
    public static final int unselected_page_background_color=0x7f030009;
  }
  public static final class dimen {
    public static final int compat_button_inset_horizontal_material=0x7f040000;
    public static final int compat_button_inset_vertical_material=0x7f040001;
    public static final int compat_button_padding_horizontal_material=0x7f040002;
    public static final int compat_button_padding_vertical_material=0x7f040003;
    public static final int compat_control_corner_material=0x7f040004;
    public static final int compat_notification_large_icon_max_height=0x7f040005;
    public static final int compat_notification_large_icon_max_width=0x7f040006;
    public static final int fastscroll_default_thickness=0x7f040007;
    public static final int fastscroll_margin=0x7f040008;
    public static final int fastscroll_minimum_range=0x7f040009;
    public static final int item_touch_helper_max_drag_scroll_per_frame=0x7f04000a;
    public static final int item_touch_helper_swipe_escape_max_velocity=0x7f04000b;
    public static final int item_touch_helper_swipe_escape_velocity=0x7f04000c;
    public static final int notification_action_icon_size=0x7f04000d;
    public static final int notification_action_text_size=0x7f04000e;
    public static final int notification_big_circle_margin=0x7f04000f;
    public static final int notification_content_margin_start=0x7f040010;
    public static final int notification_large_icon_height=0x7f040011;
    public static final int notification_large_icon_width=0x7f040012;
    public static final int notification_main_column_padding_top=0x7f040013;
    public static final int notification_media_narrow_margin=0x7f040014;
    public static final int notification_right_icon_size=0x7f040015;
    public static final int notification_right_side_padding_top=0x7f040016;
    public static final int notification_small_icon_background_padding=0x7f040017;
    public static final int notification_small_icon_size_as_large=0x7f040018;
    public static final int notification_subtext_size=0x7f040019;
    public static final int notification_top_pad=0x7f04001a;
    public static final int notification_top_pad_large_text=0x7f04001b;
    public static final int preview_controls_elevation=0x7f04001c;
    public static final int preview_destination_spinner_width=0x7f04001d;
    public static final int preview_list_padding=0x7f04001e;
    public static final int preview_page_footer_height=0x7f04001f;
    public static final int preview_page_margin=0x7f040020;
    public static final int preview_page_min_width=0x7f040021;
    public static final int print_dialog_frame_max_width_dip=0x7f040022;
    public static final int selected_page_elevation=0x7f040023;
    public static final int subtitle_corner_radius=0x7f040024;
    public static final int subtitle_outline_width=0x7f040025;
    public static final int subtitle_shadow_offset=0x7f040026;
    public static final int subtitle_shadow_radius=0x7f040027;
    public static final int unselected_page_elevation=0x7f040028;
  }
  public static final class drawable {
    public static final int app_icon_foreground=0x7f050000;
    public static final int ic_add=0x7f050001;
    public static final int ic_app_icon=0x7f050002;
    public static final int ic_check_circle=0x7f050003;
    public static final int ic_clear=0x7f050004;
    public static final int ic_download_from_market=0x7f050005;
    public static final int ic_expand_less=0x7f050006;
    public static final int ic_expand_more=0x7f050007;
    public static final int ic_info=0x7f050008;
    public static final int ic_menu_savetopdf=0x7f050009;
    public static final int ic_pdf_printer=0x7f05000a;
    public static final int ic_remove_circle=0x7f05000b;
    public static final int notification_action_background=0x7f05000c;
    public static final int notification_bg=0x7f05000d;
    public static final int notification_bg_low=0x7f05000e;
    public static final int notification_bg_low_normal=0x7f05000f;
    public static final int notification_bg_low_pressed=0x7f050010;
    public static final int notification_bg_normal=0x7f050011;
    public static final int notification_bg_normal_pressed=0x7f050012;
    public static final int notification_icon_background=0x7f050013;
    public static final int notification_template_icon_bg=0x7f050014;
    public static final int notification_template_icon_low_bg=0x7f050015;
    public static final int notification_tile_bg=0x7f050016;
    public static final int notify_panel_notification_icon_bg=0x7f050017;
    public static final int print_button=0x7f050018;
    public static final int print_button_background=0x7f050019;
  }
  public static final class id {
    public static final int action0=0x7f060000;
    public static final int action_button=0x7f060001;
    public static final int action_container=0x7f060002;
    public static final int action_divider=0x7f060003;
    public static final int action_image=0x7f060004;
    public static final int action_search=0x7f060005;
    public static final int action_text=0x7f060006;
    public static final int actions=0x7f060007;
    public static final int all=0x7f060008;
    public static final int async=0x7f060009;
    public static final int blocking=0x7f06000a;
    public static final int bottom=0x7f06000b;
    public static final int button=0x7f06000c;
    public static final int cancel_action=0x7f06000d;
    public static final int center=0x7f06000e;
    public static final int center_horizontal=0x7f06000f;
    public static final int center_vertical=0x7f060010;
    public static final int chronometer=0x7f060011;
    public static final int clip_horizontal=0x7f060012;
    public static final int clip_vertical=0x7f060013;
    public static final int color_spinner=0x7f060014;
    public static final int copies_count_summary=0x7f060015;
    public static final int copies_edittext=0x7f060016;
    public static final int destination_spinner=0x7f060017;
    public static final int draggable_content=0x7f060018;
    public static final int duplex_spinner=0x7f060019;
    public static final int dynamic_content=0x7f06001a;
    public static final int embedded_content_container=0x7f06001b;
    public static final int embedded_content_scrim=0x7f06001c;
    public static final int empty_print_state=0x7f06001d;
    public static final int end=0x7f06001e;
    public static final int end_padder=0x7f06001f;
    public static final int expand_collapse_handle=0x7f060020;
    public static final int expand_collapse_icon=0x7f060021;
    public static final int fill=0x7f060022;
    public static final int fill_horizontal=0x7f060023;
    public static final int fill_vertical=0x7f060024;
    public static final int forever=0x7f060025;
    public static final int icon=0x7f060026;
    public static final int icon_group=0x7f060027;
    public static final int info=0x7f060028;
    public static final int italic=0x7f060029;
    public static final int item_touch_helper_previous_elevation=0x7f06002a;
    public static final int left=0x7f06002b;
    public static final int line1=0x7f06002c;
    public static final int line3=0x7f06002d;
    public static final int media_actions=0x7f06002e;
    public static final int message=0x7f06002f;
    public static final int more_info=0x7f060030;
    public static final int more_options_button=0x7f060031;
    public static final int none=0x7f060032;
    public static final int normal=0x7f060033;
    public static final int notification_background=0x7f060034;
    public static final int notification_main_column=0x7f060035;
    public static final int notification_main_column_container=0x7f060036;
    public static final int options_container=0x7f060037;
    public static final int options_content=0x7f060038;
    public static final int orientation_spinner=0x7f060039;
    public static final int page_content=0x7f06003a;
    public static final int page_footer=0x7f06003b;
    public static final int page_number=0x7f06003c;
    public static final int page_range_edittext=0x7f06003d;
    public static final int page_range_title=0x7f06003e;
    public static final int page_selector=0x7f06003f;
    public static final int paper_size_spinner=0x7f060040;
    public static final int paper_size_summary=0x7f060041;
    public static final int preview_content=0x7f060042;
    public static final int preview_page=0x7f060043;
    public static final int print_button=0x7f060044;
    public static final int progress_bar=0x7f060045;
    public static final int range_options_spinner=0x7f060046;
    public static final int right=0x7f060047;
    public static final int right_icon=0x7f060048;
    public static final int right_side=0x7f060049;
    public static final int start=0x7f06004a;
    public static final int static_content=0x7f06004b;
    public static final int status_bar_latest_event_content=0x7f06004c;
    public static final int subtitle=0x7f06004d;
    public static final int summary_content=0x7f06004e;
    public static final int tag_transition_group=0x7f06004f;
    public static final int tag_unhandled_key_event_manager=0x7f060050;
    public static final int tag_unhandled_key_listeners=0x7f060051;
    public static final int text=0x7f060052;
    public static final int text2=0x7f060053;
    public static final int time=0x7f060054;
    public static final int title=0x7f060055;
    public static final int top=0x7f060056;
  }
  public static final class integer {
    public static final int cancel_button_image_alpha=0x7f070000;
    public static final int page_option_value_all=0x7f070001;
    public static final int page_option_value_page_range=0x7f070002;
    public static final int preview_page_per_row_count=0x7f070003;
    public static final int print_option_column_count=0x7f070004;
    public static final int status_bar_notification_info_maxnum=0x7f070005;
  }
  public static final class layout {
    public static final int add_printer_activity=0x7f080000;
    public static final int add_printer_list_header=0x7f080001;
    public static final int add_printer_list_item=0x7f080002;
    public static final int all_print_services_list_item=0x7f080003;
    public static final int disabled_print_services_list_item=0x7f080004;
    public static final int enabled_print_services_list_item=0x7f080005;
    public static final int no_print_services_message=0x7f080006;
    public static final int notification_action=0x7f080007;
    public static final int notification_action_tombstone=0x7f080008;
    public static final int notification_media_action=0x7f080009;
    public static final int notification_media_cancel_action=0x7f08000a;
    public static final int notification_template_big_media=0x7f08000b;
    public static final int notification_template_big_media_custom=0x7f08000c;
    public static final int notification_template_big_media_narrow=0x7f08000d;
    public static final int notification_template_big_media_narrow_custom=0x7f08000e;
    public static final int notification_template_custom_big=0x7f08000f;
    public static final int notification_template_icon_group=0x7f080010;
    public static final int notification_template_lines_media=0x7f080011;
    public static final int notification_template_media=0x7f080012;
    public static final int notification_template_media_custom=0x7f080013;
    public static final int notification_template_part_chronometer=0x7f080014;
    public static final int notification_template_part_time=0x7f080015;
    public static final int preview_page=0x7f080016;
    public static final int preview_page_error=0x7f080017;
    public static final int preview_page_loading=0x7f080018;
    public static final int preview_page_selected=0x7f080019;
    public static final int print_activity=0x7f08001a;
    public static final int print_activity_controls=0x7f08001b;
    public static final int print_error_fragment=0x7f08001c;
    public static final int print_progress_fragment=0x7f08001d;
    public static final int print_service_recommendations_list_item=0x7f08001e;
    public static final int printer_dropdown_item=0x7f08001f;
    public static final int printer_dropdown_prompt=0x7f080020;
    public static final int printer_list_item=0x7f080021;
    public static final int select_printer_activity=0x7f080022;
  }
  public static final class menu {
    public static final int select_printer_activity=0x7f090000;
  }
  public static final class plurals {
    /**
     * Utterance to announce a change in the number of matches during a search. This is spoken to a blind user. [CHAR LIMIT=none]
     */
    public static final int print_search_result_count_utterance=0x7f0a0000;
    /**
     * Subtitle for a print service recommendation. [CHAR LIMIT=50]
     */
    public static final int print_services_recommendation_subtitle=0x7f0a0001;
  }
  public static final class string {
    /**
     * Title of the button to install a print service. [CHAR LIMIT=25]
     */
    public static final int add_print_service_label=0x7f0b0000;
    /**
     * Title for the open all printers UI option in the printer list. [CHAR LIMIT=30]
     */
    public static final int all_printers=0x7f0b0001;
    /**
     * Title for the select printer activity. [CHAR LIMIT=30]
     */
    public static final int all_printers_label=0x7f0b0002;
    /**
     * Label for the list item that links to the list of all print services. [CHAR LIMIT=50]
     */
    public static final int all_services_title=0x7f0b0003;
    /**
     * Title of the PrintSpooler application. [CHAR LIMIT=50]
     */
    public static final int app_label=0x7f0b0004;
    /**
     * Template for the notification label for a blocked print job. [CHAR LIMIT=25]
     */
    public static final int blocked_notification_title_template=0x7f0b0005;
    /**
     * Label for the notification button for cancelling a print job. [CHAR LIMIT=25]
     */
    public static final int cancel=0x7f0b0006;
    /**
     * Template for the notification label for a cancelling print job. [CHAR LIMIT=25]
     */
    public static final int cancelling_notification_title_template=0x7f0b0007;
    /**
     * Subtitle for services that cannot add printers. [CHAR LIMIT=50]
     */
    public static final int cannot_add_printer=0x7f0b0008;
    /**
     * Description for the handle to collapse all print options - spoken to the user. [CHAR LIMIT=none]
     */
    public static final int collapse_handle=0x7f0b0009;
    /**
     * Notification that we could not create a file name for the printed PDF. [CHAR LIMIT=50]
     */
    public static final int could_not_create_file=0x7f0b000a;
    /**
     * Template for the message that shows the current page out of the total number of pages [CHAR LIMIT=none]
     */
    public static final int current_page_template=0x7f0b000b;
    /**
     * Label of the destination widget. [CHAR LIMIT=20]
     */
    public static final int destination_default_text=0x7f0b000c;
    /**
     * Header for the list of disabled print services. [CHAR LIMIT=50]
     */
    public static final int disabled_services_title=0x7f0b000d;
    /**
     * Subtitle for disabled services. [CHAR LIMIT=50]
     */
    public static final int enable_print_service=0x7f0b000e;
    /**
     * Header for the list of enabled print services. [CHAR LIMIT=50]
     */
    public static final int enabled_services_title=0x7f0b000f;
    /**
     * Description for the handle to expand all print options - spoken to the user. [CHAR LIMIT=none]
     */
    public static final int expand_handle=0x7f0b0010;
    /**
     * Template for the notification label for a failed print job. [CHAR LIMIT=25]
     */
    public static final int failed_notification_title_template=0x7f0b0011;
    /**
     * Title for the temporary dialog show while an app is generating a print job. [CHAR LIMIT=30]
     */
    public static final int generating_print_job=0x7f0b0012;
    /**
     * Title for the pring preview button if there is no PDF viewer isntalled. [CHAR LIMIT=50]
     */
    public static final int install_for_print_preview=0x7f0b0013;
    /**
     * Label of the color mode widget. [CHAR LIMIT=20]
     */
    public static final int label_color=0x7f0b0014;
    /**
     * Label of the copies count widget. [CHAR LIMIT=20]
     */
    public static final int label_copies=0x7f0b0015;
    /**
     * Label of the copies count for the print options summary. [CHAR LIMIT=20]
     */
    public static final int label_copies_summary=0x7f0b0016;
    /**
     * Label of the destination widget. [CHAR LIMIT=20]
     */
    public static final int label_destination=0x7f0b0017;
    /**
     * Label of the printer mode to print on both sides of paper. [CHAR LIMIT=20]
     */
    public static final int label_duplex=0x7f0b0018;
    /**
     * Label of the orientation widget. [CHAR LIMIT=20]
     */
    public static final int label_orientation=0x7f0b0019;
    /**
     * Label of the page selection widget. [CHAR LIMIT=20]
     */
    public static final int label_pages=0x7f0b001a;
    /**
     * Label of the paper size widget. [CHAR LIMIT=20]
     */
    public static final int label_paper_size=0x7f0b001b;
    /**
     * Label of the paper size for the print options summary. [CHAR LIMIT=20]
     */
    public static final int label_paper_size_summary=0x7f0b001c;
    /**
     * Locale specific values
     */
    public static final int mediasize_default=0x7f0b001d;
    public static final int mediasize_standard=0x7f0b001e;
    public static final int mediasize_standard_china=0x7f0b001f;
    /**
     * Media size standards
     */
    public static final int mediasize_standard_iso=0x7f0b0020;
    public static final int mediasize_standard_japan=0x7f0b0021;
    public static final int mediasize_standard_north_america=0x7f0b0022;
    /**
     * Label of the print dialog's button for more print options. [CHAR LIMIT=25]
     */
    public static final int more_options_button=0x7f0b0023;
    /**
     * Message that there is no connection to a printer. [CHAR LIMIT=40]
     */
    public static final int no_connection_to_printer=0x7f0b0024;
    /**
     * Label for the notification channel that contains print jobs with problems. [CHAR LIMIT=40]
     */
    public static final int notification_channel_failure=0x7f0b0025;
    /**
     * Label for the notification channel that contains print jobs without problems. [CHAR LIMIT=40]
     */
    public static final int notification_channel_progress=0x7f0b0026;
    /**
     * Description of the current page - spoken to the user [CHAR LIMIT=none]
     */
    public static final int page_description_template=0x7f0b0027;
    /**
     * Page range exmple used as a hint of how to specify such. [CHAR LIMIT=20]
     */
    public static final int pages_range_example=0x7f0b0028;
    /**
     * Label of add printers button when no printers are found. [CHAR LIMIT=25]
     */
    public static final int print_add_printer=0x7f0b0029;
    /**
     * Description for the print button - spoken to the user. [CHAR LIMIT=none]
     */
    public static final int print_button=0x7f0b002a;
    /**
     * Message for the case when a preview of a page cannot be loaded because the printing app
     * provided a broken print preview rendering for this page. [CHAR LIMIT=50]
     */
    public static final int print_cannot_load_page=0x7f0b002b;
    /**
     * Title for the print dialog announced to the user for accessibility. Not shown in the UI. [CHAR LIMIT=none]
     */
    public static final int print_dialog=0x7f0b002c;
    /**
     * Default message for an error while generating a print job. [CHAR LIMIT=50]
     */
    public static final int print_error_default_message=0x7f0b002d;
    /**
     * Message for the currently selected printer being unavailable. [CHAR LIMIT=100]
     */
    public static final int print_error_printer_unavailable=0x7f0b002e;
    /**
     * Label for the retry button in the error message. [CHAR LIMIT=50]
     */
    public static final int print_error_retry=0x7f0b002f;
    /**
     * Title of the menu item to forget a printer. [CHAR LIMIT=25]
     */
    public static final int print_forget_printer=0x7f0b0030;
    /**
     * Title for the prompt shown as a placeholder if there are no print services. [CHAR LIMIT=50]
     */
    public static final int print_no_print_services=0x7f0b0031;
    /**
     * Title for the prompt shown as a placeholder if there are no printers while searching. [CHAR LIMIT=50]
     */
    public static final int print_no_printers=0x7f0b0032;
    /**
     * Message to announce print options are collapsed - spoken to the user. [CHAR LIMIT=none]
     */
    public static final int print_options_collapsed=0x7f0b0033;
    /**
     * Message to announce print options are expanded - spoken to the user. [CHAR LIMIT=none]
     */
    public static final int print_options_expanded=0x7f0b0034;
    /**
     * Message long running operation when preparing print preview. [CHAR LIMIT=50]
     */
    public static final int print_preparing_preview=0x7f0b0035;
    /**
     * Title for the pring preview button .[CHAR LIMIT=30]
     */
    public static final int print_preview=0x7f0b0036;
    /**
     * Utterance to announce that the search box is hidden. This is spoken to a blind user. [CHAR LIMIT=none]
     */
    public static final int print_search_box_hidden_utterance=0x7f0b0037;
    /**
     * Utterance to announce that the search box is shown. This is spoken to a blind user. [CHAR LIMIT=none]
     */
    public static final int print_search_box_shown_utterance=0x7f0b0038;
    /**
     * Title for the prompt shown as a placeholder if no printers are found while not searching. [CHAR LIMIT=50]
     */
    public static final int print_searching_for_printers=0x7f0b0039;
    /**
     * Title of the menu item to select a printer. [CHAR LIMIT=25]
     */
    public static final int print_select_printer=0x7f0b003a;
    /**
     * Summary for a warning message about security implications of using a print service,
     * displayed as a dialog message when the user prints using a print service that has not been
     * used before. [CHAR LIMIT=NONE]
     */
    public static final int print_service_security_warning_summary=0x7f0b003b;
    /**
     * Title for a warning message about security implications of using a print service,
     * displayed as a dialog message when the user prints using a print service that has not been
     * used before. [CHAR LIMIT=NONE]
     */
    public static final int print_service_security_warning_title=0x7f0b003c;
    /**
     * Notification that print services as disabled. [CHAR LIMIT=50]
     */
    public static final int print_services_disabled_toast=0x7f0b003d;
    /**
     * Message for an error when trying to print to a PDF file. [CHAR LIMIT=50]
     */
    public static final int print_write_error_message=0x7f0b003e;
    /**
     * Template for an extended description of a printer. [CHAR LIMIT=50]
     */
    public static final int printer_extended_description_template=0x7f0b003f;
    /**
     * Description of printer info icon. [CHAR LIMIT=50]
     */
    public static final int printer_info_desc=0x7f0b0040;
    /**
     * Title of the message that the printing application crashed. [CHAR LIMIT=50]
     */
    public static final int printing_app_crashed=0x7f0b0041;
    /**
     * Template for the notification label for a printing print job. [CHAR LIMIT=25]
     */
    public static final int printing_notification_title_template=0x7f0b0042;
    /**
     * Label for an unknown reason for failed or blocked print job. [CHAR LIMIT=25]
     */
    public static final int reason_unknown=0x7f0b0043;
    /**
     * Header for the list of recommended print services. [CHAR LIMIT=50]
     */
    public static final int recommended_services_title=0x7f0b0044;
    /**
     * Label for the notification button for restarting a filed print job. [CHAR LIMIT=25]
     */
    public static final int restart=0x7f0b0045;
    /**
     * Title for the save as PDF option in the printer list. [CHAR LIMIT=30]
     */
    public static final int save_as_pdf=0x7f0b0046;
    /**
     * Description for the save to PDF button - spoken to the user. [CHAR LIMIT=none]
     */
    public static final int savetopdf_button=0x7f0b0047;
    /**
     * Title for the share action bar menu item. [CHAR LIMIT=20]
     */
    public static final int search=0x7f0b0048;
    /**
     * Subtitle for services that can add printers. [CHAR LIMIT=50]
     */
    public static final int select_to_add_printers=0x7f0b0049;
    public static final int status_bar_notification_info_overflow=0x7f0b004a;
    /**
     * Template for the message to announce the print options summary - spoken to the user. [CHAR LIMIT=none]
     */
    public static final int summary_template=0x7f0b004b;
    /**
     * Template for the all pages option in the page selection widget. [CHAR LIMIT=20]
     */
    public static final int template_all_pages=0x7f0b004c;
    /**
     * Template for the page range option in the page selection widget. [CHAR LIMIT=20]
     */
    public static final int template_page_range=0x7f0b004d;
    public static final int uri_package_details=0x7f0b004e;
  }
  public static final class style {
    public static final int ListItemSecondary=0x7f0c0000;
    public static final int ListSeparator=0x7f0c0001;
    public static final int TextAppearance_Compat_Notification=0x7f0c0002;
    public static final int TextAppearance_Compat_Notification_Info=0x7f0c0003;
    public static final int TextAppearance_Compat_Notification_Info_Media=0x7f0c0004;
    public static final int TextAppearance_Compat_Notification_Line2=0x7f0c0005;
    public static final int TextAppearance_Compat_Notification_Line2_Media=0x7f0c0006;
    public static final int TextAppearance_Compat_Notification_Media=0x7f0c0007;
    public static final int TextAppearance_Compat_Notification_Time=0x7f0c0008;
    public static final int TextAppearance_Compat_Notification_Time_Media=0x7f0c0009;
    public static final int TextAppearance_Compat_Notification_Title=0x7f0c000a;
    public static final int TextAppearance_Compat_Notification_Title_Media=0x7f0c000b;
    public static final int Theme_AddPrinterActivity=0x7f0c000c;
    public static final int Theme_PrintActivity=0x7f0c000d;
    public static final int Theme_SelectPrinterActivity=0x7f0c000e;
    public static final int Widget_Compat_NotificationActionContainer=0x7f0c000f;
    public static final int Widget_Compat_NotificationActionText=0x7f0c0010;
    public static final int Widget_Support_CoordinatorLayout=0x7f0c0011;
  }
  public static final class styleable {
    /**
     * Attributes that can be used with a CoordinatorLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CoordinatorLayout_keylines com.android.printspooler:keylines}</code></td><td>A reference to an array of integers representing the
     * locations of horizontal keylines in dp from the starting edge.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_statusBarBackground com.android.printspooler:statusBarBackground}</code></td><td>Drawable to display behind the status bar when the view is set to draw behind it.</td></tr>
     * </table>
     * @see #CoordinatorLayout_keylines
     * @see #CoordinatorLayout_statusBarBackground
     */
    public static final int[] CoordinatorLayout={
      0x7f020011, 0x7f02001c
    };
    /**
     * <p>
     * @attr description
     * A reference to an array of integers representing the
     * locations of horizontal keylines in dp from the starting edge.
     * Child views can refer to these keylines for alignment using
     * layout_keyline="index" where index is a 0-based index into
     * this array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.printspooler:keylines
     */
    public static final int CoordinatorLayout_keylines=0;
    /**
     * <p>
     * @attr description
     * Drawable to display behind the status bar when the view is set to draw behind it.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.printspooler:statusBarBackground
     */
    public static final int CoordinatorLayout_statusBarBackground=1;
    /**
     * Attributes that can be used with a CoordinatorLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_android_layout_gravity android:layout_gravity}</code></td><td></td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_anchor com.android.printspooler:layout_anchor}</code></td><td>The id of an anchor view that this view should position relative to.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_anchorGravity com.android.printspooler:layout_anchorGravity}</code></td><td>Specifies how an object should position relative to an anchor, on both the X and Y axes,
     * within its parent's bounds.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_behavior com.android.printspooler:layout_behavior}</code></td><td>The class name of a Behavior class defining special runtime behavior
     * for this child view.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_dodgeInsetEdges com.android.printspooler:layout_dodgeInsetEdges}</code></td><td>Specifies how this view dodges the inset edges of the CoordinatorLayout.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_insetEdge com.android.printspooler:layout_insetEdge}</code></td><td>Specifies how this view insets the CoordinatorLayout and make some other views
     * dodge it.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_keyline com.android.printspooler:layout_keyline}</code></td><td>The index of a keyline this view should position relative to.</td></tr>
     * </table>
     * @see #CoordinatorLayout_Layout_android_layout_gravity
     * @see #CoordinatorLayout_Layout_layout_anchor
     * @see #CoordinatorLayout_Layout_layout_anchorGravity
     * @see #CoordinatorLayout_Layout_layout_behavior
     * @see #CoordinatorLayout_Layout_layout_dodgeInsetEdges
     * @see #CoordinatorLayout_Layout_layout_insetEdge
     * @see #CoordinatorLayout_Layout_layout_keyline
     */
    public static final int[] CoordinatorLayout_Layout={
      0x010100b3, 0x7f020013, 0x7f020014, 0x7f020015, 
      0x7f020016, 0x7f020017, 0x7f020018
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#layout_gravity}
     * attribute's value can be found in the {@link #CoordinatorLayout_Layout} array.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td></td></tr>
     * <tr><td>center</td><td>11</td><td></td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td></td></tr>
     * <tr><td>center_vertical</td><td>10</td><td></td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td></td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td></td></tr>
     * <tr><td>end</td><td>800005</td><td></td></tr>
     * <tr><td>fill</td><td>77</td><td></td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td></td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td></td></tr>
     * <tr><td>left</td><td>3</td><td></td></tr>
     * <tr><td>right</td><td>5</td><td></td></tr>
     * <tr><td>start</td><td>800003</td><td></td></tr>
     * <tr><td>top</td><td>30</td><td></td></tr>
     * </table>
     *
     * @attr name android:layout_gravity
     */
    public static final int CoordinatorLayout_Layout_android_layout_gravity=0;
    /**
     * <p>
     * @attr description
     * The id of an anchor view that this view should position relative to.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.printspooler:layout_anchor
     */
    public static final int CoordinatorLayout_Layout_layout_anchor=1;
    /**
     * <p>
     * @attr description
     * Specifies how an object should position relative to an anchor, on both the X and Y axes,
     * within its parent's bounds.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name com.android.printspooler:layout_anchorGravity
     */
    public static final int CoordinatorLayout_Layout_layout_anchorGravity=2;
    /**
     * <p>
     * @attr description
     * The class name of a Behavior class defining special runtime behavior
     * for this child view.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.printspooler:layout_behavior
     */
    public static final int CoordinatorLayout_Layout_layout_behavior=3;
    /**
     * <p>
     * @attr description
     * Specifies how this view dodges the inset edges of the CoordinatorLayout.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>77</td><td>Dodge all the inset edges.</td></tr>
     * <tr><td>bottom</td><td>50</td><td>Dodge the bottom inset edge.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Dodge the end inset edge.</td></tr>
     * <tr><td>left</td><td>3</td><td>Dodge the left inset edge.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't dodge any edges</td></tr>
     * <tr><td>right</td><td>5</td><td>Dodge the right inset edge.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Dodge the start inset edge.</td></tr>
     * <tr><td>top</td><td>30</td><td>Dodge the top inset edge.</td></tr>
     * </table>
     *
     * @attr name com.android.printspooler:layout_dodgeInsetEdges
     */
    public static final int CoordinatorLayout_Layout_layout_dodgeInsetEdges=4;
    /**
     * <p>
     * @attr description
     * Specifies how this view insets the CoordinatorLayout and make some other views
     * dodge it.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Inset the bottom edge.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Inset the end edge.</td></tr>
     * <tr><td>left</td><td>3</td><td>Inset the left edge.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't inset.</td></tr>
     * <tr><td>right</td><td>5</td><td>Inset the right edge.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Inset the start edge.</td></tr>
     * <tr><td>top</td><td>30</td><td>Inset the top edge.</td></tr>
     * </table>
     *
     * @attr name com.android.printspooler:layout_insetEdge
     */
    public static final int CoordinatorLayout_Layout_layout_insetEdge=5;
    /**
     * <p>
     * @attr description
     * The index of a keyline this view should position relative to.
     * android:layout_gravity will affect how the view aligns to the
     * specified keyline.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.printspooler:layout_keyline
     */
    public static final int CoordinatorLayout_Layout_layout_keyline=6;
    /**
     * Attributes that can be used with a FontFamily.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderAuthority com.android.printspooler:fontProviderAuthority}</code></td><td>The authority of the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderCerts com.android.printspooler:fontProviderCerts}</code></td><td>The sets of hashes for the certificates the provider should be signed with.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderFetchStrategy com.android.printspooler:fontProviderFetchStrategy}</code></td><td>The strategy to be used when fetching font data from a font provider in XML layouts.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderFetchTimeout com.android.printspooler:fontProviderFetchTimeout}</code></td><td>The length of the timeout during fetching.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderPackage com.android.printspooler:fontProviderPackage}</code></td><td>The package for the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderQuery com.android.printspooler:fontProviderQuery}</code></td><td>The query to be sent over to the provider.</td></tr>
     * </table>
     * @see #FontFamily_fontProviderAuthority
     * @see #FontFamily_fontProviderCerts
     * @see #FontFamily_fontProviderFetchStrategy
     * @see #FontFamily_fontProviderFetchTimeout
     * @see #FontFamily_fontProviderPackage
     * @see #FontFamily_fontProviderQuery
     */
    public static final int[] FontFamily={
      0x7f020008, 0x7f020009, 0x7f02000a, 0x7f02000b, 
      0x7f02000c, 0x7f02000d
    };
    /**
     * <p>
     * @attr description
     * The authority of the Font Provider to be used for the request.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.printspooler:fontProviderAuthority
     */
    public static final int FontFamily_fontProviderAuthority=0;
    /**
     * <p>
     * @attr description
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.printspooler:fontProviderCerts
     */
    public static final int FontFamily_fontProviderCerts=1;
    /**
     * <p>
     * @attr description
     * The strategy to be used when fetching font data from a font provider in XML layouts.
     * This attribute is ignored when the resource is loaded from code, as it is equivalent to the
     * choice of API between {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int)} (blocking) and
     * {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int, FontCallback, Handler)}
     * (async).
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
     * First, check the local cache, then if the requeted font is not cached, trigger a
     * request the font and continue with layout inflation. Once the font fetch succeeds, the
     * target text view will be refreshed with the downloaded font data. The
     * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
     * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
     * First, check the local cache, then if the requested font is not cached, request the
     * font from the provider and wait until it is finished.  You can change the length of
     * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
     * default typeface will be used instead.</td></tr>
     * </table>
     *
     * @attr name com.android.printspooler:fontProviderFetchStrategy
     */
    public static final int FontFamily_fontProviderFetchStrategy=2;
    /**
     * <p>
     * @attr description
     * The length of the timeout during fetching.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
     * timeout and wait until a reply is received from the font provider.</td></tr>
     * </table>
     *
     * @attr name com.android.printspooler:fontProviderFetchTimeout
     */
    public static final int FontFamily_fontProviderFetchTimeout=3;
    /**
     * <p>
     * @attr description
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.printspooler:fontProviderPackage
     */
    public static final int FontFamily_fontProviderPackage=4;
    /**
     * <p>
     * @attr description
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.printspooler:fontProviderQuery
     */
    public static final int FontFamily_fontProviderQuery=5;
    /**
     * Attributes that can be used with a FontFamilyFont.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_font android:font}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontWeight android:fontWeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontStyle android:fontStyle}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_ttcIndex android:ttcIndex}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontVariationSettings android:fontVariationSettings}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_font com.android.printspooler:font}</code></td><td>The reference to the font file to be used.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontStyle com.android.printspooler:fontStyle}</code></td><td>The style of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontVariationSettings com.android.printspooler:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontWeight com.android.printspooler:fontWeight}</code></td><td>The weight of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_ttcIndex com.android.printspooler:ttcIndex}</code></td><td>The index of the font in the tcc font file.</td></tr>
     * </table>
     * @see #FontFamilyFont_android_font
     * @see #FontFamilyFont_android_fontWeight
     * @see #FontFamilyFont_android_fontStyle
     * @see #FontFamilyFont_android_ttcIndex
     * @see #FontFamilyFont_android_fontVariationSettings
     * @see #FontFamilyFont_font
     * @see #FontFamilyFont_fontStyle
     * @see #FontFamilyFont_fontVariationSettings
     * @see #FontFamilyFont_fontWeight
     * @see #FontFamilyFont_ttcIndex
     */
    public static final int[] FontFamilyFont={
      0x01010532, 0x01010533, 0x0101053f, 0x0101056f, 
      0x01010570, 0x7f020007, 0x7f02000e, 0x7f02000f, 
      0x7f020010, 0x7f02001d
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#font}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:font
     */
    public static final int FontFamilyFont_android_font=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fontWeight}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:fontWeight
     */
    public static final int FontFamilyFont_android_fontWeight=1;
    /**
     * <p>
     * @attr description
     * References to the framework attrs
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:fontStyle
     */
    public static final int FontFamilyFont_android_fontStyle=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#ttcIndex}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:ttcIndex
     */
    public static final int FontFamilyFont_android_ttcIndex=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fontVariationSettings}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontVariationSettings
     */
    public static final int FontFamilyFont_android_fontVariationSettings=4;
    /**
     * <p>
     * @attr description
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.printspooler:font
     */
    public static final int FontFamilyFont_font=5;
    /**
     * <p>
     * @attr description
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.printspooler:fontStyle
     */
    public static final int FontFamilyFont_fontStyle=6;
    /**
     * <p>
     * @attr description
     * The variation settings to be applied to the font. The string should be in the following
     * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
     * used, or the font used does not support variation settings, this attribute needs not be
     * specified.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.printspooler:fontVariationSettings
     */
    public static final int FontFamilyFont_fontVariationSettings=7;
    /**
     * <p>
     * @attr description
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.printspooler:fontWeight
     */
    public static final int FontFamilyFont_fontWeight=8;
    /**
     * <p>
     * @attr description
     * The index of the font in the tcc font file. If the font file referenced is not in the
     * tcc format, this attribute needs not be specified.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.printspooler:ttcIndex
     */
    public static final int FontFamilyFont_ttcIndex=9;
    /**
     * Attributes that can be used with a PrintOptionsLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PrintOptionsLayout_columnCount com.android.printspooler:columnCount}</code></td><td></td></tr>
     * </table>
     * @see #PrintOptionsLayout_columnCount
     */
    public static final int[] PrintOptionsLayout={
      0x7f020000
    };
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#columnCount}
     * attribute's value can be found in the {@link #PrintOptionsLayout} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.printspooler:columnCount
     */
    public static final int PrintOptionsLayout_columnCount=0;
    /**
     * Attributes that can be used with a RecyclerView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RecyclerView_android_orientation android:orientation}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_android_descendantFocusability android:descendantFocusability}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollEnabled com.android.printspooler:fastScrollEnabled}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollHorizontalThumbDrawable com.android.printspooler:fastScrollHorizontalThumbDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollHorizontalTrackDrawable com.android.printspooler:fastScrollHorizontalTrackDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollVerticalThumbDrawable com.android.printspooler:fastScrollVerticalThumbDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollVerticalTrackDrawable com.android.printspooler:fastScrollVerticalTrackDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_layoutManager com.android.printspooler:layoutManager}</code></td><td>Class name of the Layout Manager to be used.</td></tr>
     * <tr><td><code>{@link #RecyclerView_reverseLayout com.android.printspooler:reverseLayout}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_spanCount com.android.printspooler:spanCount}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_stackFromEnd com.android.printspooler:stackFromEnd}</code></td><td></td></tr>
     * </table>
     * @see #RecyclerView_android_orientation
     * @see #RecyclerView_android_descendantFocusability
     * @see #RecyclerView_fastScrollEnabled
     * @see #RecyclerView_fastScrollHorizontalThumbDrawable
     * @see #RecyclerView_fastScrollHorizontalTrackDrawable
     * @see #RecyclerView_fastScrollVerticalThumbDrawable
     * @see #RecyclerView_fastScrollVerticalTrackDrawable
     * @see #RecyclerView_layoutManager
     * @see #RecyclerView_reverseLayout
     * @see #RecyclerView_spanCount
     * @see #RecyclerView_stackFromEnd
     */
    public static final int[] RecyclerView={
      0x010100c4, 0x010100f1, 0x7f020002, 0x7f020003, 
      0x7f020004, 0x7f020005, 0x7f020006, 0x7f020012, 
      0x7f020019, 0x7f02001a, 0x7f02001b
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#orientation}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td></td></tr>
     * <tr><td>vertical</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int RecyclerView_android_orientation=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#descendantFocusability}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>afterDescendants</td><td>1</td><td></td></tr>
     * <tr><td>beforeDescendants</td><td>0</td><td></td></tr>
     * <tr><td>blocksDescendants</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:descendantFocusability
     */
    public static final int RecyclerView_android_descendantFocusability=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#fastScrollEnabled}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.printspooler:fastScrollEnabled
     */
    public static final int RecyclerView_fastScrollEnabled=2;
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#fastScrollHorizontalThumbDrawable}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.printspooler:fastScrollHorizontalThumbDrawable
     */
    public static final int RecyclerView_fastScrollHorizontalThumbDrawable=3;
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#fastScrollHorizontalTrackDrawable}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.printspooler:fastScrollHorizontalTrackDrawable
     */
    public static final int RecyclerView_fastScrollHorizontalTrackDrawable=4;
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#fastScrollVerticalThumbDrawable}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.printspooler:fastScrollVerticalThumbDrawable
     */
    public static final int RecyclerView_fastScrollVerticalThumbDrawable=5;
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#fastScrollVerticalTrackDrawable}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.printspooler:fastScrollVerticalTrackDrawable
     */
    public static final int RecyclerView_fastScrollVerticalTrackDrawable=6;
    /**
     * <p>
     * @attr description
     * Class name of the Layout Manager to be used.
     * <p/>
     * The class must extandroidx.recyclerview.widget.RecyclerViewView$LayoutManager
     * and have either a default constructor or constructor with the signature
     * (android.content.Context, android.util.AttributeSet, int, int).
     * <p/>
     * If the name starts with a '.', application package is prefixed.
     * Else, if the name contains a '.', the classname is assumed to be a full class name.
     * Else, the recycler view package naandroidx.appcompat.widgetdget) is prefixed.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.printspooler:layoutManager
     */
    public static final int RecyclerView_layoutManager=7;
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#reverseLayout}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.printspooler:reverseLayout
     */
    public static final int RecyclerView_reverseLayout=8;
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#spanCount}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.printspooler:spanCount
     */
    public static final int RecyclerView_spanCount=9;
    /**
     * <p>This symbol is the offset where the {@link com.android.printspooler.R.attr#stackFromEnd}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.printspooler:stackFromEnd
     */
    public static final int RecyclerView_stackFromEnd=10;
  }
}