// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/services/incremental/Metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace incremental {
namespace metadata {
class BindPoint;
class BindPointDefaultTypeInternal;
extern BindPointDefaultTypeInternal _BindPoint_default_instance_;
class DataLoader;
class DataLoaderDefaultTypeInternal;
extern DataLoaderDefaultTypeInternal _DataLoader_default_instance_;
class Mount;
class MountDefaultTypeInternal;
extern MountDefaultTypeInternal _Mount_default_instance_;
class Storage;
class StorageDefaultTypeInternal;
extern StorageDefaultTypeInternal _Storage_default_instance_;
}  // namespace metadata
}  // namespace incremental
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::incremental::metadata::BindPoint* Arena::CreateMaybeMessage<::android::incremental::metadata::BindPoint>(Arena*);
template<> ::android::incremental::metadata::DataLoader* Arena::CreateMaybeMessage<::android::incremental::metadata::DataLoader>(Arena*);
template<> ::android::incremental::metadata::Mount* Arena::CreateMaybeMessage<::android::incremental::metadata::Mount>(Arena*);
template<> ::android::incremental::metadata::Storage* Arena::CreateMaybeMessage<::android::incremental::metadata::Storage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace incremental {
namespace metadata {

// ===================================================================

class BindPoint :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.incremental.metadata.BindPoint) */ {
 public:
  BindPoint();
  virtual ~BindPoint();

  BindPoint(const BindPoint& from);
  BindPoint(BindPoint&& from) noexcept
    : BindPoint() {
    *this = ::std::move(from);
  }

  inline BindPoint& operator=(const BindPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindPoint& operator=(BindPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BindPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BindPoint* internal_default_instance() {
    return reinterpret_cast<const BindPoint*>(
               &_BindPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BindPoint& a, BindPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(BindPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindPoint* New() const final {
    return CreateMaybeMessage<BindPoint>(nullptr);
  }

  BindPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BindPoint& from);
  void MergeFrom(const BindPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BindPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.incremental.metadata.BindPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceSubdirFieldNumber = 2,
    kDestPathFieldNumber = 3,
    kStorageIdFieldNumber = 1,
  };
  // string source_subdir = 2;
  void clear_source_subdir();
  const std::string& source_subdir() const;
  void set_source_subdir(const std::string& value);
  void set_source_subdir(std::string&& value);
  void set_source_subdir(const char* value);
  void set_source_subdir(const char* value, size_t size);
  std::string* mutable_source_subdir();
  std::string* release_source_subdir();
  void set_allocated_source_subdir(std::string* source_subdir);

  // string dest_path = 3;
  void clear_dest_path();
  const std::string& dest_path() const;
  void set_dest_path(const std::string& value);
  void set_dest_path(std::string&& value);
  void set_dest_path(const char* value);
  void set_dest_path(const char* value, size_t size);
  std::string* mutable_dest_path();
  std::string* release_dest_path();
  void set_allocated_dest_path(std::string* dest_path);

  // int32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::int32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.incremental.metadata.BindPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_subdir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto;
};
// -------------------------------------------------------------------

class DataLoader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.incremental.metadata.DataLoader) */ {
 public:
  DataLoader();
  virtual ~DataLoader();

  DataLoader(const DataLoader& from);
  DataLoader(DataLoader&& from) noexcept
    : DataLoader() {
    *this = ::std::move(from);
  }

  inline DataLoader& operator=(const DataLoader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataLoader& operator=(DataLoader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DataLoader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataLoader* internal_default_instance() {
    return reinterpret_cast<const DataLoader*>(
               &_DataLoader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataLoader& a, DataLoader& b) {
    a.Swap(&b);
  }
  inline void Swap(DataLoader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataLoader* New() const final {
    return CreateMaybeMessage<DataLoader>(nullptr);
  }

  DataLoader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataLoader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DataLoader& from);
  void MergeFrom(const DataLoader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataLoader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.incremental.metadata.DataLoader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kArgumentsFieldNumber = 2,
    kClassNameFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string package_name = 1;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // string arguments = 2;
  void clear_arguments();
  const std::string& arguments() const;
  void set_arguments(const std::string& value);
  void set_arguments(std::string&& value);
  void set_arguments(const char* value);
  void set_arguments(const char* value, size_t size);
  std::string* mutable_arguments();
  std::string* release_arguments();
  void set_allocated_arguments(std::string* arguments);

  // string class_name = 3;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.incremental.metadata.DataLoader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto;
};
// -------------------------------------------------------------------

class Storage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.incremental.metadata.Storage) */ {
 public:
  Storage();
  virtual ~Storage();

  Storage(const Storage& from);
  Storage(Storage&& from) noexcept
    : Storage() {
    *this = ::std::move(from);
  }

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Storage& operator=(Storage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Storage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Storage* internal_default_instance() {
    return reinterpret_cast<const Storage*>(
               &_Storage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Storage& a, Storage& b) {
    a.Swap(&b);
  }
  inline void Swap(Storage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Storage* New() const final {
    return CreateMaybeMessage<Storage>(nullptr);
  }

  Storage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Storage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Storage& from);
  void MergeFrom(const Storage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Storage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.incremental.metadata.Storage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.incremental.metadata.Storage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto;
};
// -------------------------------------------------------------------

class Mount :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.incremental.metadata.Mount) */ {
 public:
  Mount();
  virtual ~Mount();

  Mount(const Mount& from);
  Mount(Mount&& from) noexcept
    : Mount() {
    *this = ::std::move(from);
  }

  inline Mount& operator=(const Mount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mount& operator=(Mount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Mount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mount* internal_default_instance() {
    return reinterpret_cast<const Mount*>(
               &_Mount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Mount& a, Mount& b) {
    a.Swap(&b);
  }
  inline void Swap(Mount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mount* New() const final {
    return CreateMaybeMessage<Mount>(nullptr);
  }

  Mount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mount>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Mount& from);
  void MergeFrom(const Mount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Mount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.incremental.metadata.Mount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageFieldNumber = 1,
    kLoaderFieldNumber = 2,
  };
  // .android.incremental.metadata.Storage storage = 1;
  bool has_storage() const;
  void clear_storage();
  const ::android::incremental::metadata::Storage& storage() const;
  ::android::incremental::metadata::Storage* release_storage();
  ::android::incremental::metadata::Storage* mutable_storage();
  void set_allocated_storage(::android::incremental::metadata::Storage* storage);

  // .android.incremental.metadata.DataLoader loader = 2;
  bool has_loader() const;
  void clear_loader();
  const ::android::incremental::metadata::DataLoader& loader() const;
  ::android::incremental::metadata::DataLoader* release_loader();
  ::android::incremental::metadata::DataLoader* mutable_loader();
  void set_allocated_loader(::android::incremental::metadata::DataLoader* loader);

  // @@protoc_insertion_point(class_scope:android.incremental.metadata.Mount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::android::incremental::metadata::Storage* storage_;
  ::android::incremental::metadata::DataLoader* loader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BindPoint

// int32 storage_id = 1;
inline void BindPoint::clear_storage_id() {
  storage_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BindPoint::storage_id() const {
  // @@protoc_insertion_point(field_get:android.incremental.metadata.BindPoint.storage_id)
  return storage_id_;
}
inline void BindPoint::set_storage_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  storage_id_ = value;
  // @@protoc_insertion_point(field_set:android.incremental.metadata.BindPoint.storage_id)
}

// string source_subdir = 2;
inline void BindPoint::clear_source_subdir() {
  source_subdir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BindPoint::source_subdir() const {
  // @@protoc_insertion_point(field_get:android.incremental.metadata.BindPoint.source_subdir)
  return source_subdir_.GetNoArena();
}
inline void BindPoint::set_source_subdir(const std::string& value) {
  
  source_subdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.incremental.metadata.BindPoint.source_subdir)
}
inline void BindPoint::set_source_subdir(std::string&& value) {
  
  source_subdir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.incremental.metadata.BindPoint.source_subdir)
}
inline void BindPoint::set_source_subdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_subdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.incremental.metadata.BindPoint.source_subdir)
}
inline void BindPoint::set_source_subdir(const char* value, size_t size) {
  
  source_subdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.incremental.metadata.BindPoint.source_subdir)
}
inline std::string* BindPoint::mutable_source_subdir() {
  
  // @@protoc_insertion_point(field_mutable:android.incremental.metadata.BindPoint.source_subdir)
  return source_subdir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BindPoint::release_source_subdir() {
  // @@protoc_insertion_point(field_release:android.incremental.metadata.BindPoint.source_subdir)
  
  return source_subdir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BindPoint::set_allocated_source_subdir(std::string* source_subdir) {
  if (source_subdir != nullptr) {
    
  } else {
    
  }
  source_subdir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_subdir);
  // @@protoc_insertion_point(field_set_allocated:android.incremental.metadata.BindPoint.source_subdir)
}

// string dest_path = 3;
inline void BindPoint::clear_dest_path() {
  dest_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BindPoint::dest_path() const {
  // @@protoc_insertion_point(field_get:android.incremental.metadata.BindPoint.dest_path)
  return dest_path_.GetNoArena();
}
inline void BindPoint::set_dest_path(const std::string& value) {
  
  dest_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.incremental.metadata.BindPoint.dest_path)
}
inline void BindPoint::set_dest_path(std::string&& value) {
  
  dest_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.incremental.metadata.BindPoint.dest_path)
}
inline void BindPoint::set_dest_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.incremental.metadata.BindPoint.dest_path)
}
inline void BindPoint::set_dest_path(const char* value, size_t size) {
  
  dest_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.incremental.metadata.BindPoint.dest_path)
}
inline std::string* BindPoint::mutable_dest_path() {
  
  // @@protoc_insertion_point(field_mutable:android.incremental.metadata.BindPoint.dest_path)
  return dest_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BindPoint::release_dest_path() {
  // @@protoc_insertion_point(field_release:android.incremental.metadata.BindPoint.dest_path)
  
  return dest_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BindPoint::set_allocated_dest_path(std::string* dest_path) {
  if (dest_path != nullptr) {
    
  } else {
    
  }
  dest_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest_path);
  // @@protoc_insertion_point(field_set_allocated:android.incremental.metadata.BindPoint.dest_path)
}

// -------------------------------------------------------------------

// DataLoader

// string package_name = 1;
inline void DataLoader::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataLoader::package_name() const {
  // @@protoc_insertion_point(field_get:android.incremental.metadata.DataLoader.package_name)
  return package_name_.GetNoArena();
}
inline void DataLoader::set_package_name(const std::string& value) {
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.incremental.metadata.DataLoader.package_name)
}
inline void DataLoader::set_package_name(std::string&& value) {
  
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.incremental.metadata.DataLoader.package_name)
}
inline void DataLoader::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.incremental.metadata.DataLoader.package_name)
}
inline void DataLoader::set_package_name(const char* value, size_t size) {
  
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.incremental.metadata.DataLoader.package_name)
}
inline std::string* DataLoader::mutable_package_name() {
  
  // @@protoc_insertion_point(field_mutable:android.incremental.metadata.DataLoader.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataLoader::release_package_name() {
  // @@protoc_insertion_point(field_release:android.incremental.metadata.DataLoader.package_name)
  
  return package_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataLoader::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    
  } else {
    
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.incremental.metadata.DataLoader.package_name)
}

// string class_name = 3;
inline void DataLoader::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataLoader::class_name() const {
  // @@protoc_insertion_point(field_get:android.incremental.metadata.DataLoader.class_name)
  return class_name_.GetNoArena();
}
inline void DataLoader::set_class_name(const std::string& value) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.incremental.metadata.DataLoader.class_name)
}
inline void DataLoader::set_class_name(std::string&& value) {
  
  class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.incremental.metadata.DataLoader.class_name)
}
inline void DataLoader::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.incremental.metadata.DataLoader.class_name)
}
inline void DataLoader::set_class_name(const char* value, size_t size) {
  
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.incremental.metadata.DataLoader.class_name)
}
inline std::string* DataLoader::mutable_class_name() {
  
  // @@protoc_insertion_point(field_mutable:android.incremental.metadata.DataLoader.class_name)
  return class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataLoader::release_class_name() {
  // @@protoc_insertion_point(field_release:android.incremental.metadata.DataLoader.class_name)
  
  return class_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataLoader::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:android.incremental.metadata.DataLoader.class_name)
}

// string arguments = 2;
inline void DataLoader::clear_arguments() {
  arguments_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataLoader::arguments() const {
  // @@protoc_insertion_point(field_get:android.incremental.metadata.DataLoader.arguments)
  return arguments_.GetNoArena();
}
inline void DataLoader::set_arguments(const std::string& value) {
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.incremental.metadata.DataLoader.arguments)
}
inline void DataLoader::set_arguments(std::string&& value) {
  
  arguments_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.incremental.metadata.DataLoader.arguments)
}
inline void DataLoader::set_arguments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.incremental.metadata.DataLoader.arguments)
}
inline void DataLoader::set_arguments(const char* value, size_t size) {
  
  arguments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.incremental.metadata.DataLoader.arguments)
}
inline std::string* DataLoader::mutable_arguments() {
  
  // @@protoc_insertion_point(field_mutable:android.incremental.metadata.DataLoader.arguments)
  return arguments_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataLoader::release_arguments() {
  // @@protoc_insertion_point(field_release:android.incremental.metadata.DataLoader.arguments)
  
  return arguments_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataLoader::set_allocated_arguments(std::string* arguments) {
  if (arguments != nullptr) {
    
  } else {
    
  }
  arguments_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arguments);
  // @@protoc_insertion_point(field_set_allocated:android.incremental.metadata.DataLoader.arguments)
}

// int32 type = 4;
inline void DataLoader::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataLoader::type() const {
  // @@protoc_insertion_point(field_get:android.incremental.metadata.DataLoader.type)
  return type_;
}
inline void DataLoader::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:android.incremental.metadata.DataLoader.type)
}

// -------------------------------------------------------------------

// Storage

// int32 id = 1;
inline void Storage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Storage::id() const {
  // @@protoc_insertion_point(field_get:android.incremental.metadata.Storage.id)
  return id_;
}
inline void Storage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:android.incremental.metadata.Storage.id)
}

// -------------------------------------------------------------------

// Mount

// .android.incremental.metadata.Storage storage = 1;
inline bool Mount::has_storage() const {
  return this != internal_default_instance() && storage_ != nullptr;
}
inline void Mount::clear_storage() {
  if (GetArenaNoVirtual() == nullptr && storage_ != nullptr) {
    delete storage_;
  }
  storage_ = nullptr;
}
inline const ::android::incremental::metadata::Storage& Mount::storage() const {
  const ::android::incremental::metadata::Storage* p = storage_;
  // @@protoc_insertion_point(field_get:android.incremental.metadata.Mount.storage)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::incremental::metadata::Storage*>(
      &::android::incremental::metadata::_Storage_default_instance_);
}
inline ::android::incremental::metadata::Storage* Mount::release_storage() {
  // @@protoc_insertion_point(field_release:android.incremental.metadata.Mount.storage)
  
  ::android::incremental::metadata::Storage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::android::incremental::metadata::Storage* Mount::mutable_storage() {
  
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::incremental::metadata::Storage>(GetArenaNoVirtual());
    storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.incremental.metadata.Mount.storage)
  return storage_;
}
inline void Mount::set_allocated_storage(::android::incremental::metadata::Storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    
  } else {
    
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:android.incremental.metadata.Mount.storage)
}

// .android.incremental.metadata.DataLoader loader = 2;
inline bool Mount::has_loader() const {
  return this != internal_default_instance() && loader_ != nullptr;
}
inline void Mount::clear_loader() {
  if (GetArenaNoVirtual() == nullptr && loader_ != nullptr) {
    delete loader_;
  }
  loader_ = nullptr;
}
inline const ::android::incremental::metadata::DataLoader& Mount::loader() const {
  const ::android::incremental::metadata::DataLoader* p = loader_;
  // @@protoc_insertion_point(field_get:android.incremental.metadata.Mount.loader)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::incremental::metadata::DataLoader*>(
      &::android::incremental::metadata::_DataLoader_default_instance_);
}
inline ::android::incremental::metadata::DataLoader* Mount::release_loader() {
  // @@protoc_insertion_point(field_release:android.incremental.metadata.Mount.loader)
  
  ::android::incremental::metadata::DataLoader* temp = loader_;
  loader_ = nullptr;
  return temp;
}
inline ::android::incremental::metadata::DataLoader* Mount::mutable_loader() {
  
  if (loader_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::incremental::metadata::DataLoader>(GetArenaNoVirtual());
    loader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.incremental.metadata.Mount.loader)
  return loader_;
}
inline void Mount::set_allocated_loader(::android::incremental::metadata::DataLoader* loader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loader_;
  }
  if (loader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loader, submessage_arena);
    }
    
  } else {
    
  }
  loader_ = loader;
  // @@protoc_insertion_point(field_set_allocated:android.incremental.metadata.Mount.loader)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metadata
}  // namespace incremental
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fservices_2fincremental_2fMetadata_2eproto
