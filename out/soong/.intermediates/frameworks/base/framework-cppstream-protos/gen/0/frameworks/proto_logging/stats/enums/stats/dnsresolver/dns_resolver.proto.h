// Generated by protoc-gen-cppstream. DO NOT MODIFY.
// source: frameworks/proto_logging/stats/enums/stats/dnsresolver/dns_resolver.proto

#ifndef ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_ENUMS_STATS_DNSRESOLVER_DNS_RESOLVER_PROTO_STREAM_H
#define ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_ENUMS_STATS_DNSRESOLVER_DNS_RESOLVER_PROTO_STREAM_H

namespace android {
namespace stats {
namespace dnsresolver {

// enum EventType
const int EVENT_UNKNOWN = 0;
const int EVENT_GETADDRINFO = 1;
const int EVENT_GETHOSTBYNAME = 2;
const int EVENT_GETHOSTBYADDR = 3;
const int EVENT_RES_NSEND = 4;
static const int _ENUM_EVENT_TYPE_COUNT = 5;
static const char* _ENUM_EVENT_TYPE_NAMES[5] = {
    "EVENT_UNKNOWN",
    "EVENT_GETADDRINFO",
    "EVENT_GETHOSTBYNAME",
    "EVENT_GETHOSTBYADDR",
    "EVENT_RES_NSEND",
};
static const int _ENUM_EVENT_TYPE_VALUES[5] = {
    EVENT_UNKNOWN,
    EVENT_GETADDRINFO,
    EVENT_GETHOSTBYNAME,
    EVENT_GETHOSTBYADDR,
    EVENT_RES_NSEND,
};

// enum ReturnCode
const int RC_EAI_NO_ERROR = 0;
const int RC_EAI_ADDRFAMILY = 1;
const int RC_EAI_AGAIN = 2;
const int RC_EAI_BADFLAGS = 3;
const int RC_EAI_FAIL = 4;
const int RC_EAI_FAMILY = 5;
const int RC_EAI_MEMORY = 6;
const int RC_EAI_NODATA = 7;
const int RC_EAI_NONAME = 8;
const int RC_EAI_SERVICE = 9;
const int RC_EAI_SOCKTYPE = 10;
const int RC_EAI_SYSTEM = 11;
const int RC_EAI_BADHINTS = 12;
const int RC_EAI_PROTOCOL = 13;
const int RC_EAI_OVERFLOW = 14;
const int RC_RESOLV_INTERNAL_ERROR = 254;
const int RC_RESOLV_TIMEOUT = 255;
const int RC_EAI_MAX = 256;
static const int _ENUM_RETURN_CODE_COUNT = 18;
static const char* _ENUM_RETURN_CODE_NAMES[18] = {
    "RC_EAI_NO_ERROR",
    "RC_EAI_ADDRFAMILY",
    "RC_EAI_AGAIN",
    "RC_EAI_BADFLAGS",
    "RC_EAI_FAIL",
    "RC_EAI_FAMILY",
    "RC_EAI_MEMORY",
    "RC_EAI_NODATA",
    "RC_EAI_NONAME",
    "RC_EAI_SERVICE",
    "RC_EAI_SOCKTYPE",
    "RC_EAI_SYSTEM",
    "RC_EAI_BADHINTS",
    "RC_EAI_PROTOCOL",
    "RC_EAI_OVERFLOW",
    "RC_RESOLV_INTERNAL_ERROR",
    "RC_RESOLV_TIMEOUT",
    "RC_EAI_MAX",
};
static const int _ENUM_RETURN_CODE_VALUES[18] = {
    RC_EAI_NO_ERROR,
    RC_EAI_ADDRFAMILY,
    RC_EAI_AGAIN,
    RC_EAI_BADFLAGS,
    RC_EAI_FAIL,
    RC_EAI_FAMILY,
    RC_EAI_MEMORY,
    RC_EAI_NODATA,
    RC_EAI_NONAME,
    RC_EAI_SERVICE,
    RC_EAI_SOCKTYPE,
    RC_EAI_SYSTEM,
    RC_EAI_BADHINTS,
    RC_EAI_PROTOCOL,
    RC_EAI_OVERFLOW,
    RC_RESOLV_INTERNAL_ERROR,
    RC_RESOLV_TIMEOUT,
    RC_EAI_MAX,
};

// enum NsRcode
const int NS_R_NO_ERROR = 0;
const int NS_R_FORMERR = 1;
const int NS_R_SERVFAIL = 2;
const int NS_R_NXDOMAIN = 3;
const int NS_R_NOTIMPL = 4;
const int NS_R_REFUSED = 5;
const int NS_R_YXDOMAIN = 6;
const int NS_R_YXRRSET = 7;
const int NS_R_NXRRSET = 8;
const int NS_R_NOTAUTH = 9;
const int NS_R_NOTZONE = 10;
const int NS_R_MAX = 11;
const int NS_R_UNASSIGNED12 = 12;
const int NS_R_UNASSIGNED13 = 13;
const int NS_R_UNASSIGNED14 = 14;
const int NS_R_UNASSIGNED15 = 15;
const int NS_R_BADVERS = 16;
const int NS_R_BADKEY = 17;
const int NS_R_BADTIME = 18;
const int NS_R_INTERNAL_ERROR = 254;
const int NS_R_TIMEOUT = 255;
static const int _ENUM_NS_RCODE_COUNT = 21;
static const char* _ENUM_NS_RCODE_NAMES[21] = {
    "NS_R_NO_ERROR",
    "NS_R_FORMERR",
    "NS_R_SERVFAIL",
    "NS_R_NXDOMAIN",
    "NS_R_NOTIMPL",
    "NS_R_REFUSED",
    "NS_R_YXDOMAIN",
    "NS_R_YXRRSET",
    "NS_R_NXRRSET",
    "NS_R_NOTAUTH",
    "NS_R_NOTZONE",
    "NS_R_MAX",
    "NS_R_UNASSIGNED12",
    "NS_R_UNASSIGNED13",
    "NS_R_UNASSIGNED14",
    "NS_R_UNASSIGNED15",
    "NS_R_BADVERS",
    "NS_R_BADKEY",
    "NS_R_BADTIME",
    "NS_R_INTERNAL_ERROR",
    "NS_R_TIMEOUT",
};
static const int _ENUM_NS_RCODE_VALUES[21] = {
    NS_R_NO_ERROR,
    NS_R_FORMERR,
    NS_R_SERVFAIL,
    NS_R_NXDOMAIN,
    NS_R_NOTIMPL,
    NS_R_REFUSED,
    NS_R_YXDOMAIN,
    NS_R_YXRRSET,
    NS_R_NXRRSET,
    NS_R_NOTAUTH,
    NS_R_NOTZONE,
    NS_R_MAX,
    NS_R_UNASSIGNED12,
    NS_R_UNASSIGNED13,
    NS_R_UNASSIGNED14,
    NS_R_UNASSIGNED15,
    NS_R_BADVERS,
    NS_R_BADKEY,
    NS_R_BADTIME,
    NS_R_INTERNAL_ERROR,
    NS_R_TIMEOUT,
};

// enum NsType
const int NS_T_INVALID = 0;
const int NS_T_A = 1;
const int NS_T_NS = 2;
const int NS_T_MD = 3;
const int NS_T_MF = 4;
const int NS_T_CNAME = 5;
const int NS_T_SOA = 6;
const int NS_T_MB = 7;
const int NS_T_MG = 8;
const int NS_T_MR = 9;
const int NS_T_NULL = 10;
const int NS_T_WKS = 11;
const int NS_T_PTR = 12;
const int NS_T_HINFO = 13;
const int NS_T_MINFO = 14;
const int NS_T_MX = 15;
const int NS_T_TXT = 16;
const int NS_T_RP = 17;
const int NS_T_AFSDB = 18;
const int NS_T_X25 = 19;
const int NS_T_ISDN = 20;
const int NS_T_RT = 21;
const int NS_T_NSAP = 22;
const int NS_T_NSAP_PTR = 23;
const int NS_T_SIG = 24;
const int NS_T_KEY = 25;
const int NS_T_PX = 26;
const int NS_T_GPOS = 27;
const int NS_T_AAAA = 28;
const int NS_T_LOC = 29;
const int NS_T_NXT = 30;
const int NS_T_EID = 31;
const int NS_T_NIMLOC = 32;
const int NS_T_SRV = 33;
const int NS_T_ATMA = 34;
const int NS_T_NAPTR = 35;
const int NS_T_KX = 36;
const int NS_T_CERT = 37;
const int NS_T_A6 = 38;
const int NS_T_DNAME = 39;
const int NS_T_SINK = 40;
const int NS_T_OPT = 41;
const int NS_T_APL = 42;
const int NS_T_DS = 43;
const int NS_T_SSHFP = 44;
const int NS_T_IPSECKEY = 45;
const int NS_T_RRSIG = 46;
const int NS_T_NSEC = 47;
const int NS_T_DNSKEY = 48;
const int NS_T_DHCID = 49;
const int NS_T_NSEC3 = 50;
const int NS_T_NSEC3PARAM = 51;
const int NS_T_HIP = 55;
const int NS_T_SPF = 99;
const int NS_T_TKEY = 249;
const int NS_T_TSIG = 250;
const int NS_T_IXFR = 251;
const int NS_T_AXFR = 252;
const int NS_T_MAILB = 253;
const int NS_T_MAILA = 254;
const int NS_T_ANY = 255;
const int NS_T_ZXFR = 256;
const int NS_T_DLV = 32769;
const int NS_T_MAX = 65536;
static const int _ENUM_NS_TYPE_COUNT = 64;
static const char* _ENUM_NS_TYPE_NAMES[64] = {
    "NS_T_INVALID",
    "NS_T_A",
    "NS_T_NS",
    "NS_T_MD",
    "NS_T_MF",
    "NS_T_CNAME",
    "NS_T_SOA",
    "NS_T_MB",
    "NS_T_MG",
    "NS_T_MR",
    "NS_T_NULL",
    "NS_T_WKS",
    "NS_T_PTR",
    "NS_T_HINFO",
    "NS_T_MINFO",
    "NS_T_MX",
    "NS_T_TXT",
    "NS_T_RP",
    "NS_T_AFSDB",
    "NS_T_X25",
    "NS_T_ISDN",
    "NS_T_RT",
    "NS_T_NSAP",
    "NS_T_NSAP_PTR",
    "NS_T_SIG",
    "NS_T_KEY",
    "NS_T_PX",
    "NS_T_GPOS",
    "NS_T_AAAA",
    "NS_T_LOC",
    "NS_T_NXT",
    "NS_T_EID",
    "NS_T_NIMLOC",
    "NS_T_SRV",
    "NS_T_ATMA",
    "NS_T_NAPTR",
    "NS_T_KX",
    "NS_T_CERT",
    "NS_T_A6",
    "NS_T_DNAME",
    "NS_T_SINK",
    "NS_T_OPT",
    "NS_T_APL",
    "NS_T_DS",
    "NS_T_SSHFP",
    "NS_T_IPSECKEY",
    "NS_T_RRSIG",
    "NS_T_NSEC",
    "NS_T_DNSKEY",
    "NS_T_DHCID",
    "NS_T_NSEC3",
    "NS_T_NSEC3PARAM",
    "NS_T_HIP",
    "NS_T_SPF",
    "NS_T_TKEY",
    "NS_T_TSIG",
    "NS_T_IXFR",
    "NS_T_AXFR",
    "NS_T_MAILB",
    "NS_T_MAILA",
    "NS_T_ANY",
    "NS_T_ZXFR",
    "NS_T_DLV",
    "NS_T_MAX",
};
static const int _ENUM_NS_TYPE_VALUES[64] = {
    NS_T_INVALID,
    NS_T_A,
    NS_T_NS,
    NS_T_MD,
    NS_T_MF,
    NS_T_CNAME,
    NS_T_SOA,
    NS_T_MB,
    NS_T_MG,
    NS_T_MR,
    NS_T_NULL,
    NS_T_WKS,
    NS_T_PTR,
    NS_T_HINFO,
    NS_T_MINFO,
    NS_T_MX,
    NS_T_TXT,
    NS_T_RP,
    NS_T_AFSDB,
    NS_T_X25,
    NS_T_ISDN,
    NS_T_RT,
    NS_T_NSAP,
    NS_T_NSAP_PTR,
    NS_T_SIG,
    NS_T_KEY,
    NS_T_PX,
    NS_T_GPOS,
    NS_T_AAAA,
    NS_T_LOC,
    NS_T_NXT,
    NS_T_EID,
    NS_T_NIMLOC,
    NS_T_SRV,
    NS_T_ATMA,
    NS_T_NAPTR,
    NS_T_KX,
    NS_T_CERT,
    NS_T_A6,
    NS_T_DNAME,
    NS_T_SINK,
    NS_T_OPT,
    NS_T_APL,
    NS_T_DS,
    NS_T_SSHFP,
    NS_T_IPSECKEY,
    NS_T_RRSIG,
    NS_T_NSEC,
    NS_T_DNSKEY,
    NS_T_DHCID,
    NS_T_NSEC3,
    NS_T_NSEC3PARAM,
    NS_T_HIP,
    NS_T_SPF,
    NS_T_TKEY,
    NS_T_TSIG,
    NS_T_IXFR,
    NS_T_AXFR,
    NS_T_MAILB,
    NS_T_MAILA,
    NS_T_ANY,
    NS_T_ZXFR,
    NS_T_DLV,
    NS_T_MAX,
};

// enum IpVersion
const int IV_UNKNOWN = 0;
const int IV_IPV4 = 1;
const int IV_IPV6 = 2;
static const int _ENUM_IP_VERSION_COUNT = 3;
static const char* _ENUM_IP_VERSION_NAMES[3] = {
    "IV_UNKNOWN",
    "IV_IPV4",
    "IV_IPV6",
};
static const int _ENUM_IP_VERSION_VALUES[3] = {
    IV_UNKNOWN,
    IV_IPV4,
    IV_IPV6,
};

// enum Protocol
const int PROTO_UNKNOWN = 0;
const int PROTO_UDP = 1;
const int PROTO_TCP = 2;
const int PROTO_DOT = 3;
const int PROTO_DOH = 4;
static const int _ENUM_PROTOCOL_COUNT = 5;
static const char* _ENUM_PROTOCOL_NAMES[5] = {
    "PROTO_UNKNOWN",
    "PROTO_UDP",
    "PROTO_TCP",
    "PROTO_DOT",
    "PROTO_DOH",
};
static const int _ENUM_PROTOCOL_VALUES[5] = {
    PROTO_UNKNOWN,
    PROTO_UDP,
    PROTO_TCP,
    PROTO_DOT,
    PROTO_DOH,
};

// enum PrivateDnsModes
const int PDM_UNKNOWN = 0;
const int PDM_OFF = 1;
const int PDM_OPPORTUNISTIC = 2;
const int PDM_STRICT = 3;
static const int _ENUM_PRIVATE_DNS_MODES_COUNT = 4;
static const char* _ENUM_PRIVATE_DNS_MODES_NAMES[4] = {
    "PDM_UNKNOWN",
    "PDM_OFF",
    "PDM_OPPORTUNISTIC",
    "PDM_STRICT",
};
static const int _ENUM_PRIVATE_DNS_MODES_VALUES[4] = {
    PDM_UNKNOWN,
    PDM_OFF,
    PDM_OPPORTUNISTIC,
    PDM_STRICT,
};

// enum NetworkType
const int NT_UNKNOWN = 0;
const int NT_CELLULAR = 1;
const int NT_WIFI = 2;
const int NT_BLUETOOTH = 3;
const int NT_ETHERNET = 4;
const int NT_VPN = 5;
const int NT_WIFI_AWARE = 6;
const int NT_LOWPAN = 7;
const int NT_CELLULAR_VPN = 8;
const int NT_WIFI_VPN = 9;
const int NT_BLUETOOTH_VPN = 10;
const int NT_ETHERNET_VPN = 11;
const int NT_WIFI_CELLULAR_VPN = 12;
static const int _ENUM_NETWORK_TYPE_COUNT = 13;
static const char* _ENUM_NETWORK_TYPE_NAMES[13] = {
    "NT_UNKNOWN",
    "NT_CELLULAR",
    "NT_WIFI",
    "NT_BLUETOOTH",
    "NT_ETHERNET",
    "NT_VPN",
    "NT_WIFI_AWARE",
    "NT_LOWPAN",
    "NT_CELLULAR_VPN",
    "NT_WIFI_VPN",
    "NT_BLUETOOTH_VPN",
    "NT_ETHERNET_VPN",
    "NT_WIFI_CELLULAR_VPN",
};
static const int _ENUM_NETWORK_TYPE_VALUES[13] = {
    NT_UNKNOWN,
    NT_CELLULAR,
    NT_WIFI,
    NT_BLUETOOTH,
    NT_ETHERNET,
    NT_VPN,
    NT_WIFI_AWARE,
    NT_LOWPAN,
    NT_CELLULAR_VPN,
    NT_WIFI_VPN,
    NT_BLUETOOTH_VPN,
    NT_ETHERNET_VPN,
    NT_WIFI_CELLULAR_VPN,
};

// enum CacheStatus
const int CS_UNSUPPORTED = 0;
const int CS_NOTFOUND = 1;
const int CS_FOUND = 2;
const int CS_SKIP = 3;
static const int _ENUM_CACHE_STATUS_COUNT = 4;
static const char* _ENUM_CACHE_STATUS_NAMES[4] = {
    "CS_UNSUPPORTED",
    "CS_NOTFOUND",
    "CS_FOUND",
    "CS_SKIP",
};
static const int _ENUM_CACHE_STATUS_VALUES[4] = {
    CS_UNSUPPORTED,
    CS_NOTFOUND,
    CS_FOUND,
    CS_SKIP,
};

// enum LinuxErrno
const int SYS_NO_ERROR = 0;
const int SYS_EPERM = 1;
const int SYS_ENOENT = 2;
const int SYS_ESRCH = 3;
const int SYS_EINTR = 4;
const int SYS_EIO = 5;
const int SYS_ENXIO = 6;
const int SYS_E2BIG = 7;
const int SYS_ENOEXEC = 8;
const int SYS_EBADF = 9;
const int SYS_ECHILD = 10;
const int SYS_EAGAIN = 11;
const int SYS_ENOMEM = 12;
const int SYS_EACCES = 13;
const int SYS_EFAULT = 14;
const int SYS_ENOTBLK = 15;
const int SYS_EBUSY = 16;
const int SYS_EEXIST = 17;
const int SYS_EXDEV = 18;
const int SYS_ENODEV = 19;
const int SYS_ENOTDIR = 20;
const int SYS_EISDIR = 21;
const int SYS_EINVAL = 22;
const int SYS_ENFILE = 23;
const int SYS_EMFILE = 24;
const int SYS_ENOTTY = 25;
const int SYS_ETXTBSY = 26;
const int SYS_EFBIG = 27;
const int SYS_ENOSPC = 28;
const int SYS_ESPIPE = 29;
const int SYS_EROFS = 30;
const int SYS_EMLINK = 31;
const int SYS_EPIPE = 32;
const int SYS_EDOM = 33;
const int SYS_ERANGE = 34;
const int SYS_EDEADLOCK = 35;
const int SYS_ENAMETOOLONG = 36;
const int SYS_ENOLCK = 37;
const int SYS_ENOSYS = 38;
const int SYS_ENOTEMPTY = 39;
const int SYS_ELOOP = 40;
const int SYS_ENOMSG = 42;
const int SYS_EIDRM = 43;
const int SYS_ECHRNG = 44;
const int SYS_EL2NSYNC = 45;
const int SYS_EL3HLT = 46;
const int SYS_EL3RST = 47;
const int SYS_ELNRNG = 48;
const int SYS_EUNATCH = 49;
const int SYS_ENOCSI = 50;
const int SYS_EL2HLT = 51;
const int SYS_EBADE = 52;
const int SYS_EBADR = 53;
const int SYS_EXFULL = 54;
const int SYS_ENOANO = 55;
const int SYS_EBADRQC = 56;
const int SYS_EBADSLT = 57;
const int SYS_EBFONT = 59;
const int SYS_ENOSTR = 60;
const int SYS_ENODATA = 61;
const int SYS_ETIME = 62;
const int SYS_ENOSR = 63;
const int SYS_ENONET = 64;
const int SYS_ENOPKG = 65;
const int SYS_EREMOTE = 66;
const int SYS_ENOLINK = 67;
const int SYS_EADV = 68;
const int SYS_ESRMNT = 69;
const int SYS_ECOMM = 70;
const int SYS_EPROTO = 71;
const int SYS_EMULTIHOP = 72;
const int SYS_EDOTDOT = 73;
const int SYS_EBADMSG = 74;
const int SYS_EOVERFLOW = 75;
const int SYS_ENOTUNIQ = 76;
const int SYS_EBADFD = 77;
const int SYS_EREMCHG = 78;
const int SYS_ELIBACC = 79;
const int SYS_ELIBBAD = 80;
const int SYS_ELIBSCN = 81;
const int SYS_ELIBMAX = 82;
const int SYS_ELIBEXEC = 83;
const int SYS_EILSEQ = 84;
const int SYS_ERESTART = 85;
const int SYS_ESTRPIPE = 86;
const int SYS_EUSERS = 87;
const int SYS_ENOTSOCK = 88;
const int SYS_EDESTADDRREQ = 89;
const int SYS_EMSGSIZE = 90;
const int SYS_EPROTOTYPE = 91;
const int SYS_ENOPROTOOPT = 92;
const int SYS_EPROTONOSUPPORT = 93;
const int SYS_ESOCKTNOSUPPORT = 94;
const int SYS_EOPNOTSUPP = 95;
const int SYS_EPFNOSUPPORT = 96;
const int SYS_EAFNOSUPPORT = 97;
const int SYS_EADDRINUSE = 98;
const int SYS_EADDRNOTAVAIL = 99;
const int SYS_ENETDOWN = 100;
const int SYS_ENETUNREACH = 101;
const int SYS_ENETRESET = 102;
const int SYS_ECONNABORTED = 103;
const int SYS_ECONNRESET = 104;
const int SYS_ENOBUFS = 105;
const int SYS_EISCONN = 106;
const int SYS_ENOTCONN = 107;
const int SYS_ESHUTDOWN = 108;
const int SYS_ETOOMANYREFS = 109;
const int SYS_ETIMEDOUT = 110;
const int SYS_ECONNREFUSED = 111;
const int SYS_EHOSTDOWN = 112;
const int SYS_EHOSTUNREACH = 113;
const int SYS_EALREADY = 114;
const int SYS_EINPROGRESS = 115;
const int SYS_ESTALE = 116;
const int SYS_EUCLEAN = 117;
const int SYS_ENOTNAM = 118;
const int SYS_ENAVAIL = 119;
const int SYS_EISNAM = 120;
const int SYS_EREMOTEIO = 121;
const int SYS_EDQUOT = 122;
const int SYS_ENOMEDIUM = 123;
const int SYS_EMEDIUMTYPE = 124;
const int SYS_ECANCELED = 125;
const int SYS_ENOKEY = 126;
const int SYS_EKEYEXPIRED = 127;
const int SYS_EKEYREVOKED = 128;
const int SYS_EKEYREJECTED = 129;
const int SYS_EOWNERDEAD = 130;
const int SYS_ENOTRECOVERABLE = 131;
const int SYS_ERFKILL = 132;
const int SYS_EHWPOISON = 133;
static const int _ENUM_LINUX_ERRNO_COUNT = 132;
static const char* _ENUM_LINUX_ERRNO_NAMES[132] = {
    "SYS_NO_ERROR",
    "SYS_EPERM",
    "SYS_ENOENT",
    "SYS_ESRCH",
    "SYS_EINTR",
    "SYS_EIO",
    "SYS_ENXIO",
    "SYS_E2BIG",
    "SYS_ENOEXEC",
    "SYS_EBADF",
    "SYS_ECHILD",
    "SYS_EAGAIN",
    "SYS_ENOMEM",
    "SYS_EACCES",
    "SYS_EFAULT",
    "SYS_ENOTBLK",
    "SYS_EBUSY",
    "SYS_EEXIST",
    "SYS_EXDEV",
    "SYS_ENODEV",
    "SYS_ENOTDIR",
    "SYS_EISDIR",
    "SYS_EINVAL",
    "SYS_ENFILE",
    "SYS_EMFILE",
    "SYS_ENOTTY",
    "SYS_ETXTBSY",
    "SYS_EFBIG",
    "SYS_ENOSPC",
    "SYS_ESPIPE",
    "SYS_EROFS",
    "SYS_EMLINK",
    "SYS_EPIPE",
    "SYS_EDOM",
    "SYS_ERANGE",
    "SYS_EDEADLOCK",
    "SYS_ENAMETOOLONG",
    "SYS_ENOLCK",
    "SYS_ENOSYS",
    "SYS_ENOTEMPTY",
    "SYS_ELOOP",
    "SYS_ENOMSG",
    "SYS_EIDRM",
    "SYS_ECHRNG",
    "SYS_EL2NSYNC",
    "SYS_EL3HLT",
    "SYS_EL3RST",
    "SYS_ELNRNG",
    "SYS_EUNATCH",
    "SYS_ENOCSI",
    "SYS_EL2HLT",
    "SYS_EBADE",
    "SYS_EBADR",
    "SYS_EXFULL",
    "SYS_ENOANO",
    "SYS_EBADRQC",
    "SYS_EBADSLT",
    "SYS_EBFONT",
    "SYS_ENOSTR",
    "SYS_ENODATA",
    "SYS_ETIME",
    "SYS_ENOSR",
    "SYS_ENONET",
    "SYS_ENOPKG",
    "SYS_EREMOTE",
    "SYS_ENOLINK",
    "SYS_EADV",
    "SYS_ESRMNT",
    "SYS_ECOMM",
    "SYS_EPROTO",
    "SYS_EMULTIHOP",
    "SYS_EDOTDOT",
    "SYS_EBADMSG",
    "SYS_EOVERFLOW",
    "SYS_ENOTUNIQ",
    "SYS_EBADFD",
    "SYS_EREMCHG",
    "SYS_ELIBACC",
    "SYS_ELIBBAD",
    "SYS_ELIBSCN",
    "SYS_ELIBMAX",
    "SYS_ELIBEXEC",
    "SYS_EILSEQ",
    "SYS_ERESTART",
    "SYS_ESTRPIPE",
    "SYS_EUSERS",
    "SYS_ENOTSOCK",
    "SYS_EDESTADDRREQ",
    "SYS_EMSGSIZE",
    "SYS_EPROTOTYPE",
    "SYS_ENOPROTOOPT",
    "SYS_EPROTONOSUPPORT",
    "SYS_ESOCKTNOSUPPORT",
    "SYS_EOPNOTSUPP",
    "SYS_EPFNOSUPPORT",
    "SYS_EAFNOSUPPORT",
    "SYS_EADDRINUSE",
    "SYS_EADDRNOTAVAIL",
    "SYS_ENETDOWN",
    "SYS_ENETUNREACH",
    "SYS_ENETRESET",
    "SYS_ECONNABORTED",
    "SYS_ECONNRESET",
    "SYS_ENOBUFS",
    "SYS_EISCONN",
    "SYS_ENOTCONN",
    "SYS_ESHUTDOWN",
    "SYS_ETOOMANYREFS",
    "SYS_ETIMEDOUT",
    "SYS_ECONNREFUSED",
    "SYS_EHOSTDOWN",
    "SYS_EHOSTUNREACH",
    "SYS_EALREADY",
    "SYS_EINPROGRESS",
    "SYS_ESTALE",
    "SYS_EUCLEAN",
    "SYS_ENOTNAM",
    "SYS_ENAVAIL",
    "SYS_EISNAM",
    "SYS_EREMOTEIO",
    "SYS_EDQUOT",
    "SYS_ENOMEDIUM",
    "SYS_EMEDIUMTYPE",
    "SYS_ECANCELED",
    "SYS_ENOKEY",
    "SYS_EKEYEXPIRED",
    "SYS_EKEYREVOKED",
    "SYS_EKEYREJECTED",
    "SYS_EOWNERDEAD",
    "SYS_ENOTRECOVERABLE",
    "SYS_ERFKILL",
    "SYS_EHWPOISON",
};
static const int _ENUM_LINUX_ERRNO_VALUES[132] = {
    SYS_NO_ERROR,
    SYS_EPERM,
    SYS_ENOENT,
    SYS_ESRCH,
    SYS_EINTR,
    SYS_EIO,
    SYS_ENXIO,
    SYS_E2BIG,
    SYS_ENOEXEC,
    SYS_EBADF,
    SYS_ECHILD,
    SYS_EAGAIN,
    SYS_ENOMEM,
    SYS_EACCES,
    SYS_EFAULT,
    SYS_ENOTBLK,
    SYS_EBUSY,
    SYS_EEXIST,
    SYS_EXDEV,
    SYS_ENODEV,
    SYS_ENOTDIR,
    SYS_EISDIR,
    SYS_EINVAL,
    SYS_ENFILE,
    SYS_EMFILE,
    SYS_ENOTTY,
    SYS_ETXTBSY,
    SYS_EFBIG,
    SYS_ENOSPC,
    SYS_ESPIPE,
    SYS_EROFS,
    SYS_EMLINK,
    SYS_EPIPE,
    SYS_EDOM,
    SYS_ERANGE,
    SYS_EDEADLOCK,
    SYS_ENAMETOOLONG,
    SYS_ENOLCK,
    SYS_ENOSYS,
    SYS_ENOTEMPTY,
    SYS_ELOOP,
    SYS_ENOMSG,
    SYS_EIDRM,
    SYS_ECHRNG,
    SYS_EL2NSYNC,
    SYS_EL3HLT,
    SYS_EL3RST,
    SYS_ELNRNG,
    SYS_EUNATCH,
    SYS_ENOCSI,
    SYS_EL2HLT,
    SYS_EBADE,
    SYS_EBADR,
    SYS_EXFULL,
    SYS_ENOANO,
    SYS_EBADRQC,
    SYS_EBADSLT,
    SYS_EBFONT,
    SYS_ENOSTR,
    SYS_ENODATA,
    SYS_ETIME,
    SYS_ENOSR,
    SYS_ENONET,
    SYS_ENOPKG,
    SYS_EREMOTE,
    SYS_ENOLINK,
    SYS_EADV,
    SYS_ESRMNT,
    SYS_ECOMM,
    SYS_EPROTO,
    SYS_EMULTIHOP,
    SYS_EDOTDOT,
    SYS_EBADMSG,
    SYS_EOVERFLOW,
    SYS_ENOTUNIQ,
    SYS_EBADFD,
    SYS_EREMCHG,
    SYS_ELIBACC,
    SYS_ELIBBAD,
    SYS_ELIBSCN,
    SYS_ELIBMAX,
    SYS_ELIBEXEC,
    SYS_EILSEQ,
    SYS_ERESTART,
    SYS_ESTRPIPE,
    SYS_EUSERS,
    SYS_ENOTSOCK,
    SYS_EDESTADDRREQ,
    SYS_EMSGSIZE,
    SYS_EPROTOTYPE,
    SYS_ENOPROTOOPT,
    SYS_EPROTONOSUPPORT,
    SYS_ESOCKTNOSUPPORT,
    SYS_EOPNOTSUPP,
    SYS_EPFNOSUPPORT,
    SYS_EAFNOSUPPORT,
    SYS_EADDRINUSE,
    SYS_EADDRNOTAVAIL,
    SYS_ENETDOWN,
    SYS_ENETUNREACH,
    SYS_ENETRESET,
    SYS_ECONNABORTED,
    SYS_ECONNRESET,
    SYS_ENOBUFS,
    SYS_EISCONN,
    SYS_ENOTCONN,
    SYS_ESHUTDOWN,
    SYS_ETOOMANYREFS,
    SYS_ETIMEDOUT,
    SYS_ECONNREFUSED,
    SYS_EHOSTDOWN,
    SYS_EHOSTUNREACH,
    SYS_EALREADY,
    SYS_EINPROGRESS,
    SYS_ESTALE,
    SYS_EUCLEAN,
    SYS_ENOTNAM,
    SYS_ENAVAIL,
    SYS_EISNAM,
    SYS_EREMOTEIO,
    SYS_EDQUOT,
    SYS_ENOMEDIUM,
    SYS_EMEDIUMTYPE,
    SYS_ECANCELED,
    SYS_ENOKEY,
    SYS_EKEYEXPIRED,
    SYS_EKEYREVOKED,
    SYS_EKEYREJECTED,
    SYS_EOWNERDEAD,
    SYS_ENOTRECOVERABLE,
    SYS_ERFKILL,
    SYS_EHWPOISON,
};

// message DnsQueryEvent
namespace DnsQueryEvent {
    // optional .android.stats.dnsresolver.NsRcode rcode = 1;
    const uint64_t RCODE = 0x0000010e00000001LL;

    // optional .android.stats.dnsresolver.NsType type = 2;
    const uint64_t TYPE = 0x0000010e00000002LL;

    // optional .android.stats.dnsresolver.CacheStatus cache_hit = 3;
    const uint64_t CACHE_HIT = 0x0000010e00000003LL;

    // optional .android.stats.dnsresolver.IpVersion ip_version = 4;
    const uint64_t IP_VERSION = 0x0000010e00000004LL;

    // optional .android.stats.dnsresolver.Protocol protocol = 5;
    const uint64_t PROTOCOL = 0x0000010e00000005LL;

    // optional int32 retry_times = 6;
    const uint64_t RETRY_TIMES = 0x0000010500000006LL;

    // optional int32 dns_server_index = 7;
    const uint64_t DNS_SERVER_INDEX = 0x0000010500000007LL;

    // optional bool connected = 8;
    const uint64_t CONNECTED = 0x0000010800000008LL;

    // optional int32 latency_micros = 9;
    const uint64_t LATENCY_MICROS = 0x0000010500000009LL;

    // optional .android.stats.dnsresolver.LinuxErrno linux_errno = 10;
    const uint64_t LINUX_ERRNO = 0x0000010e0000000aLL;

    static const int _FIELD_COUNT = 10;
    static const char* _FIELD_NAMES[10] = {
        "rcode",
        "type",
        "cache_hit",
        "ip_version",
        "protocol",
        "retry_times",
        "dns_server_index",
        "connected",
        "latency_micros",
        "linux_errno",
    };
    static const uint64_t _FIELD_IDS[10] = {
        RCODE,
        TYPE,
        CACHE_HIT,
        IP_VERSION,
        PROTOCOL,
        RETRY_TIMES,
        DNS_SERVER_INDEX,
        CONNECTED,
        LATENCY_MICROS,
        LINUX_ERRNO,
    };

} //DnsQueryEvent

// message DnsQueryEvents
namespace DnsQueryEvents {
    // repeated .android.stats.dnsresolver.DnsQueryEvent dns_query_event = 1;
    const uint64_t DNS_QUERY_EVENT = 0x0000020b00000001LL;

    static const int _FIELD_COUNT = 1;
    static const char* _FIELD_NAMES[1] = {
        "dns_query_event",
    };
    static const uint64_t _FIELD_IDS[1] = {
        DNS_QUERY_EVENT,
    };

} //DnsQueryEvents

} // dnsresolver
} // stats
} // android

#endif // ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_ENUMS_STATS_DNSRESOLVER_DNS_RESOLVER_PROTO_STREAM_H
