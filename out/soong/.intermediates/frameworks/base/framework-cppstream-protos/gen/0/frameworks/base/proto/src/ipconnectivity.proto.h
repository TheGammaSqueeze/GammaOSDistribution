// Generated by protoc-gen-cppstream. DO NOT MODIFY.
// source: frameworks/base/proto/src/ipconnectivity.proto

#ifndef ANDROID_FRAMEWORKS_BASE_PROTO_SRC_IPCONNECTIVITY_PROTO_STREAM_H
#define ANDROID_FRAMEWORKS_BASE_PROTO_SRC_IPCONNECTIVITY_PROTO_STREAM_H

namespace clearcut {
namespace connectivity {

// enum LinkLayer
const int UNKNOWN = 0;
const int BLUETOOTH = 1;
const int CELLULAR = 2;
const int ETHERNET = 3;
const int WIFI = 4;
const int WIFI_P2P = 7;
const int WIFI_NAN = 8;
const int LOWPAN = 9;
const int NONE = 5;
const int MULTIPLE = 6;
static const int _ENUM_LINK_LAYER_COUNT = 10;
static const char* _ENUM_LINK_LAYER_NAMES[10] = {
    "UNKNOWN",
    "BLUETOOTH",
    "CELLULAR",
    "ETHERNET",
    "WIFI",
    "WIFI_P2P",
    "WIFI_NAN",
    "LOWPAN",
    "NONE",
    "MULTIPLE",
};
static const int _ENUM_LINK_LAYER_VALUES[10] = {
    UNKNOWN,
    BLUETOOTH,
    CELLULAR,
    ETHERNET,
    WIFI,
    WIFI_P2P,
    WIFI_NAN,
    LOWPAN,
    NONE,
    MULTIPLE,
};

// message NetworkId
namespace NetworkId {
    // optional int32 network_id = 1;
    const uint64_t NETWORK_ID = 0x0000010500000001LL;

    static const int _FIELD_COUNT = 1;
    static const char* _FIELD_NAMES[1] = {
        "network_id",
    };
    static const uint64_t _FIELD_IDS[1] = {
        NETWORK_ID,
    };

} //NetworkId

// message Pair
namespace Pair {
    // optional int32 key = 1;
    const uint64_t KEY = 0x0000010500000001LL;

    // optional int32 value = 2;
    const uint64_t VALUE = 0x0000010500000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "key",
        "value",
    };
    static const uint64_t _FIELD_IDS[2] = {
        KEY,
        VALUE,
    };

} //Pair

// message DefaultNetworkEvent
namespace DefaultNetworkEvent {
    // enum LostReason
    const int UNKNOWN = 0;
    const int OUTSCORED = 1;
    const int INVALIDATION = 2;
    const int DISCONNECT = 3;
    static const int _ENUM_LOST_REASON_COUNT = 4;
    static const char* _ENUM_LOST_REASON_NAMES[4] = {
        "UNKNOWN",
        "OUTSCORED",
        "INVALIDATION",
        "DISCONNECT",
    };
    static const int _ENUM_LOST_REASON_VALUES[4] = {
        UNKNOWN,
        OUTSCORED,
        INVALIDATION,
        DISCONNECT,
    };

    // enum IPSupport
    const int NONE = 0;
    const int IPV4 = 1;
    const int IPV6 = 2;
    const int DUAL = 3;
    static const int _ENUM_IPSUPPORT_COUNT = 4;
    static const char* _ENUM_IPSUPPORT_NAMES[4] = {
        "NONE",
        "IPV4",
        "IPV6",
        "DUAL",
    };
    static const int _ENUM_IPSUPPORT_VALUES[4] = {
        NONE,
        IPV4,
        IPV6,
        DUAL,
    };

    // optional int64 default_network_duration_ms = 5;
    const uint64_t DEFAULT_NETWORK_DURATION_MS = 0x0000010300000005LL;

    // optional int64 validation_duration_ms = 11;
    const uint64_t VALIDATION_DURATION_MS = 0x000001030000000bLL;

    // optional int64 initial_score = 7;
    const uint64_t INITIAL_SCORE = 0x0000010300000007LL;

    // optional int64 final_score = 8;
    const uint64_t FINAL_SCORE = 0x0000010300000008LL;

    // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 9;
    const uint64_t IP_SUPPORT = 0x0000010e00000009LL;

    // optional .clearcut.connectivity.LinkLayer previous_default_network_link_layer = 10;
    const uint64_t PREVIOUS_DEFAULT_NETWORK_LINK_LAYER = 0x0000010e0000000aLL;

    // optional .clearcut.connectivity.NetworkId network_id = 1;
    const uint64_t NETWORK_ID = 0x0000010b00000001LL;

    // optional .clearcut.connectivity.NetworkId previous_network_id = 2;
    const uint64_t PREVIOUS_NETWORK_ID = 0x0000010b00000002LL;

    // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport previous_network_ip_support = 3;
    const uint64_t PREVIOUS_NETWORK_IP_SUPPORT = 0x0000010e00000003LL;

    // repeated int32 transport_types = 4;
    const uint64_t TRANSPORT_TYPES = 0x0000020500000004LL;

    // optional int64 no_default_network_duration_ms = 6;
    const uint64_t NO_DEFAULT_NETWORK_DURATION_MS = 0x0000010300000006LL;

    static const int _FIELD_COUNT = 11;
    static const char* _FIELD_NAMES[11] = {
        "default_network_duration_ms",
        "validation_duration_ms",
        "initial_score",
        "final_score",
        "ip_support",
        "previous_default_network_link_layer",
        "network_id",
        "previous_network_id",
        "previous_network_ip_support",
        "transport_types",
        "no_default_network_duration_ms",
    };
    static const uint64_t _FIELD_IDS[11] = {
        DEFAULT_NETWORK_DURATION_MS,
        VALIDATION_DURATION_MS,
        INITIAL_SCORE,
        FINAL_SCORE,
        IP_SUPPORT,
        PREVIOUS_DEFAULT_NETWORK_LINK_LAYER,
        NETWORK_ID,
        PREVIOUS_NETWORK_ID,
        PREVIOUS_NETWORK_IP_SUPPORT,
        TRANSPORT_TYPES,
        NO_DEFAULT_NETWORK_DURATION_MS,
    };

} //DefaultNetworkEvent

// message IpReachabilityEvent
namespace IpReachabilityEvent {
    // optional string if_name = 1;
    const uint64_t IF_NAME = 0x0000010900000001LL;

    // optional int32 event_type = 2;
    const uint64_t EVENT_TYPE = 0x0000010500000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "if_name",
        "event_type",
    };
    static const uint64_t _FIELD_IDS[2] = {
        IF_NAME,
        EVENT_TYPE,
    };

} //IpReachabilityEvent

// message NetworkEvent
namespace NetworkEvent {
    // optional .clearcut.connectivity.NetworkId network_id = 1;
    const uint64_t NETWORK_ID = 0x0000010b00000001LL;

    // optional int32 event_type = 2;
    const uint64_t EVENT_TYPE = 0x0000010500000002LL;

    // optional int32 latency_ms = 3;
    const uint64_t LATENCY_MS = 0x0000010500000003LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "network_id",
        "event_type",
        "latency_ms",
    };
    static const uint64_t _FIELD_IDS[3] = {
        NETWORK_ID,
        EVENT_TYPE,
        LATENCY_MS,
    };

} //NetworkEvent

// message ValidationProbeEvent
namespace ValidationProbeEvent {
    // optional .clearcut.connectivity.NetworkId network_id = 1;
    const uint64_t NETWORK_ID = 0x0000010b00000001LL;

    // optional int32 latency_ms = 2;
    const uint64_t LATENCY_MS = 0x0000010500000002LL;

    // optional int32 probe_type = 3;
    const uint64_t PROBE_TYPE = 0x0000010500000003LL;

    // optional int32 probe_result = 4;
    const uint64_t PROBE_RESULT = 0x0000010500000004LL;

    static const int _FIELD_COUNT = 4;
    static const char* _FIELD_NAMES[4] = {
        "network_id",
        "latency_ms",
        "probe_type",
        "probe_result",
    };
    static const uint64_t _FIELD_IDS[4] = {
        NETWORK_ID,
        LATENCY_MS,
        PROBE_TYPE,
        PROBE_RESULT,
    };

} //ValidationProbeEvent

// message DNSLookupBatch
namespace DNSLookupBatch {
    // repeated int32 latencies_ms = 4;
    const uint64_t LATENCIES_MS = 0x0000020500000004LL;

    // optional int64 getaddrinfo_query_count = 5;
    const uint64_t GETADDRINFO_QUERY_COUNT = 0x0000010300000005LL;

    // optional int64 gethostbyname_query_count = 6;
    const uint64_t GETHOSTBYNAME_QUERY_COUNT = 0x0000010300000006LL;

    // optional int64 getaddrinfo_error_count = 7;
    const uint64_t GETADDRINFO_ERROR_COUNT = 0x0000010300000007LL;

    // optional int64 gethostbyname_error_count = 8;
    const uint64_t GETHOSTBYNAME_ERROR_COUNT = 0x0000010300000008LL;

    // repeated .clearcut.connectivity.Pair getaddrinfo_errors = 9;
    const uint64_t GETADDRINFO_ERRORS = 0x0000020b00000009LL;

    // repeated .clearcut.connectivity.Pair gethostbyname_errors = 10;
    const uint64_t GETHOSTBYNAME_ERRORS = 0x0000020b0000000aLL;

    // optional .clearcut.connectivity.NetworkId network_id = 1;
    const uint64_t NETWORK_ID = 0x0000010b00000001LL;

    // repeated int32 event_types = 2;
    const uint64_t EVENT_TYPES = 0x0000020500000002LL;

    // repeated int32 return_codes = 3;
    const uint64_t RETURN_CODES = 0x0000020500000003LL;

    static const int _FIELD_COUNT = 10;
    static const char* _FIELD_NAMES[10] = {
        "latencies_ms",
        "getaddrinfo_query_count",
        "gethostbyname_query_count",
        "getaddrinfo_error_count",
        "gethostbyname_error_count",
        "getaddrinfo_errors",
        "gethostbyname_errors",
        "network_id",
        "event_types",
        "return_codes",
    };
    static const uint64_t _FIELD_IDS[10] = {
        LATENCIES_MS,
        GETADDRINFO_QUERY_COUNT,
        GETHOSTBYNAME_QUERY_COUNT,
        GETADDRINFO_ERROR_COUNT,
        GETHOSTBYNAME_ERROR_COUNT,
        GETADDRINFO_ERRORS,
        GETHOSTBYNAME_ERRORS,
        NETWORK_ID,
        EVENT_TYPES,
        RETURN_CODES,
    };

} //DNSLookupBatch

// message DNSLatencies
namespace DNSLatencies {
    // optional int32 type = 1;
    const uint64_t TYPE = 0x0000010500000001LL;

    // optional int32 return_code = 2;
    const uint64_t RETURN_CODE = 0x0000010500000002LL;

    // optional int32 query_count = 3;
    const uint64_t QUERY_COUNT = 0x0000010500000003LL;

    // optional int32 a_count = 4;
    const uint64_t A_COUNT = 0x0000010500000004LL;

    // optional int32 aaaa_count = 5;
    const uint64_t AAAA_COUNT = 0x0000010500000005LL;

    // repeated int32 latencies_ms = 6;
    const uint64_t LATENCIES_MS = 0x0000020500000006LL;

    static const int _FIELD_COUNT = 6;
    static const char* _FIELD_NAMES[6] = {
        "type",
        "return_code",
        "query_count",
        "a_count",
        "aaaa_count",
        "latencies_ms",
    };
    static const uint64_t _FIELD_IDS[6] = {
        TYPE,
        RETURN_CODE,
        QUERY_COUNT,
        A_COUNT,
        AAAA_COUNT,
        LATENCIES_MS,
    };

} //DNSLatencies

// message ConnectStatistics
namespace ConnectStatistics {
    // optional int32 connect_count = 1;
    const uint64_t CONNECT_COUNT = 0x0000010500000001LL;

    // optional int32 connect_blocking_count = 5;
    const uint64_t CONNECT_BLOCKING_COUNT = 0x0000010500000005LL;

    // optional int32 ipv6_addr_count = 2;
    const uint64_t IPV6_ADDR_COUNT = 0x0000010500000002LL;

    // repeated int32 latencies_ms = 3;
    const uint64_t LATENCIES_MS = 0x0000020500000003LL;

    // repeated int32 non_blocking_latencies_ms = 6;
    const uint64_t NON_BLOCKING_LATENCIES_MS = 0x0000020500000006LL;

    // repeated .clearcut.connectivity.Pair errnos_counters = 4;
    const uint64_t ERRNOS_COUNTERS = 0x0000020b00000004LL;

    static const int _FIELD_COUNT = 6;
    static const char* _FIELD_NAMES[6] = {
        "connect_count",
        "connect_blocking_count",
        "ipv6_addr_count",
        "latencies_ms",
        "non_blocking_latencies_ms",
        "errnos_counters",
    };
    static const uint64_t _FIELD_IDS[6] = {
        CONNECT_COUNT,
        CONNECT_BLOCKING_COUNT,
        IPV6_ADDR_COUNT,
        LATENCIES_MS,
        NON_BLOCKING_LATENCIES_MS,
        ERRNOS_COUNTERS,
    };

} //ConnectStatistics

// message DHCPEvent
namespace DHCPEvent {
    // optional string if_name = 1;
    const uint64_t IF_NAME = 0x0000010900000001LL;

    // optional string state_transition = 2;
    const uint64_t STATE_TRANSITION = 0x0000010900000002LL;

    // optional int32 error_code = 3;
    const uint64_t ERROR_CODE = 0x0000010500000003LL;

    // optional int32 duration_ms = 4;
    const uint64_t DURATION_MS = 0x0000010500000004LL;

    static const int _FIELD_COUNT = 4;
    static const char* _FIELD_NAMES[4] = {
        "if_name",
        "state_transition",
        "error_code",
        "duration_ms",
    };
    static const uint64_t _FIELD_IDS[4] = {
        IF_NAME,
        STATE_TRANSITION,
        ERROR_CODE,
        DURATION_MS,
    };

} //DHCPEvent

// message ApfProgramEvent
namespace ApfProgramEvent {
    // optional int64 lifetime = 1;
    const uint64_t LIFETIME = 0x0000010300000001LL;

    // optional int64 effective_lifetime = 7;
    const uint64_t EFFECTIVE_LIFETIME = 0x0000010300000007LL;

    // optional int32 filtered_ras = 2;
    const uint64_t FILTERED_RAS = 0x0000010500000002LL;

    // optional int32 current_ras = 3;
    const uint64_t CURRENT_RAS = 0x0000010500000003LL;

    // optional int32 program_length = 4;
    const uint64_t PROGRAM_LENGTH = 0x0000010500000004LL;

    // optional bool drop_multicast = 5;
    const uint64_t DROP_MULTICAST = 0x0000010800000005LL;

    // optional bool has_ipv4_addr = 6;
    const uint64_t HAS_IPV4_ADDR = 0x0000010800000006LL;

    static const int _FIELD_COUNT = 7;
    static const char* _FIELD_NAMES[7] = {
        "lifetime",
        "effective_lifetime",
        "filtered_ras",
        "current_ras",
        "program_length",
        "drop_multicast",
        "has_ipv4_addr",
    };
    static const uint64_t _FIELD_IDS[7] = {
        LIFETIME,
        EFFECTIVE_LIFETIME,
        FILTERED_RAS,
        CURRENT_RAS,
        PROGRAM_LENGTH,
        DROP_MULTICAST,
        HAS_IPV4_ADDR,
    };

} //ApfProgramEvent

// message ApfStatistics
namespace ApfStatistics {
    // optional int64 duration_ms = 1;
    const uint64_t DURATION_MS = 0x0000010300000001LL;

    // optional int32 received_ras = 2;
    const uint64_t RECEIVED_RAS = 0x0000010500000002LL;

    // optional int32 matching_ras = 3;
    const uint64_t MATCHING_RAS = 0x0000010500000003LL;

    // optional int32 dropped_ras = 5;
    const uint64_t DROPPED_RAS = 0x0000010500000005LL;

    // optional int32 zero_lifetime_ras = 6;
    const uint64_t ZERO_LIFETIME_RAS = 0x0000010500000006LL;

    // optional int32 parse_errors = 7;
    const uint64_t PARSE_ERRORS = 0x0000010500000007LL;

    // optional int32 program_updates = 8;
    const uint64_t PROGRAM_UPDATES = 0x0000010500000008LL;

    // optional int32 max_program_size = 9;
    const uint64_t MAX_PROGRAM_SIZE = 0x0000010500000009LL;

    // optional int32 program_updates_all = 10;
    const uint64_t PROGRAM_UPDATES_ALL = 0x000001050000000aLL;

    // optional int32 program_updates_allowing_multicast = 11;
    const uint64_t PROGRAM_UPDATES_ALLOWING_MULTICAST = 0x000001050000000bLL;

    // optional int32 total_packet_processed = 12;
    const uint64_t TOTAL_PACKET_PROCESSED = 0x000001050000000cLL;

    // optional int32 total_packet_dropped = 13;
    const uint64_t TOTAL_PACKET_DROPPED = 0x000001050000000dLL;

    // repeated .clearcut.connectivity.Pair hardware_counters = 14;
    const uint64_t HARDWARE_COUNTERS = 0x0000020b0000000eLL;

    static const int _FIELD_COUNT = 13;
    static const char* _FIELD_NAMES[13] = {
        "duration_ms",
        "received_ras",
        "matching_ras",
        "dropped_ras",
        "zero_lifetime_ras",
        "parse_errors",
        "program_updates",
        "max_program_size",
        "program_updates_all",
        "program_updates_allowing_multicast",
        "total_packet_processed",
        "total_packet_dropped",
        "hardware_counters",
    };
    static const uint64_t _FIELD_IDS[13] = {
        DURATION_MS,
        RECEIVED_RAS,
        MATCHING_RAS,
        DROPPED_RAS,
        ZERO_LIFETIME_RAS,
        PARSE_ERRORS,
        PROGRAM_UPDATES,
        MAX_PROGRAM_SIZE,
        PROGRAM_UPDATES_ALL,
        PROGRAM_UPDATES_ALLOWING_MULTICAST,
        TOTAL_PACKET_PROCESSED,
        TOTAL_PACKET_DROPPED,
        HARDWARE_COUNTERS,
    };

} //ApfStatistics

// message RaEvent
namespace RaEvent {
    // optional int64 router_lifetime = 1;
    const uint64_t ROUTER_LIFETIME = 0x0000010300000001LL;

    // optional int64 prefix_valid_lifetime = 2;
    const uint64_t PREFIX_VALID_LIFETIME = 0x0000010300000002LL;

    // optional int64 prefix_preferred_lifetime = 3;
    const uint64_t PREFIX_PREFERRED_LIFETIME = 0x0000010300000003LL;

    // optional int64 route_info_lifetime = 4;
    const uint64_t ROUTE_INFO_LIFETIME = 0x0000010300000004LL;

    // optional int64 rdnss_lifetime = 5;
    const uint64_t RDNSS_LIFETIME = 0x0000010300000005LL;

    // optional int64 dnssl_lifetime = 6;
    const uint64_t DNSSL_LIFETIME = 0x0000010300000006LL;

    static const int _FIELD_COUNT = 6;
    static const char* _FIELD_NAMES[6] = {
        "router_lifetime",
        "prefix_valid_lifetime",
        "prefix_preferred_lifetime",
        "route_info_lifetime",
        "rdnss_lifetime",
        "dnssl_lifetime",
    };
    static const uint64_t _FIELD_IDS[6] = {
        ROUTER_LIFETIME,
        PREFIX_VALID_LIFETIME,
        PREFIX_PREFERRED_LIFETIME,
        ROUTE_INFO_LIFETIME,
        RDNSS_LIFETIME,
        DNSSL_LIFETIME,
    };

} //RaEvent

// message IpProvisioningEvent
namespace IpProvisioningEvent {
    // optional string if_name = 1;
    const uint64_t IF_NAME = 0x0000010900000001LL;

    // optional int32 event_type = 2;
    const uint64_t EVENT_TYPE = 0x0000010500000002LL;

    // optional int32 latency_ms = 3;
    const uint64_t LATENCY_MS = 0x0000010500000003LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "if_name",
        "event_type",
        "latency_ms",
    };
    static const uint64_t _FIELD_IDS[3] = {
        IF_NAME,
        EVENT_TYPE,
        LATENCY_MS,
    };

} //IpProvisioningEvent

// message NetworkStats
namespace NetworkStats {
    // optional int64 duration_ms = 1;
    const uint64_t DURATION_MS = 0x0000010300000001LL;

    // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 2;
    const uint64_t IP_SUPPORT = 0x0000010e00000002LL;

    // optional bool ever_validated = 3;
    const uint64_t EVER_VALIDATED = 0x0000010800000003LL;

    // optional bool portal_found = 4;
    const uint64_t PORTAL_FOUND = 0x0000010800000004LL;

    // optional int32 no_connectivity_reports = 5;
    const uint64_t NO_CONNECTIVITY_REPORTS = 0x0000010500000005LL;

    // optional int32 validation_attempts = 6;
    const uint64_t VALIDATION_ATTEMPTS = 0x0000010500000006LL;

    // repeated .clearcut.connectivity.Pair validation_events = 7;
    const uint64_t VALIDATION_EVENTS = 0x0000020b00000007LL;

    // repeated .clearcut.connectivity.Pair validation_states = 8;
    const uint64_t VALIDATION_STATES = 0x0000020b00000008LL;

    static const int _FIELD_COUNT = 8;
    static const char* _FIELD_NAMES[8] = {
        "duration_ms",
        "ip_support",
        "ever_validated",
        "portal_found",
        "no_connectivity_reports",
        "validation_attempts",
        "validation_events",
        "validation_states",
    };
    static const uint64_t _FIELD_IDS[8] = {
        DURATION_MS,
        IP_SUPPORT,
        EVER_VALIDATED,
        PORTAL_FOUND,
        NO_CONNECTIVITY_REPORTS,
        VALIDATION_ATTEMPTS,
        VALIDATION_EVENTS,
        VALIDATION_STATES,
    };

} //NetworkStats

// message WakeupStats
namespace WakeupStats {
    // optional int64 duration_sec = 1;
    const uint64_t DURATION_SEC = 0x0000010300000001LL;

    // optional int64 total_wakeups = 2;
    const uint64_t TOTAL_WAKEUPS = 0x0000010300000002LL;

    // optional int64 root_wakeups = 3;
    const uint64_t ROOT_WAKEUPS = 0x0000010300000003LL;

    // optional int64 system_wakeups = 4;
    const uint64_t SYSTEM_WAKEUPS = 0x0000010300000004LL;

    // optional int64 application_wakeups = 5;
    const uint64_t APPLICATION_WAKEUPS = 0x0000010300000005LL;

    // optional int64 non_application_wakeups = 6;
    const uint64_t NON_APPLICATION_WAKEUPS = 0x0000010300000006LL;

    // optional int64 no_uid_wakeups = 7;
    const uint64_t NO_UID_WAKEUPS = 0x0000010300000007LL;

    // repeated .clearcut.connectivity.Pair ethertype_counts = 8;
    const uint64_t ETHERTYPE_COUNTS = 0x0000020b00000008LL;

    // repeated .clearcut.connectivity.Pair ip_next_header_counts = 9;
    const uint64_t IP_NEXT_HEADER_COUNTS = 0x0000020b00000009LL;

    // optional int64 l2_unicast_count = 10;
    const uint64_t L2_UNICAST_COUNT = 0x000001030000000aLL;

    // optional int64 l2_multicast_count = 11;
    const uint64_t L2_MULTICAST_COUNT = 0x000001030000000bLL;

    // optional int64 l2_broadcast_count = 12;
    const uint64_t L2_BROADCAST_COUNT = 0x000001030000000cLL;

    static const int _FIELD_COUNT = 12;
    static const char* _FIELD_NAMES[12] = {
        "duration_sec",
        "total_wakeups",
        "root_wakeups",
        "system_wakeups",
        "application_wakeups",
        "non_application_wakeups",
        "no_uid_wakeups",
        "ethertype_counts",
        "ip_next_header_counts",
        "l2_unicast_count",
        "l2_multicast_count",
        "l2_broadcast_count",
    };
    static const uint64_t _FIELD_IDS[12] = {
        DURATION_SEC,
        TOTAL_WAKEUPS,
        ROOT_WAKEUPS,
        SYSTEM_WAKEUPS,
        APPLICATION_WAKEUPS,
        NON_APPLICATION_WAKEUPS,
        NO_UID_WAKEUPS,
        ETHERTYPE_COUNTS,
        IP_NEXT_HEADER_COUNTS,
        L2_UNICAST_COUNT,
        L2_MULTICAST_COUNT,
        L2_BROADCAST_COUNT,
    };

} //WakeupStats

// message IpConnectivityEvent
namespace IpConnectivityEvent {
    // optional int64 time_ms = 1;
    const uint64_t TIME_MS = 0x0000010300000001LL;

    // optional .clearcut.connectivity.LinkLayer link_layer = 15;
    const uint64_t LINK_LAYER = 0x0000010e0000000fLL;

    // optional int32 network_id = 16;
    const uint64_t NETWORK_ID = 0x0000010500000010LL;

    // optional string if_name = 17;
    const uint64_t IF_NAME = 0x0000010900000011LL;

    // optional int64 transports = 18;
    const uint64_t TRANSPORTS = 0x0000010300000012LL;

    // optional .clearcut.connectivity.DefaultNetworkEvent default_network_event = 2;
    const uint64_t DEFAULT_NETWORK_EVENT = 0x0000010b00000002LL;

    // optional .clearcut.connectivity.IpReachabilityEvent ip_reachability_event = 3;
    const uint64_t IP_REACHABILITY_EVENT = 0x0000010b00000003LL;

    // optional .clearcut.connectivity.NetworkEvent network_event = 4;
    const uint64_t NETWORK_EVENT = 0x0000010b00000004LL;

    // optional .clearcut.connectivity.DNSLookupBatch dns_lookup_batch = 5;
    const uint64_t DNS_LOOKUP_BATCH = 0x0000010b00000005LL;

    // optional .clearcut.connectivity.DNSLatencies dns_latencies = 13;
    const uint64_t DNS_LATENCIES = 0x0000010b0000000dLL;

    // optional .clearcut.connectivity.ConnectStatistics connect_statistics = 14;
    const uint64_t CONNECT_STATISTICS = 0x0000010b0000000eLL;

    // optional .clearcut.connectivity.DHCPEvent dhcp_event = 6;
    const uint64_t DHCP_EVENT = 0x0000010b00000006LL;

    // optional .clearcut.connectivity.IpProvisioningEvent ip_provisioning_event = 7;
    const uint64_t IP_PROVISIONING_EVENT = 0x0000010b00000007LL;

    // optional .clearcut.connectivity.ValidationProbeEvent validation_probe_event = 8;
    const uint64_t VALIDATION_PROBE_EVENT = 0x0000010b00000008LL;

    // optional .clearcut.connectivity.ApfProgramEvent apf_program_event = 9;
    const uint64_t APF_PROGRAM_EVENT = 0x0000010b00000009LL;

    // optional .clearcut.connectivity.ApfStatistics apf_statistics = 10;
    const uint64_t APF_STATISTICS = 0x0000010b0000000aLL;

    // optional .clearcut.connectivity.RaEvent ra_event = 11;
    const uint64_t RA_EVENT = 0x0000010b0000000bLL;

    // optional .clearcut.connectivity.NetworkStats network_stats = 19;
    const uint64_t NETWORK_STATS = 0x0000010b00000013LL;

    // optional .clearcut.connectivity.WakeupStats wakeup_stats = 20;
    const uint64_t WAKEUP_STATS = 0x0000010b00000014LL;

    static const int _FIELD_COUNT = 19;
    static const char* _FIELD_NAMES[19] = {
        "time_ms",
        "link_layer",
        "network_id",
        "if_name",
        "transports",
        "default_network_event",
        "ip_reachability_event",
        "network_event",
        "dns_lookup_batch",
        "dns_latencies",
        "connect_statistics",
        "dhcp_event",
        "ip_provisioning_event",
        "validation_probe_event",
        "apf_program_event",
        "apf_statistics",
        "ra_event",
        "network_stats",
        "wakeup_stats",
    };
    static const uint64_t _FIELD_IDS[19] = {
        TIME_MS,
        LINK_LAYER,
        NETWORK_ID,
        IF_NAME,
        TRANSPORTS,
        DEFAULT_NETWORK_EVENT,
        IP_REACHABILITY_EVENT,
        NETWORK_EVENT,
        DNS_LOOKUP_BATCH,
        DNS_LATENCIES,
        CONNECT_STATISTICS,
        DHCP_EVENT,
        IP_PROVISIONING_EVENT,
        VALIDATION_PROBE_EVENT,
        APF_PROGRAM_EVENT,
        APF_STATISTICS,
        RA_EVENT,
        NETWORK_STATS,
        WAKEUP_STATS,
    };

} //IpConnectivityEvent

// message IpConnectivityLog
namespace IpConnectivityLog {
    // repeated .clearcut.connectivity.IpConnectivityEvent events = 1;
    const uint64_t EVENTS = 0x0000020b00000001LL;

    // optional int32 dropped_events = 2;
    const uint64_t DROPPED_EVENTS = 0x0000010500000002LL;

    // optional int32 version = 3;
    const uint64_t VERSION = 0x0000010500000003LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "events",
        "dropped_events",
        "version",
    };
    static const uint64_t _FIELD_IDS[3] = {
        EVENTS,
        DROPPED_EVENTS,
        VERSION,
    };

} //IpConnectivityLog

} // connectivity
} // clearcut

#endif // ANDROID_FRAMEWORKS_BASE_PROTO_SRC_IPCONNECTIVITY_PROTO_STREAM_H
