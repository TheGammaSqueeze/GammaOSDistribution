// Generated by protoc-gen-cppstream. DO NOT MODIFY.
// source: frameworks/proto_logging/stats/message/mediametrics_message.proto

#ifndef ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_MESSAGE_MEDIAMETRICS_MESSAGE_PROTO_STREAM_H
#define ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_MESSAGE_MEDIAMETRICS_MESSAGE_PROTO_STREAM_H

namespace android {
namespace stats {
namespace mediametrics_message {

// message AudioPolicyData
namespace AudioPolicyData {
    // optional int32 status = 1;
    const uint64_t STATUS = 0x0000010500000001LL;

    // optional string request_source = 2;
    const uint64_t REQUEST_SOURCE = 0x0000010900000002LL;

    // optional string request_package = 3;
    const uint64_t REQUEST_PACKAGE = 0x0000010900000003LL;

    // optional int32 request_session = 4;
    const uint64_t REQUEST_SESSION = 0x0000010500000004LL;

    // optional string request_device = 5;
    const uint64_t REQUEST_DEVICE = 0x0000010900000005LL;

    // optional string active_source = 6;
    const uint64_t ACTIVE_SOURCE = 0x0000010900000006LL;

    // optional string active_package = 7;
    const uint64_t ACTIVE_PACKAGE = 0x0000010900000007LL;

    // optional int32 active_session = 8;
    const uint64_t ACTIVE_SESSION = 0x0000010500000008LL;

    // optional string active_device = 9;
    const uint64_t ACTIVE_DEVICE = 0x0000010900000009LL;

    static const int _FIELD_COUNT = 9;
    static const char* _FIELD_NAMES[9] = {
        "status",
        "request_source",
        "request_package",
        "request_session",
        "request_device",
        "active_source",
        "active_package",
        "active_session",
        "active_device",
    };
    static const uint64_t _FIELD_IDS[9] = {
        STATUS,
        REQUEST_SOURCE,
        REQUEST_PACKAGE,
        REQUEST_SESSION,
        REQUEST_DEVICE,
        ACTIVE_SOURCE,
        ACTIVE_PACKAGE,
        ACTIVE_SESSION,
        ACTIVE_DEVICE,
    };

} //AudioPolicyData

// message AudioRecordData
namespace AudioRecordData {
    // optional string encoding = 1;
    const uint64_t ENCODING = 0x0000010900000001LL;

    // optional string source = 2;
    const uint64_t SOURCE = 0x0000010900000002LL;

    // optional int32 latency = 3;
    const uint64_t LATENCY = 0x0000010500000003LL;

    // optional int32 samplerate = 4;
    const uint64_t SAMPLERATE = 0x0000010500000004LL;

    // optional int32 channels = 5;
    const uint64_t CHANNELS = 0x0000010500000005LL;

    // optional int64 created_millis = 6;
    const uint64_t CREATED_MILLIS = 0x0000010300000006LL;

    // optional int64 duration_millis = 7;
    const uint64_t DURATION_MILLIS = 0x0000010300000007LL;

    // optional int32 count = 8;
    const uint64_t COUNT = 0x0000010500000008LL;

    // optional int32 error_code = 9;
    const uint64_t ERROR_CODE = 0x0000010500000009LL;

    // optional string error_function = 10;
    const uint64_t ERROR_FUNCTION = 0x000001090000000aLL;

    // optional int32 port_id = 11;
    const uint64_t PORT_ID = 0x000001050000000bLL;

    // optional int32 frame_count = 12;
    const uint64_t FRAME_COUNT = 0x000001050000000cLL;

    // optional string attributes = 13;
    const uint64_t ATTRIBUTES = 0x000001090000000dLL;

    // optional int64 channel_mask = 14;
    const uint64_t CHANNEL_MASK = 0x000001030000000eLL;

    // optional int64 start_count = 15;
    const uint64_t START_COUNT = 0x000001030000000fLL;

    static const int _FIELD_COUNT = 15;
    static const char* _FIELD_NAMES[15] = {
        "encoding",
        "source",
        "latency",
        "samplerate",
        "channels",
        "created_millis",
        "duration_millis",
        "count",
        "error_code",
        "error_function",
        "port_id",
        "frame_count",
        "attributes",
        "channel_mask",
        "start_count",
    };
    static const uint64_t _FIELD_IDS[15] = {
        ENCODING,
        SOURCE,
        LATENCY,
        SAMPLERATE,
        CHANNELS,
        CREATED_MILLIS,
        DURATION_MILLIS,
        COUNT,
        ERROR_CODE,
        ERROR_FUNCTION,
        PORT_ID,
        FRAME_COUNT,
        ATTRIBUTES,
        CHANNEL_MASK,
        START_COUNT,
    };

} //AudioRecordData

// message AudioThreadData
namespace AudioThreadData {
    // optional string type = 1;
    const uint64_t TYPE = 0x0000010900000001LL;

    // optional int32 framecount = 2;
    const uint64_t FRAMECOUNT = 0x0000010500000002LL;

    // optional int32 samplerate = 3;
    const uint64_t SAMPLERATE = 0x0000010500000003LL;

    // optional string work_millis_hist = 4;
    const uint64_t WORK_MILLIS_HIST = 0x0000010900000004LL;

    // optional string latency_millis_hist = 5;
    const uint64_t LATENCY_MILLIS_HIST = 0x0000010900000005LL;

    // optional string warmup_millis_hist = 6;
    const uint64_t WARMUP_MILLIS_HIST = 0x0000010900000006LL;

    // optional int64 underruns = 7;
    const uint64_t UNDERRUNS = 0x0000010300000007LL;

    // optional int64 overruns = 8;
    const uint64_t OVERRUNS = 0x0000010300000008LL;

    // optional int64 active_millis = 9;
    const uint64_t ACTIVE_MILLIS = 0x0000010300000009LL;

    // optional int64 duration_millis = 10;
    const uint64_t DURATION_MILLIS = 0x000001030000000aLL;

    // optional int32 id = 11;
    const uint64_t ID = 0x000001050000000bLL;

    // optional int32 port_id = 12;
    const uint64_t PORT_ID = 0x000001050000000cLL;

    // optional int32 sample_rate = 13;
    const uint64_t SAMPLE_RATE = 0x000001050000000dLL;

    // optional int64 channel_mask = 14;
    const uint64_t CHANNEL_MASK = 0x000001030000000eLL;

    // optional string encoding = 15;
    const uint64_t ENCODING = 0x000001090000000fLL;

    // optional int32 frame_count = 16;
    const uint64_t FRAME_COUNT = 0x0000010500000010LL;

    // optional string output_device = 17;
    const uint64_t OUTPUT_DEVICE = 0x0000010900000011LL;

    // optional string input_device = 18;
    const uint64_t INPUT_DEVICE = 0x0000010900000012LL;

    // optional double io_jitter_mean_millis = 19;
    const uint64_t IO_JITTER_MEAN_MILLIS = 0x0000010100000013LL;

    // optional double io_jitter_stddev_millis = 20;
    const uint64_t IO_JITTER_STDDEV_MILLIS = 0x0000010100000014LL;

    // optional double process_time_mean_millis = 21;
    const uint64_t PROCESS_TIME_MEAN_MILLIS = 0x0000010100000015LL;

    // optional double process_time_stddev_millis = 22;
    const uint64_t PROCESS_TIME_STDDEV_MILLIS = 0x0000010100000016LL;

    // optional double timestamp_jitter_mean_millis = 23;
    const uint64_t TIMESTAMP_JITTER_MEAN_MILLIS = 0x0000010100000017LL;

    // optional double timestamp_jitter_stddev_millis = 24;
    const uint64_t TIMESTAMP_JITTER_STDDEV_MILLIS = 0x0000010100000018LL;

    // optional double latency_mean_millis = 25;
    const uint64_t LATENCY_MEAN_MILLIS = 0x0000010100000019LL;

    // optional double latency_stddev_millis = 26;
    const uint64_t LATENCY_STDDEV_MILLIS = 0x000001010000001aLL;

    static const int _FIELD_COUNT = 26;
    static const char* _FIELD_NAMES[26] = {
        "type",
        "framecount",
        "samplerate",
        "work_millis_hist",
        "latency_millis_hist",
        "warmup_millis_hist",
        "underruns",
        "overruns",
        "active_millis",
        "duration_millis",
        "id",
        "port_id",
        "sample_rate",
        "channel_mask",
        "encoding",
        "frame_count",
        "output_device",
        "input_device",
        "io_jitter_mean_millis",
        "io_jitter_stddev_millis",
        "process_time_mean_millis",
        "process_time_stddev_millis",
        "timestamp_jitter_mean_millis",
        "timestamp_jitter_stddev_millis",
        "latency_mean_millis",
        "latency_stddev_millis",
    };
    static const uint64_t _FIELD_IDS[26] = {
        TYPE,
        FRAMECOUNT,
        SAMPLERATE,
        WORK_MILLIS_HIST,
        LATENCY_MILLIS_HIST,
        WARMUP_MILLIS_HIST,
        UNDERRUNS,
        OVERRUNS,
        ACTIVE_MILLIS,
        DURATION_MILLIS,
        ID,
        PORT_ID,
        SAMPLE_RATE,
        CHANNEL_MASK,
        ENCODING,
        FRAME_COUNT,
        OUTPUT_DEVICE,
        INPUT_DEVICE,
        IO_JITTER_MEAN_MILLIS,
        IO_JITTER_STDDEV_MILLIS,
        PROCESS_TIME_MEAN_MILLIS,
        PROCESS_TIME_STDDEV_MILLIS,
        TIMESTAMP_JITTER_MEAN_MILLIS,
        TIMESTAMP_JITTER_STDDEV_MILLIS,
        LATENCY_MEAN_MILLIS,
        LATENCY_STDDEV_MILLIS,
    };

} //AudioThreadData

// message AudioTrackData
namespace AudioTrackData {
    // optional string stream_type = 1;
    const uint64_t STREAM_TYPE = 0x0000010900000001LL;

    // optional string content_type = 2;
    const uint64_t CONTENT_TYPE = 0x0000010900000002LL;

    // optional string track_usage = 3;
    const uint64_t TRACK_USAGE = 0x0000010900000003LL;

    // optional int32 sample_rate = 4;
    const uint64_t SAMPLE_RATE = 0x0000010500000004LL;

    // optional int64 channel_mask = 5;
    const uint64_t CHANNEL_MASK = 0x0000010300000005LL;

    // optional int32 underrun_frames = 6;
    const uint64_t UNDERRUN_FRAMES = 0x0000010500000006LL;

    // optional int32 startup_glitch = 7;
    const uint64_t STARTUP_GLITCH = 0x0000010500000007LL;

    // optional int32 port_id = 8;
    const uint64_t PORT_ID = 0x0000010500000008LL;

    // optional string encoding = 9;
    const uint64_t ENCODING = 0x0000010900000009LL;

    // optional int32 frame_count = 10;
    const uint64_t FRAME_COUNT = 0x000001050000000aLL;

    // optional string attributes = 11;
    const uint64_t ATTRIBUTES = 0x000001090000000bLL;

    static const int _FIELD_COUNT = 11;
    static const char* _FIELD_NAMES[11] = {
        "stream_type",
        "content_type",
        "track_usage",
        "sample_rate",
        "channel_mask",
        "underrun_frames",
        "startup_glitch",
        "port_id",
        "encoding",
        "frame_count",
        "attributes",
    };
    static const uint64_t _FIELD_IDS[11] = {
        STREAM_TYPE,
        CONTENT_TYPE,
        TRACK_USAGE,
        SAMPLE_RATE,
        CHANNEL_MASK,
        UNDERRUN_FRAMES,
        STARTUP_GLITCH,
        PORT_ID,
        ENCODING,
        FRAME_COUNT,
        ATTRIBUTES,
    };

} //AudioTrackData

// message CodecData
namespace CodecData {
    // optional string codec = 1;
    const uint64_t CODEC = 0x0000010900000001LL;

    // optional string mime = 2;
    const uint64_t MIME = 0x0000010900000002LL;

    // optional string mode = 3;
    const uint64_t MODE = 0x0000010900000003LL;

    // optional int32 encoder = 4;
    const uint64_t ENCODER = 0x0000010500000004LL;

    // optional int32 secure = 5;
    const uint64_t SECURE = 0x0000010500000005LL;

    // optional int32 width = 6;
    const uint64_t WIDTH = 0x0000010500000006LL;

    // optional int32 height = 7;
    const uint64_t HEIGHT = 0x0000010500000007LL;

    // optional int32 rotation = 8;
    const uint64_t ROTATION = 0x0000010500000008LL;

    // optional int32 crypto = 9;
    const uint64_t CRYPTO = 0x0000010500000009LL;

    // optional int32 profile = 10;
    const uint64_t PROFILE = 0x000001050000000aLL;

    // optional int32 level = 11;
    const uint64_t LEVEL = 0x000001050000000bLL;

    // optional int32 max_width = 12;
    const uint64_t MAX_WIDTH = 0x000001050000000cLL;

    // optional int32 max_height = 13;
    const uint64_t MAX_HEIGHT = 0x000001050000000dLL;

    // optional int32 error_code = 14;
    const uint64_t ERROR_CODE = 0x000001050000000eLL;

    // optional string error_state = 15;
    const uint64_t ERROR_STATE = 0x000001090000000fLL;

    // optional int64 latency_max = 16;
    const uint64_t LATENCY_MAX = 0x0000010300000010LL;

    // optional int64 latency_min = 17;
    const uint64_t LATENCY_MIN = 0x0000010300000011LL;

    // optional int64 latency_avg = 18;
    const uint64_t LATENCY_AVG = 0x0000010300000012LL;

    // optional int64 latency_count = 19;
    const uint64_t LATENCY_COUNT = 0x0000010300000013LL;

    // optional int64 latency_unknown = 20;
    const uint64_t LATENCY_UNKNOWN = 0x0000010300000014LL;

    // optional int32 queue_input_buffer_error = 21;
    const uint64_t QUEUE_INPUT_BUFFER_ERROR = 0x0000010500000015LL;

    // optional int32 queue_secure_input_buffer_error = 22;
    const uint64_t QUEUE_SECURE_INPUT_BUFFER_ERROR = 0x0000010500000016LL;

    // optional string bitrate_mode = 23;
    const uint64_t BITRATE_MODE = 0x0000010900000017LL;

    // optional int32 bitrate = 24;
    const uint64_t BITRATE = 0x0000010500000018LL;

    // optional int64 lifetime_millis = 25;
    const uint64_t LIFETIME_MILLIS = 0x0000010300000019LL;

    // optional string log_session_id = 26;
    const uint64_t LOG_SESSION_ID = 0x000001090000001aLL;

    // optional int32 channel_count = 27;
    const uint64_t CHANNEL_COUNT = 0x000001050000001bLL;

    // optional int32 sample_rate = 28;
    const uint64_t SAMPLE_RATE = 0x000001050000001cLL;

    // optional int64 video_encode_bytes = 29;
    const uint64_t VIDEO_ENCODE_BYTES = 0x000001030000001dLL;

    // optional int64 video_encode_frames = 30;
    const uint64_t VIDEO_ENCODE_FRAMES = 0x000001030000001eLL;

    // optional int64 video_input_bytes = 31;
    const uint64_t VIDEO_INPUT_BYTES = 0x000001030000001fLL;

    // optional int64 video_input_frames = 32;
    const uint64_t VIDEO_INPUT_FRAMES = 0x0000010300000020LL;

    // optional int64 video_encode_duration_us = 33;
    const uint64_t VIDEO_ENCODE_DURATION_US = 0x0000010300000021LL;

    // optional int32 color_format = 34;
    const uint64_t COLOR_FORMAT = 0x0000010500000022LL;

    // optional double frame_rate = 35;
    const uint64_t FRAME_RATE = 0x0000010100000023LL;

    // optional double capture_rate = 36;
    const uint64_t CAPTURE_RATE = 0x0000010100000024LL;

    // optional double operating_rate = 37;
    const uint64_t OPERATING_RATE = 0x0000010100000025LL;

    // optional int32 priority = 38;
    const uint64_t PRIORITY = 0x0000010500000026LL;

    // optional int32 video_qp_i_min = 39;
    const uint64_t VIDEO_QP_I_MIN = 0x0000010500000027LL;

    // optional int32 video_qp_i_max = 40;
    const uint64_t VIDEO_QP_I_MAX = 0x0000010500000028LL;

    // optional int32 video_qp_p_min = 41;
    const uint64_t VIDEO_QP_P_MIN = 0x0000010500000029LL;

    // optional int32 video_qp_p_max = 42;
    const uint64_t VIDEO_QP_P_MAX = 0x000001050000002aLL;

    // optional int32 video_qp_b_min = 43;
    const uint64_t VIDEO_QP_B_MIN = 0x000001050000002bLL;

    // optional int32 video_qp_b_max = 44;
    const uint64_t VIDEO_QP_B_MAX = 0x000001050000002cLL;

    // optional int32 original_bitrate = 45;
    const uint64_t ORIGINAL_BITRATE = 0x000001050000002dLL;

    // optional int32 shaping_enhanced = 46;
    const uint64_t SHAPING_ENHANCED = 0x000001050000002eLL;

    // optional int32 original_video_qp_i_min = 47;
    const uint64_t ORIGINAL_VIDEO_QP_I_MIN = 0x000001050000002fLL;

    // optional int32 original_video_qp_i_max = 48;
    const uint64_t ORIGINAL_VIDEO_QP_I_MAX = 0x0000010500000030LL;

    // optional int32 original_video_qp_p_min = 49;
    const uint64_t ORIGINAL_VIDEO_QP_P_MIN = 0x0000010500000031LL;

    // optional int32 original_video_qp_p_max = 50;
    const uint64_t ORIGINAL_VIDEO_QP_P_MAX = 0x0000010500000032LL;

    // optional int32 original_video_qp_b_min = 51;
    const uint64_t ORIGINAL_VIDEO_QP_B_MIN = 0x0000010500000033LL;

    // optional int32 original_video_qp_b_max = 52;
    const uint64_t ORIGINAL_VIDEO_QP_B_MAX = 0x0000010500000034LL;

    static const int _FIELD_COUNT = 52;
    static const char* _FIELD_NAMES[52] = {
        "codec",
        "mime",
        "mode",
        "encoder",
        "secure",
        "width",
        "height",
        "rotation",
        "crypto",
        "profile",
        "level",
        "max_width",
        "max_height",
        "error_code",
        "error_state",
        "latency_max",
        "latency_min",
        "latency_avg",
        "latency_count",
        "latency_unknown",
        "queue_input_buffer_error",
        "queue_secure_input_buffer_error",
        "bitrate_mode",
        "bitrate",
        "lifetime_millis",
        "log_session_id",
        "channel_count",
        "sample_rate",
        "video_encode_bytes",
        "video_encode_frames",
        "video_input_bytes",
        "video_input_frames",
        "video_encode_duration_us",
        "color_format",
        "frame_rate",
        "capture_rate",
        "operating_rate",
        "priority",
        "video_qp_i_min",
        "video_qp_i_max",
        "video_qp_p_min",
        "video_qp_p_max",
        "video_qp_b_min",
        "video_qp_b_max",
        "original_bitrate",
        "shaping_enhanced",
        "original_video_qp_i_min",
        "original_video_qp_i_max",
        "original_video_qp_p_min",
        "original_video_qp_p_max",
        "original_video_qp_b_min",
        "original_video_qp_b_max",
    };
    static const uint64_t _FIELD_IDS[52] = {
        CODEC,
        MIME,
        MODE,
        ENCODER,
        SECURE,
        WIDTH,
        HEIGHT,
        ROTATION,
        CRYPTO,
        PROFILE,
        LEVEL,
        MAX_WIDTH,
        MAX_HEIGHT,
        ERROR_CODE,
        ERROR_STATE,
        LATENCY_MAX,
        LATENCY_MIN,
        LATENCY_AVG,
        LATENCY_COUNT,
        LATENCY_UNKNOWN,
        QUEUE_INPUT_BUFFER_ERROR,
        QUEUE_SECURE_INPUT_BUFFER_ERROR,
        BITRATE_MODE,
        BITRATE,
        LIFETIME_MILLIS,
        LOG_SESSION_ID,
        CHANNEL_COUNT,
        SAMPLE_RATE,
        VIDEO_ENCODE_BYTES,
        VIDEO_ENCODE_FRAMES,
        VIDEO_INPUT_BYTES,
        VIDEO_INPUT_FRAMES,
        VIDEO_ENCODE_DURATION_US,
        COLOR_FORMAT,
        FRAME_RATE,
        CAPTURE_RATE,
        OPERATING_RATE,
        PRIORITY,
        VIDEO_QP_I_MIN,
        VIDEO_QP_I_MAX,
        VIDEO_QP_P_MIN,
        VIDEO_QP_P_MAX,
        VIDEO_QP_B_MIN,
        VIDEO_QP_B_MAX,
        ORIGINAL_BITRATE,
        SHAPING_ENHANCED,
        ORIGINAL_VIDEO_QP_I_MIN,
        ORIGINAL_VIDEO_QP_I_MAX,
        ORIGINAL_VIDEO_QP_P_MIN,
        ORIGINAL_VIDEO_QP_P_MAX,
        ORIGINAL_VIDEO_QP_B_MIN,
        ORIGINAL_VIDEO_QP_B_MAX,
    };

} //CodecData

// message ExtractorData
namespace ExtractorData {
    // enum EntryPoint
    const int UNSET = 0;
    const int SDK = 1;
    const int NDK_WITH_JVM = 2;
    const int NDK_NO_JVM = 3;
    const int OTHER = 4;
    static const int _ENUM_ENTRY_POINT_COUNT = 5;
    static const char* _ENUM_ENTRY_POINT_NAMES[5] = {
        "UNSET",
        "SDK",
        "NDK_WITH_JVM",
        "NDK_NO_JVM",
        "OTHER",
    };
    static const int _ENUM_ENTRY_POINT_VALUES[5] = {
        UNSET,
        SDK,
        NDK_WITH_JVM,
        NDK_NO_JVM,
        OTHER,
    };

    // optional string format = 1;
    const uint64_t FORMAT = 0x0000010900000001LL;

    // optional string mime = 2;
    const uint64_t MIME = 0x0000010900000002LL;

    // optional int32 tracks = 3;
    const uint64_t TRACKS = 0x0000010500000003LL;

    // optional .android.stats.mediametrics_message.ExtractorData.EntryPoint entry_point = 4;
    const uint64_t ENTRY_POINT = 0x0000010e00000004LL;

    // optional string log_session_id = 5;
    const uint64_t LOG_SESSION_ID = 0x0000010900000005LL;

    static const int _FIELD_COUNT = 5;
    static const char* _FIELD_NAMES[5] = {
        "format",
        "mime",
        "tracks",
        "entry_point",
        "log_session_id",
    };
    static const uint64_t _FIELD_IDS[5] = {
        FORMAT,
        MIME,
        TRACKS,
        ENTRY_POINT,
        LOG_SESSION_ID,
    };

} //ExtractorData

// message NuPlayerData
namespace NuPlayerData {
    // optional string whichPlayer = 1;
    const uint64_t WHICH_PLAYER = 0x0000010900000001LL;

    // optional string video_mime = 2;
    const uint64_t VIDEO_MIME = 0x0000010900000002LL;

    // optional string video_codec = 3;
    const uint64_t VIDEO_CODEC = 0x0000010900000003LL;

    // optional int32 width = 4;
    const uint64_t WIDTH = 0x0000010500000004LL;

    // optional int32 height = 5;
    const uint64_t HEIGHT = 0x0000010500000005LL;

    // optional int64 frames = 6;
    const uint64_t FRAMES = 0x0000010300000006LL;

    // optional int64 frames_dropped = 7;
    const uint64_t FRAMES_DROPPED = 0x0000010300000007LL;

    // optional double framerate = 8;
    const uint64_t FRAMERATE = 0x0000010100000008LL;

    // optional string audio_mime = 9;
    const uint64_t AUDIO_MIME = 0x0000010900000009LL;

    // optional string audio_codec = 10;
    const uint64_t AUDIO_CODEC = 0x000001090000000aLL;

    // optional int64 duration_millis = 11;
    const uint64_t DURATION_MILLIS = 0x000001030000000bLL;

    // optional int64 playing_millis = 12;
    const uint64_t PLAYING_MILLIS = 0x000001030000000cLL;

    // optional int32 error = 13;
    const uint64_t ERROR = 0x000001050000000dLL;

    // optional int32 error_code = 14;
    const uint64_t ERROR_CODE = 0x000001050000000eLL;

    // optional string error_state = 15;
    const uint64_t ERROR_STATE = 0x000001090000000fLL;

    // optional string data_source_type = 16;
    const uint64_t DATA_SOURCE_TYPE = 0x0000010900000010LL;

    // optional int64 rebuffering_millis = 17;
    const uint64_t REBUFFERING_MILLIS = 0x0000010300000011LL;

    // optional int32 rebuffers = 18;
    const uint64_t REBUFFERS = 0x0000010500000012LL;

    // optional int32 rebuffer_at_exit = 19;
    const uint64_t REBUFFER_AT_EXIT = 0x0000010500000013LL;

    // optional int64 frames_dropped_startup = 20;
    const uint64_t FRAMES_DROPPED_STARTUP = 0x0000010300000014LL;

    static const int _FIELD_COUNT = 20;
    static const char* _FIELD_NAMES[20] = {
        "whichPlayer",
        "video_mime",
        "video_codec",
        "width",
        "height",
        "frames",
        "frames_dropped",
        "framerate",
        "audio_mime",
        "audio_codec",
        "duration_millis",
        "playing_millis",
        "error",
        "error_code",
        "error_state",
        "data_source_type",
        "rebuffering_millis",
        "rebuffers",
        "rebuffer_at_exit",
        "frames_dropped_startup",
    };
    static const uint64_t _FIELD_IDS[20] = {
        WHICH_PLAYER,
        VIDEO_MIME,
        VIDEO_CODEC,
        WIDTH,
        HEIGHT,
        FRAMES,
        FRAMES_DROPPED,
        FRAMERATE,
        AUDIO_MIME,
        AUDIO_CODEC,
        DURATION_MILLIS,
        PLAYING_MILLIS,
        ERROR,
        ERROR_CODE,
        ERROR_STATE,
        DATA_SOURCE_TYPE,
        REBUFFERING_MILLIS,
        REBUFFERS,
        REBUFFER_AT_EXIT,
        FRAMES_DROPPED_STARTUP,
    };

} //NuPlayerData

// message RecorderData
namespace RecorderData {
    // optional string audio_mime = 1;
    const uint64_t AUDIO_MIME = 0x0000010900000001LL;

    // optional string video_mime = 2;
    const uint64_t VIDEO_MIME = 0x0000010900000002LL;

    // optional int32 video_profile = 3;
    const uint64_t VIDEO_PROFILE = 0x0000010500000003LL;

    // optional int32 video_level = 4;
    const uint64_t VIDEO_LEVEL = 0x0000010500000004LL;

    // optional int32 width = 5;
    const uint64_t WIDTH = 0x0000010500000005LL;

    // optional int32 height = 6;
    const uint64_t HEIGHT = 0x0000010500000006LL;

    // optional int32 rotation = 7;
    const uint64_t ROTATION = 0x0000010500000007LL;

    // optional int32 framerate = 8;
    const uint64_t FRAMERATE = 0x0000010500000008LL;

    // optional int32 capture_fps = 9;
    const uint64_t CAPTURE_FPS = 0x0000010500000009LL;

    // optional double capture_fps_enable = 10;
    const uint64_t CAPTURE_FPS_ENABLE = 0x000001010000000aLL;

    // optional int64 duration_millis = 11;
    const uint64_t DURATION_MILLIS = 0x000001030000000bLL;

    // optional int64 paused_millis = 12;
    const uint64_t PAUSED_MILLIS = 0x000001030000000cLL;

    // optional int32 paused_count = 13;
    const uint64_t PAUSED_COUNT = 0x000001050000000dLL;

    // optional int32 audio_bitrate = 14;
    const uint64_t AUDIO_BITRATE = 0x000001050000000eLL;

    // optional int32 audio_channels = 15;
    const uint64_t AUDIO_CHANNELS = 0x000001050000000fLL;

    // optional int32 audio_samplerate = 16;
    const uint64_t AUDIO_SAMPLERATE = 0x0000010500000010LL;

    // optional int32 movie_timescale = 17;
    const uint64_t MOVIE_TIMESCALE = 0x0000010500000011LL;

    // optional int32 audio_timescale = 18;
    const uint64_t AUDIO_TIMESCALE = 0x0000010500000012LL;

    // optional int32 video_timescale = 19;
    const uint64_t VIDEO_TIMESCALE = 0x0000010500000013LL;

    // optional int32 video_bitrate = 20;
    const uint64_t VIDEO_BITRATE = 0x0000010500000014LL;

    // optional int32 iframe_interval = 21;
    const uint64_t IFRAME_INTERVAL = 0x0000010500000015LL;

    // optional string log_session_id = 22;
    const uint64_t LOG_SESSION_ID = 0x0000010900000016LL;

    static const int _FIELD_COUNT = 22;
    static const char* _FIELD_NAMES[22] = {
        "audio_mime",
        "video_mime",
        "video_profile",
        "video_level",
        "width",
        "height",
        "rotation",
        "framerate",
        "capture_fps",
        "capture_fps_enable",
        "duration_millis",
        "paused_millis",
        "paused_count",
        "audio_bitrate",
        "audio_channels",
        "audio_samplerate",
        "movie_timescale",
        "audio_timescale",
        "video_timescale",
        "video_bitrate",
        "iframe_interval",
        "log_session_id",
    };
    static const uint64_t _FIELD_IDS[22] = {
        AUDIO_MIME,
        VIDEO_MIME,
        VIDEO_PROFILE,
        VIDEO_LEVEL,
        WIDTH,
        HEIGHT,
        ROTATION,
        FRAMERATE,
        CAPTURE_FPS,
        CAPTURE_FPS_ENABLE,
        DURATION_MILLIS,
        PAUSED_MILLIS,
        PAUSED_COUNT,
        AUDIO_BITRATE,
        AUDIO_CHANNELS,
        AUDIO_SAMPLERATE,
        MOVIE_TIMESCALE,
        AUDIO_TIMESCALE,
        VIDEO_TIMESCALE,
        VIDEO_BITRATE,
        IFRAME_INTERVAL,
        LOG_SESSION_ID,
    };

} //RecorderData

} // mediametrics_message
} // stats
} // android

#endif // ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_MESSAGE_MEDIAMETRICS_MESSAGE_PROTO_STREAM_H
