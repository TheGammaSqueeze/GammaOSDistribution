// Generated by protoc-gen-cppstream. DO NOT MODIFY.
// source: frameworks/base/core/proto/android/internal/powerprofile.proto

#ifndef ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_INTERNAL_POWERPROFILE_PROTO_STREAM_H
#define ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_INTERNAL_POWERPROFILE_PROTO_STREAM_H

namespace com {
namespace android {
namespace internal {
namespace os {

// message PowerProfileProto
namespace PowerProfileProto {
    // message CpuCluster
    namespace CpuCluster {
        // optional int32 id = 1;
        const uint64_t ID = 0x0000010500000001LL;

        // optional double cluster_power = 2;
        const uint64_t CLUSTER_POWER = 0x0000010100000002LL;

        // optional int32 cores = 3;
        const uint64_t CORES = 0x0000010500000003LL;

        // repeated int64 speed = 4;
        const uint64_t SPEED = 0x0000020300000004LL;

        // repeated double core_power = 5;
        const uint64_t CORE_POWER = 0x0000020100000005LL;

        static const int _FIELD_COUNT = 5;
        static const char* _FIELD_NAMES[5] = {
            "id",
            "cluster_power",
            "cores",
            "speed",
            "core_power",
        };
        static const uint64_t _FIELD_IDS[5] = {
            ID,
            CLUSTER_POWER,
            CORES,
            SPEED,
            CORE_POWER,
        };

    } //CpuCluster

    // optional double cpu_suspend = 1;
    const uint64_t CPU_SUSPEND = 0x0000010100000001LL;

    // optional double cpu_idle = 2;
    const uint64_t CPU_IDLE = 0x0000010100000002LL;

    // optional double cpu_active = 3;
    const uint64_t CPU_ACTIVE = 0x0000010100000003LL;

    // repeated .com.android.internal.os.PowerProfileProto.CpuCluster cpu_cluster = 40;
    const uint64_t CPU_CLUSTER = 0x0000020b00000028LL;

    // optional double wifi_scan = 4;
    const uint64_t WIFI_SCAN = 0x0000010100000004LL;

    // optional double wifi_on = 5;
    const uint64_t WIFI_ON = 0x0000010100000005LL;

    // optional double wifi_active = 6;
    const uint64_t WIFI_ACTIVE = 0x0000010100000006LL;

    // optional double wifi_controller_idle = 7;
    const uint64_t WIFI_CONTROLLER_IDLE = 0x0000010100000007LL;

    // optional double wifi_controller_rx = 8;
    const uint64_t WIFI_CONTROLLER_RX = 0x0000010100000008LL;

    // optional double wifi_controller_tx = 9;
    const uint64_t WIFI_CONTROLLER_TX = 0x0000010100000009LL;

    // repeated double wifi_controller_tx_levels = 10;
    const uint64_t WIFI_CONTROLLER_TX_LEVELS = 0x000002010000000aLL;

    // optional double wifi_controller_operating_voltage = 11;
    const uint64_t WIFI_CONTROLLER_OPERATING_VOLTAGE = 0x000001010000000bLL;

    // optional double bluetooth_controller_idle = 12;
    const uint64_t BLUETOOTH_CONTROLLER_IDLE = 0x000001010000000cLL;

    // optional double bluetooth_controller_rx = 13;
    const uint64_t BLUETOOTH_CONTROLLER_RX = 0x000001010000000dLL;

    // optional double bluetooth_controller_tx = 14;
    const uint64_t BLUETOOTH_CONTROLLER_TX = 0x000001010000000eLL;

    // optional double bluetooth_controller_operating_voltage = 15;
    const uint64_t BLUETOOTH_CONTROLLER_OPERATING_VOLTAGE = 0x000001010000000fLL;

    // optional double modem_controller_sleep = 16;
    const uint64_t MODEM_CONTROLLER_SLEEP = 0x0000010100000010LL;

    // optional double modem_controller_idle = 17;
    const uint64_t MODEM_CONTROLLER_IDLE = 0x0000010100000011LL;

    // optional double modem_controller_rx = 18;
    const uint64_t MODEM_CONTROLLER_RX = 0x0000010100000012LL;

    // repeated double modem_controller_tx = 19;
    const uint64_t MODEM_CONTROLLER_TX = 0x0000020100000013LL;

    // optional double modem_controller_operating_voltage = 20;
    const uint64_t MODEM_CONTROLLER_OPERATING_VOLTAGE = 0x0000010100000014LL;

    // optional double gps_on = 21;
    const uint64_t GPS_ON = 0x0000010100000015LL;

    // repeated double gps_signal_quality_based = 22;
    const uint64_t GPS_SIGNAL_QUALITY_BASED = 0x0000020100000016LL;

    // optional double gps_operating_voltage = 23;
    const uint64_t GPS_OPERATING_VOLTAGE = 0x0000010100000017LL;

    // optional double bluetooth_on = 24;
    const uint64_t BLUETOOTH_ON = 0x0000010100000018LL;

    // optional double bluetooth_active = 25;
    const uint64_t BLUETOOTH_ACTIVE = 0x0000010100000019LL;

    // optional double bluetooth_at_cmd = 26;
    const uint64_t BLUETOOTH_AT_CMD = 0x000001010000001aLL;

    // optional double ambient_display = 27;
    const uint64_t AMBIENT_DISPLAY = 0x000001010000001bLL;

    // optional double screen_on = 28;
    const uint64_t SCREEN_ON = 0x000001010000001cLL;

    // optional double radio_on = 29;
    const uint64_t RADIO_ON = 0x000001010000001dLL;

    // optional double radio_scanning = 30;
    const uint64_t RADIO_SCANNING = 0x000001010000001eLL;

    // optional double radio_active = 31;
    const uint64_t RADIO_ACTIVE = 0x000001010000001fLL;

    // optional double screen_full = 32;
    const uint64_t SCREEN_FULL = 0x0000010100000020LL;

    // optional double audio = 33;
    const uint64_t AUDIO = 0x0000010100000021LL;

    // optional double video = 34;
    const uint64_t VIDEO = 0x0000010100000022LL;

    // optional double flashlight = 35;
    const uint64_t FLASHLIGHT = 0x0000010100000023LL;

    // optional double memory = 36;
    const uint64_t MEMORY = 0x0000010100000024LL;

    // optional double camera = 37;
    const uint64_t CAMERA = 0x0000010100000025LL;

    // optional double wifi_batched_scan = 38;
    const uint64_t WIFI_BATCHED_SCAN = 0x0000010100000026LL;

    // optional double battery_capacity = 39;
    const uint64_t BATTERY_CAPACITY = 0x0000010100000027LL;

    static const int _FIELD_COUNT = 40;
    static const char* _FIELD_NAMES[40] = {
        "cpu_suspend",
        "cpu_idle",
        "cpu_active",
        "cpu_cluster",
        "wifi_scan",
        "wifi_on",
        "wifi_active",
        "wifi_controller_idle",
        "wifi_controller_rx",
        "wifi_controller_tx",
        "wifi_controller_tx_levels",
        "wifi_controller_operating_voltage",
        "bluetooth_controller_idle",
        "bluetooth_controller_rx",
        "bluetooth_controller_tx",
        "bluetooth_controller_operating_voltage",
        "modem_controller_sleep",
        "modem_controller_idle",
        "modem_controller_rx",
        "modem_controller_tx",
        "modem_controller_operating_voltage",
        "gps_on",
        "gps_signal_quality_based",
        "gps_operating_voltage",
        "bluetooth_on",
        "bluetooth_active",
        "bluetooth_at_cmd",
        "ambient_display",
        "screen_on",
        "radio_on",
        "radio_scanning",
        "radio_active",
        "screen_full",
        "audio",
        "video",
        "flashlight",
        "memory",
        "camera",
        "wifi_batched_scan",
        "battery_capacity",
    };
    static const uint64_t _FIELD_IDS[40] = {
        CPU_SUSPEND,
        CPU_IDLE,
        CPU_ACTIVE,
        CPU_CLUSTER,
        WIFI_SCAN,
        WIFI_ON,
        WIFI_ACTIVE,
        WIFI_CONTROLLER_IDLE,
        WIFI_CONTROLLER_RX,
        WIFI_CONTROLLER_TX,
        WIFI_CONTROLLER_TX_LEVELS,
        WIFI_CONTROLLER_OPERATING_VOLTAGE,
        BLUETOOTH_CONTROLLER_IDLE,
        BLUETOOTH_CONTROLLER_RX,
        BLUETOOTH_CONTROLLER_TX,
        BLUETOOTH_CONTROLLER_OPERATING_VOLTAGE,
        MODEM_CONTROLLER_SLEEP,
        MODEM_CONTROLLER_IDLE,
        MODEM_CONTROLLER_RX,
        MODEM_CONTROLLER_TX,
        MODEM_CONTROLLER_OPERATING_VOLTAGE,
        GPS_ON,
        GPS_SIGNAL_QUALITY_BASED,
        GPS_OPERATING_VOLTAGE,
        BLUETOOTH_ON,
        BLUETOOTH_ACTIVE,
        BLUETOOTH_AT_CMD,
        AMBIENT_DISPLAY,
        SCREEN_ON,
        RADIO_ON,
        RADIO_SCANNING,
        RADIO_ACTIVE,
        SCREEN_FULL,
        AUDIO,
        VIDEO,
        FLASHLIGHT,
        MEMORY,
        CAMERA,
        WIFI_BATCHED_SCAN,
        BATTERY_CAPACITY,
    };

} //PowerProfileProto

} // os
} // internal
} // android
} // com

#endif // ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_INTERNAL_POWERPROFILE_PROTO_STREAM_H
