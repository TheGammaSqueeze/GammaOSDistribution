// Generated by protoc-gen-cppstream. DO NOT MODIFY.
// source: frameworks/base/core/proto/android/service/usb.proto

#ifndef ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_SERVICE_USB_PROTO_STREAM_H
#define ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_SERVICE_USB_PROTO_STREAM_H

namespace android {
namespace service {
namespace usb {

// message UsbServiceDumpProto
namespace UsbServiceDumpProto {
    // optional .android.service.usb.UsbDeviceManagerProto device_manager = 1;
    const uint64_t DEVICE_MANAGER = 0x0000010b00000001LL;

    // optional .android.service.usb.UsbHostManagerProto host_manager = 2;
    const uint64_t HOST_MANAGER = 0x0000010b00000002LL;

    // optional .android.service.usb.UsbPortManagerProto port_manager = 3;
    const uint64_t PORT_MANAGER = 0x0000010b00000003LL;

    // optional .android.service.usb.UsbAlsaManagerProto alsa_manager = 4;
    const uint64_t ALSA_MANAGER = 0x0000010b00000004LL;

    // optional .android.service.usb.UsbSettingsManagerProto settings_manager = 5;
    const uint64_t SETTINGS_MANAGER = 0x0000010b00000005LL;

    // optional .android.service.usb.UsbPermissionsManagerProto permissions_manager = 6;
    const uint64_t PERMISSIONS_MANAGER = 0x0000010b00000006LL;

    static const int _FIELD_COUNT = 6;
    static const char* _FIELD_NAMES[6] = {
        "device_manager",
        "host_manager",
        "port_manager",
        "alsa_manager",
        "settings_manager",
        "permissions_manager",
    };
    static const uint64_t _FIELD_IDS[6] = {
        DEVICE_MANAGER,
        HOST_MANAGER,
        PORT_MANAGER,
        ALSA_MANAGER,
        SETTINGS_MANAGER,
        PERMISSIONS_MANAGER,
    };

} //UsbServiceDumpProto

// message UsbDeviceManagerProto
namespace UsbDeviceManagerProto {
    // optional .android.service.usb.UsbHandlerProto handler = 1;
    const uint64_t HANDLER = 0x0000010b00000001LL;

    // optional .android.service.usb.UsbDebuggingManagerProto debugging_manager = 2;
    const uint64_t DEBUGGING_MANAGER = 0x0000010b00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "handler",
        "debugging_manager",
    };
    static const uint64_t _FIELD_IDS[2] = {
        HANDLER,
        DEBUGGING_MANAGER,
    };

} //UsbDeviceManagerProto

// message UsbHandlerProto
namespace UsbHandlerProto {
    // enum Function
    const int FUNCTION_ADB = 1;
    const int FUNCTION_ACCESSORY = 2;
    const int FUNCTION_MTP = 4;
    const int FUNCTION_MIDI = 8;
    const int FUNCTION_PTP = 16;
    const int FUNCTION_RNDIS = 32;
    const int FUNCTION_AUDIO_SOURCE = 64;
    static const int _ENUM_FUNCTION_COUNT = 7;
    static const char* _ENUM_FUNCTION_NAMES[7] = {
        "ADB",
        "ACCESSORY",
        "MTP",
        "MIDI",
        "PTP",
        "RNDIS",
        "AUDIO_SOURCE",
    };
    static const int _ENUM_FUNCTION_VALUES[7] = {
        FUNCTION_ADB,
        FUNCTION_ACCESSORY,
        FUNCTION_MTP,
        FUNCTION_MIDI,
        FUNCTION_PTP,
        FUNCTION_RNDIS,
        FUNCTION_AUDIO_SOURCE,
    };

    // repeated .android.service.usb.UsbHandlerProto.Function current_functions = 1;
    const uint64_t CURRENT_FUNCTIONS = 0x0000020e00000001LL;

    // optional bool current_functions_applied = 2;
    const uint64_t CURRENT_FUNCTIONS_APPLIED = 0x0000010800000002LL;

    // repeated .android.service.usb.UsbHandlerProto.Function screen_unlocked_functions = 3;
    const uint64_t SCREEN_UNLOCKED_FUNCTIONS = 0x0000020e00000003LL;

    // optional bool screen_locked = 4;
    const uint64_t SCREEN_LOCKED = 0x0000010800000004LL;

    // optional bool connected = 5;
    const uint64_t CONNECTED = 0x0000010800000005LL;

    // optional bool configured = 6;
    const uint64_t CONFIGURED = 0x0000010800000006LL;

    // optional .android.service.usb.UsbAccessoryProto current_accessory = 7;
    const uint64_t CURRENT_ACCESSORY = 0x0000010b00000007LL;

    // optional bool host_connected = 8;
    const uint64_t HOST_CONNECTED = 0x0000010800000008LL;

    // optional bool source_power = 9;
    const uint64_t SOURCE_POWER = 0x0000010800000009LL;

    // optional bool sink_power = 10;
    const uint64_t SINK_POWER = 0x000001080000000aLL;

    // optional bool usb_charging = 11;
    const uint64_t USB_CHARGING = 0x000001080000000bLL;

    // optional bool hide_usb_notification = 12;
    const uint64_t HIDE_USB_NOTIFICATION = 0x000001080000000cLL;

    // optional bool audio_accessory_connected = 13;
    const uint64_t AUDIO_ACCESSORY_CONNECTED = 0x000001080000000dLL;

    // optional bool adb_enabled = 14;
    const uint64_t ADB_ENABLED = 0x000001080000000eLL;

    // optional string kernel_state = 15;
    const uint64_t KERNEL_STATE = 0x000001090000000fLL;

    // optional string kernel_function_list = 16;
    const uint64_t KERNEL_FUNCTION_LIST = 0x0000010900000010LL;

    static const int _FIELD_COUNT = 16;
    static const char* _FIELD_NAMES[16] = {
        "current_functions",
        "current_functions_applied",
        "screen_unlocked_functions",
        "screen_locked",
        "connected",
        "configured",
        "current_accessory",
        "host_connected",
        "source_power",
        "sink_power",
        "usb_charging",
        "hide_usb_notification",
        "audio_accessory_connected",
        "adb_enabled",
        "kernel_state",
        "kernel_function_list",
    };
    static const uint64_t _FIELD_IDS[16] = {
        CURRENT_FUNCTIONS,
        CURRENT_FUNCTIONS_APPLIED,
        SCREEN_UNLOCKED_FUNCTIONS,
        SCREEN_LOCKED,
        CONNECTED,
        CONFIGURED,
        CURRENT_ACCESSORY,
        HOST_CONNECTED,
        SOURCE_POWER,
        SINK_POWER,
        USB_CHARGING,
        HIDE_USB_NOTIFICATION,
        AUDIO_ACCESSORY_CONNECTED,
        ADB_ENABLED,
        KERNEL_STATE,
        KERNEL_FUNCTION_LIST,
    };

} //UsbHandlerProto

// message UsbAccessoryProto
namespace UsbAccessoryProto {
    // optional string manufacturer = 1;
    const uint64_t MANUFACTURER = 0x0000010900000001LL;

    // optional string model = 2;
    const uint64_t MODEL = 0x0000010900000002LL;

    // optional string description = 3;
    const uint64_t DESCRIPTION = 0x0000010900000003LL;

    // optional string version = 4;
    const uint64_t VERSION = 0x0000010900000004LL;

    // optional string uri = 5;
    const uint64_t URI = 0x0000010900000005LL;

    // optional string serial = 6;
    const uint64_t SERIAL = 0x0000010900000006LL;

    static const int _FIELD_COUNT = 6;
    static const char* _FIELD_NAMES[6] = {
        "manufacturer",
        "model",
        "description",
        "version",
        "uri",
        "serial",
    };
    static const uint64_t _FIELD_IDS[6] = {
        MANUFACTURER,
        MODEL,
        DESCRIPTION,
        VERSION,
        URI,
        SERIAL,
    };

} //UsbAccessoryProto

// message UsbDebuggingManagerProto
namespace UsbDebuggingManagerProto {
    // optional bool connected_to_adb = 1;
    const uint64_t CONNECTED_TO_ADB = 0x0000010800000001LL;

    // optional string last_key_received = 2;
    const uint64_t LAST_KEY_RECEIVED = 0x0000010900000002LL;

    // optional string user_keys = 3;
    const uint64_t USER_KEYS = 0x0000010900000003LL;

    // optional string system_keys = 4;
    const uint64_t SYSTEM_KEYS = 0x0000010900000004LL;

    static const int _FIELD_COUNT = 4;
    static const char* _FIELD_NAMES[4] = {
        "connected_to_adb",
        "last_key_received",
        "user_keys",
        "system_keys",
    };
    static const uint64_t _FIELD_IDS[4] = {
        CONNECTED_TO_ADB,
        LAST_KEY_RECEIVED,
        USER_KEYS,
        SYSTEM_KEYS,
    };

} //UsbDebuggingManagerProto

// message UsbHostManagerProto
namespace UsbHostManagerProto {
    // optional .android.content.ComponentNameProto default_usb_host_connection_handler = 1;
    const uint64_t DEFAULT_USB_HOST_CONNECTION_HANDLER = 0x0000010b00000001LL;

    // repeated .android.service.usb.UsbDeviceProto devices = 2;
    const uint64_t DEVICES = 0x0000020b00000002LL;

    // optional int32 num_connects = 3;
    const uint64_t NUM_CONNECTS = 0x0000010500000003LL;

    // repeated .android.service.usb.UsbConnectionRecordProto connections = 4;
    const uint64_t CONNECTIONS = 0x0000020b00000004LL;

    static const int _FIELD_COUNT = 4;
    static const char* _FIELD_NAMES[4] = {
        "default_usb_host_connection_handler",
        "devices",
        "num_connects",
        "connections",
    };
    static const uint64_t _FIELD_IDS[4] = {
        DEFAULT_USB_HOST_CONNECTION_HANDLER,
        DEVICES,
        NUM_CONNECTS,
        CONNECTIONS,
    };

} //UsbHostManagerProto

// message UsbDeviceProto
namespace UsbDeviceProto {
    // optional string name = 1;
    const uint64_t NAME = 0x0000010900000001LL;

    // optional int32 vendor_id = 2;
    const uint64_t VENDOR_ID = 0x0000010500000002LL;

    // optional int32 product_id = 3;
    const uint64_t PRODUCT_ID = 0x0000010500000003LL;

    // optional int32 class = 4;
    const uint64_t CLASS = 0x0000010500000004LL;

    // optional int32 subclass = 5;
    const uint64_t SUBCLASS = 0x0000010500000005LL;

    // optional int32 protocol = 6;
    const uint64_t PROTOCOL = 0x0000010500000006LL;

    // optional string manufacturer_name = 7;
    const uint64_t MANUFACTURER_NAME = 0x0000010900000007LL;

    // optional string product_name = 8;
    const uint64_t PRODUCT_NAME = 0x0000010900000008LL;

    // optional string version = 9;
    const uint64_t VERSION = 0x0000010900000009LL;

    // optional string serial_number = 10;
    const uint64_t SERIAL_NUMBER = 0x000001090000000aLL;

    // repeated .android.service.usb.UsbConfigurationProto configurations = 11;
    const uint64_t CONFIGURATIONS = 0x0000020b0000000bLL;

    static const int _FIELD_COUNT = 11;
    static const char* _FIELD_NAMES[11] = {
        "name",
        "vendor_id",
        "product_id",
        "class",
        "subclass",
        "protocol",
        "manufacturer_name",
        "product_name",
        "version",
        "serial_number",
        "configurations",
    };
    static const uint64_t _FIELD_IDS[11] = {
        NAME,
        VENDOR_ID,
        PRODUCT_ID,
        CLASS,
        SUBCLASS,
        PROTOCOL,
        MANUFACTURER_NAME,
        PRODUCT_NAME,
        VERSION,
        SERIAL_NUMBER,
        CONFIGURATIONS,
    };

} //UsbDeviceProto

// message UsbConfigurationProto
namespace UsbConfigurationProto {
    // optional int32 id = 1;
    const uint64_t ID = 0x0000010500000001LL;

    // optional string name = 2;
    const uint64_t NAME = 0x0000010900000002LL;

    // optional uint32 attributes = 3;
    const uint64_t ATTRIBUTES = 0x0000010d00000003LL;

    // optional int32 max_power = 4;
    const uint64_t MAX_POWER = 0x0000010500000004LL;

    // repeated .android.service.usb.UsbInterfaceProto interfaces = 5;
    const uint64_t INTERFACES = 0x0000020b00000005LL;

    static const int _FIELD_COUNT = 5;
    static const char* _FIELD_NAMES[5] = {
        "id",
        "name",
        "attributes",
        "max_power",
        "interfaces",
    };
    static const uint64_t _FIELD_IDS[5] = {
        ID,
        NAME,
        ATTRIBUTES,
        MAX_POWER,
        INTERFACES,
    };

} //UsbConfigurationProto

// message UsbInterfaceProto
namespace UsbInterfaceProto {
    // optional int32 id = 1;
    const uint64_t ID = 0x0000010500000001LL;

    // optional int32 alternate_settings = 2;
    const uint64_t ALTERNATE_SETTINGS = 0x0000010500000002LL;

    // optional string name = 3;
    const uint64_t NAME = 0x0000010900000003LL;

    // optional int32 class = 4;
    const uint64_t CLASS = 0x0000010500000004LL;

    // optional int32 subclass = 5;
    const uint64_t SUBCLASS = 0x0000010500000005LL;

    // optional int32 protocol = 6;
    const uint64_t PROTOCOL = 0x0000010500000006LL;

    // repeated .android.service.usb.UsbEndPointProto endpoints = 7;
    const uint64_t ENDPOINTS = 0x0000020b00000007LL;

    static const int _FIELD_COUNT = 7;
    static const char* _FIELD_NAMES[7] = {
        "id",
        "alternate_settings",
        "name",
        "class",
        "subclass",
        "protocol",
        "endpoints",
    };
    static const uint64_t _FIELD_IDS[7] = {
        ID,
        ALTERNATE_SETTINGS,
        NAME,
        CLASS,
        SUBCLASS,
        PROTOCOL,
        ENDPOINTS,
    };

} //UsbInterfaceProto

// message UsbEndPointProto
namespace UsbEndPointProto {
    // optional int32 endpoint_number = 1;
    const uint64_t ENDPOINT_NUMBER = 0x0000010500000001LL;

    // optional .android.service.UsbEndPointDirection direction = 2;
    const uint64_t DIRECTION = 0x0000010e00000002LL;

    // optional int32 address = 3;
    const uint64_t ADDRESS = 0x0000010500000003LL;

    // optional .android.service.UsbEndPointType type = 4;
    const uint64_t TYPE = 0x0000010e00000004LL;

    // optional uint32 attributes = 5;
    const uint64_t ATTRIBUTES = 0x0000010d00000005LL;

    // optional int32 max_packet_size = 6;
    const uint64_t MAX_PACKET_SIZE = 0x0000010500000006LL;

    // optional int32 interval = 7;
    const uint64_t INTERVAL = 0x0000010500000007LL;

    static const int _FIELD_COUNT = 7;
    static const char* _FIELD_NAMES[7] = {
        "endpoint_number",
        "direction",
        "address",
        "type",
        "attributes",
        "max_packet_size",
        "interval",
    };
    static const uint64_t _FIELD_IDS[7] = {
        ENDPOINT_NUMBER,
        DIRECTION,
        ADDRESS,
        TYPE,
        ATTRIBUTES,
        MAX_PACKET_SIZE,
        INTERVAL,
    };

} //UsbEndPointProto

// message UsbConnectionRecordProto
namespace UsbConnectionRecordProto {
    // optional string device_address = 1;
    const uint64_t DEVICE_ADDRESS = 0x0000010900000001LL;

    // optional .android.service.UsbConnectionRecordMode mode = 2;
    const uint64_t MODE = 0x0000010e00000002LL;

    // optional int64 timestamp = 3;
    const uint64_t TIMESTAMP = 0x0000010300000003LL;

    // optional int32 manufacturer = 4;
    const uint64_t MANUFACTURER = 0x0000010500000004LL;

    // optional int32 product = 5;
    const uint64_t PRODUCT = 0x0000010500000005LL;

    // optional .android.service.usb.UsbIsHeadsetProto is_headset = 6;
    const uint64_t IS_HEADSET = 0x0000010b00000006LL;

    static const int _FIELD_COUNT = 6;
    static const char* _FIELD_NAMES[6] = {
        "device_address",
        "mode",
        "timestamp",
        "manufacturer",
        "product",
        "is_headset",
    };
    static const uint64_t _FIELD_IDS[6] = {
        DEVICE_ADDRESS,
        MODE,
        TIMESTAMP,
        MANUFACTURER,
        PRODUCT,
        IS_HEADSET,
    };

} //UsbConnectionRecordProto

// message UsbIsHeadsetProto
namespace UsbIsHeadsetProto {
    // optional bool in = 1;
    const uint64_t IN = 0x0000010800000001LL;

    // optional bool out = 2;
    const uint64_t OUT = 0x0000010800000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "in",
        "out",
    };
    static const uint64_t _FIELD_IDS[2] = {
        IN,
        OUT,
    };

} //UsbIsHeadsetProto

// message UsbPortManagerProto
namespace UsbPortManagerProto {
    // optional bool is_simulation_active = 1;
    const uint64_t IS_SIMULATION_ACTIVE = 0x0000010800000001LL;

    // repeated .android.service.usb.UsbPortInfoProto usb_ports = 2;
    const uint64_t USB_PORTS = 0x0000020b00000002LL;

    // optional bool enable_usb_data_signaling = 3;
    const uint64_t ENABLE_USB_DATA_SIGNALING = 0x0000010800000003LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "is_simulation_active",
        "usb_ports",
        "enable_usb_data_signaling",
    };
    static const uint64_t _FIELD_IDS[3] = {
        IS_SIMULATION_ACTIVE,
        USB_PORTS,
        ENABLE_USB_DATA_SIGNALING,
    };

} //UsbPortManagerProto

// message UsbPortInfoProto
namespace UsbPortInfoProto {
    // optional .android.service.usb.UsbPortProto port = 1;
    const uint64_t PORT = 0x0000010b00000001LL;

    // optional .android.service.usb.UsbPortStatusProto status = 2;
    const uint64_t STATUS = 0x0000010b00000002LL;

    // optional bool can_change_mode = 3;
    const uint64_t CAN_CHANGE_MODE = 0x0000010800000003LL;

    // optional bool can_change_power_role = 4;
    const uint64_t CAN_CHANGE_POWER_ROLE = 0x0000010800000004LL;

    // optional bool can_change_data_role = 5;
    const uint64_t CAN_CHANGE_DATA_ROLE = 0x0000010800000005LL;

    // optional int64 connected_at_millis = 6;
    const uint64_t CONNECTED_AT_MILLIS = 0x0000010300000006LL;

    // optional int64 last_connect_duration_millis = 7;
    const uint64_t LAST_CONNECT_DURATION_MILLIS = 0x0000010300000007LL;

    static const int _FIELD_COUNT = 7;
    static const char* _FIELD_NAMES[7] = {
        "port",
        "status",
        "can_change_mode",
        "can_change_power_role",
        "can_change_data_role",
        "connected_at_millis",
        "last_connect_duration_millis",
    };
    static const uint64_t _FIELD_IDS[7] = {
        PORT,
        STATUS,
        CAN_CHANGE_MODE,
        CAN_CHANGE_POWER_ROLE,
        CAN_CHANGE_DATA_ROLE,
        CONNECTED_AT_MILLIS,
        LAST_CONNECT_DURATION_MILLIS,
    };

} //UsbPortInfoProto

// message UsbPortProto
namespace UsbPortProto {
    // enum Mode
    const int MODE_NONE = 0;
    const int MODE_UFP = 1;
    const int MODE_DFP = 2;
    const int MODE_DRP = 3;
    const int MODE_AUDIO_ACCESSORY = 4;
    const int MODE_DEBUG_ACCESSORY = 8;
    static const int _ENUM_MODE_COUNT = 6;
    static const char* _ENUM_MODE_NAMES[6] = {
        "NONE",
        "UFP",
        "DFP",
        "DRP",
        "AUDIO_ACCESSORY",
        "DEBUG_ACCESSORY",
    };
    static const int _ENUM_MODE_VALUES[6] = {
        MODE_NONE,
        MODE_UFP,
        MODE_DFP,
        MODE_DRP,
        MODE_AUDIO_ACCESSORY,
        MODE_DEBUG_ACCESSORY,
    };

    // optional string id = 1;
    const uint64_t ID = 0x0000010900000001LL;

    // repeated .android.service.usb.UsbPortProto.Mode supported_modes = 2;
    const uint64_t SUPPORTED_MODES = 0x0000020e00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "id",
        "supported_modes",
    };
    static const uint64_t _FIELD_IDS[2] = {
        ID,
        SUPPORTED_MODES,
    };

} //UsbPortProto

// message UsbPortStatusProto
namespace UsbPortStatusProto {
    // enum PowerRole
    const int POWER_ROLE_NONE = 0;
    const int POWER_ROLE_SOURCE = 1;
    const int POWER_ROLE_SINK = 2;
    static const int _ENUM_POWER_ROLE_COUNT = 3;
    static const char* _ENUM_POWER_ROLE_NAMES[3] = {
        "NONE",
        "SOURCE",
        "SINK",
    };
    static const int _ENUM_POWER_ROLE_VALUES[3] = {
        POWER_ROLE_NONE,
        POWER_ROLE_SOURCE,
        POWER_ROLE_SINK,
    };

    // enum DataRole
    const int DATA_ROLE_NONE = 0;
    const int DATA_ROLE_HOST = 1;
    const int DATA_ROLE_DEVICE = 2;
    static const int _ENUM_DATA_ROLE_COUNT = 3;
    static const char* _ENUM_DATA_ROLE_NAMES[3] = {
        "NONE",
        "HOST",
        "DEVICE",
    };
    static const int _ENUM_DATA_ROLE_VALUES[3] = {
        DATA_ROLE_NONE,
        DATA_ROLE_HOST,
        DATA_ROLE_DEVICE,
    };

    // optional bool connected = 1;
    const uint64_t CONNECTED = 0x0000010800000001LL;

    // optional .android.service.usb.UsbPortProto.Mode current_mode = 2;
    const uint64_t CURRENT_MODE = 0x0000010e00000002LL;

    // optional .android.service.usb.UsbPortStatusProto.PowerRole power_role = 3;
    const uint64_t POWER_ROLE = 0x0000010e00000003LL;

    // optional .android.service.usb.UsbPortStatusProto.DataRole data_role = 4;
    const uint64_t DATA_ROLE = 0x0000010e00000004LL;

    // repeated .android.service.usb.UsbPortStatusRoleCombinationProto role_combinations = 5;
    const uint64_t ROLE_COMBINATIONS = 0x0000020b00000005LL;

    // optional .android.service.ContaminantPresenceStatus contaminant_presence_status = 6;
    const uint64_t CONTAMINANT_PRESENCE_STATUS = 0x0000010e00000006LL;

    static const int _FIELD_COUNT = 6;
    static const char* _FIELD_NAMES[6] = {
        "connected",
        "current_mode",
        "power_role",
        "data_role",
        "role_combinations",
        "contaminant_presence_status",
    };
    static const uint64_t _FIELD_IDS[6] = {
        CONNECTED,
        CURRENT_MODE,
        POWER_ROLE,
        DATA_ROLE,
        ROLE_COMBINATIONS,
        CONTAMINANT_PRESENCE_STATUS,
    };

} //UsbPortStatusProto

// message UsbPortStatusRoleCombinationProto
namespace UsbPortStatusRoleCombinationProto {
    // optional .android.service.usb.UsbPortStatusProto.PowerRole power_role = 1;
    const uint64_t POWER_ROLE = 0x0000010e00000001LL;

    // optional .android.service.usb.UsbPortStatusProto.DataRole data_role = 2;
    const uint64_t DATA_ROLE = 0x0000010e00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "power_role",
        "data_role",
    };
    static const uint64_t _FIELD_IDS[2] = {
        POWER_ROLE,
        DATA_ROLE,
    };

} //UsbPortStatusRoleCombinationProto

// message UsbAlsaManagerProto
namespace UsbAlsaManagerProto {
    // optional int32 cards_parser = 1;
    const uint64_t CARDS_PARSER = 0x0000010500000001LL;

    // repeated .android.service.usb.UsbAlsaDeviceProto alsa_devices = 2;
    const uint64_t ALSA_DEVICES = 0x0000020b00000002LL;

    // repeated .android.service.usb.UsbMidiDeviceProto midi_devices = 3;
    const uint64_t MIDI_DEVICES = 0x0000020b00000003LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "cards_parser",
        "alsa_devices",
        "midi_devices",
    };
    static const uint64_t _FIELD_IDS[3] = {
        CARDS_PARSER,
        ALSA_DEVICES,
        MIDI_DEVICES,
    };

} //UsbAlsaManagerProto

// message UsbAlsaDeviceProto
namespace UsbAlsaDeviceProto {
    // optional int32 card = 1;
    const uint64_t CARD = 0x0000010500000001LL;

    // optional int32 device = 2;
    const uint64_t DEVICE = 0x0000010500000002LL;

    // optional string name = 3;
    const uint64_t NAME = 0x0000010900000003LL;

    // optional bool has_playback = 4;
    const uint64_t HAS_PLAYBACK = 0x0000010800000004LL;

    // optional bool has_capture = 5;
    const uint64_t HAS_CAPTURE = 0x0000010800000005LL;

    // optional string address = 6;
    const uint64_t ADDRESS = 0x0000010900000006LL;

    static const int _FIELD_COUNT = 6;
    static const char* _FIELD_NAMES[6] = {
        "card",
        "device",
        "name",
        "has_playback",
        "has_capture",
        "address",
    };
    static const uint64_t _FIELD_IDS[6] = {
        CARD,
        DEVICE,
        NAME,
        HAS_PLAYBACK,
        HAS_CAPTURE,
        ADDRESS,
    };

} //UsbAlsaDeviceProto

// message UsbMidiDeviceProto
namespace UsbMidiDeviceProto {
    // optional int32 card = 1;
    const uint64_t CARD = 0x0000010500000001LL;

    // optional int32 device = 2;
    const uint64_t DEVICE = 0x0000010500000002LL;

    // optional string device_address = 3;
    const uint64_t DEVICE_ADDRESS = 0x0000010900000003LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "card",
        "device",
        "device_address",
    };
    static const uint64_t _FIELD_IDS[3] = {
        CARD,
        DEVICE,
        DEVICE_ADDRESS,
    };

} //UsbMidiDeviceProto

// message UsbSettingsManagerProto
namespace UsbSettingsManagerProto {
    // repeated .android.service.usb.UsbUserSettingsManagerProto user_settings = 1;
    const uint64_t USER_SETTINGS = 0x0000020b00000001LL;

    // repeated .android.service.usb.UsbProfileGroupSettingsManagerProto profile_group_settings = 2;
    const uint64_t PROFILE_GROUP_SETTINGS = 0x0000020b00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "user_settings",
        "profile_group_settings",
    };
    static const uint64_t _FIELD_IDS[2] = {
        USER_SETTINGS,
        PROFILE_GROUP_SETTINGS,
    };

} //UsbSettingsManagerProto

// message UsbUserSettingsManagerProto
namespace UsbUserSettingsManagerProto {
    // optional int32 user_id = 1;
    const uint64_t USER_ID = 0x0000010500000001LL;

    // repeated .android.service.usb.UsbDeviceAttachedActivities device_attached_activities = 4;
    const uint64_t DEVICE_ATTACHED_ACTIVITIES = 0x0000020b00000004LL;

    // repeated .android.service.usb.UsbAccessoryAttachedActivities accessory_attached_activities = 5;
    const uint64_t ACCESSORY_ATTACHED_ACTIVITIES = 0x0000020b00000005LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "user_id",
        "device_attached_activities",
        "accessory_attached_activities",
    };
    static const uint64_t _FIELD_IDS[3] = {
        USER_ID,
        DEVICE_ATTACHED_ACTIVITIES,
        ACCESSORY_ATTACHED_ACTIVITIES,
    };

} //UsbUserSettingsManagerProto

// message UsbProfileGroupSettingsManagerProto
namespace UsbProfileGroupSettingsManagerProto {
    // optional int32 parent_user_id = 1;
    const uint64_t PARENT_USER_ID = 0x0000010500000001LL;

    // repeated .android.service.usb.UsbSettingsDevicePreferenceProto device_preferences = 2;
    const uint64_t DEVICE_PREFERENCES = 0x0000020b00000002LL;

    // repeated .android.service.usb.UsbSettingsAccessoryPreferenceProto accessory_preferences = 3;
    const uint64_t ACCESSORY_PREFERENCES = 0x0000020b00000003LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "parent_user_id",
        "device_preferences",
        "accessory_preferences",
    };
    static const uint64_t _FIELD_IDS[3] = {
        PARENT_USER_ID,
        DEVICE_PREFERENCES,
        ACCESSORY_PREFERENCES,
    };

} //UsbProfileGroupSettingsManagerProto

// message UsbSettingsDevicePreferenceProto
namespace UsbSettingsDevicePreferenceProto {
    // optional .android.service.usb.UsbDeviceFilterProto filter = 1;
    const uint64_t FILTER = 0x0000010b00000001LL;

    // optional .android.service.usb.UserPackageProto user_package = 2;
    const uint64_t USER_PACKAGE = 0x0000010b00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "filter",
        "user_package",
    };
    static const uint64_t _FIELD_IDS[2] = {
        FILTER,
        USER_PACKAGE,
    };

} //UsbSettingsDevicePreferenceProto

// message UsbPermissionsManagerProto
namespace UsbPermissionsManagerProto {
    // repeated .android.service.usb.UsbUserPermissionsManagerProto user_permissions = 1;
    const uint64_t USER_PERMISSIONS = 0x0000020b00000001LL;

    static const int _FIELD_COUNT = 1;
    static const char* _FIELD_NAMES[1] = {
        "user_permissions",
    };
    static const uint64_t _FIELD_IDS[1] = {
        USER_PERMISSIONS,
    };

} //UsbPermissionsManagerProto

// message UsbUserPermissionsManagerProto
namespace UsbUserPermissionsManagerProto {
    // optional int32 user_id = 1;
    const uint64_t USER_ID = 0x0000010500000001LL;

    // repeated .android.service.usb.UsbDevicePermissionProto device_permissions = 2;
    const uint64_t DEVICE_PERMISSIONS = 0x0000020b00000002LL;

    // repeated .android.service.usb.UsbAccessoryPermissionProto accessory_permissions = 3;
    const uint64_t ACCESSORY_PERMISSIONS = 0x0000020b00000003LL;

    // repeated .android.service.usb.UsbDevicePersistentPermissionProto device_persistent_permissions = 4;
    const uint64_t DEVICE_PERSISTENT_PERMISSIONS = 0x0000020b00000004LL;

    // repeated .android.service.usb.UsbAccessoryPersistentPermissionProto accessory_persistent_permissions = 5;
    const uint64_t ACCESSORY_PERSISTENT_PERMISSIONS = 0x0000020b00000005LL;

    static const int _FIELD_COUNT = 5;
    static const char* _FIELD_NAMES[5] = {
        "user_id",
        "device_permissions",
        "accessory_permissions",
        "device_persistent_permissions",
        "accessory_persistent_permissions",
    };
    static const uint64_t _FIELD_IDS[5] = {
        USER_ID,
        DEVICE_PERMISSIONS,
        ACCESSORY_PERMISSIONS,
        DEVICE_PERSISTENT_PERMISSIONS,
        ACCESSORY_PERSISTENT_PERMISSIONS,
    };

} //UsbUserPermissionsManagerProto

// message UsbDevicePermissionProto
namespace UsbDevicePermissionProto {
    // optional string device_name = 1;
    const uint64_t DEVICE_NAME = 0x0000010900000001LL;

    // repeated int32 uids = 2;
    const uint64_t UIDS = 0x0000020500000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "device_name",
        "uids",
    };
    static const uint64_t _FIELD_IDS[2] = {
        DEVICE_NAME,
        UIDS,
    };

} //UsbDevicePermissionProto

// message UsbAccessoryPermissionProto
namespace UsbAccessoryPermissionProto {
    // optional string accessory_description = 1;
    const uint64_t ACCESSORY_DESCRIPTION = 0x0000010900000001LL;

    // repeated int32 uids = 2;
    const uint64_t UIDS = 0x0000020500000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "accessory_description",
        "uids",
    };
    static const uint64_t _FIELD_IDS[2] = {
        ACCESSORY_DESCRIPTION,
        UIDS,
    };

} //UsbAccessoryPermissionProto

// message UsbDevicePersistentPermissionProto
namespace UsbDevicePersistentPermissionProto {
    // optional .android.service.usb.UsbDeviceFilterProto device_filter = 1;
    const uint64_t DEVICE_FILTER = 0x0000010b00000001LL;

    // repeated .android.service.usb.UsbUidPermissionProto permission_values = 2;
    const uint64_t PERMISSION_VALUES = 0x0000020b00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "device_filter",
        "permission_values",
    };
    static const uint64_t _FIELD_IDS[2] = {
        DEVICE_FILTER,
        PERMISSION_VALUES,
    };

} //UsbDevicePersistentPermissionProto

// message UsbAccessoryPersistentPermissionProto
namespace UsbAccessoryPersistentPermissionProto {
    // optional .android.service.usb.UsbAccessoryFilterProto accessory_filter = 1;
    const uint64_t ACCESSORY_FILTER = 0x0000010b00000001LL;

    // repeated .android.service.usb.UsbUidPermissionProto permission_values = 2;
    const uint64_t PERMISSION_VALUES = 0x0000020b00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "accessory_filter",
        "permission_values",
    };
    static const uint64_t _FIELD_IDS[2] = {
        ACCESSORY_FILTER,
        PERMISSION_VALUES,
    };

} //UsbAccessoryPersistentPermissionProto

// message UsbUidPermissionProto
namespace UsbUidPermissionProto {
    // optional int32 uid = 1;
    const uint64_t UID = 0x0000010500000001LL;

    // optional bool is_granted = 2;
    const uint64_t IS_GRANTED = 0x0000010800000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "uid",
        "is_granted",
    };
    static const uint64_t _FIELD_IDS[2] = {
        UID,
        IS_GRANTED,
    };

} //UsbUidPermissionProto

// message UsbDeviceFilterProto
namespace UsbDeviceFilterProto {
    // optional int32 vendor_id = 1;
    const uint64_t VENDOR_ID = 0x0000010500000001LL;

    // optional int32 product_id = 2;
    const uint64_t PRODUCT_ID = 0x0000010500000002LL;

    // optional int32 class = 3;
    const uint64_t CLASS = 0x0000010500000003LL;

    // optional int32 subclass = 4;
    const uint64_t SUBCLASS = 0x0000010500000004LL;

    // optional int32 protocol = 5;
    const uint64_t PROTOCOL = 0x0000010500000005LL;

    // optional string manufacturer_name = 6;
    const uint64_t MANUFACTURER_NAME = 0x0000010900000006LL;

    // optional string product_name = 7;
    const uint64_t PRODUCT_NAME = 0x0000010900000007LL;

    // optional string serial_number = 8;
    const uint64_t SERIAL_NUMBER = 0x0000010900000008LL;

    static const int _FIELD_COUNT = 8;
    static const char* _FIELD_NAMES[8] = {
        "vendor_id",
        "product_id",
        "class",
        "subclass",
        "protocol",
        "manufacturer_name",
        "product_name",
        "serial_number",
    };
    static const uint64_t _FIELD_IDS[8] = {
        VENDOR_ID,
        PRODUCT_ID,
        CLASS,
        SUBCLASS,
        PROTOCOL,
        MANUFACTURER_NAME,
        PRODUCT_NAME,
        SERIAL_NUMBER,
    };

} //UsbDeviceFilterProto

// message UserPackageProto
namespace UserPackageProto {
    // optional int32 user_id = 1;
    const uint64_t USER_ID = 0x0000010500000001LL;

    // optional string package_name = 2;
    const uint64_t PACKAGE_NAME = 0x0000010900000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "user_id",
        "package_name",
    };
    static const uint64_t _FIELD_IDS[2] = {
        USER_ID,
        PACKAGE_NAME,
    };

} //UserPackageProto

// message UsbSettingsAccessoryPreferenceProto
namespace UsbSettingsAccessoryPreferenceProto {
    // optional .android.service.usb.UsbAccessoryFilterProto filter = 1;
    const uint64_t FILTER = 0x0000010b00000001LL;

    // optional .android.service.usb.UserPackageProto user_package = 2;
    const uint64_t USER_PACKAGE = 0x0000010b00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "filter",
        "user_package",
    };
    static const uint64_t _FIELD_IDS[2] = {
        FILTER,
        USER_PACKAGE,
    };

} //UsbSettingsAccessoryPreferenceProto

// message UsbAccessoryFilterProto
namespace UsbAccessoryFilterProto {
    // optional string manufacturer = 1;
    const uint64_t MANUFACTURER = 0x0000010900000001LL;

    // optional string model = 2;
    const uint64_t MODEL = 0x0000010900000002LL;

    // optional string version = 3;
    const uint64_t VERSION = 0x0000010900000003LL;

    static const int _FIELD_COUNT = 3;
    static const char* _FIELD_NAMES[3] = {
        "manufacturer",
        "model",
        "version",
    };
    static const uint64_t _FIELD_IDS[3] = {
        MANUFACTURER,
        MODEL,
        VERSION,
    };

} //UsbAccessoryFilterProto

// message UsbDeviceAttachedActivities
namespace UsbDeviceAttachedActivities {
    // optional .android.content.ComponentNameProto activity = 1;
    const uint64_t ACTIVITY = 0x0000010b00000001LL;

    // repeated .android.service.usb.UsbDeviceFilterProto filters = 2;
    const uint64_t FILTERS = 0x0000020b00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "activity",
        "filters",
    };
    static const uint64_t _FIELD_IDS[2] = {
        ACTIVITY,
        FILTERS,
    };

} //UsbDeviceAttachedActivities

// message UsbAccessoryAttachedActivities
namespace UsbAccessoryAttachedActivities {
    // optional .android.content.ComponentNameProto activity = 1;
    const uint64_t ACTIVITY = 0x0000010b00000001LL;

    // repeated .android.service.usb.UsbAccessoryFilterProto filters = 2;
    const uint64_t FILTERS = 0x0000020b00000002LL;

    static const int _FIELD_COUNT = 2;
    static const char* _FIELD_NAMES[2] = {
        "activity",
        "filters",
    };
    static const uint64_t _FIELD_IDS[2] = {
        ACTIVITY,
        FILTERS,
    };

} //UsbAccessoryAttachedActivities

} // usb
} // service
} // android

#endif // ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_SERVICE_USB_PROTO_STREAM_H
