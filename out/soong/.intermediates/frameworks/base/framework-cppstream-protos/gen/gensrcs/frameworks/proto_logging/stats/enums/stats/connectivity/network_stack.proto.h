// Generated by protoc-gen-cppstream. DO NOT MODIFY.
// source: frameworks/proto_logging/stats/enums/stats/connectivity/network_stack.proto

#ifndef ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_ENUMS_STATS_CONNECTIVITY_NETWORK_STACK_PROTO_STREAM_H
#define ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_ENUMS_STATS_CONNECTIVITY_NETWORK_STACK_PROTO_STREAM_H

namespace android {
namespace stats {
namespace connectivity {

// enum DhcpRenewResult
const int RR_UNKNOWN = 0;
const int RR_SUCCESS = 1;
const int RR_ERROR_NAK = 2;
const int RR_ERROR_IP_MISMATCH = 3;
const int RR_ERROR_IP_EXPIRE = 4;
static const int _ENUM_DHCP_RENEW_RESULT_COUNT = 5;
static const char* _ENUM_DHCP_RENEW_RESULT_NAMES[5] = {
    "RR_UNKNOWN",
    "RR_SUCCESS",
    "RR_ERROR_NAK",
    "RR_ERROR_IP_MISMATCH",
    "RR_ERROR_IP_EXPIRE",
};
static const int _ENUM_DHCP_RENEW_RESULT_VALUES[5] = {
    RR_UNKNOWN,
    RR_SUCCESS,
    RR_ERROR_NAK,
    RR_ERROR_IP_MISMATCH,
    RR_ERROR_IP_EXPIRE,
};

// enum DisconnectCode
const int DC_NONE = 0;
const int DC_NORMAL_TERMINATION = 1;
const int DC_PROVISIONING_FAIL = 2;
const int DC_ERROR_STARTING_IPV4 = 4;
const int DC_ERROR_STARTING_IPV6 = 5;
const int DC_ERROR_STARTING_IPREACHABILITYMONITOR = 6;
const int DC_INVALID_PROVISIONING = 7;
const int DC_INTERFACE_NOT_FOUND = 8;
const int DC_PROVISIONING_TIMEOUT = 9;
static const int _ENUM_DISCONNECT_CODE_COUNT = 9;
static const char* _ENUM_DISCONNECT_CODE_NAMES[9] = {
    "DC_NONE",
    "DC_NORMAL_TERMINATION",
    "DC_PROVISIONING_FAIL",
    "DC_ERROR_STARTING_IPV4",
    "DC_ERROR_STARTING_IPV6",
    "DC_ERROR_STARTING_IPREACHABILITYMONITOR",
    "DC_INVALID_PROVISIONING",
    "DC_INTERFACE_NOT_FOUND",
    "DC_PROVISIONING_TIMEOUT",
};
static const int _ENUM_DISCONNECT_CODE_VALUES[9] = {
    DC_NONE,
    DC_NORMAL_TERMINATION,
    DC_PROVISIONING_FAIL,
    DC_ERROR_STARTING_IPV4,
    DC_ERROR_STARTING_IPV6,
    DC_ERROR_STARTING_IPREACHABILITYMONITOR,
    DC_INVALID_PROVISIONING,
    DC_INTERFACE_NOT_FOUND,
    DC_PROVISIONING_TIMEOUT,
};

// enum TransportType
const int TT_UNKNOWN = 0;
const int TT_CELLULAR = 1;
const int TT_WIFI = 2;
const int TT_BLUETOOTH = 3;
const int TT_ETHERNET = 4;
const int TT_WIFI_AWARE = 5;
const int TT_LOWPAN = 6;
const int TT_CELLULAR_VPN = 7;
const int TT_WIFI_VPN = 8;
const int TT_BLUETOOTH_VPN = 9;
const int TT_ETHERNET_VPN = 10;
const int TT_WIFI_CELLULAR_VPN = 11;
const int TT_TEST = 12;
static const int _ENUM_TRANSPORT_TYPE_COUNT = 13;
static const char* _ENUM_TRANSPORT_TYPE_NAMES[13] = {
    "TT_UNKNOWN",
    "TT_CELLULAR",
    "TT_WIFI",
    "TT_BLUETOOTH",
    "TT_ETHERNET",
    "TT_WIFI_AWARE",
    "TT_LOWPAN",
    "TT_CELLULAR_VPN",
    "TT_WIFI_VPN",
    "TT_BLUETOOTH_VPN",
    "TT_ETHERNET_VPN",
    "TT_WIFI_CELLULAR_VPN",
    "TT_TEST",
};
static const int _ENUM_TRANSPORT_TYPE_VALUES[13] = {
    TT_UNKNOWN,
    TT_CELLULAR,
    TT_WIFI,
    TT_BLUETOOTH,
    TT_ETHERNET,
    TT_WIFI_AWARE,
    TT_LOWPAN,
    TT_CELLULAR_VPN,
    TT_WIFI_VPN,
    TT_BLUETOOTH_VPN,
    TT_ETHERNET_VPN,
    TT_WIFI_CELLULAR_VPN,
    TT_TEST,
};

// enum DhcpFeature
const int DF_UNKNOWN = 0;
const int DF_INITREBOOT = 1;
const int DF_RAPIDCOMMIT = 2;
const int DF_DAD = 3;
const int DF_FILS = 4;
static const int _ENUM_DHCP_FEATURE_COUNT = 5;
static const char* _ENUM_DHCP_FEATURE_NAMES[5] = {
    "DF_UNKNOWN",
    "DF_INITREBOOT",
    "DF_RAPIDCOMMIT",
    "DF_DAD",
    "DF_FILS",
};
static const int _ENUM_DHCP_FEATURE_VALUES[5] = {
    DF_UNKNOWN,
    DF_INITREBOOT,
    DF_RAPIDCOMMIT,
    DF_DAD,
    DF_FILS,
};

// enum HostnameTransResult
const int HTR_UNKNOWN = 0;
const int HTR_SUCCESS = 1;
const int HTR_FAILURE = 2;
const int HTR_DISABLE = 3;
static const int _ENUM_HOSTNAME_TRANS_RESULT_COUNT = 4;
static const char* _ENUM_HOSTNAME_TRANS_RESULT_NAMES[4] = {
    "HTR_UNKNOWN",
    "HTR_SUCCESS",
    "HTR_FAILURE",
    "HTR_DISABLE",
};
static const int _ENUM_HOSTNAME_TRANS_RESULT_VALUES[4] = {
    HTR_UNKNOWN,
    HTR_SUCCESS,
    HTR_FAILURE,
    HTR_DISABLE,
};

// enum ProbeResult
const int PR_UNKNOWN = 0;
const int PR_SUCCESS = 1;
const int PR_FAILURE = 2;
const int PR_PORTAL = 3;
const int PR_PRIVATE_IP_DNS = 4;
static const int _ENUM_PROBE_RESULT_COUNT = 5;
static const char* _ENUM_PROBE_RESULT_NAMES[5] = {
    "PR_UNKNOWN",
    "PR_SUCCESS",
    "PR_FAILURE",
    "PR_PORTAL",
    "PR_PRIVATE_IP_DNS",
};
static const int _ENUM_PROBE_RESULT_VALUES[5] = {
    PR_UNKNOWN,
    PR_SUCCESS,
    PR_FAILURE,
    PR_PORTAL,
    PR_PRIVATE_IP_DNS,
};

// enum ValidationResult
const int VR_UNKNOWN = 0;
const int VR_SUCCESS = 1;
const int VR_FAILURE = 2;
const int VR_PORTAL = 3;
const int VR_PARTIAL = 4;
static const int _ENUM_VALIDATION_RESULT_COUNT = 5;
static const char* _ENUM_VALIDATION_RESULT_NAMES[5] = {
    "VR_UNKNOWN",
    "VR_SUCCESS",
    "VR_FAILURE",
    "VR_PORTAL",
    "VR_PARTIAL",
};
static const int _ENUM_VALIDATION_RESULT_VALUES[5] = {
    VR_UNKNOWN,
    VR_SUCCESS,
    VR_FAILURE,
    VR_PORTAL,
    VR_PARTIAL,
};

// enum ProbeType
const int PT_UNKNOWN = 0;
const int PT_DNS = 1;
const int PT_HTTP = 2;
const int PT_HTTPS = 3;
const int PT_PAC = 4;
const int PT_FALLBACK = 5;
const int PT_PRIVDNS = 6;
const int PT_CAPPORT_API = 7;
static const int _ENUM_PROBE_TYPE_COUNT = 8;
static const char* _ENUM_PROBE_TYPE_NAMES[8] = {
    "PT_UNKNOWN",
    "PT_DNS",
    "PT_HTTP",
    "PT_HTTPS",
    "PT_PAC",
    "PT_FALLBACK",
    "PT_PRIVDNS",
    "PT_CAPPORT_API",
};
static const int _ENUM_PROBE_TYPE_VALUES[8] = {
    PT_UNKNOWN,
    PT_DNS,
    PT_HTTP,
    PT_HTTPS,
    PT_PAC,
    PT_FALLBACK,
    PT_PRIVDNS,
    PT_CAPPORT_API,
};

// enum DhcpErrorCode
const int ET_UNKNOWN = 0;
const int ET_L2_ERROR = 1;
const int ET_L3_ERROR = 2;
const int ET_L4_ERROR = 3;
const int ET_DHCP_ERROR = 4;
const int ET_MISC_ERROR = 5;
const int ET_L2_TOO_SHORT = 16842752;
const int ET_L2_WRONG_ETH_TYPE = 16908288;
const int ET_L3_TOO_SHORT = 33619968;
const int ET_L3_NOT_IPV4 = 33685504;
const int ET_L3_INVALID_IP = 33751040;
const int ET_L4_NOT_UDP = 50397184;
const int ET_L4_WRONG_PORT = 50462720;
const int ET_BOOTP_TOO_SHORT = 67174400;
const int ET_DHCP_BAD_MAGIC_COOKIE = 67239936;
const int ET_DHCP_INVALID_OPTION_LENGTH = 67305472;
const int ET_DHCP_NO_MSG_TYPE = 67371008;
const int ET_DHCP_UNKNOWN_MSG_TYPE = 67436544;
const int ET_DHCP_NO_COOKIE = 67502080;
const int ET_BUFFER_UNDERFLOW = 83951616;
const int ET_RECEIVE_ERROR = 84017152;
const int ET_PARSING_ERROR = 84082688;
static const int _ENUM_DHCP_ERROR_CODE_COUNT = 22;
static const char* _ENUM_DHCP_ERROR_CODE_NAMES[22] = {
    "ET_UNKNOWN",
    "ET_L2_ERROR",
    "ET_L3_ERROR",
    "ET_L4_ERROR",
    "ET_DHCP_ERROR",
    "ET_MISC_ERROR",
    "ET_L2_TOO_SHORT",
    "ET_L2_WRONG_ETH_TYPE",
    "ET_L3_TOO_SHORT",
    "ET_L3_NOT_IPV4",
    "ET_L3_INVALID_IP",
    "ET_L4_NOT_UDP",
    "ET_L4_WRONG_PORT",
    "ET_BOOTP_TOO_SHORT",
    "ET_DHCP_BAD_MAGIC_COOKIE",
    "ET_DHCP_INVALID_OPTION_LENGTH",
    "ET_DHCP_NO_MSG_TYPE",
    "ET_DHCP_UNKNOWN_MSG_TYPE",
    "ET_DHCP_NO_COOKIE",
    "ET_BUFFER_UNDERFLOW",
    "ET_RECEIVE_ERROR",
    "ET_PARSING_ERROR",
};
static const int _ENUM_DHCP_ERROR_CODE_VALUES[22] = {
    ET_UNKNOWN,
    ET_L2_ERROR,
    ET_L3_ERROR,
    ET_L4_ERROR,
    ET_DHCP_ERROR,
    ET_MISC_ERROR,
    ET_L2_TOO_SHORT,
    ET_L2_WRONG_ETH_TYPE,
    ET_L3_TOO_SHORT,
    ET_L3_NOT_IPV4,
    ET_L3_INVALID_IP,
    ET_L4_NOT_UDP,
    ET_L4_WRONG_PORT,
    ET_BOOTP_TOO_SHORT,
    ET_DHCP_BAD_MAGIC_COOKIE,
    ET_DHCP_INVALID_OPTION_LENGTH,
    ET_DHCP_NO_MSG_TYPE,
    ET_DHCP_UNKNOWN_MSG_TYPE,
    ET_DHCP_NO_COOKIE,
    ET_BUFFER_UNDERFLOW,
    ET_RECEIVE_ERROR,
    ET_PARSING_ERROR,
};

// enum NetworkQuirkEvent
const int QE_UNKNOWN = 0;
const int QE_IPV6_PROVISIONING_ROUTER_LOST = 1;
static const int _ENUM_NETWORK_QUIRK_EVENT_COUNT = 2;
static const char* _ENUM_NETWORK_QUIRK_EVENT_NAMES[2] = {
    "QE_UNKNOWN",
    "QE_IPV6_PROVISIONING_ROUTER_LOST",
};
static const int _ENUM_NETWORK_QUIRK_EVENT_VALUES[2] = {
    QE_UNKNOWN,
    QE_IPV6_PROVISIONING_ROUTER_LOST,
};

// enum IpType
const int UNKNOWN = 0;
const int IPV4 = 4;
const int IPV6 = 6;
static const int _ENUM_IP_TYPE_COUNT = 3;
static const char* _ENUM_IP_TYPE_NAMES[3] = {
    "UNKNOWN",
    "IPV4",
    "IPV6",
};
static const int _ENUM_IP_TYPE_VALUES[3] = {
    UNKNOWN,
    IPV4,
    IPV6,
};

// enum NudEventType
const int NUD_EVENT_UNKNOWN = 0;
const int NUD_POST_ROAMING_FAILED = 1;
const int NUD_POST_ROAMING_FAILED_CRITICAL = 2;
const int NUD_CONFIRM_FAILED = 3;
const int NUD_CONFIRM_FAILED_CRITICAL = 4;
const int NUD_ORGANIC_FAILED = 5;
const int NUD_ORGANIC_FAILED_CRITICAL = 6;
const int NUD_MAC_ADDRESS_CHANGED = 7;
static const int _ENUM_NUD_EVENT_TYPE_COUNT = 8;
static const char* _ENUM_NUD_EVENT_TYPE_NAMES[8] = {
    "NUD_EVENT_UNKNOWN",
    "NUD_POST_ROAMING_FAILED",
    "NUD_POST_ROAMING_FAILED_CRITICAL",
    "NUD_CONFIRM_FAILED",
    "NUD_CONFIRM_FAILED_CRITICAL",
    "NUD_ORGANIC_FAILED",
    "NUD_ORGANIC_FAILED_CRITICAL",
    "NUD_MAC_ADDRESS_CHANGED",
};
static const int _ENUM_NUD_EVENT_TYPE_VALUES[8] = {
    NUD_EVENT_UNKNOWN,
    NUD_POST_ROAMING_FAILED,
    NUD_POST_ROAMING_FAILED_CRITICAL,
    NUD_CONFIRM_FAILED,
    NUD_CONFIRM_FAILED_CRITICAL,
    NUD_ORGANIC_FAILED,
    NUD_ORGANIC_FAILED_CRITICAL,
    NUD_MAC_ADDRESS_CHANGED,
};

// enum NudNeighborType
const int NUD_NEIGHBOR_UNKNOWN = 0;
const int NUD_NEIGHBOR_GATEWAY = 1;
const int NUD_NEIGHBOR_DNS = 2;
const int NUD_NEIGHBOR_BOTH = 3;
static const int _ENUM_NUD_NEIGHBOR_TYPE_COUNT = 4;
static const char* _ENUM_NUD_NEIGHBOR_TYPE_NAMES[4] = {
    "NUD_NEIGHBOR_UNKNOWN",
    "NUD_NEIGHBOR_GATEWAY",
    "NUD_NEIGHBOR_DNS",
    "NUD_NEIGHBOR_BOTH",
};
static const int _ENUM_NUD_NEIGHBOR_TYPE_VALUES[4] = {
    NUD_NEIGHBOR_UNKNOWN,
    NUD_NEIGHBOR_GATEWAY,
    NUD_NEIGHBOR_DNS,
    NUD_NEIGHBOR_BOTH,
};

// message NetworkStackEventData
namespace NetworkStackEventData {
    static const int _FIELD_COUNT = 0;
    static const char* _FIELD_NAMES[0] = {
    };
    static const uint64_t _FIELD_IDS[0] = {
    };

} //NetworkStackEventData

} // connectivity
} // stats
} // android

#endif // ANDROID_FRAMEWORKS_PROTO_LOGGING_STATS_ENUMS_STATS_CONNECTIVITY_NETWORK_STACK_PROTO_STREAM_H
