// Generated by protoc-gen-cppstream. DO NOT MODIFY.
// source: frameworks/base/core/proto/android/os/system_properties.proto

#ifndef ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_OS_SYSTEM_PROPERTIES_PROTO_STREAM_H
#define ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_OS_SYSTEM_PROPERTIES_PROTO_STREAM_H

namespace android {
namespace os {

// message SystemPropertiesProto
namespace SystemPropertiesProto {
    // message Property
    namespace Property {
        // optional string name = 1;
        const uint64_t NAME = 0x0000010900000001LL;

        // optional string value = 2;
        const uint64_t VALUE = 0x0000010900000002LL;

        static const int _FIELD_COUNT = 2;
        static const char* _FIELD_NAMES[2] = {
            "name",
            "value",
        };
        static const uint64_t _FIELD_IDS[2] = {
            NAME,
            VALUE,
        };

    } //Property

    // message AacDrc
    namespace AacDrc {
        // optional int32 boost = 1;
        const uint64_t BOOST = 0x0000010500000001LL;

        // optional int32 cut = 2;
        const uint64_t CUT = 0x0000010500000002LL;

        // optional int32 enc_target_level = 3;
        const uint64_t ENC_TARGET_LEVEL = 0x0000010500000003LL;

        // optional int32 heavy = 4;
        const uint64_t HEAVY = 0x0000010500000004LL;

        // optional int32 reference_level = 5;
        const uint64_t REFERENCE_LEVEL = 0x0000010500000005LL;

        static const int _FIELD_COUNT = 5;
        static const char* _FIELD_NAMES[5] = {
            "boost",
            "cut",
            "enc_target_level",
            "heavy",
            "reference_level",
        };
        static const uint64_t _FIELD_IDS[5] = {
            BOOST,
            CUT,
            ENC_TARGET_LEVEL,
            HEAVY,
            REFERENCE_LEVEL,
        };

    } //AacDrc

    // message Aaudio
    namespace Aaudio {
        // optional int32 hw_burst_min_usec = 1;
        const uint64_t HW_BURST_MIN_USEC = 0x0000010500000001LL;

        // optional int32 minimum_sleep_usec = 2;
        const uint64_t MINIMUM_SLEEP_USEC = 0x0000010500000002LL;

        // optional int32 mixer_bursts = 3;
        const uint64_t MIXER_BURSTS = 0x0000010500000003LL;

        // optional int32 mmap_exclusive_policy = 4;
        const uint64_t MMAP_EXCLUSIVE_POLICY = 0x0000010500000004LL;

        // optional int32 mmap_policy = 5;
        const uint64_t MMAP_POLICY = 0x0000010500000005LL;

        // optional int32 wakeup_delay_usec = 6;
        const uint64_t WAKEUP_DELAY_USEC = 0x0000010500000006LL;

        static const int _FIELD_COUNT = 6;
        static const char* _FIELD_NAMES[6] = {
            "hw_burst_min_usec",
            "minimum_sleep_usec",
            "mixer_bursts",
            "mmap_exclusive_policy",
            "mmap_policy",
            "wakeup_delay_usec",
        };
        static const uint64_t _FIELD_IDS[6] = {
            HW_BURST_MIN_USEC,
            MINIMUM_SLEEP_USEC,
            MIXER_BURSTS,
            MMAP_EXCLUSIVE_POLICY,
            MMAP_POLICY,
            WAKEUP_DELAY_USEC,
        };

    } //Aaudio

    // message Camera
    namespace Camera {
        // optional bool disable_zsl_mode = 1;
        const uint64_t DISABLE_ZSL_MODE = 0x0000010800000001LL;

        // optional int32 fifo_disable = 2;
        const uint64_t FIFO_DISABLE = 0x0000010500000002LL;

        static const int _FIELD_COUNT = 2;
        static const char* _FIELD_NAMES[2] = {
            "disable_zsl_mode",
            "fifo_disable",
        };
        static const uint64_t _FIELD_IDS[2] = {
            DISABLE_ZSL_MODE,
            FIFO_DISABLE,
        };

    } //Camera

    // message DalvikVm
    namespace DalvikVm {
        // optional string appimageformat = 1;
        const uint64_t APPIMAGEFORMAT = 0x0000010900000001LL;

        // optional string backgroundgctype = 2;
        const uint64_t BACKGROUNDGCTYPE = 0x0000010900000002LL;

        // optional bool checkjni = 3;
        const uint64_t CHECKJNI = 0x0000010800000003LL;

        // optional string dex2oat_filter = 4;
        const uint64_t DEX2OAT_FILTER = 0x0000010900000004LL;

        // optional string dex2oat_flags = 5;
        const uint64_t DEX2OAT_FLAGS = 0x0000010900000005LL;

        // optional int32 dex2oat_threads = 6;
        const uint64_t DEX2OAT_THREADS = 0x0000010500000006LL;

        // optional string dex2oat_Xms = 7;
        const uint64_t DEX2OAT_XMS = 0x0000010900000007LL;

        // optional string dex2oat_Xmx = 8;
        const uint64_t DEX2OAT_XMX = 0x0000010900000008LL;

        // optional bool dexopt_secondary = 9;
        const uint64_t DEXOPT_SECONDARY = 0x0000010800000009LL;

        // optional string execution_mode = 10;
        const uint64_t EXECUTION_MODE = 0x000001090000000aLL;

        // optional string extra_opts = 11;
        const uint64_t EXTRA_OPTS = 0x000001090000000bLL;

        // optional string gctype = 12;
        const uint64_t GCTYPE = 0x000001090000000cLL;

        // optional string heapgrowthlimit = 13;
        const uint64_t HEAPGROWTHLIMIT = 0x000001090000000dLL;

        // optional string heapmaxfree = 14;
        const uint64_t HEAPMAXFREE = 0x000001090000000eLL;

        // optional string heapminfree = 15;
        const uint64_t HEAPMINFREE = 0x000001090000000fLL;

        // optional string heapsize = 16;
        const uint64_t HEAPSIZE = 0x0000010900000010LL;

        // optional string heapstartsize = 17;
        const uint64_t HEAPSTARTSIZE = 0x0000010900000011LL;

        // optional double heaptargetutilization = 18;
        const uint64_t HEAPTARGETUTILIZATION = 0x0000010100000012LL;

        // optional int32 hot_startup_method_samples = 19;
        const uint64_t HOT_STARTUP_METHOD_SAMPLES = 0x0000010500000013LL;

        // optional string image_dex2oat_filter = 20;
        const uint64_t IMAGE_DEX2OAT_FILTER = 0x0000010900000014LL;

        // optional string image_dex2oat_flags = 21;
        const uint64_t IMAGE_DEX2OAT_FLAGS = 0x0000010900000015LL;

        // optional int32 image_dex2oat_threads = 22;
        const uint64_t IMAGE_DEX2OAT_THREADS = 0x0000010500000016LL;

        // optional string image_dex2oat_Xms = 23;
        const uint64_t IMAGE_DEX2OAT_XMS = 0x0000010900000017LL;

        // optional string image_dex2oat_Xmx = 24;
        const uint64_t IMAGE_DEX2OAT_XMX = 0x0000010900000018LL;

        // optional string isa_arm_features = 25;
        const uint64_t ISA_ARM_FEATURES = 0x0000010900000019LL;

        // optional string isa_arm_variant = 26;
        const uint64_t ISA_ARM_VARIANT = 0x000001090000001aLL;

        // optional string isa_arm64_features = 27;
        const uint64_t ISA_ARM64_FEATURES = 0x000001090000001bLL;

        // optional string isa_arm64_variant = 28;
        const uint64_t ISA_ARM64_VARIANT = 0x000001090000001cLL;

        // optional string isa_mips_features = 29;
        const uint64_t ISA_MIPS_FEATURES = 0x000001090000001dLL;

        // optional string isa_mips_variant = 30;
        const uint64_t ISA_MIPS_VARIANT = 0x000001090000001eLL;

        // optional string isa_mips64_features = 31;
        const uint64_t ISA_MIPS64_FEATURES = 0x000001090000001fLL;

        // optional string isa_mips64_variant = 32;
        const uint64_t ISA_MIPS64_VARIANT = 0x0000010900000020LL;

        // optional string isa_unknown_features = 33;
        const uint64_t ISA_UNKNOWN_FEATURES = 0x0000010900000021LL;

        // optional string isa_unknown_variant = 34;
        const uint64_t ISA_UNKNOWN_VARIANT = 0x0000010900000022LL;

        // optional string isa_x86_64_features = 35;
        const uint64_t ISA_X86_64_FEATURES = 0x0000010900000023LL;

        // optional string isa_x86_64_variant = 36;
        const uint64_t ISA_X86_64_VARIANT = 0x0000010900000024LL;

        // optional string isa_x86_features = 37;
        const uint64_t ISA_X86_FEATURES = 0x0000010900000025LL;

        // optional string isa_x86_variant = 38;
        const uint64_t ISA_X86_VARIANT = 0x0000010900000026LL;

        // optional string jitinitialsize = 39;
        const uint64_t JITINITIALSIZE = 0x0000010900000027LL;

        // optional string jitmaxsize = 40;
        const uint64_t JITMAXSIZE = 0x0000010900000028LL;

        // optional int32 jitprithreadweight = 41;
        const uint64_t JITPRITHREADWEIGHT = 0x0000010500000029LL;

        // optional int32 jitthreshold = 42;
        const uint64_t JITTHRESHOLD = 0x000001050000002aLL;

        // optional int32 jittransitionweight = 43;
        const uint64_t JITTRANSITIONWEIGHT = 0x000001050000002bLL;

        // optional string jniopts = 44;
        const uint64_t JNIOPTS = 0x000001090000002cLL;

        // optional int32 lockprof_threshold = 45;
        const uint64_t LOCKPROF_THRESHOLD = 0x000001050000002dLL;

        // optional bool method_trace = 46;
        const uint64_t METHOD_TRACE = 0x000001080000002eLL;

        // optional string method_trace_file = 47;
        const uint64_t METHOD_TRACE_FILE = 0x000001090000002fLL;

        // optional int32 method_trace_file_siz = 48;
        const uint64_t METHOD_TRACE_FILE_SIZ = 0x0000010500000030LL;

        // optional bool method_trace_stream = 49;
        const uint64_t METHOD_TRACE_STREAM = 0x0000010800000031LL;

        // optional bool profilesystemserver = 50;
        const uint64_t PROFILESYSTEMSERVER = 0x0000010800000032LL;

        // optional string stack_trace_dir = 51;
        const uint64_t STACK_TRACE_DIR = 0x0000010900000033LL;

        // optional bool usejit = 52;
        const uint64_t USEJIT = 0x0000010800000034LL;

        // optional bool usejitprofiles = 53;
        const uint64_t USEJITPROFILES = 0x0000010800000035LL;

        // optional int32 zygote_max_boot_retry = 54;
        const uint64_t ZYGOTE_MAX_BOOT_RETRY = 0x0000010500000036LL;

        static const int _FIELD_COUNT = 54;
        static const char* _FIELD_NAMES[54] = {
            "appimageformat",
            "backgroundgctype",
            "checkjni",
            "dex2oat_filter",
            "dex2oat_flags",
            "dex2oat_threads",
            "dex2oat_Xms",
            "dex2oat_Xmx",
            "dexopt_secondary",
            "execution_mode",
            "extra_opts",
            "gctype",
            "heapgrowthlimit",
            "heapmaxfree",
            "heapminfree",
            "heapsize",
            "heapstartsize",
            "heaptargetutilization",
            "hot_startup_method_samples",
            "image_dex2oat_filter",
            "image_dex2oat_flags",
            "image_dex2oat_threads",
            "image_dex2oat_Xms",
            "image_dex2oat_Xmx",
            "isa_arm_features",
            "isa_arm_variant",
            "isa_arm64_features",
            "isa_arm64_variant",
            "isa_mips_features",
            "isa_mips_variant",
            "isa_mips64_features",
            "isa_mips64_variant",
            "isa_unknown_features",
            "isa_unknown_variant",
            "isa_x86_64_features",
            "isa_x86_64_variant",
            "isa_x86_features",
            "isa_x86_variant",
            "jitinitialsize",
            "jitmaxsize",
            "jitprithreadweight",
            "jitthreshold",
            "jittransitionweight",
            "jniopts",
            "lockprof_threshold",
            "method_trace",
            "method_trace_file",
            "method_trace_file_siz",
            "method_trace_stream",
            "profilesystemserver",
            "stack_trace_dir",
            "usejit",
            "usejitprofiles",
            "zygote_max_boot_retry",
        };
        static const uint64_t _FIELD_IDS[54] = {
            APPIMAGEFORMAT,
            BACKGROUNDGCTYPE,
            CHECKJNI,
            DEX2OAT_FILTER,
            DEX2OAT_FLAGS,
            DEX2OAT_THREADS,
            DEX2OAT_XMS,
            DEX2OAT_XMX,
            DEXOPT_SECONDARY,
            EXECUTION_MODE,
            EXTRA_OPTS,
            GCTYPE,
            HEAPGROWTHLIMIT,
            HEAPMAXFREE,
            HEAPMINFREE,
            HEAPSIZE,
            HEAPSTARTSIZE,
            HEAPTARGETUTILIZATION,
            HOT_STARTUP_METHOD_SAMPLES,
            IMAGE_DEX2OAT_FILTER,
            IMAGE_DEX2OAT_FLAGS,
            IMAGE_DEX2OAT_THREADS,
            IMAGE_DEX2OAT_XMS,
            IMAGE_DEX2OAT_XMX,
            ISA_ARM_FEATURES,
            ISA_ARM_VARIANT,
            ISA_ARM64_FEATURES,
            ISA_ARM64_VARIANT,
            ISA_MIPS_FEATURES,
            ISA_MIPS_VARIANT,
            ISA_MIPS64_FEATURES,
            ISA_MIPS64_VARIANT,
            ISA_UNKNOWN_FEATURES,
            ISA_UNKNOWN_VARIANT,
            ISA_X86_64_FEATURES,
            ISA_X86_64_VARIANT,
            ISA_X86_FEATURES,
            ISA_X86_VARIANT,
            JITINITIALSIZE,
            JITMAXSIZE,
            JITPRITHREADWEIGHT,
            JITTHRESHOLD,
            JITTRANSITIONWEIGHT,
            JNIOPTS,
            LOCKPROF_THRESHOLD,
            METHOD_TRACE,
            METHOD_TRACE_FILE,
            METHOD_TRACE_FILE_SIZ,
            METHOD_TRACE_STREAM,
            PROFILESYSTEMSERVER,
            STACK_TRACE_DIR,
            USEJIT,
            USEJITPROFILES,
            ZYGOTE_MAX_BOOT_RETRY,
        };

    } //DalvikVm

    // message InitSvc
    namespace InitSvc {
        // enum Status
        const int STATUS_UNKNOWN = 0;
        const int STATUS_RUNNING = 1;
        const int STATUS_STOPPED = 2;
        static const int _ENUM_STATUS_COUNT = 3;
        static const char* _ENUM_STATUS_NAMES[3] = {
            "UNKNOWN",
            "RUNNING",
            "STOPPED",
        };
        static const int _ENUM_STATUS_VALUES[3] = {
            STATUS_UNKNOWN,
            STATUS_RUNNING,
            STATUS_STOPPED,
        };

        // optional .android.os.SystemPropertiesProto.InitSvc.Status adbd = 1;
        const uint64_t ADBD = 0x0000010e00000001LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status audioserver = 2;
        const uint64_t AUDIOSERVER = 0x0000010e00000002LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status bootanim = 3;
        const uint64_t BOOTANIM = 0x0000010e00000003LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status bufferhubd = 4;
        const uint64_t BUFFERHUBD = 0x0000010e00000004LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status cameraserver = 5;
        const uint64_t CAMERASERVER = 0x0000010e00000005LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status clear_bcb = 6;
        const uint64_t CLEAR_BCB = 0x0000010e00000006LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status drm = 7;
        const uint64_t DRM = 0x0000010e00000007LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status gatekeeperd = 8;
        const uint64_t GATEKEEPERD = 0x0000010e00000008LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status healthd = 9;
        const uint64_t HEALTHD = 0x0000010e00000009LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status hidl_memory = 10;
        const uint64_t HIDL_MEMORY = 0x0000010e0000000aLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status hostapd = 11;
        const uint64_t HOSTAPD = 0x0000010e0000000bLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status hwservicemanager = 12;
        const uint64_t HWSERVICEMANAGER = 0x0000010e0000000cLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status installd = 13;
        const uint64_t INSTALLD = 0x0000010e0000000dLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status keystore = 14;
        const uint64_t KEYSTORE = 0x0000010e0000000eLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status lmkd = 15;
        const uint64_t LMKD = 0x0000010e0000000fLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status logd = 16;
        const uint64_t LOGD = 0x0000010e00000010LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status logd_reinit = 17;
        const uint64_t LOGD_REINIT = 0x0000010e00000011LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status media = 18;
        const uint64_t MEDIA = 0x0000010e00000012LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status mediadrm = 19;
        const uint64_t MEDIADRM = 0x0000010e00000013LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status mediaextractor = 20;
        const uint64_t MEDIAEXTRACTOR = 0x0000010e00000014LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status mediametrics = 21;
        const uint64_t MEDIAMETRICS = 0x0000010e00000015LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status netd = 22;
        const uint64_t NETD = 0x0000010e00000016LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status performanced = 23;
        const uint64_t PERFORMANCED = 0x0000010e00000017LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status ril_daemon = 24;
        const uint64_t RIL_DAEMON = 0x0000010e00000018LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status servicemanager = 25;
        const uint64_t SERVICEMANAGER = 0x0000010e00000019LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status storaged = 26;
        const uint64_t STORAGED = 0x0000010e0000001aLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status surfaceflinger = 27;
        const uint64_t SURFACEFLINGER = 0x0000010e0000001bLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status thermalservice = 28;
        const uint64_t THERMALSERVICE = 0x0000010e0000001cLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status tombstoned = 29;
        const uint64_t TOMBSTONED = 0x0000010e0000001dLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status ueventd = 30;
        const uint64_t UEVENTD = 0x0000010e0000001eLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status update_engine = 31;
        const uint64_t UPDATE_ENGINE = 0x0000010e0000001fLL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status update_verifier_nonencrypted = 32;
        const uint64_t UPDATE_VERIFIER_NONENCRYPTED = 0x0000010e00000020LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status virtual_touchpad = 33;
        const uint64_t VIRTUAL_TOUCHPAD = 0x0000010e00000021LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status vndservicemanager = 34;
        const uint64_t VNDSERVICEMANAGER = 0x0000010e00000022LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status vold = 35;
        const uint64_t VOLD = 0x0000010e00000023LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status vr_hwc = 36;
        const uint64_t VR_HWC = 0x0000010e00000024LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status webview_zygote32 = 37;
        const uint64_t WEBVIEW_ZYGOTE32 = 0x0000010e00000025LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status wificond = 38;
        const uint64_t WIFICOND = 0x0000010e00000026LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status wpa_supplicant = 39;
        const uint64_t WPA_SUPPLICANT = 0x0000010e00000027LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status zygote = 40;
        const uint64_t ZYGOTE = 0x0000010e00000028LL;

        // optional .android.os.SystemPropertiesProto.InitSvc.Status zygote_secondary = 41;
        const uint64_t ZYGOTE_SECONDARY = 0x0000010e00000029LL;

        static const int _FIELD_COUNT = 41;
        static const char* _FIELD_NAMES[41] = {
            "adbd",
            "audioserver",
            "bootanim",
            "bufferhubd",
            "cameraserver",
            "clear_bcb",
            "drm",
            "gatekeeperd",
            "healthd",
            "hidl_memory",
            "hostapd",
            "hwservicemanager",
            "installd",
            "keystore",
            "lmkd",
            "logd",
            "logd_reinit",
            "media",
            "mediadrm",
            "mediaextractor",
            "mediametrics",
            "netd",
            "performanced",
            "ril_daemon",
            "servicemanager",
            "storaged",
            "surfaceflinger",
            "thermalservice",
            "tombstoned",
            "ueventd",
            "update_engine",
            "update_verifier_nonencrypted",
            "virtual_touchpad",
            "vndservicemanager",
            "vold",
            "vr_hwc",
            "webview_zygote32",
            "wificond",
            "wpa_supplicant",
            "zygote",
            "zygote_secondary",
        };
        static const uint64_t _FIELD_IDS[41] = {
            ADBD,
            AUDIOSERVER,
            BOOTANIM,
            BUFFERHUBD,
            CAMERASERVER,
            CLEAR_BCB,
            DRM,
            GATEKEEPERD,
            HEALTHD,
            HIDL_MEMORY,
            HOSTAPD,
            HWSERVICEMANAGER,
            INSTALLD,
            KEYSTORE,
            LMKD,
            LOGD,
            LOGD_REINIT,
            MEDIA,
            MEDIADRM,
            MEDIAEXTRACTOR,
            MEDIAMETRICS,
            NETD,
            PERFORMANCED,
            RIL_DAEMON,
            SERVICEMANAGER,
            STORAGED,
            SURFACEFLINGER,
            THERMALSERVICE,
            TOMBSTONED,
            UEVENTD,
            UPDATE_ENGINE,
            UPDATE_VERIFIER_NONENCRYPTED,
            VIRTUAL_TOUCHPAD,
            VNDSERVICEMANAGER,
            VOLD,
            VR_HWC,
            WEBVIEW_ZYGOTE32,
            WIFICOND,
            WPA_SUPPLICANT,
            ZYGOTE,
            ZYGOTE_SECONDARY,
        };

    } //InitSvc

    // message Log
    namespace Log {
        // optional string tag_wifi_hal = 1;
        const uint64_t TAG_WIFI_HAL = 0x0000010900000001LL;

        // optional string tag_stats_log = 2;
        const uint64_t TAG_STATS_LOG = 0x0000010900000002LL;

        static const int _FIELD_COUNT = 2;
        static const char* _FIELD_NAMES[2] = {
            "tag_wifi_hal",
            "tag_stats_log",
        };
        static const uint64_t _FIELD_IDS[2] = {
            TAG_WIFI_HAL,
            TAG_STATS_LOG,
        };

    } //Log

    // message Persist
    namespace Persist {
        // optional string config_calibration_fac = 1;
        const uint64_t CONFIG_CALIBRATION_FAC = 0x0000010900000001LL;

        // optional int32 dbg_volte_avail_ovr = 2;
        const uint64_t DBG_VOLTE_AVAIL_OVR = 0x0000010500000002LL;

        // optional int32 dbg_vt_avail_ovr = 3;
        const uint64_t DBG_VT_AVAIL_OVR = 0x0000010500000003LL;

        // optional int32 dbg_wfc_avail_ovr = 4;
        const uint64_t DBG_WFC_AVAIL_OVR = 0x0000010500000004LL;

        // optional int32 radio_airplane_mode_on = 5;
        const uint64_t RADIO_AIRPLANE_MODE_ON = 0x0000010500000005LL;

        // optional string radio_multisim_config = 6;
        const uint64_t RADIO_MULTISIM_CONFIG = 0x0000010900000006LL;

        // optional int32 rcs_supported = 7;
        const uint64_t RCS_SUPPORTED = 0x0000010500000007LL;

        // optional bool sys_crash_rcu = 8;
        const uint64_t SYS_CRASH_RCU = 0x0000010800000008LL;

        // optional string sys_dalvik_vm_lib_2 = 9;
        const uint64_t SYS_DALVIK_VM_LIB_2 = 0x0000010900000009LL;

        // optional float sys_sf_color_saturation = 10;
        const uint64_t SYS_SF_COLOR_SATURATION = 0x000001020000000aLL;

        // optional string sys_timezone = 11;
        const uint64_t SYS_TIMEZONE = 0x000001090000000bLL;

        static const int _FIELD_COUNT = 11;
        static const char* _FIELD_NAMES[11] = {
            "config_calibration_fac",
            "dbg_volte_avail_ovr",
            "dbg_vt_avail_ovr",
            "dbg_wfc_avail_ovr",
            "radio_airplane_mode_on",
            "radio_multisim_config",
            "rcs_supported",
            "sys_crash_rcu",
            "sys_dalvik_vm_lib_2",
            "sys_sf_color_saturation",
            "sys_timezone",
        };
        static const uint64_t _FIELD_IDS[11] = {
            CONFIG_CALIBRATION_FAC,
            DBG_VOLTE_AVAIL_OVR,
            DBG_VT_AVAIL_OVR,
            DBG_WFC_AVAIL_OVR,
            RADIO_AIRPLANE_MODE_ON,
            RADIO_MULTISIM_CONFIG,
            RCS_SUPPORTED,
            SYS_CRASH_RCU,
            SYS_DALVIK_VM_LIB_2,
            SYS_SF_COLOR_SATURATION,
            SYS_TIMEZONE,
        };

    } //Persist

    // message PmDexopt
    namespace PmDexopt {
        // optional string ab_ota = 1;
        const uint64_t AB_OTA = 0x0000010900000001LL;

        // optional string bg_dexopt = 2;
        const uint64_t BG_DEXOPT = 0x0000010900000002LL;

        // optional string boot = 3;
        const uint64_t BOOT = 0x0000010900000003LL;

        // optional string first_boot = 4;
        const uint64_t FIRST_BOOT = 0x0000010900000004LL;

        // optional string install = 5;
        const uint64_t INSTALL = 0x0000010900000005LL;

        static const int _FIELD_COUNT = 5;
        static const char* _FIELD_NAMES[5] = {
            "ab_ota",
            "bg_dexopt",
            "boot",
            "first_boot",
            "install",
        };
        static const uint64_t _FIELD_IDS[5] = {
            AB_OTA,
            BG_DEXOPT,
            BOOT,
            FIRST_BOOT,
            INSTALL,
        };

    } //PmDexopt

    // message Ro
    namespace Ro {
        // message Boot
        namespace Boot {
            // optional string avb_version = 1;
            const uint64_t AVB_VERSION = 0x0000010900000001LL;

            // optional string baseband = 2;
            const uint64_t BASEBAND = 0x0000010900000002LL;

            // optional string bootdevice = 3;
            const uint64_t BOOTDEVICE = 0x0000010900000003LL;

            // optional string bootloader = 4;
            const uint64_t BOOTLOADER = 0x0000010900000004LL;

            // repeated string boottime = 5;
            const uint64_t BOOTTIME = 0x0000020900000005LL;

            // optional string console = 6;
            const uint64_t CONSOLE = 0x0000010900000006LL;

            // optional int32 fake_battery = 7;
            const uint64_t FAKE_BATTERY = 0x0000010500000007LL;

            // optional string hardware = 8;
            const uint64_t HARDWARE = 0x0000010900000008LL;

            // optional string hardware_color = 9;
            const uint64_t HARDWARE_COLOR = 0x0000010900000009LL;

            // optional string hardware_revision = 10;
            const uint64_t HARDWARE_REVISION = 0x000001090000000aLL;

            // optional string hardware_sku = 11;
            const uint64_t HARDWARE_SKU = 0x000001090000000bLL;

            // optional string keymaster = 12;
            const uint64_t KEYMASTER = 0x000001090000000cLL;

            // optional string mode = 13;
            const uint64_t MODE = 0x000001090000000dLL;

            // optional string revision = 14;
            const uint64_t REVISION = 0x000001090000000eLL;

            // optional string slot_suffix = 15;
            const uint64_t SLOT_SUFFIX = 0x000001090000000fLL;

            // optional string vbmeta_avb_version = 16;
            const uint64_t VBMETA_AVB_VERSION = 0x0000010900000010LL;

            // optional string vendor_overlay_theme = 17;
            const uint64_t VENDOR_OVERLAY_THEME = 0x0000010900000011LL;

            // optional string verifiedbootstate = 18;
            const uint64_t VERIFIEDBOOTSTATE = 0x0000010900000012LL;

            // optional string veritymode = 19;
            const uint64_t VERITYMODE = 0x0000010900000013LL;

            // optional string wificountrycode = 20;
            const uint64_t WIFICOUNTRYCODE = 0x0000010900000014LL;

            static const int _FIELD_COUNT = 20;
            static const char* _FIELD_NAMES[20] = {
                "avb_version",
                "baseband",
                "bootdevice",
                "bootloader",
                "boottime",
                "console",
                "fake_battery",
                "hardware",
                "hardware_color",
                "hardware_revision",
                "hardware_sku",
                "keymaster",
                "mode",
                "revision",
                "slot_suffix",
                "vbmeta_avb_version",
                "vendor_overlay_theme",
                "verifiedbootstate",
                "veritymode",
                "wificountrycode",
            };
            static const uint64_t _FIELD_IDS[20] = {
                AVB_VERSION,
                BASEBAND,
                BOOTDEVICE,
                BOOTLOADER,
                BOOTTIME,
                CONSOLE,
                FAKE_BATTERY,
                HARDWARE,
                HARDWARE_COLOR,
                HARDWARE_REVISION,
                HARDWARE_SKU,
                KEYMASTER,
                MODE,
                REVISION,
                SLOT_SUFFIX,
                VBMETA_AVB_VERSION,
                VENDOR_OVERLAY_THEME,
                VERIFIEDBOOTSTATE,
                VERITYMODE,
                WIFICOUNTRYCODE,
            };

        } //Boot

        // message BootImage
        namespace BootImage {
            // optional string build_date = 1;
            const uint64_t BUILD_DATE = 0x0000010900000001LL;

            // optional int64 build_date_utc = 2;
            const uint64_t BUILD_DATE_UTC = 0x0000010300000002LL;

            // optional string build_fingerprint = 3;
            const uint64_t BUILD_FINGERPRINT = 0x0000010900000003LL;

            static const int _FIELD_COUNT = 3;
            static const char* _FIELD_NAMES[3] = {
                "build_date",
                "build_date_utc",
                "build_fingerprint",
            };
            static const uint64_t _FIELD_IDS[3] = {
                BUILD_DATE,
                BUILD_DATE_UTC,
                BUILD_FINGERPRINT,
            };

        } //BootImage

        // message Build
        namespace Build {
            // message Version
            namespace Version {
                // optional string base_os = 1;
                const uint64_t BASE_OS = 0x0000010900000001LL;

                // optional string codename = 2;
                const uint64_t CODENAME = 0x0000010900000002LL;

                // optional string incremental = 3;
                const uint64_t INCREMENTAL = 0x0000010900000003LL;

                // optional int32 preview_sdk = 4;
                const uint64_t PREVIEW_SDK = 0x0000010500000004LL;

                // optional string release = 5;
                const uint64_t RELEASE = 0x0000010900000005LL;

                // optional int32 sdk = 6;
                const uint64_t SDK = 0x0000010500000006LL;

                // optional string security_patch = 7;
                const uint64_t SECURITY_PATCH = 0x0000010900000007LL;

                static const int _FIELD_COUNT = 7;
                static const char* _FIELD_NAMES[7] = {
                    "base_os",
                    "codename",
                    "incremental",
                    "preview_sdk",
                    "release",
                    "sdk",
                    "security_patch",
                };
                static const uint64_t _FIELD_IDS[7] = {
                    BASE_OS,
                    CODENAME,
                    INCREMENTAL,
                    PREVIEW_SDK,
                    RELEASE,
                    SDK,
                    SECURITY_PATCH,
                };

            } //Version

            // optional string date = 1;
            const uint64_t DATE = 0x0000010900000001LL;

            // optional int64 date_utc = 2;
            const uint64_t DATE_UTC = 0x0000010300000002LL;

            // optional string description = 3;
            const uint64_t DESCRIPTION = 0x0000010900000003LL;

            // optional string display_id = 4;
            const uint64_t DISPLAY_ID = 0x0000010900000004LL;

            // optional string host = 5;
            const uint64_t HOST = 0x0000010900000005LL;

            // optional string id = 6;
            const uint64_t ID = 0x0000010900000006LL;

            // optional string product = 7;
            const uint64_t PRODUCT = 0x0000010900000007LL;

            // optional bool system_root_image = 8;
            const uint64_t SYSTEM_ROOT_IMAGE = 0x0000010800000008LL;

            // optional string tags = 9;
            const uint64_t TAGS = 0x0000010900000009LL;

            // optional string type = 10;
            const uint64_t TYPE = 0x000001090000000aLL;

            // optional string user = 11;
            const uint64_t USER = 0x000001090000000bLL;

            // optional .android.os.SystemPropertiesProto.Ro.Build.Version version = 12;
            const uint64_t VERSION = 0x0000010b0000000cLL;

            static const int _FIELD_COUNT = 12;
            static const char* _FIELD_NAMES[12] = {
                "date",
                "date_utc",
                "description",
                "display_id",
                "host",
                "id",
                "product",
                "system_root_image",
                "tags",
                "type",
                "user",
                "version",
            };
            static const uint64_t _FIELD_IDS[12] = {
                DATE,
                DATE_UTC,
                DESCRIPTION,
                DISPLAY_ID,
                HOST,
                ID,
                PRODUCT,
                SYSTEM_ROOT_IMAGE,
                TAGS,
                TYPE,
                USER,
                VERSION,
            };

        } //Build

        // message Config
        namespace Config {
            // optional string alarm_alert = 1;
            const uint64_t ALARM_ALERT = 0x0000010900000001LL;

            // optional int32 media_vol_steps = 2;
            const uint64_t MEDIA_VOL_STEPS = 0x0000010500000002LL;

            // optional string notification_sound = 3;
            const uint64_t NOTIFICATION_SOUND = 0x0000010900000003LL;

            // optional string ringtone = 4;
            const uint64_t RINGTONE = 0x0000010900000004LL;

            // optional int32 vc_call_vol_steps = 5;
            const uint64_t VC_CALL_VOL_STEPS = 0x0000010500000005LL;

            static const int _FIELD_COUNT = 5;
            static const char* _FIELD_NAMES[5] = {
                "alarm_alert",
                "media_vol_steps",
                "notification_sound",
                "ringtone",
                "vc_call_vol_steps",
            };
            static const uint64_t _FIELD_IDS[5] = {
                ALARM_ALERT,
                MEDIA_VOL_STEPS,
                NOTIFICATION_SOUND,
                RINGTONE,
                VC_CALL_VOL_STEPS,
            };

        } //Config

        // message Hardware
        namespace Hardware {
            // optional string value = 1;
            const uint64_t VALUE = 0x0000010900000001LL;

            // optional string activity_recognition = 2;
            const uint64_t ACTIVITY_RECOGNITION = 0x0000010900000002LL;

            // optional string audio = 3;
            const uint64_t AUDIO = 0x0000010900000003LL;

            // optional string audio_policy = 4;
            const uint64_t AUDIO_POLICY = 0x0000010900000004LL;

            // optional string audio_a2dp = 5;
            const uint64_t AUDIO_A2DP = 0x0000010900000005LL;

            // optional string audio_primary = 6;
            const uint64_t AUDIO_PRIMARY = 0x0000010900000006LL;

            // optional string audio_usb = 7;
            const uint64_t AUDIO_USB = 0x0000010900000007LL;

            // optional string bootctrl = 8;
            const uint64_t BOOTCTRL = 0x0000010900000008LL;

            // optional string camera = 9;
            const uint64_t CAMERA = 0x0000010900000009LL;

            // optional string consumerir = 10;
            const uint64_t CONSUMERIR = 0x000001090000000aLL;

            // optional string context_hub = 11;
            const uint64_t CONTEXT_HUB = 0x000001090000000bLL;

            // optional string egl = 12;
            const uint64_t EGL = 0x000001090000000cLL;

            // optional string fingerprint = 13;
            const uint64_t FINGERPRINT = 0x000001090000000dLL;

            // optional string flp = 14;
            const uint64_t FLP = 0x000001090000000eLL;

            // optional string gatekeeper = 15;
            const uint64_t GATEKEEPER = 0x000001090000000fLL;

            // optional string gps = 16;
            const uint64_t GPS = 0x0000010900000010LL;

            // optional string gralloc = 17;
            const uint64_t GRALLOC = 0x0000010900000011LL;

            // optional string hdmi_cec = 18;
            const uint64_t HDMI_CEC = 0x0000010900000012LL;

            // optional string hwcomposer = 19;
            const uint64_t HWCOMPOSER = 0x0000010900000013LL;

            // optional string input = 20;
            const uint64_t INPUT = 0x0000010900000014LL;

            // optional string keystore = 21;
            const uint64_t KEYSTORE = 0x0000010900000015LL;

            // optional string lights = 22;
            const uint64_t LIGHTS = 0x0000010900000016LL;

            // optional string local_time = 23;
            const uint64_t LOCAL_TIME = 0x0000010900000017LL;

            // optional string memtrack = 24;
            const uint64_t MEMTRACK = 0x0000010900000018LL;

            // optional string nfc = 25;
            const uint64_t NFC = 0x0000010900000019LL;

            // optional string nfc_nci = 26;
            const uint64_t NFC_NCI = 0x000001090000001aLL;

            // optional string nfc_tag = 27;
            const uint64_t NFC_TAG = 0x000001090000001bLL;

            // optional string nvram = 28;
            const uint64_t NVRAM = 0x000001090000001cLL;

            // optional string power = 29;
            const uint64_t POWER = 0x000001090000001dLL;

            // optional string radio = 30;
            const uint64_t RADIO = 0x000001090000001eLL;

            // optional string sensors = 31;
            const uint64_t SENSORS = 0x000001090000001fLL;

            // optional string sound_trigger = 32;
            const uint64_t SOUND_TRIGGER = 0x0000010900000020LL;

            // optional string thermal = 33;
            const uint64_t THERMAL = 0x0000010900000021LL;

            // optional string tv_input = 34;
            const uint64_t TV_INPUT = 0x0000010900000022LL;

            // optional string type = 35;
            const uint64_t TYPE = 0x0000010900000023LL;

            // optional string vehicle = 36;
            const uint64_t VEHICLE = 0x0000010900000024LL;

            // optional string vibrator = 37;
            const uint64_t VIBRATOR = 0x0000010900000025LL;

            // optional string virtual_device = 38;
            const uint64_t VIRTUAL_DEVICE = 0x0000010900000026LL;

            // optional string vulkan = 39;
            const uint64_t VULKAN = 0x0000010900000027LL;

            static const int _FIELD_COUNT = 39;
            static const char* _FIELD_NAMES[39] = {
                "value",
                "activity_recognition",
                "audio",
                "audio_policy",
                "audio_a2dp",
                "audio_primary",
                "audio_usb",
                "bootctrl",
                "camera",
                "consumerir",
                "context_hub",
                "egl",
                "fingerprint",
                "flp",
                "gatekeeper",
                "gps",
                "gralloc",
                "hdmi_cec",
                "hwcomposer",
                "input",
                "keystore",
                "lights",
                "local_time",
                "memtrack",
                "nfc",
                "nfc_nci",
                "nfc_tag",
                "nvram",
                "power",
                "radio",
                "sensors",
                "sound_trigger",
                "thermal",
                "tv_input",
                "type",
                "vehicle",
                "vibrator",
                "virtual_device",
                "vulkan",
            };
            static const uint64_t _FIELD_IDS[39] = {
                VALUE,
                ACTIVITY_RECOGNITION,
                AUDIO,
                AUDIO_POLICY,
                AUDIO_A2DP,
                AUDIO_PRIMARY,
                AUDIO_USB,
                BOOTCTRL,
                CAMERA,
                CONSUMERIR,
                CONTEXT_HUB,
                EGL,
                FINGERPRINT,
                FLP,
                GATEKEEPER,
                GPS,
                GRALLOC,
                HDMI_CEC,
                HWCOMPOSER,
                INPUT,
                KEYSTORE,
                LIGHTS,
                LOCAL_TIME,
                MEMTRACK,
                NFC,
                NFC_NCI,
                NFC_TAG,
                NVRAM,
                POWER,
                RADIO,
                SENSORS,
                SOUND_TRIGGER,
                THERMAL,
                TV_INPUT,
                TYPE,
                VEHICLE,
                VIBRATOR,
                VIRTUAL_DEVICE,
                VULKAN,
            };

        } //Hardware

        // message Product
        namespace Product {
            // message Vendor
            namespace Vendor {
                // optional string brand = 1;
                const uint64_t BRAND = 0x0000010900000001LL;

                // optional string device = 2;
                const uint64_t DEVICE = 0x0000010900000002LL;

                // optional string manufacturer = 3;
                const uint64_t MANUFACTURER = 0x0000010900000003LL;

                // optional string model = 4;
                const uint64_t MODEL = 0x0000010900000004LL;

                // optional string name = 5;
                const uint64_t NAME = 0x0000010900000005LL;

                static const int _FIELD_COUNT = 5;
                static const char* _FIELD_NAMES[5] = {
                    "brand",
                    "device",
                    "manufacturer",
                    "model",
                    "name",
                };
                static const uint64_t _FIELD_IDS[5] = {
                    BRAND,
                    DEVICE,
                    MANUFACTURER,
                    MODEL,
                    NAME,
                };

            } //Vendor

            // optional string board = 1;
            const uint64_t BOARD = 0x0000010900000001LL;

            // optional string brand = 2;
            const uint64_t BRAND = 0x0000010900000002LL;

            // optional string cpu_abi = 3;
            const uint64_t CPU_ABI = 0x0000010900000003LL;

            // repeated string cpu_abilist = 4;
            const uint64_t CPU_ABILIST = 0x0000020900000004LL;

            // repeated string cpu_abilist32 = 5;
            const uint64_t CPU_ABILIST32 = 0x0000020900000005LL;

            // repeated string cpu_abilist64 = 6;
            const uint64_t CPU_ABILIST64 = 0x0000020900000006LL;

            // optional string device = 7;
            const uint64_t DEVICE = 0x0000010900000007LL;

            // optional int32 first_api_level = 8;
            const uint64_t FIRST_API_LEVEL = 0x0000010500000008LL;

            // optional string manufacturer = 9;
            const uint64_t MANUFACTURER = 0x0000010900000009LL;

            // optional string model = 10;
            const uint64_t MODEL = 0x000001090000000aLL;

            // optional string name = 11;
            const uint64_t NAME = 0x000001090000000bLL;

            // optional .android.os.SystemPropertiesProto.Ro.Product.Vendor vendor = 12;
            const uint64_t VENDOR = 0x0000010b0000000cLL;

            static const int _FIELD_COUNT = 12;
            static const char* _FIELD_NAMES[12] = {
                "board",
                "brand",
                "cpu_abi",
                "cpu_abilist",
                "cpu_abilist32",
                "cpu_abilist64",
                "device",
                "first_api_level",
                "manufacturer",
                "model",
                "name",
                "vendor",
            };
            static const uint64_t _FIELD_IDS[12] = {
                BOARD,
                BRAND,
                CPU_ABI,
                CPU_ABILIST,
                CPU_ABILIST32,
                CPU_ABILIST64,
                DEVICE,
                FIRST_API_LEVEL,
                MANUFACTURER,
                MODEL,
                NAME,
                VENDOR,
            };

        } //Product

        // message Telephony
        namespace Telephony {
            // optional bool call_ring_multiple = 1;
            const uint64_t CALL_RING_MULTIPLE = 0x0000010800000001LL;

            // optional int32 default_cdma_sub = 2;
            const uint64_t DEFAULT_CDMA_SUB = 0x0000010500000002LL;

            // optional int32 default_network = 3;
            const uint64_t DEFAULT_NETWORK = 0x0000010500000003LL;

            static const int _FIELD_COUNT = 3;
            static const char* _FIELD_NAMES[3] = {
                "call_ring_multiple",
                "default_cdma_sub",
                "default_network",
            };
            static const uint64_t _FIELD_IDS[3] = {
                CALL_RING_MULTIPLE,
                DEFAULT_CDMA_SUB,
                DEFAULT_NETWORK,
            };

        } //Telephony

        // message Vendor
        namespace Vendor {
            // optional string build_date = 1;
            const uint64_t BUILD_DATE = 0x0000010900000001LL;

            // optional int64 build_date_utc = 2;
            const uint64_t BUILD_DATE_UTC = 0x0000010300000002LL;

            // optional string build_fingerprint = 3;
            const uint64_t BUILD_FINGERPRINT = 0x0000010900000003LL;

            static const int _FIELD_COUNT = 3;
            static const char* _FIELD_NAMES[3] = {
                "build_date",
                "build_date_utc",
                "build_fingerprint",
            };
            static const uint64_t _FIELD_IDS[3] = {
                BUILD_DATE,
                BUILD_DATE_UTC,
                BUILD_FINGERPRINT,
            };

        } //Vendor

        // optional bool adb_secure = 1;
        const uint64_t ADB_SECURE = 0x0000010800000001LL;

        // optional string arch = 2;
        const uint64_t ARCH = 0x0000010900000002LL;

        // optional bool audio_ignore_effects = 3;
        const uint64_t AUDIO_IGNORE_EFFECTS = 0x0000010800000003LL;

        // optional bool audio_monitor_rotation = 4;
        const uint64_t AUDIO_MONITOR_ROTATION = 0x0000010800000004LL;

        // optional string baseband = 5;
        const uint64_t BASEBAND = 0x0000010900000005LL;

        // optional string board_platform = 6;
        const uint64_t BOARD_PLATFORM = 0x0000010900000006LL;

        // optional .android.os.SystemPropertiesProto.Ro.Boot boot = 7;
        const uint64_t BOOT = 0x0000010b00000007LL;

        // optional .android.os.SystemPropertiesProto.Ro.BootImage bootimage = 8;
        const uint64_t BOOTIMAGE = 0x0000010b00000008LL;

        // optional string bootloader = 9;
        const uint64_t BOOTLOADER = 0x0000010900000009LL;

        // optional string bootmode = 10;
        const uint64_t BOOTMODE = 0x000001090000000aLL;

        // optional .android.os.SystemPropertiesProto.Ro.Build build = 11;
        const uint64_t BUILD = 0x0000010b0000000bLL;

        // optional bool camera_notify_nfc = 12;
        const uint64_t CAMERA_NOTIFY_NFC = 0x000001080000000cLL;

        // optional string carrier = 13;
        const uint64_t CARRIER = 0x000001090000000dLL;

        // optional bool com_android_dataroaming = 14;
        const uint64_t COM_ANDROID_DATAROAMING = 0x000001080000000eLL;

        // optional bool com_android_prov_mobiledata = 15;
        const uint64_t COM_ANDROID_PROV_MOBILEDATA = 0x000001080000000fLL;

        // optional string com_google_clientidbase = 16;
        const uint64_t COM_GOOGLE_CLIENTIDBASE = 0x0000010900000010LL;

        // optional .android.os.SystemPropertiesProto.Ro.Config config = 17;
        const uint64_t CONFIG = 0x0000010b00000011LL;

        // optional string control_privapp_permissions = 18;
        const uint64_t CONTROL_PRIVAPP_PERMISSIONS = 0x0000010900000012LL;

        // optional int32 cp_system_other_odex = 19;
        const uint64_t CP_SYSTEM_OTHER_ODEX = 0x0000010500000013LL;

        // optional string crypto_scrypt_params = 20;
        const uint64_t CRYPTO_SCRYPT_PARAMS = 0x0000010900000014LL;

        // optional string crypto_state = 21;
        const uint64_t CRYPTO_STATE = 0x0000010900000015LL;

        // optional string crypto_type = 22;
        const uint64_t CRYPTO_TYPE = 0x0000010900000016LL;

        // optional string dalvik_vm_native_bridge = 23;
        const uint64_t DALVIK_VM_NATIVE_BRIDGE = 0x0000010900000017LL;

        // optional bool debuggable = 24;
        const uint64_t DEBUGGABLE = 0x0000010800000018LL;

        // optional string frp_pst = 25;
        const uint64_t FRP_PST = 0x0000010900000019LL;

        // optional string gfx_driver_0 = 26;
        const uint64_t GFX_DRIVER_0 = 0x000001090000001aLL;

        // optional .android.os.SystemPropertiesProto.Ro.Hardware hardware = 27;
        const uint64_t HARDWARE = 0x0000010b0000001bLL;

        // optional int32 kernel_qemu = 28;
        const uint64_t KERNEL_QEMU = 0x000001050000001cLL;

        // optional int32 kernel_qemu_gles = 29;
        const uint64_t KERNEL_QEMU_GLES = 0x000001050000001dLL;

        // optional int32 oem_unlock_supported = 30;
        const uint64_t OEM_UNLOCK_SUPPORTED = 0x000001050000001eLL;

        // optional int32 opengles_version = 31;
        const uint64_t OPENGLES_VERSION = 0x000001050000001fLL;

        // optional .android.os.SystemPropertiesProto.Ro.Product product = 32;
        const uint64_t PRODUCT = 0x0000010b00000020LL;

        // optional int32 property_service_version = 33;
        const uint64_t PROPERTY_SERVICE_VERSION = 0x0000010500000021LL;

        // optional string revision = 35;
        const uint64_t REVISION = 0x0000010900000023LL;

        // optional int32 sf_lcd_density = 36;
        const uint64_t SF_LCD_DENSITY = 0x0000010500000024LL;

        // optional bool storage_manager_enabled = 37;
        const uint64_t STORAGE_MANAGER_ENABLED = 0x0000010800000025LL;

        // optional .android.os.SystemPropertiesProto.Ro.Telephony telephony = 38;
        const uint64_t TELEPHONY = 0x0000010b00000026LL;

        // optional .android.os.SystemPropertiesProto.Ro.Vendor vendor = 41;
        const uint64_t VENDOR = 0x0000010b00000029LL;

        // optional string vndk_version = 42;
        const uint64_t VNDK_VERSION = 0x000001090000002aLL;

        // optional int32 vts_coverage = 43;
        const uint64_t VTS_COVERAGE = 0x000001050000002bLL;

        // optional string zygote = 44;
        const uint64_t ZYGOTE = 0x000001090000002cLL;

        // optional string gfx_driver_whitelist_0 = 45;
        const uint64_t GFX_DRIVER_WHITELIST_0 = 0x000001090000002dLL;

        static const int _FIELD_COUNT = 42;
        static const char* _FIELD_NAMES[42] = {
            "adb_secure",
            "arch",
            "audio_ignore_effects",
            "audio_monitor_rotation",
            "baseband",
            "board_platform",
            "boot",
            "bootimage",
            "bootloader",
            "bootmode",
            "build",
            "camera_notify_nfc",
            "carrier",
            "com_android_dataroaming",
            "com_android_prov_mobiledata",
            "com_google_clientidbase",
            "config",
            "control_privapp_permissions",
            "cp_system_other_odex",
            "crypto_scrypt_params",
            "crypto_state",
            "crypto_type",
            "dalvik_vm_native_bridge",
            "debuggable",
            "frp_pst",
            "gfx_driver_0",
            "hardware",
            "kernel_qemu",
            "kernel_qemu_gles",
            "oem_unlock_supported",
            "opengles_version",
            "product",
            "property_service_version",
            "revision",
            "sf_lcd_density",
            "storage_manager_enabled",
            "telephony",
            "vendor",
            "vndk_version",
            "vts_coverage",
            "zygote",
            "gfx_driver_whitelist_0",
        };
        static const uint64_t _FIELD_IDS[42] = {
            ADB_SECURE,
            ARCH,
            AUDIO_IGNORE_EFFECTS,
            AUDIO_MONITOR_ROTATION,
            BASEBAND,
            BOARD_PLATFORM,
            BOOT,
            BOOTIMAGE,
            BOOTLOADER,
            BOOTMODE,
            BUILD,
            CAMERA_NOTIFY_NFC,
            CARRIER,
            COM_ANDROID_DATAROAMING,
            COM_ANDROID_PROV_MOBILEDATA,
            COM_GOOGLE_CLIENTIDBASE,
            CONFIG,
            CONTROL_PRIVAPP_PERMISSIONS,
            CP_SYSTEM_OTHER_ODEX,
            CRYPTO_SCRYPT_PARAMS,
            CRYPTO_STATE,
            CRYPTO_TYPE,
            DALVIK_VM_NATIVE_BRIDGE,
            DEBUGGABLE,
            FRP_PST,
            GFX_DRIVER_0,
            HARDWARE,
            KERNEL_QEMU,
            KERNEL_QEMU_GLES,
            OEM_UNLOCK_SUPPORTED,
            OPENGLES_VERSION,
            PRODUCT,
            PROPERTY_SERVICE_VERSION,
            REVISION,
            SF_LCD_DENSITY,
            STORAGE_MANAGER_ENABLED,
            TELEPHONY,
            VENDOR,
            VNDK_VERSION,
            VTS_COVERAGE,
            ZYGOTE,
            GFX_DRIVER_WHITELIST_0,
        };

    } //Ro

    // message Sys
    namespace Sys {
        // message Usb
        namespace Usb {
            // optional string config = 1;
            const uint64_t CONFIG = 0x0000010900000001LL;

            // optional int32 configfs = 2;
            const uint64_t CONFIGFS = 0x0000010500000002LL;

            // optional string controller = 3;
            const uint64_t CONTROLLER = 0x0000010900000003LL;

            // optional int32 ffs_max_read = 4;
            const uint64_t FFS_MAX_READ = 0x0000010500000004LL;

            // optional int32 ffs_max_write = 5;
            const uint64_t FFS_MAX_WRITE = 0x0000010500000005LL;

            // optional int32 ffs_mtp_ready = 6;
            const uint64_t FFS_MTP_READY = 0x0000010500000006LL;

            // optional int32 ffs_ready = 7;
            const uint64_t FFS_READY = 0x0000010500000007LL;

            // optional int32 mtp_device_type = 8;
            const uint64_t MTP_DEVICE_TYPE = 0x0000010500000008LL;

            // optional string state = 9;
            const uint64_t STATE = 0x0000010900000009LL;

            static const int _FIELD_COUNT = 9;
            static const char* _FIELD_NAMES[9] = {
                "config",
                "configfs",
                "controller",
                "ffs_max_read",
                "ffs_max_write",
                "ffs_mtp_ready",
                "ffs_ready",
                "mtp_device_type",
                "state",
            };
            static const uint64_t _FIELD_IDS[9] = {
                CONFIG,
                CONFIGFS,
                CONTROLLER,
                FFS_MAX_READ,
                FFS_MAX_WRITE,
                FFS_MTP_READY,
                FFS_READY,
                MTP_DEVICE_TYPE,
                STATE,
            };

        } //Usb

        // optional int32 boot_completed = 1;
        const uint64_t BOOT_COMPLETED = 0x0000010500000001LL;

        // optional int32 boot_from_charger_mode = 2;
        const uint64_t BOOT_FROM_CHARGER_MODE = 0x0000010500000002LL;

        // optional int32 retaildemo_enabled = 3;
        const uint64_t RETAILDEMO_ENABLED = 0x0000010500000003LL;

        // optional string shutdown_requested = 4;
        const uint64_t SHUTDOWN_REQUESTED = 0x0000010900000004LL;

        // optional .android.os.SystemPropertiesProto.Sys.Usb usb = 5;
        const uint64_t USB = 0x0000010b00000005LL;

        static const int _FIELD_COUNT = 5;
        static const char* _FIELD_NAMES[5] = {
            "boot_completed",
            "boot_from_charger_mode",
            "retaildemo_enabled",
            "shutdown_requested",
            "usb",
        };
        static const uint64_t _FIELD_IDS[5] = {
            BOOT_COMPLETED,
            BOOT_FROM_CHARGER_MODE,
            RETAILDEMO_ENABLED,
            SHUTDOWN_REQUESTED,
            USB,
        };

    } //Sys

    // repeated .android.os.SystemPropertiesProto.Property extra_properties = 1;
    const uint64_t EXTRA_PROPERTIES = 0x0000020b00000001LL;

    // optional .android.os.SystemPropertiesProto.AacDrc aac_drc = 2;
    const uint64_t AAC_DRC = 0x0000010b00000002LL;

    // optional .android.os.SystemPropertiesProto.Aaudio aaudio = 3;
    const uint64_t AAUDIO = 0x0000010b00000003LL;

    // optional int32 af_fast_track_multiplier = 4;
    const uint64_t AF_FAST_TRACK_MULTIPLIER = 0x0000010500000004LL;

    // optional .android.os.SystemPropertiesProto.Camera camera = 5;
    const uint64_t CAMERA = 0x0000010b00000005LL;

    // optional .android.os.SystemPropertiesProto.DalvikVm dalvik_vm = 6;
    const uint64_t DALVIK_VM = 0x0000010b00000006LL;

    // optional bool drm_64bit_enabled = 7;
    const uint64_t DRM_64BIT_ENABLED = 0x0000010800000007LL;

    // optional bool drm_service_enabled = 8;
    const uint64_t DRM_SERVICE_ENABLED = 0x0000010800000008LL;

    // optional bool dumpstate_dry_run = 9;
    const uint64_t DUMPSTATE_DRY_RUN = 0x0000010800000009LL;

    // optional string gsm_sim_operator_numeric = 10;
    const uint64_t GSM_SIM_OPERATOR_NUMERIC = 0x000001090000000aLL;

    // optional bool hal_instrumentation_enable = 11;
    const uint64_t HAL_INSTRUMENTATION_ENABLE = 0x000001080000000bLL;

    // optional .android.os.SystemPropertiesProto.InitSvc init_svc = 12;
    const uint64_t INIT_SVC = 0x0000010b0000000cLL;

    // optional bool keyguard_no_require_sim = 13;
    const uint64_t KEYGUARD_NO_REQUIRE_SIM = 0x000001080000000dLL;

    // optional string libc_debug_malloc_options = 14;
    const uint64_t LIBC_DEBUG_MALLOC_OPTIONS = 0x000001090000000eLL;

    // optional string libc_debug_malloc_program = 15;
    const uint64_t LIBC_DEBUG_MALLOC_PROGRAM = 0x000001090000000fLL;

    // optional .android.os.SystemPropertiesProto.Log log = 16;
    const uint64_t LOG = 0x0000010b00000010LL;

    // optional bool media_mediadrmservice_enable = 17;
    const uint64_t MEDIA_MEDIADRMSERVICE_ENABLE = 0x0000010800000011LL;

    // optional bool media_recorder_show_manufacturer_and_model = 18;
    const uint64_t MEDIA_RECORDER_SHOW_MANUFACTURER_AND_MODEL = 0x0000010800000012LL;

    // optional .android.os.SystemPropertiesProto.Persist persist = 19;
    const uint64_t PERSIST = 0x0000010b00000013LL;

    // optional .android.os.SystemPropertiesProto.PmDexopt pm_dexopt = 20;
    const uint64_t PM_DEXOPT = 0x0000010b00000014LL;

    // optional .android.os.SystemPropertiesProto.Ro ro = 21;
    const uint64_t RO = 0x0000010b00000015LL;

    // optional string sendbug_preferred_domain = 22;
    const uint64_t SENDBUG_PREFERRED_DOMAIN = 0x0000010900000016LL;

    // optional int32 service_bootanim_exit = 23;
    const uint64_t SERVICE_BOOTANIM_EXIT = 0x0000010500000017LL;

    // optional .android.os.SystemPropertiesProto.Sys sys = 24;
    const uint64_t SYS = 0x0000010b00000018LL;

    // optional int32 telephony_lte_on_cdma_device = 25;
    const uint64_t TELEPHONY_LTE_ON_CDMA_DEVICE = 0x0000010500000019LL;

    // optional int32 tombstoned_max_tombstone_count = 26;
    const uint64_t TOMBSTONED_MAX_TOMBSTONE_COUNT = 0x000001050000001aLL;

    // optional string vold_decrypt = 27;
    const uint64_t VOLD_DECRYPT = 0x000001090000001bLL;

    // optional int32 vold_post_fs_data_done = 28;
    const uint64_t VOLD_POST_FS_DATA_DONE = 0x000001050000001cLL;

    // optional int32 vts_native_server_on = 29;
    const uint64_t VTS_NATIVE_SERVER_ON = 0x000001050000001dLL;

    // optional string wifi_direct_interface = 30;
    const uint64_t WIFI_DIRECT_INTERFACE = 0x000001090000001eLL;

    // optional string wifi_interface = 31;
    const uint64_t WIFI_INTERFACE = 0x000001090000001fLL;

    static const int _FIELD_COUNT = 31;
    static const char* _FIELD_NAMES[31] = {
        "extra_properties",
        "aac_drc",
        "aaudio",
        "af_fast_track_multiplier",
        "camera",
        "dalvik_vm",
        "drm_64bit_enabled",
        "drm_service_enabled",
        "dumpstate_dry_run",
        "gsm_sim_operator_numeric",
        "hal_instrumentation_enable",
        "init_svc",
        "keyguard_no_require_sim",
        "libc_debug_malloc_options",
        "libc_debug_malloc_program",
        "log",
        "media_mediadrmservice_enable",
        "media_recorder_show_manufacturer_and_model",
        "persist",
        "pm_dexopt",
        "ro",
        "sendbug_preferred_domain",
        "service_bootanim_exit",
        "sys",
        "telephony_lte_on_cdma_device",
        "tombstoned_max_tombstone_count",
        "vold_decrypt",
        "vold_post_fs_data_done",
        "vts_native_server_on",
        "wifi_direct_interface",
        "wifi_interface",
    };
    static const uint64_t _FIELD_IDS[31] = {
        EXTRA_PROPERTIES,
        AAC_DRC,
        AAUDIO,
        AF_FAST_TRACK_MULTIPLIER,
        CAMERA,
        DALVIK_VM,
        DRM_64BIT_ENABLED,
        DRM_SERVICE_ENABLED,
        DUMPSTATE_DRY_RUN,
        GSM_SIM_OPERATOR_NUMERIC,
        HAL_INSTRUMENTATION_ENABLE,
        INIT_SVC,
        KEYGUARD_NO_REQUIRE_SIM,
        LIBC_DEBUG_MALLOC_OPTIONS,
        LIBC_DEBUG_MALLOC_PROGRAM,
        LOG,
        MEDIA_MEDIADRMSERVICE_ENABLE,
        MEDIA_RECORDER_SHOW_MANUFACTURER_AND_MODEL,
        PERSIST,
        PM_DEXOPT,
        RO,
        SENDBUG_PREFERRED_DOMAIN,
        SERVICE_BOOTANIM_EXIT,
        SYS,
        TELEPHONY_LTE_ON_CDMA_DEVICE,
        TOMBSTONED_MAX_TOMBSTONE_COUNT,
        VOLD_DECRYPT,
        VOLD_POST_FS_DATA_DONE,
        VTS_NATIVE_SERVER_ON,
        WIFI_DIRECT_INTERFACE,
        WIFI_INTERFACE,
    };

} //SystemPropertiesProto

} // os
} // android

#endif // ANDROID_FRAMEWORKS_BASE_CORE_PROTO_ANDROID_OS_SYSTEM_PROPERTIES_PROTO_STREAM_H
