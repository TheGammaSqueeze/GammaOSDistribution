// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/nfc/card_emulation.proto

#include "frameworks/base/core/proto/android/nfc/card_emulation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fapdu_5fservice_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ApduServiceInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fapdu_5fservice_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fnfc_5ffservice_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NfcFServiceInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fnfc_5ffservice_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AidRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AidRoutingManagerProto_Route_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnabledNfcFServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostNfcFEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PreferredServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RegisteredAidCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisteredAidCacheProto_AidCacheEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisteredNfcFServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisteredServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisteredT3tIdentifiersCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemCodeRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemCodeRoutingManagerProto_T3tIdentifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto;
namespace com {
namespace android {
namespace nfc {
namespace cardemulation {
class CardEmulationManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardEmulationManagerProto> _instance;
} _CardEmulationManagerProto_default_instance_;
class RegisteredServicesCacheProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisteredServicesCacheProto> _instance;
} _RegisteredServicesCacheProto_default_instance_;
class RegisteredNfcFServicesCacheProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisteredNfcFServicesCacheProto> _instance;
} _RegisteredNfcFServicesCacheProto_default_instance_;
class PreferredServicesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreferredServicesProto> _instance;
} _PreferredServicesProto_default_instance_;
class EnabledNfcFServicesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnabledNfcFServicesProto> _instance;
} _EnabledNfcFServicesProto_default_instance_;
class RegisteredAidCacheProto_AidCacheEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisteredAidCacheProto_AidCacheEntry> _instance;
} _RegisteredAidCacheProto_AidCacheEntry_default_instance_;
class RegisteredAidCacheProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisteredAidCacheProto> _instance;
} _RegisteredAidCacheProto_default_instance_;
class AidRoutingManagerProto_RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AidRoutingManagerProto_Route> _instance;
} _AidRoutingManagerProto_Route_default_instance_;
class AidRoutingManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AidRoutingManagerProto> _instance;
} _AidRoutingManagerProto_default_instance_;
class RegisteredT3tIdentifiersCacheProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisteredT3tIdentifiersCacheProto> _instance;
} _RegisteredT3tIdentifiersCacheProto_default_instance_;
class SystemCodeRoutingManagerProto_T3tIdentifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemCodeRoutingManagerProto_T3tIdentifier> _instance;
} _SystemCodeRoutingManagerProto_T3tIdentifier_default_instance_;
class SystemCodeRoutingManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemCodeRoutingManagerProto> _instance;
} _SystemCodeRoutingManagerProto_default_instance_;
class HostEmulationManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostEmulationManagerProto> _instance;
} _HostEmulationManagerProto_default_instance_;
class HostNfcFEmulationManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostNfcFEmulationManagerProto> _instance;
} _HostNfcFEmulationManagerProto_default_instance_;
}  // namespace cardemulation
}  // namespace nfc
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_AidRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_AidRoutingManagerProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::AidRoutingManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::AidRoutingManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AidRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AidRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_AidRoutingManagerProto_Route_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,}};

static void InitDefaultsscc_info_AidRoutingManagerProto_Route_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_AidRoutingManagerProto_Route_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AidRoutingManagerProto_Route_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AidRoutingManagerProto_Route_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {}};

static void InitDefaultsscc_info_CardEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::CardEmulationManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::CardEmulationManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_CardEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_CardEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_RegisteredServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,
      &scc_info_RegisteredNfcFServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,
      &scc_info_PreferredServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,
      &scc_info_EnabledNfcFServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,
      &scc_info_RegisteredAidCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,
      &scc_info_RegisteredT3tIdentifiersCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,
      &scc_info_HostEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,
      &scc_info_HostNfcFEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,}};

static void InitDefaultsscc_info_EnabledNfcFServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_EnabledNfcFServicesProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::EnabledNfcFServicesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::EnabledNfcFServicesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnabledNfcFServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EnabledNfcFServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,}};

static void InitDefaultsscc_info_HostEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_HostEmulationManagerProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::HostEmulationManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::HostEmulationManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HostEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,}};

static void InitDefaultsscc_info_HostNfcFEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_HostNfcFEmulationManagerProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostNfcFEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HostNfcFEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,}};

static void InitDefaultsscc_info_PreferredServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_PreferredServicesProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::PreferredServicesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::PreferredServicesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PreferredServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PreferredServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,}};

static void InitDefaultsscc_info_RegisteredAidCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_RegisteredAidCacheProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::RegisteredAidCacheProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::RegisteredAidCacheProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RegisteredAidCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RegisteredAidCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_RegisteredAidCacheProto_AidCacheEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,
      &scc_info_AidRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,}};

static void InitDefaultsscc_info_RegisteredAidCacheProto_AidCacheEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_RegisteredAidCacheProto_AidCacheEntry_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisteredAidCacheProto_AidCacheEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegisteredAidCacheProto_AidCacheEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_ComponentNameProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fcomponent_5fname_2eproto.base,
      &scc_info_ApduServiceInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fapdu_5fservice_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_RegisteredNfcFServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_RegisteredNfcFServicesCacheProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisteredNfcFServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RegisteredNfcFServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_NfcFServiceInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fnfc_5ffservice_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_RegisteredServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_RegisteredServicesCacheProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::RegisteredServicesCacheProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::RegisteredServicesCacheProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisteredServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RegisteredServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_ApduServiceInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fapdu_5fservice_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_RegisteredT3tIdentifiersCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_RegisteredT3tIdentifiersCacheProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisteredT3tIdentifiersCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegisteredT3tIdentifiersCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_NfcFServiceInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fnfc_5ffservice_5finfo_2eproto.base,
      &scc_info_SystemCodeRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,}};

static void InitDefaultsscc_info_SystemCodeRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_SystemCodeRoutingManagerProto_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemCodeRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemCodeRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {
      &scc_info_SystemCodeRoutingManagerProto_T3tIdentifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base,}};

static void InitDefaultsscc_info_SystemCodeRoutingManagerProto_T3tIdentifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::nfc::cardemulation::_SystemCodeRoutingManagerProto_T3tIdentifier_default_instance_;
    new (ptr) ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemCodeRoutingManagerProto_T3tIdentifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemCodeRoutingManagerProto_T3tIdentifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto}, {}};

namespace com {
namespace android {
namespace nfc {
namespace cardemulation {

// ===================================================================

void CardEmulationManagerProto::InitAsDefaultInstance() {
  ::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_._instance.get_mutable()->registered_services_cache_ = const_cast< ::com::android::nfc::cardemulation::RegisteredServicesCacheProto*>(
      ::com::android::nfc::cardemulation::RegisteredServicesCacheProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_._instance.get_mutable()->registered_nfc_f_services_cache_ = const_cast< ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto*>(
      ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_._instance.get_mutable()->preferred_services_ = const_cast< ::com::android::nfc::cardemulation::PreferredServicesProto*>(
      ::com::android::nfc::cardemulation::PreferredServicesProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_._instance.get_mutable()->enabled_nfc_f_services_ = const_cast< ::com::android::nfc::cardemulation::EnabledNfcFServicesProto*>(
      ::com::android::nfc::cardemulation::EnabledNfcFServicesProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_._instance.get_mutable()->aid_cache_ = const_cast< ::com::android::nfc::cardemulation::RegisteredAidCacheProto*>(
      ::com::android::nfc::cardemulation::RegisteredAidCacheProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_._instance.get_mutable()->t3t_identifiers_cache_ = const_cast< ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto*>(
      ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_._instance.get_mutable()->host_emulation_manager_ = const_cast< ::com::android::nfc::cardemulation::HostEmulationManagerProto*>(
      ::com::android::nfc::cardemulation::HostEmulationManagerProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_CardEmulationManagerProto_default_instance_._instance.get_mutable()->host_nfc_f_emulation_manager_ = const_cast< ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto*>(
      ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto::internal_default_instance());
}
class CardEmulationManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CardEmulationManagerProto>()._has_bits_);
  static const ::com::android::nfc::cardemulation::RegisteredServicesCacheProto& registered_services_cache(const CardEmulationManagerProto* msg);
  static void set_has_registered_services_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto& registered_nfc_f_services_cache(const CardEmulationManagerProto* msg);
  static void set_has_registered_nfc_f_services_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::nfc::cardemulation::PreferredServicesProto& preferred_services(const CardEmulationManagerProto* msg);
  static void set_has_preferred_services(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::nfc::cardemulation::EnabledNfcFServicesProto& enabled_nfc_f_services(const CardEmulationManagerProto* msg);
  static void set_has_enabled_nfc_f_services(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::nfc::cardemulation::RegisteredAidCacheProto& aid_cache(const CardEmulationManagerProto* msg);
  static void set_has_aid_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto& t3t_identifiers_cache(const CardEmulationManagerProto* msg);
  static void set_has_t3t_identifiers_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::android::nfc::cardemulation::HostEmulationManagerProto& host_emulation_manager(const CardEmulationManagerProto* msg);
  static void set_has_host_emulation_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto& host_nfc_f_emulation_manager(const CardEmulationManagerProto* msg);
  static void set_has_host_nfc_f_emulation_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::com::android::nfc::cardemulation::RegisteredServicesCacheProto&
CardEmulationManagerProto::_Internal::registered_services_cache(const CardEmulationManagerProto* msg) {
  return *msg->registered_services_cache_;
}
const ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto&
CardEmulationManagerProto::_Internal::registered_nfc_f_services_cache(const CardEmulationManagerProto* msg) {
  return *msg->registered_nfc_f_services_cache_;
}
const ::com::android::nfc::cardemulation::PreferredServicesProto&
CardEmulationManagerProto::_Internal::preferred_services(const CardEmulationManagerProto* msg) {
  return *msg->preferred_services_;
}
const ::com::android::nfc::cardemulation::EnabledNfcFServicesProto&
CardEmulationManagerProto::_Internal::enabled_nfc_f_services(const CardEmulationManagerProto* msg) {
  return *msg->enabled_nfc_f_services_;
}
const ::com::android::nfc::cardemulation::RegisteredAidCacheProto&
CardEmulationManagerProto::_Internal::aid_cache(const CardEmulationManagerProto* msg) {
  return *msg->aid_cache_;
}
const ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto&
CardEmulationManagerProto::_Internal::t3t_identifiers_cache(const CardEmulationManagerProto* msg) {
  return *msg->t3t_identifiers_cache_;
}
const ::com::android::nfc::cardemulation::HostEmulationManagerProto&
CardEmulationManagerProto::_Internal::host_emulation_manager(const CardEmulationManagerProto* msg) {
  return *msg->host_emulation_manager_;
}
const ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto&
CardEmulationManagerProto::_Internal::host_nfc_f_emulation_manager(const CardEmulationManagerProto* msg) {
  return *msg->host_nfc_f_emulation_manager_;
}
CardEmulationManagerProto::CardEmulationManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.CardEmulationManagerProto)
}
CardEmulationManagerProto::CardEmulationManagerProto(const CardEmulationManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_registered_services_cache()) {
    registered_services_cache_ = new ::com::android::nfc::cardemulation::RegisteredServicesCacheProto(*from.registered_services_cache_);
  } else {
    registered_services_cache_ = nullptr;
  }
  if (from.has_registered_nfc_f_services_cache()) {
    registered_nfc_f_services_cache_ = new ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto(*from.registered_nfc_f_services_cache_);
  } else {
    registered_nfc_f_services_cache_ = nullptr;
  }
  if (from.has_preferred_services()) {
    preferred_services_ = new ::com::android::nfc::cardemulation::PreferredServicesProto(*from.preferred_services_);
  } else {
    preferred_services_ = nullptr;
  }
  if (from.has_enabled_nfc_f_services()) {
    enabled_nfc_f_services_ = new ::com::android::nfc::cardemulation::EnabledNfcFServicesProto(*from.enabled_nfc_f_services_);
  } else {
    enabled_nfc_f_services_ = nullptr;
  }
  if (from.has_aid_cache()) {
    aid_cache_ = new ::com::android::nfc::cardemulation::RegisteredAidCacheProto(*from.aid_cache_);
  } else {
    aid_cache_ = nullptr;
  }
  if (from.has_t3t_identifiers_cache()) {
    t3t_identifiers_cache_ = new ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto(*from.t3t_identifiers_cache_);
  } else {
    t3t_identifiers_cache_ = nullptr;
  }
  if (from.has_host_emulation_manager()) {
    host_emulation_manager_ = new ::com::android::nfc::cardemulation::HostEmulationManagerProto(*from.host_emulation_manager_);
  } else {
    host_emulation_manager_ = nullptr;
  }
  if (from.has_host_nfc_f_emulation_manager()) {
    host_nfc_f_emulation_manager_ = new ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto(*from.host_nfc_f_emulation_manager_);
  } else {
    host_nfc_f_emulation_manager_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.CardEmulationManagerProto)
}

void CardEmulationManagerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  ::memset(&registered_services_cache_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_nfc_f_emulation_manager_) -
      reinterpret_cast<char*>(&registered_services_cache_)) + sizeof(host_nfc_f_emulation_manager_));
}

CardEmulationManagerProto::~CardEmulationManagerProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.CardEmulationManagerProto)
  SharedDtor();
}

void CardEmulationManagerProto::SharedDtor() {
  if (this != internal_default_instance()) delete registered_services_cache_;
  if (this != internal_default_instance()) delete registered_nfc_f_services_cache_;
  if (this != internal_default_instance()) delete preferred_services_;
  if (this != internal_default_instance()) delete enabled_nfc_f_services_;
  if (this != internal_default_instance()) delete aid_cache_;
  if (this != internal_default_instance()) delete t3t_identifiers_cache_;
  if (this != internal_default_instance()) delete host_emulation_manager_;
  if (this != internal_default_instance()) delete host_nfc_f_emulation_manager_;
}

void CardEmulationManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardEmulationManagerProto& CardEmulationManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void CardEmulationManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.CardEmulationManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(registered_services_cache_ != nullptr);
      registered_services_cache_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(registered_nfc_f_services_cache_ != nullptr);
      registered_nfc_f_services_cache_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preferred_services_ != nullptr);
      preferred_services_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(enabled_nfc_f_services_ != nullptr);
      enabled_nfc_f_services_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(aid_cache_ != nullptr);
      aid_cache_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(t3t_identifiers_cache_ != nullptr);
      t3t_identifiers_cache_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(host_emulation_manager_ != nullptr);
      host_emulation_manager_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(host_nfc_f_emulation_manager_ != nullptr);
      host_nfc_f_emulation_manager_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CardEmulationManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.nfc.cardemulation.RegisteredServicesCacheProto registered_services_cache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_registered_services_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto registered_nfc_f_services_cache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_registered_nfc_f_services_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.PreferredServicesProto preferred_services = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_preferred_services(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.EnabledNfcFServicesProto enabled_nfc_f_services = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_enabled_nfc_f_services(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.RegisteredAidCacheProto aid_cache = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_aid_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto t3t_identifiers_cache = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_t3t_identifiers_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.HostEmulationManagerProto host_emulation_manager = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_host_emulation_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.HostNfcFEmulationManagerProto host_nfc_f_emulation_manager = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_host_nfc_f_emulation_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CardEmulationManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.CardEmulationManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.nfc.cardemulation.RegisteredServicesCacheProto registered_services_cache = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_registered_services_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto registered_nfc_f_services_cache = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_registered_nfc_f_services_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.PreferredServicesProto preferred_services = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preferred_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.EnabledNfcFServicesProto enabled_nfc_f_services = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_nfc_f_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.RegisteredAidCacheProto aid_cache = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aid_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto t3t_identifiers_cache = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_t3t_identifiers_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.HostEmulationManagerProto host_emulation_manager = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host_emulation_manager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.HostNfcFEmulationManagerProto host_nfc_f_emulation_manager = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host_nfc_f_emulation_manager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.CardEmulationManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.CardEmulationManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CardEmulationManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.CardEmulationManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.nfc.cardemulation.RegisteredServicesCacheProto registered_services_cache = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::registered_services_cache(this), output);
  }

  // optional .com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto registered_nfc_f_services_cache = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::registered_nfc_f_services_cache(this), output);
  }

  // optional .com.android.nfc.cardemulation.PreferredServicesProto preferred_services = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::preferred_services(this), output);
  }

  // optional .com.android.nfc.cardemulation.EnabledNfcFServicesProto enabled_nfc_f_services = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::enabled_nfc_f_services(this), output);
  }

  // optional .com.android.nfc.cardemulation.RegisteredAidCacheProto aid_cache = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::aid_cache(this), output);
  }

  // optional .com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto t3t_identifiers_cache = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::t3t_identifiers_cache(this), output);
  }

  // optional .com.android.nfc.cardemulation.HostEmulationManagerProto host_emulation_manager = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::host_emulation_manager(this), output);
  }

  // optional .com.android.nfc.cardemulation.HostNfcFEmulationManagerProto host_nfc_f_emulation_manager = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::host_nfc_f_emulation_manager(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.CardEmulationManagerProto)
}

size_t CardEmulationManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.CardEmulationManagerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.nfc.cardemulation.RegisteredServicesCacheProto registered_services_cache = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *registered_services_cache_);
    }

    // optional .com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto registered_nfc_f_services_cache = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *registered_nfc_f_services_cache_);
    }

    // optional .com.android.nfc.cardemulation.PreferredServicesProto preferred_services = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferred_services_);
    }

    // optional .com.android.nfc.cardemulation.EnabledNfcFServicesProto enabled_nfc_f_services = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_nfc_f_services_);
    }

    // optional .com.android.nfc.cardemulation.RegisteredAidCacheProto aid_cache = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aid_cache_);
    }

    // optional .com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto t3t_identifiers_cache = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *t3t_identifiers_cache_);
    }

    // optional .com.android.nfc.cardemulation.HostEmulationManagerProto host_emulation_manager = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_emulation_manager_);
    }

    // optional .com.android.nfc.cardemulation.HostNfcFEmulationManagerProto host_nfc_f_emulation_manager = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_nfc_f_emulation_manager_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardEmulationManagerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CardEmulationManagerProto*>(
      &from));
}

void CardEmulationManagerProto::MergeFrom(const CardEmulationManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.CardEmulationManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_registered_services_cache()->::com::android::nfc::cardemulation::RegisteredServicesCacheProto::MergeFrom(from.registered_services_cache());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_registered_nfc_f_services_cache()->::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto::MergeFrom(from.registered_nfc_f_services_cache());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_preferred_services()->::com::android::nfc::cardemulation::PreferredServicesProto::MergeFrom(from.preferred_services());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_enabled_nfc_f_services()->::com::android::nfc::cardemulation::EnabledNfcFServicesProto::MergeFrom(from.enabled_nfc_f_services());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_aid_cache()->::com::android::nfc::cardemulation::RegisteredAidCacheProto::MergeFrom(from.aid_cache());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_t3t_identifiers_cache()->::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto::MergeFrom(from.t3t_identifiers_cache());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_host_emulation_manager()->::com::android::nfc::cardemulation::HostEmulationManagerProto::MergeFrom(from.host_emulation_manager());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_host_nfc_f_emulation_manager()->::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto::MergeFrom(from.host_nfc_f_emulation_manager());
    }
  }
}

void CardEmulationManagerProto::CopyFrom(const CardEmulationManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.CardEmulationManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardEmulationManagerProto::IsInitialized() const {
  return true;
}

void CardEmulationManagerProto::InternalSwap(CardEmulationManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(registered_services_cache_, other->registered_services_cache_);
  swap(registered_nfc_f_services_cache_, other->registered_nfc_f_services_cache_);
  swap(preferred_services_, other->preferred_services_);
  swap(enabled_nfc_f_services_, other->enabled_nfc_f_services_);
  swap(aid_cache_, other->aid_cache_);
  swap(t3t_identifiers_cache_, other->t3t_identifiers_cache_);
  swap(host_emulation_manager_, other->host_emulation_manager_);
  swap(host_nfc_f_emulation_manager_, other->host_nfc_f_emulation_manager_);
}

std::string CardEmulationManagerProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.CardEmulationManagerProto";
}


// ===================================================================

void RegisteredServicesCacheProto::InitAsDefaultInstance() {
}
class RegisteredServicesCacheProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisteredServicesCacheProto>()._has_bits_);
};

void RegisteredServicesCacheProto::clear_apdu_service_infos() {
  apdu_service_infos_.Clear();
}
RegisteredServicesCacheProto::RegisteredServicesCacheProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
}
RegisteredServicesCacheProto::RegisteredServicesCacheProto(const RegisteredServicesCacheProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      apdu_service_infos_(from.apdu_service_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
}

void RegisteredServicesCacheProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisteredServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
}

RegisteredServicesCacheProto::~RegisteredServicesCacheProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  SharedDtor();
}

void RegisteredServicesCacheProto::SharedDtor() {
}

void RegisteredServicesCacheProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisteredServicesCacheProto& RegisteredServicesCacheProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisteredServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void RegisteredServicesCacheProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apdu_service_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisteredServicesCacheProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.nfc.cardemulation.ApduServiceInfoProto apdu_service_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_apdu_service_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisteredServicesCacheProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.nfc.cardemulation.ApduServiceInfoProto apdu_service_infos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_apdu_service_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisteredServicesCacheProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.nfc.cardemulation.ApduServiceInfoProto apdu_service_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->apdu_service_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->apdu_service_infos(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
}

size_t RegisteredServicesCacheProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.nfc.cardemulation.ApduServiceInfoProto apdu_service_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->apdu_service_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->apdu_service_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisteredServicesCacheProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RegisteredServicesCacheProto*>(
      &from));
}

void RegisteredServicesCacheProto::MergeFrom(const RegisteredServicesCacheProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  apdu_service_infos_.MergeFrom(from.apdu_service_infos_);
}

void RegisteredServicesCacheProto::CopyFrom(const RegisteredServicesCacheProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.RegisteredServicesCacheProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredServicesCacheProto::IsInitialized() const {
  return true;
}

void RegisteredServicesCacheProto::InternalSwap(RegisteredServicesCacheProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&apdu_service_infos_)->InternalSwap(CastToBase(&other->apdu_service_infos_));
}

std::string RegisteredServicesCacheProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.RegisteredServicesCacheProto";
}


// ===================================================================

void RegisteredNfcFServicesCacheProto::InitAsDefaultInstance() {
}
class RegisteredNfcFServicesCacheProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisteredNfcFServicesCacheProto>()._has_bits_);
};

void RegisteredNfcFServicesCacheProto::clear_nfc_fservice_info() {
  nfc_fservice_info_.Clear();
}
RegisteredNfcFServicesCacheProto::RegisteredNfcFServicesCacheProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
}
RegisteredNfcFServicesCacheProto::RegisteredNfcFServicesCacheProto(const RegisteredNfcFServicesCacheProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      nfc_fservice_info_(from.nfc_fservice_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
}

void RegisteredNfcFServicesCacheProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisteredNfcFServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
}

RegisteredNfcFServicesCacheProto::~RegisteredNfcFServicesCacheProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  SharedDtor();
}

void RegisteredNfcFServicesCacheProto::SharedDtor() {
}

void RegisteredNfcFServicesCacheProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisteredNfcFServicesCacheProto& RegisteredNfcFServicesCacheProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisteredNfcFServicesCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void RegisteredNfcFServicesCacheProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nfc_fservice_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisteredNfcFServicesCacheProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.nfc.cardemulation.NfcFServiceInfoProto nfc_fservice_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_nfc_fservice_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisteredNfcFServicesCacheProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.nfc.cardemulation.NfcFServiceInfoProto nfc_fservice_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_nfc_fservice_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisteredNfcFServicesCacheProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.nfc.cardemulation.NfcFServiceInfoProto nfc_fservice_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nfc_fservice_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->nfc_fservice_info(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
}

size_t RegisteredNfcFServicesCacheProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.nfc.cardemulation.NfcFServiceInfoProto nfc_fservice_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nfc_fservice_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->nfc_fservice_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisteredNfcFServicesCacheProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RegisteredNfcFServicesCacheProto*>(
      &from));
}

void RegisteredNfcFServicesCacheProto::MergeFrom(const RegisteredNfcFServicesCacheProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nfc_fservice_info_.MergeFrom(from.nfc_fservice_info_);
}

void RegisteredNfcFServicesCacheProto::CopyFrom(const RegisteredNfcFServicesCacheProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredNfcFServicesCacheProto::IsInitialized() const {
  return true;
}

void RegisteredNfcFServicesCacheProto::InternalSwap(RegisteredNfcFServicesCacheProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&nfc_fservice_info_)->InternalSwap(CastToBase(&other->nfc_fservice_info_));
}

std::string RegisteredNfcFServicesCacheProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.RegisteredNfcFServicesCacheProto";
}


// ===================================================================

void PreferredServicesProto::InitAsDefaultInstance() {
  ::com::android::nfc::cardemulation::_PreferredServicesProto_default_instance_._instance.get_mutable()->foreground_current_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_PreferredServicesProto_default_instance_._instance.get_mutable()->current_preferred_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_PreferredServicesProto_default_instance_._instance.get_mutable()->next_tap_default_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_PreferredServicesProto_default_instance_._instance.get_mutable()->foreground_requested_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_PreferredServicesProto_default_instance_._instance.get_mutable()->settings_default_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
}
class PreferredServicesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PreferredServicesProto>()._has_bits_);
  static const ::android::content::ComponentNameProto& foreground_current(const PreferredServicesProto* msg);
  static void set_has_foreground_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::content::ComponentNameProto& current_preferred(const PreferredServicesProto* msg);
  static void set_has_current_preferred(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::content::ComponentNameProto& next_tap_default(const PreferredServicesProto* msg);
  static void set_has_next_tap_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_foreground_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::content::ComponentNameProto& foreground_requested(const PreferredServicesProto* msg);
  static void set_has_foreground_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::content::ComponentNameProto& settings_default(const PreferredServicesProto* msg);
  static void set_has_settings_default(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_prefer_foreground(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::content::ComponentNameProto&
PreferredServicesProto::_Internal::foreground_current(const PreferredServicesProto* msg) {
  return *msg->foreground_current_;
}
const ::android::content::ComponentNameProto&
PreferredServicesProto::_Internal::current_preferred(const PreferredServicesProto* msg) {
  return *msg->current_preferred_;
}
const ::android::content::ComponentNameProto&
PreferredServicesProto::_Internal::next_tap_default(const PreferredServicesProto* msg) {
  return *msg->next_tap_default_;
}
const ::android::content::ComponentNameProto&
PreferredServicesProto::_Internal::foreground_requested(const PreferredServicesProto* msg) {
  return *msg->foreground_requested_;
}
const ::android::content::ComponentNameProto&
PreferredServicesProto::_Internal::settings_default(const PreferredServicesProto* msg) {
  return *msg->settings_default_;
}
void PreferredServicesProto::clear_foreground_current() {
  if (foreground_current_ != nullptr) foreground_current_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PreferredServicesProto::clear_current_preferred() {
  if (current_preferred_ != nullptr) current_preferred_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PreferredServicesProto::clear_next_tap_default() {
  if (next_tap_default_ != nullptr) next_tap_default_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void PreferredServicesProto::clear_foreground_requested() {
  if (foreground_requested_ != nullptr) foreground_requested_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void PreferredServicesProto::clear_settings_default() {
  if (settings_default_ != nullptr) settings_default_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
PreferredServicesProto::PreferredServicesProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.PreferredServicesProto)
}
PreferredServicesProto::PreferredServicesProto(const PreferredServicesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_foreground_current()) {
    foreground_current_ = new ::android::content::ComponentNameProto(*from.foreground_current_);
  } else {
    foreground_current_ = nullptr;
  }
  if (from.has_current_preferred()) {
    current_preferred_ = new ::android::content::ComponentNameProto(*from.current_preferred_);
  } else {
    current_preferred_ = nullptr;
  }
  if (from.has_next_tap_default()) {
    next_tap_default_ = new ::android::content::ComponentNameProto(*from.next_tap_default_);
  } else {
    next_tap_default_ = nullptr;
  }
  if (from.has_foreground_requested()) {
    foreground_requested_ = new ::android::content::ComponentNameProto(*from.foreground_requested_);
  } else {
    foreground_requested_ = nullptr;
  }
  if (from.has_settings_default()) {
    settings_default_ = new ::android::content::ComponentNameProto(*from.settings_default_);
  } else {
    settings_default_ = nullptr;
  }
  ::memcpy(&foreground_uid_, &from.foreground_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefer_foreground_) -
    reinterpret_cast<char*>(&foreground_uid_)) + sizeof(prefer_foreground_));
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.PreferredServicesProto)
}

void PreferredServicesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreferredServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  ::memset(&foreground_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefer_foreground_) -
      reinterpret_cast<char*>(&foreground_current_)) + sizeof(prefer_foreground_));
}

PreferredServicesProto::~PreferredServicesProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.PreferredServicesProto)
  SharedDtor();
}

void PreferredServicesProto::SharedDtor() {
  if (this != internal_default_instance()) delete foreground_current_;
  if (this != internal_default_instance()) delete current_preferred_;
  if (this != internal_default_instance()) delete next_tap_default_;
  if (this != internal_default_instance()) delete foreground_requested_;
  if (this != internal_default_instance()) delete settings_default_;
}

void PreferredServicesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreferredServicesProto& PreferredServicesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreferredServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void PreferredServicesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.PreferredServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(foreground_current_ != nullptr);
      foreground_current_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(current_preferred_ != nullptr);
      current_preferred_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(next_tap_default_ != nullptr);
      next_tap_default_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(foreground_requested_ != nullptr);
      foreground_requested_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(settings_default_ != nullptr);
      settings_default_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&foreground_uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prefer_foreground_) -
        reinterpret_cast<char*>(&foreground_uid_)) + sizeof(prefer_foreground_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PreferredServicesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ComponentNameProto foreground_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_foreground_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto current_preferred = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_current_preferred(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto next_tap_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_next_tap_default(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 foreground_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_foreground_uid(&has_bits);
          foreground_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto foreground_requested = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_foreground_requested(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto settings_default = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_settings_default(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prefer_foreground = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_prefer_foreground(&has_bits);
          prefer_foreground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PreferredServicesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.PreferredServicesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ComponentNameProto foreground_current = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground_current()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto current_preferred = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current_preferred()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto next_tap_default = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_next_tap_default()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 foreground_uid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_foreground_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &foreground_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto foreground_requested = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground_requested()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto settings_default = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings_default()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prefer_foreground = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_prefer_foreground(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_foreground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.PreferredServicesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.PreferredServicesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PreferredServicesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.PreferredServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto foreground_current = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::foreground_current(this), output);
  }

  // optional .android.content.ComponentNameProto current_preferred = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::current_preferred(this), output);
  }

  // optional .android.content.ComponentNameProto next_tap_default = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::next_tap_default(this), output);
  }

  // optional int32 foreground_uid = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->foreground_uid(), output);
  }

  // optional .android.content.ComponentNameProto foreground_requested = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::foreground_requested(this), output);
  }

  // optional .android.content.ComponentNameProto settings_default = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::settings_default(this), output);
  }

  // optional bool prefer_foreground = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->prefer_foreground(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.PreferredServicesProto)
}

size_t PreferredServicesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.PreferredServicesProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.content.ComponentNameProto foreground_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_current_);
    }

    // optional .android.content.ComponentNameProto current_preferred = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_preferred_);
    }

    // optional .android.content.ComponentNameProto next_tap_default = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *next_tap_default_);
    }

    // optional .android.content.ComponentNameProto foreground_requested = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_requested_);
    }

    // optional .android.content.ComponentNameProto settings_default = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_default_);
    }

    // optional int32 foreground_uid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->foreground_uid());
    }

    // optional bool prefer_foreground = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreferredServicesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PreferredServicesProto*>(
      &from));
}

void PreferredServicesProto::MergeFrom(const PreferredServicesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.PreferredServicesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_foreground_current()->::android::content::ComponentNameProto::MergeFrom(from.foreground_current());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_current_preferred()->::android::content::ComponentNameProto::MergeFrom(from.current_preferred());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_next_tap_default()->::android::content::ComponentNameProto::MergeFrom(from.next_tap_default());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_foreground_requested()->::android::content::ComponentNameProto::MergeFrom(from.foreground_requested());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_settings_default()->::android::content::ComponentNameProto::MergeFrom(from.settings_default());
    }
    if (cached_has_bits & 0x00000020u) {
      foreground_uid_ = from.foreground_uid_;
    }
    if (cached_has_bits & 0x00000040u) {
      prefer_foreground_ = from.prefer_foreground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PreferredServicesProto::CopyFrom(const PreferredServicesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.PreferredServicesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferredServicesProto::IsInitialized() const {
  return true;
}

void PreferredServicesProto::InternalSwap(PreferredServicesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foreground_current_, other->foreground_current_);
  swap(current_preferred_, other->current_preferred_);
  swap(next_tap_default_, other->next_tap_default_);
  swap(foreground_requested_, other->foreground_requested_);
  swap(settings_default_, other->settings_default_);
  swap(foreground_uid_, other->foreground_uid_);
  swap(prefer_foreground_, other->prefer_foreground_);
}

std::string PreferredServicesProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.PreferredServicesProto";
}


// ===================================================================

void EnabledNfcFServicesProto::InitAsDefaultInstance() {
  ::com::android::nfc::cardemulation::_EnabledNfcFServicesProto_default_instance_._instance.get_mutable()->foreground_component_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_EnabledNfcFServicesProto_default_instance_._instance.get_mutable()->foreground_requested_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
}
class EnabledNfcFServicesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EnabledNfcFServicesProto>()._has_bits_);
  static const ::android::content::ComponentNameProto& foreground_component(const EnabledNfcFServicesProto* msg);
  static void set_has_foreground_component(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::content::ComponentNameProto& foreground_requested(const EnabledNfcFServicesProto* msg);
  static void set_has_foreground_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compute_fg_requested(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_foreground_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::content::ComponentNameProto&
EnabledNfcFServicesProto::_Internal::foreground_component(const EnabledNfcFServicesProto* msg) {
  return *msg->foreground_component_;
}
const ::android::content::ComponentNameProto&
EnabledNfcFServicesProto::_Internal::foreground_requested(const EnabledNfcFServicesProto* msg) {
  return *msg->foreground_requested_;
}
void EnabledNfcFServicesProto::clear_foreground_component() {
  if (foreground_component_ != nullptr) foreground_component_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void EnabledNfcFServicesProto::clear_foreground_requested() {
  if (foreground_requested_ != nullptr) foreground_requested_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
EnabledNfcFServicesProto::EnabledNfcFServicesProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
}
EnabledNfcFServicesProto::EnabledNfcFServicesProto(const EnabledNfcFServicesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_foreground_component()) {
    foreground_component_ = new ::android::content::ComponentNameProto(*from.foreground_component_);
  } else {
    foreground_component_ = nullptr;
  }
  if (from.has_foreground_requested()) {
    foreground_requested_ = new ::android::content::ComponentNameProto(*from.foreground_requested_);
  } else {
    foreground_requested_ = nullptr;
  }
  ::memcpy(&activated_, &from.activated_,
    static_cast<size_t>(reinterpret_cast<char*>(&foreground_uid_) -
    reinterpret_cast<char*>(&activated_)) + sizeof(foreground_uid_));
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
}

void EnabledNfcFServicesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnabledNfcFServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  ::memset(&foreground_component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foreground_uid_) -
      reinterpret_cast<char*>(&foreground_component_)) + sizeof(foreground_uid_));
}

EnabledNfcFServicesProto::~EnabledNfcFServicesProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  SharedDtor();
}

void EnabledNfcFServicesProto::SharedDtor() {
  if (this != internal_default_instance()) delete foreground_component_;
  if (this != internal_default_instance()) delete foreground_requested_;
}

void EnabledNfcFServicesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnabledNfcFServicesProto& EnabledNfcFServicesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnabledNfcFServicesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void EnabledNfcFServicesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(foreground_component_ != nullptr);
      foreground_component_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(foreground_requested_ != nullptr);
      foreground_requested_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&activated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&foreground_uid_) -
        reinterpret_cast<char*>(&activated_)) + sizeof(foreground_uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnabledNfcFServicesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ComponentNameProto foreground_component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_foreground_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto foreground_requested = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_foreground_requested(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool activated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_activated(&has_bits);
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compute_fg_requested = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_compute_fg_requested(&has_bits);
          compute_fg_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 foreground_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_foreground_uid(&has_bits);
          foreground_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnabledNfcFServicesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ComponentNameProto foreground_component = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground_component()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto foreground_requested = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground_requested()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool activated = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_activated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compute_fg_requested = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_compute_fg_requested(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compute_fg_requested_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 foreground_uid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_foreground_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &foreground_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnabledNfcFServicesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto foreground_component = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::foreground_component(this), output);
  }

  // optional .android.content.ComponentNameProto foreground_requested = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::foreground_requested(this), output);
  }

  // optional bool activated = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->activated(), output);
  }

  // optional bool compute_fg_requested = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->compute_fg_requested(), output);
  }

  // optional int32 foreground_uid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->foreground_uid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
}

size_t EnabledNfcFServicesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.content.ComponentNameProto foreground_component = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_component_);
    }

    // optional .android.content.ComponentNameProto foreground_requested = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_requested_);
    }

    // optional bool activated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool compute_fg_requested = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 foreground_uid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->foreground_uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnabledNfcFServicesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnabledNfcFServicesProto*>(
      &from));
}

void EnabledNfcFServicesProto::MergeFrom(const EnabledNfcFServicesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_foreground_component()->::android::content::ComponentNameProto::MergeFrom(from.foreground_component());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_foreground_requested()->::android::content::ComponentNameProto::MergeFrom(from.foreground_requested());
    }
    if (cached_has_bits & 0x00000004u) {
      activated_ = from.activated_;
    }
    if (cached_has_bits & 0x00000008u) {
      compute_fg_requested_ = from.compute_fg_requested_;
    }
    if (cached_has_bits & 0x00000010u) {
      foreground_uid_ = from.foreground_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnabledNfcFServicesProto::CopyFrom(const EnabledNfcFServicesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.EnabledNfcFServicesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnabledNfcFServicesProto::IsInitialized() const {
  return true;
}

void EnabledNfcFServicesProto::InternalSwap(EnabledNfcFServicesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(foreground_component_, other->foreground_component_);
  swap(foreground_requested_, other->foreground_requested_);
  swap(activated_, other->activated_);
  swap(compute_fg_requested_, other->compute_fg_requested_);
  swap(foreground_uid_, other->foreground_uid_);
}

std::string EnabledNfcFServicesProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.EnabledNfcFServicesProto";
}


// ===================================================================

void RegisteredAidCacheProto_AidCacheEntry::InitAsDefaultInstance() {
  ::com::android::nfc::cardemulation::_RegisteredAidCacheProto_AidCacheEntry_default_instance_._instance.get_mutable()->default_component_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
}
class RegisteredAidCacheProto_AidCacheEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisteredAidCacheProto_AidCacheEntry>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::content::ComponentNameProto& default_component(const RegisteredAidCacheProto_AidCacheEntry* msg);
  static void set_has_default_component(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::content::ComponentNameProto&
RegisteredAidCacheProto_AidCacheEntry::_Internal::default_component(const RegisteredAidCacheProto_AidCacheEntry* msg) {
  return *msg->default_component_;
}
void RegisteredAidCacheProto_AidCacheEntry::clear_default_component() {
  if (default_component_ != nullptr) default_component_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void RegisteredAidCacheProto_AidCacheEntry::clear_services() {
  services_.Clear();
}
RegisteredAidCacheProto_AidCacheEntry::RegisteredAidCacheProto_AidCacheEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
}
RegisteredAidCacheProto_AidCacheEntry::RegisteredAidCacheProto_AidCacheEntry(const RegisteredAidCacheProto_AidCacheEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_category()) {
    category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.has_default_component()) {
    default_component_ = new ::android::content::ComponentNameProto(*from.default_component_);
  } else {
    default_component_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
}

void RegisteredAidCacheProto_AidCacheEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisteredAidCacheProto_AidCacheEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_component_ = nullptr;
}

RegisteredAidCacheProto_AidCacheEntry::~RegisteredAidCacheProto_AidCacheEntry() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  SharedDtor();
}

void RegisteredAidCacheProto_AidCacheEntry::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete default_component_;
}

void RegisteredAidCacheProto_AidCacheEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisteredAidCacheProto_AidCacheEntry& RegisteredAidCacheProto_AidCacheEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisteredAidCacheProto_AidCacheEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void RegisteredAidCacheProto_AidCacheEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      category_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(default_component_ != nullptr);
      default_component_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisteredAidCacheProto_AidCacheEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string category = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_category(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto default_component = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_default_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.nfc.cardemulation.ApduServiceInfoProto services = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisteredAidCacheProto_AidCacheEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto default_component = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_component()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.nfc.cardemulation.ApduServiceInfoProto services = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisteredAidCacheProto_AidCacheEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string category = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->category(), output);
  }

  // optional .android.content.ComponentNameProto default_component = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::default_component(this), output);
  }

  // repeated .android.nfc.cardemulation.ApduServiceInfoProto services = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->services(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
}

size_t RegisteredAidCacheProto_AidCacheEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.nfc.cardemulation.ApduServiceInfoProto services = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->services(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string key = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string category = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional .android.content.ComponentNameProto default_component = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_component_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisteredAidCacheProto_AidCacheEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RegisteredAidCacheProto_AidCacheEntry*>(
      &from));
}

void RegisteredAidCacheProto_AidCacheEntry::MergeFrom(const RegisteredAidCacheProto_AidCacheEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      category_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_default_component()->::android::content::ComponentNameProto::MergeFrom(from.default_component());
    }
  }
}

void RegisteredAidCacheProto_AidCacheEntry::CopyFrom(const RegisteredAidCacheProto_AidCacheEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredAidCacheProto_AidCacheEntry::IsInitialized() const {
  return true;
}

void RegisteredAidCacheProto_AidCacheEntry::InternalSwap(RegisteredAidCacheProto_AidCacheEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&services_)->InternalSwap(CastToBase(&other->services_));
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  category_.Swap(&other->category_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(default_component_, other->default_component_);
}

std::string RegisteredAidCacheProto_AidCacheEntry::GetTypeName() const {
  return "com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry";
}


// ===================================================================

void RegisteredAidCacheProto::InitAsDefaultInstance() {
  ::com::android::nfc::cardemulation::_RegisteredAidCacheProto_default_instance_._instance.get_mutable()->preferred_foreground_service_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_RegisteredAidCacheProto_default_instance_._instance.get_mutable()->preferred_payment_service_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_RegisteredAidCacheProto_default_instance_._instance.get_mutable()->routing_manager_ = const_cast< ::com::android::nfc::cardemulation::AidRoutingManagerProto*>(
      ::com::android::nfc::cardemulation::AidRoutingManagerProto::internal_default_instance());
}
class RegisteredAidCacheProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisteredAidCacheProto>()._has_bits_);
  static const ::android::content::ComponentNameProto& preferred_foreground_service(const RegisteredAidCacheProto* msg);
  static void set_has_preferred_foreground_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::content::ComponentNameProto& preferred_payment_service(const RegisteredAidCacheProto* msg);
  static void set_has_preferred_payment_service(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::nfc::cardemulation::AidRoutingManagerProto& routing_manager(const RegisteredAidCacheProto* msg);
  static void set_has_routing_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::content::ComponentNameProto&
RegisteredAidCacheProto::_Internal::preferred_foreground_service(const RegisteredAidCacheProto* msg) {
  return *msg->preferred_foreground_service_;
}
const ::android::content::ComponentNameProto&
RegisteredAidCacheProto::_Internal::preferred_payment_service(const RegisteredAidCacheProto* msg) {
  return *msg->preferred_payment_service_;
}
const ::com::android::nfc::cardemulation::AidRoutingManagerProto&
RegisteredAidCacheProto::_Internal::routing_manager(const RegisteredAidCacheProto* msg) {
  return *msg->routing_manager_;
}
void RegisteredAidCacheProto::clear_preferred_foreground_service() {
  if (preferred_foreground_service_ != nullptr) preferred_foreground_service_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RegisteredAidCacheProto::clear_preferred_payment_service() {
  if (preferred_payment_service_ != nullptr) preferred_payment_service_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RegisteredAidCacheProto::RegisteredAidCacheProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.RegisteredAidCacheProto)
}
RegisteredAidCacheProto::RegisteredAidCacheProto(const RegisteredAidCacheProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      aid_cache_entries_(from.aid_cache_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preferred_foreground_service()) {
    preferred_foreground_service_ = new ::android::content::ComponentNameProto(*from.preferred_foreground_service_);
  } else {
    preferred_foreground_service_ = nullptr;
  }
  if (from.has_preferred_payment_service()) {
    preferred_payment_service_ = new ::android::content::ComponentNameProto(*from.preferred_payment_service_);
  } else {
    preferred_payment_service_ = nullptr;
  }
  if (from.has_routing_manager()) {
    routing_manager_ = new ::com::android::nfc::cardemulation::AidRoutingManagerProto(*from.routing_manager_);
  } else {
    routing_manager_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.RegisteredAidCacheProto)
}

void RegisteredAidCacheProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisteredAidCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  ::memset(&preferred_foreground_service_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&routing_manager_) -
      reinterpret_cast<char*>(&preferred_foreground_service_)) + sizeof(routing_manager_));
}

RegisteredAidCacheProto::~RegisteredAidCacheProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  SharedDtor();
}

void RegisteredAidCacheProto::SharedDtor() {
  if (this != internal_default_instance()) delete preferred_foreground_service_;
  if (this != internal_default_instance()) delete preferred_payment_service_;
  if (this != internal_default_instance()) delete routing_manager_;
}

void RegisteredAidCacheProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisteredAidCacheProto& RegisteredAidCacheProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisteredAidCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void RegisteredAidCacheProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aid_cache_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preferred_foreground_service_ != nullptr);
      preferred_foreground_service_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(preferred_payment_service_ != nullptr);
      preferred_payment_service_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(routing_manager_ != nullptr);
      routing_manager_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisteredAidCacheProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry aid_cache_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_aid_cache_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto preferred_foreground_service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_preferred_foreground_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto preferred_payment_service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_preferred_payment_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.AidRoutingManagerProto routing_manager = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_routing_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisteredAidCacheProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry aid_cache_entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_aid_cache_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto preferred_foreground_service = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preferred_foreground_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto preferred_payment_service = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preferred_payment_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.AidRoutingManagerProto routing_manager = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_routing_manager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisteredAidCacheProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry aid_cache_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aid_cache_entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->aid_cache_entries(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto preferred_foreground_service = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::preferred_foreground_service(this), output);
  }

  // optional .android.content.ComponentNameProto preferred_payment_service = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::preferred_payment_service(this), output);
  }

  // optional .com.android.nfc.cardemulation.AidRoutingManagerProto routing_manager = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::routing_manager(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.RegisteredAidCacheProto)
}

size_t RegisteredAidCacheProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.nfc.cardemulation.RegisteredAidCacheProto.AidCacheEntry aid_cache_entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->aid_cache_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->aid_cache_entries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.content.ComponentNameProto preferred_foreground_service = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferred_foreground_service_);
    }

    // optional .android.content.ComponentNameProto preferred_payment_service = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferred_payment_service_);
    }

    // optional .com.android.nfc.cardemulation.AidRoutingManagerProto routing_manager = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_manager_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisteredAidCacheProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RegisteredAidCacheProto*>(
      &from));
}

void RegisteredAidCacheProto::MergeFrom(const RegisteredAidCacheProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aid_cache_entries_.MergeFrom(from.aid_cache_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_preferred_foreground_service()->::android::content::ComponentNameProto::MergeFrom(from.preferred_foreground_service());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_preferred_payment_service()->::android::content::ComponentNameProto::MergeFrom(from.preferred_payment_service());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_routing_manager()->::com::android::nfc::cardemulation::AidRoutingManagerProto::MergeFrom(from.routing_manager());
    }
  }
}

void RegisteredAidCacheProto::CopyFrom(const RegisteredAidCacheProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.RegisteredAidCacheProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredAidCacheProto::IsInitialized() const {
  return true;
}

void RegisteredAidCacheProto::InternalSwap(RegisteredAidCacheProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&aid_cache_entries_)->InternalSwap(CastToBase(&other->aid_cache_entries_));
  swap(preferred_foreground_service_, other->preferred_foreground_service_);
  swap(preferred_payment_service_, other->preferred_payment_service_);
  swap(routing_manager_, other->routing_manager_);
}

std::string RegisteredAidCacheProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.RegisteredAidCacheProto";
}


// ===================================================================

void AidRoutingManagerProto_Route::InitAsDefaultInstance() {
}
class AidRoutingManagerProto_Route::_Internal {
 public:
  using HasBits = decltype(std::declval<AidRoutingManagerProto_Route>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AidRoutingManagerProto_Route::AidRoutingManagerProto_Route()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
}
AidRoutingManagerProto_Route::AidRoutingManagerProto_Route(const AidRoutingManagerProto_Route& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      aids_(from.aids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
}

void AidRoutingManagerProto_Route::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AidRoutingManagerProto_Route_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  id_ = 0;
}

AidRoutingManagerProto_Route::~AidRoutingManagerProto_Route() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  SharedDtor();
}

void AidRoutingManagerProto_Route::SharedDtor() {
}

void AidRoutingManagerProto_Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AidRoutingManagerProto_Route& AidRoutingManagerProto_Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AidRoutingManagerProto_Route_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void AidRoutingManagerProto_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aids_.Clear();
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AidRoutingManagerProto_Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aids = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_aids(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AidRoutingManagerProto_Route::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aids = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AidRoutingManagerProto_Route::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated string aids = 2 [(.android.privacy) = {
  for (int i = 0, n = this->aids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->aids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
}

size_t AidRoutingManagerProto_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aids = 2 [(.android.privacy) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aids_size());
  for (int i = 0, n = this->aids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aids(i));
  }

  // optional int32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AidRoutingManagerProto_Route::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AidRoutingManagerProto_Route*>(
      &from));
}

void AidRoutingManagerProto_Route::MergeFrom(const AidRoutingManagerProto_Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aids_.MergeFrom(from.aids_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void AidRoutingManagerProto_Route::CopyFrom(const AidRoutingManagerProto_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.AidRoutingManagerProto.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AidRoutingManagerProto_Route::IsInitialized() const {
  return true;
}

void AidRoutingManagerProto_Route::InternalSwap(AidRoutingManagerProto_Route* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  aids_.InternalSwap(CastToBase(&other->aids_));
  swap(id_, other->id_);
}

std::string AidRoutingManagerProto_Route::GetTypeName() const {
  return "com.android.nfc.cardemulation.AidRoutingManagerProto.Route";
}


// ===================================================================

void AidRoutingManagerProto::InitAsDefaultInstance() {
}
class AidRoutingManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AidRoutingManagerProto>()._has_bits_);
  static void set_has_default_route(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AidRoutingManagerProto::AidRoutingManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.AidRoutingManagerProto)
}
AidRoutingManagerProto::AidRoutingManagerProto(const AidRoutingManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  default_route_ = from.default_route_;
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.AidRoutingManagerProto)
}

void AidRoutingManagerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AidRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  default_route_ = 0;
}

AidRoutingManagerProto::~AidRoutingManagerProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.AidRoutingManagerProto)
  SharedDtor();
}

void AidRoutingManagerProto::SharedDtor() {
}

void AidRoutingManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AidRoutingManagerProto& AidRoutingManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AidRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void AidRoutingManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.AidRoutingManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  default_route_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AidRoutingManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 default_route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_default_route(&has_bits);
          default_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.nfc.cardemulation.AidRoutingManagerProto.Route routes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AidRoutingManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.AidRoutingManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 default_route = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_default_route(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_route_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.nfc.cardemulation.AidRoutingManagerProto.Route routes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.AidRoutingManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.AidRoutingManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AidRoutingManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.AidRoutingManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 default_route = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->default_route(), output);
  }

  // repeated .com.android.nfc.cardemulation.AidRoutingManagerProto.Route routes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->routes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.AidRoutingManagerProto)
}

size_t AidRoutingManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.AidRoutingManagerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.nfc.cardemulation.AidRoutingManagerProto.Route routes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->routes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->routes(static_cast<int>(i)));
    }
  }

  // optional int32 default_route = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->default_route());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AidRoutingManagerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AidRoutingManagerProto*>(
      &from));
}

void AidRoutingManagerProto::MergeFrom(const AidRoutingManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.AidRoutingManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  if (from.has_default_route()) {
    set_default_route(from.default_route());
  }
}

void AidRoutingManagerProto::CopyFrom(const AidRoutingManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.AidRoutingManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AidRoutingManagerProto::IsInitialized() const {
  return true;
}

void AidRoutingManagerProto::InternalSwap(AidRoutingManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&routes_)->InternalSwap(CastToBase(&other->routes_));
  swap(default_route_, other->default_route_);
}

std::string AidRoutingManagerProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.AidRoutingManagerProto";
}


// ===================================================================

void RegisteredT3tIdentifiersCacheProto::InitAsDefaultInstance() {
  ::com::android::nfc::cardemulation::_RegisteredT3tIdentifiersCacheProto_default_instance_._instance.get_mutable()->routing_manager_ = const_cast< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto*>(
      ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto::internal_default_instance());
}
class RegisteredT3tIdentifiersCacheProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisteredT3tIdentifiersCacheProto>()._has_bits_);
  static const ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto& routing_manager(const RegisteredT3tIdentifiersCacheProto* msg);
  static void set_has_routing_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto&
RegisteredT3tIdentifiersCacheProto::_Internal::routing_manager(const RegisteredT3tIdentifiersCacheProto* msg) {
  return *msg->routing_manager_;
}
void RegisteredT3tIdentifiersCacheProto::clear_t3t_identifier_cache_entries() {
  t3t_identifier_cache_entries_.Clear();
}
RegisteredT3tIdentifiersCacheProto::RegisteredT3tIdentifiersCacheProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
}
RegisteredT3tIdentifiersCacheProto::RegisteredT3tIdentifiersCacheProto(const RegisteredT3tIdentifiersCacheProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      t3t_identifier_cache_entries_(from.t3t_identifier_cache_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_routing_manager()) {
    routing_manager_ = new ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto(*from.routing_manager_);
  } else {
    routing_manager_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
}

void RegisteredT3tIdentifiersCacheProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisteredT3tIdentifiersCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  routing_manager_ = nullptr;
}

RegisteredT3tIdentifiersCacheProto::~RegisteredT3tIdentifiersCacheProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  SharedDtor();
}

void RegisteredT3tIdentifiersCacheProto::SharedDtor() {
  if (this != internal_default_instance()) delete routing_manager_;
}

void RegisteredT3tIdentifiersCacheProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisteredT3tIdentifiersCacheProto& RegisteredT3tIdentifiersCacheProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisteredT3tIdentifiersCacheProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void RegisteredT3tIdentifiersCacheProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t3t_identifier_cache_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(routing_manager_ != nullptr);
    routing_manager_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisteredT3tIdentifiersCacheProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.nfc.cardemulation.NfcFServiceInfoProto t3t_identifier_cache_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_t3t_identifier_cache_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto routing_manager = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_routing_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisteredT3tIdentifiersCacheProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.nfc.cardemulation.NfcFServiceInfoProto t3t_identifier_cache_entries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_t3t_identifier_cache_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto routing_manager = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_routing_manager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisteredT3tIdentifiersCacheProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.nfc.cardemulation.NfcFServiceInfoProto t3t_identifier_cache_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->t3t_identifier_cache_entries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->t3t_identifier_cache_entries(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto routing_manager = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::routing_manager(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
}

size_t RegisteredT3tIdentifiersCacheProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.nfc.cardemulation.NfcFServiceInfoProto t3t_identifier_cache_entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->t3t_identifier_cache_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->t3t_identifier_cache_entries(static_cast<int>(i)));
    }
  }

  // optional .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto routing_manager = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_manager_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisteredT3tIdentifiersCacheProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RegisteredT3tIdentifiersCacheProto*>(
      &from));
}

void RegisteredT3tIdentifiersCacheProto::MergeFrom(const RegisteredT3tIdentifiersCacheProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t3t_identifier_cache_entries_.MergeFrom(from.t3t_identifier_cache_entries_);
  if (from.has_routing_manager()) {
    mutable_routing_manager()->::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto::MergeFrom(from.routing_manager());
  }
}

void RegisteredT3tIdentifiersCacheProto::CopyFrom(const RegisteredT3tIdentifiersCacheProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredT3tIdentifiersCacheProto::IsInitialized() const {
  return true;
}

void RegisteredT3tIdentifiersCacheProto::InternalSwap(RegisteredT3tIdentifiersCacheProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&t3t_identifier_cache_entries_)->InternalSwap(CastToBase(&other->t3t_identifier_cache_entries_));
  swap(routing_manager_, other->routing_manager_);
}

std::string RegisteredT3tIdentifiersCacheProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.RegisteredT3tIdentifiersCacheProto";
}


// ===================================================================

void SystemCodeRoutingManagerProto_T3tIdentifier::InitAsDefaultInstance() {
}
class SystemCodeRoutingManagerProto_T3tIdentifier::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemCodeRoutingManagerProto_T3tIdentifier>()._has_bits_);
  static void set_has_system_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nfcid2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SystemCodeRoutingManagerProto_T3tIdentifier::SystemCodeRoutingManagerProto_T3tIdentifier()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
}
SystemCodeRoutingManagerProto_T3tIdentifier::SystemCodeRoutingManagerProto_T3tIdentifier(const SystemCodeRoutingManagerProto_T3tIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_code()) {
    system_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_code_);
  }
  nfcid2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_nfcid2()) {
    nfcid2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nfcid2_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
}

void SystemCodeRoutingManagerProto_T3tIdentifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemCodeRoutingManagerProto_T3tIdentifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  system_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nfcid2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SystemCodeRoutingManagerProto_T3tIdentifier::~SystemCodeRoutingManagerProto_T3tIdentifier() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  SharedDtor();
}

void SystemCodeRoutingManagerProto_T3tIdentifier::SharedDtor() {
  system_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nfcid2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemCodeRoutingManagerProto_T3tIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemCodeRoutingManagerProto_T3tIdentifier& SystemCodeRoutingManagerProto_T3tIdentifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemCodeRoutingManagerProto_T3tIdentifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void SystemCodeRoutingManagerProto_T3tIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      system_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      nfcid2_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemCodeRoutingManagerProto_T3tIdentifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string system_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_system_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string nfcid2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_nfcid2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemCodeRoutingManagerProto_T3tIdentifier::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string system_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_system_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nfcid2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_nfcid2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemCodeRoutingManagerProto_T3tIdentifier::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string system_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system_code(), output);
  }

  // optional string nfcid2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nfcid2(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
}

size_t SystemCodeRoutingManagerProto_T3tIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string system_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->system_code());
    }

    // optional string nfcid2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->nfcid2());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemCodeRoutingManagerProto_T3tIdentifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemCodeRoutingManagerProto_T3tIdentifier*>(
      &from));
}

void SystemCodeRoutingManagerProto_T3tIdentifier::MergeFrom(const SystemCodeRoutingManagerProto_T3tIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      system_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      nfcid2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nfcid2_);
    }
  }
}

void SystemCodeRoutingManagerProto_T3tIdentifier::CopyFrom(const SystemCodeRoutingManagerProto_T3tIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemCodeRoutingManagerProto_T3tIdentifier::IsInitialized() const {
  return true;
}

void SystemCodeRoutingManagerProto_T3tIdentifier::InternalSwap(SystemCodeRoutingManagerProto_T3tIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  system_code_.Swap(&other->system_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nfcid2_.Swap(&other->nfcid2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string SystemCodeRoutingManagerProto_T3tIdentifier::GetTypeName() const {
  return "com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier";
}


// ===================================================================

void SystemCodeRoutingManagerProto::InitAsDefaultInstance() {
}
class SystemCodeRoutingManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemCodeRoutingManagerProto>()._has_bits_);
};

SystemCodeRoutingManagerProto::SystemCodeRoutingManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
}
SystemCodeRoutingManagerProto::SystemCodeRoutingManagerProto(const SystemCodeRoutingManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      t3t_identifiers_(from.t3t_identifiers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
}

void SystemCodeRoutingManagerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemCodeRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
}

SystemCodeRoutingManagerProto::~SystemCodeRoutingManagerProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  SharedDtor();
}

void SystemCodeRoutingManagerProto::SharedDtor() {
}

void SystemCodeRoutingManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemCodeRoutingManagerProto& SystemCodeRoutingManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemCodeRoutingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void SystemCodeRoutingManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  t3t_identifiers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemCodeRoutingManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier t3t_identifiers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_t3t_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemCodeRoutingManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier t3t_identifiers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_t3t_identifiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemCodeRoutingManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier t3t_identifiers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->t3t_identifiers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->t3t_identifiers(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
}

size_t SystemCodeRoutingManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.nfc.cardemulation.SystemCodeRoutingManagerProto.T3tIdentifier t3t_identifiers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->t3t_identifiers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->t3t_identifiers(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemCodeRoutingManagerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemCodeRoutingManagerProto*>(
      &from));
}

void SystemCodeRoutingManagerProto::MergeFrom(const SystemCodeRoutingManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  t3t_identifiers_.MergeFrom(from.t3t_identifiers_);
}

void SystemCodeRoutingManagerProto::CopyFrom(const SystemCodeRoutingManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.SystemCodeRoutingManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemCodeRoutingManagerProto::IsInitialized() const {
  return true;
}

void SystemCodeRoutingManagerProto::InternalSwap(SystemCodeRoutingManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&t3t_identifiers_)->InternalSwap(CastToBase(&other->t3t_identifiers_));
}

std::string SystemCodeRoutingManagerProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.SystemCodeRoutingManagerProto";
}


// ===================================================================

void HostEmulationManagerProto::InitAsDefaultInstance() {
  ::com::android::nfc::cardemulation::_HostEmulationManagerProto_default_instance_._instance.get_mutable()->payment_service_name_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
  ::com::android::nfc::cardemulation::_HostEmulationManagerProto_default_instance_._instance.get_mutable()->service_name_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
}
class HostEmulationManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<HostEmulationManagerProto>()._has_bits_);
  static const ::android::content::ComponentNameProto& payment_service_name(const HostEmulationManagerProto* msg);
  static void set_has_payment_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::content::ComponentNameProto& service_name(const HostEmulationManagerProto* msg);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::content::ComponentNameProto&
HostEmulationManagerProto::_Internal::payment_service_name(const HostEmulationManagerProto* msg) {
  return *msg->payment_service_name_;
}
const ::android::content::ComponentNameProto&
HostEmulationManagerProto::_Internal::service_name(const HostEmulationManagerProto* msg) {
  return *msg->service_name_;
}
void HostEmulationManagerProto::clear_payment_service_name() {
  if (payment_service_name_ != nullptr) payment_service_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void HostEmulationManagerProto::clear_service_name() {
  if (service_name_ != nullptr) service_name_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
HostEmulationManagerProto::HostEmulationManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.HostEmulationManagerProto)
}
HostEmulationManagerProto::HostEmulationManagerProto(const HostEmulationManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payment_service_name()) {
    payment_service_name_ = new ::android::content::ComponentNameProto(*from.payment_service_name_);
  } else {
    payment_service_name_ = nullptr;
  }
  if (from.has_service_name()) {
    service_name_ = new ::android::content::ComponentNameProto(*from.service_name_);
  } else {
    service_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.HostEmulationManagerProto)
}

void HostEmulationManagerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  ::memset(&payment_service_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_name_) -
      reinterpret_cast<char*>(&payment_service_name_)) + sizeof(service_name_));
}

HostEmulationManagerProto::~HostEmulationManagerProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.HostEmulationManagerProto)
  SharedDtor();
}

void HostEmulationManagerProto::SharedDtor() {
  if (this != internal_default_instance()) delete payment_service_name_;
  if (this != internal_default_instance()) delete service_name_;
}

void HostEmulationManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostEmulationManagerProto& HostEmulationManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void HostEmulationManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.HostEmulationManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(payment_service_name_ != nullptr);
      payment_service_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(service_name_ != nullptr);
      service_name_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostEmulationManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ComponentNameProto payment_service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_payment_service_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ComponentNameProto service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_service_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostEmulationManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.HostEmulationManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ComponentNameProto payment_service_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_payment_service_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ComponentNameProto service_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.HostEmulationManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.HostEmulationManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostEmulationManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.HostEmulationManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto payment_service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::payment_service_name(this), output);
  }

  // optional .android.content.ComponentNameProto service_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::service_name(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.HostEmulationManagerProto)
}

size_t HostEmulationManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.HostEmulationManagerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.content.ComponentNameProto payment_service_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payment_service_name_);
    }

    // optional .android.content.ComponentNameProto service_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_name_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostEmulationManagerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HostEmulationManagerProto*>(
      &from));
}

void HostEmulationManagerProto::MergeFrom(const HostEmulationManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.HostEmulationManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_payment_service_name()->::android::content::ComponentNameProto::MergeFrom(from.payment_service_name());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_service_name()->::android::content::ComponentNameProto::MergeFrom(from.service_name());
    }
  }
}

void HostEmulationManagerProto::CopyFrom(const HostEmulationManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.HostEmulationManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostEmulationManagerProto::IsInitialized() const {
  return true;
}

void HostEmulationManagerProto::InternalSwap(HostEmulationManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(payment_service_name_, other->payment_service_name_);
  swap(service_name_, other->service_name_);
}

std::string HostEmulationManagerProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.HostEmulationManagerProto";
}


// ===================================================================

void HostNfcFEmulationManagerProto::InitAsDefaultInstance() {
  ::com::android::nfc::cardemulation::_HostNfcFEmulationManagerProto_default_instance_._instance.get_mutable()->service_name_ = const_cast< ::android::content::ComponentNameProto*>(
      ::android::content::ComponentNameProto::internal_default_instance());
}
class HostNfcFEmulationManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<HostNfcFEmulationManagerProto>()._has_bits_);
  static const ::android::content::ComponentNameProto& service_name(const HostNfcFEmulationManagerProto* msg);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::content::ComponentNameProto&
HostNfcFEmulationManagerProto::_Internal::service_name(const HostNfcFEmulationManagerProto* msg) {
  return *msg->service_name_;
}
void HostNfcFEmulationManagerProto::clear_service_name() {
  if (service_name_ != nullptr) service_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HostNfcFEmulationManagerProto::HostNfcFEmulationManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
}
HostNfcFEmulationManagerProto::HostNfcFEmulationManagerProto(const HostNfcFEmulationManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service_name()) {
    service_name_ = new ::android::content::ComponentNameProto(*from.service_name_);
  } else {
    service_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
}

void HostNfcFEmulationManagerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostNfcFEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  service_name_ = nullptr;
}

HostNfcFEmulationManagerProto::~HostNfcFEmulationManagerProto() {
  // @@protoc_insertion_point(destructor:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  SharedDtor();
}

void HostNfcFEmulationManagerProto::SharedDtor() {
  if (this != internal_default_instance()) delete service_name_;
}

void HostNfcFEmulationManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostNfcFEmulationManagerProto& HostNfcFEmulationManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostNfcFEmulationManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fnfc_2fcard_5femulation_2eproto.base);
  return *internal_default_instance();
}


void HostNfcFEmulationManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(service_name_ != nullptr);
    service_name_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostNfcFEmulationManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ComponentNameProto service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_service_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostNfcFEmulationManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ComponentNameProto service_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostNfcFEmulationManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ComponentNameProto service_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::service_name(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
}

size_t HostNfcFEmulationManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.content.ComponentNameProto service_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_name_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostNfcFEmulationManagerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HostNfcFEmulationManagerProto*>(
      &from));
}

void HostNfcFEmulationManagerProto::MergeFrom(const HostNfcFEmulationManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_service_name()) {
    mutable_service_name()->::android::content::ComponentNameProto::MergeFrom(from.service_name());
  }
}

void HostNfcFEmulationManagerProto::CopyFrom(const HostNfcFEmulationManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.nfc.cardemulation.HostNfcFEmulationManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostNfcFEmulationManagerProto::IsInitialized() const {
  return true;
}

void HostNfcFEmulationManagerProto::InternalSwap(HostNfcFEmulationManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(service_name_, other->service_name_);
}

std::string HostNfcFEmulationManagerProto::GetTypeName() const {
  return "com.android.nfc.cardemulation.HostNfcFEmulationManagerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace cardemulation
}  // namespace nfc
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::CardEmulationManagerProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::CardEmulationManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::CardEmulationManagerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::RegisteredServicesCacheProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::RegisteredServicesCacheProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::RegisteredServicesCacheProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::RegisteredNfcFServicesCacheProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::PreferredServicesProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::PreferredServicesProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::PreferredServicesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::EnabledNfcFServicesProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::EnabledNfcFServicesProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::EnabledNfcFServicesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::RegisteredAidCacheProto_AidCacheEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::RegisteredAidCacheProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::RegisteredAidCacheProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::RegisteredAidCacheProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::AidRoutingManagerProto_Route >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::AidRoutingManagerProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::AidRoutingManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::AidRoutingManagerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::RegisteredT3tIdentifiersCacheProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto_T3tIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::SystemCodeRoutingManagerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::HostEmulationManagerProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::HostEmulationManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::HostEmulationManagerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto* Arena::CreateMaybeMessage< ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::nfc::cardemulation::HostNfcFEmulationManagerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
