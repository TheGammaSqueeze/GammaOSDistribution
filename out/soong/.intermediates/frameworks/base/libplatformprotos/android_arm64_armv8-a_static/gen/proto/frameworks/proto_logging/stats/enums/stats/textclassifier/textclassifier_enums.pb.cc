// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/textclassifier/textclassifier_enums.proto

#include "frameworks/proto_logging/stats/enums/stats/textclassifier/textclassifier_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace textclassifier {
}  // namespace textclassifier
}  // namespace stats
}  // namespace android
namespace android {
namespace stats {
namespace textclassifier {
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EventType_strings[23] = {};

static const char EventType_names[] =
  "ACTIONS_GENERATED"
  "ACTIONS_SHOWN"
  "AUTO_SELECTION"
  "COPY_ACTION"
  "CUT_ACTION"
  "LINKS_GENERATED"
  "LINK_CLICKED"
  "MANUAL_REPLY"
  "OTHER_ACTION"
  "OVERTYPE"
  "PASTE_ACTION"
  "READ_CLIPBOARD"
  "SELECTION_DESTROYED"
  "SELECTION_DRAG"
  "SELECTION_MODIFIED"
  "SELECTION_RESET"
  "SELECTION_STARTED"
  "SELECT_ALL"
  "SHARE_ACTION"
  "SMART_ACTION"
  "SMART_SELECTION_MULTI"
  "SMART_SELECTION_SINGLE"
  "TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EventType_entries[] = {
  { {EventType_names + 0, 17}, 20 },
  { {EventType_names + 17, 13}, 6 },
  { {EventType_names + 30, 14}, 5 },
  { {EventType_names + 44, 11}, 9 },
  { {EventType_names + 55, 10}, 11 },
  { {EventType_names + 65, 15}, 21 },
  { {EventType_names + 80, 12}, 7 },
  { {EventType_names + 92, 12}, 19 },
  { {EventType_names + 104, 12}, 16 },
  { {EventType_names + 116, 8}, 8 },
  { {EventType_names + 124, 12}, 10 },
  { {EventType_names + 136, 14}, 22 },
  { {EventType_names + 150, 19}, 15 },
  { {EventType_names + 169, 14}, 14 },
  { {EventType_names + 183, 18}, 2 },
  { {EventType_names + 201, 15}, 18 },
  { {EventType_names + 216, 17}, 1 },
  { {EventType_names + 233, 10}, 17 },
  { {EventType_names + 243, 12}, 12 },
  { {EventType_names + 255, 12}, 13 },
  { {EventType_names + 267, 21}, 4 },
  { {EventType_names + 288, 22}, 3 },
  { {EventType_names + 310, 12}, 0 },
};

static const int EventType_entries_by_number[] = {
  22, // 0 -> TYPE_UNKNOWN
  16, // 1 -> SELECTION_STARTED
  14, // 2 -> SELECTION_MODIFIED
  21, // 3 -> SMART_SELECTION_SINGLE
  20, // 4 -> SMART_SELECTION_MULTI
  2, // 5 -> AUTO_SELECTION
  1, // 6 -> ACTIONS_SHOWN
  6, // 7 -> LINK_CLICKED
  9, // 8 -> OVERTYPE
  3, // 9 -> COPY_ACTION
  10, // 10 -> PASTE_ACTION
  4, // 11 -> CUT_ACTION
  18, // 12 -> SHARE_ACTION
  19, // 13 -> SMART_ACTION
  13, // 14 -> SELECTION_DRAG
  12, // 15 -> SELECTION_DESTROYED
  8, // 16 -> OTHER_ACTION
  17, // 17 -> SELECT_ALL
  15, // 18 -> SELECTION_RESET
  7, // 19 -> MANUAL_REPLY
  0, // 20 -> ACTIONS_GENERATED
  5, // 21 -> LINKS_GENERATED
  11, // 22 -> READ_CLIPBOARD
};

const std::string& EventType_Name(
    EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EventType_entries,
          EventType_entries_by_number,
          23, EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EventType_entries,
      EventType_entries_by_number,
      23, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EventType_strings[idx].get();
}
bool EventType_Parse(
    const std::string& name, EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EventType_entries, 23, name, &int_value);
  if (success) {
    *value = static_cast<EventType>(int_value);
  }
  return success;
}
bool WidgetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WidgetType_strings[11] = {};

static const char WidgetType_names[] =
  "WIDGET_TYPE_CLIPBOARD"
  "WIDGET_TYPE_CUSTOM_EDITTEXT"
  "WIDGET_TYPE_CUSTOM_TEXTVIEW"
  "WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW"
  "WIDGET_TYPE_EDITTEXT"
  "WIDGET_TYPE_EDIT_WEBVIEW"
  "WIDGET_TYPE_NOTIFICATION"
  "WIDGET_TYPE_TEXTVIEW"
  "WIDGET_TYPE_UNKNOWN"
  "WIDGET_TYPE_UNSELECTABLE_TEXTVIEW"
  "WIDGET_TYPE_WEBVIEW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WidgetType_entries[] = {
  { {WidgetType_names + 0, 21}, 10 },
  { {WidgetType_names + 21, 27}, 7 },
  { {WidgetType_names + 48, 27}, 6 },
  { {WidgetType_names + 75, 40}, 8 },
  { {WidgetType_names + 115, 20}, 2 },
  { {WidgetType_names + 135, 24}, 5 },
  { {WidgetType_names + 159, 24}, 9 },
  { {WidgetType_names + 183, 20}, 1 },
  { {WidgetType_names + 203, 19}, 0 },
  { {WidgetType_names + 222, 33}, 3 },
  { {WidgetType_names + 255, 19}, 4 },
};

static const int WidgetType_entries_by_number[] = {
  8, // 0 -> WIDGET_TYPE_UNKNOWN
  7, // 1 -> WIDGET_TYPE_TEXTVIEW
  4, // 2 -> WIDGET_TYPE_EDITTEXT
  9, // 3 -> WIDGET_TYPE_UNSELECTABLE_TEXTVIEW
  10, // 4 -> WIDGET_TYPE_WEBVIEW
  5, // 5 -> WIDGET_TYPE_EDIT_WEBVIEW
  2, // 6 -> WIDGET_TYPE_CUSTOM_TEXTVIEW
  1, // 7 -> WIDGET_TYPE_CUSTOM_EDITTEXT
  3, // 8 -> WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW
  6, // 9 -> WIDGET_TYPE_NOTIFICATION
  0, // 10 -> WIDGET_TYPE_CLIPBOARD
};

const std::string& WidgetType_Name(
    WidgetType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WidgetType_entries,
          WidgetType_entries_by_number,
          11, WidgetType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WidgetType_entries,
      WidgetType_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WidgetType_strings[idx].get();
}
bool WidgetType_Parse(
    const std::string& name, WidgetType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WidgetType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<WidgetType>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace textclassifier
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
