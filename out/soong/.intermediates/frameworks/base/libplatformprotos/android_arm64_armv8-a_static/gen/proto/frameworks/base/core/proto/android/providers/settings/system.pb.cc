// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/providers/settings/system.proto

#include "frameworks/base/core/proto/android/providers/settings/system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingsOperationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_DevOptions_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_DtmfTone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_HapticFeedback_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Lockscreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Ringtone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Screen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Sip_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Text_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Vibrate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
namespace android {
namespace providers {
namespace settings {
class SystemSettingsProto_AlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Alarm> _instance;
} _SystemSettingsProto_Alarm_default_instance_;
class SystemSettingsProto_BluetoothDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Bluetooth> _instance;
} _SystemSettingsProto_Bluetooth_default_instance_;
class SystemSettingsProto_DevOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_DevOptions> _instance;
} _SystemSettingsProto_DevOptions_default_instance_;
class SystemSettingsProto_DtmfToneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_DtmfTone> _instance;
} _SystemSettingsProto_DtmfTone_default_instance_;
class SystemSettingsProto_HapticFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_HapticFeedback> _instance;
} _SystemSettingsProto_HapticFeedback_default_instance_;
class SystemSettingsProto_LockscreenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Lockscreen> _instance;
} _SystemSettingsProto_Lockscreen_default_instance_;
class SystemSettingsProto_NotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Notification> _instance;
} _SystemSettingsProto_Notification_default_instance_;
class SystemSettingsProto_RingtoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Ringtone> _instance;
} _SystemSettingsProto_Ringtone_default_instance_;
class SystemSettingsProto_RotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Rotation> _instance;
} _SystemSettingsProto_Rotation_default_instance_;
class SystemSettingsProto_ScreenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Screen> _instance;
} _SystemSettingsProto_Screen_default_instance_;
class SystemSettingsProto_SipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Sip> _instance;
} _SystemSettingsProto_Sip_default_instance_;
class SystemSettingsProto_TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Text> _instance;
} _SystemSettingsProto_Text_default_instance_;
class SystemSettingsProto_VibrateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Vibrate> _instance;
} _SystemSettingsProto_Vibrate_default_instance_;
class SystemSettingsProto_VolumeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto_Volume> _instance;
} _SystemSettingsProto_Volume_default_instance_;
class SystemSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemSettingsProto> _instance;
} _SystemSettingsProto_default_instance_;
}  // namespace settings
}  // namespace providers
}  // namespace android
static void InitDefaultsscc_info_SystemSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_SystemSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 16, InitDefaultsscc_info_SystemSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingsOperationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,
      &scc_info_SystemSettingsProto_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_DevOptions_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_DtmfTone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_HapticFeedback_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Lockscreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Ringtone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Screen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Sip_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Text_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Vibrate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,
      &scc_info_SystemSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Alarm_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Alarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Alarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Bluetooth_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Bluetooth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Bluetooth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_DevOptions_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_DevOptions_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_DevOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_DevOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_DevOptions_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_DevOptions_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_DtmfTone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_DtmfTone_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_DtmfTone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_DtmfTone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_DtmfTone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_DtmfTone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_HapticFeedback_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_HapticFeedback_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_HapticFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_HapticFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_HapticFeedback_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_HapticFeedback_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Lockscreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Lockscreen_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Lockscreen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Lockscreen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Lockscreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Lockscreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Notification_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Notification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Notification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Ringtone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Ringtone_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Ringtone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Ringtone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Ringtone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Ringtone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Rotation_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Rotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Rotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Screen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Screen_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Screen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Screen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Screen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Screen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Sip_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Sip_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Sip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Sip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Sip_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Sip_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Text_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Text_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Text_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Text_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Vibrate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Vibrate_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Vibrate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Vibrate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Vibrate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Vibrate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SystemSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SystemSettingsProto_Volume_default_instance_;
    new (ptr) ::android::providers::settings::SystemSettingsProto_Volume();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SystemSettingsProto_Volume::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

namespace android {
namespace providers {
namespace settings {

// ===================================================================

void SystemSettingsProto_Alarm::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Alarm_default_instance_._instance.get_mutable()->default_uri_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Alarm_default_instance_._instance.get_mutable()->alert_cache_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Alarm::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Alarm>()._has_bits_);
  static const ::android::providers::settings::SettingProto& default_uri(const SystemSettingsProto_Alarm* msg);
  static void set_has_default_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& alert_cache(const SystemSettingsProto_Alarm* msg);
  static void set_has_alert_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Alarm::_Internal::default_uri(const SystemSettingsProto_Alarm* msg) {
  return *msg->default_uri_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Alarm::_Internal::alert_cache(const SystemSettingsProto_Alarm* msg) {
  return *msg->alert_cache_;
}
void SystemSettingsProto_Alarm::clear_default_uri() {
  if (default_uri_ != nullptr) default_uri_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Alarm::clear_alert_cache() {
  if (alert_cache_ != nullptr) alert_cache_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SystemSettingsProto_Alarm::SystemSettingsProto_Alarm()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Alarm)
}
SystemSettingsProto_Alarm::SystemSettingsProto_Alarm(const SystemSettingsProto_Alarm& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_uri()) {
    default_uri_ = new ::android::providers::settings::SettingProto(*from.default_uri_);
  } else {
    default_uri_ = nullptr;
  }
  if (from.has_alert_cache()) {
    alert_cache_ = new ::android::providers::settings::SettingProto(*from.alert_cache_);
  } else {
    alert_cache_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Alarm)
}

void SystemSettingsProto_Alarm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&default_uri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alert_cache_) -
      reinterpret_cast<char*>(&default_uri_)) + sizeof(alert_cache_));
}

SystemSettingsProto_Alarm::~SystemSettingsProto_Alarm() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Alarm)
  SharedDtor();
}

void SystemSettingsProto_Alarm::SharedDtor() {
  if (this != internal_default_instance()) delete default_uri_;
  if (this != internal_default_instance()) delete alert_cache_;
}

void SystemSettingsProto_Alarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Alarm& SystemSettingsProto_Alarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Alarm::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_uri_ != nullptr);
      default_uri_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(alert_cache_ != nullptr);
      alert_cache_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Alarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto default_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_default_uri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto alert_cache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_alert_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Alarm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Alarm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto default_uri = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto alert_cache = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alert_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Alarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Alarm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Alarm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto default_uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::default_uri(this), output);
  }

  // optional .android.providers.settings.SettingProto alert_cache = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::alert_cache(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Alarm)
}

size_t SystemSettingsProto_Alarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Alarm)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto default_uri = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_uri_);
    }

    // optional .android.providers.settings.SettingProto alert_cache = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alert_cache_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Alarm::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Alarm*>(
      &from));
}

void SystemSettingsProto_Alarm::MergeFrom(const SystemSettingsProto_Alarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_uri()->::android::providers::settings::SettingProto::MergeFrom(from.default_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_alert_cache()->::android::providers::settings::SettingProto::MergeFrom(from.alert_cache());
    }
  }
}

void SystemSettingsProto_Alarm::CopyFrom(const SystemSettingsProto_Alarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Alarm::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Alarm::InternalSwap(SystemSettingsProto_Alarm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(default_uri_, other->default_uri_);
  swap(alert_cache_, other->alert_cache_);
}

std::string SystemSettingsProto_Alarm::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Alarm";
}


// ===================================================================

void SystemSettingsProto_Bluetooth::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Bluetooth_default_instance_._instance.get_mutable()->discoverability_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Bluetooth_default_instance_._instance.get_mutable()->discoverability_timeout_secs_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Bluetooth::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Bluetooth>()._has_bits_);
  static const ::android::providers::settings::SettingProto& discoverability(const SystemSettingsProto_Bluetooth* msg);
  static void set_has_discoverability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& discoverability_timeout_secs(const SystemSettingsProto_Bluetooth* msg);
  static void set_has_discoverability_timeout_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Bluetooth::_Internal::discoverability(const SystemSettingsProto_Bluetooth* msg) {
  return *msg->discoverability_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Bluetooth::_Internal::discoverability_timeout_secs(const SystemSettingsProto_Bluetooth* msg) {
  return *msg->discoverability_timeout_secs_;
}
void SystemSettingsProto_Bluetooth::clear_discoverability() {
  if (discoverability_ != nullptr) discoverability_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Bluetooth::clear_discoverability_timeout_secs() {
  if (discoverability_timeout_secs_ != nullptr) discoverability_timeout_secs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SystemSettingsProto_Bluetooth::SystemSettingsProto_Bluetooth()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Bluetooth)
}
SystemSettingsProto_Bluetooth::SystemSettingsProto_Bluetooth(const SystemSettingsProto_Bluetooth& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_discoverability()) {
    discoverability_ = new ::android::providers::settings::SettingProto(*from.discoverability_);
  } else {
    discoverability_ = nullptr;
  }
  if (from.has_discoverability_timeout_secs()) {
    discoverability_timeout_secs_ = new ::android::providers::settings::SettingProto(*from.discoverability_timeout_secs_);
  } else {
    discoverability_timeout_secs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Bluetooth)
}

void SystemSettingsProto_Bluetooth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&discoverability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discoverability_timeout_secs_) -
      reinterpret_cast<char*>(&discoverability_)) + sizeof(discoverability_timeout_secs_));
}

SystemSettingsProto_Bluetooth::~SystemSettingsProto_Bluetooth() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Bluetooth)
  SharedDtor();
}

void SystemSettingsProto_Bluetooth::SharedDtor() {
  if (this != internal_default_instance()) delete discoverability_;
  if (this != internal_default_instance()) delete discoverability_timeout_secs_;
}

void SystemSettingsProto_Bluetooth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Bluetooth& SystemSettingsProto_Bluetooth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Bluetooth::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Bluetooth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(discoverability_ != nullptr);
      discoverability_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(discoverability_timeout_secs_ != nullptr);
      discoverability_timeout_secs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Bluetooth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto discoverability = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_discoverability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto discoverability_timeout_secs = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_discoverability_timeout_secs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Bluetooth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Bluetooth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto discoverability = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_discoverability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto discoverability_timeout_secs = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_discoverability_timeout_secs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Bluetooth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Bluetooth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Bluetooth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Bluetooth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto discoverability = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::discoverability(this), output);
  }

  // optional .android.providers.settings.SettingProto discoverability_timeout_secs = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::discoverability_timeout_secs(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Bluetooth)
}

size_t SystemSettingsProto_Bluetooth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Bluetooth)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto discoverability = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *discoverability_);
    }

    // optional .android.providers.settings.SettingProto discoverability_timeout_secs = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *discoverability_timeout_secs_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Bluetooth::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Bluetooth*>(
      &from));
}

void SystemSettingsProto_Bluetooth::MergeFrom(const SystemSettingsProto_Bluetooth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Bluetooth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_discoverability()->::android::providers::settings::SettingProto::MergeFrom(from.discoverability());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_discoverability_timeout_secs()->::android::providers::settings::SettingProto::MergeFrom(from.discoverability_timeout_secs());
    }
  }
}

void SystemSettingsProto_Bluetooth::CopyFrom(const SystemSettingsProto_Bluetooth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Bluetooth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Bluetooth::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Bluetooth::InternalSwap(SystemSettingsProto_Bluetooth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(discoverability_, other->discoverability_);
  swap(discoverability_timeout_secs_, other->discoverability_timeout_secs_);
}

std::string SystemSettingsProto_Bluetooth::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Bluetooth";
}


// ===================================================================

void SystemSettingsProto_DevOptions::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_DevOptions_default_instance_._instance.get_mutable()->pointer_location_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_DevOptions_default_instance_._instance.get_mutable()->show_touches_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_DevOptions_default_instance_._instance.get_mutable()->window_orientation_listener_log_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_DevOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_DevOptions>()._has_bits_);
  static const ::android::providers::settings::SettingProto& pointer_location(const SystemSettingsProto_DevOptions* msg);
  static void set_has_pointer_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& show_touches(const SystemSettingsProto_DevOptions* msg);
  static void set_has_show_touches(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& window_orientation_listener_log(const SystemSettingsProto_DevOptions* msg);
  static void set_has_window_orientation_listener_log(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_DevOptions::_Internal::pointer_location(const SystemSettingsProto_DevOptions* msg) {
  return *msg->pointer_location_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_DevOptions::_Internal::show_touches(const SystemSettingsProto_DevOptions* msg) {
  return *msg->show_touches_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_DevOptions::_Internal::window_orientation_listener_log(const SystemSettingsProto_DevOptions* msg) {
  return *msg->window_orientation_listener_log_;
}
void SystemSettingsProto_DevOptions::clear_pointer_location() {
  if (pointer_location_ != nullptr) pointer_location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_DevOptions::clear_show_touches() {
  if (show_touches_ != nullptr) show_touches_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SystemSettingsProto_DevOptions::clear_window_orientation_listener_log() {
  if (window_orientation_listener_log_ != nullptr) window_orientation_listener_log_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SystemSettingsProto_DevOptions::SystemSettingsProto_DevOptions()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.DevOptions)
}
SystemSettingsProto_DevOptions::SystemSettingsProto_DevOptions(const SystemSettingsProto_DevOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pointer_location()) {
    pointer_location_ = new ::android::providers::settings::SettingProto(*from.pointer_location_);
  } else {
    pointer_location_ = nullptr;
  }
  if (from.has_show_touches()) {
    show_touches_ = new ::android::providers::settings::SettingProto(*from.show_touches_);
  } else {
    show_touches_ = nullptr;
  }
  if (from.has_window_orientation_listener_log()) {
    window_orientation_listener_log_ = new ::android::providers::settings::SettingProto(*from.window_orientation_listener_log_);
  } else {
    window_orientation_listener_log_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.DevOptions)
}

void SystemSettingsProto_DevOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_DevOptions_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&pointer_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_orientation_listener_log_) -
      reinterpret_cast<char*>(&pointer_location_)) + sizeof(window_orientation_listener_log_));
}

SystemSettingsProto_DevOptions::~SystemSettingsProto_DevOptions() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.DevOptions)
  SharedDtor();
}

void SystemSettingsProto_DevOptions::SharedDtor() {
  if (this != internal_default_instance()) delete pointer_location_;
  if (this != internal_default_instance()) delete show_touches_;
  if (this != internal_default_instance()) delete window_orientation_listener_log_;
}

void SystemSettingsProto_DevOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_DevOptions& SystemSettingsProto_DevOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_DevOptions_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_DevOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.DevOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pointer_location_ != nullptr);
      pointer_location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_touches_ != nullptr);
      show_touches_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(window_orientation_listener_log_ != nullptr);
      window_orientation_listener_log_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_DevOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto pointer_location = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pointer_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_touches = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_show_touches(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto window_orientation_listener_log = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_window_orientation_listener_log(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_DevOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.DevOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto pointer_location = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pointer_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_touches = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_touches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto window_orientation_listener_log = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_window_orientation_listener_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.DevOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.DevOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_DevOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.DevOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto pointer_location = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::pointer_location(this), output);
  }

  // optional .android.providers.settings.SettingProto show_touches = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::show_touches(this), output);
  }

  // optional .android.providers.settings.SettingProto window_orientation_listener_log = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::window_orientation_listener_log(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.DevOptions)
}

size_t SystemSettingsProto_DevOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.DevOptions)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto pointer_location = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pointer_location_);
    }

    // optional .android.providers.settings.SettingProto show_touches = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_touches_);
    }

    // optional .android.providers.settings.SettingProto window_orientation_listener_log = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_orientation_listener_log_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_DevOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_DevOptions*>(
      &from));
}

void SystemSettingsProto_DevOptions::MergeFrom(const SystemSettingsProto_DevOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.DevOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pointer_location()->::android::providers::settings::SettingProto::MergeFrom(from.pointer_location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_show_touches()->::android::providers::settings::SettingProto::MergeFrom(from.show_touches());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_window_orientation_listener_log()->::android::providers::settings::SettingProto::MergeFrom(from.window_orientation_listener_log());
    }
  }
}

void SystemSettingsProto_DevOptions::CopyFrom(const SystemSettingsProto_DevOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.DevOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_DevOptions::IsInitialized() const {
  return true;
}

void SystemSettingsProto_DevOptions::InternalSwap(SystemSettingsProto_DevOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pointer_location_, other->pointer_location_);
  swap(show_touches_, other->show_touches_);
  swap(window_orientation_listener_log_, other->window_orientation_listener_log_);
}

std::string SystemSettingsProto_DevOptions::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.DevOptions";
}


// ===================================================================

void SystemSettingsProto_DtmfTone::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_DtmfTone_default_instance_._instance.get_mutable()->play_when_dialing_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_DtmfTone_default_instance_._instance.get_mutable()->type_played_when_dialing_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_DtmfTone::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_DtmfTone>()._has_bits_);
  static const ::android::providers::settings::SettingProto& play_when_dialing(const SystemSettingsProto_DtmfTone* msg);
  static void set_has_play_when_dialing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& type_played_when_dialing(const SystemSettingsProto_DtmfTone* msg);
  static void set_has_type_played_when_dialing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_DtmfTone::_Internal::play_when_dialing(const SystemSettingsProto_DtmfTone* msg) {
  return *msg->play_when_dialing_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_DtmfTone::_Internal::type_played_when_dialing(const SystemSettingsProto_DtmfTone* msg) {
  return *msg->type_played_when_dialing_;
}
void SystemSettingsProto_DtmfTone::clear_play_when_dialing() {
  if (play_when_dialing_ != nullptr) play_when_dialing_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_DtmfTone::clear_type_played_when_dialing() {
  if (type_played_when_dialing_ != nullptr) type_played_when_dialing_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SystemSettingsProto_DtmfTone::SystemSettingsProto_DtmfTone()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.DtmfTone)
}
SystemSettingsProto_DtmfTone::SystemSettingsProto_DtmfTone(const SystemSettingsProto_DtmfTone& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_play_when_dialing()) {
    play_when_dialing_ = new ::android::providers::settings::SettingProto(*from.play_when_dialing_);
  } else {
    play_when_dialing_ = nullptr;
  }
  if (from.has_type_played_when_dialing()) {
    type_played_when_dialing_ = new ::android::providers::settings::SettingProto(*from.type_played_when_dialing_);
  } else {
    type_played_when_dialing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.DtmfTone)
}

void SystemSettingsProto_DtmfTone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_DtmfTone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&play_when_dialing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_played_when_dialing_) -
      reinterpret_cast<char*>(&play_when_dialing_)) + sizeof(type_played_when_dialing_));
}

SystemSettingsProto_DtmfTone::~SystemSettingsProto_DtmfTone() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.DtmfTone)
  SharedDtor();
}

void SystemSettingsProto_DtmfTone::SharedDtor() {
  if (this != internal_default_instance()) delete play_when_dialing_;
  if (this != internal_default_instance()) delete type_played_when_dialing_;
}

void SystemSettingsProto_DtmfTone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_DtmfTone& SystemSettingsProto_DtmfTone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_DtmfTone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_DtmfTone::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.DtmfTone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(play_when_dialing_ != nullptr);
      play_when_dialing_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_played_when_dialing_ != nullptr);
      type_played_when_dialing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_DtmfTone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto play_when_dialing = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_play_when_dialing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto type_played_when_dialing = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_type_played_when_dialing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_DtmfTone::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.DtmfTone)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto play_when_dialing = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_play_when_dialing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto type_played_when_dialing = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_type_played_when_dialing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.DtmfTone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.DtmfTone)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_DtmfTone::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.DtmfTone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto play_when_dialing = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::play_when_dialing(this), output);
  }

  // optional .android.providers.settings.SettingProto type_played_when_dialing = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::type_played_when_dialing(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.DtmfTone)
}

size_t SystemSettingsProto_DtmfTone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.DtmfTone)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto play_when_dialing = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *play_when_dialing_);
    }

    // optional .android.providers.settings.SettingProto type_played_when_dialing = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_played_when_dialing_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_DtmfTone::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_DtmfTone*>(
      &from));
}

void SystemSettingsProto_DtmfTone::MergeFrom(const SystemSettingsProto_DtmfTone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.DtmfTone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_play_when_dialing()->::android::providers::settings::SettingProto::MergeFrom(from.play_when_dialing());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_type_played_when_dialing()->::android::providers::settings::SettingProto::MergeFrom(from.type_played_when_dialing());
    }
  }
}

void SystemSettingsProto_DtmfTone::CopyFrom(const SystemSettingsProto_DtmfTone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.DtmfTone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_DtmfTone::IsInitialized() const {
  return true;
}

void SystemSettingsProto_DtmfTone::InternalSwap(SystemSettingsProto_DtmfTone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(play_when_dialing_, other->play_when_dialing_);
  swap(type_played_when_dialing_, other->type_played_when_dialing_);
}

std::string SystemSettingsProto_DtmfTone::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.DtmfTone";
}


// ===================================================================

void SystemSettingsProto_HapticFeedback::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_HapticFeedback_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_HapticFeedback_default_instance_._instance.get_mutable()->intensity_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_HapticFeedback::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_HapticFeedback>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SystemSettingsProto_HapticFeedback* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& intensity(const SystemSettingsProto_HapticFeedback* msg);
  static void set_has_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_HapticFeedback::_Internal::enabled(const SystemSettingsProto_HapticFeedback* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_HapticFeedback::_Internal::intensity(const SystemSettingsProto_HapticFeedback* msg) {
  return *msg->intensity_;
}
void SystemSettingsProto_HapticFeedback::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_HapticFeedback::clear_intensity() {
  if (intensity_ != nullptr) intensity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SystemSettingsProto_HapticFeedback::SystemSettingsProto_HapticFeedback()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.HapticFeedback)
}
SystemSettingsProto_HapticFeedback::SystemSettingsProto_HapticFeedback(const SystemSettingsProto_HapticFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_intensity()) {
    intensity_ = new ::android::providers::settings::SettingProto(*from.intensity_);
  } else {
    intensity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.HapticFeedback)
}

void SystemSettingsProto_HapticFeedback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_HapticFeedback_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(intensity_));
}

SystemSettingsProto_HapticFeedback::~SystemSettingsProto_HapticFeedback() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.HapticFeedback)
  SharedDtor();
}

void SystemSettingsProto_HapticFeedback::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete intensity_;
}

void SystemSettingsProto_HapticFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_HapticFeedback& SystemSettingsProto_HapticFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_HapticFeedback_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_HapticFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.HapticFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(intensity_ != nullptr);
      intensity_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_HapticFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto intensity = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_intensity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_HapticFeedback::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.HapticFeedback)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto intensity = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intensity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.HapticFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.HapticFeedback)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_HapticFeedback::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.HapticFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto intensity = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::intensity(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.HapticFeedback)
}

size_t SystemSettingsProto_HapticFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.HapticFeedback)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto intensity = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intensity_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_HapticFeedback::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_HapticFeedback*>(
      &from));
}

void SystemSettingsProto_HapticFeedback::MergeFrom(const SystemSettingsProto_HapticFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.HapticFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_intensity()->::android::providers::settings::SettingProto::MergeFrom(from.intensity());
    }
  }
}

void SystemSettingsProto_HapticFeedback::CopyFrom(const SystemSettingsProto_HapticFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.HapticFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_HapticFeedback::IsInitialized() const {
  return true;
}

void SystemSettingsProto_HapticFeedback::InternalSwap(SystemSettingsProto_HapticFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(intensity_, other->intensity_);
}

std::string SystemSettingsProto_HapticFeedback::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.HapticFeedback";
}


// ===================================================================

void SystemSettingsProto_Lockscreen::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Lockscreen_default_instance_._instance.get_mutable()->sounds_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Lockscreen_default_instance_._instance.get_mutable()->disabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Lockscreen::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Lockscreen>()._has_bits_);
  static const ::android::providers::settings::SettingProto& sounds_enabled(const SystemSettingsProto_Lockscreen* msg);
  static void set_has_sounds_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& disabled(const SystemSettingsProto_Lockscreen* msg);
  static void set_has_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Lockscreen::_Internal::sounds_enabled(const SystemSettingsProto_Lockscreen* msg) {
  return *msg->sounds_enabled_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Lockscreen::_Internal::disabled(const SystemSettingsProto_Lockscreen* msg) {
  return *msg->disabled_;
}
void SystemSettingsProto_Lockscreen::clear_sounds_enabled() {
  if (sounds_enabled_ != nullptr) sounds_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Lockscreen::clear_disabled() {
  if (disabled_ != nullptr) disabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SystemSettingsProto_Lockscreen::SystemSettingsProto_Lockscreen()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Lockscreen)
}
SystemSettingsProto_Lockscreen::SystemSettingsProto_Lockscreen(const SystemSettingsProto_Lockscreen& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sounds_enabled()) {
    sounds_enabled_ = new ::android::providers::settings::SettingProto(*from.sounds_enabled_);
  } else {
    sounds_enabled_ = nullptr;
  }
  if (from.has_disabled()) {
    disabled_ = new ::android::providers::settings::SettingProto(*from.disabled_);
  } else {
    disabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Lockscreen)
}

void SystemSettingsProto_Lockscreen::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Lockscreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&sounds_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&sounds_enabled_)) + sizeof(disabled_));
}

SystemSettingsProto_Lockscreen::~SystemSettingsProto_Lockscreen() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Lockscreen)
  SharedDtor();
}

void SystemSettingsProto_Lockscreen::SharedDtor() {
  if (this != internal_default_instance()) delete sounds_enabled_;
  if (this != internal_default_instance()) delete disabled_;
}

void SystemSettingsProto_Lockscreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Lockscreen& SystemSettingsProto_Lockscreen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Lockscreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Lockscreen::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Lockscreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sounds_enabled_ != nullptr);
      sounds_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disabled_ != nullptr);
      disabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Lockscreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto sounds_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sounds_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto disabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Lockscreen::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Lockscreen)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto sounds_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sounds_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto disabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Lockscreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Lockscreen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Lockscreen::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Lockscreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto sounds_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::sounds_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto disabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::disabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Lockscreen)
}

size_t SystemSettingsProto_Lockscreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Lockscreen)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto sounds_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sounds_enabled_);
    }

    // optional .android.providers.settings.SettingProto disabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Lockscreen::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Lockscreen*>(
      &from));
}

void SystemSettingsProto_Lockscreen::MergeFrom(const SystemSettingsProto_Lockscreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Lockscreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sounds_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.sounds_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_disabled()->::android::providers::settings::SettingProto::MergeFrom(from.disabled());
    }
  }
}

void SystemSettingsProto_Lockscreen::CopyFrom(const SystemSettingsProto_Lockscreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Lockscreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Lockscreen::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Lockscreen::InternalSwap(SystemSettingsProto_Lockscreen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sounds_enabled_, other->sounds_enabled_);
  swap(disabled_, other->disabled_);
}

std::string SystemSettingsProto_Lockscreen::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Lockscreen";
}


// ===================================================================

void SystemSettingsProto_Notification::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Notification_default_instance_._instance.get_mutable()->sound_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Notification_default_instance_._instance.get_mutable()->sound_cache_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Notification_default_instance_._instance.get_mutable()->light_pulse_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Notification_default_instance_._instance.get_mutable()->vibration_intensity_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Notification>()._has_bits_);
  static const ::android::providers::settings::SettingProto& sound(const SystemSettingsProto_Notification* msg);
  static void set_has_sound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& sound_cache(const SystemSettingsProto_Notification* msg);
  static void set_has_sound_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& light_pulse(const SystemSettingsProto_Notification* msg);
  static void set_has_light_pulse(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& vibration_intensity(const SystemSettingsProto_Notification* msg);
  static void set_has_vibration_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Notification::_Internal::sound(const SystemSettingsProto_Notification* msg) {
  return *msg->sound_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Notification::_Internal::sound_cache(const SystemSettingsProto_Notification* msg) {
  return *msg->sound_cache_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Notification::_Internal::light_pulse(const SystemSettingsProto_Notification* msg) {
  return *msg->light_pulse_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Notification::_Internal::vibration_intensity(const SystemSettingsProto_Notification* msg) {
  return *msg->vibration_intensity_;
}
void SystemSettingsProto_Notification::clear_sound() {
  if (sound_ != nullptr) sound_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Notification::clear_sound_cache() {
  if (sound_cache_ != nullptr) sound_cache_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SystemSettingsProto_Notification::clear_light_pulse() {
  if (light_pulse_ != nullptr) light_pulse_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SystemSettingsProto_Notification::clear_vibration_intensity() {
  if (vibration_intensity_ != nullptr) vibration_intensity_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SystemSettingsProto_Notification::SystemSettingsProto_Notification()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Notification)
}
SystemSettingsProto_Notification::SystemSettingsProto_Notification(const SystemSettingsProto_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sound()) {
    sound_ = new ::android::providers::settings::SettingProto(*from.sound_);
  } else {
    sound_ = nullptr;
  }
  if (from.has_sound_cache()) {
    sound_cache_ = new ::android::providers::settings::SettingProto(*from.sound_cache_);
  } else {
    sound_cache_ = nullptr;
  }
  if (from.has_light_pulse()) {
    light_pulse_ = new ::android::providers::settings::SettingProto(*from.light_pulse_);
  } else {
    light_pulse_ = nullptr;
  }
  if (from.has_vibration_intensity()) {
    vibration_intensity_ = new ::android::providers::settings::SettingProto(*from.vibration_intensity_);
  } else {
    vibration_intensity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Notification)
}

void SystemSettingsProto_Notification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&sound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vibration_intensity_) -
      reinterpret_cast<char*>(&sound_)) + sizeof(vibration_intensity_));
}

SystemSettingsProto_Notification::~SystemSettingsProto_Notification() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Notification)
  SharedDtor();
}

void SystemSettingsProto_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete sound_;
  if (this != internal_default_instance()) delete sound_cache_;
  if (this != internal_default_instance()) delete light_pulse_;
  if (this != internal_default_instance()) delete vibration_intensity_;
}

void SystemSettingsProto_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Notification& SystemSettingsProto_Notification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sound_ != nullptr);
      sound_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sound_cache_ != nullptr);
      sound_cache_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(light_pulse_ != nullptr);
      light_pulse_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vibration_intensity_ != nullptr);
      vibration_intensity_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto sound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sound_cache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sound_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto light_pulse = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_light_pulse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto vibration_intensity = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_vibration_intensity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Notification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Notification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto sound = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sound_cache = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sound_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto light_pulse = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_light_pulse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto vibration_intensity = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vibration_intensity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Notification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto sound = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::sound(this), output);
  }

  // optional .android.providers.settings.SettingProto sound_cache = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::sound_cache(this), output);
  }

  // optional .android.providers.settings.SettingProto light_pulse = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::light_pulse(this), output);
  }

  // optional .android.providers.settings.SettingProto vibration_intensity = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::vibration_intensity(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Notification)
}

size_t SystemSettingsProto_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Notification)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto sound = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sound_);
    }

    // optional .android.providers.settings.SettingProto sound_cache = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sound_cache_);
    }

    // optional .android.providers.settings.SettingProto light_pulse = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_pulse_);
    }

    // optional .android.providers.settings.SettingProto vibration_intensity = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vibration_intensity_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Notification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Notification*>(
      &from));
}

void SystemSettingsProto_Notification::MergeFrom(const SystemSettingsProto_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sound()->::android::providers::settings::SettingProto::MergeFrom(from.sound());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sound_cache()->::android::providers::settings::SettingProto::MergeFrom(from.sound_cache());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_light_pulse()->::android::providers::settings::SettingProto::MergeFrom(from.light_pulse());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_vibration_intensity()->::android::providers::settings::SettingProto::MergeFrom(from.vibration_intensity());
    }
  }
}

void SystemSettingsProto_Notification::CopyFrom(const SystemSettingsProto_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Notification::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Notification::InternalSwap(SystemSettingsProto_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sound_, other->sound_);
  swap(sound_cache_, other->sound_cache_);
  swap(light_pulse_, other->light_pulse_);
  swap(vibration_intensity_, other->vibration_intensity_);
}

std::string SystemSettingsProto_Notification::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Notification";
}


// ===================================================================

void SystemSettingsProto_Ringtone::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Ringtone_default_instance_._instance.get_mutable()->default_uri_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Ringtone_default_instance_._instance.get_mutable()->cache_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Ringtone::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Ringtone>()._has_bits_);
  static const ::android::providers::settings::SettingProto& default_uri(const SystemSettingsProto_Ringtone* msg);
  static void set_has_default_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& cache(const SystemSettingsProto_Ringtone* msg);
  static void set_has_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Ringtone::_Internal::default_uri(const SystemSettingsProto_Ringtone* msg) {
  return *msg->default_uri_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Ringtone::_Internal::cache(const SystemSettingsProto_Ringtone* msg) {
  return *msg->cache_;
}
void SystemSettingsProto_Ringtone::clear_default_uri() {
  if (default_uri_ != nullptr) default_uri_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Ringtone::clear_cache() {
  if (cache_ != nullptr) cache_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SystemSettingsProto_Ringtone::SystemSettingsProto_Ringtone()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Ringtone)
}
SystemSettingsProto_Ringtone::SystemSettingsProto_Ringtone(const SystemSettingsProto_Ringtone& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_uri()) {
    default_uri_ = new ::android::providers::settings::SettingProto(*from.default_uri_);
  } else {
    default_uri_ = nullptr;
  }
  if (from.has_cache()) {
    cache_ = new ::android::providers::settings::SettingProto(*from.cache_);
  } else {
    cache_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Ringtone)
}

void SystemSettingsProto_Ringtone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Ringtone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&default_uri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_) -
      reinterpret_cast<char*>(&default_uri_)) + sizeof(cache_));
}

SystemSettingsProto_Ringtone::~SystemSettingsProto_Ringtone() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Ringtone)
  SharedDtor();
}

void SystemSettingsProto_Ringtone::SharedDtor() {
  if (this != internal_default_instance()) delete default_uri_;
  if (this != internal_default_instance()) delete cache_;
}

void SystemSettingsProto_Ringtone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Ringtone& SystemSettingsProto_Ringtone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Ringtone_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Ringtone::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Ringtone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_uri_ != nullptr);
      default_uri_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cache_ != nullptr);
      cache_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Ringtone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto default_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_default_uri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto cache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_cache(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Ringtone::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Ringtone)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto default_uri = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto cache = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Ringtone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Ringtone)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Ringtone::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Ringtone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto default_uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::default_uri(this), output);
  }

  // optional .android.providers.settings.SettingProto cache = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::cache(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Ringtone)
}

size_t SystemSettingsProto_Ringtone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Ringtone)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto default_uri = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_uri_);
    }

    // optional .android.providers.settings.SettingProto cache = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cache_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Ringtone::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Ringtone*>(
      &from));
}

void SystemSettingsProto_Ringtone::MergeFrom(const SystemSettingsProto_Ringtone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Ringtone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_uri()->::android::providers::settings::SettingProto::MergeFrom(from.default_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cache()->::android::providers::settings::SettingProto::MergeFrom(from.cache());
    }
  }
}

void SystemSettingsProto_Ringtone::CopyFrom(const SystemSettingsProto_Ringtone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Ringtone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Ringtone::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Ringtone::InternalSwap(SystemSettingsProto_Ringtone* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(default_uri_, other->default_uri_);
  swap(cache_, other->cache_);
}

std::string SystemSettingsProto_Ringtone::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Ringtone";
}


// ===================================================================

void SystemSettingsProto_Rotation::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Rotation_default_instance_._instance.get_mutable()->accelerometer_rotation_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Rotation_default_instance_._instance.get_mutable()->user_rotation_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Rotation_default_instance_._instance.get_mutable()->hide_rotation_lock_toggle_for_accessibility_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Rotation::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Rotation>()._has_bits_);
  static const ::android::providers::settings::SettingProto& accelerometer_rotation(const SystemSettingsProto_Rotation* msg);
  static void set_has_accelerometer_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& user_rotation(const SystemSettingsProto_Rotation* msg);
  static void set_has_user_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& hide_rotation_lock_toggle_for_accessibility(const SystemSettingsProto_Rotation* msg);
  static void set_has_hide_rotation_lock_toggle_for_accessibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Rotation::_Internal::accelerometer_rotation(const SystemSettingsProto_Rotation* msg) {
  return *msg->accelerometer_rotation_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Rotation::_Internal::user_rotation(const SystemSettingsProto_Rotation* msg) {
  return *msg->user_rotation_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Rotation::_Internal::hide_rotation_lock_toggle_for_accessibility(const SystemSettingsProto_Rotation* msg) {
  return *msg->hide_rotation_lock_toggle_for_accessibility_;
}
void SystemSettingsProto_Rotation::clear_accelerometer_rotation() {
  if (accelerometer_rotation_ != nullptr) accelerometer_rotation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Rotation::clear_user_rotation() {
  if (user_rotation_ != nullptr) user_rotation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SystemSettingsProto_Rotation::clear_hide_rotation_lock_toggle_for_accessibility() {
  if (hide_rotation_lock_toggle_for_accessibility_ != nullptr) hide_rotation_lock_toggle_for_accessibility_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SystemSettingsProto_Rotation::SystemSettingsProto_Rotation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Rotation)
}
SystemSettingsProto_Rotation::SystemSettingsProto_Rotation(const SystemSettingsProto_Rotation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_accelerometer_rotation()) {
    accelerometer_rotation_ = new ::android::providers::settings::SettingProto(*from.accelerometer_rotation_);
  } else {
    accelerometer_rotation_ = nullptr;
  }
  if (from.has_user_rotation()) {
    user_rotation_ = new ::android::providers::settings::SettingProto(*from.user_rotation_);
  } else {
    user_rotation_ = nullptr;
  }
  if (from.has_hide_rotation_lock_toggle_for_accessibility()) {
    hide_rotation_lock_toggle_for_accessibility_ = new ::android::providers::settings::SettingProto(*from.hide_rotation_lock_toggle_for_accessibility_);
  } else {
    hide_rotation_lock_toggle_for_accessibility_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Rotation)
}

void SystemSettingsProto_Rotation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&accelerometer_rotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_rotation_lock_toggle_for_accessibility_) -
      reinterpret_cast<char*>(&accelerometer_rotation_)) + sizeof(hide_rotation_lock_toggle_for_accessibility_));
}

SystemSettingsProto_Rotation::~SystemSettingsProto_Rotation() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Rotation)
  SharedDtor();
}

void SystemSettingsProto_Rotation::SharedDtor() {
  if (this != internal_default_instance()) delete accelerometer_rotation_;
  if (this != internal_default_instance()) delete user_rotation_;
  if (this != internal_default_instance()) delete hide_rotation_lock_toggle_for_accessibility_;
}

void SystemSettingsProto_Rotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Rotation& SystemSettingsProto_Rotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Rotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(accelerometer_rotation_ != nullptr);
      accelerometer_rotation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_rotation_ != nullptr);
      user_rotation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(hide_rotation_lock_toggle_for_accessibility_ != nullptr);
      hide_rotation_lock_toggle_for_accessibility_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Rotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto accelerometer_rotation = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_accelerometer_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto user_rotation = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_user_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto hide_rotation_lock_toggle_for_accessibility = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_hide_rotation_lock_toggle_for_accessibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Rotation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Rotation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto accelerometer_rotation = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accelerometer_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto user_rotation = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto hide_rotation_lock_toggle_for_accessibility = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hide_rotation_lock_toggle_for_accessibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Rotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Rotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Rotation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Rotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto accelerometer_rotation = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::accelerometer_rotation(this), output);
  }

  // optional .android.providers.settings.SettingProto user_rotation = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::user_rotation(this), output);
  }

  // optional .android.providers.settings.SettingProto hide_rotation_lock_toggle_for_accessibility = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::hide_rotation_lock_toggle_for_accessibility(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Rotation)
}

size_t SystemSettingsProto_Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Rotation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto accelerometer_rotation = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accelerometer_rotation_);
    }

    // optional .android.providers.settings.SettingProto user_rotation = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_rotation_);
    }

    // optional .android.providers.settings.SettingProto hide_rotation_lock_toggle_for_accessibility = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hide_rotation_lock_toggle_for_accessibility_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Rotation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Rotation*>(
      &from));
}

void SystemSettingsProto_Rotation::MergeFrom(const SystemSettingsProto_Rotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Rotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_accelerometer_rotation()->::android::providers::settings::SettingProto::MergeFrom(from.accelerometer_rotation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user_rotation()->::android::providers::settings::SettingProto::MergeFrom(from.user_rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_hide_rotation_lock_toggle_for_accessibility()->::android::providers::settings::SettingProto::MergeFrom(from.hide_rotation_lock_toggle_for_accessibility());
    }
  }
}

void SystemSettingsProto_Rotation::CopyFrom(const SystemSettingsProto_Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Rotation::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Rotation::InternalSwap(SystemSettingsProto_Rotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accelerometer_rotation_, other->accelerometer_rotation_);
  swap(user_rotation_, other->user_rotation_);
  swap(hide_rotation_lock_toggle_for_accessibility_, other->hide_rotation_lock_toggle_for_accessibility_);
}

std::string SystemSettingsProto_Rotation::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Rotation";
}


// ===================================================================

void SystemSettingsProto_Screen::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Screen_default_instance_._instance.get_mutable()->off_timeout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Screen_default_instance_._instance.get_mutable()->brightness_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Screen_default_instance_._instance.get_mutable()->brightness_for_vr_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Screen_default_instance_._instance.get_mutable()->brightness_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Screen_default_instance_._instance.get_mutable()->auto_brightness_adj_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Screen_default_instance_._instance.get_mutable()->brightness_float_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Screen_default_instance_._instance.get_mutable()->brightness_for_vr_float_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Screen::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Screen>()._has_bits_);
  static const ::android::providers::settings::SettingProto& off_timeout(const SystemSettingsProto_Screen* msg);
  static void set_has_off_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& brightness(const SystemSettingsProto_Screen* msg);
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& brightness_for_vr(const SystemSettingsProto_Screen* msg);
  static void set_has_brightness_for_vr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& brightness_mode(const SystemSettingsProto_Screen* msg);
  static void set_has_brightness_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& auto_brightness_adj(const SystemSettingsProto_Screen* msg);
  static void set_has_auto_brightness_adj(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& brightness_float(const SystemSettingsProto_Screen* msg);
  static void set_has_brightness_float(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& brightness_for_vr_float(const SystemSettingsProto_Screen* msg);
  static void set_has_brightness_for_vr_float(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Screen::_Internal::off_timeout(const SystemSettingsProto_Screen* msg) {
  return *msg->off_timeout_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Screen::_Internal::brightness(const SystemSettingsProto_Screen* msg) {
  return *msg->brightness_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Screen::_Internal::brightness_for_vr(const SystemSettingsProto_Screen* msg) {
  return *msg->brightness_for_vr_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Screen::_Internal::brightness_mode(const SystemSettingsProto_Screen* msg) {
  return *msg->brightness_mode_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Screen::_Internal::auto_brightness_adj(const SystemSettingsProto_Screen* msg) {
  return *msg->auto_brightness_adj_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Screen::_Internal::brightness_float(const SystemSettingsProto_Screen* msg) {
  return *msg->brightness_float_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Screen::_Internal::brightness_for_vr_float(const SystemSettingsProto_Screen* msg) {
  return *msg->brightness_for_vr_float_;
}
void SystemSettingsProto_Screen::clear_off_timeout() {
  if (off_timeout_ != nullptr) off_timeout_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Screen::clear_brightness() {
  if (brightness_ != nullptr) brightness_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SystemSettingsProto_Screen::clear_brightness_for_vr() {
  if (brightness_for_vr_ != nullptr) brightness_for_vr_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SystemSettingsProto_Screen::clear_brightness_mode() {
  if (brightness_mode_ != nullptr) brightness_mode_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SystemSettingsProto_Screen::clear_auto_brightness_adj() {
  if (auto_brightness_adj_ != nullptr) auto_brightness_adj_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SystemSettingsProto_Screen::clear_brightness_float() {
  if (brightness_float_ != nullptr) brightness_float_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SystemSettingsProto_Screen::clear_brightness_for_vr_float() {
  if (brightness_for_vr_float_ != nullptr) brightness_for_vr_float_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
SystemSettingsProto_Screen::SystemSettingsProto_Screen()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Screen)
}
SystemSettingsProto_Screen::SystemSettingsProto_Screen(const SystemSettingsProto_Screen& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_off_timeout()) {
    off_timeout_ = new ::android::providers::settings::SettingProto(*from.off_timeout_);
  } else {
    off_timeout_ = nullptr;
  }
  if (from.has_brightness()) {
    brightness_ = new ::android::providers::settings::SettingProto(*from.brightness_);
  } else {
    brightness_ = nullptr;
  }
  if (from.has_brightness_for_vr()) {
    brightness_for_vr_ = new ::android::providers::settings::SettingProto(*from.brightness_for_vr_);
  } else {
    brightness_for_vr_ = nullptr;
  }
  if (from.has_brightness_mode()) {
    brightness_mode_ = new ::android::providers::settings::SettingProto(*from.brightness_mode_);
  } else {
    brightness_mode_ = nullptr;
  }
  if (from.has_auto_brightness_adj()) {
    auto_brightness_adj_ = new ::android::providers::settings::SettingProto(*from.auto_brightness_adj_);
  } else {
    auto_brightness_adj_ = nullptr;
  }
  if (from.has_brightness_float()) {
    brightness_float_ = new ::android::providers::settings::SettingProto(*from.brightness_float_);
  } else {
    brightness_float_ = nullptr;
  }
  if (from.has_brightness_for_vr_float()) {
    brightness_for_vr_float_ = new ::android::providers::settings::SettingProto(*from.brightness_for_vr_float_);
  } else {
    brightness_for_vr_float_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Screen)
}

void SystemSettingsProto_Screen::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Screen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&off_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brightness_for_vr_float_) -
      reinterpret_cast<char*>(&off_timeout_)) + sizeof(brightness_for_vr_float_));
}

SystemSettingsProto_Screen::~SystemSettingsProto_Screen() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Screen)
  SharedDtor();
}

void SystemSettingsProto_Screen::SharedDtor() {
  if (this != internal_default_instance()) delete off_timeout_;
  if (this != internal_default_instance()) delete brightness_;
  if (this != internal_default_instance()) delete brightness_for_vr_;
  if (this != internal_default_instance()) delete brightness_mode_;
  if (this != internal_default_instance()) delete auto_brightness_adj_;
  if (this != internal_default_instance()) delete brightness_float_;
  if (this != internal_default_instance()) delete brightness_for_vr_float_;
}

void SystemSettingsProto_Screen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Screen& SystemSettingsProto_Screen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Screen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(off_timeout_ != nullptr);
      off_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(brightness_ != nullptr);
      brightness_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brightness_for_vr_ != nullptr);
      brightness_for_vr_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(brightness_mode_ != nullptr);
      brightness_mode_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(auto_brightness_adj_ != nullptr);
      auto_brightness_adj_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(brightness_float_ != nullptr);
      brightness_float_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(brightness_for_vr_float_ != nullptr);
      brightness_for_vr_float_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Screen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto off_timeout = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_off_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto brightness = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_brightness(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto brightness_for_vr = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_brightness_for_vr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto brightness_mode = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_brightness_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto auto_brightness_adj = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_auto_brightness_adj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto brightness_float = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_brightness_float(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto brightness_for_vr_float = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_brightness_for_vr_float(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Screen::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Screen)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto off_timeout = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_off_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto brightness = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_brightness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto brightness_for_vr = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_brightness_for_vr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto brightness_mode = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_brightness_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto auto_brightness_adj = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_brightness_adj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto brightness_float = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_brightness_float()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto brightness_for_vr_float = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_brightness_for_vr_float()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Screen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Screen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Screen::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Screen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto off_timeout = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::off_timeout(this), output);
  }

  // optional .android.providers.settings.SettingProto brightness = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::brightness(this), output);
  }

  // optional .android.providers.settings.SettingProto brightness_for_vr = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::brightness_for_vr(this), output);
  }

  // optional .android.providers.settings.SettingProto brightness_mode = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::brightness_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto auto_brightness_adj = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::auto_brightness_adj(this), output);
  }

  // optional .android.providers.settings.SettingProto brightness_float = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::brightness_float(this), output);
  }

  // optional .android.providers.settings.SettingProto brightness_for_vr_float = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::brightness_for_vr_float(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Screen)
}

size_t SystemSettingsProto_Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Screen)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.providers.settings.SettingProto off_timeout = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *off_timeout_);
    }

    // optional .android.providers.settings.SettingProto brightness = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brightness_);
    }

    // optional .android.providers.settings.SettingProto brightness_for_vr = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brightness_for_vr_);
    }

    // optional .android.providers.settings.SettingProto brightness_mode = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brightness_mode_);
    }

    // optional .android.providers.settings.SettingProto auto_brightness_adj = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_brightness_adj_);
    }

    // optional .android.providers.settings.SettingProto brightness_float = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brightness_float_);
    }

    // optional .android.providers.settings.SettingProto brightness_for_vr_float = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brightness_for_vr_float_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Screen::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Screen*>(
      &from));
}

void SystemSettingsProto_Screen::MergeFrom(const SystemSettingsProto_Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_off_timeout()->::android::providers::settings::SettingProto::MergeFrom(from.off_timeout());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_brightness()->::android::providers::settings::SettingProto::MergeFrom(from.brightness());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_brightness_for_vr()->::android::providers::settings::SettingProto::MergeFrom(from.brightness_for_vr());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_brightness_mode()->::android::providers::settings::SettingProto::MergeFrom(from.brightness_mode());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_auto_brightness_adj()->::android::providers::settings::SettingProto::MergeFrom(from.auto_brightness_adj());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_brightness_float()->::android::providers::settings::SettingProto::MergeFrom(from.brightness_float());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_brightness_for_vr_float()->::android::providers::settings::SettingProto::MergeFrom(from.brightness_for_vr_float());
    }
  }
}

void SystemSettingsProto_Screen::CopyFrom(const SystemSettingsProto_Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Screen::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Screen::InternalSwap(SystemSettingsProto_Screen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(off_timeout_, other->off_timeout_);
  swap(brightness_, other->brightness_);
  swap(brightness_for_vr_, other->brightness_for_vr_);
  swap(brightness_mode_, other->brightness_mode_);
  swap(auto_brightness_adj_, other->auto_brightness_adj_);
  swap(brightness_float_, other->brightness_float_);
  swap(brightness_for_vr_float_, other->brightness_for_vr_float_);
}

std::string SystemSettingsProto_Screen::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Screen";
}


// ===================================================================

void SystemSettingsProto_Sip::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Sip_default_instance_._instance.get_mutable()->receive_calls_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Sip_default_instance_._instance.get_mutable()->call_options_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Sip_default_instance_._instance.get_mutable()->always_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Sip_default_instance_._instance.get_mutable()->address_only_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Sip::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Sip>()._has_bits_);
  static const ::android::providers::settings::SettingProto& receive_calls(const SystemSettingsProto_Sip* msg);
  static void set_has_receive_calls(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& call_options(const SystemSettingsProto_Sip* msg);
  static void set_has_call_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& always(const SystemSettingsProto_Sip* msg);
  static void set_has_always(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& address_only(const SystemSettingsProto_Sip* msg);
  static void set_has_address_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Sip::_Internal::receive_calls(const SystemSettingsProto_Sip* msg) {
  return *msg->receive_calls_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Sip::_Internal::call_options(const SystemSettingsProto_Sip* msg) {
  return *msg->call_options_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Sip::_Internal::always(const SystemSettingsProto_Sip* msg) {
  return *msg->always_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Sip::_Internal::address_only(const SystemSettingsProto_Sip* msg) {
  return *msg->address_only_;
}
void SystemSettingsProto_Sip::clear_receive_calls() {
  if (receive_calls_ != nullptr) receive_calls_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Sip::clear_call_options() {
  if (call_options_ != nullptr) call_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SystemSettingsProto_Sip::clear_always() {
  if (always_ != nullptr) always_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SystemSettingsProto_Sip::clear_address_only() {
  if (address_only_ != nullptr) address_only_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SystemSettingsProto_Sip::SystemSettingsProto_Sip()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Sip)
}
SystemSettingsProto_Sip::SystemSettingsProto_Sip(const SystemSettingsProto_Sip& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_receive_calls()) {
    receive_calls_ = new ::android::providers::settings::SettingProto(*from.receive_calls_);
  } else {
    receive_calls_ = nullptr;
  }
  if (from.has_call_options()) {
    call_options_ = new ::android::providers::settings::SettingProto(*from.call_options_);
  } else {
    call_options_ = nullptr;
  }
  if (from.has_always()) {
    always_ = new ::android::providers::settings::SettingProto(*from.always_);
  } else {
    always_ = nullptr;
  }
  if (from.has_address_only()) {
    address_only_ = new ::android::providers::settings::SettingProto(*from.address_only_);
  } else {
    address_only_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Sip)
}

void SystemSettingsProto_Sip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Sip_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&receive_calls_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_only_) -
      reinterpret_cast<char*>(&receive_calls_)) + sizeof(address_only_));
}

SystemSettingsProto_Sip::~SystemSettingsProto_Sip() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Sip)
  SharedDtor();
}

void SystemSettingsProto_Sip::SharedDtor() {
  if (this != internal_default_instance()) delete receive_calls_;
  if (this != internal_default_instance()) delete call_options_;
  if (this != internal_default_instance()) delete always_;
  if (this != internal_default_instance()) delete address_only_;
}

void SystemSettingsProto_Sip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Sip& SystemSettingsProto_Sip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Sip_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Sip::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Sip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(receive_calls_ != nullptr);
      receive_calls_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(call_options_ != nullptr);
      call_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(always_ != nullptr);
      always_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(address_only_ != nullptr);
      address_only_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Sip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto receive_calls = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_receive_calls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto call_options = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_call_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto always = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_always(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto address_only = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_address_only(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Sip::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Sip)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto receive_calls = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_receive_calls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto call_options = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_call_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto always = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_always()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto address_only = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_address_only()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Sip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Sip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Sip::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Sip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto receive_calls = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::receive_calls(this), output);
  }

  // optional .android.providers.settings.SettingProto call_options = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::call_options(this), output);
  }

  // optional .android.providers.settings.SettingProto always = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::always(this), output);
  }

  // optional .android.providers.settings.SettingProto address_only = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::address_only(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Sip)
}

size_t SystemSettingsProto_Sip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Sip)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto receive_calls = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *receive_calls_);
    }

    // optional .android.providers.settings.SettingProto call_options = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *call_options_);
    }

    // optional .android.providers.settings.SettingProto always = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *always_);
    }

    // optional .android.providers.settings.SettingProto address_only = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_only_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Sip::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Sip*>(
      &from));
}

void SystemSettingsProto_Sip::MergeFrom(const SystemSettingsProto_Sip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Sip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_receive_calls()->::android::providers::settings::SettingProto::MergeFrom(from.receive_calls());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_call_options()->::android::providers::settings::SettingProto::MergeFrom(from.call_options());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_always()->::android::providers::settings::SettingProto::MergeFrom(from.always());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_address_only()->::android::providers::settings::SettingProto::MergeFrom(from.address_only());
    }
  }
}

void SystemSettingsProto_Sip::CopyFrom(const SystemSettingsProto_Sip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Sip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Sip::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Sip::InternalSwap(SystemSettingsProto_Sip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(receive_calls_, other->receive_calls_);
  swap(call_options_, other->call_options_);
  swap(always_, other->always_);
  swap(address_only_, other->address_only_);
}

std::string SystemSettingsProto_Sip::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Sip";
}


// ===================================================================

void SystemSettingsProto_Text::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Text_default_instance_._instance.get_mutable()->auto_replace_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Text_default_instance_._instance.get_mutable()->auto_caps_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Text_default_instance_._instance.get_mutable()->auto_punctuate_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Text_default_instance_._instance.get_mutable()->show_password_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Text::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Text>()._has_bits_);
  static const ::android::providers::settings::SettingProto& auto_replace(const SystemSettingsProto_Text* msg);
  static void set_has_auto_replace(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& auto_caps(const SystemSettingsProto_Text* msg);
  static void set_has_auto_caps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& auto_punctuate(const SystemSettingsProto_Text* msg);
  static void set_has_auto_punctuate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& show_password(const SystemSettingsProto_Text* msg);
  static void set_has_show_password(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Text::_Internal::auto_replace(const SystemSettingsProto_Text* msg) {
  return *msg->auto_replace_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Text::_Internal::auto_caps(const SystemSettingsProto_Text* msg) {
  return *msg->auto_caps_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Text::_Internal::auto_punctuate(const SystemSettingsProto_Text* msg) {
  return *msg->auto_punctuate_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Text::_Internal::show_password(const SystemSettingsProto_Text* msg) {
  return *msg->show_password_;
}
void SystemSettingsProto_Text::clear_auto_replace() {
  if (auto_replace_ != nullptr) auto_replace_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Text::clear_auto_caps() {
  if (auto_caps_ != nullptr) auto_caps_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SystemSettingsProto_Text::clear_auto_punctuate() {
  if (auto_punctuate_ != nullptr) auto_punctuate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SystemSettingsProto_Text::clear_show_password() {
  if (show_password_ != nullptr) show_password_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SystemSettingsProto_Text::SystemSettingsProto_Text()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Text)
}
SystemSettingsProto_Text::SystemSettingsProto_Text(const SystemSettingsProto_Text& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auto_replace()) {
    auto_replace_ = new ::android::providers::settings::SettingProto(*from.auto_replace_);
  } else {
    auto_replace_ = nullptr;
  }
  if (from.has_auto_caps()) {
    auto_caps_ = new ::android::providers::settings::SettingProto(*from.auto_caps_);
  } else {
    auto_caps_ = nullptr;
  }
  if (from.has_auto_punctuate()) {
    auto_punctuate_ = new ::android::providers::settings::SettingProto(*from.auto_punctuate_);
  } else {
    auto_punctuate_ = nullptr;
  }
  if (from.has_show_password()) {
    show_password_ = new ::android::providers::settings::SettingProto(*from.show_password_);
  } else {
    show_password_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Text)
}

void SystemSettingsProto_Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Text_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&auto_replace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_password_) -
      reinterpret_cast<char*>(&auto_replace_)) + sizeof(show_password_));
}

SystemSettingsProto_Text::~SystemSettingsProto_Text() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Text)
  SharedDtor();
}

void SystemSettingsProto_Text::SharedDtor() {
  if (this != internal_default_instance()) delete auto_replace_;
  if (this != internal_default_instance()) delete auto_caps_;
  if (this != internal_default_instance()) delete auto_punctuate_;
  if (this != internal_default_instance()) delete show_password_;
}

void SystemSettingsProto_Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Text& SystemSettingsProto_Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Text_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Text::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(auto_replace_ != nullptr);
      auto_replace_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auto_caps_ != nullptr);
      auto_caps_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(auto_punctuate_ != nullptr);
      auto_punctuate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(show_password_ != nullptr);
      show_password_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto auto_replace = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auto_replace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto auto_caps = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_auto_caps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto auto_punctuate = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_auto_punctuate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_password = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_show_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Text::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Text)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto auto_replace = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_replace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto auto_caps = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_caps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto auto_punctuate = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_punctuate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_password = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Text)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Text::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto auto_replace = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::auto_replace(this), output);
  }

  // optional .android.providers.settings.SettingProto auto_caps = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::auto_caps(this), output);
  }

  // optional .android.providers.settings.SettingProto auto_punctuate = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::auto_punctuate(this), output);
  }

  // optional .android.providers.settings.SettingProto show_password = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::show_password(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Text)
}

size_t SystemSettingsProto_Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Text)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto auto_replace = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_replace_);
    }

    // optional .android.providers.settings.SettingProto auto_caps = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_caps_);
    }

    // optional .android.providers.settings.SettingProto auto_punctuate = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_punctuate_);
    }

    // optional .android.providers.settings.SettingProto show_password = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_password_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Text::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Text*>(
      &from));
}

void SystemSettingsProto_Text::MergeFrom(const SystemSettingsProto_Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_auto_replace()->::android::providers::settings::SettingProto::MergeFrom(from.auto_replace());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_auto_caps()->::android::providers::settings::SettingProto::MergeFrom(from.auto_caps());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_auto_punctuate()->::android::providers::settings::SettingProto::MergeFrom(from.auto_punctuate());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_show_password()->::android::providers::settings::SettingProto::MergeFrom(from.show_password());
    }
  }
}

void SystemSettingsProto_Text::CopyFrom(const SystemSettingsProto_Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Text::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Text::InternalSwap(SystemSettingsProto_Text* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(auto_replace_, other->auto_replace_);
  swap(auto_caps_, other->auto_caps_);
  swap(auto_punctuate_, other->auto_punctuate_);
  swap(show_password_, other->show_password_);
}

std::string SystemSettingsProto_Text::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Text";
}


// ===================================================================

void SystemSettingsProto_Vibrate::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Vibrate_default_instance_._instance.get_mutable()->on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Vibrate_default_instance_._instance.get_mutable()->input_devices_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Vibrate_default_instance_._instance.get_mutable()->in_silent_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Vibrate_default_instance_._instance.get_mutable()->when_ringing_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Vibrate::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Vibrate>()._has_bits_);
  static const ::android::providers::settings::SettingProto& on(const SystemSettingsProto_Vibrate* msg);
  static void set_has_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& input_devices(const SystemSettingsProto_Vibrate* msg);
  static void set_has_input_devices(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& in_silent(const SystemSettingsProto_Vibrate* msg);
  static void set_has_in_silent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& when_ringing(const SystemSettingsProto_Vibrate* msg);
  static void set_has_when_ringing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Vibrate::_Internal::on(const SystemSettingsProto_Vibrate* msg) {
  return *msg->on_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Vibrate::_Internal::input_devices(const SystemSettingsProto_Vibrate* msg) {
  return *msg->input_devices_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Vibrate::_Internal::in_silent(const SystemSettingsProto_Vibrate* msg) {
  return *msg->in_silent_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Vibrate::_Internal::when_ringing(const SystemSettingsProto_Vibrate* msg) {
  return *msg->when_ringing_;
}
void SystemSettingsProto_Vibrate::clear_on() {
  if (on_ != nullptr) on_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Vibrate::clear_input_devices() {
  if (input_devices_ != nullptr) input_devices_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SystemSettingsProto_Vibrate::clear_in_silent() {
  if (in_silent_ != nullptr) in_silent_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SystemSettingsProto_Vibrate::clear_when_ringing() {
  if (when_ringing_ != nullptr) when_ringing_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SystemSettingsProto_Vibrate::SystemSettingsProto_Vibrate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Vibrate)
}
SystemSettingsProto_Vibrate::SystemSettingsProto_Vibrate(const SystemSettingsProto_Vibrate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_on()) {
    on_ = new ::android::providers::settings::SettingProto(*from.on_);
  } else {
    on_ = nullptr;
  }
  if (from.has_input_devices()) {
    input_devices_ = new ::android::providers::settings::SettingProto(*from.input_devices_);
  } else {
    input_devices_ = nullptr;
  }
  if (from.has_in_silent()) {
    in_silent_ = new ::android::providers::settings::SettingProto(*from.in_silent_);
  } else {
    in_silent_ = nullptr;
  }
  if (from.has_when_ringing()) {
    when_ringing_ = new ::android::providers::settings::SettingProto(*from.when_ringing_);
  } else {
    when_ringing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Vibrate)
}

void SystemSettingsProto_Vibrate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Vibrate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&when_ringing_) -
      reinterpret_cast<char*>(&on_)) + sizeof(when_ringing_));
}

SystemSettingsProto_Vibrate::~SystemSettingsProto_Vibrate() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Vibrate)
  SharedDtor();
}

void SystemSettingsProto_Vibrate::SharedDtor() {
  if (this != internal_default_instance()) delete on_;
  if (this != internal_default_instance()) delete input_devices_;
  if (this != internal_default_instance()) delete in_silent_;
  if (this != internal_default_instance()) delete when_ringing_;
}

void SystemSettingsProto_Vibrate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Vibrate& SystemSettingsProto_Vibrate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Vibrate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Vibrate::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Vibrate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(on_ != nullptr);
      on_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(input_devices_ != nullptr);
      input_devices_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(in_silent_ != nullptr);
      in_silent_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(when_ringing_ != nullptr);
      when_ringing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Vibrate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto input_devices = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_input_devices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto in_silent = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_in_silent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto when_ringing = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_when_ringing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Vibrate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Vibrate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto input_devices = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto in_silent = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_in_silent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto when_ringing = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_when_ringing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Vibrate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Vibrate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Vibrate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Vibrate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::on(this), output);
  }

  // optional .android.providers.settings.SettingProto input_devices = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::input_devices(this), output);
  }

  // optional .android.providers.settings.SettingProto in_silent = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::in_silent(this), output);
  }

  // optional .android.providers.settings.SettingProto when_ringing = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::when_ringing(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Vibrate)
}

size_t SystemSettingsProto_Vibrate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Vibrate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_);
    }

    // optional .android.providers.settings.SettingProto input_devices = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_devices_);
    }

    // optional .android.providers.settings.SettingProto in_silent = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *in_silent_);
    }

    // optional .android.providers.settings.SettingProto when_ringing = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *when_ringing_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Vibrate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Vibrate*>(
      &from));
}

void SystemSettingsProto_Vibrate::MergeFrom(const SystemSettingsProto_Vibrate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Vibrate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_on()->::android::providers::settings::SettingProto::MergeFrom(from.on());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_input_devices()->::android::providers::settings::SettingProto::MergeFrom(from.input_devices());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_in_silent()->::android::providers::settings::SettingProto::MergeFrom(from.in_silent());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_when_ringing()->::android::providers::settings::SettingProto::MergeFrom(from.when_ringing());
    }
  }
}

void SystemSettingsProto_Vibrate::CopyFrom(const SystemSettingsProto_Vibrate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Vibrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Vibrate::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Vibrate::InternalSwap(SystemSettingsProto_Vibrate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(on_, other->on_);
  swap(input_devices_, other->input_devices_);
  swap(in_silent_, other->in_silent_);
  swap(when_ringing_, other->when_ringing_);
}

std::string SystemSettingsProto_Vibrate::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Vibrate";
}


// ===================================================================

void SystemSettingsProto_Volume::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->ring_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->system_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->voice_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->music_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->alarm_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->notification_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->bluetooth_sco_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->accessibility_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->master_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->master_mono_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->mode_ringer_streams_affected_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->mute_streams_affected_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_Volume_default_instance_._instance.get_mutable()->master_balance_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto_Volume::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto_Volume>()._has_bits_);
  static const ::android::providers::settings::SettingProto& ring(const SystemSettingsProto_Volume* msg);
  static void set_has_ring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& system(const SystemSettingsProto_Volume* msg);
  static void set_has_system(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& voice(const SystemSettingsProto_Volume* msg);
  static void set_has_voice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& music(const SystemSettingsProto_Volume* msg);
  static void set_has_music(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& alarm(const SystemSettingsProto_Volume* msg);
  static void set_has_alarm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& notification(const SystemSettingsProto_Volume* msg);
  static void set_has_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& bluetooth_sco(const SystemSettingsProto_Volume* msg);
  static void set_has_bluetooth_sco(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& accessibility(const SystemSettingsProto_Volume* msg);
  static void set_has_accessibility(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& master(const SystemSettingsProto_Volume* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& master_mono(const SystemSettingsProto_Volume* msg);
  static void set_has_master_mono(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& mode_ringer_streams_affected(const SystemSettingsProto_Volume* msg);
  static void set_has_mode_ringer_streams_affected(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& mute_streams_affected(const SystemSettingsProto_Volume* msg);
  static void set_has_mute_streams_affected(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& master_balance(const SystemSettingsProto_Volume* msg);
  static void set_has_master_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::ring(const SystemSettingsProto_Volume* msg) {
  return *msg->ring_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::system(const SystemSettingsProto_Volume* msg) {
  return *msg->system_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::voice(const SystemSettingsProto_Volume* msg) {
  return *msg->voice_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::music(const SystemSettingsProto_Volume* msg) {
  return *msg->music_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::alarm(const SystemSettingsProto_Volume* msg) {
  return *msg->alarm_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::notification(const SystemSettingsProto_Volume* msg) {
  return *msg->notification_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::bluetooth_sco(const SystemSettingsProto_Volume* msg) {
  return *msg->bluetooth_sco_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::accessibility(const SystemSettingsProto_Volume* msg) {
  return *msg->accessibility_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::master(const SystemSettingsProto_Volume* msg) {
  return *msg->master_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::master_mono(const SystemSettingsProto_Volume* msg) {
  return *msg->master_mono_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::mode_ringer_streams_affected(const SystemSettingsProto_Volume* msg) {
  return *msg->mode_ringer_streams_affected_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::mute_streams_affected(const SystemSettingsProto_Volume* msg) {
  return *msg->mute_streams_affected_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto_Volume::_Internal::master_balance(const SystemSettingsProto_Volume* msg) {
  return *msg->master_balance_;
}
void SystemSettingsProto_Volume::clear_ring() {
  if (ring_ != nullptr) ring_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto_Volume::clear_system() {
  if (system_ != nullptr) system_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SystemSettingsProto_Volume::clear_voice() {
  if (voice_ != nullptr) voice_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SystemSettingsProto_Volume::clear_music() {
  if (music_ != nullptr) music_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SystemSettingsProto_Volume::clear_alarm() {
  if (alarm_ != nullptr) alarm_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SystemSettingsProto_Volume::clear_notification() {
  if (notification_ != nullptr) notification_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SystemSettingsProto_Volume::clear_bluetooth_sco() {
  if (bluetooth_sco_ != nullptr) bluetooth_sco_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SystemSettingsProto_Volume::clear_accessibility() {
  if (accessibility_ != nullptr) accessibility_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void SystemSettingsProto_Volume::clear_master() {
  if (master_ != nullptr) master_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void SystemSettingsProto_Volume::clear_master_mono() {
  if (master_mono_ != nullptr) master_mono_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void SystemSettingsProto_Volume::clear_mode_ringer_streams_affected() {
  if (mode_ringer_streams_affected_ != nullptr) mode_ringer_streams_affected_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void SystemSettingsProto_Volume::clear_mute_streams_affected() {
  if (mute_streams_affected_ != nullptr) mute_streams_affected_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void SystemSettingsProto_Volume::clear_master_balance() {
  if (master_balance_ != nullptr) master_balance_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
SystemSettingsProto_Volume::SystemSettingsProto_Volume()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto.Volume)
}
SystemSettingsProto_Volume::SystemSettingsProto_Volume(const SystemSettingsProto_Volume& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ring()) {
    ring_ = new ::android::providers::settings::SettingProto(*from.ring_);
  } else {
    ring_ = nullptr;
  }
  if (from.has_system()) {
    system_ = new ::android::providers::settings::SettingProto(*from.system_);
  } else {
    system_ = nullptr;
  }
  if (from.has_voice()) {
    voice_ = new ::android::providers::settings::SettingProto(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  if (from.has_music()) {
    music_ = new ::android::providers::settings::SettingProto(*from.music_);
  } else {
    music_ = nullptr;
  }
  if (from.has_alarm()) {
    alarm_ = new ::android::providers::settings::SettingProto(*from.alarm_);
  } else {
    alarm_ = nullptr;
  }
  if (from.has_notification()) {
    notification_ = new ::android::providers::settings::SettingProto(*from.notification_);
  } else {
    notification_ = nullptr;
  }
  if (from.has_bluetooth_sco()) {
    bluetooth_sco_ = new ::android::providers::settings::SettingProto(*from.bluetooth_sco_);
  } else {
    bluetooth_sco_ = nullptr;
  }
  if (from.has_accessibility()) {
    accessibility_ = new ::android::providers::settings::SettingProto(*from.accessibility_);
  } else {
    accessibility_ = nullptr;
  }
  if (from.has_master()) {
    master_ = new ::android::providers::settings::SettingProto(*from.master_);
  } else {
    master_ = nullptr;
  }
  if (from.has_master_mono()) {
    master_mono_ = new ::android::providers::settings::SettingProto(*from.master_mono_);
  } else {
    master_mono_ = nullptr;
  }
  if (from.has_mode_ringer_streams_affected()) {
    mode_ringer_streams_affected_ = new ::android::providers::settings::SettingProto(*from.mode_ringer_streams_affected_);
  } else {
    mode_ringer_streams_affected_ = nullptr;
  }
  if (from.has_mute_streams_affected()) {
    mute_streams_affected_ = new ::android::providers::settings::SettingProto(*from.mute_streams_affected_);
  } else {
    mute_streams_affected_ = nullptr;
  }
  if (from.has_master_balance()) {
    master_balance_ = new ::android::providers::settings::SettingProto(*from.master_balance_);
  } else {
    master_balance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto.Volume)
}

void SystemSettingsProto_Volume::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&ring_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&master_balance_) -
      reinterpret_cast<char*>(&ring_)) + sizeof(master_balance_));
}

SystemSettingsProto_Volume::~SystemSettingsProto_Volume() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto.Volume)
  SharedDtor();
}

void SystemSettingsProto_Volume::SharedDtor() {
  if (this != internal_default_instance()) delete ring_;
  if (this != internal_default_instance()) delete system_;
  if (this != internal_default_instance()) delete voice_;
  if (this != internal_default_instance()) delete music_;
  if (this != internal_default_instance()) delete alarm_;
  if (this != internal_default_instance()) delete notification_;
  if (this != internal_default_instance()) delete bluetooth_sco_;
  if (this != internal_default_instance()) delete accessibility_;
  if (this != internal_default_instance()) delete master_;
  if (this != internal_default_instance()) delete master_mono_;
  if (this != internal_default_instance()) delete mode_ringer_streams_affected_;
  if (this != internal_default_instance()) delete mute_streams_affected_;
  if (this != internal_default_instance()) delete master_balance_;
}

void SystemSettingsProto_Volume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto_Volume& SystemSettingsProto_Volume::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto_Volume::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ring_ != nullptr);
      ring_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(system_ != nullptr);
      system_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(voice_ != nullptr);
      voice_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(music_ != nullptr);
      music_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(alarm_ != nullptr);
      alarm_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(notification_ != nullptr);
      notification_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(bluetooth_sco_ != nullptr);
      bluetooth_sco_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(accessibility_ != nullptr);
      accessibility_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(master_ != nullptr);
      master_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(master_mono_ != nullptr);
      master_mono_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(mode_ringer_streams_affected_ != nullptr);
      mode_ringer_streams_affected_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(mute_streams_affected_ != nullptr);
      mute_streams_affected_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(master_balance_ != nullptr);
      master_balance_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto_Volume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto ring = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ring(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto system = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_system(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto voice = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto music = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_music(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto alarm = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_alarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto notification = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto bluetooth_sco = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_bluetooth_sco(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto accessibility = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_accessibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto master = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto master_mono = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_master_mono(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto mode_ringer_streams_affected = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_mode_ringer_streams_affected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto mute_streams_affected = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_mute_streams_affected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto master_balance = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_master_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto_Volume::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto.Volume)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto ring = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto system = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto voice = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto music = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_music()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto alarm = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto notification = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto bluetooth_sco = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bluetooth_sco()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto accessibility = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto master = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_master()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto master_mono = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_master_mono()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto mode_ringer_streams_affected = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mode_ringer_streams_affected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto mute_streams_affected = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mute_streams_affected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto master_balance = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_master_balance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto.Volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto.Volume)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto_Volume::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto ring = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::ring(this), output);
  }

  // optional .android.providers.settings.SettingProto system = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::system(this), output);
  }

  // optional .android.providers.settings.SettingProto voice = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::voice(this), output);
  }

  // optional .android.providers.settings.SettingProto music = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::music(this), output);
  }

  // optional .android.providers.settings.SettingProto alarm = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::alarm(this), output);
  }

  // optional .android.providers.settings.SettingProto notification = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::notification(this), output);
  }

  // optional .android.providers.settings.SettingProto bluetooth_sco = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::bluetooth_sco(this), output);
  }

  // optional .android.providers.settings.SettingProto accessibility = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::accessibility(this), output);
  }

  // optional .android.providers.settings.SettingProto master = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::master(this), output);
  }

  // optional .android.providers.settings.SettingProto master_mono = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::master_mono(this), output);
  }

  // optional .android.providers.settings.SettingProto mode_ringer_streams_affected = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::mode_ringer_streams_affected(this), output);
  }

  // optional .android.providers.settings.SettingProto mute_streams_affected = 12 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::mute_streams_affected(this), output);
  }

  // optional .android.providers.settings.SettingProto master_balance = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::master_balance(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto.Volume)
}

size_t SystemSettingsProto_Volume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto.Volume)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto ring = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ring_);
    }

    // optional .android.providers.settings.SettingProto system = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_);
    }

    // optional .android.providers.settings.SettingProto voice = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_);
    }

    // optional .android.providers.settings.SettingProto music = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *music_);
    }

    // optional .android.providers.settings.SettingProto alarm = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alarm_);
    }

    // optional .android.providers.settings.SettingProto notification = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_);
    }

    // optional .android.providers.settings.SettingProto bluetooth_sco = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_sco_);
    }

    // optional .android.providers.settings.SettingProto accessibility = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .android.providers.settings.SettingProto master = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_);
    }

    // optional .android.providers.settings.SettingProto master_mono = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_mono_);
    }

    // optional .android.providers.settings.SettingProto mode_ringer_streams_affected = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_ringer_streams_affected_);
    }

    // optional .android.providers.settings.SettingProto mute_streams_affected = 12 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mute_streams_affected_);
    }

    // optional .android.providers.settings.SettingProto master_balance = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_balance_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto_Volume::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto_Volume*>(
      &from));
}

void SystemSettingsProto_Volume::MergeFrom(const SystemSettingsProto_Volume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ring()->::android::providers::settings::SettingProto::MergeFrom(from.ring());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_system()->::android::providers::settings::SettingProto::MergeFrom(from.system());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_voice()->::android::providers::settings::SettingProto::MergeFrom(from.voice());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_music()->::android::providers::settings::SettingProto::MergeFrom(from.music());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_alarm()->::android::providers::settings::SettingProto::MergeFrom(from.alarm());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_notification()->::android::providers::settings::SettingProto::MergeFrom(from.notification());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_bluetooth_sco()->::android::providers::settings::SettingProto::MergeFrom(from.bluetooth_sco());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_accessibility()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_master()->::android::providers::settings::SettingProto::MergeFrom(from.master());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_master_mono()->::android::providers::settings::SettingProto::MergeFrom(from.master_mono());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_mode_ringer_streams_affected()->::android::providers::settings::SettingProto::MergeFrom(from.mode_ringer_streams_affected());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_mute_streams_affected()->::android::providers::settings::SettingProto::MergeFrom(from.mute_streams_affected());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_master_balance()->::android::providers::settings::SettingProto::MergeFrom(from.master_balance());
    }
  }
}

void SystemSettingsProto_Volume::CopyFrom(const SystemSettingsProto_Volume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto_Volume::IsInitialized() const {
  return true;
}

void SystemSettingsProto_Volume::InternalSwap(SystemSettingsProto_Volume* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ring_, other->ring_);
  swap(system_, other->system_);
  swap(voice_, other->voice_);
  swap(music_, other->music_);
  swap(alarm_, other->alarm_);
  swap(notification_, other->notification_);
  swap(bluetooth_sco_, other->bluetooth_sco_);
  swap(accessibility_, other->accessibility_);
  swap(master_, other->master_);
  swap(master_mono_, other->master_mono_);
  swap(mode_ringer_streams_affected_, other->mode_ringer_streams_affected_);
  swap(mute_streams_affected_, other->mute_streams_affected_);
  swap(master_balance_, other->master_balance_);
}

std::string SystemSettingsProto_Volume::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto.Volume";
}


// ===================================================================

void SystemSettingsProto::InitAsDefaultInstance() {
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->advanced_settings_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->alarm_ = const_cast< ::android::providers::settings::SystemSettingsProto_Alarm*>(
      ::android::providers::settings::SystemSettingsProto_Alarm::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->bluetooth_ = const_cast< ::android::providers::settings::SystemSettingsProto_Bluetooth*>(
      ::android::providers::settings::SystemSettingsProto_Bluetooth::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->display_color_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->developer_options_ = const_cast< ::android::providers::settings::SystemSettingsProto_DevOptions*>(
      ::android::providers::settings::SystemSettingsProto_DevOptions::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->dtmf_tone_ = const_cast< ::android::providers::settings::SystemSettingsProto_DtmfTone*>(
      ::android::providers::settings::SystemSettingsProto_DtmfTone::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->egg_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->end_button_behavior_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->font_scale_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->haptic_feedback_ = const_cast< ::android::providers::settings::SystemSettingsProto_HapticFeedback*>(
      ::android::providers::settings::SystemSettingsProto_HapticFeedback::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->hearing_aid_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->lock_to_app_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->lockscreen_ = const_cast< ::android::providers::settings::SystemSettingsProto_Lockscreen*>(
      ::android::providers::settings::SystemSettingsProto_Lockscreen::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->media_button_receiver_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->notification_ = const_cast< ::android::providers::settings::SystemSettingsProto_Notification*>(
      ::android::providers::settings::SystemSettingsProto_Notification::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->pointer_speed_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->ringtone_ = const_cast< ::android::providers::settings::SystemSettingsProto_Ringtone*>(
      ::android::providers::settings::SystemSettingsProto_Ringtone::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::android::providers::settings::SystemSettingsProto_Rotation*>(
      ::android::providers::settings::SystemSettingsProto_Rotation::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->screen_ = const_cast< ::android::providers::settings::SystemSettingsProto_Screen*>(
      ::android::providers::settings::SystemSettingsProto_Screen::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->setup_wizard_has_run_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->show_battery_percent_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->show_gtalk_service_status_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->sip_ = const_cast< ::android::providers::settings::SystemSettingsProto_Sip*>(
      ::android::providers::settings::SystemSettingsProto_Sip::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->sound_effects_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->system_locales_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->text_ = const_cast< ::android::providers::settings::SystemSettingsProto_Text*>(
      ::android::providers::settings::SystemSettingsProto_Text::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->time_12_24_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->tty_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->vibrate_ = const_cast< ::android::providers::settings::SystemSettingsProto_Vibrate*>(
      ::android::providers::settings::SystemSettingsProto_Vibrate::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->volume_ = const_cast< ::android::providers::settings::SystemSettingsProto_Volume*>(
      ::android::providers::settings::SystemSettingsProto_Volume::internal_default_instance());
  ::android::providers::settings::_SystemSettingsProto_default_instance_._instance.get_mutable()->when_to_make_wifi_calls_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SystemSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemSettingsProto>()._has_bits_);
  static const ::android::providers::settings::SettingProto& advanced_settings(const SystemSettingsProto* msg);
  static void set_has_advanced_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Alarm& alarm(const SystemSettingsProto* msg);
  static void set_has_alarm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Bluetooth& bluetooth(const SystemSettingsProto* msg);
  static void set_has_bluetooth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& display_color_mode(const SystemSettingsProto* msg);
  static void set_has_display_color_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SystemSettingsProto_DevOptions& developer_options(const SystemSettingsProto* msg);
  static void set_has_developer_options(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SystemSettingsProto_DtmfTone& dtmf_tone(const SystemSettingsProto* msg);
  static void set_has_dtmf_tone(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& egg_mode(const SystemSettingsProto* msg);
  static void set_has_egg_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& end_button_behavior(const SystemSettingsProto* msg);
  static void set_has_end_button_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& font_scale(const SystemSettingsProto* msg);
  static void set_has_font_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SystemSettingsProto_HapticFeedback& haptic_feedback(const SystemSettingsProto* msg);
  static void set_has_haptic_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& hearing_aid(const SystemSettingsProto* msg);
  static void set_has_hearing_aid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& lock_to_app_enabled(const SystemSettingsProto* msg);
  static void set_has_lock_to_app_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Lockscreen& lockscreen(const SystemSettingsProto* msg);
  static void set_has_lockscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& media_button_receiver(const SystemSettingsProto* msg);
  static void set_has_media_button_receiver(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Notification& notification(const SystemSettingsProto* msg);
  static void set_has_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& pointer_speed(const SystemSettingsProto* msg);
  static void set_has_pointer_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Ringtone& ringtone(const SystemSettingsProto* msg);
  static void set_has_ringtone(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Rotation& rotation(const SystemSettingsProto* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Screen& screen(const SystemSettingsProto* msg);
  static void set_has_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::android::providers::settings::SettingProto& setup_wizard_has_run(const SystemSettingsProto* msg);
  static void set_has_setup_wizard_has_run(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::android::providers::settings::SettingProto& show_battery_percent(const SystemSettingsProto* msg);
  static void set_has_show_battery_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::android::providers::settings::SettingProto& show_gtalk_service_status(const SystemSettingsProto* msg);
  static void set_has_show_gtalk_service_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Sip& sip(const SystemSettingsProto* msg);
  static void set_has_sip(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::android::providers::settings::SettingProto& sound_effects_enabled(const SystemSettingsProto* msg);
  static void set_has_sound_effects_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::android::providers::settings::SettingProto& system_locales(const SystemSettingsProto* msg);
  static void set_has_system_locales(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Text& text(const SystemSettingsProto* msg);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::android::providers::settings::SettingProto& time_12_24(const SystemSettingsProto* msg);
  static void set_has_time_12_24(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::android::providers::settings::SettingProto& tty_mode(const SystemSettingsProto* msg);
  static void set_has_tty_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Vibrate& vibrate(const SystemSettingsProto* msg);
  static void set_has_vibrate(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::android::providers::settings::SystemSettingsProto_Volume& volume(const SystemSettingsProto* msg);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::android::providers::settings::SettingProto& when_to_make_wifi_calls(const SystemSettingsProto* msg);
  static void set_has_when_to_make_wifi_calls(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::advanced_settings(const SystemSettingsProto* msg) {
  return *msg->advanced_settings_;
}
const ::android::providers::settings::SystemSettingsProto_Alarm&
SystemSettingsProto::_Internal::alarm(const SystemSettingsProto* msg) {
  return *msg->alarm_;
}
const ::android::providers::settings::SystemSettingsProto_Bluetooth&
SystemSettingsProto::_Internal::bluetooth(const SystemSettingsProto* msg) {
  return *msg->bluetooth_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::display_color_mode(const SystemSettingsProto* msg) {
  return *msg->display_color_mode_;
}
const ::android::providers::settings::SystemSettingsProto_DevOptions&
SystemSettingsProto::_Internal::developer_options(const SystemSettingsProto* msg) {
  return *msg->developer_options_;
}
const ::android::providers::settings::SystemSettingsProto_DtmfTone&
SystemSettingsProto::_Internal::dtmf_tone(const SystemSettingsProto* msg) {
  return *msg->dtmf_tone_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::egg_mode(const SystemSettingsProto* msg) {
  return *msg->egg_mode_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::end_button_behavior(const SystemSettingsProto* msg) {
  return *msg->end_button_behavior_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::font_scale(const SystemSettingsProto* msg) {
  return *msg->font_scale_;
}
const ::android::providers::settings::SystemSettingsProto_HapticFeedback&
SystemSettingsProto::_Internal::haptic_feedback(const SystemSettingsProto* msg) {
  return *msg->haptic_feedback_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::hearing_aid(const SystemSettingsProto* msg) {
  return *msg->hearing_aid_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::lock_to_app_enabled(const SystemSettingsProto* msg) {
  return *msg->lock_to_app_enabled_;
}
const ::android::providers::settings::SystemSettingsProto_Lockscreen&
SystemSettingsProto::_Internal::lockscreen(const SystemSettingsProto* msg) {
  return *msg->lockscreen_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::media_button_receiver(const SystemSettingsProto* msg) {
  return *msg->media_button_receiver_;
}
const ::android::providers::settings::SystemSettingsProto_Notification&
SystemSettingsProto::_Internal::notification(const SystemSettingsProto* msg) {
  return *msg->notification_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::pointer_speed(const SystemSettingsProto* msg) {
  return *msg->pointer_speed_;
}
const ::android::providers::settings::SystemSettingsProto_Ringtone&
SystemSettingsProto::_Internal::ringtone(const SystemSettingsProto* msg) {
  return *msg->ringtone_;
}
const ::android::providers::settings::SystemSettingsProto_Rotation&
SystemSettingsProto::_Internal::rotation(const SystemSettingsProto* msg) {
  return *msg->rotation_;
}
const ::android::providers::settings::SystemSettingsProto_Screen&
SystemSettingsProto::_Internal::screen(const SystemSettingsProto* msg) {
  return *msg->screen_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::setup_wizard_has_run(const SystemSettingsProto* msg) {
  return *msg->setup_wizard_has_run_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::show_battery_percent(const SystemSettingsProto* msg) {
  return *msg->show_battery_percent_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::show_gtalk_service_status(const SystemSettingsProto* msg) {
  return *msg->show_gtalk_service_status_;
}
const ::android::providers::settings::SystemSettingsProto_Sip&
SystemSettingsProto::_Internal::sip(const SystemSettingsProto* msg) {
  return *msg->sip_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::sound_effects_enabled(const SystemSettingsProto* msg) {
  return *msg->sound_effects_enabled_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::system_locales(const SystemSettingsProto* msg) {
  return *msg->system_locales_;
}
const ::android::providers::settings::SystemSettingsProto_Text&
SystemSettingsProto::_Internal::text(const SystemSettingsProto* msg) {
  return *msg->text_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::time_12_24(const SystemSettingsProto* msg) {
  return *msg->time_12_24_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::tty_mode(const SystemSettingsProto* msg) {
  return *msg->tty_mode_;
}
const ::android::providers::settings::SystemSettingsProto_Vibrate&
SystemSettingsProto::_Internal::vibrate(const SystemSettingsProto* msg) {
  return *msg->vibrate_;
}
const ::android::providers::settings::SystemSettingsProto_Volume&
SystemSettingsProto::_Internal::volume(const SystemSettingsProto* msg) {
  return *msg->volume_;
}
const ::android::providers::settings::SettingProto&
SystemSettingsProto::_Internal::when_to_make_wifi_calls(const SystemSettingsProto* msg) {
  return *msg->when_to_make_wifi_calls_;
}
void SystemSettingsProto::clear_historical_operations() {
  historical_operations_.Clear();
}
void SystemSettingsProto::clear_advanced_settings() {
  if (advanced_settings_ != nullptr) advanced_settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SystemSettingsProto::clear_display_color_mode() {
  if (display_color_mode_ != nullptr) display_color_mode_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SystemSettingsProto::clear_egg_mode() {
  if (egg_mode_ != nullptr) egg_mode_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SystemSettingsProto::clear_end_button_behavior() {
  if (end_button_behavior_ != nullptr) end_button_behavior_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void SystemSettingsProto::clear_font_scale() {
  if (font_scale_ != nullptr) font_scale_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void SystemSettingsProto::clear_hearing_aid() {
  if (hearing_aid_ != nullptr) hearing_aid_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void SystemSettingsProto::clear_lock_to_app_enabled() {
  if (lock_to_app_enabled_ != nullptr) lock_to_app_enabled_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void SystemSettingsProto::clear_media_button_receiver() {
  if (media_button_receiver_ != nullptr) media_button_receiver_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void SystemSettingsProto::clear_pointer_speed() {
  if (pointer_speed_ != nullptr) pointer_speed_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void SystemSettingsProto::clear_setup_wizard_has_run() {
  if (setup_wizard_has_run_ != nullptr) setup_wizard_has_run_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void SystemSettingsProto::clear_show_battery_percent() {
  if (show_battery_percent_ != nullptr) show_battery_percent_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void SystemSettingsProto::clear_show_gtalk_service_status() {
  if (show_gtalk_service_status_ != nullptr) show_gtalk_service_status_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void SystemSettingsProto::clear_sound_effects_enabled() {
  if (sound_effects_enabled_ != nullptr) sound_effects_enabled_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void SystemSettingsProto::clear_system_locales() {
  if (system_locales_ != nullptr) system_locales_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void SystemSettingsProto::clear_time_12_24() {
  if (time_12_24_ != nullptr) time_12_24_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void SystemSettingsProto::clear_tty_mode() {
  if (tty_mode_ != nullptr) tty_mode_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void SystemSettingsProto::clear_when_to_make_wifi_calls() {
  if (when_to_make_wifi_calls_ != nullptr) when_to_make_wifi_calls_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
SystemSettingsProto::SystemSettingsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SystemSettingsProto)
}
SystemSettingsProto::SystemSettingsProto(const SystemSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      historical_operations_(from.historical_operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_advanced_settings()) {
    advanced_settings_ = new ::android::providers::settings::SettingProto(*from.advanced_settings_);
  } else {
    advanced_settings_ = nullptr;
  }
  if (from.has_alarm()) {
    alarm_ = new ::android::providers::settings::SystemSettingsProto_Alarm(*from.alarm_);
  } else {
    alarm_ = nullptr;
  }
  if (from.has_bluetooth()) {
    bluetooth_ = new ::android::providers::settings::SystemSettingsProto_Bluetooth(*from.bluetooth_);
  } else {
    bluetooth_ = nullptr;
  }
  if (from.has_display_color_mode()) {
    display_color_mode_ = new ::android::providers::settings::SettingProto(*from.display_color_mode_);
  } else {
    display_color_mode_ = nullptr;
  }
  if (from.has_developer_options()) {
    developer_options_ = new ::android::providers::settings::SystemSettingsProto_DevOptions(*from.developer_options_);
  } else {
    developer_options_ = nullptr;
  }
  if (from.has_dtmf_tone()) {
    dtmf_tone_ = new ::android::providers::settings::SystemSettingsProto_DtmfTone(*from.dtmf_tone_);
  } else {
    dtmf_tone_ = nullptr;
  }
  if (from.has_egg_mode()) {
    egg_mode_ = new ::android::providers::settings::SettingProto(*from.egg_mode_);
  } else {
    egg_mode_ = nullptr;
  }
  if (from.has_end_button_behavior()) {
    end_button_behavior_ = new ::android::providers::settings::SettingProto(*from.end_button_behavior_);
  } else {
    end_button_behavior_ = nullptr;
  }
  if (from.has_font_scale()) {
    font_scale_ = new ::android::providers::settings::SettingProto(*from.font_scale_);
  } else {
    font_scale_ = nullptr;
  }
  if (from.has_haptic_feedback()) {
    haptic_feedback_ = new ::android::providers::settings::SystemSettingsProto_HapticFeedback(*from.haptic_feedback_);
  } else {
    haptic_feedback_ = nullptr;
  }
  if (from.has_hearing_aid()) {
    hearing_aid_ = new ::android::providers::settings::SettingProto(*from.hearing_aid_);
  } else {
    hearing_aid_ = nullptr;
  }
  if (from.has_lock_to_app_enabled()) {
    lock_to_app_enabled_ = new ::android::providers::settings::SettingProto(*from.lock_to_app_enabled_);
  } else {
    lock_to_app_enabled_ = nullptr;
  }
  if (from.has_lockscreen()) {
    lockscreen_ = new ::android::providers::settings::SystemSettingsProto_Lockscreen(*from.lockscreen_);
  } else {
    lockscreen_ = nullptr;
  }
  if (from.has_media_button_receiver()) {
    media_button_receiver_ = new ::android::providers::settings::SettingProto(*from.media_button_receiver_);
  } else {
    media_button_receiver_ = nullptr;
  }
  if (from.has_notification()) {
    notification_ = new ::android::providers::settings::SystemSettingsProto_Notification(*from.notification_);
  } else {
    notification_ = nullptr;
  }
  if (from.has_pointer_speed()) {
    pointer_speed_ = new ::android::providers::settings::SettingProto(*from.pointer_speed_);
  } else {
    pointer_speed_ = nullptr;
  }
  if (from.has_ringtone()) {
    ringtone_ = new ::android::providers::settings::SystemSettingsProto_Ringtone(*from.ringtone_);
  } else {
    ringtone_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::android::providers::settings::SystemSettingsProto_Rotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from.has_screen()) {
    screen_ = new ::android::providers::settings::SystemSettingsProto_Screen(*from.screen_);
  } else {
    screen_ = nullptr;
  }
  if (from.has_setup_wizard_has_run()) {
    setup_wizard_has_run_ = new ::android::providers::settings::SettingProto(*from.setup_wizard_has_run_);
  } else {
    setup_wizard_has_run_ = nullptr;
  }
  if (from.has_show_battery_percent()) {
    show_battery_percent_ = new ::android::providers::settings::SettingProto(*from.show_battery_percent_);
  } else {
    show_battery_percent_ = nullptr;
  }
  if (from.has_show_gtalk_service_status()) {
    show_gtalk_service_status_ = new ::android::providers::settings::SettingProto(*from.show_gtalk_service_status_);
  } else {
    show_gtalk_service_status_ = nullptr;
  }
  if (from.has_sip()) {
    sip_ = new ::android::providers::settings::SystemSettingsProto_Sip(*from.sip_);
  } else {
    sip_ = nullptr;
  }
  if (from.has_sound_effects_enabled()) {
    sound_effects_enabled_ = new ::android::providers::settings::SettingProto(*from.sound_effects_enabled_);
  } else {
    sound_effects_enabled_ = nullptr;
  }
  if (from.has_system_locales()) {
    system_locales_ = new ::android::providers::settings::SettingProto(*from.system_locales_);
  } else {
    system_locales_ = nullptr;
  }
  if (from.has_text()) {
    text_ = new ::android::providers::settings::SystemSettingsProto_Text(*from.text_);
  } else {
    text_ = nullptr;
  }
  if (from.has_time_12_24()) {
    time_12_24_ = new ::android::providers::settings::SettingProto(*from.time_12_24_);
  } else {
    time_12_24_ = nullptr;
  }
  if (from.has_tty_mode()) {
    tty_mode_ = new ::android::providers::settings::SettingProto(*from.tty_mode_);
  } else {
    tty_mode_ = nullptr;
  }
  if (from.has_vibrate()) {
    vibrate_ = new ::android::providers::settings::SystemSettingsProto_Vibrate(*from.vibrate_);
  } else {
    vibrate_ = nullptr;
  }
  if (from.has_volume()) {
    volume_ = new ::android::providers::settings::SystemSettingsProto_Volume(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  if (from.has_when_to_make_wifi_calls()) {
    when_to_make_wifi_calls_ = new ::android::providers::settings::SettingProto(*from.when_to_make_wifi_calls_);
  } else {
    when_to_make_wifi_calls_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SystemSettingsProto)
}

void SystemSettingsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  ::memset(&advanced_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&when_to_make_wifi_calls_) -
      reinterpret_cast<char*>(&advanced_settings_)) + sizeof(when_to_make_wifi_calls_));
}

SystemSettingsProto::~SystemSettingsProto() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SystemSettingsProto)
  SharedDtor();
}

void SystemSettingsProto::SharedDtor() {
  if (this != internal_default_instance()) delete advanced_settings_;
  if (this != internal_default_instance()) delete alarm_;
  if (this != internal_default_instance()) delete bluetooth_;
  if (this != internal_default_instance()) delete display_color_mode_;
  if (this != internal_default_instance()) delete developer_options_;
  if (this != internal_default_instance()) delete dtmf_tone_;
  if (this != internal_default_instance()) delete egg_mode_;
  if (this != internal_default_instance()) delete end_button_behavior_;
  if (this != internal_default_instance()) delete font_scale_;
  if (this != internal_default_instance()) delete haptic_feedback_;
  if (this != internal_default_instance()) delete hearing_aid_;
  if (this != internal_default_instance()) delete lock_to_app_enabled_;
  if (this != internal_default_instance()) delete lockscreen_;
  if (this != internal_default_instance()) delete media_button_receiver_;
  if (this != internal_default_instance()) delete notification_;
  if (this != internal_default_instance()) delete pointer_speed_;
  if (this != internal_default_instance()) delete ringtone_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete screen_;
  if (this != internal_default_instance()) delete setup_wizard_has_run_;
  if (this != internal_default_instance()) delete show_battery_percent_;
  if (this != internal_default_instance()) delete show_gtalk_service_status_;
  if (this != internal_default_instance()) delete sip_;
  if (this != internal_default_instance()) delete sound_effects_enabled_;
  if (this != internal_default_instance()) delete system_locales_;
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete time_12_24_;
  if (this != internal_default_instance()) delete tty_mode_;
  if (this != internal_default_instance()) delete vibrate_;
  if (this != internal_default_instance()) delete volume_;
  if (this != internal_default_instance()) delete when_to_make_wifi_calls_;
}

void SystemSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemSettingsProto& SystemSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto.base);
  return *internal_default_instance();
}


void SystemSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SystemSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  historical_operations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(advanced_settings_ != nullptr);
      advanced_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(alarm_ != nullptr);
      alarm_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bluetooth_ != nullptr);
      bluetooth_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(display_color_mode_ != nullptr);
      display_color_mode_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(developer_options_ != nullptr);
      developer_options_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dtmf_tone_ != nullptr);
      dtmf_tone_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(egg_mode_ != nullptr);
      egg_mode_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(end_button_behavior_ != nullptr);
      end_button_behavior_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(font_scale_ != nullptr);
      font_scale_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(haptic_feedback_ != nullptr);
      haptic_feedback_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(hearing_aid_ != nullptr);
      hearing_aid_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(lock_to_app_enabled_ != nullptr);
      lock_to_app_enabled_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(lockscreen_ != nullptr);
      lockscreen_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(media_button_receiver_ != nullptr);
      media_button_receiver_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(notification_ != nullptr);
      notification_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(pointer_speed_ != nullptr);
      pointer_speed_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(ringtone_ != nullptr);
      ringtone_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(screen_ != nullptr);
      screen_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(setup_wizard_has_run_ != nullptr);
      setup_wizard_has_run_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(show_battery_percent_ != nullptr);
      show_battery_percent_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(show_gtalk_service_status_ != nullptr);
      show_gtalk_service_status_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(sip_ != nullptr);
      sip_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(sound_effects_enabled_ != nullptr);
      sound_effects_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(system_locales_ != nullptr);
      system_locales_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(text_ != nullptr);
      text_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(time_12_24_ != nullptr);
      time_12_24_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(tty_mode_ != nullptr);
      tty_mode_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(vibrate_ != nullptr);
      vibrate_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(volume_ != nullptr);
      volume_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(when_to_make_wifi_calls_ != nullptr);
      when_to_make_wifi_calls_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_historical_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto advanced_settings = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_advanced_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Alarm alarm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_alarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Bluetooth bluetooth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_bluetooth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_color_mode = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_display_color_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.DevOptions developer_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_developer_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.DtmfTone dtmf_tone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_dtmf_tone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto egg_mode = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_egg_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto end_button_behavior = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_end_button_behavior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto font_scale = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_font_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.HapticFeedback haptic_feedback = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_haptic_feedback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto hearing_aid = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_hearing_aid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto lock_to_app_enabled = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_lock_to_app_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Lockscreen lockscreen = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_lockscreen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto media_button_receiver = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_media_button_receiver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Notification notification = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto pointer_speed = 18 [(.android.privacy) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_pointer_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Ringtone ringtone = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_ringtone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Rotation rotation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Screen screen = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_screen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto setup_wizard_has_run = 23 [(.android.privacy) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_setup_wizard_has_run(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_battery_percent = 24 [(.android.privacy) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_show_battery_percent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_gtalk_service_status = 25 [(.android.privacy) = {
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_show_gtalk_service_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Sip sip = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_sip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sound_effects_enabled = 27 [(.android.privacy) = {
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_sound_effects_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto system_locales = 28 [(.android.privacy) = {
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_system_locales(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Text text = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto time_12_24 = 30 [(.android.privacy) = {
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_time_12_24(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto tty_mode = 31 [(.android.privacy) = {
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_tty_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Vibrate vibrate = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_vibrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SystemSettingsProto.Volume volume = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto when_to_make_wifi_calls = 34 [(.android.privacy) = {
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_when_to_make_wifi_calls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemSettingsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SystemSettingsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_historical_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto advanced_settings = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_advanced_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Alarm alarm = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Bluetooth bluetooth = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bluetooth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_color_mode = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_color_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.DevOptions developer_options = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_developer_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.DtmfTone dtmf_tone = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dtmf_tone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto egg_mode = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_egg_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto end_button_behavior = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_end_button_behavior()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto font_scale = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_font_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.HapticFeedback haptic_feedback = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_haptic_feedback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto hearing_aid = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hearing_aid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto lock_to_app_enabled = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lock_to_app_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Lockscreen lockscreen = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lockscreen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto media_button_receiver = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_media_button_receiver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Notification notification = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto pointer_speed = 18 [(.android.privacy) = {
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pointer_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Ringtone ringtone = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ringtone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Rotation rotation = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Screen screen = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto setup_wizard_has_run = 23 [(.android.privacy) = {
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_setup_wizard_has_run()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_battery_percent = 24 [(.android.privacy) = {
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_battery_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_gtalk_service_status = 25 [(.android.privacy) = {
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_gtalk_service_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Sip sip = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sound_effects_enabled = 27 [(.android.privacy) = {
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sound_effects_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto system_locales = 28 [(.android.privacy) = {
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_system_locales()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Text text = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto time_12_24 = 30 [(.android.privacy) = {
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_12_24()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto tty_mode = 31 [(.android.privacy) = {
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tty_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Vibrate vibrate = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vibrate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SystemSettingsProto.Volume volume = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_volume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto when_to_make_wifi_calls = 34 [(.android.privacy) = {
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_when_to_make_wifi_calls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SystemSettingsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SystemSettingsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemSettingsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SystemSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_operations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->historical_operations(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto advanced_settings = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::advanced_settings(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Alarm alarm = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::alarm(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Bluetooth bluetooth = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::bluetooth(this), output);
  }

  // optional .android.providers.settings.SettingProto display_color_mode = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::display_color_mode(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.DevOptions developer_options = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::developer_options(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.DtmfTone dtmf_tone = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::dtmf_tone(this), output);
  }

  // optional .android.providers.settings.SettingProto egg_mode = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::egg_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto end_button_behavior = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::end_button_behavior(this), output);
  }

  // optional .android.providers.settings.SettingProto font_scale = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::font_scale(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.HapticFeedback haptic_feedback = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::haptic_feedback(this), output);
  }

  // optional .android.providers.settings.SettingProto hearing_aid = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::hearing_aid(this), output);
  }

  // optional .android.providers.settings.SettingProto lock_to_app_enabled = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::lock_to_app_enabled(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Lockscreen lockscreen = 15;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::lockscreen(this), output);
  }

  // optional .android.providers.settings.SettingProto media_button_receiver = 16;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::media_button_receiver(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Notification notification = 17;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::notification(this), output);
  }

  // optional .android.providers.settings.SettingProto pointer_speed = 18 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::pointer_speed(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Ringtone ringtone = 19;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::ringtone(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Rotation rotation = 20;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::rotation(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Screen screen = 22;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22, _Internal::screen(this), output);
  }

  // optional .android.providers.settings.SettingProto setup_wizard_has_run = 23 [(.android.privacy) = {
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::setup_wizard_has_run(this), output);
  }

  // optional .android.providers.settings.SettingProto show_battery_percent = 24 [(.android.privacy) = {
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::show_battery_percent(this), output);
  }

  // optional .android.providers.settings.SettingProto show_gtalk_service_status = 25 [(.android.privacy) = {
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::show_gtalk_service_status(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Sip sip = 26;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::sip(this), output);
  }

  // optional .android.providers.settings.SettingProto sound_effects_enabled = 27 [(.android.privacy) = {
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::sound_effects_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto system_locales = 28 [(.android.privacy) = {
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::system_locales(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Text text = 29;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::text(this), output);
  }

  // optional .android.providers.settings.SettingProto time_12_24 = 30 [(.android.privacy) = {
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::time_12_24(this), output);
  }

  // optional .android.providers.settings.SettingProto tty_mode = 31 [(.android.privacy) = {
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::tty_mode(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Vibrate vibrate = 32;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::vibrate(this), output);
  }

  // optional .android.providers.settings.SystemSettingsProto.Volume volume = 33;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::volume(this), output);
  }

  // optional .android.providers.settings.SettingProto when_to_make_wifi_calls = 34 [(.android.privacy) = {
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      34, _Internal::when_to_make_wifi_calls(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SystemSettingsProto)
}

size_t SystemSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SystemSettingsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->historical_operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->historical_operations(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto advanced_settings = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *advanced_settings_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Alarm alarm = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alarm_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Bluetooth bluetooth = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_);
    }

    // optional .android.providers.settings.SettingProto display_color_mode = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_color_mode_);
    }

    // optional .android.providers.settings.SystemSettingsProto.DevOptions developer_options = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *developer_options_);
    }

    // optional .android.providers.settings.SystemSettingsProto.DtmfTone dtmf_tone = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dtmf_tone_);
    }

    // optional .android.providers.settings.SettingProto egg_mode = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *egg_mode_);
    }

    // optional .android.providers.settings.SettingProto end_button_behavior = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_button_behavior_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto font_scale = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *font_scale_);
    }

    // optional .android.providers.settings.SystemSettingsProto.HapticFeedback haptic_feedback = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *haptic_feedback_);
    }

    // optional .android.providers.settings.SettingProto hearing_aid = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hearing_aid_);
    }

    // optional .android.providers.settings.SettingProto lock_to_app_enabled = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lock_to_app_enabled_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Lockscreen lockscreen = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lockscreen_);
    }

    // optional .android.providers.settings.SettingProto media_button_receiver = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_button_receiver_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Notification notification = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_);
    }

    // optional .android.providers.settings.SettingProto pointer_speed = 18 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pointer_speed_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.SystemSettingsProto.Ringtone ringtone = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ringtone_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Rotation rotation = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Screen screen = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screen_);
    }

    // optional .android.providers.settings.SettingProto setup_wizard_has_run = 23 [(.android.privacy) = {
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *setup_wizard_has_run_);
    }

    // optional .android.providers.settings.SettingProto show_battery_percent = 24 [(.android.privacy) = {
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_battery_percent_);
    }

    // optional .android.providers.settings.SettingProto show_gtalk_service_status = 25 [(.android.privacy) = {
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_gtalk_service_status_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Sip sip = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sip_);
    }

    // optional .android.providers.settings.SettingProto sound_effects_enabled = 27 [(.android.privacy) = {
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sound_effects_enabled_);
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional .android.providers.settings.SettingProto system_locales = 28 [(.android.privacy) = {
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_locales_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Text text = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_);
    }

    // optional .android.providers.settings.SettingProto time_12_24 = 30 [(.android.privacy) = {
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_12_24_);
    }

    // optional .android.providers.settings.SettingProto tty_mode = 31 [(.android.privacy) = {
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tty_mode_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Vibrate vibrate = 32;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vibrate_);
    }

    // optional .android.providers.settings.SystemSettingsProto.Volume volume = 33;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volume_);
    }

    // optional .android.providers.settings.SettingProto when_to_make_wifi_calls = 34 [(.android.privacy) = {
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *when_to_make_wifi_calls_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemSettingsProto*>(
      &from));
}

void SystemSettingsProto::MergeFrom(const SystemSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SystemSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  historical_operations_.MergeFrom(from.historical_operations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_advanced_settings()->::android::providers::settings::SettingProto::MergeFrom(from.advanced_settings());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_alarm()->::android::providers::settings::SystemSettingsProto_Alarm::MergeFrom(from.alarm());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bluetooth()->::android::providers::settings::SystemSettingsProto_Bluetooth::MergeFrom(from.bluetooth());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_display_color_mode()->::android::providers::settings::SettingProto::MergeFrom(from.display_color_mode());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_developer_options()->::android::providers::settings::SystemSettingsProto_DevOptions::MergeFrom(from.developer_options());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dtmf_tone()->::android::providers::settings::SystemSettingsProto_DtmfTone::MergeFrom(from.dtmf_tone());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_egg_mode()->::android::providers::settings::SettingProto::MergeFrom(from.egg_mode());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_end_button_behavior()->::android::providers::settings::SettingProto::MergeFrom(from.end_button_behavior());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_font_scale()->::android::providers::settings::SettingProto::MergeFrom(from.font_scale());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_haptic_feedback()->::android::providers::settings::SystemSettingsProto_HapticFeedback::MergeFrom(from.haptic_feedback());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_hearing_aid()->::android::providers::settings::SettingProto::MergeFrom(from.hearing_aid());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_lock_to_app_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.lock_to_app_enabled());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_lockscreen()->::android::providers::settings::SystemSettingsProto_Lockscreen::MergeFrom(from.lockscreen());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_media_button_receiver()->::android::providers::settings::SettingProto::MergeFrom(from.media_button_receiver());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_notification()->::android::providers::settings::SystemSettingsProto_Notification::MergeFrom(from.notification());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_pointer_speed()->::android::providers::settings::SettingProto::MergeFrom(from.pointer_speed());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_ringtone()->::android::providers::settings::SystemSettingsProto_Ringtone::MergeFrom(from.ringtone());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_rotation()->::android::providers::settings::SystemSettingsProto_Rotation::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_screen()->::android::providers::settings::SystemSettingsProto_Screen::MergeFrom(from.screen());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_setup_wizard_has_run()->::android::providers::settings::SettingProto::MergeFrom(from.setup_wizard_has_run());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_show_battery_percent()->::android::providers::settings::SettingProto::MergeFrom(from.show_battery_percent());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_show_gtalk_service_status()->::android::providers::settings::SettingProto::MergeFrom(from.show_gtalk_service_status());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_sip()->::android::providers::settings::SystemSettingsProto_Sip::MergeFrom(from.sip());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_sound_effects_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.sound_effects_enabled());
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_system_locales()->::android::providers::settings::SettingProto::MergeFrom(from.system_locales());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_text()->::android::providers::settings::SystemSettingsProto_Text::MergeFrom(from.text());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_time_12_24()->::android::providers::settings::SettingProto::MergeFrom(from.time_12_24());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_tty_mode()->::android::providers::settings::SettingProto::MergeFrom(from.tty_mode());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_vibrate()->::android::providers::settings::SystemSettingsProto_Vibrate::MergeFrom(from.vibrate());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_volume()->::android::providers::settings::SystemSettingsProto_Volume::MergeFrom(from.volume());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_when_to_make_wifi_calls()->::android::providers::settings::SettingProto::MergeFrom(from.when_to_make_wifi_calls());
    }
  }
}

void SystemSettingsProto::CopyFrom(const SystemSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SystemSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettingsProto::IsInitialized() const {
  return true;
}

void SystemSettingsProto::InternalSwap(SystemSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&historical_operations_)->InternalSwap(CastToBase(&other->historical_operations_));
  swap(advanced_settings_, other->advanced_settings_);
  swap(alarm_, other->alarm_);
  swap(bluetooth_, other->bluetooth_);
  swap(display_color_mode_, other->display_color_mode_);
  swap(developer_options_, other->developer_options_);
  swap(dtmf_tone_, other->dtmf_tone_);
  swap(egg_mode_, other->egg_mode_);
  swap(end_button_behavior_, other->end_button_behavior_);
  swap(font_scale_, other->font_scale_);
  swap(haptic_feedback_, other->haptic_feedback_);
  swap(hearing_aid_, other->hearing_aid_);
  swap(lock_to_app_enabled_, other->lock_to_app_enabled_);
  swap(lockscreen_, other->lockscreen_);
  swap(media_button_receiver_, other->media_button_receiver_);
  swap(notification_, other->notification_);
  swap(pointer_speed_, other->pointer_speed_);
  swap(ringtone_, other->ringtone_);
  swap(rotation_, other->rotation_);
  swap(screen_, other->screen_);
  swap(setup_wizard_has_run_, other->setup_wizard_has_run_);
  swap(show_battery_percent_, other->show_battery_percent_);
  swap(show_gtalk_service_status_, other->show_gtalk_service_status_);
  swap(sip_, other->sip_);
  swap(sound_effects_enabled_, other->sound_effects_enabled_);
  swap(system_locales_, other->system_locales_);
  swap(text_, other->text_);
  swap(time_12_24_, other->time_12_24_);
  swap(tty_mode_, other->tty_mode_);
  swap(vibrate_, other->vibrate_);
  swap(volume_, other->volume_);
  swap(when_to_make_wifi_calls_, other->when_to_make_wifi_calls_);
}

std::string SystemSettingsProto::GetTypeName() const {
  return "android.providers.settings.SystemSettingsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace settings
}  // namespace providers
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Alarm* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Alarm >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Alarm >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Bluetooth* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Bluetooth >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Bluetooth >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_DevOptions* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_DevOptions >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_DevOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_DtmfTone* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_DtmfTone >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_DtmfTone >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_HapticFeedback* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_HapticFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_HapticFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Lockscreen* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Lockscreen >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Lockscreen >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Notification* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Ringtone* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Ringtone >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Ringtone >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Rotation* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Rotation >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Rotation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Screen* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Screen >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Screen >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Sip* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Sip >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Sip >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Text* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Text >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Text >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Vibrate* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Vibrate >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Vibrate >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto_Volume* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto_Volume >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto_Volume >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SystemSettingsProto* Arena::CreateMaybeMessage< ::android::providers::settings::SystemSettingsProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SystemSettingsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
