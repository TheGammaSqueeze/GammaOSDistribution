// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/windowcontainerthumbnail.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowcontainerthumbnail_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowcontainerthumbnail_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/server/surfaceanimator.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowcontainerthumbnail_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowcontainerthumbnail_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace wm {
class WindowContainerThumbnailProto;
class WindowContainerThumbnailProtoDefaultTypeInternal;
extern WindowContainerThumbnailProtoDefaultTypeInternal _WindowContainerThumbnailProto_default_instance_;
}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::wm::WindowContainerThumbnailProto* Arena::CreateMaybeMessage<::com::android::server::wm::WindowContainerThumbnailProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace wm {

// ===================================================================

class WindowContainerThumbnailProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.wm.WindowContainerThumbnailProto) */ {
 public:
  WindowContainerThumbnailProto();
  virtual ~WindowContainerThumbnailProto();

  WindowContainerThumbnailProto(const WindowContainerThumbnailProto& from);
  WindowContainerThumbnailProto(WindowContainerThumbnailProto&& from) noexcept
    : WindowContainerThumbnailProto() {
    *this = ::std::move(from);
  }

  inline WindowContainerThumbnailProto& operator=(const WindowContainerThumbnailProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowContainerThumbnailProto& operator=(WindowContainerThumbnailProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WindowContainerThumbnailProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowContainerThumbnailProto* internal_default_instance() {
    return reinterpret_cast<const WindowContainerThumbnailProto*>(
               &_WindowContainerThumbnailProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WindowContainerThumbnailProto& a, WindowContainerThumbnailProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowContainerThumbnailProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowContainerThumbnailProto* New() const final {
    return CreateMaybeMessage<WindowContainerThumbnailProto>(nullptr);
  }

  WindowContainerThumbnailProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowContainerThumbnailProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WindowContainerThumbnailProto& from);
  void MergeFrom(const WindowContainerThumbnailProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowContainerThumbnailProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.wm.WindowContainerThumbnailProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSurfaceAnimatorFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional .com.android.server.wm.SurfaceAnimatorProto surface_animator = 3;
  bool has_surface_animator() const;
  void clear_surface_animator();
  const ::com::android::server::wm::SurfaceAnimatorProto& surface_animator() const;
  ::com::android::server::wm::SurfaceAnimatorProto* release_surface_animator();
  ::com::android::server::wm::SurfaceAnimatorProto* mutable_surface_animator();
  void set_allocated_surface_animator(::com::android::server::wm::SurfaceAnimatorProto* surface_animator);

  // optional int32 width = 1;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.wm.WindowContainerThumbnailProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::wm::SurfaceAnimatorProto* surface_animator_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowcontainerthumbnail_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WindowContainerThumbnailProto

// optional int32 width = 1;
inline bool WindowContainerThumbnailProto::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowContainerThumbnailProto::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowContainerThumbnailProto::width() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerThumbnailProto.width)
  return width_;
}
inline void WindowContainerThumbnailProto::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowContainerThumbnailProto.width)
}

// optional int32 height = 2;
inline bool WindowContainerThumbnailProto::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowContainerThumbnailProto::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowContainerThumbnailProto::height() const {
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerThumbnailProto.height)
  return height_;
}
inline void WindowContainerThumbnailProto::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.wm.WindowContainerThumbnailProto.height)
}

// optional .com.android.server.wm.SurfaceAnimatorProto surface_animator = 3;
inline bool WindowContainerThumbnailProto::has_surface_animator() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::com::android::server::wm::SurfaceAnimatorProto& WindowContainerThumbnailProto::surface_animator() const {
  const ::com::android::server::wm::SurfaceAnimatorProto* p = surface_animator_;
  // @@protoc_insertion_point(field_get:com.android.server.wm.WindowContainerThumbnailProto.surface_animator)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::SurfaceAnimatorProto*>(
      &::com::android::server::wm::_SurfaceAnimatorProto_default_instance_);
}
inline ::com::android::server::wm::SurfaceAnimatorProto* WindowContainerThumbnailProto::release_surface_animator() {
  // @@protoc_insertion_point(field_release:com.android.server.wm.WindowContainerThumbnailProto.surface_animator)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::SurfaceAnimatorProto* temp = surface_animator_;
  surface_animator_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::SurfaceAnimatorProto* WindowContainerThumbnailProto::mutable_surface_animator() {
  _has_bits_[0] |= 0x00000001u;
  if (surface_animator_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::SurfaceAnimatorProto>(GetArenaNoVirtual());
    surface_animator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.wm.WindowContainerThumbnailProto.surface_animator)
  return surface_animator_;
}
inline void WindowContainerThumbnailProto::set_allocated_surface_animator(::com::android::server::wm::SurfaceAnimatorProto* surface_animator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(surface_animator_);
  }
  if (surface_animator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      surface_animator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, surface_animator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  surface_animator_ = surface_animator;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.wm.WindowContainerThumbnailProto.surface_animator)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowcontainerthumbnail_2eproto
