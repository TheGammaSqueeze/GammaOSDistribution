// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/otaupdate/updateengine_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fotaupdate_2fupdateengine_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fotaupdate_2fupdateengine_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fotaupdate_2fupdateengine_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fotaupdate_2fupdateengine_5fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace stats {
namespace otaupdate {

enum PayloadType : int {
  FULL = 10000,
  DELTA = 10001
};
bool PayloadType_IsValid(int value);
constexpr PayloadType PayloadType_MIN = FULL;
constexpr PayloadType PayloadType_MAX = DELTA;
constexpr int PayloadType_ARRAYSIZE = PayloadType_MAX + 1;

const std::string& PayloadType_Name(PayloadType value);
template<typename T>
inline const std::string& PayloadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PayloadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PayloadType_Name.");
  return PayloadType_Name(static_cast<PayloadType>(enum_t_value));
}
bool PayloadType_Parse(
    const std::string& name, PayloadType* value);
enum AttemptResult : int {
  UPDATE_SUCCEEDED = 10000,
  INTERNAL_ERROR = 10001,
  PAYLOAD_DOWNLOAD_ERROR = 10002,
  METADATA_MALFORMED = 10003,
  OPERATION_MALFORMED = 10004,
  OPERATION_EXECUTION_ERROR = 10005,
  METADATA_VERIFICATION_FAILED = 10006,
  PAYLOAD_VERIFICATION_FAILED = 10007,
  VERIFICATION_FAILED = 10008,
  POSTINSTALL_FAILED = 10009,
  ABNORMAL_TERMINATION = 10010,
  UPDATE_CANCELED = 10011,
  UPDATE_SUCCEEDED_NOT_ACTIVE = 10012
};
bool AttemptResult_IsValid(int value);
constexpr AttemptResult AttemptResult_MIN = UPDATE_SUCCEEDED;
constexpr AttemptResult AttemptResult_MAX = UPDATE_SUCCEEDED_NOT_ACTIVE;
constexpr int AttemptResult_ARRAYSIZE = AttemptResult_MAX + 1;

const std::string& AttemptResult_Name(AttemptResult value);
template<typename T>
inline const std::string& AttemptResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttemptResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttemptResult_Name.");
  return AttemptResult_Name(static_cast<AttemptResult>(enum_t_value));
}
bool AttemptResult_Parse(
    const std::string& name, AttemptResult* value);
enum ErrorCode : int {
  SUCCESS = 10000,
  ERROR = 10001,
  FILESYSTEM_COPIER_ERROR = 10004,
  POST_INSTALL_RUNNER_ERROR = 10005,
  PAYLOAD_MISMATCHED_TYPE_ERROR = 10006,
  INSTALL_DEVICE_OPEN_ERROR = 10007,
  KERNEL_DEVICE_OPEN_ERROR = 10008,
  DOWNLOAD_TRANSFER_ERROR = 10009,
  PAYLOAD_HASH_MISMATCH_ERROR = 10010,
  PAYLOAD_SIZE_MISMATCH_ERROR = 10011,
  DOWNLOAD_PAYLOAD_VERIFICATION_ERROR = 10012,
  DOWNLOAD_NEW_PARTITION_INFO_ERROR = 10013,
  DOWNLOAD_WRITE_ERROR = 10014,
  NEW_ROOTFS_VERIFICATION_ERROR = 10015,
  SIGNED_DELTA_PAYLOAD_EXPECTED_ERROR = 10017,
  DOWNLOAD_PAYLOAD_PUB_KEY_VERIFICATION_ERROR = 10018,
  DOWNLOAD_STATE_INITIALIZATION_ERROR = 10020,
  DOWNLOAD_INVALID_METADATA_MAGIC_STRING = 10021,
  DOWNLOAD_SIGNATURE_MISSING_IN_MANIFEST = 10022,
  DOWNLOAD_MANIFEST_PARSE_ERROR = 10023,
  DOWNLOAD_METADATA_SIGNATURE_ERROR = 10024,
  DOWNLOAD_METADATA_SIGNATURE_VERIFICATION_ERROR = 10025,
  DOWNLOAD_METADATA_SIGNATURE_MISMATCH = 10026,
  DOWNLOAD_OPERATION_HASH_VERIFICATION_ERROR = 10027,
  DOWNLOAD_OPERATION_EXECUTION_ERROR = 10028,
  DOWNLOAD_OPERATION_HASH_MISMATCH = 10029,
  DOWNLOAD_INVALID_METADATA_SIZE = 10032,
  DOWNLOAD_INVALID_METADATA_SIGNATURE = 10033,
  DOWNLOAD_OPERATION_HASH_MISSING_ERROR = 10038,
  DOWNLOAD_METADATA_SIGNATURE_MISSING_ERROR = 10039,
  UNSUPPORTED_MAJOR_PAYLOAD_VERSION = 10044,
  UNSUPPORTED_MINOR_PAYLOAD_VERSION = 10045,
  FILESYSTEM_VERIFIER_ERROR = 10047,
  USER_CANCELED = 10048,
  PAYLOAD_TIMESTAMP_ERROR = 10051,
  UPDATED_BUT_NOT_ACTIVE = 10052
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = SUCCESS;
constexpr ErrorCode ErrorCode_MAX = UPDATED_BUT_NOT_ACTIVE;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const std::string& ErrorCode_Name(ErrorCode value);
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ErrorCode_Name(static_cast<ErrorCode>(enum_t_value));
}
bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace otaupdate
}  // namespace stats
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::stats::otaupdate::PayloadType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::otaupdate::AttemptResult> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::otaupdate::ErrorCode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fotaupdate_2fupdateengine_5fenums_2eproto
