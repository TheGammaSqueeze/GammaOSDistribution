// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/view/imefocuscontroller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fimefocuscontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fimefocuscontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fimefocuscontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fimefocuscontroller_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace view {
class ImeFocusControllerProto;
class ImeFocusControllerProtoDefaultTypeInternal;
extern ImeFocusControllerProtoDefaultTypeInternal _ImeFocusControllerProto_default_instance_;
}  // namespace view
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::view::ImeFocusControllerProto* Arena::CreateMaybeMessage<::android::view::ImeFocusControllerProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace view {

// ===================================================================

class ImeFocusControllerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.view.ImeFocusControllerProto) */ {
 public:
  ImeFocusControllerProto();
  virtual ~ImeFocusControllerProto();

  ImeFocusControllerProto(const ImeFocusControllerProto& from);
  ImeFocusControllerProto(ImeFocusControllerProto&& from) noexcept
    : ImeFocusControllerProto() {
    *this = ::std::move(from);
  }

  inline ImeFocusControllerProto& operator=(const ImeFocusControllerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImeFocusControllerProto& operator=(ImeFocusControllerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ImeFocusControllerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImeFocusControllerProto* internal_default_instance() {
    return reinterpret_cast<const ImeFocusControllerProto*>(
               &_ImeFocusControllerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImeFocusControllerProto& a, ImeFocusControllerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ImeFocusControllerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImeFocusControllerProto* New() const final {
    return CreateMaybeMessage<ImeFocusControllerProto>(nullptr);
  }

  ImeFocusControllerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImeFocusControllerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ImeFocusControllerProto& from);
  void MergeFrom(const ImeFocusControllerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImeFocusControllerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.view.ImeFocusControllerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServedViewFieldNumber = 2,
    kNextServedViewFieldNumber = 3,
    kHasImeFocusFieldNumber = 1,
  };
  // optional string served_view = 2;
  bool has_served_view() const;
  void clear_served_view();
  const std::string& served_view() const;
  void set_served_view(const std::string& value);
  void set_served_view(std::string&& value);
  void set_served_view(const char* value);
  void set_served_view(const char* value, size_t size);
  std::string* mutable_served_view();
  std::string* release_served_view();
  void set_allocated_served_view(std::string* served_view);

  // optional string next_served_view = 3;
  bool has_next_served_view() const;
  void clear_next_served_view();
  const std::string& next_served_view() const;
  void set_next_served_view(const std::string& value);
  void set_next_served_view(std::string&& value);
  void set_next_served_view(const char* value);
  void set_next_served_view(const char* value, size_t size);
  std::string* mutable_next_served_view();
  std::string* release_next_served_view();
  void set_allocated_next_served_view(std::string* next_served_view);

  // optional bool has_ime_focus = 1;
  bool has_has_ime_focus() const;
  void clear_has_ime_focus();
  bool has_ime_focus() const;
  void set_has_ime_focus(bool value);

  // @@protoc_insertion_point(class_scope:android.view.ImeFocusControllerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr served_view_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_served_view_;
  bool has_ime_focus_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fimefocuscontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImeFocusControllerProto

// optional bool has_ime_focus = 1;
inline bool ImeFocusControllerProto::has_has_ime_focus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImeFocusControllerProto::clear_has_ime_focus() {
  has_ime_focus_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ImeFocusControllerProto::has_ime_focus() const {
  // @@protoc_insertion_point(field_get:android.view.ImeFocusControllerProto.has_ime_focus)
  return has_ime_focus_;
}
inline void ImeFocusControllerProto::set_has_ime_focus(bool value) {
  _has_bits_[0] |= 0x00000004u;
  has_ime_focus_ = value;
  // @@protoc_insertion_point(field_set:android.view.ImeFocusControllerProto.has_ime_focus)
}

// optional string served_view = 2;
inline bool ImeFocusControllerProto::has_served_view() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImeFocusControllerProto::clear_served_view() {
  served_view_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImeFocusControllerProto::served_view() const {
  // @@protoc_insertion_point(field_get:android.view.ImeFocusControllerProto.served_view)
  return served_view_.GetNoArena();
}
inline void ImeFocusControllerProto::set_served_view(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  served_view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.view.ImeFocusControllerProto.served_view)
}
inline void ImeFocusControllerProto::set_served_view(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  served_view_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.view.ImeFocusControllerProto.served_view)
}
inline void ImeFocusControllerProto::set_served_view(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  served_view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.view.ImeFocusControllerProto.served_view)
}
inline void ImeFocusControllerProto::set_served_view(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  served_view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.view.ImeFocusControllerProto.served_view)
}
inline std::string* ImeFocusControllerProto::mutable_served_view() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.view.ImeFocusControllerProto.served_view)
  return served_view_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImeFocusControllerProto::release_served_view() {
  // @@protoc_insertion_point(field_release:android.view.ImeFocusControllerProto.served_view)
  if (!has_served_view()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return served_view_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImeFocusControllerProto::set_allocated_served_view(std::string* served_view) {
  if (served_view != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  served_view_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), served_view);
  // @@protoc_insertion_point(field_set_allocated:android.view.ImeFocusControllerProto.served_view)
}

// optional string next_served_view = 3;
inline bool ImeFocusControllerProto::has_next_served_view() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImeFocusControllerProto::clear_next_served_view() {
  next_served_view_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImeFocusControllerProto::next_served_view() const {
  // @@protoc_insertion_point(field_get:android.view.ImeFocusControllerProto.next_served_view)
  return next_served_view_.GetNoArena();
}
inline void ImeFocusControllerProto::set_next_served_view(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  next_served_view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.view.ImeFocusControllerProto.next_served_view)
}
inline void ImeFocusControllerProto::set_next_served_view(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  next_served_view_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.view.ImeFocusControllerProto.next_served_view)
}
inline void ImeFocusControllerProto::set_next_served_view(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  next_served_view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.view.ImeFocusControllerProto.next_served_view)
}
inline void ImeFocusControllerProto::set_next_served_view(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  next_served_view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.view.ImeFocusControllerProto.next_served_view)
}
inline std::string* ImeFocusControllerProto::mutable_next_served_view() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.view.ImeFocusControllerProto.next_served_view)
  return next_served_view_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImeFocusControllerProto::release_next_served_view() {
  // @@protoc_insertion_point(field_release:android.view.ImeFocusControllerProto.next_served_view)
  if (!has_next_served_view()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return next_served_view_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImeFocusControllerProto::set_allocated_next_served_view(std::string* next_served_view) {
  if (next_served_view != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  next_served_view_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_served_view);
  // @@protoc_insertion_point(field_set_allocated:android.view.ImeFocusControllerProto.next_served_view)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace view
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fimefocuscontroller_2eproto
