// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/alarmmanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/app/pendingintent.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace app {
class AlarmClockInfoProto;
class AlarmClockInfoProtoDefaultTypeInternal;
extern AlarmClockInfoProtoDefaultTypeInternal _AlarmClockInfoProto_default_instance_;
class AlarmManagerProto;
class AlarmManagerProtoDefaultTypeInternal;
extern AlarmManagerProtoDefaultTypeInternal _AlarmManagerProto_default_instance_;
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::app::AlarmClockInfoProto* Arena::CreateMaybeMessage<::android::app::AlarmClockInfoProto>(Arena*);
template<> ::android::app::AlarmManagerProto* Arena::CreateMaybeMessage<::android::app::AlarmManagerProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace app {

enum AlarmManagerProto_AlarmType : int {
  AlarmManagerProto_AlarmType_RTC_WAKEUP = 0,
  AlarmManagerProto_AlarmType_RTC = 1,
  AlarmManagerProto_AlarmType_ELAPSED_REALTIME_WAKEUP = 2,
  AlarmManagerProto_AlarmType_ELAPSED_REALTIME = 3
};
bool AlarmManagerProto_AlarmType_IsValid(int value);
constexpr AlarmManagerProto_AlarmType AlarmManagerProto_AlarmType_AlarmType_MIN = AlarmManagerProto_AlarmType_RTC_WAKEUP;
constexpr AlarmManagerProto_AlarmType AlarmManagerProto_AlarmType_AlarmType_MAX = AlarmManagerProto_AlarmType_ELAPSED_REALTIME;
constexpr int AlarmManagerProto_AlarmType_AlarmType_ARRAYSIZE = AlarmManagerProto_AlarmType_AlarmType_MAX + 1;

const std::string& AlarmManagerProto_AlarmType_Name(AlarmManagerProto_AlarmType value);
template<typename T>
inline const std::string& AlarmManagerProto_AlarmType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlarmManagerProto_AlarmType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlarmManagerProto_AlarmType_Name.");
  return AlarmManagerProto_AlarmType_Name(static_cast<AlarmManagerProto_AlarmType>(enum_t_value));
}
bool AlarmManagerProto_AlarmType_Parse(
    const std::string& name, AlarmManagerProto_AlarmType* value);
// ===================================================================

class AlarmManagerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.app.AlarmManagerProto) */ {
 public:
  AlarmManagerProto();
  virtual ~AlarmManagerProto();

  AlarmManagerProto(const AlarmManagerProto& from);
  AlarmManagerProto(AlarmManagerProto&& from) noexcept
    : AlarmManagerProto() {
    *this = ::std::move(from);
  }

  inline AlarmManagerProto& operator=(const AlarmManagerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmManagerProto& operator=(AlarmManagerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AlarmManagerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmManagerProto* internal_default_instance() {
    return reinterpret_cast<const AlarmManagerProto*>(
               &_AlarmManagerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlarmManagerProto& a, AlarmManagerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmManagerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmManagerProto* New() const final {
    return CreateMaybeMessage<AlarmManagerProto>(nullptr);
  }

  AlarmManagerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmManagerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AlarmManagerProto& from);
  void MergeFrom(const AlarmManagerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlarmManagerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.app.AlarmManagerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AlarmManagerProto_AlarmType AlarmType;
  static constexpr AlarmType RTC_WAKEUP =
    AlarmManagerProto_AlarmType_RTC_WAKEUP;
  static constexpr AlarmType RTC =
    AlarmManagerProto_AlarmType_RTC;
  static constexpr AlarmType ELAPSED_REALTIME_WAKEUP =
    AlarmManagerProto_AlarmType_ELAPSED_REALTIME_WAKEUP;
  static constexpr AlarmType ELAPSED_REALTIME =
    AlarmManagerProto_AlarmType_ELAPSED_REALTIME;
  static inline bool AlarmType_IsValid(int value) {
    return AlarmManagerProto_AlarmType_IsValid(value);
  }
  static constexpr AlarmType AlarmType_MIN =
    AlarmManagerProto_AlarmType_AlarmType_MIN;
  static constexpr AlarmType AlarmType_MAX =
    AlarmManagerProto_AlarmType_AlarmType_MAX;
  static constexpr int AlarmType_ARRAYSIZE =
    AlarmManagerProto_AlarmType_AlarmType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AlarmType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AlarmType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AlarmType_Name.");
    return AlarmManagerProto_AlarmType_Name(enum_t_value);
  }
  static inline bool AlarmType_Parse(const std::string& name,
      AlarmType* value) {
    return AlarmManagerProto_AlarmType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:android.app.AlarmManagerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto;
};
// -------------------------------------------------------------------

class AlarmClockInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.app.AlarmClockInfoProto) */ {
 public:
  AlarmClockInfoProto();
  virtual ~AlarmClockInfoProto();

  AlarmClockInfoProto(const AlarmClockInfoProto& from);
  AlarmClockInfoProto(AlarmClockInfoProto&& from) noexcept
    : AlarmClockInfoProto() {
    *this = ::std::move(from);
  }

  inline AlarmClockInfoProto& operator=(const AlarmClockInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmClockInfoProto& operator=(AlarmClockInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AlarmClockInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmClockInfoProto* internal_default_instance() {
    return reinterpret_cast<const AlarmClockInfoProto*>(
               &_AlarmClockInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlarmClockInfoProto& a, AlarmClockInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmClockInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmClockInfoProto* New() const final {
    return CreateMaybeMessage<AlarmClockInfoProto>(nullptr);
  }

  AlarmClockInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmClockInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AlarmClockInfoProto& from);
  void MergeFrom(const AlarmClockInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlarmClockInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.app.AlarmClockInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIntentFieldNumber = 2,
    kTriggerTimeMsFieldNumber = 1,
  };
  // optional .android.app.PendingIntentProto show_intent = 2;
  bool has_show_intent() const;
  void clear_show_intent();
  const ::android::app::PendingIntentProto& show_intent() const;
  ::android::app::PendingIntentProto* release_show_intent();
  ::android::app::PendingIntentProto* mutable_show_intent();
  void set_allocated_show_intent(::android::app::PendingIntentProto* show_intent);

  // optional int64 trigger_time_ms = 1;
  bool has_trigger_time_ms() const;
  void clear_trigger_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 trigger_time_ms() const;
  void set_trigger_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.app.AlarmClockInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::app::PendingIntentProto* show_intent_;
  ::PROTOBUF_NAMESPACE_ID::int64 trigger_time_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlarmManagerProto

// -------------------------------------------------------------------

// AlarmClockInfoProto

// optional int64 trigger_time_ms = 1;
inline bool AlarmClockInfoProto::has_trigger_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmClockInfoProto::clear_trigger_time_ms() {
  trigger_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlarmClockInfoProto::trigger_time_ms() const {
  // @@protoc_insertion_point(field_get:android.app.AlarmClockInfoProto.trigger_time_ms)
  return trigger_time_ms_;
}
inline void AlarmClockInfoProto::set_trigger_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  trigger_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.app.AlarmClockInfoProto.trigger_time_ms)
}

// optional .android.app.PendingIntentProto show_intent = 2;
inline bool AlarmClockInfoProto::has_show_intent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::app::PendingIntentProto& AlarmClockInfoProto::show_intent() const {
  const ::android::app::PendingIntentProto* p = show_intent_;
  // @@protoc_insertion_point(field_get:android.app.AlarmClockInfoProto.show_intent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::app::PendingIntentProto*>(
      &::android::app::_PendingIntentProto_default_instance_);
}
inline ::android::app::PendingIntentProto* AlarmClockInfoProto::release_show_intent() {
  // @@protoc_insertion_point(field_release:android.app.AlarmClockInfoProto.show_intent)
  _has_bits_[0] &= ~0x00000001u;
  ::android::app::PendingIntentProto* temp = show_intent_;
  show_intent_ = nullptr;
  return temp;
}
inline ::android::app::PendingIntentProto* AlarmClockInfoProto::mutable_show_intent() {
  _has_bits_[0] |= 0x00000001u;
  if (show_intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::app::PendingIntentProto>(GetArenaNoVirtual());
    show_intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.app.AlarmClockInfoProto.show_intent)
  return show_intent_;
}
inline void AlarmClockInfoProto::set_allocated_show_intent(::android::app::PendingIntentProto* show_intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_intent_);
  }
  if (show_intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_intent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  show_intent_ = show_intent;
  // @@protoc_insertion_point(field_set_allocated:android.app.AlarmClockInfoProto.show_intent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace app
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::app::AlarmManagerProto_AlarmType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2falarmmanager_2eproto
