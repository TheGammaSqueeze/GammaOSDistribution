// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/fingerprint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace biometrics {
namespace fingerprint {
class FingerprintServiceDumpProto;
class FingerprintServiceDumpProtoDefaultTypeInternal;
extern FingerprintServiceDumpProtoDefaultTypeInternal _FingerprintServiceDumpProto_default_instance_;
class FingerprintUserStatsProto;
class FingerprintUserStatsProtoDefaultTypeInternal;
extern FingerprintUserStatsProtoDefaultTypeInternal _FingerprintUserStatsProto_default_instance_;
class PerformanceStatsProto;
class PerformanceStatsProtoDefaultTypeInternal;
extern PerformanceStatsProtoDefaultTypeInternal _PerformanceStatsProto_default_instance_;
}  // namespace fingerprint
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::fingerprint::FingerprintServiceDumpProto>(Arena*);
template<> ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto>(Arena*);
template<> ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::fingerprint::PerformanceStatsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace biometrics {
namespace fingerprint {

// ===================================================================

class FingerprintServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto) */ {
 public:
  FingerprintServiceDumpProto();
  virtual ~FingerprintServiceDumpProto();

  FingerprintServiceDumpProto(const FingerprintServiceDumpProto& from);
  FingerprintServiceDumpProto(FingerprintServiceDumpProto&& from) noexcept
    : FingerprintServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline FingerprintServiceDumpProto& operator=(const FingerprintServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FingerprintServiceDumpProto& operator=(FingerprintServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FingerprintServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FingerprintServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const FingerprintServiceDumpProto*>(
               &_FingerprintServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FingerprintServiceDumpProto& a, FingerprintServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FingerprintServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FingerprintServiceDumpProto* New() const final {
    return CreateMaybeMessage<FingerprintServiceDumpProto>(nullptr);
  }

  FingerprintServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FingerprintServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FingerprintServiceDumpProto& from);
  void MergeFrom(const FingerprintServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .com.android.server.biometrics.fingerprint.FingerprintUserStatsProto users = 1;
  int users_size() const;
  void clear_users();
  ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto >*
      mutable_users();
  const ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto& users(int index) const;
  ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto >&
      users() const;

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto > users_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto;
};
// -------------------------------------------------------------------

class FingerprintUserStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto) */ {
 public:
  FingerprintUserStatsProto();
  virtual ~FingerprintUserStatsProto();

  FingerprintUserStatsProto(const FingerprintUserStatsProto& from);
  FingerprintUserStatsProto(FingerprintUserStatsProto&& from) noexcept
    : FingerprintUserStatsProto() {
    *this = ::std::move(from);
  }

  inline FingerprintUserStatsProto& operator=(const FingerprintUserStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FingerprintUserStatsProto& operator=(FingerprintUserStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FingerprintUserStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FingerprintUserStatsProto* internal_default_instance() {
    return reinterpret_cast<const FingerprintUserStatsProto*>(
               &_FingerprintUserStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FingerprintUserStatsProto& a, FingerprintUserStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FingerprintUserStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FingerprintUserStatsProto* New() const final {
    return CreateMaybeMessage<FingerprintUserStatsProto>(nullptr);
  }

  FingerprintUserStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FingerprintUserStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FingerprintUserStatsProto& from);
  void MergeFrom(const FingerprintUserStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FingerprintUserStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.fingerprint.FingerprintUserStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormalFieldNumber = 3,
    kCryptoFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kNumFingerprintsFieldNumber = 2,
  };
  // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto normal = 3;
  bool has_normal() const;
  void clear_normal();
  const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto& normal() const;
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* release_normal();
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* mutable_normal();
  void set_allocated_normal(::com::android::server::biometrics::fingerprint::PerformanceStatsProto* normal);

  // optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto crypto = 4;
  bool has_crypto() const;
  void clear_crypto();
  const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto& crypto() const;
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* release_crypto();
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* mutable_crypto();
  void set_allocated_crypto(::com::android::server::biometrics::fingerprint::PerformanceStatsProto* crypto);

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_fingerprints = 2;
  bool has_num_fingerprints() const;
  void clear_num_fingerprints();
  ::PROTOBUF_NAMESPACE_ID::int32 num_fingerprints() const;
  void set_num_fingerprints(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* normal_;
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* crypto_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_fingerprints_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto;
};
// -------------------------------------------------------------------

class PerformanceStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.fingerprint.PerformanceStatsProto) */ {
 public:
  PerformanceStatsProto();
  virtual ~PerformanceStatsProto();

  PerformanceStatsProto(const PerformanceStatsProto& from);
  PerformanceStatsProto(PerformanceStatsProto&& from) noexcept
    : PerformanceStatsProto() {
    *this = ::std::move(from);
  }

  inline PerformanceStatsProto& operator=(const PerformanceStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformanceStatsProto& operator=(PerformanceStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerformanceStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerformanceStatsProto* internal_default_instance() {
    return reinterpret_cast<const PerformanceStatsProto*>(
               &_PerformanceStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerformanceStatsProto& a, PerformanceStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformanceStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerformanceStatsProto* New() const final {
    return CreateMaybeMessage<PerformanceStatsProto>(nullptr);
  }

  PerformanceStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerformanceStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerformanceStatsProto& from);
  void MergeFrom(const PerformanceStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerformanceStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.fingerprint.PerformanceStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptFieldNumber = 1,
    kRejectFieldNumber = 2,
    kAcquireFieldNumber = 3,
    kLockoutFieldNumber = 4,
    kPermanentLockoutFieldNumber = 5,
  };
  // optional int32 accept = 1;
  bool has_accept() const;
  void clear_accept();
  ::PROTOBUF_NAMESPACE_ID::int32 accept() const;
  void set_accept(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reject = 2;
  bool has_reject() const;
  void clear_reject();
  ::PROTOBUF_NAMESPACE_ID::int32 reject() const;
  void set_reject(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 acquire = 3;
  bool has_acquire() const;
  void clear_acquire();
  ::PROTOBUF_NAMESPACE_ID::int32 acquire() const;
  void set_acquire(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 lockout = 4;
  bool has_lockout() const;
  void clear_lockout();
  ::PROTOBUF_NAMESPACE_ID::int32 lockout() const;
  void set_lockout(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 permanent_lockout = 5;
  bool has_permanent_lockout() const;
  void clear_permanent_lockout();
  ::PROTOBUF_NAMESPACE_ID::int32 permanent_lockout() const;
  void set_permanent_lockout(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.fingerprint.PerformanceStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 accept_;
  ::PROTOBUF_NAMESPACE_ID::int32 reject_;
  ::PROTOBUF_NAMESPACE_ID::int32 acquire_;
  ::PROTOBUF_NAMESPACE_ID::int32 lockout_;
  ::PROTOBUF_NAMESPACE_ID::int32 permanent_lockout_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FingerprintServiceDumpProto

// repeated .com.android.server.biometrics.fingerprint.FingerprintUserStatsProto users = 1;
inline int FingerprintServiceDumpProto::users_size() const {
  return users_.size();
}
inline void FingerprintServiceDumpProto::clear_users() {
  users_.Clear();
}
inline ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto* FingerprintServiceDumpProto::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto >*
FingerprintServiceDumpProto::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto.users)
  return &users_;
}
inline const ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto& FingerprintServiceDumpProto::users(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto.users)
  return users_.Get(index);
}
inline ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto* FingerprintServiceDumpProto::add_users() {
  // @@protoc_insertion_point(field_add:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto.users)
  return users_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::fingerprint::FingerprintUserStatsProto >&
FingerprintServiceDumpProto::users() const {
  // @@protoc_insertion_point(field_list:com.android.server.biometrics.fingerprint.FingerprintServiceDumpProto.users)
  return users_;
}

// -------------------------------------------------------------------

// FingerprintUserStatsProto

// optional int32 user_id = 1;
inline bool FingerprintUserStatsProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FingerprintUserStatsProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FingerprintUserStatsProto::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.user_id)
  return user_id_;
}
inline void FingerprintUserStatsProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.user_id)
}

// optional int32 num_fingerprints = 2;
inline bool FingerprintUserStatsProto::has_num_fingerprints() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FingerprintUserStatsProto::clear_num_fingerprints() {
  num_fingerprints_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FingerprintUserStatsProto::num_fingerprints() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.num_fingerprints)
  return num_fingerprints_;
}
inline void FingerprintUserStatsProto::set_num_fingerprints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_fingerprints_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.num_fingerprints)
}

// optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto normal = 3;
inline bool FingerprintUserStatsProto::has_normal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FingerprintUserStatsProto::clear_normal() {
  if (normal_ != nullptr) normal_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto& FingerprintUserStatsProto::normal() const {
  const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* p = normal_;
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.normal)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto*>(
      &::com::android::server::biometrics::fingerprint::_PerformanceStatsProto_default_instance_);
}
inline ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* FingerprintUserStatsProto::release_normal() {
  // @@protoc_insertion_point(field_release:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.normal)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* temp = normal_;
  normal_ = nullptr;
  return temp;
}
inline ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* FingerprintUserStatsProto::mutable_normal() {
  _has_bits_[0] |= 0x00000001u;
  if (normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::biometrics::fingerprint::PerformanceStatsProto>(GetArenaNoVirtual());
    normal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.normal)
  return normal_;
}
inline void FingerprintUserStatsProto::set_allocated_normal(::com::android::server::biometrics::fingerprint::PerformanceStatsProto* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete normal_;
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.normal)
}

// optional .com.android.server.biometrics.fingerprint.PerformanceStatsProto crypto = 4;
inline bool FingerprintUserStatsProto::has_crypto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FingerprintUserStatsProto::clear_crypto() {
  if (crypto_ != nullptr) crypto_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto& FingerprintUserStatsProto::crypto() const {
  const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* p = crypto_;
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.crypto)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::biometrics::fingerprint::PerformanceStatsProto*>(
      &::com::android::server::biometrics::fingerprint::_PerformanceStatsProto_default_instance_);
}
inline ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* FingerprintUserStatsProto::release_crypto() {
  // @@protoc_insertion_point(field_release:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.crypto)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* temp = crypto_;
  crypto_ = nullptr;
  return temp;
}
inline ::com::android::server::biometrics::fingerprint::PerformanceStatsProto* FingerprintUserStatsProto::mutable_crypto() {
  _has_bits_[0] |= 0x00000002u;
  if (crypto_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::biometrics::fingerprint::PerformanceStatsProto>(GetArenaNoVirtual());
    crypto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.crypto)
  return crypto_;
}
inline void FingerprintUserStatsProto::set_allocated_crypto(::com::android::server::biometrics::fingerprint::PerformanceStatsProto* crypto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete crypto_;
  }
  if (crypto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crypto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crypto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  crypto_ = crypto;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.biometrics.fingerprint.FingerprintUserStatsProto.crypto)
}

// -------------------------------------------------------------------

// PerformanceStatsProto

// optional int32 accept = 1;
inline bool PerformanceStatsProto::has_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerformanceStatsProto::clear_accept() {
  accept_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceStatsProto::accept() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.PerformanceStatsProto.accept)
  return accept_;
}
inline void PerformanceStatsProto::set_accept(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  accept_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.fingerprint.PerformanceStatsProto.accept)
}

// optional int32 reject = 2;
inline bool PerformanceStatsProto::has_reject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerformanceStatsProto::clear_reject() {
  reject_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceStatsProto::reject() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.PerformanceStatsProto.reject)
  return reject_;
}
inline void PerformanceStatsProto::set_reject(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  reject_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.fingerprint.PerformanceStatsProto.reject)
}

// optional int32 acquire = 3;
inline bool PerformanceStatsProto::has_acquire() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerformanceStatsProto::clear_acquire() {
  acquire_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceStatsProto::acquire() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.PerformanceStatsProto.acquire)
  return acquire_;
}
inline void PerformanceStatsProto::set_acquire(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  acquire_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.fingerprint.PerformanceStatsProto.acquire)
}

// optional int32 lockout = 4;
inline bool PerformanceStatsProto::has_lockout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerformanceStatsProto::clear_lockout() {
  lockout_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceStatsProto::lockout() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.PerformanceStatsProto.lockout)
  return lockout_;
}
inline void PerformanceStatsProto::set_lockout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lockout_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.fingerprint.PerformanceStatsProto.lockout)
}

// optional int32 permanent_lockout = 5;
inline bool PerformanceStatsProto::has_permanent_lockout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerformanceStatsProto::clear_permanent_lockout() {
  permanent_lockout_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceStatsProto::permanent_lockout() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.fingerprint.PerformanceStatsProto.permanent_lockout)
  return permanent_lockout_;
}
inline void PerformanceStatsProto::set_permanent_lockout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  permanent_lockout_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.fingerprint.PerformanceStatsProto.permanent_lockout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fingerprint
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2ffingerprint_2eproto
