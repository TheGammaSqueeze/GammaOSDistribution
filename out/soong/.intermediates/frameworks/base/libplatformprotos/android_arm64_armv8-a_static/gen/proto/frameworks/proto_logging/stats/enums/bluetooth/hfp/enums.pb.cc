// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/bluetooth/hfp/enums.proto

#include "frameworks/proto_logging/stats/enums/bluetooth/hfp/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace bluetooth {
namespace hfp {
}  // namespace hfp
}  // namespace bluetooth
}  // namespace android
namespace android {
namespace bluetooth {
namespace hfp {
bool ScoCodec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ScoCodec_strings[3] = {};

static const char ScoCodec_names[] =
  "SCO_CODEC_CVSD"
  "SCO_CODEC_MSBC"
  "SCO_CODEC_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ScoCodec_entries[] = {
  { {ScoCodec_names + 0, 14}, 1 },
  { {ScoCodec_names + 14, 14}, 2 },
  { {ScoCodec_names + 28, 17}, 0 },
};

static const int ScoCodec_entries_by_number[] = {
  2, // 0 -> SCO_CODEC_UNKNOWN
  0, // 1 -> SCO_CODEC_CVSD
  1, // 2 -> SCO_CODEC_MSBC
};

const std::string& ScoCodec_Name(
    ScoCodec value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ScoCodec_entries,
          ScoCodec_entries_by_number,
          3, ScoCodec_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ScoCodec_entries,
      ScoCodec_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ScoCodec_strings[idx].get();
}
bool ScoCodec_Parse(
    const std::string& name, ScoCodec* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ScoCodec_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ScoCodec>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hfp
}  // namespace bluetooth
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
