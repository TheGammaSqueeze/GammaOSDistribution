// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/appstatetracker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/server/statlogger.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
class AppStateTrackerProto;
class AppStateTrackerProtoDefaultTypeInternal;
extern AppStateTrackerProtoDefaultTypeInternal _AppStateTrackerProto_default_instance_;
class AppStateTrackerProto_ExemptedPackage;
class AppStateTrackerProto_ExemptedPackageDefaultTypeInternal;
extern AppStateTrackerProto_ExemptedPackageDefaultTypeInternal _AppStateTrackerProto_ExemptedPackage_default_instance_;
class AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages;
class AppStateTrackerProto_RunAnyInBackgroundRestrictedPackagesDefaultTypeInternal;
extern AppStateTrackerProto_RunAnyInBackgroundRestrictedPackagesDefaultTypeInternal _AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_default_instance_;
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::AppStateTrackerProto* Arena::CreateMaybeMessage<::com::android::server::AppStateTrackerProto>(Arena*);
template<> ::com::android::server::AppStateTrackerProto_ExemptedPackage* Arena::CreateMaybeMessage<::com::android::server::AppStateTrackerProto_ExemptedPackage>(Arena*);
template<> ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* Arena::CreateMaybeMessage<::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {

// ===================================================================

class AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages) */ {
 public:
  AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages();
  virtual ~AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages();

  AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages(const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& from);
  AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages(AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages&& from) noexcept
    : AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages() {
    *this = ::std::move(from);
  }

  inline AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& operator=(const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& operator=(AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* internal_default_instance() {
    return reinterpret_cast<const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages*>(
               &_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& a, AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& b) {
    a.Swap(&b);
  }
  inline void Swap(AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* New() const final {
    return CreateMaybeMessage<AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages>(nullptr);
  }

  AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& from);
  void MergeFrom(const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // optional string package_name = 2;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto;
};
// -------------------------------------------------------------------

class AppStateTrackerProto_ExemptedPackage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.AppStateTrackerProto.ExemptedPackage) */ {
 public:
  AppStateTrackerProto_ExemptedPackage();
  virtual ~AppStateTrackerProto_ExemptedPackage();

  AppStateTrackerProto_ExemptedPackage(const AppStateTrackerProto_ExemptedPackage& from);
  AppStateTrackerProto_ExemptedPackage(AppStateTrackerProto_ExemptedPackage&& from) noexcept
    : AppStateTrackerProto_ExemptedPackage() {
    *this = ::std::move(from);
  }

  inline AppStateTrackerProto_ExemptedPackage& operator=(const AppStateTrackerProto_ExemptedPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppStateTrackerProto_ExemptedPackage& operator=(AppStateTrackerProto_ExemptedPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppStateTrackerProto_ExemptedPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppStateTrackerProto_ExemptedPackage* internal_default_instance() {
    return reinterpret_cast<const AppStateTrackerProto_ExemptedPackage*>(
               &_AppStateTrackerProto_ExemptedPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppStateTrackerProto_ExemptedPackage& a, AppStateTrackerProto_ExemptedPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(AppStateTrackerProto_ExemptedPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppStateTrackerProto_ExemptedPackage* New() const final {
    return CreateMaybeMessage<AppStateTrackerProto_ExemptedPackage>(nullptr);
  }

  AppStateTrackerProto_ExemptedPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppStateTrackerProto_ExemptedPackage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppStateTrackerProto_ExemptedPackage& from);
  void MergeFrom(const AppStateTrackerProto_ExemptedPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppStateTrackerProto_ExemptedPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.AppStateTrackerProto.ExemptedPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // optional string package_name = 2;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.AppStateTrackerProto.ExemptedPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto;
};
// -------------------------------------------------------------------

class AppStateTrackerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.AppStateTrackerProto) */ {
 public:
  AppStateTrackerProto();
  virtual ~AppStateTrackerProto();

  AppStateTrackerProto(const AppStateTrackerProto& from);
  AppStateTrackerProto(AppStateTrackerProto&& from) noexcept
    : AppStateTrackerProto() {
    *this = ::std::move(from);
  }

  inline AppStateTrackerProto& operator=(const AppStateTrackerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppStateTrackerProto& operator=(AppStateTrackerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppStateTrackerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppStateTrackerProto* internal_default_instance() {
    return reinterpret_cast<const AppStateTrackerProto*>(
               &_AppStateTrackerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppStateTrackerProto& a, AppStateTrackerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AppStateTrackerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppStateTrackerProto* New() const final {
    return CreateMaybeMessage<AppStateTrackerProto>(nullptr);
  }

  AppStateTrackerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppStateTrackerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppStateTrackerProto& from);
  void MergeFrom(const AppStateTrackerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppStateTrackerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.AppStateTrackerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages RunAnyInBackgroundRestrictedPackages;
  typedef AppStateTrackerProto_ExemptedPackage ExemptedPackage;

  // accessors -------------------------------------------------------

  enum : int {
    kActiveUidsFieldNumber = 2,
    kPowerSaveExemptAppIdsFieldNumber = 3,
    kTempPowerSaveExemptAppIdsFieldNumber = 4,
    kRunAnyInBackgroundRestrictedPackagesFieldNumber = 5,
    kExemptedBucketPackagesFieldNumber = 10,
    kForegroundUidsFieldNumber = 11,
    kPowerSaveUserExemptAppIdsFieldNumber = 12,
    kStatsFieldNumber = 9,
    kForcedAppStandbyFeatureEnabledFieldNumber = 13,
    kForceAllAppsStandbyFieldNumber = 1,
    kIsSmallBatteryDeviceFieldNumber = 6,
    kForceAllAppsStandbyForSmallBatteryFieldNumber = 7,
    kIsPluggedInFieldNumber = 8,
  };
  // repeated int32 active_uids = 2;
  int active_uids_size() const;
  void clear_active_uids();
  ::PROTOBUF_NAMESPACE_ID::int32 active_uids(int index) const;
  void set_active_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_active_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      active_uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_active_uids();

  // repeated int32 power_save_exempt_app_ids = 3;
  int power_save_exempt_app_ids_size() const;
  void clear_power_save_exempt_app_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 power_save_exempt_app_ids(int index) const;
  void set_power_save_exempt_app_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_power_save_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      power_save_exempt_app_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_power_save_exempt_app_ids();

  // repeated int32 temp_power_save_exempt_app_ids = 4;
  int temp_power_save_exempt_app_ids_size() const;
  void clear_temp_power_save_exempt_app_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 temp_power_save_exempt_app_ids(int index) const;
  void set_temp_power_save_exempt_app_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_temp_power_save_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      temp_power_save_exempt_app_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_temp_power_save_exempt_app_ids();

  // repeated .com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages run_any_in_background_restricted_packages = 5;
  int run_any_in_background_restricted_packages_size() const;
  void clear_run_any_in_background_restricted_packages();
  ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* mutable_run_any_in_background_restricted_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages >*
      mutable_run_any_in_background_restricted_packages();
  const ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& run_any_in_background_restricted_packages(int index) const;
  ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* add_run_any_in_background_restricted_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages >&
      run_any_in_background_restricted_packages() const;

  // repeated .com.android.server.AppStateTrackerProto.ExemptedPackage exempted_bucket_packages = 10;
  int exempted_bucket_packages_size() const;
  void clear_exempted_bucket_packages();
  ::com::android::server::AppStateTrackerProto_ExemptedPackage* mutable_exempted_bucket_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_ExemptedPackage >*
      mutable_exempted_bucket_packages();
  const ::com::android::server::AppStateTrackerProto_ExemptedPackage& exempted_bucket_packages(int index) const;
  ::com::android::server::AppStateTrackerProto_ExemptedPackage* add_exempted_bucket_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_ExemptedPackage >&
      exempted_bucket_packages() const;

  // repeated int32 foreground_uids = 11;
  int foreground_uids_size() const;
  void clear_foreground_uids();
  ::PROTOBUF_NAMESPACE_ID::int32 foreground_uids(int index) const;
  void set_foreground_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_foreground_uids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      foreground_uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_foreground_uids();

  // repeated int32 power_save_user_exempt_app_ids = 12;
  int power_save_user_exempt_app_ids_size() const;
  void clear_power_save_user_exempt_app_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 power_save_user_exempt_app_ids(int index) const;
  void set_power_save_user_exempt_app_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_power_save_user_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      power_save_user_exempt_app_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_power_save_user_exempt_app_ids();

  // optional .com.android.server.StatLoggerProto stats = 9;
  bool has_stats() const;
  void clear_stats();
  const ::com::android::server::StatLoggerProto& stats() const;
  ::com::android::server::StatLoggerProto* release_stats();
  ::com::android::server::StatLoggerProto* mutable_stats();
  void set_allocated_stats(::com::android::server::StatLoggerProto* stats);

  // optional bool forced_app_standby_feature_enabled = 13;
  bool has_forced_app_standby_feature_enabled() const;
  void clear_forced_app_standby_feature_enabled();
  bool forced_app_standby_feature_enabled() const;
  void set_forced_app_standby_feature_enabled(bool value);

  // optional bool force_all_apps_standby = 1;
  bool has_force_all_apps_standby() const;
  void clear_force_all_apps_standby();
  bool force_all_apps_standby() const;
  void set_force_all_apps_standby(bool value);

  // optional bool is_small_battery_device = 6;
  bool has_is_small_battery_device() const;
  void clear_is_small_battery_device();
  bool is_small_battery_device() const;
  void set_is_small_battery_device(bool value);

  // optional bool force_all_apps_standby_for_small_battery = 7;
  bool has_force_all_apps_standby_for_small_battery() const;
  void clear_force_all_apps_standby_for_small_battery();
  bool force_all_apps_standby_for_small_battery() const;
  void set_force_all_apps_standby_for_small_battery(bool value);

  // optional bool is_plugged_in = 8;
  bool has_is_plugged_in() const;
  void clear_is_plugged_in();
  bool is_plugged_in() const;
  void set_is_plugged_in(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.AppStateTrackerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > active_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > power_save_exempt_app_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > temp_power_save_exempt_app_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages > run_any_in_background_restricted_packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_ExemptedPackage > exempted_bucket_packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > foreground_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > power_save_user_exempt_app_ids_;
  ::com::android::server::StatLoggerProto* stats_;
  bool forced_app_standby_feature_enabled_;
  bool force_all_apps_standby_;
  bool is_small_battery_device_;
  bool force_all_apps_standby_for_small_battery_;
  bool is_plugged_in_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages

// optional int32 uid = 1;
inline bool AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.uid)
  return uid_;
}
inline void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.uid)
}

// optional string package_name = 2;
inline bool AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::package_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.package_name)
  return package_name_.GetNoArena();
}
inline void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.package_name)
}
inline void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.package_name)
}
inline void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.package_name)
}
inline void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.package_name)
}
inline std::string* AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::release_package_name() {
  // @@protoc_insertion_point(field_release:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages.package_name)
}

// -------------------------------------------------------------------

// AppStateTrackerProto_ExemptedPackage

// optional int32 user_id = 1;
inline bool AppStateTrackerProto_ExemptedPackage::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppStateTrackerProto_ExemptedPackage::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppStateTrackerProto_ExemptedPackage::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.ExemptedPackage.user_id)
  return user_id_;
}
inline void AppStateTrackerProto_ExemptedPackage::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.ExemptedPackage.user_id)
}

// optional string package_name = 2;
inline bool AppStateTrackerProto_ExemptedPackage::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppStateTrackerProto_ExemptedPackage::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppStateTrackerProto_ExemptedPackage::package_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.ExemptedPackage.package_name)
  return package_name_.GetNoArena();
}
inline void AppStateTrackerProto_ExemptedPackage::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.ExemptedPackage.package_name)
}
inline void AppStateTrackerProto_ExemptedPackage::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.AppStateTrackerProto.ExemptedPackage.package_name)
}
inline void AppStateTrackerProto_ExemptedPackage::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.AppStateTrackerProto.ExemptedPackage.package_name)
}
inline void AppStateTrackerProto_ExemptedPackage::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.AppStateTrackerProto.ExemptedPackage.package_name)
}
inline std::string* AppStateTrackerProto_ExemptedPackage::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.AppStateTrackerProto.ExemptedPackage.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppStateTrackerProto_ExemptedPackage::release_package_name() {
  // @@protoc_insertion_point(field_release:com.android.server.AppStateTrackerProto.ExemptedPackage.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppStateTrackerProto_ExemptedPackage::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.AppStateTrackerProto.ExemptedPackage.package_name)
}

// -------------------------------------------------------------------

// AppStateTrackerProto

// optional bool forced_app_standby_feature_enabled = 13;
inline bool AppStateTrackerProto::has_forced_app_standby_feature_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppStateTrackerProto::clear_forced_app_standby_feature_enabled() {
  forced_app_standby_feature_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AppStateTrackerProto::forced_app_standby_feature_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.forced_app_standby_feature_enabled)
  return forced_app_standby_feature_enabled_;
}
inline void AppStateTrackerProto::set_forced_app_standby_feature_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  forced_app_standby_feature_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.forced_app_standby_feature_enabled)
}

// optional bool force_all_apps_standby = 1;
inline bool AppStateTrackerProto::has_force_all_apps_standby() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppStateTrackerProto::clear_force_all_apps_standby() {
  force_all_apps_standby_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AppStateTrackerProto::force_all_apps_standby() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.force_all_apps_standby)
  return force_all_apps_standby_;
}
inline void AppStateTrackerProto::set_force_all_apps_standby(bool value) {
  _has_bits_[0] |= 0x00000004u;
  force_all_apps_standby_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.force_all_apps_standby)
}

// repeated int32 active_uids = 2;
inline int AppStateTrackerProto::active_uids_size() const {
  return active_uids_.size();
}
inline void AppStateTrackerProto::clear_active_uids() {
  active_uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppStateTrackerProto::active_uids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.active_uids)
  return active_uids_.Get(index);
}
inline void AppStateTrackerProto::set_active_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  active_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.active_uids)
}
inline void AppStateTrackerProto::add_active_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  active_uids_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.AppStateTrackerProto.active_uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AppStateTrackerProto::active_uids() const {
  // @@protoc_insertion_point(field_list:com.android.server.AppStateTrackerProto.active_uids)
  return active_uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AppStateTrackerProto::mutable_active_uids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.AppStateTrackerProto.active_uids)
  return &active_uids_;
}

// repeated int32 foreground_uids = 11;
inline int AppStateTrackerProto::foreground_uids_size() const {
  return foreground_uids_.size();
}
inline void AppStateTrackerProto::clear_foreground_uids() {
  foreground_uids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppStateTrackerProto::foreground_uids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.foreground_uids)
  return foreground_uids_.Get(index);
}
inline void AppStateTrackerProto::set_foreground_uids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  foreground_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.foreground_uids)
}
inline void AppStateTrackerProto::add_foreground_uids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  foreground_uids_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.AppStateTrackerProto.foreground_uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AppStateTrackerProto::foreground_uids() const {
  // @@protoc_insertion_point(field_list:com.android.server.AppStateTrackerProto.foreground_uids)
  return foreground_uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AppStateTrackerProto::mutable_foreground_uids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.AppStateTrackerProto.foreground_uids)
  return &foreground_uids_;
}

// repeated int32 power_save_exempt_app_ids = 3;
inline int AppStateTrackerProto::power_save_exempt_app_ids_size() const {
  return power_save_exempt_app_ids_.size();
}
inline void AppStateTrackerProto::clear_power_save_exempt_app_ids() {
  power_save_exempt_app_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppStateTrackerProto::power_save_exempt_app_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.power_save_exempt_app_ids)
  return power_save_exempt_app_ids_.Get(index);
}
inline void AppStateTrackerProto::set_power_save_exempt_app_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  power_save_exempt_app_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.power_save_exempt_app_ids)
}
inline void AppStateTrackerProto::add_power_save_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  power_save_exempt_app_ids_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.AppStateTrackerProto.power_save_exempt_app_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AppStateTrackerProto::power_save_exempt_app_ids() const {
  // @@protoc_insertion_point(field_list:com.android.server.AppStateTrackerProto.power_save_exempt_app_ids)
  return power_save_exempt_app_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AppStateTrackerProto::mutable_power_save_exempt_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.AppStateTrackerProto.power_save_exempt_app_ids)
  return &power_save_exempt_app_ids_;
}

// repeated int32 power_save_user_exempt_app_ids = 12;
inline int AppStateTrackerProto::power_save_user_exempt_app_ids_size() const {
  return power_save_user_exempt_app_ids_.size();
}
inline void AppStateTrackerProto::clear_power_save_user_exempt_app_ids() {
  power_save_user_exempt_app_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppStateTrackerProto::power_save_user_exempt_app_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.power_save_user_exempt_app_ids)
  return power_save_user_exempt_app_ids_.Get(index);
}
inline void AppStateTrackerProto::set_power_save_user_exempt_app_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  power_save_user_exempt_app_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.power_save_user_exempt_app_ids)
}
inline void AppStateTrackerProto::add_power_save_user_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  power_save_user_exempt_app_ids_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.AppStateTrackerProto.power_save_user_exempt_app_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AppStateTrackerProto::power_save_user_exempt_app_ids() const {
  // @@protoc_insertion_point(field_list:com.android.server.AppStateTrackerProto.power_save_user_exempt_app_ids)
  return power_save_user_exempt_app_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AppStateTrackerProto::mutable_power_save_user_exempt_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.AppStateTrackerProto.power_save_user_exempt_app_ids)
  return &power_save_user_exempt_app_ids_;
}

// repeated int32 temp_power_save_exempt_app_ids = 4;
inline int AppStateTrackerProto::temp_power_save_exempt_app_ids_size() const {
  return temp_power_save_exempt_app_ids_.size();
}
inline void AppStateTrackerProto::clear_temp_power_save_exempt_app_ids() {
  temp_power_save_exempt_app_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppStateTrackerProto::temp_power_save_exempt_app_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.temp_power_save_exempt_app_ids)
  return temp_power_save_exempt_app_ids_.Get(index);
}
inline void AppStateTrackerProto::set_temp_power_save_exempt_app_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  temp_power_save_exempt_app_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.temp_power_save_exempt_app_ids)
}
inline void AppStateTrackerProto::add_temp_power_save_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  temp_power_save_exempt_app_ids_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.AppStateTrackerProto.temp_power_save_exempt_app_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AppStateTrackerProto::temp_power_save_exempt_app_ids() const {
  // @@protoc_insertion_point(field_list:com.android.server.AppStateTrackerProto.temp_power_save_exempt_app_ids)
  return temp_power_save_exempt_app_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AppStateTrackerProto::mutable_temp_power_save_exempt_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.AppStateTrackerProto.temp_power_save_exempt_app_ids)
  return &temp_power_save_exempt_app_ids_;
}

// repeated .com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages run_any_in_background_restricted_packages = 5;
inline int AppStateTrackerProto::run_any_in_background_restricted_packages_size() const {
  return run_any_in_background_restricted_packages_.size();
}
inline void AppStateTrackerProto::clear_run_any_in_background_restricted_packages() {
  run_any_in_background_restricted_packages_.Clear();
}
inline ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* AppStateTrackerProto::mutable_run_any_in_background_restricted_packages(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.AppStateTrackerProto.run_any_in_background_restricted_packages)
  return run_any_in_background_restricted_packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages >*
AppStateTrackerProto::mutable_run_any_in_background_restricted_packages() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.AppStateTrackerProto.run_any_in_background_restricted_packages)
  return &run_any_in_background_restricted_packages_;
}
inline const ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& AppStateTrackerProto::run_any_in_background_restricted_packages(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.run_any_in_background_restricted_packages)
  return run_any_in_background_restricted_packages_.Get(index);
}
inline ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* AppStateTrackerProto::add_run_any_in_background_restricted_packages() {
  // @@protoc_insertion_point(field_add:com.android.server.AppStateTrackerProto.run_any_in_background_restricted_packages)
  return run_any_in_background_restricted_packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages >&
AppStateTrackerProto::run_any_in_background_restricted_packages() const {
  // @@protoc_insertion_point(field_list:com.android.server.AppStateTrackerProto.run_any_in_background_restricted_packages)
  return run_any_in_background_restricted_packages_;
}

// optional bool is_small_battery_device = 6;
inline bool AppStateTrackerProto::has_is_small_battery_device() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppStateTrackerProto::clear_is_small_battery_device() {
  is_small_battery_device_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AppStateTrackerProto::is_small_battery_device() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.is_small_battery_device)
  return is_small_battery_device_;
}
inline void AppStateTrackerProto::set_is_small_battery_device(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_small_battery_device_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.is_small_battery_device)
}

// optional bool force_all_apps_standby_for_small_battery = 7;
inline bool AppStateTrackerProto::has_force_all_apps_standby_for_small_battery() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppStateTrackerProto::clear_force_all_apps_standby_for_small_battery() {
  force_all_apps_standby_for_small_battery_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool AppStateTrackerProto::force_all_apps_standby_for_small_battery() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.force_all_apps_standby_for_small_battery)
  return force_all_apps_standby_for_small_battery_;
}
inline void AppStateTrackerProto::set_force_all_apps_standby_for_small_battery(bool value) {
  _has_bits_[0] |= 0x00000010u;
  force_all_apps_standby_for_small_battery_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.force_all_apps_standby_for_small_battery)
}

// optional bool is_plugged_in = 8;
inline bool AppStateTrackerProto::has_is_plugged_in() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppStateTrackerProto::clear_is_plugged_in() {
  is_plugged_in_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool AppStateTrackerProto::is_plugged_in() const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.is_plugged_in)
  return is_plugged_in_;
}
inline void AppStateTrackerProto::set_is_plugged_in(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_plugged_in_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.AppStateTrackerProto.is_plugged_in)
}

// optional .com.android.server.StatLoggerProto stats = 9;
inline bool AppStateTrackerProto::has_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::com::android::server::StatLoggerProto& AppStateTrackerProto::stats() const {
  const ::com::android::server::StatLoggerProto* p = stats_;
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::StatLoggerProto*>(
      &::com::android::server::_StatLoggerProto_default_instance_);
}
inline ::com::android::server::StatLoggerProto* AppStateTrackerProto::release_stats() {
  // @@protoc_insertion_point(field_release:com.android.server.AppStateTrackerProto.stats)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::StatLoggerProto* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::com::android::server::StatLoggerProto* AppStateTrackerProto::mutable_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::StatLoggerProto>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.AppStateTrackerProto.stats)
  return stats_;
}
inline void AppStateTrackerProto::set_allocated_stats(::com::android::server::StatLoggerProto* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.AppStateTrackerProto.stats)
}

// repeated .com.android.server.AppStateTrackerProto.ExemptedPackage exempted_bucket_packages = 10;
inline int AppStateTrackerProto::exempted_bucket_packages_size() const {
  return exempted_bucket_packages_.size();
}
inline void AppStateTrackerProto::clear_exempted_bucket_packages() {
  exempted_bucket_packages_.Clear();
}
inline ::com::android::server::AppStateTrackerProto_ExemptedPackage* AppStateTrackerProto::mutable_exempted_bucket_packages(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.AppStateTrackerProto.exempted_bucket_packages)
  return exempted_bucket_packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_ExemptedPackage >*
AppStateTrackerProto::mutable_exempted_bucket_packages() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.AppStateTrackerProto.exempted_bucket_packages)
  return &exempted_bucket_packages_;
}
inline const ::com::android::server::AppStateTrackerProto_ExemptedPackage& AppStateTrackerProto::exempted_bucket_packages(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.AppStateTrackerProto.exempted_bucket_packages)
  return exempted_bucket_packages_.Get(index);
}
inline ::com::android::server::AppStateTrackerProto_ExemptedPackage* AppStateTrackerProto::add_exempted_bucket_packages() {
  // @@protoc_insertion_point(field_add:com.android.server.AppStateTrackerProto.exempted_bucket_packages)
  return exempted_bucket_packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::AppStateTrackerProto_ExemptedPackage >&
AppStateTrackerProto::exempted_bucket_packages() const {
  // @@protoc_insertion_point(field_list:com.android.server.AppStateTrackerProto.exempted_bucket_packages)
  return exempted_bucket_packages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto
