// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/sensor_service.proto

#include "frameworks/base/core/proto/android/service/sensor_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorDeviceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorDeviceProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorDirectConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorDirectConnectionProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorEventConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEventConnectionProto_FlushInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorEventsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEventsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorEventsProto_RecentEventsLog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorFusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorFusionProto_FusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorListProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorRegistrationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto;
namespace android {
namespace service {
class SensorServiceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorServiceProto> _instance;
} _SensorServiceProto_default_instance_;
class SensorDeviceProto_SensorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorDeviceProto_SensorProto> _instance;
} _SensorDeviceProto_SensorProto_default_instance_;
class SensorDeviceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorDeviceProto> _instance;
} _SensorDeviceProto_default_instance_;
class SensorListProto_SensorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorListProto_SensorProto> _instance;
} _SensorListProto_SensorProto_default_instance_;
class SensorListProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorListProto> _instance;
} _SensorListProto_default_instance_;
class SensorFusionProto_FusionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorFusionProto_FusionProto> _instance;
} _SensorFusionProto_FusionProto_default_instance_;
class SensorFusionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorFusionProto> _instance;
} _SensorFusionProto_default_instance_;
class SensorEventsProto_EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEventsProto_Event> _instance;
} _SensorEventsProto_Event_default_instance_;
class SensorEventsProto_RecentEventsLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEventsProto_RecentEventsLog> _instance;
} _SensorEventsProto_RecentEventsLog_default_instance_;
class SensorEventsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEventsProto> _instance;
} _SensorEventsProto_default_instance_;
class ActiveSensorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveSensorProto> _instance;
} _ActiveSensorProto_default_instance_;
class SensorDirectConnectionProto_SensorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorDirectConnectionProto_SensorProto> _instance;
} _SensorDirectConnectionProto_SensorProto_default_instance_;
class SensorDirectConnectionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorDirectConnectionProto> _instance;
} _SensorDirectConnectionProto_default_instance_;
class SensorEventConnectionProto_FlushInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEventConnectionProto_FlushInfoProto> _instance;
} _SensorEventConnectionProto_FlushInfoProto_default_instance_;
class SensorEventConnectionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorEventConnectionProto> _instance;
} _SensorEventConnectionProto_default_instance_;
class SensorRegistrationInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorRegistrationInfoProto> _instance;
} _SensorRegistrationInfoProto_default_instance_;
}  // namespace service
}  // namespace android
static void InitDefaultsscc_info_ActiveSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_ActiveSensorProto_default_instance_;
    new (ptr) ::android::service::ActiveSensorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::ActiveSensorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorDeviceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorDeviceProto_default_instance_;
    new (ptr) ::android::service::SensorDeviceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorDeviceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorDeviceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorDeviceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {
      &scc_info_SensorDeviceProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SensorDeviceProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorDeviceProto_SensorProto_default_instance_;
    new (ptr) ::android::service::SensorDeviceProto_SensorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorDeviceProto_SensorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorDeviceProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorDeviceProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorDirectConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorDirectConnectionProto_default_instance_;
    new (ptr) ::android::service::SensorDirectConnectionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorDirectConnectionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorDirectConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorDirectConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {
      &scc_info_SensorDirectConnectionProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SensorDirectConnectionProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorDirectConnectionProto_SensorProto_default_instance_;
    new (ptr) ::android::service::SensorDirectConnectionProto_SensorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorDirectConnectionProto_SensorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorDirectConnectionProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorDirectConnectionProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorEventConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorEventConnectionProto_default_instance_;
    new (ptr) ::android::service::SensorEventConnectionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorEventConnectionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorEventConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorEventConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {
      &scc_info_SensorEventConnectionProto_FlushInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SensorEventConnectionProto_FlushInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorEventConnectionProto_FlushInfoProto_default_instance_;
    new (ptr) ::android::service::SensorEventConnectionProto_FlushInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorEventConnectionProto_FlushInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEventConnectionProto_FlushInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorEventConnectionProto_FlushInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorEventsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorEventsProto_default_instance_;
    new (ptr) ::android::service::SensorEventsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorEventsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorEventsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorEventsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {
      &scc_info_SensorEventsProto_RecentEventsLog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SensorEventsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorEventsProto_Event_default_instance_;
    new (ptr) ::android::service::SensorEventsProto_Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorEventsProto_Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorEventsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorEventsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorEventsProto_RecentEventsLog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorEventsProto_RecentEventsLog_default_instance_;
    new (ptr) ::android::service::SensorEventsProto_RecentEventsLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorEventsProto_RecentEventsLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorEventsProto_RecentEventsLog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorEventsProto_RecentEventsLog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {
      &scc_info_SensorEventsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SensorFusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorFusionProto_default_instance_;
    new (ptr) ::android::service::SensorFusionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorFusionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorFusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorFusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {
      &scc_info_SensorFusionProto_FusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SensorFusionProto_FusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorFusionProto_FusionProto_default_instance_;
    new (ptr) ::android::service::SensorFusionProto_FusionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorFusionProto_FusionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorFusionProto_FusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorFusionProto_FusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorListProto_default_instance_;
    new (ptr) ::android::service::SensorListProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorListProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {
      &scc_info_SensorListProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_SensorListProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorListProto_SensorProto_default_instance_;
    new (ptr) ::android::service::SensorListProto_SensorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorListProto_SensorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorListProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorListProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorRegistrationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorRegistrationInfoProto_default_instance_;
    new (ptr) ::android::service::SensorRegistrationInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorRegistrationInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorRegistrationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorRegistrationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_SensorServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorServiceProto_default_instance_;
    new (ptr) ::android::service::SensorServiceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorServiceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SensorServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_SensorServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto}, {
      &scc_info_SensorDeviceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,
      &scc_info_SensorListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,
      &scc_info_SensorFusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,
      &scc_info_SensorEventsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,
      &scc_info_ActiveSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,
      &scc_info_SensorEventConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,
      &scc_info_SensorDirectConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,
      &scc_info_SensorRegistrationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base,}};

namespace android {
namespace service {
bool SensorServiceProto_OperatingModeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SensorServiceProto_OperatingModeEnum_strings[4] = {};

static const char SensorServiceProto_OperatingModeEnum_names[] =
  "OP_MODE_DATA_INJECTION"
  "OP_MODE_NORMAL"
  "OP_MODE_RESTRICTED"
  "OP_MODE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SensorServiceProto_OperatingModeEnum_entries[] = {
  { {SensorServiceProto_OperatingModeEnum_names + 0, 22}, 3 },
  { {SensorServiceProto_OperatingModeEnum_names + 22, 14}, 1 },
  { {SensorServiceProto_OperatingModeEnum_names + 36, 18}, 2 },
  { {SensorServiceProto_OperatingModeEnum_names + 54, 15}, 0 },
};

static const int SensorServiceProto_OperatingModeEnum_entries_by_number[] = {
  3, // 0 -> OP_MODE_UNKNOWN
  1, // 1 -> OP_MODE_NORMAL
  2, // 2 -> OP_MODE_RESTRICTED
  0, // 3 -> OP_MODE_DATA_INJECTION
};

const std::string& SensorServiceProto_OperatingModeEnum_Name(
    SensorServiceProto_OperatingModeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SensorServiceProto_OperatingModeEnum_entries,
          SensorServiceProto_OperatingModeEnum_entries_by_number,
          4, SensorServiceProto_OperatingModeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SensorServiceProto_OperatingModeEnum_entries,
      SensorServiceProto_OperatingModeEnum_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SensorServiceProto_OperatingModeEnum_strings[idx].get();
}
bool SensorServiceProto_OperatingModeEnum_Parse(
    const std::string& name, SensorServiceProto_OperatingModeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SensorServiceProto_OperatingModeEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SensorServiceProto_OperatingModeEnum>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorServiceProto_OperatingModeEnum SensorServiceProto::OP_MODE_UNKNOWN;
constexpr SensorServiceProto_OperatingModeEnum SensorServiceProto::OP_MODE_NORMAL;
constexpr SensorServiceProto_OperatingModeEnum SensorServiceProto::OP_MODE_RESTRICTED;
constexpr SensorServiceProto_OperatingModeEnum SensorServiceProto::OP_MODE_DATA_INJECTION;
constexpr SensorServiceProto_OperatingModeEnum SensorServiceProto::OperatingModeEnum_MIN;
constexpr SensorServiceProto_OperatingModeEnum SensorServiceProto::OperatingModeEnum_MAX;
constexpr int SensorServiceProto::OperatingModeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SensorListProto_ReportingModeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SensorListProto_ReportingModeEnum_strings[5] = {};

static const char SensorListProto_ReportingModeEnum_names[] =
  "RM_CONTINUOUS"
  "RM_ONE_SHOT"
  "RM_ON_CHANGE"
  "RM_SPECIAL_TRIGGER"
  "RM_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SensorListProto_ReportingModeEnum_entries[] = {
  { {SensorListProto_ReportingModeEnum_names + 0, 13}, 1 },
  { {SensorListProto_ReportingModeEnum_names + 13, 11}, 3 },
  { {SensorListProto_ReportingModeEnum_names + 24, 12}, 2 },
  { {SensorListProto_ReportingModeEnum_names + 36, 18}, 4 },
  { {SensorListProto_ReportingModeEnum_names + 54, 10}, 0 },
};

static const int SensorListProto_ReportingModeEnum_entries_by_number[] = {
  4, // 0 -> RM_UNKNOWN
  0, // 1 -> RM_CONTINUOUS
  2, // 2 -> RM_ON_CHANGE
  1, // 3 -> RM_ONE_SHOT
  3, // 4 -> RM_SPECIAL_TRIGGER
};

const std::string& SensorListProto_ReportingModeEnum_Name(
    SensorListProto_ReportingModeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SensorListProto_ReportingModeEnum_entries,
          SensorListProto_ReportingModeEnum_entries_by_number,
          5, SensorListProto_ReportingModeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SensorListProto_ReportingModeEnum_entries,
      SensorListProto_ReportingModeEnum_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SensorListProto_ReportingModeEnum_strings[idx].get();
}
bool SensorListProto_ReportingModeEnum_Parse(
    const std::string& name, SensorListProto_ReportingModeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SensorListProto_ReportingModeEnum_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SensorListProto_ReportingModeEnum>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorListProto_ReportingModeEnum SensorListProto::RM_UNKNOWN;
constexpr SensorListProto_ReportingModeEnum SensorListProto::RM_CONTINUOUS;
constexpr SensorListProto_ReportingModeEnum SensorListProto::RM_ON_CHANGE;
constexpr SensorListProto_ReportingModeEnum SensorListProto::RM_ONE_SHOT;
constexpr SensorListProto_ReportingModeEnum SensorListProto::RM_SPECIAL_TRIGGER;
constexpr SensorListProto_ReportingModeEnum SensorListProto::ReportingModeEnum_MIN;
constexpr SensorListProto_ReportingModeEnum SensorListProto::ReportingModeEnum_MAX;
constexpr int SensorListProto::ReportingModeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SensorEventConnectionProto_OperatingModeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SensorEventConnectionProto_OperatingModeEnum_strings[4] = {};

static const char SensorEventConnectionProto_OperatingModeEnum_names[] =
  "OP_MODE_DATA_INJECTION"
  "OP_MODE_NORMAL"
  "OP_MODE_RESTRICTED"
  "OP_MODE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SensorEventConnectionProto_OperatingModeEnum_entries[] = {
  { {SensorEventConnectionProto_OperatingModeEnum_names + 0, 22}, 3 },
  { {SensorEventConnectionProto_OperatingModeEnum_names + 22, 14}, 1 },
  { {SensorEventConnectionProto_OperatingModeEnum_names + 36, 18}, 2 },
  { {SensorEventConnectionProto_OperatingModeEnum_names + 54, 15}, 0 },
};

static const int SensorEventConnectionProto_OperatingModeEnum_entries_by_number[] = {
  3, // 0 -> OP_MODE_UNKNOWN
  1, // 1 -> OP_MODE_NORMAL
  2, // 2 -> OP_MODE_RESTRICTED
  0, // 3 -> OP_MODE_DATA_INJECTION
};

const std::string& SensorEventConnectionProto_OperatingModeEnum_Name(
    SensorEventConnectionProto_OperatingModeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SensorEventConnectionProto_OperatingModeEnum_entries,
          SensorEventConnectionProto_OperatingModeEnum_entries_by_number,
          4, SensorEventConnectionProto_OperatingModeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SensorEventConnectionProto_OperatingModeEnum_entries,
      SensorEventConnectionProto_OperatingModeEnum_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SensorEventConnectionProto_OperatingModeEnum_strings[idx].get();
}
bool SensorEventConnectionProto_OperatingModeEnum_Parse(
    const std::string& name, SensorEventConnectionProto_OperatingModeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SensorEventConnectionProto_OperatingModeEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SensorEventConnectionProto_OperatingModeEnum>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto::OP_MODE_UNKNOWN;
constexpr SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto::OP_MODE_NORMAL;
constexpr SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto::OP_MODE_RESTRICTED;
constexpr SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto::OP_MODE_DATA_INJECTION;
constexpr SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto::OperatingModeEnum_MIN;
constexpr SensorEventConnectionProto_OperatingModeEnum SensorEventConnectionProto::OperatingModeEnum_MAX;
constexpr int SensorEventConnectionProto::OperatingModeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SensorServiceProto::InitAsDefaultInstance() {
  ::android::service::_SensorServiceProto_default_instance_._instance.get_mutable()->sensor_device_ = const_cast< ::android::service::SensorDeviceProto*>(
      ::android::service::SensorDeviceProto::internal_default_instance());
  ::android::service::_SensorServiceProto_default_instance_._instance.get_mutable()->sensors_ = const_cast< ::android::service::SensorListProto*>(
      ::android::service::SensorListProto::internal_default_instance());
  ::android::service::_SensorServiceProto_default_instance_._instance.get_mutable()->fusion_state_ = const_cast< ::android::service::SensorFusionProto*>(
      ::android::service::SensorFusionProto::internal_default_instance());
  ::android::service::_SensorServiceProto_default_instance_._instance.get_mutable()->sensor_events_ = const_cast< ::android::service::SensorEventsProto*>(
      ::android::service::SensorEventsProto::internal_default_instance());
}
class SensorServiceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorServiceProto>()._has_bits_);
  static void set_has_init_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_current_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::service::SensorDeviceProto& sensor_device(const SensorServiceProto* msg);
  static void set_has_sensor_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::service::SensorListProto& sensors(const SensorServiceProto* msg);
  static void set_has_sensors(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::service::SensorFusionProto& fusion_state(const SensorServiceProto* msg);
  static void set_has_fusion_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::service::SensorEventsProto& sensor_events(const SensorServiceProto* msg);
  static void set_has_sensor_events(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_socket_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_socket_buffer_size_in_events(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wake_lock_acquired(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_operating_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_whitelisted_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_privacy(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::android::service::SensorDeviceProto&
SensorServiceProto::_Internal::sensor_device(const SensorServiceProto* msg) {
  return *msg->sensor_device_;
}
const ::android::service::SensorListProto&
SensorServiceProto::_Internal::sensors(const SensorServiceProto* msg) {
  return *msg->sensors_;
}
const ::android::service::SensorFusionProto&
SensorServiceProto::_Internal::fusion_state(const SensorServiceProto* msg) {
  return *msg->fusion_state_;
}
const ::android::service::SensorEventsProto&
SensorServiceProto::_Internal::sensor_events(const SensorServiceProto* msg) {
  return *msg->sensor_events_;
}
SensorServiceProto::SensorServiceProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorServiceProto)
}
SensorServiceProto::SensorServiceProto(const SensorServiceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      active_sensors_(from.active_sensors_),
      active_connections_(from.active_connections_),
      direct_connections_(from.direct_connections_),
      previous_registrations_(from.previous_registrations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  whitelisted_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_whitelisted_package()) {
    whitelisted_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.whitelisted_package_);
  }
  if (from.has_sensor_device()) {
    sensor_device_ = new ::android::service::SensorDeviceProto(*from.sensor_device_);
  } else {
    sensor_device_ = nullptr;
  }
  if (from.has_sensors()) {
    sensors_ = new ::android::service::SensorListProto(*from.sensors_);
  } else {
    sensors_ = nullptr;
  }
  if (from.has_fusion_state()) {
    fusion_state_ = new ::android::service::SensorFusionProto(*from.fusion_state_);
  } else {
    fusion_state_ = nullptr;
  }
  if (from.has_sensor_events()) {
    sensor_events_ = new ::android::service::SensorEventsProto(*from.sensor_events_);
  } else {
    sensor_events_ = nullptr;
  }
  ::memcpy(&current_time_ms_, &from.current_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_status_) -
    reinterpret_cast<char*>(&current_time_ms_)) + sizeof(init_status_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorServiceProto)
}

void SensorServiceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  whitelisted_package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sensor_device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_status_) -
      reinterpret_cast<char*>(&sensor_device_)) + sizeof(init_status_));
}

SensorServiceProto::~SensorServiceProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorServiceProto)
  SharedDtor();
}

void SensorServiceProto::SharedDtor() {
  whitelisted_package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sensor_device_;
  if (this != internal_default_instance()) delete sensors_;
  if (this != internal_default_instance()) delete fusion_state_;
  if (this != internal_default_instance()) delete sensor_events_;
}

void SensorServiceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorServiceProto& SensorServiceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorServiceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorServiceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorServiceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_sensors_.Clear();
  active_connections_.Clear();
  direct_connections_.Clear();
  previous_registrations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      whitelisted_package_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sensor_device_ != nullptr);
      sensor_device_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sensors_ != nullptr);
      sensors_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(fusion_state_ != nullptr);
      fusion_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sensor_events_ != nullptr);
      sensor_events_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&current_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socket_buffer_size_in_events_) -
        reinterpret_cast<char*>(&current_time_ms_)) + sizeof(socket_buffer_size_in_events_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&operating_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&init_status_) -
        reinterpret_cast<char*>(&operating_mode_)) + sizeof(init_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorServiceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 current_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_current_time_ms(&has_bits);
          current_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.SensorDeviceProto sensor_device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sensor_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.SensorListProto sensors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sensors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.SensorFusionProto fusion_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_fusion_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.SensorEventsProto sensor_events = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_sensor_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.ActiveSensorProto active_sensors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional int32 socket_buffer_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_socket_buffer_size(&has_bits);
          socket_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 socket_buffer_size_in_events = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_socket_buffer_size_in_events(&has_bits);
          socket_buffer_size_in_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wake_lock_acquired = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_wake_lock_acquired(&has_bits);
          wake_lock_acquired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.SensorServiceProto.OperatingModeEnum operating_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::service::SensorServiceProto_OperatingModeEnum_IsValid(val))) {
            set_operating_mode(static_cast<::android::service::SensorServiceProto_OperatingModeEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string whitelisted_package = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_whitelisted_package(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sensor_privacy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sensor_privacy(&has_bits);
          sensor_privacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorEventConnectionProto active_connections = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorDirectConnectionProto direct_connections = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_direct_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorRegistrationInfoProto previous_registrations = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_previous_registrations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      // optional sint32 init_status = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_init_status(&has_bits);
          init_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorServiceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorServiceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 current_time_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_current_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.SensorDeviceProto sensor_device = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.SensorListProto sensors = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.SensorFusionProto fusion_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fusion_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.SensorEventsProto sensor_events = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.ActiveSensorProto active_sensors = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 socket_buffer_size = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_socket_buffer_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 socket_buffer_size_in_events = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_socket_buffer_size_in_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_buffer_size_in_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wake_lock_acquired = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_wake_lock_acquired(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wake_lock_acquired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.SensorServiceProto.OperatingModeEnum operating_mode = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::service::SensorServiceProto_OperatingModeEnum_IsValid(value)) {
            set_operating_mode(static_cast< ::android::service::SensorServiceProto_OperatingModeEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string whitelisted_package = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_whitelisted_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sensor_privacy = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_sensor_privacy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensor_privacy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorEventConnectionProto active_connections = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorDirectConnectionProto direct_connections = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_direct_connections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorRegistrationInfoProto previous_registrations = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_previous_registrations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 init_status = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_init_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &init_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorServiceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorServiceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorServiceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorServiceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 current_time_ms = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->current_time_ms(), output);
  }

  // optional .android.service.SensorDeviceProto sensor_device = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::sensor_device(this), output);
  }

  // optional .android.service.SensorListProto sensors = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::sensors(this), output);
  }

  // optional .android.service.SensorFusionProto fusion_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::fusion_state(this), output);
  }

  // optional .android.service.SensorEventsProto sensor_events = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::sensor_events(this), output);
  }

  // repeated .android.service.ActiveSensorProto active_sensors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_sensors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->active_sensors(static_cast<int>(i)),
      output);
  }

  // optional int32 socket_buffer_size = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->socket_buffer_size(), output);
  }

  // optional int32 socket_buffer_size_in_events = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->socket_buffer_size_in_events(), output);
  }

  // optional bool wake_lock_acquired = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->wake_lock_acquired(), output);
  }

  // optional .android.service.SensorServiceProto.OperatingModeEnum operating_mode = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->operating_mode(), output);
  }

  // optional string whitelisted_package = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->whitelisted_package(), output);
  }

  // optional bool sensor_privacy = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->sensor_privacy(), output);
  }

  // repeated .android.service.SensorEventConnectionProto active_connections = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_connections_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13,
      this->active_connections(static_cast<int>(i)),
      output);
  }

  // repeated .android.service.SensorDirectConnectionProto direct_connections = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->direct_connections_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14,
      this->direct_connections(static_cast<int>(i)),
      output);
  }

  // repeated .android.service.SensorRegistrationInfoProto previous_registrations = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->previous_registrations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15,
      this->previous_registrations(static_cast<int>(i)),
      output);
  }

  // optional sint32 init_status = 16;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(16, this->init_status(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorServiceProto)
}

size_t SensorServiceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorServiceProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.ActiveSensorProto active_sensors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->active_sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_sensors(static_cast<int>(i)));
    }
  }

  // repeated .android.service.SensorEventConnectionProto active_connections = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->active_connections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_connections(static_cast<int>(i)));
    }
  }

  // repeated .android.service.SensorDirectConnectionProto direct_connections = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->direct_connections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->direct_connections(static_cast<int>(i)));
    }
  }

  // repeated .android.service.SensorRegistrationInfoProto previous_registrations = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->previous_registrations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->previous_registrations(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string whitelisted_package = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->whitelisted_package());
    }

    // optional .android.service.SensorDeviceProto sensor_device = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_device_);
    }

    // optional .android.service.SensorListProto sensors = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensors_);
    }

    // optional .android.service.SensorFusionProto fusion_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fusion_state_);
    }

    // optional .android.service.SensorEventsProto sensor_events = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sensor_events_);
    }

    // optional int64 current_time_ms = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->current_time_ms());
    }

    // optional int32 socket_buffer_size = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->socket_buffer_size());
    }

    // optional int32 socket_buffer_size_in_events = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->socket_buffer_size_in_events());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .android.service.SensorServiceProto.OperatingModeEnum operating_mode = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operating_mode());
    }

    // optional bool wake_lock_acquired = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool sensor_privacy = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional sint32 init_status = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->init_status());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorServiceProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorServiceProto*>(
      &from));
}

void SensorServiceProto::MergeFrom(const SensorServiceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorServiceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_sensors_.MergeFrom(from.active_sensors_);
  active_connections_.MergeFrom(from.active_connections_);
  direct_connections_.MergeFrom(from.direct_connections_);
  previous_registrations_.MergeFrom(from.previous_registrations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      whitelisted_package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.whitelisted_package_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sensor_device()->::android::service::SensorDeviceProto::MergeFrom(from.sensor_device());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sensors()->::android::service::SensorListProto::MergeFrom(from.sensors());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_fusion_state()->::android::service::SensorFusionProto::MergeFrom(from.fusion_state());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sensor_events()->::android::service::SensorEventsProto::MergeFrom(from.sensor_events());
    }
    if (cached_has_bits & 0x00000020u) {
      current_time_ms_ = from.current_time_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      socket_buffer_size_ = from.socket_buffer_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      socket_buffer_size_in_events_ = from.socket_buffer_size_in_events_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      operating_mode_ = from.operating_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      wake_lock_acquired_ = from.wake_lock_acquired_;
    }
    if (cached_has_bits & 0x00000400u) {
      sensor_privacy_ = from.sensor_privacy_;
    }
    if (cached_has_bits & 0x00000800u) {
      init_status_ = from.init_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorServiceProto::CopyFrom(const SensorServiceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorServiceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorServiceProto::IsInitialized() const {
  return true;
}

void SensorServiceProto::InternalSwap(SensorServiceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&active_sensors_)->InternalSwap(CastToBase(&other->active_sensors_));
  CastToBase(&active_connections_)->InternalSwap(CastToBase(&other->active_connections_));
  CastToBase(&direct_connections_)->InternalSwap(CastToBase(&other->direct_connections_));
  CastToBase(&previous_registrations_)->InternalSwap(CastToBase(&other->previous_registrations_));
  whitelisted_package_.Swap(&other->whitelisted_package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sensor_device_, other->sensor_device_);
  swap(sensors_, other->sensors_);
  swap(fusion_state_, other->fusion_state_);
  swap(sensor_events_, other->sensor_events_);
  swap(current_time_ms_, other->current_time_ms_);
  swap(socket_buffer_size_, other->socket_buffer_size_);
  swap(socket_buffer_size_in_events_, other->socket_buffer_size_in_events_);
  swap(operating_mode_, other->operating_mode_);
  swap(wake_lock_acquired_, other->wake_lock_acquired_);
  swap(sensor_privacy_, other->sensor_privacy_);
  swap(init_status_, other->init_status_);
}

std::string SensorServiceProto::GetTypeName() const {
  return "android.service.SensorServiceProto";
}


// ===================================================================

void SensorDeviceProto_SensorProto::InitAsDefaultInstance() {
}
class SensorDeviceProto_SensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorDeviceProto_SensorProto>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sampling_period_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_batching_period_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SensorDeviceProto_SensorProto::SensorDeviceProto_SensorProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorDeviceProto.SensorProto)
}
SensorDeviceProto_SensorProto::SensorDeviceProto_SensorProto(const SensorDeviceProto_SensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sampling_period_ms_(from.sampling_period_ms_),
      batching_period_ms_(from.batching_period_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&batching_period_selected_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(batching_period_selected_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorDeviceProto.SensorProto)
}

void SensorDeviceProto_SensorProto::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batching_period_selected_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(batching_period_selected_));
}

SensorDeviceProto_SensorProto::~SensorDeviceProto_SensorProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorDeviceProto.SensorProto)
  SharedDtor();
}

void SensorDeviceProto_SensorProto::SharedDtor() {
}

void SensorDeviceProto_SensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorDeviceProto_SensorProto& SensorDeviceProto_SensorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorDeviceProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorDeviceProto_SensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorDeviceProto.SensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sampling_period_ms_.Clear();
  batching_period_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&batching_period_selected_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(batching_period_selected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorDeviceProto_SensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 active_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_active_count(&has_bits);
          active_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float sampling_period_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_sampling_period_ms(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 29);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_sampling_period_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sampling_period_selected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_sampling_period_selected(&has_bits);
          sampling_period_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float batching_period_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_batching_period_ms(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 45);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_batching_period_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float batching_period_selected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_batching_period_selected(&has_bits);
          batching_period_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorDeviceProto_SensorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorDeviceProto.SensorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_active_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float sampling_period_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_sampling_period_ms())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sampling_period_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sampling_period_selected = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_sampling_period_selected(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampling_period_selected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float batching_period_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_batching_period_ms())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_batching_period_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float batching_period_selected = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_batching_period_selected(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &batching_period_selected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorDeviceProto.SensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorDeviceProto.SensorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorDeviceProto_SensorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorDeviceProto.SensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }

  // optional int32 active_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->active_count(), output);
  }

  // repeated float sampling_period_ms = 3;
  for (int i = 0, n = this->sampling_period_ms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      3, this->sampling_period_ms(i), output);
  }

  // optional float sampling_period_selected = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->sampling_period_selected(), output);
  }

  // repeated float batching_period_ms = 5;
  for (int i = 0, n = this->batching_period_ms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      5, this->batching_period_ms(i), output);
  }

  // optional float batching_period_selected = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->batching_period_selected(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorDeviceProto.SensorProto)
}

size_t SensorDeviceProto_SensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorDeviceProto.SensorProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sampling_period_ms = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sampling_period_ms_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->sampling_period_ms_size());
    total_size += data_size;
  }

  // repeated float batching_period_ms = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->batching_period_ms_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->batching_period_ms_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->handle());
    }

    // optional int32 active_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->active_count());
    }

    // optional float sampling_period_selected = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float batching_period_selected = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorDeviceProto_SensorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorDeviceProto_SensorProto*>(
      &from));
}

void SensorDeviceProto_SensorProto::MergeFrom(const SensorDeviceProto_SensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorDeviceProto.SensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sampling_period_ms_.MergeFrom(from.sampling_period_ms_);
  batching_period_ms_.MergeFrom(from.batching_period_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      active_count_ = from.active_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      sampling_period_selected_ = from.sampling_period_selected_;
    }
    if (cached_has_bits & 0x00000008u) {
      batching_period_selected_ = from.batching_period_selected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorDeviceProto_SensorProto::CopyFrom(const SensorDeviceProto_SensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorDeviceProto.SensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDeviceProto_SensorProto::IsInitialized() const {
  return true;
}

void SensorDeviceProto_SensorProto::InternalSwap(SensorDeviceProto_SensorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sampling_period_ms_.InternalSwap(&other->sampling_period_ms_);
  batching_period_ms_.InternalSwap(&other->batching_period_ms_);
  swap(handle_, other->handle_);
  swap(active_count_, other->active_count_);
  swap(sampling_period_selected_, other->sampling_period_selected_);
  swap(batching_period_selected_, other->batching_period_selected_);
}

std::string SensorDeviceProto_SensorProto::GetTypeName() const {
  return "android.service.SensorDeviceProto.SensorProto";
}


// ===================================================================

void SensorDeviceProto::InitAsDefaultInstance() {
}
class SensorDeviceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorDeviceProto>()._has_bits_);
  static void set_has_initialized(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_sensors(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active_sensors(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorDeviceProto::SensorDeviceProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorDeviceProto)
}
SensorDeviceProto::SensorDeviceProto(const SensorDeviceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensors_(from.sensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&initialized_, &from.initialized_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_sensors_) -
    reinterpret_cast<char*>(&initialized_)) + sizeof(active_sensors_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorDeviceProto)
}

void SensorDeviceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorDeviceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  ::memset(&initialized_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_sensors_) -
      reinterpret_cast<char*>(&initialized_)) + sizeof(active_sensors_));
}

SensorDeviceProto::~SensorDeviceProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorDeviceProto)
  SharedDtor();
}

void SensorDeviceProto::SharedDtor() {
}

void SensorDeviceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorDeviceProto& SensorDeviceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorDeviceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorDeviceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorDeviceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&initialized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_sensors_) -
        reinterpret_cast<char*>(&initialized_)) + sizeof(active_sensors_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorDeviceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool initialized = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_initialized(&has_bits);
          initialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_sensors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_sensors(&has_bits);
          total_sensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 active_sensors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_active_sensors(&has_bits);
          active_sensors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorDeviceProto.SensorProto sensors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorDeviceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorDeviceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool initialized = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_initialized(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_sensors = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_sensors(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_sensors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_sensors = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_active_sensors(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_sensors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorDeviceProto.SensorProto sensors = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorDeviceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorDeviceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorDeviceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorDeviceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool initialized = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->initialized(), output);
  }

  // optional int32 total_sensors = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->total_sensors(), output);
  }

  // optional int32 active_sensors = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->active_sensors(), output);
  }

  // repeated .android.service.SensorDeviceProto.SensorProto sensors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->sensors(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorDeviceProto)
}

size_t SensorDeviceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorDeviceProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.SensorDeviceProto.SensorProto sensors = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensors(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool initialized = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 total_sensors = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_sensors());
    }

    // optional int32 active_sensors = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->active_sensors());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorDeviceProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorDeviceProto*>(
      &from));
}

void SensorDeviceProto::MergeFrom(const SensorDeviceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorDeviceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      initialized_ = from.initialized_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_sensors_ = from.total_sensors_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_sensors_ = from.active_sensors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorDeviceProto::CopyFrom(const SensorDeviceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorDeviceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDeviceProto::IsInitialized() const {
  return true;
}

void SensorDeviceProto::InternalSwap(SensorDeviceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sensors_)->InternalSwap(CastToBase(&other->sensors_));
  swap(initialized_, other->initialized_);
  swap(total_sensors_, other->total_sensors_);
  swap(active_sensors_, other->active_sensors_);
}

std::string SensorDeviceProto::GetTypeName() const {
  return "android.service.SensorDeviceProto";
}


// ===================================================================

void SensorListProto_SensorProto::InitAsDefaultInstance() {
}
class SensorListProto_SensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorListProto_SensorProto>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_string_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_required_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reporting_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_delay_us(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_delay_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fifo_max_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fifo_reserved_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_wakeup(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_data_injection_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_dynamic(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_has_additional_info(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_highest_rate_level(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ashmem(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_gralloc(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_min_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_power_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

SensorListProto_SensorProto::SensorListProto_SensorProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorListProto.SensorProto)
}
SensorListProto_SensorProto::SensorListProto_SensorProto(const SensorListProto_SensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor()) {
    vendor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  string_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_type()) {
    string_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_type_);
  }
  required_permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_required_permission()) {
    required_permission_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.required_permission_);
  }
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_usage_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(power_usage_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorListProto.SensorProto)
}

void SensorListProto_SensorProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorListProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_permission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_usage_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(power_usage_));
}

SensorListProto_SensorProto::~SensorListProto_SensorProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorListProto.SensorProto)
  SharedDtor();
}

void SensorListProto_SensorProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_permission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorListProto_SensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorListProto_SensorProto& SensorListProto_SensorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorListProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorListProto_SensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorListProto.SensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      vendor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      string_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      required_permission_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(flags_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&reporting_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_dynamic_) -
        reinterpret_cast<char*>(&reporting_mode_)) + sizeof(is_dynamic_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&has_additional_info_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&power_usage_) -
        reinterpret_cast<char*>(&has_additional_info_)) + sizeof(power_usage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorListProto_SensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vendor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_vendor(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_string_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string required_permission = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_required_permission(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.SensorListProto.ReportingModeEnum reporting_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::service::SensorListProto_ReportingModeEnum_IsValid(val))) {
            set_reporting_mode(static_cast<::android::service::SensorListProto_ReportingModeEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 max_delay_us = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_delay_us(&has_bits);
          max_delay_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_delay_us = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_min_delay_us(&has_bits);
          min_delay_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fifo_max_event_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_fifo_max_event_count(&has_bits);
          fifo_max_event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fifo_reserved_event_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_fifo_reserved_event_count(&has_bits);
          fifo_reserved_event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_wakeup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_wakeup(&has_bits);
          is_wakeup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool data_injection_supported = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_data_injection_supported(&has_bits);
          data_injection_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dynamic = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_dynamic(&has_bits);
          is_dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_additional_info = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_has_additional_info(&has_bits);
          has_additional_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 highest_rate_level = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_highest_rate_level(&has_bits);
          highest_rate_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ashmem = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ashmem(&has_bits);
          ashmem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool gralloc = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_gralloc(&has_bits);
          gralloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float min_value = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_min_value(&has_bits);
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_value = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_max_value(&has_bits);
          max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float resolution = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_resolution(&has_bits);
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float power_usage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_power_usage(&has_bits);
          power_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorListProto_SensorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorListProto.SensorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vendor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_type = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_string_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string required_permission = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_required_permission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.SensorListProto.ReportingModeEnum reporting_mode = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::service::SensorListProto_ReportingModeEnum_IsValid(value)) {
            set_reporting_mode(static_cast< ::android::service::SensorListProto_ReportingModeEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_delay_us = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_max_delay_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_delay_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_delay_us = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_min_delay_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_delay_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fifo_max_event_count = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_fifo_max_event_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fifo_max_event_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fifo_reserved_event_count = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_fifo_reserved_event_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fifo_reserved_event_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wakeup = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_is_wakeup(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wakeup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool data_injection_supported = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_data_injection_supported(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_injection_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dynamic = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_is_dynamic(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dynamic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_additional_info = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_has_additional_info(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_additional_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 highest_rate_level = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_highest_rate_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &highest_rate_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ashmem = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_ashmem(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ashmem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gralloc = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_gralloc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gralloc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_value = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {
          _Internal::set_has_min_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_value = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {
          _Internal::set_has_max_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float resolution = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (189 & 0xFF)) {
          _Internal::set_has_resolution(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float power_usage = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (197 & 0xFF)) {
          _Internal::set_has_power_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorListProto.SensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorListProto.SensorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorListProto_SensorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorListProto.SensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string vendor = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vendor(), output);
  }

  // optional int32 version = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  // optional string string_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string_type(), output);
  }

  // optional int32 type = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional string required_permission = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->required_permission(), output);
  }

  // optional int32 flags = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->flags(), output);
  }

  // optional .android.service.SensorListProto.ReportingModeEnum reporting_mode = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->reporting_mode(), output);
  }

  // optional int32 max_delay_us = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->max_delay_us(), output);
  }

  // optional int32 min_delay_us = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->min_delay_us(), output);
  }

  // optional int32 fifo_max_event_count = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->fifo_max_event_count(), output);
  }

  // optional int32 fifo_reserved_event_count = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->fifo_reserved_event_count(), output);
  }

  // optional bool is_wakeup = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->is_wakeup(), output);
  }

  // optional bool data_injection_supported = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->data_injection_supported(), output);
  }

  // optional bool is_dynamic = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->is_dynamic(), output);
  }

  // optional bool has_additional_info = 17;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->has_additional_info(), output);
  }

  // optional int32 highest_rate_level = 18;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->highest_rate_level(), output);
  }

  // optional bool ashmem = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->ashmem(), output);
  }

  // optional bool gralloc = 20;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->gralloc(), output);
  }

  // optional float min_value = 21;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(21, this->min_value(), output);
  }

  // optional float max_value = 22;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(22, this->max_value(), output);
  }

  // optional float resolution = 23;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(23, this->resolution(), output);
  }

  // optional float power_usage = 24;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(24, this->power_usage(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorListProto.SensorProto)
}

size_t SensorListProto_SensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorListProto.SensorProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string vendor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->vendor());
    }

    // optional string string_type = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->string_type());
    }

    // optional string required_permission = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->required_permission());
    }

    // optional int32 handle = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->handle());
    }

    // optional int32 version = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 type = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 flags = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.service.SensorListProto.ReportingModeEnum reporting_mode = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reporting_mode());
    }

    // optional int32 max_delay_us = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_delay_us());
    }

    // optional int32 min_delay_us = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->min_delay_us());
    }

    // optional int32 fifo_max_event_count = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->fifo_max_event_count());
    }

    // optional int32 fifo_reserved_event_count = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->fifo_reserved_event_count());
    }

    // optional bool is_wakeup = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool data_injection_supported = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_dynamic = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool has_additional_info = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 highest_rate_level = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->highest_rate_level());
    }

    // optional bool ashmem = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool gralloc = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional float min_value = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float max_value = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float resolution = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float power_usage = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorListProto_SensorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorListProto_SensorProto*>(
      &from));
}

void SensorListProto_SensorProto::MergeFrom(const SensorListProto_SensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorListProto.SensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      vendor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vendor_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      string_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.string_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      required_permission_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.required_permission_);
    }
    if (cached_has_bits & 0x00000010u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      reporting_mode_ = from.reporting_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_delay_us_ = from.max_delay_us_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_delay_us_ = from.min_delay_us_;
    }
    if (cached_has_bits & 0x00000800u) {
      fifo_max_event_count_ = from.fifo_max_event_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      fifo_reserved_event_count_ = from.fifo_reserved_event_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_wakeup_ = from.is_wakeup_;
    }
    if (cached_has_bits & 0x00004000u) {
      data_injection_supported_ = from.data_injection_supported_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_dynamic_ = from.is_dynamic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      has_additional_info_ = from.has_additional_info_;
    }
    if (cached_has_bits & 0x00020000u) {
      highest_rate_level_ = from.highest_rate_level_;
    }
    if (cached_has_bits & 0x00040000u) {
      ashmem_ = from.ashmem_;
    }
    if (cached_has_bits & 0x00080000u) {
      gralloc_ = from.gralloc_;
    }
    if (cached_has_bits & 0x00100000u) {
      min_value_ = from.min_value_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_value_ = from.max_value_;
    }
    if (cached_has_bits & 0x00400000u) {
      resolution_ = from.resolution_;
    }
    if (cached_has_bits & 0x00800000u) {
      power_usage_ = from.power_usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorListProto_SensorProto::CopyFrom(const SensorListProto_SensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorListProto.SensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorListProto_SensorProto::IsInitialized() const {
  return true;
}

void SensorListProto_SensorProto::InternalSwap(SensorListProto_SensorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vendor_.Swap(&other->vendor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  string_type_.Swap(&other->string_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  required_permission_.Swap(&other->required_permission_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(flags_, other->flags_);
  swap(reporting_mode_, other->reporting_mode_);
  swap(max_delay_us_, other->max_delay_us_);
  swap(min_delay_us_, other->min_delay_us_);
  swap(fifo_max_event_count_, other->fifo_max_event_count_);
  swap(fifo_reserved_event_count_, other->fifo_reserved_event_count_);
  swap(is_wakeup_, other->is_wakeup_);
  swap(data_injection_supported_, other->data_injection_supported_);
  swap(is_dynamic_, other->is_dynamic_);
  swap(has_additional_info_, other->has_additional_info_);
  swap(highest_rate_level_, other->highest_rate_level_);
  swap(ashmem_, other->ashmem_);
  swap(gralloc_, other->gralloc_);
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
  swap(resolution_, other->resolution_);
  swap(power_usage_, other->power_usage_);
}

std::string SensorListProto_SensorProto::GetTypeName() const {
  return "android.service.SensorListProto.SensorProto";
}


// ===================================================================

void SensorListProto::InitAsDefaultInstance() {
}
class SensorListProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorListProto>()._has_bits_);
};

SensorListProto::SensorListProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorListProto)
}
SensorListProto::SensorListProto(const SensorListProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensors_(from.sensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.service.SensorListProto)
}

void SensorListProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
}

SensorListProto::~SensorListProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorListProto)
  SharedDtor();
}

void SensorListProto::SharedDtor() {
}

void SensorListProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorListProto& SensorListProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorListProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorListProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorListProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.service.SensorListProto.SensorProto sensors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorListProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorListProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.service.SensorListProto.SensorProto sensors = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorListProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorListProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorListProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorListProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.service.SensorListProto.SensorProto sensors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->sensors(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorListProto)
}

size_t SensorListProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorListProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.SensorListProto.SensorProto sensors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensors(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorListProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorListProto*>(
      &from));
}

void SensorListProto::MergeFrom(const SensorListProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorListProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
}

void SensorListProto::CopyFrom(const SensorListProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorListProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorListProto::IsInitialized() const {
  return true;
}

void SensorListProto::InternalSwap(SensorListProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sensors_)->InternalSwap(CastToBase(&other->sensors_));
}

std::string SensorListProto::GetTypeName() const {
  return "android.service.SensorListProto";
}


// ===================================================================

void SensorFusionProto_FusionProto::InitAsDefaultInstance() {
}
class SensorFusionProto_FusionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorFusionProto_FusionProto>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_estimated_gyro_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attitude_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attitude_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attitude_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attitude_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attitude_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bias_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bias_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bias_z(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

SensorFusionProto_FusionProto::SensorFusionProto_FusionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorFusionProto.FusionProto)
}
SensorFusionProto_FusionProto::SensorFusionProto_FusionProto(const SensorFusionProto_FusionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&bias_z_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(bias_z_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorFusionProto.FusionProto)
}

void SensorFusionProto_FusionProto::SharedCtor() {
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bias_z_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(bias_z_));
}

SensorFusionProto_FusionProto::~SensorFusionProto_FusionProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorFusionProto.FusionProto)
  SharedDtor();
}

void SensorFusionProto_FusionProto::SharedDtor() {
}

void SensorFusionProto_FusionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorFusionProto_FusionProto& SensorFusionProto_FusionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorFusionProto_FusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorFusionProto_FusionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorFusionProto.FusionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attitude_length_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(attitude_length_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&bias_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bias_z_) -
        reinterpret_cast<char*>(&bias_x_)) + sizeof(bias_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorFusionProto_FusionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_clients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_clients(&has_bits);
          num_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float estimated_gyro_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_estimated_gyro_rate(&has_bits);
          estimated_gyro_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float attitude_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_attitude_x(&has_bits);
          attitude_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float attitude_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_attitude_y(&has_bits);
          attitude_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float attitude_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_attitude_z(&has_bits);
          attitude_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float attitude_w = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_attitude_w(&has_bits);
          attitude_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float attitude_length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_attitude_length(&has_bits);
          attitude_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_bias_x(&has_bits);
          bias_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_bias_y(&has_bits);
          bias_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_bias_z(&has_bits);
          bias_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorFusionProto_FusionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorFusionProto.FusionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_clients = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_clients(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_clients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float estimated_gyro_rate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_estimated_gyro_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &estimated_gyro_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float attitude_x = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_attitude_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attitude_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float attitude_y = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_attitude_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attitude_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float attitude_z = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_attitude_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attitude_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float attitude_w = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_attitude_w(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attitude_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float attitude_length = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_attitude_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attitude_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bias_x = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_bias_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bias_y = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_bias_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bias_z = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_bias_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorFusionProto.FusionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorFusionProto.FusionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorFusionProto_FusionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorFusionProto.FusionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional int32 num_clients = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_clients(), output);
  }

  // optional float estimated_gyro_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->estimated_gyro_rate(), output);
  }

  // optional float attitude_x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->attitude_x(), output);
  }

  // optional float attitude_y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->attitude_y(), output);
  }

  // optional float attitude_z = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->attitude_z(), output);
  }

  // optional float attitude_w = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->attitude_w(), output);
  }

  // optional float attitude_length = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->attitude_length(), output);
  }

  // optional float bias_x = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->bias_x(), output);
  }

  // optional float bias_y = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->bias_y(), output);
  }

  // optional float bias_z = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->bias_z(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorFusionProto.FusionProto)
}

size_t SensorFusionProto_FusionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorFusionProto.FusionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 num_clients = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_clients());
    }

    // optional float estimated_gyro_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float attitude_x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float attitude_y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float attitude_z = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float attitude_w = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float attitude_length = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float bias_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float bias_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float bias_z = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorFusionProto_FusionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorFusionProto_FusionProto*>(
      &from));
}

void SensorFusionProto_FusionProto::MergeFrom(const SensorFusionProto_FusionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorFusionProto.FusionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_clients_ = from.num_clients_;
    }
    if (cached_has_bits & 0x00000004u) {
      estimated_gyro_rate_ = from.estimated_gyro_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      attitude_x_ = from.attitude_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      attitude_y_ = from.attitude_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      attitude_z_ = from.attitude_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      attitude_w_ = from.attitude_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      attitude_length_ = from.attitude_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      bias_x_ = from.bias_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      bias_y_ = from.bias_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      bias_z_ = from.bias_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorFusionProto_FusionProto::CopyFrom(const SensorFusionProto_FusionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorFusionProto.FusionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorFusionProto_FusionProto::IsInitialized() const {
  return true;
}

void SensorFusionProto_FusionProto::InternalSwap(SensorFusionProto_FusionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(num_clients_, other->num_clients_);
  swap(estimated_gyro_rate_, other->estimated_gyro_rate_);
  swap(attitude_x_, other->attitude_x_);
  swap(attitude_y_, other->attitude_y_);
  swap(attitude_z_, other->attitude_z_);
  swap(attitude_w_, other->attitude_w_);
  swap(attitude_length_, other->attitude_length_);
  swap(bias_x_, other->bias_x_);
  swap(bias_y_, other->bias_y_);
  swap(bias_z_, other->bias_z_);
}

std::string SensorFusionProto_FusionProto::GetTypeName() const {
  return "android.service.SensorFusionProto.FusionProto";
}


// ===================================================================

void SensorFusionProto::InitAsDefaultInstance() {
  ::android::service::_SensorFusionProto_default_instance_._instance.get_mutable()->fusion_9axis_ = const_cast< ::android::service::SensorFusionProto_FusionProto*>(
      ::android::service::SensorFusionProto_FusionProto::internal_default_instance());
  ::android::service::_SensorFusionProto_default_instance_._instance.get_mutable()->fusion_nomag_ = const_cast< ::android::service::SensorFusionProto_FusionProto*>(
      ::android::service::SensorFusionProto_FusionProto::internal_default_instance());
  ::android::service::_SensorFusionProto_default_instance_._instance.get_mutable()->fusion_nogyro_ = const_cast< ::android::service::SensorFusionProto_FusionProto*>(
      ::android::service::SensorFusionProto_FusionProto::internal_default_instance());
}
class SensorFusionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorFusionProto>()._has_bits_);
  static const ::android::service::SensorFusionProto_FusionProto& fusion_9axis(const SensorFusionProto* msg);
  static void set_has_fusion_9axis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::service::SensorFusionProto_FusionProto& fusion_nomag(const SensorFusionProto* msg);
  static void set_has_fusion_nomag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::service::SensorFusionProto_FusionProto& fusion_nogyro(const SensorFusionProto* msg);
  static void set_has_fusion_nogyro(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::service::SensorFusionProto_FusionProto&
SensorFusionProto::_Internal::fusion_9axis(const SensorFusionProto* msg) {
  return *msg->fusion_9axis_;
}
const ::android::service::SensorFusionProto_FusionProto&
SensorFusionProto::_Internal::fusion_nomag(const SensorFusionProto* msg) {
  return *msg->fusion_nomag_;
}
const ::android::service::SensorFusionProto_FusionProto&
SensorFusionProto::_Internal::fusion_nogyro(const SensorFusionProto* msg) {
  return *msg->fusion_nogyro_;
}
SensorFusionProto::SensorFusionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorFusionProto)
}
SensorFusionProto::SensorFusionProto(const SensorFusionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fusion_9axis()) {
    fusion_9axis_ = new ::android::service::SensorFusionProto_FusionProto(*from.fusion_9axis_);
  } else {
    fusion_9axis_ = nullptr;
  }
  if (from.has_fusion_nomag()) {
    fusion_nomag_ = new ::android::service::SensorFusionProto_FusionProto(*from.fusion_nomag_);
  } else {
    fusion_nomag_ = nullptr;
  }
  if (from.has_fusion_nogyro()) {
    fusion_nogyro_ = new ::android::service::SensorFusionProto_FusionProto(*from.fusion_nogyro_);
  } else {
    fusion_nogyro_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.service.SensorFusionProto)
}

void SensorFusionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorFusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  ::memset(&fusion_9axis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fusion_nogyro_) -
      reinterpret_cast<char*>(&fusion_9axis_)) + sizeof(fusion_nogyro_));
}

SensorFusionProto::~SensorFusionProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorFusionProto)
  SharedDtor();
}

void SensorFusionProto::SharedDtor() {
  if (this != internal_default_instance()) delete fusion_9axis_;
  if (this != internal_default_instance()) delete fusion_nomag_;
  if (this != internal_default_instance()) delete fusion_nogyro_;
}

void SensorFusionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorFusionProto& SensorFusionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorFusionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorFusionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorFusionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fusion_9axis_ != nullptr);
      fusion_9axis_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fusion_nomag_ != nullptr);
      fusion_nomag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fusion_nogyro_ != nullptr);
      fusion_nogyro_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorFusionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.service.SensorFusionProto.FusionProto fusion_9axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_fusion_9axis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.SensorFusionProto.FusionProto fusion_nomag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_fusion_nomag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.SensorFusionProto.FusionProto fusion_nogyro = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_fusion_nogyro(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorFusionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorFusionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.service.SensorFusionProto.FusionProto fusion_9axis = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fusion_9axis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.SensorFusionProto.FusionProto fusion_nomag = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fusion_nomag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.SensorFusionProto.FusionProto fusion_nogyro = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fusion_nogyro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorFusionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorFusionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorFusionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorFusionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.service.SensorFusionProto.FusionProto fusion_9axis = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::fusion_9axis(this), output);
  }

  // optional .android.service.SensorFusionProto.FusionProto fusion_nomag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::fusion_nomag(this), output);
  }

  // optional .android.service.SensorFusionProto.FusionProto fusion_nogyro = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::fusion_nogyro(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorFusionProto)
}

size_t SensorFusionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorFusionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.service.SensorFusionProto.FusionProto fusion_9axis = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fusion_9axis_);
    }

    // optional .android.service.SensorFusionProto.FusionProto fusion_nomag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fusion_nomag_);
    }

    // optional .android.service.SensorFusionProto.FusionProto fusion_nogyro = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fusion_nogyro_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorFusionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorFusionProto*>(
      &from));
}

void SensorFusionProto::MergeFrom(const SensorFusionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorFusionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fusion_9axis()->::android::service::SensorFusionProto_FusionProto::MergeFrom(from.fusion_9axis());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fusion_nomag()->::android::service::SensorFusionProto_FusionProto::MergeFrom(from.fusion_nomag());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_fusion_nogyro()->::android::service::SensorFusionProto_FusionProto::MergeFrom(from.fusion_nogyro());
    }
  }
}

void SensorFusionProto::CopyFrom(const SensorFusionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorFusionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorFusionProto::IsInitialized() const {
  return true;
}

void SensorFusionProto::InternalSwap(SensorFusionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fusion_9axis_, other->fusion_9axis_);
  swap(fusion_nomag_, other->fusion_nomag_);
  swap(fusion_nogyro_, other->fusion_nogyro_);
}

std::string SensorFusionProto::GetTypeName() const {
  return "android.service.SensorFusionProto";
}


// ===================================================================

void SensorEventsProto_Event::InitAsDefaultInstance() {
}
class SensorEventsProto_Event::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEventsProto_Event>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wall_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_masked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_int64_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SensorEventsProto_Event::SensorEventsProto_Event()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorEventsProto.Event)
}
SensorEventsProto_Event::SensorEventsProto_Event(const SensorEventsProto_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      float_array_(from.float_array_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wall_timestamp_ms_, &from.wall_timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&int64_data_) -
    reinterpret_cast<char*>(&wall_timestamp_ms_)) + sizeof(int64_data_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorEventsProto.Event)
}

void SensorEventsProto_Event::SharedCtor() {
  ::memset(&wall_timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int64_data_) -
      reinterpret_cast<char*>(&wall_timestamp_ms_)) + sizeof(int64_data_));
}

SensorEventsProto_Event::~SensorEventsProto_Event() {
  // @@protoc_insertion_point(destructor:android.service.SensorEventsProto.Event)
  SharedDtor();
}

void SensorEventsProto_Event::SharedDtor() {
}

void SensorEventsProto_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEventsProto_Event& SensorEventsProto_Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEventsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorEventsProto_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorEventsProto.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_array_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&wall_timestamp_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int64_data_) -
        reinterpret_cast<char*>(&wall_timestamp_ms_)) + sizeof(int64_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorEventsProto_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 wall_timestamp_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wall_timestamp_ms(&has_bits);
          wall_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool masked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_masked(&has_bits);
          masked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int64_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_int64_data(&has_bits);
          int64_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float float_array = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_float_array(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 45);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_float_array(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorEventsProto_Event::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorEventsProto.Event)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float timestamp_sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_timestamp_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wall_timestamp_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_wall_timestamp_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wall_timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool masked = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_masked(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &masked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int64_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_int64_data(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float float_array = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_float_array())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_array())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorEventsProto.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorEventsProto.Event)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorEventsProto_Event::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorEventsProto.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->timestamp_sec(), output);
  }

  // optional int64 wall_timestamp_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->wall_timestamp_ms(), output);
  }

  // optional bool masked = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->masked(), output);
  }

  // optional int64 int64_data = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->int64_data(), output);
  }

  // repeated float float_array = 5;
  for (int i = 0, n = this->float_array_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      5, this->float_array(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorEventsProto.Event)
}

size_t SensorEventsProto_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorEventsProto.Event)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_array = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->float_array_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->float_array_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 wall_timestamp_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wall_timestamp_ms());
    }

    // optional float timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool masked = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int64 int64_data = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->int64_data());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEventsProto_Event::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorEventsProto_Event*>(
      &from));
}

void SensorEventsProto_Event::MergeFrom(const SensorEventsProto_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorEventsProto.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_array_.MergeFrom(from.float_array_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      wall_timestamp_ms_ = from.wall_timestamp_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      masked_ = from.masked_;
    }
    if (cached_has_bits & 0x00000008u) {
      int64_data_ = from.int64_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEventsProto_Event::CopyFrom(const SensorEventsProto_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorEventsProto.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEventsProto_Event::IsInitialized() const {
  return true;
}

void SensorEventsProto_Event::InternalSwap(SensorEventsProto_Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  float_array_.InternalSwap(&other->float_array_);
  swap(wall_timestamp_ms_, other->wall_timestamp_ms_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(masked_, other->masked_);
  swap(int64_data_, other->int64_data_);
}

std::string SensorEventsProto_Event::GetTypeName() const {
  return "android.service.SensorEventsProto.Event";
}


// ===================================================================

void SensorEventsProto_RecentEventsLog::InitAsDefaultInstance() {
}
class SensorEventsProto_RecentEventsLog::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEventsProto_RecentEventsLog>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recent_events_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorEventsProto_RecentEventsLog::SensorEventsProto_RecentEventsLog()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorEventsProto.RecentEventsLog)
}
SensorEventsProto_RecentEventsLog::SensorEventsProto_RecentEventsLog(const SensorEventsProto_RecentEventsLog& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  recent_events_count_ = from.recent_events_count_;
  // @@protoc_insertion_point(copy_constructor:android.service.SensorEventsProto.RecentEventsLog)
}

void SensorEventsProto_RecentEventsLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorEventsProto_RecentEventsLog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recent_events_count_ = 0;
}

SensorEventsProto_RecentEventsLog::~SensorEventsProto_RecentEventsLog() {
  // @@protoc_insertion_point(destructor:android.service.SensorEventsProto.RecentEventsLog)
  SharedDtor();
}

void SensorEventsProto_RecentEventsLog::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorEventsProto_RecentEventsLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEventsProto_RecentEventsLog& SensorEventsProto_RecentEventsLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEventsProto_RecentEventsLog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorEventsProto_RecentEventsLog::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorEventsProto.RecentEventsLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  recent_events_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorEventsProto_RecentEventsLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 recent_events_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_recent_events_count(&has_bits);
          recent_events_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorEventsProto.Event events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorEventsProto_RecentEventsLog::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorEventsProto.RecentEventsLog)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 recent_events_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_recent_events_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &recent_events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorEventsProto.Event events = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorEventsProto.RecentEventsLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorEventsProto.RecentEventsLog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorEventsProto_RecentEventsLog::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorEventsProto.RecentEventsLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 recent_events_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->recent_events_count(), output);
  }

  // repeated .android.service.SensorEventsProto.Event events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->events(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorEventsProto.RecentEventsLog)
}

size_t SensorEventsProto_RecentEventsLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorEventsProto.RecentEventsLog)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.SensorEventsProto.Event events = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 recent_events_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->recent_events_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEventsProto_RecentEventsLog::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorEventsProto_RecentEventsLog*>(
      &from));
}

void SensorEventsProto_RecentEventsLog::MergeFrom(const SensorEventsProto_RecentEventsLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorEventsProto.RecentEventsLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      recent_events_count_ = from.recent_events_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEventsProto_RecentEventsLog::CopyFrom(const SensorEventsProto_RecentEventsLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorEventsProto.RecentEventsLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEventsProto_RecentEventsLog::IsInitialized() const {
  return true;
}

void SensorEventsProto_RecentEventsLog::InternalSwap(SensorEventsProto_RecentEventsLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(recent_events_count_, other->recent_events_count_);
}

std::string SensorEventsProto_RecentEventsLog::GetTypeName() const {
  return "android.service.SensorEventsProto.RecentEventsLog";
}


// ===================================================================

void SensorEventsProto::InitAsDefaultInstance() {
}
class SensorEventsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEventsProto>()._has_bits_);
};

SensorEventsProto::SensorEventsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorEventsProto)
}
SensorEventsProto::SensorEventsProto(const SensorEventsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      recent_events_logs_(from.recent_events_logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.service.SensorEventsProto)
}

void SensorEventsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorEventsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
}

SensorEventsProto::~SensorEventsProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorEventsProto)
  SharedDtor();
}

void SensorEventsProto::SharedDtor() {
}

void SensorEventsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEventsProto& SensorEventsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEventsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorEventsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorEventsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recent_events_logs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorEventsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.service.SensorEventsProto.RecentEventsLog recent_events_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_recent_events_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorEventsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorEventsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.service.SensorEventsProto.RecentEventsLog recent_events_logs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_recent_events_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorEventsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorEventsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorEventsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorEventsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.service.SensorEventsProto.RecentEventsLog recent_events_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->recent_events_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->recent_events_logs(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorEventsProto)
}

size_t SensorEventsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorEventsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.SensorEventsProto.RecentEventsLog recent_events_logs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->recent_events_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->recent_events_logs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEventsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorEventsProto*>(
      &from));
}

void SensorEventsProto::MergeFrom(const SensorEventsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorEventsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recent_events_logs_.MergeFrom(from.recent_events_logs_);
}

void SensorEventsProto::CopyFrom(const SensorEventsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorEventsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEventsProto::IsInitialized() const {
  return true;
}

void SensorEventsProto::InternalSwap(SensorEventsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&recent_events_logs_)->InternalSwap(CastToBase(&other->recent_events_logs_));
}

std::string SensorEventsProto::GetTypeName() const {
  return "android.service.SensorEventsProto";
}


// ===================================================================

void ActiveSensorProto::InitAsDefaultInstance() {
}
class ActiveSensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveSensorProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ActiveSensorProto::ActiveSensorProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.ActiveSensorProto)
}
ActiveSensorProto::ActiveSensorProto(const ActiveSensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_connections_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(num_connections_));
  // @@protoc_insertion_point(copy_constructor:android.service.ActiveSensorProto)
}

void ActiveSensorProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_connections_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(num_connections_));
}

ActiveSensorProto::~ActiveSensorProto() {
  // @@protoc_insertion_point(destructor:android.service.ActiveSensorProto)
  SharedDtor();
}

void ActiveSensorProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActiveSensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveSensorProto& ActiveSensorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ActiveSensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.ActiveSensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_connections_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(num_connections_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveSensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_connections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_connections(&has_bits);
          num_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveSensorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.ActiveSensorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_connections = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_connections(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_connections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.ActiveSensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.ActiveSensorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveSensorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.ActiveSensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->handle(), output);
  }

  // optional int32 num_connections = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_connections(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.ActiveSensorProto)
}

size_t ActiveSensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.ActiveSensorProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->handle());
    }

    // optional int32 num_connections = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_connections());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveSensorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveSensorProto*>(
      &from));
}

void ActiveSensorProto::MergeFrom(const ActiveSensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.ActiveSensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_connections_ = from.num_connections_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActiveSensorProto::CopyFrom(const ActiveSensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.ActiveSensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveSensorProto::IsInitialized() const {
  return true;
}

void ActiveSensorProto::InternalSwap(ActiveSensorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
  swap(num_connections_, other->num_connections_);
}

std::string ActiveSensorProto::GetTypeName() const {
  return "android.service.ActiveSensorProto";
}


// ===================================================================

void SensorDirectConnectionProto_SensorProto::InitAsDefaultInstance() {
}
class SensorDirectConnectionProto_SensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorDirectConnectionProto_SensorProto>()._has_bits_);
  static void set_has_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorDirectConnectionProto_SensorProto::SensorDirectConnectionProto_SensorProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorDirectConnectionProto.SensorProto)
}
SensorDirectConnectionProto_SensorProto::SensorDirectConnectionProto_SensorProto(const SensorDirectConnectionProto_SensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_, &from.sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_) -
    reinterpret_cast<char*>(&sensor_)) + sizeof(rate_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorDirectConnectionProto.SensorProto)
}

void SensorDirectConnectionProto_SensorProto::SharedCtor() {
  ::memset(&sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(rate_));
}

SensorDirectConnectionProto_SensorProto::~SensorDirectConnectionProto_SensorProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorDirectConnectionProto.SensorProto)
  SharedDtor();
}

void SensorDirectConnectionProto_SensorProto::SharedDtor() {
}

void SensorDirectConnectionProto_SensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorDirectConnectionProto_SensorProto& SensorDirectConnectionProto_SensorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorDirectConnectionProto_SensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorDirectConnectionProto_SensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorDirectConnectionProto.SensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sensor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rate_) -
        reinterpret_cast<char*>(&sensor_)) + sizeof(rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorDirectConnectionProto_SensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sensor(&has_bits);
          sensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rate(&has_bits);
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorDirectConnectionProto_SensorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorDirectConnectionProto.SensorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sensor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sensor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorDirectConnectionProto.SensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorDirectConnectionProto.SensorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorDirectConnectionProto_SensorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorDirectConnectionProto.SensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sensor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->sensor(), output);
  }

  // optional int32 rate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorDirectConnectionProto.SensorProto)
}

size_t SensorDirectConnectionProto_SensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorDirectConnectionProto.SensorProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 sensor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sensor());
    }

    // optional int32 rate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorDirectConnectionProto_SensorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorDirectConnectionProto_SensorProto*>(
      &from));
}

void SensorDirectConnectionProto_SensorProto::MergeFrom(const SensorDirectConnectionProto_SensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorDirectConnectionProto.SensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sensor_ = from.sensor_;
    }
    if (cached_has_bits & 0x00000002u) {
      rate_ = from.rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorDirectConnectionProto_SensorProto::CopyFrom(const SensorDirectConnectionProto_SensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorDirectConnectionProto.SensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDirectConnectionProto_SensorProto::IsInitialized() const {
  return true;
}

void SensorDirectConnectionProto_SensorProto::InternalSwap(SensorDirectConnectionProto_SensorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sensor_, other->sensor_);
  swap(rate_, other->rate_);
}

std::string SensorDirectConnectionProto_SensorProto::GetTypeName() const {
  return "android.service.SensorDirectConnectionProto.SensorProto";
}


// ===================================================================

void SensorDirectConnectionProto::InitAsDefaultInstance() {
}
class SensorDirectConnectionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorDirectConnectionProto>()._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hal_channel_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_sensor_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SensorDirectConnectionProto::SensorDirectConnectionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorDirectConnectionProto)
}
SensorDirectConnectionProto::SensorDirectConnectionProto(const SensorDirectConnectionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensors_(from.sensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  ::memcpy(&hal_channel_handle_, &from.hal_channel_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sensor_activated_) -
    reinterpret_cast<char*>(&hal_channel_handle_)) + sizeof(num_sensor_activated_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorDirectConnectionProto)
}

void SensorDirectConnectionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorDirectConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hal_channel_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sensor_activated_) -
      reinterpret_cast<char*>(&hal_channel_handle_)) + sizeof(num_sensor_activated_));
}

SensorDirectConnectionProto::~SensorDirectConnectionProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorDirectConnectionProto)
  SharedDtor();
}

void SensorDirectConnectionProto::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorDirectConnectionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorDirectConnectionProto& SensorDirectConnectionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorDirectConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorDirectConnectionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorDirectConnectionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&hal_channel_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sensor_activated_) -
        reinterpret_cast<char*>(&hal_channel_handle_)) + sizeof(num_sensor_activated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorDirectConnectionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hal_channel_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hal_channel_handle(&has_bits);
          hal_channel_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sensor_activated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_sensor_activated(&has_bits);
          num_sensor_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorDirectConnectionProto.SensorProto sensors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorDirectConnectionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorDirectConnectionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hal_channel_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_hal_channel_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hal_channel_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sensor_activated = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_sensor_activated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sensor_activated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorDirectConnectionProto.SensorProto sensors = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorDirectConnectionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorDirectConnectionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorDirectConnectionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorDirectConnectionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package_name(), output);
  }

  // optional int32 hal_channel_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->hal_channel_handle(), output);
  }

  // optional int32 num_sensor_activated = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_sensor_activated(), output);
  }

  // repeated .android.service.SensorDirectConnectionProto.SensorProto sensors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->sensors(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorDirectConnectionProto)
}

size_t SensorDirectConnectionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorDirectConnectionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.SensorDirectConnectionProto.SensorProto sensors = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensors(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string package_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional int32 hal_channel_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->hal_channel_handle());
    }

    // optional int32 num_sensor_activated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_sensor_activated());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorDirectConnectionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorDirectConnectionProto*>(
      &from));
}

void SensorDirectConnectionProto::MergeFrom(const SensorDirectConnectionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorDirectConnectionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      hal_channel_handle_ = from.hal_channel_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_sensor_activated_ = from.num_sensor_activated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorDirectConnectionProto::CopyFrom(const SensorDirectConnectionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorDirectConnectionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDirectConnectionProto::IsInitialized() const {
  return true;
}

void SensorDirectConnectionProto::InternalSwap(SensorDirectConnectionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sensors_)->InternalSwap(CastToBase(&other->sensors_));
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hal_channel_handle_, other->hal_channel_handle_);
  swap(num_sensor_activated_, other->num_sensor_activated_);
}

std::string SensorDirectConnectionProto::GetTypeName() const {
  return "android.service.SensorDirectConnectionProto";
}


// ===================================================================

void SensorEventConnectionProto_FlushInfoProto::InitAsDefaultInstance() {
}
class SensorEventConnectionProto_FlushInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEventConnectionProto_FlushInfoProto>()._has_bits_);
  static void set_has_sensor_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_flush_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pending_flush_events_to_send(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SensorEventConnectionProto_FlushInfoProto::SensorEventConnectionProto_FlushInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorEventConnectionProto.FlushInfoProto)
}
SensorEventConnectionProto_FlushInfoProto::SensorEventConnectionProto_FlushInfoProto(const SensorEventConnectionProto_FlushInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sensor_name()) {
    sensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
  }
  ::memcpy(&sensor_handle_, &from.sensor_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_flush_events_to_send_) -
    reinterpret_cast<char*>(&sensor_handle_)) + sizeof(pending_flush_events_to_send_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorEventConnectionProto.FlushInfoProto)
}

void SensorEventConnectionProto_FlushInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorEventConnectionProto_FlushInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  sensor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sensor_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_flush_events_to_send_) -
      reinterpret_cast<char*>(&sensor_handle_)) + sizeof(pending_flush_events_to_send_));
}

SensorEventConnectionProto_FlushInfoProto::~SensorEventConnectionProto_FlushInfoProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorEventConnectionProto.FlushInfoProto)
  SharedDtor();
}

void SensorEventConnectionProto_FlushInfoProto::SharedDtor() {
  sensor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorEventConnectionProto_FlushInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEventConnectionProto_FlushInfoProto& SensorEventConnectionProto_FlushInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEventConnectionProto_FlushInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorEventConnectionProto_FlushInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorEventConnectionProto.FlushInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sensor_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&sensor_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pending_flush_events_to_send_) -
        reinterpret_cast<char*>(&sensor_handle_)) + sizeof(pending_flush_events_to_send_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorEventConnectionProto_FlushInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sensor_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sensor_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sensor_handle(&has_bits);
          sensor_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_flush_pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_first_flush_pending(&has_bits);
          first_flush_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pending_flush_events_to_send = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pending_flush_events_to_send(&has_bits);
          pending_flush_events_to_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorEventConnectionProto_FlushInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorEventConnectionProto.FlushInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sensor_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sensor_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sensor_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool first_flush_pending = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_first_flush_pending(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_flush_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pending_flush_events_to_send = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pending_flush_events_to_send(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pending_flush_events_to_send_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorEventConnectionProto.FlushInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorEventConnectionProto.FlushInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorEventConnectionProto_FlushInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorEventConnectionProto.FlushInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_name(), output);
  }

  // optional int32 sensor_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->sensor_handle(), output);
  }

  // optional bool first_flush_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->first_flush_pending(), output);
  }

  // optional int32 pending_flush_events_to_send = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->pending_flush_events_to_send(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorEventConnectionProto.FlushInfoProto)
}

size_t SensorEventConnectionProto_FlushInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorEventConnectionProto.FlushInfoProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string sensor_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sensor_name());
    }

    // optional int32 sensor_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sensor_handle());
    }

    // optional bool first_flush_pending = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 pending_flush_events_to_send = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pending_flush_events_to_send());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEventConnectionProto_FlushInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorEventConnectionProto_FlushInfoProto*>(
      &from));
}

void SensorEventConnectionProto_FlushInfoProto::MergeFrom(const SensorEventConnectionProto_FlushInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorEventConnectionProto.FlushInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sensor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_handle_ = from.sensor_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_flush_pending_ = from.first_flush_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      pending_flush_events_to_send_ = from.pending_flush_events_to_send_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEventConnectionProto_FlushInfoProto::CopyFrom(const SensorEventConnectionProto_FlushInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorEventConnectionProto.FlushInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEventConnectionProto_FlushInfoProto::IsInitialized() const {
  return true;
}

void SensorEventConnectionProto_FlushInfoProto::InternalSwap(SensorEventConnectionProto_FlushInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sensor_name_.Swap(&other->sensor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sensor_handle_, other->sensor_handle_);
  swap(first_flush_pending_, other->first_flush_pending_);
  swap(pending_flush_events_to_send_, other->pending_flush_events_to_send_);
}

std::string SensorEventConnectionProto_FlushInfoProto::GetTypeName() const {
  return "android.service.SensorEventConnectionProto.FlushInfoProto";
}


// ===================================================================

void SensorEventConnectionProto::InitAsDefaultInstance() {
}
class SensorEventConnectionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorEventConnectionProto>()._has_bits_);
  static void set_has_operating_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wake_lock_ref_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cache_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_cache_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_events_received(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_events_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_events_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_events_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_acks_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_acks_received(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

SensorEventConnectionProto::SensorEventConnectionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorEventConnectionProto)
}
SensorEventConnectionProto::SensorEventConnectionProto(const SensorEventConnectionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      flush_infos_(from.flush_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  ::memcpy(&operating_mode_, &from.operating_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_acks_received_) -
    reinterpret_cast<char*>(&operating_mode_)) + sizeof(total_acks_received_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorEventConnectionProto)
}

void SensorEventConnectionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorEventConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operating_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_acks_received_) -
      reinterpret_cast<char*>(&operating_mode_)) + sizeof(total_acks_received_));
}

SensorEventConnectionProto::~SensorEventConnectionProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorEventConnectionProto)
  SharedDtor();
}

void SensorEventConnectionProto::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorEventConnectionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorEventConnectionProto& SensorEventConnectionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorEventConnectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorEventConnectionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorEventConnectionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flush_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&operating_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&events_sent_) -
        reinterpret_cast<char*>(&operating_mode_)) + sizeof(events_sent_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&events_cache_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_acks_received_) -
        reinterpret_cast<char*>(&events_cache_)) + sizeof(total_acks_received_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorEventConnectionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.service.SensorEventConnectionProto.OperatingModeEnum operating_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::service::SensorEventConnectionProto_OperatingModeEnum_IsValid(val))) {
            set_operating_mode(static_cast<::android::service::SensorEventConnectionProto_OperatingModeEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wake_lock_ref_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wake_lock_ref_count(&has_bits);
          wake_lock_ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cache_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cache_size(&has_bits);
          cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_cache_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_cache_size(&has_bits);
          max_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorEventConnectionProto.FlushInfoProto flush_infos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_flush_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional int32 events_received = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_events_received(&has_bits);
          events_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 events_sent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_events_sent(&has_bits);
          events_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 events_cache = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_events_cache(&has_bits);
          events_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 events_dropped = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_events_dropped(&has_bits);
          events_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_acks_needed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_total_acks_needed(&has_bits);
          total_acks_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_acks_received = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_acks_received(&has_bits);
          total_acks_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorEventConnectionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorEventConnectionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.service.SensorEventConnectionProto.OperatingModeEnum operating_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::service::SensorEventConnectionProto_OperatingModeEnum_IsValid(value)) {
            set_operating_mode(static_cast< ::android::service::SensorEventConnectionProto_OperatingModeEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wake_lock_ref_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_wake_lock_ref_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wake_lock_ref_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cache_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_cache_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_cache_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_max_cache_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cache_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorEventConnectionProto.FlushInfoProto flush_infos = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_flush_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 events_received = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_events_received(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &events_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 events_sent = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_events_sent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &events_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 events_cache = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_events_cache(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &events_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 events_dropped = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_events_dropped(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &events_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_acks_needed = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_total_acks_needed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_acks_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_acks_received = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_total_acks_received(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_acks_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorEventConnectionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorEventConnectionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorEventConnectionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorEventConnectionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.service.SensorEventConnectionProto.OperatingModeEnum operating_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->operating_mode(), output);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  // optional int32 wake_lock_ref_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->wake_lock_ref_count(), output);
  }

  // optional int32 uid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->uid(), output);
  }

  // optional int32 cache_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->cache_size(), output);
  }

  // optional int32 max_cache_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->max_cache_size(), output);
  }

  // repeated .android.service.SensorEventConnectionProto.FlushInfoProto flush_infos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->flush_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->flush_infos(static_cast<int>(i)),
      output);
  }

  // optional int32 events_received = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->events_received(), output);
  }

  // optional int32 events_sent = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->events_sent(), output);
  }

  // optional int32 events_cache = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->events_cache(), output);
  }

  // optional int32 events_dropped = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->events_dropped(), output);
  }

  // optional int32 total_acks_needed = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->total_acks_needed(), output);
  }

  // optional int32 total_acks_received = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->total_acks_received(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorEventConnectionProto)
}

size_t SensorEventConnectionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorEventConnectionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.SensorEventConnectionProto.FlushInfoProto flush_infos = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->flush_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->flush_infos(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string package_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .android.service.SensorEventConnectionProto.OperatingModeEnum operating_mode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operating_mode());
    }

    // optional int32 wake_lock_ref_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->wake_lock_ref_count());
    }

    // optional int32 uid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 cache_size = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cache_size());
    }

    // optional int32 max_cache_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_cache_size());
    }

    // optional int32 events_received = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->events_received());
    }

    // optional int32 events_sent = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->events_sent());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 events_cache = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->events_cache());
    }

    // optional int32 events_dropped = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->events_dropped());
    }

    // optional int32 total_acks_needed = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_acks_needed());
    }

    // optional int32 total_acks_received = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_acks_received());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorEventConnectionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorEventConnectionProto*>(
      &from));
}

void SensorEventConnectionProto::MergeFrom(const SensorEventConnectionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorEventConnectionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flush_infos_.MergeFrom(from.flush_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      operating_mode_ = from.operating_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      wake_lock_ref_count_ = from.wake_lock_ref_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000010u) {
      cache_size_ = from.cache_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_cache_size_ = from.max_cache_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      events_received_ = from.events_received_;
    }
    if (cached_has_bits & 0x00000080u) {
      events_sent_ = from.events_sent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      events_cache_ = from.events_cache_;
    }
    if (cached_has_bits & 0x00000200u) {
      events_dropped_ = from.events_dropped_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_acks_needed_ = from.total_acks_needed_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_acks_received_ = from.total_acks_received_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorEventConnectionProto::CopyFrom(const SensorEventConnectionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorEventConnectionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEventConnectionProto::IsInitialized() const {
  return true;
}

void SensorEventConnectionProto::InternalSwap(SensorEventConnectionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&flush_infos_)->InternalSwap(CastToBase(&other->flush_infos_));
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operating_mode_, other->operating_mode_);
  swap(wake_lock_ref_count_, other->wake_lock_ref_count_);
  swap(uid_, other->uid_);
  swap(cache_size_, other->cache_size_);
  swap(max_cache_size_, other->max_cache_size_);
  swap(events_received_, other->events_received_);
  swap(events_sent_, other->events_sent_);
  swap(events_cache_, other->events_cache_);
  swap(events_dropped_, other->events_dropped_);
  swap(total_acks_needed_, other->total_acks_needed_);
  swap(total_acks_received_, other->total_acks_received_);
}

std::string SensorEventConnectionProto::GetTypeName() const {
  return "android.service.SensorEventConnectionProto";
}


// ===================================================================

void SensorRegistrationInfoProto::InitAsDefaultInstance() {
}
class SensorRegistrationInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorRegistrationInfoProto>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sensor_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sampling_rate_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_report_latency_us(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

SensorRegistrationInfoProto::SensorRegistrationInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorRegistrationInfoProto)
}
SensorRegistrationInfoProto::SensorRegistrationInfoProto(const SensorRegistrationInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_report_latency_us_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(max_report_latency_us_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorRegistrationInfoProto)
}

void SensorRegistrationInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorRegistrationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_report_latency_us_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(max_report_latency_us_));
}

SensorRegistrationInfoProto::~SensorRegistrationInfoProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorRegistrationInfoProto)
  SharedDtor();
}

void SensorRegistrationInfoProto::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorRegistrationInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorRegistrationInfoProto& SensorRegistrationInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorRegistrationInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fsensor_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorRegistrationInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorRegistrationInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_report_latency_us_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(max_report_latency_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorRegistrationInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sensor_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sensor_handle(&has_bits);
          sensor_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 sampling_rate_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sampling_rate_us(&has_bits);
          sampling_rate_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_report_latency_us = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_report_latency_us(&has_bits);
          max_report_latency_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool activated = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_activated(&has_bits);
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorRegistrationInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorRegistrationInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sensor_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sensor_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sampling_rate_us = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_sampling_rate_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sampling_rate_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_report_latency_us = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_max_report_latency_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_report_latency_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool activated = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_activated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorRegistrationInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorRegistrationInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorRegistrationInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorRegistrationInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_sec(), output);
  }

  // optional int32 sensor_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->sensor_handle(), output);
  }

  // optional string package_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->package_name(), output);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->pid(), output);
  }

  // optional int32 uid = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->uid(), output);
  }

  // optional int64 sampling_rate_us = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->sampling_rate_us(), output);
  }

  // optional int64 max_report_latency_us = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->max_report_latency_us(), output);
  }

  // optional bool activated = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->activated(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorRegistrationInfoProto)
}

size_t SensorRegistrationInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorRegistrationInfoProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string package_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional int64 timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_sec());
    }

    // optional int32 sensor_handle = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sensor_handle());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int64 sampling_rate_us = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->sampling_rate_us());
    }

    // optional int32 uid = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bool activated = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int64 max_report_latency_us = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_report_latency_us());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorRegistrationInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorRegistrationInfoProto*>(
      &from));
}

void SensorRegistrationInfoProto::MergeFrom(const SensorRegistrationInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorRegistrationInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      sensor_handle_ = from.sensor_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000010u) {
      sampling_rate_us_ = from.sampling_rate_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000040u) {
      activated_ = from.activated_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_report_latency_us_ = from.max_report_latency_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorRegistrationInfoProto::CopyFrom(const SensorRegistrationInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorRegistrationInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorRegistrationInfoProto::IsInitialized() const {
  return true;
}

void SensorRegistrationInfoProto::InternalSwap(SensorRegistrationInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(sensor_handle_, other->sensor_handle_);
  swap(pid_, other->pid_);
  swap(sampling_rate_us_, other->sampling_rate_us_);
  swap(uid_, other->uid_);
  swap(activated_, other->activated_);
  swap(max_report_latency_us_, other->max_report_latency_us_);
}

std::string SensorRegistrationInfoProto::GetTypeName() const {
  return "android.service.SensorRegistrationInfoProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::service::SensorServiceProto* Arena::CreateMaybeMessage< ::android::service::SensorServiceProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorServiceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorDeviceProto_SensorProto* Arena::CreateMaybeMessage< ::android::service::SensorDeviceProto_SensorProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorDeviceProto_SensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorDeviceProto* Arena::CreateMaybeMessage< ::android::service::SensorDeviceProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorDeviceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorListProto_SensorProto* Arena::CreateMaybeMessage< ::android::service::SensorListProto_SensorProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorListProto_SensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorListProto* Arena::CreateMaybeMessage< ::android::service::SensorListProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorListProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorFusionProto_FusionProto* Arena::CreateMaybeMessage< ::android::service::SensorFusionProto_FusionProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorFusionProto_FusionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorFusionProto* Arena::CreateMaybeMessage< ::android::service::SensorFusionProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorFusionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorEventsProto_Event* Arena::CreateMaybeMessage< ::android::service::SensorEventsProto_Event >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorEventsProto_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorEventsProto_RecentEventsLog* Arena::CreateMaybeMessage< ::android::service::SensorEventsProto_RecentEventsLog >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorEventsProto_RecentEventsLog >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorEventsProto* Arena::CreateMaybeMessage< ::android::service::SensorEventsProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorEventsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::ActiveSensorProto* Arena::CreateMaybeMessage< ::android::service::ActiveSensorProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::ActiveSensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorDirectConnectionProto_SensorProto* Arena::CreateMaybeMessage< ::android::service::SensorDirectConnectionProto_SensorProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorDirectConnectionProto_SensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorDirectConnectionProto* Arena::CreateMaybeMessage< ::android::service::SensorDirectConnectionProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorDirectConnectionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorEventConnectionProto_FlushInfoProto* Arena::CreateMaybeMessage< ::android::service::SensorEventConnectionProto_FlushInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorEventConnectionProto_FlushInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorEventConnectionProto* Arena::CreateMaybeMessage< ::android::service::SensorEventConnectionProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorEventConnectionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorRegistrationInfoProto* Arena::CreateMaybeMessage< ::android::service::SensorRegistrationInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorRegistrationInfoProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
