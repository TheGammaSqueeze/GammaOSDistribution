// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/diskstats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace service {
namespace diskstats {
class DiskStatsAppSizesProto;
class DiskStatsAppSizesProtoDefaultTypeInternal;
extern DiskStatsAppSizesProtoDefaultTypeInternal _DiskStatsAppSizesProto_default_instance_;
class DiskStatsCachedValuesProto;
class DiskStatsCachedValuesProtoDefaultTypeInternal;
extern DiskStatsCachedValuesProtoDefaultTypeInternal _DiskStatsCachedValuesProto_default_instance_;
class DiskStatsFreeSpaceProto;
class DiskStatsFreeSpaceProtoDefaultTypeInternal;
extern DiskStatsFreeSpaceProtoDefaultTypeInternal _DiskStatsFreeSpaceProto_default_instance_;
class DiskStatsServiceDumpProto;
class DiskStatsServiceDumpProtoDefaultTypeInternal;
extern DiskStatsServiceDumpProtoDefaultTypeInternal _DiskStatsServiceDumpProto_default_instance_;
}  // namespace diskstats
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::diskstats::DiskStatsAppSizesProto* Arena::CreateMaybeMessage<::android::service::diskstats::DiskStatsAppSizesProto>(Arena*);
template<> ::android::service::diskstats::DiskStatsCachedValuesProto* Arena::CreateMaybeMessage<::android::service::diskstats::DiskStatsCachedValuesProto>(Arena*);
template<> ::android::service::diskstats::DiskStatsFreeSpaceProto* Arena::CreateMaybeMessage<::android::service::diskstats::DiskStatsFreeSpaceProto>(Arena*);
template<> ::android::service::diskstats::DiskStatsServiceDumpProto* Arena::CreateMaybeMessage<::android::service::diskstats::DiskStatsServiceDumpProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {
namespace diskstats {

enum DiskStatsServiceDumpProto_EncryptionType : int {
  DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_UNKNOWN = 0,
  DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_NONE = 1,
  DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_FULL_DISK = 2,
  DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_FILE_BASED = 3
};
bool DiskStatsServiceDumpProto_EncryptionType_IsValid(int value);
constexpr DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto_EncryptionType_EncryptionType_MIN = DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_UNKNOWN;
constexpr DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto_EncryptionType_EncryptionType_MAX = DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_FILE_BASED;
constexpr int DiskStatsServiceDumpProto_EncryptionType_EncryptionType_ARRAYSIZE = DiskStatsServiceDumpProto_EncryptionType_EncryptionType_MAX + 1;

const std::string& DiskStatsServiceDumpProto_EncryptionType_Name(DiskStatsServiceDumpProto_EncryptionType value);
template<typename T>
inline const std::string& DiskStatsServiceDumpProto_EncryptionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiskStatsServiceDumpProto_EncryptionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiskStatsServiceDumpProto_EncryptionType_Name.");
  return DiskStatsServiceDumpProto_EncryptionType_Name(static_cast<DiskStatsServiceDumpProto_EncryptionType>(enum_t_value));
}
bool DiskStatsServiceDumpProto_EncryptionType_Parse(
    const std::string& name, DiskStatsServiceDumpProto_EncryptionType* value);
enum DiskStatsFreeSpaceProto_Folder : int {
  DiskStatsFreeSpaceProto_Folder_FOLDER_DATA = 0,
  DiskStatsFreeSpaceProto_Folder_FOLDER_CACHE = 1,
  DiskStatsFreeSpaceProto_Folder_FOLDER_SYSTEM = 2
};
bool DiskStatsFreeSpaceProto_Folder_IsValid(int value);
constexpr DiskStatsFreeSpaceProto_Folder DiskStatsFreeSpaceProto_Folder_Folder_MIN = DiskStatsFreeSpaceProto_Folder_FOLDER_DATA;
constexpr DiskStatsFreeSpaceProto_Folder DiskStatsFreeSpaceProto_Folder_Folder_MAX = DiskStatsFreeSpaceProto_Folder_FOLDER_SYSTEM;
constexpr int DiskStatsFreeSpaceProto_Folder_Folder_ARRAYSIZE = DiskStatsFreeSpaceProto_Folder_Folder_MAX + 1;

const std::string& DiskStatsFreeSpaceProto_Folder_Name(DiskStatsFreeSpaceProto_Folder value);
template<typename T>
inline const std::string& DiskStatsFreeSpaceProto_Folder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiskStatsFreeSpaceProto_Folder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiskStatsFreeSpaceProto_Folder_Name.");
  return DiskStatsFreeSpaceProto_Folder_Name(static_cast<DiskStatsFreeSpaceProto_Folder>(enum_t_value));
}
bool DiskStatsFreeSpaceProto_Folder_Parse(
    const std::string& name, DiskStatsFreeSpaceProto_Folder* value);
// ===================================================================

class DiskStatsServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.diskstats.DiskStatsServiceDumpProto) */ {
 public:
  DiskStatsServiceDumpProto();
  virtual ~DiskStatsServiceDumpProto();

  DiskStatsServiceDumpProto(const DiskStatsServiceDumpProto& from);
  DiskStatsServiceDumpProto(DiskStatsServiceDumpProto&& from) noexcept
    : DiskStatsServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline DiskStatsServiceDumpProto& operator=(const DiskStatsServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiskStatsServiceDumpProto& operator=(DiskStatsServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DiskStatsServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskStatsServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const DiskStatsServiceDumpProto*>(
               &_DiskStatsServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DiskStatsServiceDumpProto& a, DiskStatsServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DiskStatsServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiskStatsServiceDumpProto* New() const final {
    return CreateMaybeMessage<DiskStatsServiceDumpProto>(nullptr);
  }

  DiskStatsServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiskStatsServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DiskStatsServiceDumpProto& from);
  void MergeFrom(const DiskStatsServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiskStatsServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.diskstats.DiskStatsServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DiskStatsServiceDumpProto_EncryptionType EncryptionType;
  static constexpr EncryptionType ENCRYPTION_UNKNOWN =
    DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_UNKNOWN;
  static constexpr EncryptionType ENCRYPTION_NONE =
    DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_NONE;
  static constexpr EncryptionType ENCRYPTION_FULL_DISK =
    DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_FULL_DISK;
  static constexpr EncryptionType ENCRYPTION_FILE_BASED =
    DiskStatsServiceDumpProto_EncryptionType_ENCRYPTION_FILE_BASED;
  static inline bool EncryptionType_IsValid(int value) {
    return DiskStatsServiceDumpProto_EncryptionType_IsValid(value);
  }
  static constexpr EncryptionType EncryptionType_MIN =
    DiskStatsServiceDumpProto_EncryptionType_EncryptionType_MIN;
  static constexpr EncryptionType EncryptionType_MAX =
    DiskStatsServiceDumpProto_EncryptionType_EncryptionType_MAX;
  static constexpr int EncryptionType_ARRAYSIZE =
    DiskStatsServiceDumpProto_EncryptionType_EncryptionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EncryptionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EncryptionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EncryptionType_Name.");
    return DiskStatsServiceDumpProto_EncryptionType_Name(enum_t_value);
  }
  static inline bool EncryptionType_Parse(const std::string& name,
      EncryptionType* value) {
    return DiskStatsServiceDumpProto_EncryptionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsFreeSpaceFieldNumber = 4,
    kErrorMessageFieldNumber = 2,
    kCachedFolderSizesFieldNumber = 6,
    kHasTestErrorFieldNumber = 1,
    kWrite512BLatencyMillisFieldNumber = 3,
    kEncryptionFieldNumber = 5,
    kBenchmarkedWriteSpeedKbpsFieldNumber = 7,
  };
  // repeated .android.service.diskstats.DiskStatsFreeSpaceProto partitions_free_space = 4;
  int partitions_free_space_size() const;
  void clear_partitions_free_space();
  ::android::service::diskstats::DiskStatsFreeSpaceProto* mutable_partitions_free_space(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsFreeSpaceProto >*
      mutable_partitions_free_space();
  const ::android::service::diskstats::DiskStatsFreeSpaceProto& partitions_free_space(int index) const;
  ::android::service::diskstats::DiskStatsFreeSpaceProto* add_partitions_free_space();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsFreeSpaceProto >&
      partitions_free_space() const;

  // optional string error_message = 2;
  bool has_error_message() const;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);

  // optional .android.service.diskstats.DiskStatsCachedValuesProto cached_folder_sizes = 6;
  bool has_cached_folder_sizes() const;
  void clear_cached_folder_sizes();
  const ::android::service::diskstats::DiskStatsCachedValuesProto& cached_folder_sizes() const;
  ::android::service::diskstats::DiskStatsCachedValuesProto* release_cached_folder_sizes();
  ::android::service::diskstats::DiskStatsCachedValuesProto* mutable_cached_folder_sizes();
  void set_allocated_cached_folder_sizes(::android::service::diskstats::DiskStatsCachedValuesProto* cached_folder_sizes);

  // optional bool has_test_error = 1;
  bool has_has_test_error() const;
  void clear_has_test_error();
  bool has_test_error() const;
  void set_has_test_error(bool value);

  // optional int32 write_512b_latency_millis = 3;
  bool has_write_512b_latency_millis() const;
  void clear_write_512b_latency_millis();
  ::PROTOBUF_NAMESPACE_ID::int32 write_512b_latency_millis() const;
  void set_write_512b_latency_millis(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.service.diskstats.DiskStatsServiceDumpProto.EncryptionType encryption = 5;
  bool has_encryption() const;
  void clear_encryption();
  ::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType encryption() const;
  void set_encryption(::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType value);

  // optional int32 benchmarked_write_speed_kbps = 7;
  bool has_benchmarked_write_speed_kbps() const;
  void clear_benchmarked_write_speed_kbps();
  ::PROTOBUF_NAMESPACE_ID::int32 benchmarked_write_speed_kbps() const;
  void set_benchmarked_write_speed_kbps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.diskstats.DiskStatsServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsFreeSpaceProto > partitions_free_space_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::android::service::diskstats::DiskStatsCachedValuesProto* cached_folder_sizes_;
  bool has_test_error_;
  ::PROTOBUF_NAMESPACE_ID::int32 write_512b_latency_millis_;
  int encryption_;
  ::PROTOBUF_NAMESPACE_ID::int32 benchmarked_write_speed_kbps_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto;
};
// -------------------------------------------------------------------

class DiskStatsCachedValuesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.diskstats.DiskStatsCachedValuesProto) */ {
 public:
  DiskStatsCachedValuesProto();
  virtual ~DiskStatsCachedValuesProto();

  DiskStatsCachedValuesProto(const DiskStatsCachedValuesProto& from);
  DiskStatsCachedValuesProto(DiskStatsCachedValuesProto&& from) noexcept
    : DiskStatsCachedValuesProto() {
    *this = ::std::move(from);
  }

  inline DiskStatsCachedValuesProto& operator=(const DiskStatsCachedValuesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiskStatsCachedValuesProto& operator=(DiskStatsCachedValuesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DiskStatsCachedValuesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskStatsCachedValuesProto* internal_default_instance() {
    return reinterpret_cast<const DiskStatsCachedValuesProto*>(
               &_DiskStatsCachedValuesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DiskStatsCachedValuesProto& a, DiskStatsCachedValuesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DiskStatsCachedValuesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiskStatsCachedValuesProto* New() const final {
    return CreateMaybeMessage<DiskStatsCachedValuesProto>(nullptr);
  }

  DiskStatsCachedValuesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiskStatsCachedValuesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DiskStatsCachedValuesProto& from);
  void MergeFrom(const DiskStatsCachedValuesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiskStatsCachedValuesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.diskstats.DiskStatsCachedValuesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppSizesFieldNumber = 9,
    kAggAppsSizeKbFieldNumber = 1,
    kAggAppsCacheSizeKbFieldNumber = 2,
    kPhotosSizeKbFieldNumber = 3,
    kVideosSizeKbFieldNumber = 4,
    kAudioSizeKbFieldNumber = 5,
    kDownloadsSizeKbFieldNumber = 6,
    kSystemSizeKbFieldNumber = 7,
    kOtherSizeKbFieldNumber = 8,
    kAggAppsDataSizeKbFieldNumber = 10,
  };
  // repeated .android.service.diskstats.DiskStatsAppSizesProto app_sizes = 9;
  int app_sizes_size() const;
  void clear_app_sizes();
  ::android::service::diskstats::DiskStatsAppSizesProto* mutable_app_sizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsAppSizesProto >*
      mutable_app_sizes();
  const ::android::service::diskstats::DiskStatsAppSizesProto& app_sizes(int index) const;
  ::android::service::diskstats::DiskStatsAppSizesProto* add_app_sizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsAppSizesProto >&
      app_sizes() const;

  // optional int64 agg_apps_size_kb = 1;
  bool has_agg_apps_size_kb() const;
  void clear_agg_apps_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 agg_apps_size_kb() const;
  void set_agg_apps_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 agg_apps_cache_size_kb = 2;
  bool has_agg_apps_cache_size_kb() const;
  void clear_agg_apps_cache_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 agg_apps_cache_size_kb() const;
  void set_agg_apps_cache_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 photos_size_kb = 3;
  bool has_photos_size_kb() const;
  void clear_photos_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 photos_size_kb() const;
  void set_photos_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 videos_size_kb = 4;
  bool has_videos_size_kb() const;
  void clear_videos_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 videos_size_kb() const;
  void set_videos_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 audio_size_kb = 5;
  bool has_audio_size_kb() const;
  void clear_audio_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 audio_size_kb() const;
  void set_audio_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 downloads_size_kb = 6;
  bool has_downloads_size_kb() const;
  void clear_downloads_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 downloads_size_kb() const;
  void set_downloads_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 system_size_kb = 7;
  bool has_system_size_kb() const;
  void clear_system_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 system_size_kb() const;
  void set_system_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 other_size_kb = 8;
  bool has_other_size_kb() const;
  void clear_other_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 other_size_kb() const;
  void set_other_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 agg_apps_data_size_kb = 10;
  bool has_agg_apps_data_size_kb() const;
  void clear_agg_apps_data_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 agg_apps_data_size_kb() const;
  void set_agg_apps_data_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.service.diskstats.DiskStatsCachedValuesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsAppSizesProto > app_sizes_;
  ::PROTOBUF_NAMESPACE_ID::int64 agg_apps_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 agg_apps_cache_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 photos_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 videos_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 audio_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 downloads_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 system_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 other_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 agg_apps_data_size_kb_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto;
};
// -------------------------------------------------------------------

class DiskStatsAppSizesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.diskstats.DiskStatsAppSizesProto) */ {
 public:
  DiskStatsAppSizesProto();
  virtual ~DiskStatsAppSizesProto();

  DiskStatsAppSizesProto(const DiskStatsAppSizesProto& from);
  DiskStatsAppSizesProto(DiskStatsAppSizesProto&& from) noexcept
    : DiskStatsAppSizesProto() {
    *this = ::std::move(from);
  }

  inline DiskStatsAppSizesProto& operator=(const DiskStatsAppSizesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiskStatsAppSizesProto& operator=(DiskStatsAppSizesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DiskStatsAppSizesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskStatsAppSizesProto* internal_default_instance() {
    return reinterpret_cast<const DiskStatsAppSizesProto*>(
               &_DiskStatsAppSizesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DiskStatsAppSizesProto& a, DiskStatsAppSizesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DiskStatsAppSizesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiskStatsAppSizesProto* New() const final {
    return CreateMaybeMessage<DiskStatsAppSizesProto>(nullptr);
  }

  DiskStatsAppSizesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiskStatsAppSizesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DiskStatsAppSizesProto& from);
  void MergeFrom(const DiskStatsAppSizesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiskStatsAppSizesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.diskstats.DiskStatsAppSizesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kAppSizeKbFieldNumber = 2,
    kCacheSizeKbFieldNumber = 3,
    kAppDataSizeKbFieldNumber = 4,
  };
  // optional string package_name = 1;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional int64 app_size_kb = 2;
  bool has_app_size_kb() const;
  void clear_app_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 app_size_kb() const;
  void set_app_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 cache_size_kb = 3;
  bool has_cache_size_kb() const;
  void clear_cache_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 cache_size_kb() const;
  void set_cache_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 app_data_size_kb = 4;
  bool has_app_data_size_kb() const;
  void clear_app_data_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 app_data_size_kb() const;
  void set_app_data_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.service.diskstats.DiskStatsAppSizesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 app_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 cache_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 app_data_size_kb_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto;
};
// -------------------------------------------------------------------

class DiskStatsFreeSpaceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.diskstats.DiskStatsFreeSpaceProto) */ {
 public:
  DiskStatsFreeSpaceProto();
  virtual ~DiskStatsFreeSpaceProto();

  DiskStatsFreeSpaceProto(const DiskStatsFreeSpaceProto& from);
  DiskStatsFreeSpaceProto(DiskStatsFreeSpaceProto&& from) noexcept
    : DiskStatsFreeSpaceProto() {
    *this = ::std::move(from);
  }

  inline DiskStatsFreeSpaceProto& operator=(const DiskStatsFreeSpaceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiskStatsFreeSpaceProto& operator=(DiskStatsFreeSpaceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DiskStatsFreeSpaceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskStatsFreeSpaceProto* internal_default_instance() {
    return reinterpret_cast<const DiskStatsFreeSpaceProto*>(
               &_DiskStatsFreeSpaceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DiskStatsFreeSpaceProto& a, DiskStatsFreeSpaceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DiskStatsFreeSpaceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiskStatsFreeSpaceProto* New() const final {
    return CreateMaybeMessage<DiskStatsFreeSpaceProto>(nullptr);
  }

  DiskStatsFreeSpaceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiskStatsFreeSpaceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DiskStatsFreeSpaceProto& from);
  void MergeFrom(const DiskStatsFreeSpaceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiskStatsFreeSpaceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.diskstats.DiskStatsFreeSpaceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DiskStatsFreeSpaceProto_Folder Folder;
  static constexpr Folder FOLDER_DATA =
    DiskStatsFreeSpaceProto_Folder_FOLDER_DATA;
  static constexpr Folder FOLDER_CACHE =
    DiskStatsFreeSpaceProto_Folder_FOLDER_CACHE;
  static constexpr Folder FOLDER_SYSTEM =
    DiskStatsFreeSpaceProto_Folder_FOLDER_SYSTEM;
  static inline bool Folder_IsValid(int value) {
    return DiskStatsFreeSpaceProto_Folder_IsValid(value);
  }
  static constexpr Folder Folder_MIN =
    DiskStatsFreeSpaceProto_Folder_Folder_MIN;
  static constexpr Folder Folder_MAX =
    DiskStatsFreeSpaceProto_Folder_Folder_MAX;
  static constexpr int Folder_ARRAYSIZE =
    DiskStatsFreeSpaceProto_Folder_Folder_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Folder_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Folder>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Folder_Name.");
    return DiskStatsFreeSpaceProto_Folder_Name(enum_t_value);
  }
  static inline bool Folder_Parse(const std::string& name,
      Folder* value) {
    return DiskStatsFreeSpaceProto_Folder_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableSpaceKbFieldNumber = 2,
    kTotalSpaceKbFieldNumber = 3,
    kFolderFieldNumber = 1,
  };
  // optional int64 available_space_kb = 2;
  bool has_available_space_kb() const;
  void clear_available_space_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 available_space_kb() const;
  void set_available_space_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_space_kb = 3;
  bool has_total_space_kb() const;
  void clear_total_space_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 total_space_kb() const;
  void set_total_space_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.service.diskstats.DiskStatsFreeSpaceProto.Folder folder = 1;
  bool has_folder() const;
  void clear_folder();
  ::android::service::diskstats::DiskStatsFreeSpaceProto_Folder folder() const;
  void set_folder(::android::service::diskstats::DiskStatsFreeSpaceProto_Folder value);

  // @@protoc_insertion_point(class_scope:android.service.diskstats.DiskStatsFreeSpaceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 available_space_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_space_kb_;
  int folder_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiskStatsServiceDumpProto

// optional bool has_test_error = 1;
inline bool DiskStatsServiceDumpProto::has_has_test_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiskStatsServiceDumpProto::clear_has_test_error() {
  has_test_error_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DiskStatsServiceDumpProto::has_test_error() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsServiceDumpProto.has_test_error)
  return has_test_error_;
}
inline void DiskStatsServiceDumpProto::set_has_test_error(bool value) {
  _has_bits_[0] |= 0x00000004u;
  has_test_error_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsServiceDumpProto.has_test_error)
}

// optional string error_message = 2;
inline bool DiskStatsServiceDumpProto::has_error_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskStatsServiceDumpProto::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiskStatsServiceDumpProto::error_message() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsServiceDumpProto.error_message)
  return error_message_.GetNoArena();
}
inline void DiskStatsServiceDumpProto::set_error_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsServiceDumpProto.error_message)
}
inline void DiskStatsServiceDumpProto::set_error_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.diskstats.DiskStatsServiceDumpProto.error_message)
}
inline void DiskStatsServiceDumpProto::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.diskstats.DiskStatsServiceDumpProto.error_message)
}
inline void DiskStatsServiceDumpProto::set_error_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.diskstats.DiskStatsServiceDumpProto.error_message)
}
inline std::string* DiskStatsServiceDumpProto::mutable_error_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.diskstats.DiskStatsServiceDumpProto.error_message)
  return error_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiskStatsServiceDumpProto::release_error_message() {
  // @@protoc_insertion_point(field_release:android.service.diskstats.DiskStatsServiceDumpProto.error_message)
  if (!has_error_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiskStatsServiceDumpProto::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:android.service.diskstats.DiskStatsServiceDumpProto.error_message)
}

// optional int32 write_512b_latency_millis = 3;
inline bool DiskStatsServiceDumpProto::has_write_512b_latency_millis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DiskStatsServiceDumpProto::clear_write_512b_latency_millis() {
  write_512b_latency_millis_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiskStatsServiceDumpProto::write_512b_latency_millis() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsServiceDumpProto.write_512b_latency_millis)
  return write_512b_latency_millis_;
}
inline void DiskStatsServiceDumpProto::set_write_512b_latency_millis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  write_512b_latency_millis_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsServiceDumpProto.write_512b_latency_millis)
}

// repeated .android.service.diskstats.DiskStatsFreeSpaceProto partitions_free_space = 4;
inline int DiskStatsServiceDumpProto::partitions_free_space_size() const {
  return partitions_free_space_.size();
}
inline void DiskStatsServiceDumpProto::clear_partitions_free_space() {
  partitions_free_space_.Clear();
}
inline ::android::service::diskstats::DiskStatsFreeSpaceProto* DiskStatsServiceDumpProto::mutable_partitions_free_space(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.diskstats.DiskStatsServiceDumpProto.partitions_free_space)
  return partitions_free_space_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsFreeSpaceProto >*
DiskStatsServiceDumpProto::mutable_partitions_free_space() {
  // @@protoc_insertion_point(field_mutable_list:android.service.diskstats.DiskStatsServiceDumpProto.partitions_free_space)
  return &partitions_free_space_;
}
inline const ::android::service::diskstats::DiskStatsFreeSpaceProto& DiskStatsServiceDumpProto::partitions_free_space(int index) const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsServiceDumpProto.partitions_free_space)
  return partitions_free_space_.Get(index);
}
inline ::android::service::diskstats::DiskStatsFreeSpaceProto* DiskStatsServiceDumpProto::add_partitions_free_space() {
  // @@protoc_insertion_point(field_add:android.service.diskstats.DiskStatsServiceDumpProto.partitions_free_space)
  return partitions_free_space_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsFreeSpaceProto >&
DiskStatsServiceDumpProto::partitions_free_space() const {
  // @@protoc_insertion_point(field_list:android.service.diskstats.DiskStatsServiceDumpProto.partitions_free_space)
  return partitions_free_space_;
}

// optional .android.service.diskstats.DiskStatsServiceDumpProto.EncryptionType encryption = 5;
inline bool DiskStatsServiceDumpProto::has_encryption() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DiskStatsServiceDumpProto::clear_encryption() {
  encryption_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto::encryption() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsServiceDumpProto.encryption)
  return static_cast< ::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType >(encryption_);
}
inline void DiskStatsServiceDumpProto::set_encryption(::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType value) {
  assert(::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  encryption_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsServiceDumpProto.encryption)
}

// optional .android.service.diskstats.DiskStatsCachedValuesProto cached_folder_sizes = 6;
inline bool DiskStatsServiceDumpProto::has_cached_folder_sizes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiskStatsServiceDumpProto::clear_cached_folder_sizes() {
  if (cached_folder_sizes_ != nullptr) cached_folder_sizes_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::service::diskstats::DiskStatsCachedValuesProto& DiskStatsServiceDumpProto::cached_folder_sizes() const {
  const ::android::service::diskstats::DiskStatsCachedValuesProto* p = cached_folder_sizes_;
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsServiceDumpProto.cached_folder_sizes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::diskstats::DiskStatsCachedValuesProto*>(
      &::android::service::diskstats::_DiskStatsCachedValuesProto_default_instance_);
}
inline ::android::service::diskstats::DiskStatsCachedValuesProto* DiskStatsServiceDumpProto::release_cached_folder_sizes() {
  // @@protoc_insertion_point(field_release:android.service.diskstats.DiskStatsServiceDumpProto.cached_folder_sizes)
  _has_bits_[0] &= ~0x00000002u;
  ::android::service::diskstats::DiskStatsCachedValuesProto* temp = cached_folder_sizes_;
  cached_folder_sizes_ = nullptr;
  return temp;
}
inline ::android::service::diskstats::DiskStatsCachedValuesProto* DiskStatsServiceDumpProto::mutable_cached_folder_sizes() {
  _has_bits_[0] |= 0x00000002u;
  if (cached_folder_sizes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::diskstats::DiskStatsCachedValuesProto>(GetArenaNoVirtual());
    cached_folder_sizes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.diskstats.DiskStatsServiceDumpProto.cached_folder_sizes)
  return cached_folder_sizes_;
}
inline void DiskStatsServiceDumpProto::set_allocated_cached_folder_sizes(::android::service::diskstats::DiskStatsCachedValuesProto* cached_folder_sizes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cached_folder_sizes_;
  }
  if (cached_folder_sizes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cached_folder_sizes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cached_folder_sizes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cached_folder_sizes_ = cached_folder_sizes;
  // @@protoc_insertion_point(field_set_allocated:android.service.diskstats.DiskStatsServiceDumpProto.cached_folder_sizes)
}

// optional int32 benchmarked_write_speed_kbps = 7;
inline bool DiskStatsServiceDumpProto::has_benchmarked_write_speed_kbps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DiskStatsServiceDumpProto::clear_benchmarked_write_speed_kbps() {
  benchmarked_write_speed_kbps_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiskStatsServiceDumpProto::benchmarked_write_speed_kbps() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsServiceDumpProto.benchmarked_write_speed_kbps)
  return benchmarked_write_speed_kbps_;
}
inline void DiskStatsServiceDumpProto::set_benchmarked_write_speed_kbps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  benchmarked_write_speed_kbps_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsServiceDumpProto.benchmarked_write_speed_kbps)
}

// -------------------------------------------------------------------

// DiskStatsCachedValuesProto

// optional int64 agg_apps_size_kb = 1;
inline bool DiskStatsCachedValuesProto::has_agg_apps_size_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_agg_apps_size_kb() {
  agg_apps_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::agg_apps_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.agg_apps_size_kb)
  return agg_apps_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_agg_apps_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  agg_apps_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.agg_apps_size_kb)
}

// optional int64 agg_apps_cache_size_kb = 2;
inline bool DiskStatsCachedValuesProto::has_agg_apps_cache_size_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_agg_apps_cache_size_kb() {
  agg_apps_cache_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::agg_apps_cache_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.agg_apps_cache_size_kb)
  return agg_apps_cache_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_agg_apps_cache_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  agg_apps_cache_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.agg_apps_cache_size_kb)
}

// optional int64 photos_size_kb = 3;
inline bool DiskStatsCachedValuesProto::has_photos_size_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_photos_size_kb() {
  photos_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::photos_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.photos_size_kb)
  return photos_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_photos_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  photos_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.photos_size_kb)
}

// optional int64 videos_size_kb = 4;
inline bool DiskStatsCachedValuesProto::has_videos_size_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_videos_size_kb() {
  videos_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::videos_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.videos_size_kb)
  return videos_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_videos_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  videos_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.videos_size_kb)
}

// optional int64 audio_size_kb = 5;
inline bool DiskStatsCachedValuesProto::has_audio_size_kb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_audio_size_kb() {
  audio_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::audio_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.audio_size_kb)
  return audio_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_audio_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  audio_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.audio_size_kb)
}

// optional int64 downloads_size_kb = 6;
inline bool DiskStatsCachedValuesProto::has_downloads_size_kb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_downloads_size_kb() {
  downloads_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::downloads_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.downloads_size_kb)
  return downloads_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_downloads_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  downloads_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.downloads_size_kb)
}

// optional int64 system_size_kb = 7;
inline bool DiskStatsCachedValuesProto::has_system_size_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_system_size_kb() {
  system_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::system_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.system_size_kb)
  return system_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_system_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  system_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.system_size_kb)
}

// optional int64 other_size_kb = 8;
inline bool DiskStatsCachedValuesProto::has_other_size_kb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_other_size_kb() {
  other_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::other_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.other_size_kb)
  return other_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_other_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  other_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.other_size_kb)
}

// repeated .android.service.diskstats.DiskStatsAppSizesProto app_sizes = 9;
inline int DiskStatsCachedValuesProto::app_sizes_size() const {
  return app_sizes_.size();
}
inline void DiskStatsCachedValuesProto::clear_app_sizes() {
  app_sizes_.Clear();
}
inline ::android::service::diskstats::DiskStatsAppSizesProto* DiskStatsCachedValuesProto::mutable_app_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.diskstats.DiskStatsCachedValuesProto.app_sizes)
  return app_sizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsAppSizesProto >*
DiskStatsCachedValuesProto::mutable_app_sizes() {
  // @@protoc_insertion_point(field_mutable_list:android.service.diskstats.DiskStatsCachedValuesProto.app_sizes)
  return &app_sizes_;
}
inline const ::android::service::diskstats::DiskStatsAppSizesProto& DiskStatsCachedValuesProto::app_sizes(int index) const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.app_sizes)
  return app_sizes_.Get(index);
}
inline ::android::service::diskstats::DiskStatsAppSizesProto* DiskStatsCachedValuesProto::add_app_sizes() {
  // @@protoc_insertion_point(field_add:android.service.diskstats.DiskStatsCachedValuesProto.app_sizes)
  return app_sizes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::diskstats::DiskStatsAppSizesProto >&
DiskStatsCachedValuesProto::app_sizes() const {
  // @@protoc_insertion_point(field_list:android.service.diskstats.DiskStatsCachedValuesProto.app_sizes)
  return app_sizes_;
}

// optional int64 agg_apps_data_size_kb = 10;
inline bool DiskStatsCachedValuesProto::has_agg_apps_data_size_kb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DiskStatsCachedValuesProto::clear_agg_apps_data_size_kb() {
  agg_apps_data_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsCachedValuesProto::agg_apps_data_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsCachedValuesProto.agg_apps_data_size_kb)
  return agg_apps_data_size_kb_;
}
inline void DiskStatsCachedValuesProto::set_agg_apps_data_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  agg_apps_data_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsCachedValuesProto.agg_apps_data_size_kb)
}

// -------------------------------------------------------------------

// DiskStatsAppSizesProto

// optional string package_name = 1;
inline bool DiskStatsAppSizesProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskStatsAppSizesProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiskStatsAppSizesProto::package_name() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsAppSizesProto.package_name)
  return package_name_.GetNoArena();
}
inline void DiskStatsAppSizesProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsAppSizesProto.package_name)
}
inline void DiskStatsAppSizesProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.diskstats.DiskStatsAppSizesProto.package_name)
}
inline void DiskStatsAppSizesProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.diskstats.DiskStatsAppSizesProto.package_name)
}
inline void DiskStatsAppSizesProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.diskstats.DiskStatsAppSizesProto.package_name)
}
inline std::string* DiskStatsAppSizesProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.diskstats.DiskStatsAppSizesProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiskStatsAppSizesProto::release_package_name() {
  // @@protoc_insertion_point(field_release:android.service.diskstats.DiskStatsAppSizesProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiskStatsAppSizesProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.diskstats.DiskStatsAppSizesProto.package_name)
}

// optional int64 app_size_kb = 2;
inline bool DiskStatsAppSizesProto::has_app_size_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiskStatsAppSizesProto::clear_app_size_kb() {
  app_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsAppSizesProto::app_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsAppSizesProto.app_size_kb)
  return app_size_kb_;
}
inline void DiskStatsAppSizesProto::set_app_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  app_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsAppSizesProto.app_size_kb)
}

// optional int64 cache_size_kb = 3;
inline bool DiskStatsAppSizesProto::has_cache_size_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiskStatsAppSizesProto::clear_cache_size_kb() {
  cache_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsAppSizesProto::cache_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsAppSizesProto.cache_size_kb)
  return cache_size_kb_;
}
inline void DiskStatsAppSizesProto::set_cache_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  cache_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsAppSizesProto.cache_size_kb)
}

// optional int64 app_data_size_kb = 4;
inline bool DiskStatsAppSizesProto::has_app_data_size_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DiskStatsAppSizesProto::clear_app_data_size_kb() {
  app_data_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsAppSizesProto::app_data_size_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsAppSizesProto.app_data_size_kb)
  return app_data_size_kb_;
}
inline void DiskStatsAppSizesProto::set_app_data_size_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  app_data_size_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsAppSizesProto.app_data_size_kb)
}

// -------------------------------------------------------------------

// DiskStatsFreeSpaceProto

// optional .android.service.diskstats.DiskStatsFreeSpaceProto.Folder folder = 1;
inline bool DiskStatsFreeSpaceProto::has_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiskStatsFreeSpaceProto::clear_folder() {
  folder_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::service::diskstats::DiskStatsFreeSpaceProto_Folder DiskStatsFreeSpaceProto::folder() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsFreeSpaceProto.folder)
  return static_cast< ::android::service::diskstats::DiskStatsFreeSpaceProto_Folder >(folder_);
}
inline void DiskStatsFreeSpaceProto::set_folder(::android::service::diskstats::DiskStatsFreeSpaceProto_Folder value) {
  assert(::android::service::diskstats::DiskStatsFreeSpaceProto_Folder_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  folder_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsFreeSpaceProto.folder)
}

// optional int64 available_space_kb = 2;
inline bool DiskStatsFreeSpaceProto::has_available_space_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskStatsFreeSpaceProto::clear_available_space_kb() {
  available_space_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsFreeSpaceProto::available_space_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsFreeSpaceProto.available_space_kb)
  return available_space_kb_;
}
inline void DiskStatsFreeSpaceProto::set_available_space_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  available_space_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsFreeSpaceProto.available_space_kb)
}

// optional int64 total_space_kb = 3;
inline bool DiskStatsFreeSpaceProto::has_total_space_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiskStatsFreeSpaceProto::clear_total_space_kb() {
  total_space_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DiskStatsFreeSpaceProto::total_space_kb() const {
  // @@protoc_insertion_point(field_get:android.service.diskstats.DiskStatsFreeSpaceProto.total_space_kb)
  return total_space_kb_;
}
inline void DiskStatsFreeSpaceProto::set_total_space_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  total_space_kb_ = value;
  // @@protoc_insertion_point(field_set:android.service.diskstats.DiskStatsFreeSpaceProto.total_space_kb)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace diskstats
}  // namespace service
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::diskstats::DiskStatsFreeSpaceProto_Folder> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto
