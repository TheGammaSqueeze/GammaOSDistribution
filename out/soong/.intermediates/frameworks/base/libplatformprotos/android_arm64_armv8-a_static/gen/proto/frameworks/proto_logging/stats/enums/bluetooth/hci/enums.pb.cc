// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/bluetooth/hci/enums.proto

#include "frameworks/proto_logging/stats/enums/bluetooth/hci/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace bluetooth {
namespace hci {
}  // namespace hci
}  // namespace bluetooth
}  // namespace android
namespace android {
namespace bluetooth {
namespace hci {
bool CommandEnum_IsValid(int value) {
  switch (value) {
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1041:
    case 1043:
    case 1045:
    case 1047:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1055:
    case 1056:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 2049:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2057:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 3073:
    case 3075:
    case 3077:
    case 3080:
    case 3081:
    case 3082:
    case 3083:
    case 3084:
    case 3085:
    case 3089:
    case 3090:
    case 3091:
    case 3092:
    case 3093:
    case 3094:
    case 3095:
    case 3096:
    case 3097:
    case 3098:
    case 3099:
    case 3100:
    case 3101:
    case 3102:
    case 3103:
    case 3104:
    case 3105:
    case 3106:
    case 3107:
    case 3108:
    case 3109:
    case 3110:
    case 3111:
    case 3112:
    case 3113:
    case 3114:
    case 3115:
    case 3116:
    case 3117:
    case 3118:
    case 3119:
    case 3121:
    case 3123:
    case 3125:
    case 3126:
    case 3127:
    case 3128:
    case 3129:
    case 3130:
    case 3131:
    case 3132:
    case 3133:
    case 3134:
    case 3135:
    case 3138:
    case 3139:
    case 3140:
    case 3141:
    case 3142:
    case 3143:
    case 3144:
    case 3145:
    case 3153:
    case 3154:
    case 3155:
    case 3157:
    case 3158:
    case 3159:
    case 3160:
    case 3161:
    case 3162:
    case 3163:
    case 3167:
    case 3168:
    case 3169:
    case 3170:
    case 3171:
    case 3172:
    case 3173:
    case 3174:
    case 3175:
    case 3176:
    case 3177:
    case 3178:
    case 3179:
    case 3180:
    case 3181:
    case 3182:
    case 3183:
    case 3184:
    case 3185:
    case 3186:
    case 3187:
    case 3188:
    case 3189:
    case 3190:
    case 3191:
    case 3192:
    case 3193:
    case 3194:
    case 3195:
    case 3196:
    case 3197:
    case 3198:
    case 3199:
    case 3200:
    case 3201:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4103:
    case 4105:
    case 4106:
    case 4107:
    case 5121:
    case 5122:
    case 5123:
    case 5125:
    case 5126:
    case 5127:
    case 5128:
    case 5129:
    case 5130:
    case 5131:
    case 5132:
    case 5133:
    case 6145:
    case 6146:
    case 6147:
    case 6148:
    case 6151:
    case 6152:
    case 6153:
    case 6154:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8203:
    case 8204:
    case 8205:
    case 8206:
    case 8207:
    case 8208:
    case 8209:
    case 8210:
    case 8211:
    case 8212:
    case 8213:
    case 8214:
    case 8215:
    case 8216:
    case 8217:
    case 8218:
    case 8219:
    case 8220:
    case 8221:
    case 8222:
    case 8223:
    case 8224:
    case 8225:
    case 8226:
    case 8227:
    case 8228:
    case 8230:
    case 8231:
    case 8232:
    case 8233:
    case 8234:
    case 8235:
    case 8236:
    case 8237:
    case 8238:
    case 8239:
    case 8240:
    case 8241:
    case 8242:
    case 8243:
    case 8244:
    case 8245:
    case 8246:
    case 8247:
    case 8248:
    case 8249:
    case 8250:
    case 8251:
    case 8252:
    case 8253:
    case 8254:
    case 8255:
    case 8256:
    case 8257:
    case 8258:
    case 8259:
    case 8260:
    case 8261:
    case 8262:
    case 8263:
    case 8264:
    case 8265:
    case 8266:
    case 8267:
    case 8268:
    case 8269:
    case 8270:
    case 64599:
    case 64851:
    case 64852:
    case 64854:
    case 64855:
    case 64856:
    case 64857:
    case 64858:
    case 64859:
    case 64861:
    case 1048575:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CommandEnum_strings[291] = {};

static const char CommandEnum_names[] =
  "CMD_ACCEPT_CONNECTION_REQUEST"
  "CMD_ACCEPT_ESCO_CONNECTION"
  "CMD_ACCEPT_LOGICAL_LINK"
  "CMD_ACCEPT_PHYSICAL_LINK"
  "CMD_ADD_SCO_CONNECTION"
  "CMD_AMP_TEST"
  "CMD_AMP_TEST_END"
  "CMD_AUTHENTICATION_REQUESTED"
  "CMD_BLE_ADD_DEVICE_TO_PERIODIC_ADVERTISING_LIST"
  "CMD_BLE_ADD_DEV_RESOLVING_LIST"
  "CMD_BLE_ADD_WHITE_LIST"
  "CMD_BLE_ADV_FILTER"
  "CMD_BLE_BATCH_SCAN"
  "CMD_BLE_CLEAR_ADVERTISING_SETS"
  "CMD_BLE_CLEAR_PERIODIC_ADVERTISING_LIST"
  "CMD_BLE_CLEAR_RESOLVING_LIST"
  "CMD_BLE_CLEAR_WHITE_LIST"
  "CMD_BLE_CREATE_CONN_CANCEL"
  "CMD_BLE_CREATE_LL_CONN"
  "CMD_BLE_ENCRYPT"
  "CMD_BLE_ENERGY_INFO"
  "CMD_BLE_ENH_RECEIVER_TEST"
  "CMD_BLE_ENH_TRANSMITTER_TEST"
  "CMD_BLE_EXTENDED_CREATE_CONNECTION"
  "CMD_BLE_EXTENDED_SCAN_PARAMS"
  "CMD_BLE_GENERATE_DHKEY"
  "CMD_BLE_LTK_REQ_NEG_REPLY"
  "CMD_BLE_LTK_REQ_REPLY"
  "CMD_BLE_MULTI_ADV"
  "CMD_BLE_PERIODIC_ADVERTISING_CREATE_SYNC"
  "CMD_BLE_PERIODIC_ADVERTISING_CREATE_SYNC_CANCEL"
  "CMD_BLE_PERIODIC_ADVERTISING_TERMINATE_SYNC"
  "CMD_BLE_RAND"
  "CMD_BLE_RC_PARAM_REQ_NEG_REPLY"
  "CMD_BLE_RC_PARAM_REQ_REPLY"
  "CMD_BLE_READ_ADV_CHNL_TX_POWER"
  "CMD_BLE_READ_BUFFER_SIZE"
  "CMD_BLE_READ_CHNL_MAP"
  "CMD_BLE_READ_DEFAULT_DATA_LENGTH"
  "CMD_BLE_READ_LOCAL_SPT_FEAT"
  "CMD_BLE_READ_MAXIMUM_ADVERTISING_DATA_LENGTH"
  "CMD_BLE_READ_MAXIMUM_DATA_LENGTH"
  "CMD_BLE_READ_NUMBER_OF_SUPPORTED_ADVERTISING_SETS"
  "CMD_BLE_READ_PERIODIC_ADVERTISING_LIST_SIZE"
  "CMD_BLE_READ_PHY"
  "CMD_BLE_READ_REMOTE_FEAT"
  "CMD_BLE_READ_RESOLVABLE_ADDR_LOCAL"
  "CMD_BLE_READ_RESOLVABLE_ADDR_PEER"
  "CMD_BLE_READ_RESOLVING_LIST_SIZE"
  "CMD_BLE_READ_RF_COMPENS_POWER"
  "CMD_BLE_READ_SUPPORTED_STATES"
  "CMD_BLE_READ_TRANSMIT_POWER"
  "CMD_BLE_READ_WHITE_LIST_SIZE"
  "CMD_BLE_RECEIVER_TEST"
  "CMD_BLE_REMOVE_ADVERTISING_SET"
  "CMD_BLE_REMOVE_WHITE_LIST"
  "CMD_BLE_RM_DEVICE_FROM_PERIODIC_ADVERTISING_LIST"
  "CMD_BLE_RM_DEV_RESOLVING_LIST"
  "CMD_BLE_SET_ADDR_RESOLUTION_ENABLE"
  "CMD_BLE_SET_DATA_LENGTH"
  "CMD_BLE_SET_DEFAULT_PHY"
  "CMD_BLE_SET_EVENT_MASK"
  "CMD_BLE_SET_EXTENDED_SCAN_ENABLE"
  "CMD_BLE_SET_EXTENDED_SCAN_PARAMETERS"
  "CMD_BLE_SET_EXT_ADVERTISING_DATA"
  "CMD_BLE_SET_EXT_ADVERTISING_ENABLE"
  "CMD_BLE_SET_EXT_ADVERTISING_PARAM"
  "CMD_BLE_SET_EXT_ADVERTISING_RANDOM_ADDRESS"
  "CMD_BLE_SET_EXT_ADVERTISING_SCAN_RESP"
  "CMD_BLE_SET_HOST_CHNL_CLASS"
  "CMD_BLE_SET_PERIODIC_ADVERTISING_DATA"
  "CMD_BLE_SET_PERIODIC_ADVERTISING_ENABLE"
  "CMD_BLE_SET_PERIODIC_ADVERTISING_PARAM"
  "CMD_BLE_SET_PHY"
  "CMD_BLE_SET_PRIVACY_MODE"
  "CMD_BLE_SET_RAND_PRIV_ADDR_TIMOUT"
  "CMD_BLE_START_ENC"
  "CMD_BLE_TEST_END"
  "CMD_BLE_TRACK_ADV"
  "CMD_BLE_TRANSMITTER_TEST"
  "CMD_BLE_UPD_LL_CONN_PARAMS"
  "CMD_BLE_VENDOR_CAP"
  "CMD_BLE_WRITE_ADV_DATA"
  "CMD_BLE_WRITE_ADV_ENABLE"
  "CMD_BLE_WRITE_ADV_PARAMS"
  "CMD_BLE_WRITE_DEFAULT_DATA_LENGTH"
  "CMD_BLE_WRITE_LOCAL_SPT_FEAT"
  "CMD_BLE_WRITE_RANDOM_ADDR"
  "CMD_BLE_WRITE_RF_COMPENS_POWER"
  "CMD_BLE_WRITE_SCAN_ENABLE"
  "CMD_BLE_WRITE_SCAN_PARAMS"
  "CMD_BLE_WRITE_SCAN_RSP_DATA"
  "CMD_BRCM_SET_ACL_PRIORITY"
  "CMD_CHANGE_CONN_LINK_KEY"
  "CMD_CHANGE_CONN_PACKET_TYPE"
  "CMD_CHANGE_LOCAL_NAME"
  "CMD_CONTROLLER_A2DP_OPCODE"
  "CMD_CONTROLLER_DEBUG_INFO"
  "CMD_CREATE_CONNECTION"
  "CMD_CREATE_CONNECTION_CANCEL"
  "CMD_CREATE_LOGICAL_LINK"
  "CMD_CREATE_NEW_UNIT_KEY"
  "CMD_CREATE_PHYSICAL_LINK"
  "CMD_DELETE_RESERVED_LT_ADDR"
  "CMD_DELETE_STORED_LINK_KEY"
  "CMD_DISCONNECT"
  "CMD_DISCONNECT_LOGICAL_LINK"
  "CMD_DISCONNECT_PHYSICAL_LINK"
  "CMD_ENABLE_AMP_RCVR_REPORTS"
  "CMD_ENABLE_DEV_UNDER_TEST_MODE"
  "CMD_ENHANCED_FLUSH"
  "CMD_ENH_ACCEPT_ESCO_CONNECTION"
  "CMD_ENH_SETUP_ESCO_CONNECTION"
  "CMD_EXIT_PARK_MODE"
  "CMD_EXIT_PERIODIC_INQUIRY_MODE"
  "CMD_EXIT_SNIFF_MODE"
  "CMD_FLOW_SPECIFICATION"
  "CMD_FLOW_SPEC_MODIFY"
  "CMD_FLUSH"
  "CMD_GET_LINK_QUALITY"
  "CMD_GET_MWS_TRANSPORT_CFG"
  "CMD_GET_MWS_TRANS_LAYER_CFG"
  "CMD_HOLD_MODE"
  "CMD_HOST_BUFFER_SIZE"
  "CMD_HOST_NUM_PACKETS_DONE"
  "CMD_INQUIRY"
  "CMD_INQUIRY_CANCEL"
  "CMD_IO_CAPABILITY_REQUEST_REPLY"
  "CMD_IO_CAP_REQ_NEG_REPLY"
  "CMD_LINK_KEY_REQUEST_NEG_REPLY"
  "CMD_LINK_KEY_REQUEST_REPLY"
  "CMD_LOGICAL_LINK_CANCEL"
  "CMD_MASTER_LINK_KEY"
  "CMD_PARK_MODE"
  "CMD_PERIODIC_INQUIRY_MODE"
  "CMD_PIN_CODE_REQUEST_NEG_REPLY"
  "CMD_PIN_CODE_REQUEST_REPLY"
  "CMD_QOS_SETUP"
  "CMD_READ_AFH_ASSESSMENT_MODE"
  "CMD_READ_AFH_CH_MAP"
  "CMD_READ_AUTHED_PAYLOAD_TIMEOUT"
  "CMD_READ_AUTHENTICATION_ENABLE"
  "CMD_READ_AUTOMATIC_FLUSH_TIMEOUT"
  "CMD_READ_BD_ADDR"
  "CMD_READ_BE_FLUSH_TOUT"
  "CMD_READ_BLE_HOST_SUPPORT"
  "CMD_READ_BUFFER_SIZE"
  "CMD_READ_CLASS_OF_DEVICE"
  "CMD_READ_CLOCK"
  "CMD_READ_CONN_ACCEPT_TOUT"
  "CMD_READ_COUNTRY_CODE"
  "CMD_READ_CURRENT_IAC_LAP"
  "CMD_READ_DATA_BLOCK_SIZE"
  "CMD_READ_DEF_POLICY_SETTINGS"
  "CMD_READ_ENCRYPTION_MODE"
  "CMD_READ_ENCR_KEY_SIZE"
  "CMD_READ_ENHANCED_TX_PWR_LEVEL"
  "CMD_READ_ERRONEOUS_DATA_RPT"
  "CMD_READ_EXTENDED_INQUIRY_LENGTH"
  "CMD_READ_EXTENDED_PAGE_TIMEOUT"
  "CMD_READ_EXT_INQ_RESPONSE"
  "CMD_READ_FAILED_CONTACT_COUNTER"
  "CMD_READ_FLOW_CONTROL_MODE"
  "CMD_READ_HOLD_MODE_ACTIVITY"
  "CMD_READ_INQSCAN_TYPE"
  "CMD_READ_INQUIRYSCAN_CFG"
  "CMD_READ_INQUIRY_MODE"
  "CMD_READ_INQ_TX_POWER_LEVEL"
  "CMD_READ_LINK_SUPER_TOUT"
  "CMD_READ_LMP_HANDLE"
  "CMD_READ_LOCAL_AMP_ASSOC"
  "CMD_READ_LOCAL_AMP_INFO"
  "CMD_READ_LOCAL_EXT_FEATURES"
  "CMD_READ_LOCAL_FEATURES"
  "CMD_READ_LOCAL_NAME"
  "CMD_READ_LOCAL_OOB_DATA"
  "CMD_READ_LOCAL_OOB_EXTENDED_DATA"
  "CMD_READ_LOCAL_SUPPORTED_CMDS"
  "CMD_READ_LOCAL_SUPPORTED_CODECS"
  "CMD_READ_LOCAL_VERSION_INFO"
  "CMD_READ_LOCATION_DATA"
  "CMD_READ_LOGICAL_LINK_ACCEPT_TIMEOUT"
  "CMD_READ_LOOPBACK_MODE"
  "CMD_READ_NUM_BCAST_REXMITS"
  "CMD_READ_NUM_SUPPORTED_IAC"
  "CMD_READ_PAGESCAN_CFG"
  "CMD_READ_PAGESCAN_MODE"
  "CMD_READ_PAGESCAN_PERIOD_MODE"
  "CMD_READ_PAGESCAN_TYPE"
  "CMD_READ_PAGE_TOUT"
  "CMD_READ_PIN_TYPE"
  "CMD_READ_POLICY_SETTINGS"
  "CMD_READ_RMT_CLOCK_OFFSET"
  "CMD_READ_RMT_EXT_FEATURES"
  "CMD_READ_RMT_FEATURES"
  "CMD_READ_RMT_VERSION_INFO"
  "CMD_READ_RSSI"
  "CMD_READ_SCAN_ENABLE"
  "CMD_READ_SCO_FLOW_CTRL_ENABLE"
  "CMD_READ_SECURE_CONNS_SUPPORT"
  "CMD_READ_SIMPLE_PAIRING_MODE"
  "CMD_READ_STORED_LINK_KEY"
  "CMD_READ_SYNC_TRAIN_PARAM"
  "CMD_READ_TRANSMIT_POWER_LEVEL"
  "CMD_READ_VOICE_SETTINGS"
  "CMD_RECEIVE_CLB"
  "CMD_RECEIVE_SYNC_TRAIN"
  "CMD_REFRESH_ENCRYPTION_KEY"
  "CMD_REJECT_CONNECTION_REQUEST"
  "CMD_REJECT_ESCO_CONNECTION"
  "CMD_REM_OOB_DATA_REQ_NEG_REPLY"
  "CMD_REM_OOB_DATA_REQ_REPLY"
  "CMD_REM_OOB_EXTENDED_DATA_REQ_REPLY"
  "CMD_RESET"
  "CMD_RESET_FAILED_CONTACT_COUNTER"
  "CMD_RMT_NAME_REQUEST"
  "CMD_RMT_NAME_REQUEST_CANCEL"
  "CMD_ROLE_DISCOVERY"
  "CMD_SEND_KEYPRESS_NOTIF"
  "CMD_SETUP_ESCO_CONNECTION"
  "CMD_SET_AFH_CHANNELS"
  "CMD_SET_CLB"
  "CMD_SET_CONN_ENCRYPTION"
  "CMD_SET_EVENT_FILTER"
  "CMD_SET_EVENT_MASK"
  "CMD_SET_EVENT_MASK_PAGE_2"
  "CMD_SET_EXTERNAL_FRAME_CONFIGURATION"
  "CMD_SET_HC_TO_HOST_FLOW_CTRL"
  "CMD_SET_MWS_CHANNEL_PARAMETERS"
  "CMD_SET_MWS_PATTERN_CONFIGURATION"
  "CMD_SET_MWS_SCAN_FREQUENCY_TABLE"
  "CMD_SET_MWS_SIGNALING"
  "CMD_SET_MWS_TRANSPORT_LAYER"
  "CMD_SET_RESERVED_LT_ADDR"
  "CMD_SET_TRIGGERED_CLK_CAPTURE"
  "CMD_SHORT_RANGE_MODE"
  "CMD_SNIFF_MODE"
  "CMD_SNIFF_SUB_RATE"
  "CMD_START_SYNC_TRAIN"
  "CMD_SWITCH_ROLE"
  "CMD_TRUNCATED_PAGE"
  "CMD_TRUNCATED_PAGE_CANCEL"
  "CMD_UNKNOWN"
  "CMD_USER_CONF_REQUEST_REPLY"
  "CMD_USER_CONF_VALUE_NEG_REPLY"
  "CMD_USER_PASSKEY_REQ_NEG_REPLY"
  "CMD_USER_PASSKEY_REQ_REPLY"
  "CMD_WRITE_AFH_ASSESSMENT_MODE"
  "CMD_WRITE_AUTHED_PAYLOAD_TIMEOUT"
  "CMD_WRITE_AUTHENTICATION_ENABLE"
  "CMD_WRITE_AUTOMATIC_FLUSH_TIMEOUT"
  "CMD_WRITE_BE_FLUSH_TOUT"
  "CMD_WRITE_BLE_HOST_SUPPORT"
  "CMD_WRITE_CLASS_OF_DEVICE"
  "CMD_WRITE_CLB_DATA"
  "CMD_WRITE_CONN_ACCEPT_TOUT"
  "CMD_WRITE_CURRENT_IAC_LAP"
  "CMD_WRITE_DEF_POLICY_SETTINGS"
  "CMD_WRITE_ENCRYPTION_MODE"
  "CMD_WRITE_ERRONEOUS_DATA_RPT"
  "CMD_WRITE_EXTENDED_INQUIRY_LENGTH"
  "CMD_WRITE_EXTENDED_PAGE_TIMEOUT"
  "CMD_WRITE_EXT_INQ_RESPONSE"
  "CMD_WRITE_FLOW_CONTROL_MODE"
  "CMD_WRITE_HOLD_MODE_ACTIVITY"
  "CMD_WRITE_INQSCAN_TYPE"
  "CMD_WRITE_INQUIRYSCAN_CFG"
  "CMD_WRITE_INQUIRY_MODE"
  "CMD_WRITE_INQ_TX_POWER_LEVEL"
  "CMD_WRITE_LINK_SUPER_TOUT"
  "CMD_WRITE_LOCATION_DATA"
  "CMD_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT"
  "CMD_WRITE_LOOPBACK_MODE"
  "CMD_WRITE_NUM_BCAST_REXMITS"
  "CMD_WRITE_PAGESCAN_CFG"
  "CMD_WRITE_PAGESCAN_MODE"
  "CMD_WRITE_PAGESCAN_PERIOD_MODE"
  "CMD_WRITE_PAGESCAN_TYPE"
  "CMD_WRITE_PAGE_TOUT"
  "CMD_WRITE_PIN_TYPE"
  "CMD_WRITE_POLICY_SETTINGS"
  "CMD_WRITE_REMOTE_AMP_ASSOC"
  "CMD_WRITE_SCAN_ENABLE"
  "CMD_WRITE_SCO_FLOW_CTRL_ENABLE"
  "CMD_WRITE_SECURE_CONNS_SUPPORT"
  "CMD_WRITE_SECURE_CONN_TEST_MODE"
  "CMD_WRITE_SIMPLE_PAIRING_MODE"
  "CMD_WRITE_SIMP_PAIR_DEBUG_MODE"
  "CMD_WRITE_STORED_LINK_KEY"
  "CMD_WRITE_SYNC_TRAIN_PARAM"
  "CMD_WRITE_VOICE_SETTINGS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CommandEnum_entries[] = {
  { {CommandEnum_names + 0, 29}, 1033 },
  { {CommandEnum_names + 29, 26}, 1065 },
  { {CommandEnum_names + 55, 23}, 1081 },
  { {CommandEnum_names + 78, 24}, 1078 },
  { {CommandEnum_names + 102, 22}, 1031 },
  { {CommandEnum_names + 124, 12}, 6153 },
  { {CommandEnum_names + 136, 16}, 6152 },
  { {CommandEnum_names + 152, 28}, 1041 },
  { {CommandEnum_names + 180, 47}, 8263 },
  { {CommandEnum_names + 227, 30}, 8231 },
  { {CommandEnum_names + 257, 22}, 8209 },
  { {CommandEnum_names + 279, 18}, 64855 },
  { {CommandEnum_names + 297, 18}, 64854 },
  { {CommandEnum_names + 315, 30}, 8253 },
  { {CommandEnum_names + 345, 39}, 8265 },
  { {CommandEnum_names + 384, 28}, 8233 },
  { {CommandEnum_names + 412, 24}, 8208 },
  { {CommandEnum_names + 436, 26}, 8206 },
  { {CommandEnum_names + 462, 22}, 8205 },
  { {CommandEnum_names + 484, 15}, 8215 },
  { {CommandEnum_names + 499, 19}, 64857 },
  { {CommandEnum_names + 518, 25}, 8243 },
  { {CommandEnum_names + 543, 28}, 8244 },
  { {CommandEnum_names + 571, 34}, 8259 },
  { {CommandEnum_names + 605, 28}, 64858 },
  { {CommandEnum_names + 633, 22}, 8230 },
  { {CommandEnum_names + 655, 25}, 8219 },
  { {CommandEnum_names + 680, 21}, 8218 },
  { {CommandEnum_names + 701, 17}, 64852 },
  { {CommandEnum_names + 718, 40}, 8260 },
  { {CommandEnum_names + 758, 47}, 8261 },
  { {CommandEnum_names + 805, 43}, 8262 },
  { {CommandEnum_names + 848, 12}, 8216 },
  { {CommandEnum_names + 860, 30}, 8225 },
  { {CommandEnum_names + 890, 26}, 8224 },
  { {CommandEnum_names + 916, 30}, 8199 },
  { {CommandEnum_names + 946, 24}, 8194 },
  { {CommandEnum_names + 970, 21}, 8213 },
  { {CommandEnum_names + 991, 32}, 8227 },
  { {CommandEnum_names + 1023, 27}, 8195 },
  { {CommandEnum_names + 1050, 44}, 8250 },
  { {CommandEnum_names + 1094, 32}, 8239 },
  { {CommandEnum_names + 1126, 49}, 8251 },
  { {CommandEnum_names + 1175, 43}, 8266 },
  { {CommandEnum_names + 1218, 16}, 8240 },
  { {CommandEnum_names + 1234, 24}, 8214 },
  { {CommandEnum_names + 1258, 34}, 8236 },
  { {CommandEnum_names + 1292, 33}, 8235 },
  { {CommandEnum_names + 1325, 32}, 8234 },
  { {CommandEnum_names + 1357, 29}, 8268 },
  { {CommandEnum_names + 1386, 29}, 8220 },
  { {CommandEnum_names + 1415, 27}, 8267 },
  { {CommandEnum_names + 1442, 28}, 8207 },
  { {CommandEnum_names + 1470, 21}, 8221 },
  { {CommandEnum_names + 1491, 30}, 8252 },
  { {CommandEnum_names + 1521, 25}, 8210 },
  { {CommandEnum_names + 1546, 48}, 8264 },
  { {CommandEnum_names + 1594, 29}, 8232 },
  { {CommandEnum_names + 1623, 34}, 8237 },
  { {CommandEnum_names + 1657, 23}, 8226 },
  { {CommandEnum_names + 1680, 23}, 8241 },
  { {CommandEnum_names + 1703, 22}, 8193 },
  { {CommandEnum_names + 1725, 32}, 8258 },
  { {CommandEnum_names + 1757, 36}, 8257 },
  { {CommandEnum_names + 1793, 32}, 8247 },
  { {CommandEnum_names + 1825, 34}, 8249 },
  { {CommandEnum_names + 1859, 33}, 8246 },
  { {CommandEnum_names + 1892, 42}, 8245 },
  { {CommandEnum_names + 1934, 37}, 8248 },
  { {CommandEnum_names + 1971, 27}, 8212 },
  { {CommandEnum_names + 1998, 37}, 8255 },
  { {CommandEnum_names + 2035, 39}, 8256 },
  { {CommandEnum_names + 2074, 38}, 8254 },
  { {CommandEnum_names + 2112, 15}, 8242 },
  { {CommandEnum_names + 2127, 24}, 8270 },
  { {CommandEnum_names + 2151, 33}, 8238 },
  { {CommandEnum_names + 2184, 17}, 8217 },
  { {CommandEnum_names + 2201, 16}, 8223 },
  { {CommandEnum_names + 2217, 17}, 64856 },
  { {CommandEnum_names + 2234, 24}, 8222 },
  { {CommandEnum_names + 2258, 26}, 8211 },
  { {CommandEnum_names + 2284, 18}, 64851 },
  { {CommandEnum_names + 2302, 22}, 8200 },
  { {CommandEnum_names + 2324, 24}, 8202 },
  { {CommandEnum_names + 2348, 24}, 8198 },
  { {CommandEnum_names + 2372, 33}, 8228 },
  { {CommandEnum_names + 2405, 28}, 8196 },
  { {CommandEnum_names + 2433, 25}, 8197 },
  { {CommandEnum_names + 2458, 30}, 8269 },
  { {CommandEnum_names + 2488, 25}, 8204 },
  { {CommandEnum_names + 2513, 25}, 8203 },
  { {CommandEnum_names + 2538, 27}, 8201 },
  { {CommandEnum_names + 2565, 25}, 64599 },
  { {CommandEnum_names + 2590, 24}, 1045 },
  { {CommandEnum_names + 2614, 27}, 1039 },
  { {CommandEnum_names + 2641, 21}, 3091 },
  { {CommandEnum_names + 2662, 26}, 64861 },
  { {CommandEnum_names + 2688, 25}, 64859 },
  { {CommandEnum_names + 2713, 21}, 1029 },
  { {CommandEnum_names + 2734, 28}, 1032 },
  { {CommandEnum_names + 2762, 23}, 1080 },
  { {CommandEnum_names + 2785, 23}, 3083 },
  { {CommandEnum_names + 2808, 24}, 1077 },
  { {CommandEnum_names + 2832, 27}, 3189 },
  { {CommandEnum_names + 2859, 26}, 3090 },
  { {CommandEnum_names + 2885, 14}, 1030 },
  { {CommandEnum_names + 2899, 27}, 1082 },
  { {CommandEnum_names + 2926, 28}, 1079 },
  { {CommandEnum_names + 2954, 27}, 6151 },
  { {CommandEnum_names + 2981, 30}, 6147 },
  { {CommandEnum_names + 3011, 18}, 3167 },
  { {CommandEnum_names + 3029, 30}, 1086 },
  { {CommandEnum_names + 3059, 29}, 1085 },
  { {CommandEnum_names + 3088, 18}, 2054 },
  { {CommandEnum_names + 3106, 30}, 1028 },
  { {CommandEnum_names + 3136, 19}, 2052 },
  { {CommandEnum_names + 3155, 22}, 2064 },
  { {CommandEnum_names + 3177, 20}, 1084 },
  { {CommandEnum_names + 3197, 9}, 3080 },
  { {CommandEnum_names + 3206, 20}, 5123 },
  { {CommandEnum_names + 3226, 25}, 5132 },
  { {CommandEnum_names + 3251, 27}, 3084 },
  { {CommandEnum_names + 3278, 13}, 2049 },
  { {CommandEnum_names + 3291, 20}, 3123 },
  { {CommandEnum_names + 3311, 25}, 3125 },
  { {CommandEnum_names + 3336, 11}, 1025 },
  { {CommandEnum_names + 3347, 18}, 1026 },
  { {CommandEnum_names + 3365, 31}, 1067 },
  { {CommandEnum_names + 3396, 24}, 1076 },
  { {CommandEnum_names + 3420, 30}, 1036 },
  { {CommandEnum_names + 3450, 26}, 1035 },
  { {CommandEnum_names + 3476, 23}, 1083 },
  { {CommandEnum_names + 3499, 19}, 1047 },
  { {CommandEnum_names + 3518, 13}, 2053 },
  { {CommandEnum_names + 3531, 25}, 1027 },
  { {CommandEnum_names + 3556, 30}, 1038 },
  { {CommandEnum_names + 3586, 26}, 1037 },
  { {CommandEnum_names + 3612, 13}, 2055 },
  { {CommandEnum_names + 3625, 28}, 3144 },
  { {CommandEnum_names + 3653, 19}, 5126 },
  { {CommandEnum_names + 3672, 31}, 3195 },
  { {CommandEnum_names + 3703, 30}, 3103 },
  { {CommandEnum_names + 3733, 32}, 3111 },
  { {CommandEnum_names + 3765, 16}, 4105 },
  { {CommandEnum_names + 3781, 22}, 3177 },
  { {CommandEnum_names + 3803, 25}, 3180 },
  { {CommandEnum_names + 3828, 20}, 4101 },
  { {CommandEnum_names + 3848, 24}, 3107 },
  { {CommandEnum_names + 3872, 14}, 5127 },
  { {CommandEnum_names + 3886, 25}, 3093 },
  { {CommandEnum_names + 3911, 21}, 4103 },
  { {CommandEnum_names + 3932, 24}, 3129 },
  { {CommandEnum_names + 3956, 24}, 4106 },
  { {CommandEnum_names + 3980, 28}, 2062 },
  { {CommandEnum_names + 4008, 24}, 3105 },
  { {CommandEnum_names + 4032, 22}, 5128 },
  { {CommandEnum_names + 4054, 30}, 3176 },
  { {CommandEnum_names + 4084, 27}, 3162 },
  { {CommandEnum_names + 4111, 32}, 3200 },
  { {CommandEnum_names + 4143, 30}, 3198 },
  { {CommandEnum_names + 4173, 25}, 3153 },
  { {CommandEnum_names + 4198, 31}, 5121 },
  { {CommandEnum_names + 4229, 26}, 3174 },
  { {CommandEnum_names + 4255, 27}, 3115 },
  { {CommandEnum_names + 4282, 21}, 3138 },
  { {CommandEnum_names + 4303, 24}, 3101 },
  { {CommandEnum_names + 4327, 21}, 3140 },
  { {CommandEnum_names + 4348, 27}, 3160 },
  { {CommandEnum_names + 4375, 24}, 3126 },
  { {CommandEnum_names + 4399, 19}, 1056 },
  { {CommandEnum_names + 4418, 24}, 5130 },
  { {CommandEnum_names + 4442, 23}, 5129 },
  { {CommandEnum_names + 4465, 27}, 4100 },
  { {CommandEnum_names + 4492, 23}, 4099 },
  { {CommandEnum_names + 4515, 19}, 3092 },
  { {CommandEnum_names + 4534, 23}, 3159 },
  { {CommandEnum_names + 4557, 32}, 3197 },
  { {CommandEnum_names + 4589, 29}, 4098 },
  { {CommandEnum_names + 4618, 31}, 4107 },
  { {CommandEnum_names + 4649, 27}, 4097 },
  { {CommandEnum_names + 4676, 22}, 3172 },
  { {CommandEnum_names + 4698, 36}, 3169 },
  { {CommandEnum_names + 4734, 22}, 6145 },
  { {CommandEnum_names + 4756, 26}, 3113 },
  { {CommandEnum_names + 4782, 26}, 3128 },
  { {CommandEnum_names + 4808, 21}, 3099 },
  { {CommandEnum_names + 4829, 22}, 3133 },
  { {CommandEnum_names + 4851, 29}, 3131 },
  { {CommandEnum_names + 4880, 22}, 3142 },
  { {CommandEnum_names + 4902, 18}, 3095 },
  { {CommandEnum_names + 4920, 17}, 3081 },
  { {CommandEnum_names + 4937, 24}, 2060 },
  { {CommandEnum_names + 4961, 25}, 1055 },
  { {CommandEnum_names + 4986, 25}, 1052 },
  { {CommandEnum_names + 5011, 21}, 1051 },
  { {CommandEnum_names + 5032, 25}, 1053 },
  { {CommandEnum_names + 5057, 13}, 5125 },
  { {CommandEnum_names + 5070, 20}, 3097 },
  { {CommandEnum_names + 5090, 29}, 3118 },
  { {CommandEnum_names + 5119, 29}, 3193 },
  { {CommandEnum_names + 5148, 28}, 3157 },
  { {CommandEnum_names + 5176, 24}, 3085 },
  { {CommandEnum_names + 5200, 25}, 3191 },
  { {CommandEnum_names + 5225, 29}, 3117 },
  { {CommandEnum_names + 5254, 23}, 3109 },
  { {CommandEnum_names + 5277, 15}, 1090 },
  { {CommandEnum_names + 5292, 22}, 1092 },
  { {CommandEnum_names + 5314, 26}, 3155 },
  { {CommandEnum_names + 5340, 29}, 1034 },
  { {CommandEnum_names + 5369, 26}, 1066 },
  { {CommandEnum_names + 5395, 30}, 1075 },
  { {CommandEnum_names + 5425, 26}, 1072 },
  { {CommandEnum_names + 5451, 35}, 1093 },
  { {CommandEnum_names + 5486, 9}, 3075 },
  { {CommandEnum_names + 5495, 32}, 5122 },
  { {CommandEnum_names + 5527, 20}, 1049 },
  { {CommandEnum_names + 5547, 27}, 1050 },
  { {CommandEnum_names + 5574, 18}, 2057 },
  { {CommandEnum_names + 5592, 23}, 3168 },
  { {CommandEnum_names + 5615, 25}, 1064 },
  { {CommandEnum_names + 5640, 20}, 3135 },
  { {CommandEnum_names + 5660, 11}, 1089 },
  { {CommandEnum_names + 5671, 23}, 1043 },
  { {CommandEnum_names + 5694, 20}, 3077 },
  { {CommandEnum_names + 5714, 18}, 3073 },
  { {CommandEnum_names + 5732, 25}, 3171 },
  { {CommandEnum_names + 5757, 36}, 3183 },
  { {CommandEnum_names + 5793, 28}, 3121 },
  { {CommandEnum_names + 5821, 30}, 3182 },
  { {CommandEnum_names + 5851, 33}, 3187 },
  { {CommandEnum_names + 5884, 32}, 3186 },
  { {CommandEnum_names + 5916, 21}, 3184 },
  { {CommandEnum_names + 5937, 27}, 3185 },
  { {CommandEnum_names + 5964, 24}, 3188 },
  { {CommandEnum_names + 5988, 29}, 5133 },
  { {CommandEnum_names + 6017, 20}, 3179 },
  { {CommandEnum_names + 6037, 14}, 2051 },
  { {CommandEnum_names + 6051, 18}, 2065 },
  { {CommandEnum_names + 6069, 20}, 1091 },
  { {CommandEnum_names + 6089, 15}, 2059 },
  { {CommandEnum_names + 6104, 18}, 1087 },
  { {CommandEnum_names + 6122, 25}, 1088 },
  { {CommandEnum_names + 6147, 11}, 1048575 },
  { {CommandEnum_names + 6158, 27}, 1068 },
  { {CommandEnum_names + 6185, 29}, 1069 },
  { {CommandEnum_names + 6214, 30}, 1071 },
  { {CommandEnum_names + 6244, 26}, 1070 },
  { {CommandEnum_names + 6270, 29}, 3145 },
  { {CommandEnum_names + 6299, 32}, 3196 },
  { {CommandEnum_names + 6331, 31}, 3104 },
  { {CommandEnum_names + 6362, 33}, 3112 },
  { {CommandEnum_names + 6395, 23}, 3178 },
  { {CommandEnum_names + 6418, 26}, 3181 },
  { {CommandEnum_names + 6444, 25}, 3108 },
  { {CommandEnum_names + 6469, 18}, 3190 },
  { {CommandEnum_names + 6487, 26}, 3094 },
  { {CommandEnum_names + 6513, 25}, 3130 },
  { {CommandEnum_names + 6538, 29}, 2063 },
  { {CommandEnum_names + 6567, 25}, 3106 },
  { {CommandEnum_names + 6592, 28}, 3163 },
  { {CommandEnum_names + 6620, 33}, 3201 },
  { {CommandEnum_names + 6653, 31}, 3199 },
  { {CommandEnum_names + 6684, 26}, 3154 },
  { {CommandEnum_names + 6710, 27}, 3175 },
  { {CommandEnum_names + 6737, 28}, 3116 },
  { {CommandEnum_names + 6765, 22}, 3139 },
  { {CommandEnum_names + 6787, 25}, 3102 },
  { {CommandEnum_names + 6812, 22}, 3141 },
  { {CommandEnum_names + 6834, 28}, 3161 },
  { {CommandEnum_names + 6862, 25}, 3127 },
  { {CommandEnum_names + 6887, 23}, 3173 },
  { {CommandEnum_names + 6910, 37}, 3170 },
  { {CommandEnum_names + 6947, 23}, 6146 },
  { {CommandEnum_names + 6970, 27}, 3114 },
  { {CommandEnum_names + 6997, 22}, 3100 },
  { {CommandEnum_names + 7019, 23}, 3134 },
  { {CommandEnum_names + 7042, 30}, 3132 },
  { {CommandEnum_names + 7072, 23}, 3143 },
  { {CommandEnum_names + 7095, 19}, 3096 },
  { {CommandEnum_names + 7114, 18}, 3082 },
  { {CommandEnum_names + 7132, 25}, 2061 },
  { {CommandEnum_names + 7157, 26}, 5131 },
  { {CommandEnum_names + 7183, 21}, 3098 },
  { {CommandEnum_names + 7204, 30}, 3119 },
  { {CommandEnum_names + 7234, 30}, 3194 },
  { {CommandEnum_names + 7264, 31}, 6154 },
  { {CommandEnum_names + 7295, 29}, 3158 },
  { {CommandEnum_names + 7324, 30}, 6148 },
  { {CommandEnum_names + 7354, 25}, 3089 },
  { {CommandEnum_names + 7379, 26}, 3192 },
  { {CommandEnum_names + 7405, 24}, 3110 },
};

static const int CommandEnum_entries_by_number[] = {
  125, // 1025 -> CMD_INQUIRY
  126, // 1026 -> CMD_INQUIRY_CANCEL
  134, // 1027 -> CMD_PERIODIC_INQUIRY_MODE
  114, // 1028 -> CMD_EXIT_PERIODIC_INQUIRY_MODE
  98, // 1029 -> CMD_CREATE_CONNECTION
  105, // 1030 -> CMD_DISCONNECT
  4, // 1031 -> CMD_ADD_SCO_CONNECTION
  99, // 1032 -> CMD_CREATE_CONNECTION_CANCEL
  0, // 1033 -> CMD_ACCEPT_CONNECTION_REQUEST
  208, // 1034 -> CMD_REJECT_CONNECTION_REQUEST
  130, // 1035 -> CMD_LINK_KEY_REQUEST_REPLY
  129, // 1036 -> CMD_LINK_KEY_REQUEST_NEG_REPLY
  136, // 1037 -> CMD_PIN_CODE_REQUEST_REPLY
  135, // 1038 -> CMD_PIN_CODE_REQUEST_NEG_REPLY
  94, // 1039 -> CMD_CHANGE_CONN_PACKET_TYPE
  7, // 1041 -> CMD_AUTHENTICATION_REQUESTED
  222, // 1043 -> CMD_SET_CONN_ENCRYPTION
  93, // 1045 -> CMD_CHANGE_CONN_LINK_KEY
  132, // 1047 -> CMD_MASTER_LINK_KEY
  215, // 1049 -> CMD_RMT_NAME_REQUEST
  216, // 1050 -> CMD_RMT_NAME_REQUEST_CANCEL
  194, // 1051 -> CMD_READ_RMT_FEATURES
  193, // 1052 -> CMD_READ_RMT_EXT_FEATURES
  195, // 1053 -> CMD_READ_RMT_VERSION_INFO
  192, // 1055 -> CMD_READ_RMT_CLOCK_OFFSET
  169, // 1056 -> CMD_READ_LMP_HANDLE
  219, // 1064 -> CMD_SETUP_ESCO_CONNECTION
  1, // 1065 -> CMD_ACCEPT_ESCO_CONNECTION
  209, // 1066 -> CMD_REJECT_ESCO_CONNECTION
  127, // 1067 -> CMD_IO_CAPABILITY_REQUEST_REPLY
  243, // 1068 -> CMD_USER_CONF_REQUEST_REPLY
  244, // 1069 -> CMD_USER_CONF_VALUE_NEG_REPLY
  246, // 1070 -> CMD_USER_PASSKEY_REQ_REPLY
  245, // 1071 -> CMD_USER_PASSKEY_REQ_NEG_REPLY
  211, // 1072 -> CMD_REM_OOB_DATA_REQ_REPLY
  210, // 1075 -> CMD_REM_OOB_DATA_REQ_NEG_REPLY
  128, // 1076 -> CMD_IO_CAP_REQ_NEG_REPLY
  102, // 1077 -> CMD_CREATE_PHYSICAL_LINK
  3, // 1078 -> CMD_ACCEPT_PHYSICAL_LINK
  107, // 1079 -> CMD_DISCONNECT_PHYSICAL_LINK
  100, // 1080 -> CMD_CREATE_LOGICAL_LINK
  2, // 1081 -> CMD_ACCEPT_LOGICAL_LINK
  106, // 1082 -> CMD_DISCONNECT_LOGICAL_LINK
  131, // 1083 -> CMD_LOGICAL_LINK_CANCEL
  117, // 1084 -> CMD_FLOW_SPEC_MODIFY
  112, // 1085 -> CMD_ENH_SETUP_ESCO_CONNECTION
  111, // 1086 -> CMD_ENH_ACCEPT_ESCO_CONNECTION
  240, // 1087 -> CMD_TRUNCATED_PAGE
  241, // 1088 -> CMD_TRUNCATED_PAGE_CANCEL
  221, // 1089 -> CMD_SET_CLB
  205, // 1090 -> CMD_RECEIVE_CLB
  238, // 1091 -> CMD_START_SYNC_TRAIN
  206, // 1092 -> CMD_RECEIVE_SYNC_TRAIN
  212, // 1093 -> CMD_REM_OOB_EXTENDED_DATA_REQ_REPLY
  122, // 2049 -> CMD_HOLD_MODE
  236, // 2051 -> CMD_SNIFF_MODE
  115, // 2052 -> CMD_EXIT_SNIFF_MODE
  133, // 2053 -> CMD_PARK_MODE
  113, // 2054 -> CMD_EXIT_PARK_MODE
  137, // 2055 -> CMD_QOS_SETUP
  217, // 2057 -> CMD_ROLE_DISCOVERY
  239, // 2059 -> CMD_SWITCH_ROLE
  191, // 2060 -> CMD_READ_POLICY_SETTINGS
  280, // 2061 -> CMD_WRITE_POLICY_SETTINGS
  153, // 2062 -> CMD_READ_DEF_POLICY_SETTINGS
  257, // 2063 -> CMD_WRITE_DEF_POLICY_SETTINGS
  116, // 2064 -> CMD_FLOW_SPECIFICATION
  237, // 2065 -> CMD_SNIFF_SUB_RATE
  224, // 3073 -> CMD_SET_EVENT_MASK
  213, // 3075 -> CMD_RESET
  223, // 3077 -> CMD_SET_EVENT_FILTER
  118, // 3080 -> CMD_FLUSH
  190, // 3081 -> CMD_READ_PIN_TYPE
  279, // 3082 -> CMD_WRITE_PIN_TYPE
  101, // 3083 -> CMD_CREATE_NEW_UNIT_KEY
  121, // 3084 -> CMD_GET_MWS_TRANS_LAYER_CFG
  201, // 3085 -> CMD_READ_STORED_LINK_KEY
  288, // 3089 -> CMD_WRITE_STORED_LINK_KEY
  104, // 3090 -> CMD_DELETE_STORED_LINK_KEY
  95, // 3091 -> CMD_CHANGE_LOCAL_NAME
  174, // 3092 -> CMD_READ_LOCAL_NAME
  149, // 3093 -> CMD_READ_CONN_ACCEPT_TOUT
  255, // 3094 -> CMD_WRITE_CONN_ACCEPT_TOUT
  189, // 3095 -> CMD_READ_PAGE_TOUT
  278, // 3096 -> CMD_WRITE_PAGE_TOUT
  197, // 3097 -> CMD_READ_SCAN_ENABLE
  282, // 3098 -> CMD_WRITE_SCAN_ENABLE
  185, // 3099 -> CMD_READ_PAGESCAN_CFG
  274, // 3100 -> CMD_WRITE_PAGESCAN_CFG
  165, // 3101 -> CMD_READ_INQUIRYSCAN_CFG
  266, // 3102 -> CMD_WRITE_INQUIRYSCAN_CFG
  141, // 3103 -> CMD_READ_AUTHENTICATION_ENABLE
  249, // 3104 -> CMD_WRITE_AUTHENTICATION_ENABLE
  154, // 3105 -> CMD_READ_ENCRYPTION_MODE
  258, // 3106 -> CMD_WRITE_ENCRYPTION_MODE
  147, // 3107 -> CMD_READ_CLASS_OF_DEVICE
  253, // 3108 -> CMD_WRITE_CLASS_OF_DEVICE
  204, // 3109 -> CMD_READ_VOICE_SETTINGS
  290, // 3110 -> CMD_WRITE_VOICE_SETTINGS
  142, // 3111 -> CMD_READ_AUTOMATIC_FLUSH_TIMEOUT
  250, // 3112 -> CMD_WRITE_AUTOMATIC_FLUSH_TIMEOUT
  183, // 3113 -> CMD_READ_NUM_BCAST_REXMITS
  273, // 3114 -> CMD_WRITE_NUM_BCAST_REXMITS
  163, // 3115 -> CMD_READ_HOLD_MODE_ACTIVITY
  264, // 3116 -> CMD_WRITE_HOLD_MODE_ACTIVITY
  203, // 3117 -> CMD_READ_TRANSMIT_POWER_LEVEL
  198, // 3118 -> CMD_READ_SCO_FLOW_CTRL_ENABLE
  283, // 3119 -> CMD_WRITE_SCO_FLOW_CTRL_ENABLE
  227, // 3121 -> CMD_SET_HC_TO_HOST_FLOW_CTRL
  123, // 3123 -> CMD_HOST_BUFFER_SIZE
  124, // 3125 -> CMD_HOST_NUM_PACKETS_DONE
  168, // 3126 -> CMD_READ_LINK_SUPER_TOUT
  269, // 3127 -> CMD_WRITE_LINK_SUPER_TOUT
  184, // 3128 -> CMD_READ_NUM_SUPPORTED_IAC
  151, // 3129 -> CMD_READ_CURRENT_IAC_LAP
  256, // 3130 -> CMD_WRITE_CURRENT_IAC_LAP
  187, // 3131 -> CMD_READ_PAGESCAN_PERIOD_MODE
  276, // 3132 -> CMD_WRITE_PAGESCAN_PERIOD_MODE
  186, // 3133 -> CMD_READ_PAGESCAN_MODE
  275, // 3134 -> CMD_WRITE_PAGESCAN_MODE
  220, // 3135 -> CMD_SET_AFH_CHANNELS
  164, // 3138 -> CMD_READ_INQSCAN_TYPE
  265, // 3139 -> CMD_WRITE_INQSCAN_TYPE
  166, // 3140 -> CMD_READ_INQUIRY_MODE
  267, // 3141 -> CMD_WRITE_INQUIRY_MODE
  188, // 3142 -> CMD_READ_PAGESCAN_TYPE
  277, // 3143 -> CMD_WRITE_PAGESCAN_TYPE
  138, // 3144 -> CMD_READ_AFH_ASSESSMENT_MODE
  247, // 3145 -> CMD_WRITE_AFH_ASSESSMENT_MODE
  160, // 3153 -> CMD_READ_EXT_INQ_RESPONSE
  262, // 3154 -> CMD_WRITE_EXT_INQ_RESPONSE
  207, // 3155 -> CMD_REFRESH_ENCRYPTION_KEY
  200, // 3157 -> CMD_READ_SIMPLE_PAIRING_MODE
  286, // 3158 -> CMD_WRITE_SIMPLE_PAIRING_MODE
  175, // 3159 -> CMD_READ_LOCAL_OOB_DATA
  167, // 3160 -> CMD_READ_INQ_TX_POWER_LEVEL
  268, // 3161 -> CMD_WRITE_INQ_TX_POWER_LEVEL
  157, // 3162 -> CMD_READ_ERRONEOUS_DATA_RPT
  259, // 3163 -> CMD_WRITE_ERRONEOUS_DATA_RPT
  110, // 3167 -> CMD_ENHANCED_FLUSH
  218, // 3168 -> CMD_SEND_KEYPRESS_NOTIF
  181, // 3169 -> CMD_READ_LOGICAL_LINK_ACCEPT_TIMEOUT
  271, // 3170 -> CMD_WRITE_LOGICAL_LINK_ACCEPT_TIMEOUT
  225, // 3171 -> CMD_SET_EVENT_MASK_PAGE_2
  180, // 3172 -> CMD_READ_LOCATION_DATA
  270, // 3173 -> CMD_WRITE_LOCATION_DATA
  162, // 3174 -> CMD_READ_FLOW_CONTROL_MODE
  263, // 3175 -> CMD_WRITE_FLOW_CONTROL_MODE
  156, // 3176 -> CMD_READ_ENHANCED_TX_PWR_LEVEL
  144, // 3177 -> CMD_READ_BE_FLUSH_TOUT
  251, // 3178 -> CMD_WRITE_BE_FLUSH_TOUT
  235, // 3179 -> CMD_SHORT_RANGE_MODE
  145, // 3180 -> CMD_READ_BLE_HOST_SUPPORT
  252, // 3181 -> CMD_WRITE_BLE_HOST_SUPPORT
  228, // 3182 -> CMD_SET_MWS_CHANNEL_PARAMETERS
  226, // 3183 -> CMD_SET_EXTERNAL_FRAME_CONFIGURATION
  231, // 3184 -> CMD_SET_MWS_SIGNALING
  232, // 3185 -> CMD_SET_MWS_TRANSPORT_LAYER
  230, // 3186 -> CMD_SET_MWS_SCAN_FREQUENCY_TABLE
  229, // 3187 -> CMD_SET_MWS_PATTERN_CONFIGURATION
  233, // 3188 -> CMD_SET_RESERVED_LT_ADDR
  103, // 3189 -> CMD_DELETE_RESERVED_LT_ADDR
  254, // 3190 -> CMD_WRITE_CLB_DATA
  202, // 3191 -> CMD_READ_SYNC_TRAIN_PARAM
  289, // 3192 -> CMD_WRITE_SYNC_TRAIN_PARAM
  199, // 3193 -> CMD_READ_SECURE_CONNS_SUPPORT
  284, // 3194 -> CMD_WRITE_SECURE_CONNS_SUPPORT
  140, // 3195 -> CMD_READ_AUTHED_PAYLOAD_TIMEOUT
  248, // 3196 -> CMD_WRITE_AUTHED_PAYLOAD_TIMEOUT
  176, // 3197 -> CMD_READ_LOCAL_OOB_EXTENDED_DATA
  159, // 3198 -> CMD_READ_EXTENDED_PAGE_TIMEOUT
  261, // 3199 -> CMD_WRITE_EXTENDED_PAGE_TIMEOUT
  158, // 3200 -> CMD_READ_EXTENDED_INQUIRY_LENGTH
  260, // 3201 -> CMD_WRITE_EXTENDED_INQUIRY_LENGTH
  179, // 4097 -> CMD_READ_LOCAL_VERSION_INFO
  177, // 4098 -> CMD_READ_LOCAL_SUPPORTED_CMDS
  173, // 4099 -> CMD_READ_LOCAL_FEATURES
  172, // 4100 -> CMD_READ_LOCAL_EXT_FEATURES
  146, // 4101 -> CMD_READ_BUFFER_SIZE
  150, // 4103 -> CMD_READ_COUNTRY_CODE
  143, // 4105 -> CMD_READ_BD_ADDR
  152, // 4106 -> CMD_READ_DATA_BLOCK_SIZE
  178, // 4107 -> CMD_READ_LOCAL_SUPPORTED_CODECS
  161, // 5121 -> CMD_READ_FAILED_CONTACT_COUNTER
  214, // 5122 -> CMD_RESET_FAILED_CONTACT_COUNTER
  119, // 5123 -> CMD_GET_LINK_QUALITY
  196, // 5125 -> CMD_READ_RSSI
  139, // 5126 -> CMD_READ_AFH_CH_MAP
  148, // 5127 -> CMD_READ_CLOCK
  155, // 5128 -> CMD_READ_ENCR_KEY_SIZE
  171, // 5129 -> CMD_READ_LOCAL_AMP_INFO
  170, // 5130 -> CMD_READ_LOCAL_AMP_ASSOC
  281, // 5131 -> CMD_WRITE_REMOTE_AMP_ASSOC
  120, // 5132 -> CMD_GET_MWS_TRANSPORT_CFG
  234, // 5133 -> CMD_SET_TRIGGERED_CLK_CAPTURE
  182, // 6145 -> CMD_READ_LOOPBACK_MODE
  272, // 6146 -> CMD_WRITE_LOOPBACK_MODE
  109, // 6147 -> CMD_ENABLE_DEV_UNDER_TEST_MODE
  287, // 6148 -> CMD_WRITE_SIMP_PAIR_DEBUG_MODE
  108, // 6151 -> CMD_ENABLE_AMP_RCVR_REPORTS
  6, // 6152 -> CMD_AMP_TEST_END
  5, // 6153 -> CMD_AMP_TEST
  285, // 6154 -> CMD_WRITE_SECURE_CONN_TEST_MODE
  61, // 8193 -> CMD_BLE_SET_EVENT_MASK
  36, // 8194 -> CMD_BLE_READ_BUFFER_SIZE
  39, // 8195 -> CMD_BLE_READ_LOCAL_SPT_FEAT
  86, // 8196 -> CMD_BLE_WRITE_LOCAL_SPT_FEAT
  87, // 8197 -> CMD_BLE_WRITE_RANDOM_ADDR
  84, // 8198 -> CMD_BLE_WRITE_ADV_PARAMS
  35, // 8199 -> CMD_BLE_READ_ADV_CHNL_TX_POWER
  82, // 8200 -> CMD_BLE_WRITE_ADV_DATA
  91, // 8201 -> CMD_BLE_WRITE_SCAN_RSP_DATA
  83, // 8202 -> CMD_BLE_WRITE_ADV_ENABLE
  90, // 8203 -> CMD_BLE_WRITE_SCAN_PARAMS
  89, // 8204 -> CMD_BLE_WRITE_SCAN_ENABLE
  18, // 8205 -> CMD_BLE_CREATE_LL_CONN
  17, // 8206 -> CMD_BLE_CREATE_CONN_CANCEL
  52, // 8207 -> CMD_BLE_READ_WHITE_LIST_SIZE
  16, // 8208 -> CMD_BLE_CLEAR_WHITE_LIST
  10, // 8209 -> CMD_BLE_ADD_WHITE_LIST
  55, // 8210 -> CMD_BLE_REMOVE_WHITE_LIST
  80, // 8211 -> CMD_BLE_UPD_LL_CONN_PARAMS
  69, // 8212 -> CMD_BLE_SET_HOST_CHNL_CLASS
  37, // 8213 -> CMD_BLE_READ_CHNL_MAP
  45, // 8214 -> CMD_BLE_READ_REMOTE_FEAT
  19, // 8215 -> CMD_BLE_ENCRYPT
  32, // 8216 -> CMD_BLE_RAND
  76, // 8217 -> CMD_BLE_START_ENC
  27, // 8218 -> CMD_BLE_LTK_REQ_REPLY
  26, // 8219 -> CMD_BLE_LTK_REQ_NEG_REPLY
  50, // 8220 -> CMD_BLE_READ_SUPPORTED_STATES
  53, // 8221 -> CMD_BLE_RECEIVER_TEST
  79, // 8222 -> CMD_BLE_TRANSMITTER_TEST
  77, // 8223 -> CMD_BLE_TEST_END
  34, // 8224 -> CMD_BLE_RC_PARAM_REQ_REPLY
  33, // 8225 -> CMD_BLE_RC_PARAM_REQ_NEG_REPLY
  59, // 8226 -> CMD_BLE_SET_DATA_LENGTH
  38, // 8227 -> CMD_BLE_READ_DEFAULT_DATA_LENGTH
  85, // 8228 -> CMD_BLE_WRITE_DEFAULT_DATA_LENGTH
  25, // 8230 -> CMD_BLE_GENERATE_DHKEY
  9, // 8231 -> CMD_BLE_ADD_DEV_RESOLVING_LIST
  57, // 8232 -> CMD_BLE_RM_DEV_RESOLVING_LIST
  15, // 8233 -> CMD_BLE_CLEAR_RESOLVING_LIST
  48, // 8234 -> CMD_BLE_READ_RESOLVING_LIST_SIZE
  47, // 8235 -> CMD_BLE_READ_RESOLVABLE_ADDR_PEER
  46, // 8236 -> CMD_BLE_READ_RESOLVABLE_ADDR_LOCAL
  58, // 8237 -> CMD_BLE_SET_ADDR_RESOLUTION_ENABLE
  75, // 8238 -> CMD_BLE_SET_RAND_PRIV_ADDR_TIMOUT
  41, // 8239 -> CMD_BLE_READ_MAXIMUM_DATA_LENGTH
  44, // 8240 -> CMD_BLE_READ_PHY
  60, // 8241 -> CMD_BLE_SET_DEFAULT_PHY
  73, // 8242 -> CMD_BLE_SET_PHY
  21, // 8243 -> CMD_BLE_ENH_RECEIVER_TEST
  22, // 8244 -> CMD_BLE_ENH_TRANSMITTER_TEST
  67, // 8245 -> CMD_BLE_SET_EXT_ADVERTISING_RANDOM_ADDRESS
  66, // 8246 -> CMD_BLE_SET_EXT_ADVERTISING_PARAM
  64, // 8247 -> CMD_BLE_SET_EXT_ADVERTISING_DATA
  68, // 8248 -> CMD_BLE_SET_EXT_ADVERTISING_SCAN_RESP
  65, // 8249 -> CMD_BLE_SET_EXT_ADVERTISING_ENABLE
  40, // 8250 -> CMD_BLE_READ_MAXIMUM_ADVERTISING_DATA_LENGTH
  42, // 8251 -> CMD_BLE_READ_NUMBER_OF_SUPPORTED_ADVERTISING_SETS
  54, // 8252 -> CMD_BLE_REMOVE_ADVERTISING_SET
  13, // 8253 -> CMD_BLE_CLEAR_ADVERTISING_SETS
  72, // 8254 -> CMD_BLE_SET_PERIODIC_ADVERTISING_PARAM
  70, // 8255 -> CMD_BLE_SET_PERIODIC_ADVERTISING_DATA
  71, // 8256 -> CMD_BLE_SET_PERIODIC_ADVERTISING_ENABLE
  63, // 8257 -> CMD_BLE_SET_EXTENDED_SCAN_PARAMETERS
  62, // 8258 -> CMD_BLE_SET_EXTENDED_SCAN_ENABLE
  23, // 8259 -> CMD_BLE_EXTENDED_CREATE_CONNECTION
  29, // 8260 -> CMD_BLE_PERIODIC_ADVERTISING_CREATE_SYNC
  30, // 8261 -> CMD_BLE_PERIODIC_ADVERTISING_CREATE_SYNC_CANCEL
  31, // 8262 -> CMD_BLE_PERIODIC_ADVERTISING_TERMINATE_SYNC
  8, // 8263 -> CMD_BLE_ADD_DEVICE_TO_PERIODIC_ADVERTISING_LIST
  56, // 8264 -> CMD_BLE_RM_DEVICE_FROM_PERIODIC_ADVERTISING_LIST
  14, // 8265 -> CMD_BLE_CLEAR_PERIODIC_ADVERTISING_LIST
  43, // 8266 -> CMD_BLE_READ_PERIODIC_ADVERTISING_LIST_SIZE
  51, // 8267 -> CMD_BLE_READ_TRANSMIT_POWER
  49, // 8268 -> CMD_BLE_READ_RF_COMPENS_POWER
  88, // 8269 -> CMD_BLE_WRITE_RF_COMPENS_POWER
  74, // 8270 -> CMD_BLE_SET_PRIVACY_MODE
  92, // 64599 -> CMD_BRCM_SET_ACL_PRIORITY
  81, // 64851 -> CMD_BLE_VENDOR_CAP
  28, // 64852 -> CMD_BLE_MULTI_ADV
  12, // 64854 -> CMD_BLE_BATCH_SCAN
  11, // 64855 -> CMD_BLE_ADV_FILTER
  78, // 64856 -> CMD_BLE_TRACK_ADV
  20, // 64857 -> CMD_BLE_ENERGY_INFO
  24, // 64858 -> CMD_BLE_EXTENDED_SCAN_PARAMS
  97, // 64859 -> CMD_CONTROLLER_DEBUG_INFO
  96, // 64861 -> CMD_CONTROLLER_A2DP_OPCODE
  242, // 1048575 -> CMD_UNKNOWN
};

const std::string& CommandEnum_Name(
    CommandEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CommandEnum_entries,
          CommandEnum_entries_by_number,
          291, CommandEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CommandEnum_entries,
      CommandEnum_entries_by_number,
      291, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CommandEnum_strings[idx].get();
}
bool CommandEnum_Parse(
    const std::string& name, CommandEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CommandEnum_entries, 291, name, &int_value);
  if (success) {
    *value = static_cast<CommandEnum>(int_value);
  }
  return success;
}
bool EventEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 56:
    case 57:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 4095:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EventEnum_strings[78] = {};

static const char EventEnum_names[] =
  "EVT_AMP_RECEIVER_RPT"
  "EVT_AMP_STATUS_CHANGE"
  "EVT_AMP_TEST_END"
  "EVT_AMP_TEST_START"
  "EVT_AUTHED_PAYLOAD_TIMEOUT"
  "EVT_AUTHENTICATION_COMP"
  "EVT_BLE_META"
  "EVT_CHANGE_CONN_LINK_KEY"
  "EVT_CHANNEL_SELECTED"
  "EVT_COMMAND_COMPLETE"
  "EVT_COMMAND_STATUS"
  "EVT_CONNECTION_COMP"
  "EVT_CONNECTION_REQUEST"
  "EVT_CONNLESS_SLAVE_BROADCAST_CHNL_MAP_CHANGE"
  "EVT_CONNLESS_SLAVE_BROADCAST_RCVD"
  "EVT_CONNLESS_SLAVE_BROADCAST_TIMEOUT"
  "EVT_CONN_PKT_TYPE_CHANGE"
  "EVT_DATA_BUF_OVERFLOW"
  "EVT_DISCONNECTION_COMP"
  "EVT_DISC_LOGICAL_LINK_COMP"
  "EVT_DISC_PHYSICAL_LINK_COMP"
  "EVT_ENCRYPTION_CHANGE"
  "EVT_ENCRYPTION_KEY_REFRESH_COMP"
  "EVT_ENHANCED_FLUSH_COMPLETE"
  "EVT_ESCO_CONNECTION_CHANGED"
  "EVT_ESCO_CONNECTION_COMP"
  "EVT_EXTENDED_INQUIRY_RESULT"
  "EVT_FLOW_SPECIFICATION_COMP"
  "EVT_FLOW_SPEC_MODIFY_COMP"
  "EVT_FLUSH_OCCURRED"
  "EVT_HARDWARE_ERROR"
  "EVT_INQUIRY_COMP"
  "EVT_INQUIRY_RESULT"
  "EVT_INQUIRY_RES_NOTIFICATION"
  "EVT_INQUIRY_RSSI_RESULT"
  "EVT_IO_CAPABILITY_REQUEST"
  "EVT_IO_CAPABILITY_RESPONSE"
  "EVT_KEYPRESS_NOTIFY"
  "EVT_LINK_KEY_NOTIFICATION"
  "EVT_LINK_KEY_REQUEST"
  "EVT_LINK_SUPER_TOUT_CHANGED"
  "EVT_LOGICAL_LINK_COMP"
  "EVT_LOOPBACK_COMMAND"
  "EVT_MASTER_LINK_KEY_COMP"
  "EVT_MAX_SLOTS_CHANGED"
  "EVT_MODE_CHANGE"
  "EVT_NUM_COMPL_DATA_BLOCKS"
  "EVT_NUM_COMPL_DATA_PKTS"
  "EVT_PAGE_SCAN_MODE_CHANGE"
  "EVT_PAGE_SCAN_REP_MODE_CHNG"
  "EVT_PHYSICAL_LINK_COMP"
  "EVT_PHY_LINK_LOSS_EARLY_WARNING"
  "EVT_PHY_LINK_RECOVERY"
  "EVT_PIN_CODE_REQUEST"
  "EVT_QOS_SETUP_COMP"
  "EVT_QOS_VIOLATION"
  "EVT_READ_CLOCK_OFF_COMP"
  "EVT_READ_RMT_EXT_FEATURES_COMP"
  "EVT_READ_RMT_FEATURES_COMP"
  "EVT_READ_RMT_VERSION_COMP"
  "EVT_REMOTE_OOB_DATA_REQUEST"
  "EVT_RETURN_LINK_KEYS"
  "EVT_RMT_HOST_SUP_FEAT_NOTIFY"
  "EVT_RMT_NAME_REQUEST_COMP"
  "EVT_ROLE_CHANGE"
  "EVT_SAM_STATUS_CHANGE"
  "EVT_SET_TRIGGERED_CLOCK_CAPTURE"
  "EVT_SHORT_RANGE_MODE_COMPLETE"
  "EVT_SIMPLE_PAIRING_COMPLETE"
  "EVT_SLAVE_PAGE_RES_TIMEOUT"
  "EVT_SNIFF_SUB_RATE"
  "EVT_SYNC_TRAIN_CMPL"
  "EVT_SYNC_TRAIN_RCVD"
  "EVT_TRUNCATED_PAGE_CMPL"
  "EVT_UNKNOWN"
  "EVT_USER_CONFIRMATION_REQUEST"
  "EVT_USER_PASSKEY_NOTIFY"
  "EVT_USER_PASSKEY_REQUEST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EventEnum_entries[] = {
  { {EventEnum_names + 0, 20}, 75 },
  { {EventEnum_names + 20, 21}, 77 },
  { {EventEnum_names + 41, 16}, 74 },
  { {EventEnum_names + 57, 18}, 73 },
  { {EventEnum_names + 75, 26}, 87 },
  { {EventEnum_names + 101, 23}, 6 },
  { {EventEnum_names + 124, 12}, 62 },
  { {EventEnum_names + 136, 24}, 9 },
  { {EventEnum_names + 160, 20}, 65 },
  { {EventEnum_names + 180, 20}, 14 },
  { {EventEnum_names + 200, 18}, 15 },
  { {EventEnum_names + 218, 19}, 3 },
  { {EventEnum_names + 237, 22}, 4 },
  { {EventEnum_names + 259, 44}, 85 },
  { {EventEnum_names + 303, 33}, 81 },
  { {EventEnum_names + 336, 36}, 82 },
  { {EventEnum_names + 372, 24}, 29 },
  { {EventEnum_names + 396, 21}, 26 },
  { {EventEnum_names + 417, 22}, 5 },
  { {EventEnum_names + 439, 26}, 70 },
  { {EventEnum_names + 465, 27}, 66 },
  { {EventEnum_names + 492, 21}, 8 },
  { {EventEnum_names + 513, 31}, 48 },
  { {EventEnum_names + 544, 27}, 57 },
  { {EventEnum_names + 571, 27}, 45 },
  { {EventEnum_names + 598, 24}, 44 },
  { {EventEnum_names + 622, 27}, 47 },
  { {EventEnum_names + 649, 27}, 33 },
  { {EventEnum_names + 676, 25}, 71 },
  { {EventEnum_names + 701, 18}, 17 },
  { {EventEnum_names + 719, 18}, 16 },
  { {EventEnum_names + 737, 16}, 1 },
  { {EventEnum_names + 753, 18}, 2 },
  { {EventEnum_names + 771, 28}, 86 },
  { {EventEnum_names + 799, 23}, 34 },
  { {EventEnum_names + 822, 25}, 49 },
  { {EventEnum_names + 847, 26}, 50 },
  { {EventEnum_names + 873, 19}, 60 },
  { {EventEnum_names + 892, 25}, 24 },
  { {EventEnum_names + 917, 20}, 23 },
  { {EventEnum_names + 937, 27}, 56 },
  { {EventEnum_names + 964, 21}, 69 },
  { {EventEnum_names + 985, 20}, 25 },
  { {EventEnum_names + 1005, 24}, 10 },
  { {EventEnum_names + 1029, 21}, 27 },
  { {EventEnum_names + 1050, 15}, 20 },
  { {EventEnum_names + 1065, 25}, 72 },
  { {EventEnum_names + 1090, 23}, 19 },
  { {EventEnum_names + 1113, 25}, 31 },
  { {EventEnum_names + 1138, 27}, 32 },
  { {EventEnum_names + 1165, 22}, 64 },
  { {EventEnum_names + 1187, 31}, 67 },
  { {EventEnum_names + 1218, 21}, 68 },
  { {EventEnum_names + 1239, 20}, 22 },
  { {EventEnum_names + 1259, 18}, 13 },
  { {EventEnum_names + 1277, 17}, 30 },
  { {EventEnum_names + 1294, 23}, 28 },
  { {EventEnum_names + 1317, 30}, 35 },
  { {EventEnum_names + 1347, 26}, 11 },
  { {EventEnum_names + 1373, 25}, 12 },
  { {EventEnum_names + 1398, 27}, 53 },
  { {EventEnum_names + 1425, 20}, 21 },
  { {EventEnum_names + 1445, 28}, 61 },
  { {EventEnum_names + 1473, 25}, 7 },
  { {EventEnum_names + 1498, 15}, 18 },
  { {EventEnum_names + 1513, 21}, 88 },
  { {EventEnum_names + 1534, 31}, 78 },
  { {EventEnum_names + 1565, 29}, 76 },
  { {EventEnum_names + 1594, 27}, 54 },
  { {EventEnum_names + 1621, 26}, 84 },
  { {EventEnum_names + 1647, 18}, 46 },
  { {EventEnum_names + 1665, 19}, 79 },
  { {EventEnum_names + 1684, 19}, 80 },
  { {EventEnum_names + 1703, 23}, 83 },
  { {EventEnum_names + 1726, 11}, 4095 },
  { {EventEnum_names + 1737, 29}, 51 },
  { {EventEnum_names + 1766, 23}, 59 },
  { {EventEnum_names + 1789, 24}, 52 },
};

static const int EventEnum_entries_by_number[] = {
  31, // 1 -> EVT_INQUIRY_COMP
  32, // 2 -> EVT_INQUIRY_RESULT
  11, // 3 -> EVT_CONNECTION_COMP
  12, // 4 -> EVT_CONNECTION_REQUEST
  18, // 5 -> EVT_DISCONNECTION_COMP
  5, // 6 -> EVT_AUTHENTICATION_COMP
  63, // 7 -> EVT_RMT_NAME_REQUEST_COMP
  21, // 8 -> EVT_ENCRYPTION_CHANGE
  7, // 9 -> EVT_CHANGE_CONN_LINK_KEY
  43, // 10 -> EVT_MASTER_LINK_KEY_COMP
  58, // 11 -> EVT_READ_RMT_FEATURES_COMP
  59, // 12 -> EVT_READ_RMT_VERSION_COMP
  54, // 13 -> EVT_QOS_SETUP_COMP
  9, // 14 -> EVT_COMMAND_COMPLETE
  10, // 15 -> EVT_COMMAND_STATUS
  30, // 16 -> EVT_HARDWARE_ERROR
  29, // 17 -> EVT_FLUSH_OCCURRED
  64, // 18 -> EVT_ROLE_CHANGE
  47, // 19 -> EVT_NUM_COMPL_DATA_PKTS
  45, // 20 -> EVT_MODE_CHANGE
  61, // 21 -> EVT_RETURN_LINK_KEYS
  53, // 22 -> EVT_PIN_CODE_REQUEST
  39, // 23 -> EVT_LINK_KEY_REQUEST
  38, // 24 -> EVT_LINK_KEY_NOTIFICATION
  42, // 25 -> EVT_LOOPBACK_COMMAND
  17, // 26 -> EVT_DATA_BUF_OVERFLOW
  44, // 27 -> EVT_MAX_SLOTS_CHANGED
  56, // 28 -> EVT_READ_CLOCK_OFF_COMP
  16, // 29 -> EVT_CONN_PKT_TYPE_CHANGE
  55, // 30 -> EVT_QOS_VIOLATION
  48, // 31 -> EVT_PAGE_SCAN_MODE_CHANGE
  49, // 32 -> EVT_PAGE_SCAN_REP_MODE_CHNG
  27, // 33 -> EVT_FLOW_SPECIFICATION_COMP
  34, // 34 -> EVT_INQUIRY_RSSI_RESULT
  57, // 35 -> EVT_READ_RMT_EXT_FEATURES_COMP
  25, // 44 -> EVT_ESCO_CONNECTION_COMP
  24, // 45 -> EVT_ESCO_CONNECTION_CHANGED
  70, // 46 -> EVT_SNIFF_SUB_RATE
  26, // 47 -> EVT_EXTENDED_INQUIRY_RESULT
  22, // 48 -> EVT_ENCRYPTION_KEY_REFRESH_COMP
  35, // 49 -> EVT_IO_CAPABILITY_REQUEST
  36, // 50 -> EVT_IO_CAPABILITY_RESPONSE
  75, // 51 -> EVT_USER_CONFIRMATION_REQUEST
  77, // 52 -> EVT_USER_PASSKEY_REQUEST
  60, // 53 -> EVT_REMOTE_OOB_DATA_REQUEST
  68, // 54 -> EVT_SIMPLE_PAIRING_COMPLETE
  40, // 56 -> EVT_LINK_SUPER_TOUT_CHANGED
  23, // 57 -> EVT_ENHANCED_FLUSH_COMPLETE
  76, // 59 -> EVT_USER_PASSKEY_NOTIFY
  37, // 60 -> EVT_KEYPRESS_NOTIFY
  62, // 61 -> EVT_RMT_HOST_SUP_FEAT_NOTIFY
  6, // 62 -> EVT_BLE_META
  50, // 64 -> EVT_PHYSICAL_LINK_COMP
  8, // 65 -> EVT_CHANNEL_SELECTED
  20, // 66 -> EVT_DISC_PHYSICAL_LINK_COMP
  51, // 67 -> EVT_PHY_LINK_LOSS_EARLY_WARNING
  52, // 68 -> EVT_PHY_LINK_RECOVERY
  41, // 69 -> EVT_LOGICAL_LINK_COMP
  19, // 70 -> EVT_DISC_LOGICAL_LINK_COMP
  28, // 71 -> EVT_FLOW_SPEC_MODIFY_COMP
  46, // 72 -> EVT_NUM_COMPL_DATA_BLOCKS
  3, // 73 -> EVT_AMP_TEST_START
  2, // 74 -> EVT_AMP_TEST_END
  0, // 75 -> EVT_AMP_RECEIVER_RPT
  67, // 76 -> EVT_SHORT_RANGE_MODE_COMPLETE
  1, // 77 -> EVT_AMP_STATUS_CHANGE
  66, // 78 -> EVT_SET_TRIGGERED_CLOCK_CAPTURE
  71, // 79 -> EVT_SYNC_TRAIN_CMPL
  72, // 80 -> EVT_SYNC_TRAIN_RCVD
  14, // 81 -> EVT_CONNLESS_SLAVE_BROADCAST_RCVD
  15, // 82 -> EVT_CONNLESS_SLAVE_BROADCAST_TIMEOUT
  73, // 83 -> EVT_TRUNCATED_PAGE_CMPL
  69, // 84 -> EVT_SLAVE_PAGE_RES_TIMEOUT
  13, // 85 -> EVT_CONNLESS_SLAVE_BROADCAST_CHNL_MAP_CHANGE
  33, // 86 -> EVT_INQUIRY_RES_NOTIFICATION
  4, // 87 -> EVT_AUTHED_PAYLOAD_TIMEOUT
  65, // 88 -> EVT_SAM_STATUS_CHANGE
  74, // 4095 -> EVT_UNKNOWN
};

const std::string& EventEnum_Name(
    EventEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EventEnum_entries,
          EventEnum_entries_by_number,
          78, EventEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EventEnum_entries,
      EventEnum_entries_by_number,
      78, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EventEnum_strings[idx].get();
}
bool EventEnum_Parse(
    const std::string& name, EventEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EventEnum_entries, 78, name, &int_value);
  if (success) {
    *value = static_cast<EventEnum>(int_value);
  }
  return success;
}
bool BleMetaEventEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 4095:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BleMetaEventEnum_strings[21] = {};

static const char BleMetaEventEnum_names[] =
  "BLE_EVT_ADVERTISING_SET_TERMINATED_EVT"
  "BLE_EVT_ADV_PKT_RPT_EVT"
  "BLE_EVT_CHNL_SELECTION_ALGORITHM"
  "BLE_EVT_CONN_COMPLETE_EVT"
  "BLE_EVT_DATA_LENGTH_CHANGE_EVT"
  "BLE_EVT_DIRECT_ADV_EVT"
  "BLE_EVT_ENHANCED_CONN_COMPLETE_EVT"
  "BLE_EVT_EXTENDED_ADVERTISING_REPORT_EVT"
  "BLE_EVT_GEN_DHKEY_CMPL"
  "BLE_EVT_LL_CONN_PARAM_UPD_EVT"
  "BLE_EVT_LTK_REQ_EVT"
  "BLE_EVT_PERIODIC_ADV_REPORT_EVT"
  "BLE_EVT_PERIODIC_ADV_SYNC_EST_EVT"
  "BLE_EVT_PERIODIC_ADV_SYNC_LOST_EVT"
  "BLE_EVT_PHY_UPDATE_COMPLETE_EVT"
  "BLE_EVT_RC_PARAM_REQ_EVT"
  "BLE_EVT_READ_LOCAL_P256_PUB_KEY"
  "BLE_EVT_READ_REMOTE_FEAT_CMPL_EVT"
  "BLE_EVT_SCAN_REQ_RX_EVT"
  "BLE_EVT_SCAN_TIMEOUT_EVT"
  "BLE_EVT_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BleMetaEventEnum_entries[] = {
  { {BleMetaEventEnum_names + 0, 38}, 18 },
  { {BleMetaEventEnum_names + 38, 23}, 2 },
  { {BleMetaEventEnum_names + 61, 32}, 20 },
  { {BleMetaEventEnum_names + 93, 25}, 1 },
  { {BleMetaEventEnum_names + 118, 30}, 7 },
  { {BleMetaEventEnum_names + 148, 22}, 11 },
  { {BleMetaEventEnum_names + 170, 34}, 10 },
  { {BleMetaEventEnum_names + 204, 39}, 13 },
  { {BleMetaEventEnum_names + 243, 22}, 9 },
  { {BleMetaEventEnum_names + 265, 29}, 3 },
  { {BleMetaEventEnum_names + 294, 19}, 5 },
  { {BleMetaEventEnum_names + 313, 31}, 15 },
  { {BleMetaEventEnum_names + 344, 33}, 14 },
  { {BleMetaEventEnum_names + 377, 34}, 16 },
  { {BleMetaEventEnum_names + 411, 31}, 12 },
  { {BleMetaEventEnum_names + 442, 24}, 6 },
  { {BleMetaEventEnum_names + 466, 31}, 8 },
  { {BleMetaEventEnum_names + 497, 33}, 4 },
  { {BleMetaEventEnum_names + 530, 23}, 19 },
  { {BleMetaEventEnum_names + 553, 24}, 17 },
  { {BleMetaEventEnum_names + 577, 15}, 4095 },
};

static const int BleMetaEventEnum_entries_by_number[] = {
  3, // 1 -> BLE_EVT_CONN_COMPLETE_EVT
  1, // 2 -> BLE_EVT_ADV_PKT_RPT_EVT
  9, // 3 -> BLE_EVT_LL_CONN_PARAM_UPD_EVT
  17, // 4 -> BLE_EVT_READ_REMOTE_FEAT_CMPL_EVT
  10, // 5 -> BLE_EVT_LTK_REQ_EVT
  15, // 6 -> BLE_EVT_RC_PARAM_REQ_EVT
  4, // 7 -> BLE_EVT_DATA_LENGTH_CHANGE_EVT
  16, // 8 -> BLE_EVT_READ_LOCAL_P256_PUB_KEY
  8, // 9 -> BLE_EVT_GEN_DHKEY_CMPL
  6, // 10 -> BLE_EVT_ENHANCED_CONN_COMPLETE_EVT
  5, // 11 -> BLE_EVT_DIRECT_ADV_EVT
  14, // 12 -> BLE_EVT_PHY_UPDATE_COMPLETE_EVT
  7, // 13 -> BLE_EVT_EXTENDED_ADVERTISING_REPORT_EVT
  12, // 14 -> BLE_EVT_PERIODIC_ADV_SYNC_EST_EVT
  11, // 15 -> BLE_EVT_PERIODIC_ADV_REPORT_EVT
  13, // 16 -> BLE_EVT_PERIODIC_ADV_SYNC_LOST_EVT
  19, // 17 -> BLE_EVT_SCAN_TIMEOUT_EVT
  0, // 18 -> BLE_EVT_ADVERTISING_SET_TERMINATED_EVT
  18, // 19 -> BLE_EVT_SCAN_REQ_RX_EVT
  2, // 20 -> BLE_EVT_CHNL_SELECTION_ALGORITHM
  20, // 4095 -> BLE_EVT_UNKNOWN
};

const std::string& BleMetaEventEnum_Name(
    BleMetaEventEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BleMetaEventEnum_entries,
          BleMetaEventEnum_entries_by_number,
          21, BleMetaEventEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BleMetaEventEnum_entries,
      BleMetaEventEnum_entries_by_number,
      21, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BleMetaEventEnum_strings[idx].get();
}
bool BleMetaEventEnum_Parse(
    const std::string& name, BleMetaEventEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BleMetaEventEnum_entries, 21, name, &int_value);
  if (success) {
    *value = static_cast<BleMetaEventEnum>(int_value);
  }
  return success;
}
bool StatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 4095:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StatusEnum_strings[70] = {};

static const char StatusEnum_names[] =
  "STATUS_ADVERTISING_TIMEOUT"
  "STATUS_AUTH_FAILURE"
  "STATUS_CHAN_CLASSIF_NOT_SUPPORTED"
  "STATUS_CLB_DATA_TOO_BIG"
  "STATUS_CLB_NOT_ENABLED"
  "STATUS_COMMAND_DISALLOWED"
  "STATUS_CONNECTION_EXISTS"
  "STATUS_CONNECTION_TOUT"
  "STATUS_CONN_CAUSE_LOCAL_HOST"
  "STATUS_CONN_FAILED_ESTABLISHMENT"
  "STATUS_CONN_TOUT_DUE_TO_MIC_FAILURE"
  "STATUS_CONTROLLER_BUSY"
  "STATUS_DIFF_TRANSACTION_COLLISION"
  "STATUS_ENCRY_MODE_NOT_ACCEPTABLE"
  "STATUS_HOST_BUSY_PAIRING"
  "STATUS_HOST_REJECT_DEVICE"
  "STATUS_HOST_REJECT_RESOURCES"
  "STATUS_HOST_REJECT_SECURITY"
  "STATUS_HOST_TIMEOUT"
  "STATUS_HW_FAILURE"
  "STATUS_ILLEGAL_COMMAND"
  "STATUS_ILLEGAL_PARAMETER_FMT"
  "STATUS_INQ_RSP_DATA_TOO_LARGE"
  "STATUS_INSTANT_PASSED"
  "STATUS_INSUFFCIENT_SECURITY"
  "STATUS_INVALID_LMP_PARAM"
  "STATUS_KEY_MISSING"
  "STATUS_LMP_PDU_NOT_ALLOWED"
  "STATUS_LMP_RESPONSE_TIMEOUT"
  "STATUS_LMP_STATUS_TRANS_COLLISION"
  "STATUS_LT_ADDR_ALREADY_IN_USE"
  "STATUS_LT_ADDR_NOT_ALLOCATED"
  "STATUS_MAC_CONNECTION_FAILED"
  "STATUS_MAX_NUM_OF_CONNECTIONS"
  "STATUS_MAX_NUM_OF_SCOS"
  "STATUS_MEMORY_FULL"
  "STATUS_NO_CONNECTION"
  "STATUS_OPERATION_CANCELED_BY_HOST"
  "STATUS_PAGE_TIMEOUT"
  "STATUS_PAIRING_NOT_ALLOWED"
  "STATUS_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED"
  "STATUS_PARAM_OUT_OF_RANGE"
  "STATUS_PEER_LOW_RESOURCES"
  "STATUS_PEER_POWER_OFF"
  "STATUS_PEER_USER"
  "STATUS_QOS_NOT_SUPPORTED"
  "STATUS_QOS_REJECTED"
  "STATUS_QOS_UNACCEPTABLE_PARAM"
  "STATUS_REJ_NO_SUITABLE_CHANNEL"
  "STATUS_REPEATED_ATTEMPTS"
  "STATUS_RESERVED_SLOT_VIOLATION"
  "STATUS_ROLE_CHANGE_NOT_ALLOWED"
  "STATUS_ROLE_SWITCH_FAILED"
  "STATUS_ROLE_SWITCH_PENDING"
  "STATUS_SCO_AIR_MODE"
  "STATUS_SCO_INTERVAL_REJECTED"
  "STATUS_SCO_OFFSET_REJECTED"
  "STATUS_SIMPLE_PAIRING_NOT_SUPPORTED"
  "STATUS_SUCCESS"
  "STATUS_UNACCEPT_CONN_INTERVAL"
  "STATUS_UNDEFINED_0x2B"
  "STATUS_UNDEFINED_0x31"
  "STATUS_UNDEFINED_0x33"
  "STATUS_UNIT_KEY_USED"
  "STATUS_UNKNOWN"
  "STATUS_UNKNOWN_LMP_PDU"
  "STATUS_UNSPECIFIED"
  "STATUS_UNSUPPORTED_LMP_FEATURE"
  "STATUS_UNSUPPORTED_REM_FEATURE"
  "STATUS_UNSUPPORTED_VALUE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StatusEnum_entries[] = {
  { {StatusEnum_names + 0, 26}, 60 },
  { {StatusEnum_names + 26, 19}, 5 },
  { {StatusEnum_names + 45, 33}, 46 },
  { {StatusEnum_names + 78, 23}, 67 },
  { {StatusEnum_names + 101, 22}, 66 },
  { {StatusEnum_names + 123, 25}, 12 },
  { {StatusEnum_names + 148, 24}, 11 },
  { {StatusEnum_names + 172, 22}, 8 },
  { {StatusEnum_names + 194, 28}, 22 },
  { {StatusEnum_names + 222, 32}, 62 },
  { {StatusEnum_names + 254, 35}, 61 },
  { {StatusEnum_names + 289, 22}, 58 },
  { {StatusEnum_names + 311, 33}, 42 },
  { {StatusEnum_names + 344, 32}, 37 },
  { {StatusEnum_names + 376, 24}, 56 },
  { {StatusEnum_names + 400, 25}, 15 },
  { {StatusEnum_names + 425, 28}, 13 },
  { {StatusEnum_names + 453, 27}, 14 },
  { {StatusEnum_names + 480, 19}, 16 },
  { {StatusEnum_names + 499, 17}, 3 },
  { {StatusEnum_names + 516, 22}, 1 },
  { {StatusEnum_names + 538, 28}, 18 },
  { {StatusEnum_names + 566, 29}, 54 },
  { {StatusEnum_names + 595, 21}, 40 },
  { {StatusEnum_names + 616, 27}, 47 },
  { {StatusEnum_names + 643, 24}, 30 },
  { {StatusEnum_names + 667, 18}, 6 },
  { {StatusEnum_names + 685, 26}, 36 },
  { {StatusEnum_names + 711, 27}, 34 },
  { {StatusEnum_names + 738, 33}, 35 },
  { {StatusEnum_names + 771, 29}, 64 },
  { {StatusEnum_names + 800, 28}, 65 },
  { {StatusEnum_names + 828, 28}, 63 },
  { {StatusEnum_names + 856, 29}, 9 },
  { {StatusEnum_names + 885, 22}, 10 },
  { {StatusEnum_names + 907, 18}, 7 },
  { {StatusEnum_names + 925, 20}, 2 },
  { {StatusEnum_names + 945, 33}, 68 },
  { {StatusEnum_names + 978, 19}, 4 },
  { {StatusEnum_names + 997, 26}, 24 },
  { {StatusEnum_names + 1023, 42}, 41 },
  { {StatusEnum_names + 1065, 25}, 48 },
  { {StatusEnum_names + 1090, 25}, 20 },
  { {StatusEnum_names + 1115, 21}, 21 },
  { {StatusEnum_names + 1136, 16}, 19 },
  { {StatusEnum_names + 1152, 24}, 39 },
  { {StatusEnum_names + 1176, 19}, 45 },
  { {StatusEnum_names + 1195, 29}, 44 },
  { {StatusEnum_names + 1224, 30}, 57 },
  { {StatusEnum_names + 1254, 24}, 23 },
  { {StatusEnum_names + 1278, 30}, 52 },
  { {StatusEnum_names + 1308, 30}, 33 },
  { {StatusEnum_names + 1338, 25}, 53 },
  { {StatusEnum_names + 1363, 26}, 50 },
  { {StatusEnum_names + 1389, 19}, 29 },
  { {StatusEnum_names + 1408, 28}, 28 },
  { {StatusEnum_names + 1436, 26}, 27 },
  { {StatusEnum_names + 1462, 35}, 55 },
  { {StatusEnum_names + 1497, 14}, 0 },
  { {StatusEnum_names + 1511, 29}, 59 },
  { {StatusEnum_names + 1540, 21}, 43 },
  { {StatusEnum_names + 1561, 21}, 49 },
  { {StatusEnum_names + 1582, 21}, 51 },
  { {StatusEnum_names + 1603, 20}, 38 },
  { {StatusEnum_names + 1623, 14}, 4095 },
  { {StatusEnum_names + 1637, 22}, 25 },
  { {StatusEnum_names + 1659, 18}, 31 },
  { {StatusEnum_names + 1677, 30}, 32 },
  { {StatusEnum_names + 1707, 30}, 26 },
  { {StatusEnum_names + 1737, 24}, 17 },
};

static const int StatusEnum_entries_by_number[] = {
  58, // 0 -> STATUS_SUCCESS
  20, // 1 -> STATUS_ILLEGAL_COMMAND
  36, // 2 -> STATUS_NO_CONNECTION
  19, // 3 -> STATUS_HW_FAILURE
  38, // 4 -> STATUS_PAGE_TIMEOUT
  1, // 5 -> STATUS_AUTH_FAILURE
  26, // 6 -> STATUS_KEY_MISSING
  35, // 7 -> STATUS_MEMORY_FULL
  7, // 8 -> STATUS_CONNECTION_TOUT
  33, // 9 -> STATUS_MAX_NUM_OF_CONNECTIONS
  34, // 10 -> STATUS_MAX_NUM_OF_SCOS
  6, // 11 -> STATUS_CONNECTION_EXISTS
  5, // 12 -> STATUS_COMMAND_DISALLOWED
  16, // 13 -> STATUS_HOST_REJECT_RESOURCES
  17, // 14 -> STATUS_HOST_REJECT_SECURITY
  15, // 15 -> STATUS_HOST_REJECT_DEVICE
  18, // 16 -> STATUS_HOST_TIMEOUT
  69, // 17 -> STATUS_UNSUPPORTED_VALUE
  21, // 18 -> STATUS_ILLEGAL_PARAMETER_FMT
  44, // 19 -> STATUS_PEER_USER
  42, // 20 -> STATUS_PEER_LOW_RESOURCES
  43, // 21 -> STATUS_PEER_POWER_OFF
  8, // 22 -> STATUS_CONN_CAUSE_LOCAL_HOST
  49, // 23 -> STATUS_REPEATED_ATTEMPTS
  39, // 24 -> STATUS_PAIRING_NOT_ALLOWED
  65, // 25 -> STATUS_UNKNOWN_LMP_PDU
  68, // 26 -> STATUS_UNSUPPORTED_REM_FEATURE
  56, // 27 -> STATUS_SCO_OFFSET_REJECTED
  55, // 28 -> STATUS_SCO_INTERVAL_REJECTED
  54, // 29 -> STATUS_SCO_AIR_MODE
  25, // 30 -> STATUS_INVALID_LMP_PARAM
  66, // 31 -> STATUS_UNSPECIFIED
  67, // 32 -> STATUS_UNSUPPORTED_LMP_FEATURE
  51, // 33 -> STATUS_ROLE_CHANGE_NOT_ALLOWED
  28, // 34 -> STATUS_LMP_RESPONSE_TIMEOUT
  29, // 35 -> STATUS_LMP_STATUS_TRANS_COLLISION
  27, // 36 -> STATUS_LMP_PDU_NOT_ALLOWED
  13, // 37 -> STATUS_ENCRY_MODE_NOT_ACCEPTABLE
  63, // 38 -> STATUS_UNIT_KEY_USED
  45, // 39 -> STATUS_QOS_NOT_SUPPORTED
  23, // 40 -> STATUS_INSTANT_PASSED
  40, // 41 -> STATUS_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED
  12, // 42 -> STATUS_DIFF_TRANSACTION_COLLISION
  60, // 43 -> STATUS_UNDEFINED_0x2B
  47, // 44 -> STATUS_QOS_UNACCEPTABLE_PARAM
  46, // 45 -> STATUS_QOS_REJECTED
  2, // 46 -> STATUS_CHAN_CLASSIF_NOT_SUPPORTED
  24, // 47 -> STATUS_INSUFFCIENT_SECURITY
  41, // 48 -> STATUS_PARAM_OUT_OF_RANGE
  61, // 49 -> STATUS_UNDEFINED_0x31
  53, // 50 -> STATUS_ROLE_SWITCH_PENDING
  62, // 51 -> STATUS_UNDEFINED_0x33
  50, // 52 -> STATUS_RESERVED_SLOT_VIOLATION
  52, // 53 -> STATUS_ROLE_SWITCH_FAILED
  22, // 54 -> STATUS_INQ_RSP_DATA_TOO_LARGE
  57, // 55 -> STATUS_SIMPLE_PAIRING_NOT_SUPPORTED
  14, // 56 -> STATUS_HOST_BUSY_PAIRING
  48, // 57 -> STATUS_REJ_NO_SUITABLE_CHANNEL
  11, // 58 -> STATUS_CONTROLLER_BUSY
  59, // 59 -> STATUS_UNACCEPT_CONN_INTERVAL
  0, // 60 -> STATUS_ADVERTISING_TIMEOUT
  10, // 61 -> STATUS_CONN_TOUT_DUE_TO_MIC_FAILURE
  9, // 62 -> STATUS_CONN_FAILED_ESTABLISHMENT
  32, // 63 -> STATUS_MAC_CONNECTION_FAILED
  30, // 64 -> STATUS_LT_ADDR_ALREADY_IN_USE
  31, // 65 -> STATUS_LT_ADDR_NOT_ALLOCATED
  4, // 66 -> STATUS_CLB_NOT_ENABLED
  3, // 67 -> STATUS_CLB_DATA_TOO_BIG
  37, // 68 -> STATUS_OPERATION_CANCELED_BY_HOST
  64, // 4095 -> STATUS_UNKNOWN
};

const std::string& StatusEnum_Name(
    StatusEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StatusEnum_entries,
          StatusEnum_entries_by_number,
          70, StatusEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StatusEnum_entries,
      StatusEnum_entries_by_number,
      70, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StatusEnum_strings[idx].get();
}
bool StatusEnum_Parse(
    const std::string& name, StatusEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StatusEnum_entries, 70, name, &int_value);
  if (success) {
    *value = static_cast<StatusEnum>(int_value);
  }
  return success;
}
bool BqrIdEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BqrIdEnum_strings[5] = {};

static const char BqrIdEnum_names[] =
  "BQR_ID_A2DP_AUDIO_CHOPPY"
  "BQR_ID_APPROACH_LSTO"
  "BQR_ID_MONITOR_MODE"
  "BQR_ID_SCO_VOICE_CHOPPY"
  "BQR_ID_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BqrIdEnum_entries[] = {
  { {BqrIdEnum_names + 0, 24}, 3 },
  { {BqrIdEnum_names + 24, 20}, 2 },
  { {BqrIdEnum_names + 44, 19}, 1 },
  { {BqrIdEnum_names + 63, 23}, 4 },
  { {BqrIdEnum_names + 86, 14}, 0 },
};

static const int BqrIdEnum_entries_by_number[] = {
  4, // 0 -> BQR_ID_UNKNOWN
  2, // 1 -> BQR_ID_MONITOR_MODE
  1, // 2 -> BQR_ID_APPROACH_LSTO
  0, // 3 -> BQR_ID_A2DP_AUDIO_CHOPPY
  3, // 4 -> BQR_ID_SCO_VOICE_CHOPPY
};

const std::string& BqrIdEnum_Name(
    BqrIdEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BqrIdEnum_entries,
          BqrIdEnum_entries_by_number,
          5, BqrIdEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BqrIdEnum_entries,
      BqrIdEnum_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BqrIdEnum_strings[idx].get();
}
bool BqrIdEnum_Parse(
    const std::string& name, BqrIdEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BqrIdEnum_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<BqrIdEnum>(int_value);
  }
  return success;
}
bool BqrPacketTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BqrPacketTypeEnum_strings[29] = {};

static const char BqrPacketTypeEnum_names[] =
  "BQR_PACKET_TYPE_2DH1"
  "BQR_PACKET_TYPE_2DH3"
  "BQR_PACKET_TYPE_2DH5"
  "BQR_PACKET_TYPE_2EV3"
  "BQR_PACKET_TYPE_2EV5"
  "BQR_PACKET_TYPE_3DH1"
  "BQR_PACKET_TYPE_3DH3"
  "BQR_PACKET_TYPE_3DH5"
  "BQR_PACKET_TYPE_3EV3"
  "BQR_PACKET_TYPE_3EV5"
  "BQR_PACKET_TYPE_AUX1"
  "BQR_PACKET_TYPE_DH1"
  "BQR_PACKET_TYPE_DH3"
  "BQR_PACKET_TYPE_DH5"
  "BQR_PACKET_TYPE_DM1"
  "BQR_PACKET_TYPE_DM3"
  "BQR_PACKET_TYPE_DM5"
  "BQR_PACKET_TYPE_DV"
  "BQR_PACKET_TYPE_EV3"
  "BQR_PACKET_TYPE_EV4"
  "BQR_PACKET_TYPE_EV5"
  "BQR_PACKET_TYPE_FHS"
  "BQR_PACKET_TYPE_HV1"
  "BQR_PACKET_TYPE_HV2"
  "BQR_PACKET_TYPE_HV3"
  "BQR_PACKET_TYPE_ID"
  "BQR_PACKET_TYPE_NULL"
  "BQR_PACKET_TYPE_POLL"
  "BQR_PACKET_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BqrPacketTypeEnum_entries[] = {
  { {BqrPacketTypeEnum_names + 0, 20}, 23 },
  { {BqrPacketTypeEnum_names + 20, 20}, 24 },
  { {BqrPacketTypeEnum_names + 40, 20}, 25 },
  { {BqrPacketTypeEnum_names + 60, 20}, 12 },
  { {BqrPacketTypeEnum_names + 80, 20}, 13 },
  { {BqrPacketTypeEnum_names + 100, 20}, 26 },
  { {BqrPacketTypeEnum_names + 120, 20}, 27 },
  { {BqrPacketTypeEnum_names + 140, 20}, 28 },
  { {BqrPacketTypeEnum_names + 160, 20}, 14 },
  { {BqrPacketTypeEnum_names + 180, 20}, 15 },
  { {BqrPacketTypeEnum_names + 200, 20}, 22 },
  { {BqrPacketTypeEnum_names + 220, 19}, 17 },
  { {BqrPacketTypeEnum_names + 239, 19}, 19 },
  { {BqrPacketTypeEnum_names + 258, 19}, 21 },
  { {BqrPacketTypeEnum_names + 277, 19}, 16 },
  { {BqrPacketTypeEnum_names + 296, 19}, 18 },
  { {BqrPacketTypeEnum_names + 315, 19}, 20 },
  { {BqrPacketTypeEnum_names + 334, 18}, 8 },
  { {BqrPacketTypeEnum_names + 352, 19}, 9 },
  { {BqrPacketTypeEnum_names + 371, 19}, 10 },
  { {BqrPacketTypeEnum_names + 390, 19}, 11 },
  { {BqrPacketTypeEnum_names + 409, 19}, 4 },
  { {BqrPacketTypeEnum_names + 428, 19}, 5 },
  { {BqrPacketTypeEnum_names + 447, 19}, 6 },
  { {BqrPacketTypeEnum_names + 466, 19}, 7 },
  { {BqrPacketTypeEnum_names + 485, 18}, 1 },
  { {BqrPacketTypeEnum_names + 503, 20}, 2 },
  { {BqrPacketTypeEnum_names + 523, 20}, 3 },
  { {BqrPacketTypeEnum_names + 543, 23}, 0 },
};

static const int BqrPacketTypeEnum_entries_by_number[] = {
  28, // 0 -> BQR_PACKET_TYPE_UNKNOWN
  25, // 1 -> BQR_PACKET_TYPE_ID
  26, // 2 -> BQR_PACKET_TYPE_NULL
  27, // 3 -> BQR_PACKET_TYPE_POLL
  21, // 4 -> BQR_PACKET_TYPE_FHS
  22, // 5 -> BQR_PACKET_TYPE_HV1
  23, // 6 -> BQR_PACKET_TYPE_HV2
  24, // 7 -> BQR_PACKET_TYPE_HV3
  17, // 8 -> BQR_PACKET_TYPE_DV
  18, // 9 -> BQR_PACKET_TYPE_EV3
  19, // 10 -> BQR_PACKET_TYPE_EV4
  20, // 11 -> BQR_PACKET_TYPE_EV5
  3, // 12 -> BQR_PACKET_TYPE_2EV3
  4, // 13 -> BQR_PACKET_TYPE_2EV5
  8, // 14 -> BQR_PACKET_TYPE_3EV3
  9, // 15 -> BQR_PACKET_TYPE_3EV5
  14, // 16 -> BQR_PACKET_TYPE_DM1
  11, // 17 -> BQR_PACKET_TYPE_DH1
  15, // 18 -> BQR_PACKET_TYPE_DM3
  12, // 19 -> BQR_PACKET_TYPE_DH3
  16, // 20 -> BQR_PACKET_TYPE_DM5
  13, // 21 -> BQR_PACKET_TYPE_DH5
  10, // 22 -> BQR_PACKET_TYPE_AUX1
  0, // 23 -> BQR_PACKET_TYPE_2DH1
  1, // 24 -> BQR_PACKET_TYPE_2DH3
  2, // 25 -> BQR_PACKET_TYPE_2DH5
  5, // 26 -> BQR_PACKET_TYPE_3DH1
  6, // 27 -> BQR_PACKET_TYPE_3DH3
  7, // 28 -> BQR_PACKET_TYPE_3DH5
};

const std::string& BqrPacketTypeEnum_Name(
    BqrPacketTypeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BqrPacketTypeEnum_entries,
          BqrPacketTypeEnum_entries_by_number,
          29, BqrPacketTypeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BqrPacketTypeEnum_entries,
      BqrPacketTypeEnum_entries_by_number,
      29, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BqrPacketTypeEnum_strings[idx].get();
}
bool BqrPacketTypeEnum_Parse(
    const std::string& name, BqrPacketTypeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BqrPacketTypeEnum_entries, 29, name, &int_value);
  if (success) {
    *value = static_cast<BqrPacketTypeEnum>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hci
}  // namespace bluetooth
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
