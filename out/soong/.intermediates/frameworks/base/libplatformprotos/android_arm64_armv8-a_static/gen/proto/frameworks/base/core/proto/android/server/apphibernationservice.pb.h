// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/apphibernationservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace apphibernation {
class GlobalLevelHibernationStateProto;
class GlobalLevelHibernationStateProtoDefaultTypeInternal;
extern GlobalLevelHibernationStateProtoDefaultTypeInternal _GlobalLevelHibernationStateProto_default_instance_;
class GlobalLevelHibernationStatesProto;
class GlobalLevelHibernationStatesProtoDefaultTypeInternal;
extern GlobalLevelHibernationStatesProtoDefaultTypeInternal _GlobalLevelHibernationStatesProto_default_instance_;
class UserLevelHibernationStateProto;
class UserLevelHibernationStateProtoDefaultTypeInternal;
extern UserLevelHibernationStateProtoDefaultTypeInternal _UserLevelHibernationStateProto_default_instance_;
class UserLevelHibernationStatesProto;
class UserLevelHibernationStatesProtoDefaultTypeInternal;
extern UserLevelHibernationStatesProtoDefaultTypeInternal _UserLevelHibernationStatesProto_default_instance_;
}  // namespace apphibernation
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::apphibernation::GlobalLevelHibernationStateProto* Arena::CreateMaybeMessage<::com::android::server::apphibernation::GlobalLevelHibernationStateProto>(Arena*);
template<> ::com::android::server::apphibernation::GlobalLevelHibernationStatesProto* Arena::CreateMaybeMessage<::com::android::server::apphibernation::GlobalLevelHibernationStatesProto>(Arena*);
template<> ::com::android::server::apphibernation::UserLevelHibernationStateProto* Arena::CreateMaybeMessage<::com::android::server::apphibernation::UserLevelHibernationStateProto>(Arena*);
template<> ::com::android::server::apphibernation::UserLevelHibernationStatesProto* Arena::CreateMaybeMessage<::com::android::server::apphibernation::UserLevelHibernationStatesProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace apphibernation {

// ===================================================================

class UserLevelHibernationStatesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.apphibernation.UserLevelHibernationStatesProto) */ {
 public:
  UserLevelHibernationStatesProto();
  virtual ~UserLevelHibernationStatesProto();

  UserLevelHibernationStatesProto(const UserLevelHibernationStatesProto& from);
  UserLevelHibernationStatesProto(UserLevelHibernationStatesProto&& from) noexcept
    : UserLevelHibernationStatesProto() {
    *this = ::std::move(from);
  }

  inline UserLevelHibernationStatesProto& operator=(const UserLevelHibernationStatesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLevelHibernationStatesProto& operator=(UserLevelHibernationStatesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserLevelHibernationStatesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLevelHibernationStatesProto* internal_default_instance() {
    return reinterpret_cast<const UserLevelHibernationStatesProto*>(
               &_UserLevelHibernationStatesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserLevelHibernationStatesProto& a, UserLevelHibernationStatesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLevelHibernationStatesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLevelHibernationStatesProto* New() const final {
    return CreateMaybeMessage<UserLevelHibernationStatesProto>(nullptr);
  }

  UserLevelHibernationStatesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLevelHibernationStatesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserLevelHibernationStatesProto& from);
  void MergeFrom(const UserLevelHibernationStatesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserLevelHibernationStatesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.apphibernation.UserLevelHibernationStatesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHibernationStateFieldNumber = 1,
  };
  // repeated .com.android.server.apphibernation.UserLevelHibernationStateProto hibernation_state = 1;
  int hibernation_state_size() const;
  void clear_hibernation_state();
  ::com::android::server::apphibernation::UserLevelHibernationStateProto* mutable_hibernation_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::UserLevelHibernationStateProto >*
      mutable_hibernation_state();
  const ::com::android::server::apphibernation::UserLevelHibernationStateProto& hibernation_state(int index) const;
  ::com::android::server::apphibernation::UserLevelHibernationStateProto* add_hibernation_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::UserLevelHibernationStateProto >&
      hibernation_state() const;

  // @@protoc_insertion_point(class_scope:com.android.server.apphibernation.UserLevelHibernationStatesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::UserLevelHibernationStateProto > hibernation_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto;
};
// -------------------------------------------------------------------

class UserLevelHibernationStateProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.apphibernation.UserLevelHibernationStateProto) */ {
 public:
  UserLevelHibernationStateProto();
  virtual ~UserLevelHibernationStateProto();

  UserLevelHibernationStateProto(const UserLevelHibernationStateProto& from);
  UserLevelHibernationStateProto(UserLevelHibernationStateProto&& from) noexcept
    : UserLevelHibernationStateProto() {
    *this = ::std::move(from);
  }

  inline UserLevelHibernationStateProto& operator=(const UserLevelHibernationStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLevelHibernationStateProto& operator=(UserLevelHibernationStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserLevelHibernationStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLevelHibernationStateProto* internal_default_instance() {
    return reinterpret_cast<const UserLevelHibernationStateProto*>(
               &_UserLevelHibernationStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserLevelHibernationStateProto& a, UserLevelHibernationStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLevelHibernationStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLevelHibernationStateProto* New() const final {
    return CreateMaybeMessage<UserLevelHibernationStateProto>(nullptr);
  }

  UserLevelHibernationStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLevelHibernationStateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserLevelHibernationStateProto& from);
  void MergeFrom(const UserLevelHibernationStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserLevelHibernationStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.apphibernation.UserLevelHibernationStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kHibernatedFieldNumber = 2,
  };
  // optional string package_name = 1;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional bool hibernated = 2;
  bool has_hibernated() const;
  void clear_hibernated();
  bool hibernated() const;
  void set_hibernated(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.apphibernation.UserLevelHibernationStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  bool hibernated_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto;
};
// -------------------------------------------------------------------

class GlobalLevelHibernationStatesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.apphibernation.GlobalLevelHibernationStatesProto) */ {
 public:
  GlobalLevelHibernationStatesProto();
  virtual ~GlobalLevelHibernationStatesProto();

  GlobalLevelHibernationStatesProto(const GlobalLevelHibernationStatesProto& from);
  GlobalLevelHibernationStatesProto(GlobalLevelHibernationStatesProto&& from) noexcept
    : GlobalLevelHibernationStatesProto() {
    *this = ::std::move(from);
  }

  inline GlobalLevelHibernationStatesProto& operator=(const GlobalLevelHibernationStatesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalLevelHibernationStatesProto& operator=(GlobalLevelHibernationStatesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalLevelHibernationStatesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalLevelHibernationStatesProto* internal_default_instance() {
    return reinterpret_cast<const GlobalLevelHibernationStatesProto*>(
               &_GlobalLevelHibernationStatesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobalLevelHibernationStatesProto& a, GlobalLevelHibernationStatesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalLevelHibernationStatesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalLevelHibernationStatesProto* New() const final {
    return CreateMaybeMessage<GlobalLevelHibernationStatesProto>(nullptr);
  }

  GlobalLevelHibernationStatesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalLevelHibernationStatesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalLevelHibernationStatesProto& from);
  void MergeFrom(const GlobalLevelHibernationStatesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalLevelHibernationStatesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.apphibernation.GlobalLevelHibernationStatesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHibernationStateFieldNumber = 1,
  };
  // repeated .com.android.server.apphibernation.GlobalLevelHibernationStateProto hibernation_state = 1;
  int hibernation_state_size() const;
  void clear_hibernation_state();
  ::com::android::server::apphibernation::GlobalLevelHibernationStateProto* mutable_hibernation_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::GlobalLevelHibernationStateProto >*
      mutable_hibernation_state();
  const ::com::android::server::apphibernation::GlobalLevelHibernationStateProto& hibernation_state(int index) const;
  ::com::android::server::apphibernation::GlobalLevelHibernationStateProto* add_hibernation_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::GlobalLevelHibernationStateProto >&
      hibernation_state() const;

  // @@protoc_insertion_point(class_scope:com.android.server.apphibernation.GlobalLevelHibernationStatesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::GlobalLevelHibernationStateProto > hibernation_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto;
};
// -------------------------------------------------------------------

class GlobalLevelHibernationStateProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.apphibernation.GlobalLevelHibernationStateProto) */ {
 public:
  GlobalLevelHibernationStateProto();
  virtual ~GlobalLevelHibernationStateProto();

  GlobalLevelHibernationStateProto(const GlobalLevelHibernationStateProto& from);
  GlobalLevelHibernationStateProto(GlobalLevelHibernationStateProto&& from) noexcept
    : GlobalLevelHibernationStateProto() {
    *this = ::std::move(from);
  }

  inline GlobalLevelHibernationStateProto& operator=(const GlobalLevelHibernationStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalLevelHibernationStateProto& operator=(GlobalLevelHibernationStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalLevelHibernationStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalLevelHibernationStateProto* internal_default_instance() {
    return reinterpret_cast<const GlobalLevelHibernationStateProto*>(
               &_GlobalLevelHibernationStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GlobalLevelHibernationStateProto& a, GlobalLevelHibernationStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalLevelHibernationStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalLevelHibernationStateProto* New() const final {
    return CreateMaybeMessage<GlobalLevelHibernationStateProto>(nullptr);
  }

  GlobalLevelHibernationStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalLevelHibernationStateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalLevelHibernationStateProto& from);
  void MergeFrom(const GlobalLevelHibernationStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalLevelHibernationStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.apphibernation.GlobalLevelHibernationStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
    kSavedByteFieldNumber = 3,
    kHibernatedFieldNumber = 2,
  };
  // optional string package_name = 1;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional int64 saved_byte = 3;
  bool has_saved_byte() const;
  void clear_saved_byte();
  ::PROTOBUF_NAMESPACE_ID::int64 saved_byte() const;
  void set_saved_byte(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool hibernated = 2;
  bool has_hibernated() const;
  void clear_hibernated();
  bool hibernated() const;
  void set_hibernated(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.apphibernation.GlobalLevelHibernationStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 saved_byte_;
  bool hibernated_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserLevelHibernationStatesProto

// repeated .com.android.server.apphibernation.UserLevelHibernationStateProto hibernation_state = 1;
inline int UserLevelHibernationStatesProto::hibernation_state_size() const {
  return hibernation_state_.size();
}
inline void UserLevelHibernationStatesProto::clear_hibernation_state() {
  hibernation_state_.Clear();
}
inline ::com::android::server::apphibernation::UserLevelHibernationStateProto* UserLevelHibernationStatesProto::mutable_hibernation_state(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.apphibernation.UserLevelHibernationStatesProto.hibernation_state)
  return hibernation_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::UserLevelHibernationStateProto >*
UserLevelHibernationStatesProto::mutable_hibernation_state() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.apphibernation.UserLevelHibernationStatesProto.hibernation_state)
  return &hibernation_state_;
}
inline const ::com::android::server::apphibernation::UserLevelHibernationStateProto& UserLevelHibernationStatesProto::hibernation_state(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.apphibernation.UserLevelHibernationStatesProto.hibernation_state)
  return hibernation_state_.Get(index);
}
inline ::com::android::server::apphibernation::UserLevelHibernationStateProto* UserLevelHibernationStatesProto::add_hibernation_state() {
  // @@protoc_insertion_point(field_add:com.android.server.apphibernation.UserLevelHibernationStatesProto.hibernation_state)
  return hibernation_state_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::UserLevelHibernationStateProto >&
UserLevelHibernationStatesProto::hibernation_state() const {
  // @@protoc_insertion_point(field_list:com.android.server.apphibernation.UserLevelHibernationStatesProto.hibernation_state)
  return hibernation_state_;
}

// -------------------------------------------------------------------

// UserLevelHibernationStateProto

// optional string package_name = 1;
inline bool UserLevelHibernationStateProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLevelHibernationStateProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserLevelHibernationStateProto::package_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.apphibernation.UserLevelHibernationStateProto.package_name)
  return package_name_.GetNoArena();
}
inline void UserLevelHibernationStateProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.apphibernation.UserLevelHibernationStateProto.package_name)
}
inline void UserLevelHibernationStateProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.apphibernation.UserLevelHibernationStateProto.package_name)
}
inline void UserLevelHibernationStateProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.apphibernation.UserLevelHibernationStateProto.package_name)
}
inline void UserLevelHibernationStateProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.apphibernation.UserLevelHibernationStateProto.package_name)
}
inline std::string* UserLevelHibernationStateProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.apphibernation.UserLevelHibernationStateProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLevelHibernationStateProto::release_package_name() {
  // @@protoc_insertion_point(field_release:com.android.server.apphibernation.UserLevelHibernationStateProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLevelHibernationStateProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.apphibernation.UserLevelHibernationStateProto.package_name)
}

// optional bool hibernated = 2;
inline bool UserLevelHibernationStateProto::has_hibernated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLevelHibernationStateProto::clear_hibernated() {
  hibernated_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UserLevelHibernationStateProto::hibernated() const {
  // @@protoc_insertion_point(field_get:com.android.server.apphibernation.UserLevelHibernationStateProto.hibernated)
  return hibernated_;
}
inline void UserLevelHibernationStateProto::set_hibernated(bool value) {
  _has_bits_[0] |= 0x00000002u;
  hibernated_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.apphibernation.UserLevelHibernationStateProto.hibernated)
}

// -------------------------------------------------------------------

// GlobalLevelHibernationStatesProto

// repeated .com.android.server.apphibernation.GlobalLevelHibernationStateProto hibernation_state = 1;
inline int GlobalLevelHibernationStatesProto::hibernation_state_size() const {
  return hibernation_state_.size();
}
inline void GlobalLevelHibernationStatesProto::clear_hibernation_state() {
  hibernation_state_.Clear();
}
inline ::com::android::server::apphibernation::GlobalLevelHibernationStateProto* GlobalLevelHibernationStatesProto::mutable_hibernation_state(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.apphibernation.GlobalLevelHibernationStatesProto.hibernation_state)
  return hibernation_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::GlobalLevelHibernationStateProto >*
GlobalLevelHibernationStatesProto::mutable_hibernation_state() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.apphibernation.GlobalLevelHibernationStatesProto.hibernation_state)
  return &hibernation_state_;
}
inline const ::com::android::server::apphibernation::GlobalLevelHibernationStateProto& GlobalLevelHibernationStatesProto::hibernation_state(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.apphibernation.GlobalLevelHibernationStatesProto.hibernation_state)
  return hibernation_state_.Get(index);
}
inline ::com::android::server::apphibernation::GlobalLevelHibernationStateProto* GlobalLevelHibernationStatesProto::add_hibernation_state() {
  // @@protoc_insertion_point(field_add:com.android.server.apphibernation.GlobalLevelHibernationStatesProto.hibernation_state)
  return hibernation_state_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::apphibernation::GlobalLevelHibernationStateProto >&
GlobalLevelHibernationStatesProto::hibernation_state() const {
  // @@protoc_insertion_point(field_list:com.android.server.apphibernation.GlobalLevelHibernationStatesProto.hibernation_state)
  return hibernation_state_;
}

// -------------------------------------------------------------------

// GlobalLevelHibernationStateProto

// optional string package_name = 1;
inline bool GlobalLevelHibernationStateProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalLevelHibernationStateProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GlobalLevelHibernationStateProto::package_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.apphibernation.GlobalLevelHibernationStateProto.package_name)
  return package_name_.GetNoArena();
}
inline void GlobalLevelHibernationStateProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.apphibernation.GlobalLevelHibernationStateProto.package_name)
}
inline void GlobalLevelHibernationStateProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.apphibernation.GlobalLevelHibernationStateProto.package_name)
}
inline void GlobalLevelHibernationStateProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.apphibernation.GlobalLevelHibernationStateProto.package_name)
}
inline void GlobalLevelHibernationStateProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.apphibernation.GlobalLevelHibernationStateProto.package_name)
}
inline std::string* GlobalLevelHibernationStateProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.apphibernation.GlobalLevelHibernationStateProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlobalLevelHibernationStateProto::release_package_name() {
  // @@protoc_insertion_point(field_release:com.android.server.apphibernation.GlobalLevelHibernationStateProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlobalLevelHibernationStateProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.apphibernation.GlobalLevelHibernationStateProto.package_name)
}

// optional bool hibernated = 2;
inline bool GlobalLevelHibernationStateProto::has_hibernated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalLevelHibernationStateProto::clear_hibernated() {
  hibernated_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GlobalLevelHibernationStateProto::hibernated() const {
  // @@protoc_insertion_point(field_get:com.android.server.apphibernation.GlobalLevelHibernationStateProto.hibernated)
  return hibernated_;
}
inline void GlobalLevelHibernationStateProto::set_hibernated(bool value) {
  _has_bits_[0] |= 0x00000004u;
  hibernated_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.apphibernation.GlobalLevelHibernationStateProto.hibernated)
}

// optional int64 saved_byte = 3;
inline bool GlobalLevelHibernationStateProto::has_saved_byte() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalLevelHibernationStateProto::clear_saved_byte() {
  saved_byte_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GlobalLevelHibernationStateProto::saved_byte() const {
  // @@protoc_insertion_point(field_get:com.android.server.apphibernation.GlobalLevelHibernationStateProto.saved_byte)
  return saved_byte_;
}
inline void GlobalLevelHibernationStateProto::set_saved_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  saved_byte_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.apphibernation.GlobalLevelHibernationStateProto.saved_byte)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace apphibernation
}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fapphibernationservice_2eproto
