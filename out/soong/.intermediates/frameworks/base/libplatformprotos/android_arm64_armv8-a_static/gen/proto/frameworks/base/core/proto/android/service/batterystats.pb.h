// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/batterystats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbatterystats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbatterystats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/os/batterystats.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbatterystats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbatterystats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace service {
namespace batterystats {
class BatteryStatsServiceDumpHistoryProto;
class BatteryStatsServiceDumpHistoryProtoDefaultTypeInternal;
extern BatteryStatsServiceDumpHistoryProtoDefaultTypeInternal _BatteryStatsServiceDumpHistoryProto_default_instance_;
class BatteryStatsServiceDumpHistoryProto_Key;
class BatteryStatsServiceDumpHistoryProto_KeyDefaultTypeInternal;
extern BatteryStatsServiceDumpHistoryProto_KeyDefaultTypeInternal _BatteryStatsServiceDumpHistoryProto_Key_default_instance_;
class BatteryStatsServiceDumpProto;
class BatteryStatsServiceDumpProtoDefaultTypeInternal;
extern BatteryStatsServiceDumpProtoDefaultTypeInternal _BatteryStatsServiceDumpProto_default_instance_;
}  // namespace batterystats
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto* Arena::CreateMaybeMessage<::android::service::batterystats::BatteryStatsServiceDumpHistoryProto>(Arena*);
template<> ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key* Arena::CreateMaybeMessage<::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key>(Arena*);
template<> ::android::service::batterystats::BatteryStatsServiceDumpProto* Arena::CreateMaybeMessage<::android::service::batterystats::BatteryStatsServiceDumpProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {
namespace batterystats {

// ===================================================================

class BatteryStatsServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.batterystats.BatteryStatsServiceDumpProto) */ {
 public:
  BatteryStatsServiceDumpProto();
  virtual ~BatteryStatsServiceDumpProto();

  BatteryStatsServiceDumpProto(const BatteryStatsServiceDumpProto& from);
  BatteryStatsServiceDumpProto(BatteryStatsServiceDumpProto&& from) noexcept
    : BatteryStatsServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline BatteryStatsServiceDumpProto& operator=(const BatteryStatsServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryStatsServiceDumpProto& operator=(BatteryStatsServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BatteryStatsServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryStatsServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const BatteryStatsServiceDumpProto*>(
               &_BatteryStatsServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryStatsServiceDumpProto& a, BatteryStatsServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryStatsServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatteryStatsServiceDumpProto* New() const final {
    return CreateMaybeMessage<BatteryStatsServiceDumpProto>(nullptr);
  }

  BatteryStatsServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatteryStatsServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BatteryStatsServiceDumpProto& from);
  void MergeFrom(const BatteryStatsServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatteryStatsServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.batterystats.BatteryStatsServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatterystatsFieldNumber = 1,
  };
  // optional .android.os.BatteryStatsProto batterystats = 1;
  bool has_batterystats() const;
  void clear_batterystats();
  const ::android::os::BatteryStatsProto& batterystats() const;
  ::android::os::BatteryStatsProto* release_batterystats();
  ::android::os::BatteryStatsProto* mutable_batterystats();
  void set_allocated_batterystats(::android::os::BatteryStatsProto* batterystats);

  // @@protoc_insertion_point(class_scope:android.service.batterystats.BatteryStatsServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::BatteryStatsProto* batterystats_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class BatteryStatsServiceDumpHistoryProto_Key :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key) */ {
 public:
  BatteryStatsServiceDumpHistoryProto_Key();
  virtual ~BatteryStatsServiceDumpHistoryProto_Key();

  BatteryStatsServiceDumpHistoryProto_Key(const BatteryStatsServiceDumpHistoryProto_Key& from);
  BatteryStatsServiceDumpHistoryProto_Key(BatteryStatsServiceDumpHistoryProto_Key&& from) noexcept
    : BatteryStatsServiceDumpHistoryProto_Key() {
    *this = ::std::move(from);
  }

  inline BatteryStatsServiceDumpHistoryProto_Key& operator=(const BatteryStatsServiceDumpHistoryProto_Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryStatsServiceDumpHistoryProto_Key& operator=(BatteryStatsServiceDumpHistoryProto_Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BatteryStatsServiceDumpHistoryProto_Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryStatsServiceDumpHistoryProto_Key* internal_default_instance() {
    return reinterpret_cast<const BatteryStatsServiceDumpHistoryProto_Key*>(
               &_BatteryStatsServiceDumpHistoryProto_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatteryStatsServiceDumpHistoryProto_Key& a, BatteryStatsServiceDumpHistoryProto_Key& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryStatsServiceDumpHistoryProto_Key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatteryStatsServiceDumpHistoryProto_Key* New() const final {
    return CreateMaybeMessage<BatteryStatsServiceDumpHistoryProto_Key>(nullptr);
  }

  BatteryStatsServiceDumpHistoryProto_Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatteryStatsServiceDumpHistoryProto_Key>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BatteryStatsServiceDumpHistoryProto_Key& from);
  void MergeFrom(const BatteryStatsServiceDumpHistoryProto_Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatteryStatsServiceDumpHistoryProto_Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 3,
    kIndexFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // optional string tag = 3;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional int32 index = 1;
  bool has_index() const;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 2;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class BatteryStatsServiceDumpHistoryProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.batterystats.BatteryStatsServiceDumpHistoryProto) */ {
 public:
  BatteryStatsServiceDumpHistoryProto();
  virtual ~BatteryStatsServiceDumpHistoryProto();

  BatteryStatsServiceDumpHistoryProto(const BatteryStatsServiceDumpHistoryProto& from);
  BatteryStatsServiceDumpHistoryProto(BatteryStatsServiceDumpHistoryProto&& from) noexcept
    : BatteryStatsServiceDumpHistoryProto() {
    *this = ::std::move(from);
  }

  inline BatteryStatsServiceDumpHistoryProto& operator=(const BatteryStatsServiceDumpHistoryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryStatsServiceDumpHistoryProto& operator=(BatteryStatsServiceDumpHistoryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BatteryStatsServiceDumpHistoryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryStatsServiceDumpHistoryProto* internal_default_instance() {
    return reinterpret_cast<const BatteryStatsServiceDumpHistoryProto*>(
               &_BatteryStatsServiceDumpHistoryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BatteryStatsServiceDumpHistoryProto& a, BatteryStatsServiceDumpHistoryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryStatsServiceDumpHistoryProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatteryStatsServiceDumpHistoryProto* New() const final {
    return CreateMaybeMessage<BatteryStatsServiceDumpHistoryProto>(nullptr);
  }

  BatteryStatsServiceDumpHistoryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatteryStatsServiceDumpHistoryProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BatteryStatsServiceDumpHistoryProto& from);
  void MergeFrom(const BatteryStatsServiceDumpHistoryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatteryStatsServiceDumpHistoryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.batterystats.BatteryStatsServiceDumpHistoryProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BatteryStatsServiceDumpHistoryProto_Key Key;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 5,
    kCsvLinesFieldNumber = 6,
    kStartPlatformVersionFieldNumber = 3,
    kEndPlatformVersionFieldNumber = 4,
    kParcelVersionFieldNumber = 2,
    kReportVersionFieldNumber = 1,
  };
  // repeated .android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key keys = 5;
  int keys_size() const;
  void clear_keys();
  ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key >*
      mutable_keys();
  const ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key& keys(int index) const;
  ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key >&
      keys() const;

  // repeated string csv_lines = 6;
  int csv_lines_size() const;
  void clear_csv_lines();
  const std::string& csv_lines(int index) const;
  std::string* mutable_csv_lines(int index);
  void set_csv_lines(int index, const std::string& value);
  void set_csv_lines(int index, std::string&& value);
  void set_csv_lines(int index, const char* value);
  void set_csv_lines(int index, const char* value, size_t size);
  std::string* add_csv_lines();
  void add_csv_lines(const std::string& value);
  void add_csv_lines(std::string&& value);
  void add_csv_lines(const char* value);
  void add_csv_lines(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& csv_lines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_csv_lines();

  // optional string start_platform_version = 3;
  bool has_start_platform_version() const;
  void clear_start_platform_version();
  const std::string& start_platform_version() const;
  void set_start_platform_version(const std::string& value);
  void set_start_platform_version(std::string&& value);
  void set_start_platform_version(const char* value);
  void set_start_platform_version(const char* value, size_t size);
  std::string* mutable_start_platform_version();
  std::string* release_start_platform_version();
  void set_allocated_start_platform_version(std::string* start_platform_version);

  // optional string end_platform_version = 4;
  bool has_end_platform_version() const;
  void clear_end_platform_version();
  const std::string& end_platform_version() const;
  void set_end_platform_version(const std::string& value);
  void set_end_platform_version(std::string&& value);
  void set_end_platform_version(const char* value);
  void set_end_platform_version(const char* value, size_t size);
  std::string* mutable_end_platform_version();
  std::string* release_end_platform_version();
  void set_allocated_end_platform_version(std::string* end_platform_version);

  // optional int64 parcel_version = 2;
  bool has_parcel_version() const;
  void clear_parcel_version();
  ::PROTOBUF_NAMESPACE_ID::int64 parcel_version() const;
  void set_parcel_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 report_version = 1;
  bool has_report_version() const;
  void clear_report_version();
  ::PROTOBUF_NAMESPACE_ID::int32 report_version() const;
  void set_report_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.batterystats.BatteryStatsServiceDumpHistoryProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key > keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> csv_lines_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_platform_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_platform_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 parcel_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 report_version_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbatterystats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryStatsServiceDumpProto

// optional .android.os.BatteryStatsProto batterystats = 1;
inline bool BatteryStatsServiceDumpProto::has_batterystats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::os::BatteryStatsProto& BatteryStatsServiceDumpProto::batterystats() const {
  const ::android::os::BatteryStatsProto* p = batterystats_;
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpProto.batterystats)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::BatteryStatsProto*>(
      &::android::os::_BatteryStatsProto_default_instance_);
}
inline ::android::os::BatteryStatsProto* BatteryStatsServiceDumpProto::release_batterystats() {
  // @@protoc_insertion_point(field_release:android.service.batterystats.BatteryStatsServiceDumpProto.batterystats)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::BatteryStatsProto* temp = batterystats_;
  batterystats_ = nullptr;
  return temp;
}
inline ::android::os::BatteryStatsProto* BatteryStatsServiceDumpProto::mutable_batterystats() {
  _has_bits_[0] |= 0x00000001u;
  if (batterystats_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::BatteryStatsProto>(GetArenaNoVirtual());
    batterystats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.batterystats.BatteryStatsServiceDumpProto.batterystats)
  return batterystats_;
}
inline void BatteryStatsServiceDumpProto::set_allocated_batterystats(::android::os::BatteryStatsProto* batterystats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(batterystats_);
  }
  if (batterystats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      batterystats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, batterystats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  batterystats_ = batterystats;
  // @@protoc_insertion_point(field_set_allocated:android.service.batterystats.BatteryStatsServiceDumpProto.batterystats)
}

// -------------------------------------------------------------------

// BatteryStatsServiceDumpHistoryProto_Key

// optional int32 index = 1;
inline bool BatteryStatsServiceDumpHistoryProto_Key::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatteryStatsServiceDumpHistoryProto_Key::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryStatsServiceDumpHistoryProto_Key::index() const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.index)
  return index_;
}
inline void BatteryStatsServiceDumpHistoryProto_Key::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.index)
}

// optional int32 uid = 2;
inline bool BatteryStatsServiceDumpHistoryProto_Key::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatteryStatsServiceDumpHistoryProto_Key::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryStatsServiceDumpHistoryProto_Key::uid() const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.uid)
  return uid_;
}
inline void BatteryStatsServiceDumpHistoryProto_Key::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.uid)
}

// optional string tag = 3;
inline bool BatteryStatsServiceDumpHistoryProto_Key::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatteryStatsServiceDumpHistoryProto_Key::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BatteryStatsServiceDumpHistoryProto_Key::tag() const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.tag)
  return tag_.GetNoArena();
}
inline void BatteryStatsServiceDumpHistoryProto_Key::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.tag)
}
inline void BatteryStatsServiceDumpHistoryProto_Key::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.tag)
}
inline void BatteryStatsServiceDumpHistoryProto_Key::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.tag)
}
inline void BatteryStatsServiceDumpHistoryProto_Key::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.tag)
}
inline std::string* BatteryStatsServiceDumpHistoryProto_Key::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BatteryStatsServiceDumpHistoryProto_Key::release_tag() {
  // @@protoc_insertion_point(field_release:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BatteryStatsServiceDumpHistoryProto_Key::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key.tag)
}

// -------------------------------------------------------------------

// BatteryStatsServiceDumpHistoryProto

// optional int32 report_version = 1;
inline bool BatteryStatsServiceDumpHistoryProto::has_report_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatteryStatsServiceDumpHistoryProto::clear_report_version() {
  report_version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryStatsServiceDumpHistoryProto::report_version() const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.report_version)
  return report_version_;
}
inline void BatteryStatsServiceDumpHistoryProto::set_report_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  report_version_ = value;
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.report_version)
}

// optional int64 parcel_version = 2;
inline bool BatteryStatsServiceDumpHistoryProto::has_parcel_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatteryStatsServiceDumpHistoryProto::clear_parcel_version() {
  parcel_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BatteryStatsServiceDumpHistoryProto::parcel_version() const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.parcel_version)
  return parcel_version_;
}
inline void BatteryStatsServiceDumpHistoryProto::set_parcel_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  parcel_version_ = value;
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.parcel_version)
}

// optional string start_platform_version = 3;
inline bool BatteryStatsServiceDumpHistoryProto::has_start_platform_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatteryStatsServiceDumpHistoryProto::clear_start_platform_version() {
  start_platform_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BatteryStatsServiceDumpHistoryProto::start_platform_version() const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.start_platform_version)
  return start_platform_version_.GetNoArena();
}
inline void BatteryStatsServiceDumpHistoryProto::set_start_platform_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.start_platform_version)
}
inline void BatteryStatsServiceDumpHistoryProto::set_start_platform_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  start_platform_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.start_platform_version)
}
inline void BatteryStatsServiceDumpHistoryProto::set_start_platform_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  start_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.start_platform_version)
}
inline void BatteryStatsServiceDumpHistoryProto::set_start_platform_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  start_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.start_platform_version)
}
inline std::string* BatteryStatsServiceDumpHistoryProto::mutable_start_platform_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.start_platform_version)
  return start_platform_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BatteryStatsServiceDumpHistoryProto::release_start_platform_version() {
  // @@protoc_insertion_point(field_release:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.start_platform_version)
  if (!has_start_platform_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return start_platform_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BatteryStatsServiceDumpHistoryProto::set_allocated_start_platform_version(std::string* start_platform_version) {
  if (start_platform_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_platform_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_platform_version);
  // @@protoc_insertion_point(field_set_allocated:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.start_platform_version)
}

// optional string end_platform_version = 4;
inline bool BatteryStatsServiceDumpHistoryProto::has_end_platform_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatteryStatsServiceDumpHistoryProto::clear_end_platform_version() {
  end_platform_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BatteryStatsServiceDumpHistoryProto::end_platform_version() const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.end_platform_version)
  return end_platform_version_.GetNoArena();
}
inline void BatteryStatsServiceDumpHistoryProto::set_end_platform_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  end_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.end_platform_version)
}
inline void BatteryStatsServiceDumpHistoryProto::set_end_platform_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  end_platform_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.end_platform_version)
}
inline void BatteryStatsServiceDumpHistoryProto::set_end_platform_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  end_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.end_platform_version)
}
inline void BatteryStatsServiceDumpHistoryProto::set_end_platform_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  end_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.end_platform_version)
}
inline std::string* BatteryStatsServiceDumpHistoryProto::mutable_end_platform_version() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.end_platform_version)
  return end_platform_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BatteryStatsServiceDumpHistoryProto::release_end_platform_version() {
  // @@protoc_insertion_point(field_release:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.end_platform_version)
  if (!has_end_platform_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return end_platform_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BatteryStatsServiceDumpHistoryProto::set_allocated_end_platform_version(std::string* end_platform_version) {
  if (end_platform_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_platform_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_platform_version);
  // @@protoc_insertion_point(field_set_allocated:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.end_platform_version)
}

// repeated .android.service.batterystats.BatteryStatsServiceDumpHistoryProto.Key keys = 5;
inline int BatteryStatsServiceDumpHistoryProto::keys_size() const {
  return keys_.size();
}
inline void BatteryStatsServiceDumpHistoryProto::clear_keys() {
  keys_.Clear();
}
inline ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key* BatteryStatsServiceDumpHistoryProto::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key >*
BatteryStatsServiceDumpHistoryProto::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.keys)
  return &keys_;
}
inline const ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key& BatteryStatsServiceDumpHistoryProto::keys(int index) const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.keys)
  return keys_.Get(index);
}
inline ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key* BatteryStatsServiceDumpHistoryProto::add_keys() {
  // @@protoc_insertion_point(field_add:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.keys)
  return keys_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::batterystats::BatteryStatsServiceDumpHistoryProto_Key >&
BatteryStatsServiceDumpHistoryProto::keys() const {
  // @@protoc_insertion_point(field_list:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.keys)
  return keys_;
}

// repeated string csv_lines = 6;
inline int BatteryStatsServiceDumpHistoryProto::csv_lines_size() const {
  return csv_lines_.size();
}
inline void BatteryStatsServiceDumpHistoryProto::clear_csv_lines() {
  csv_lines_.Clear();
}
inline const std::string& BatteryStatsServiceDumpHistoryProto::csv_lines(int index) const {
  // @@protoc_insertion_point(field_get:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
  return csv_lines_.Get(index);
}
inline std::string* BatteryStatsServiceDumpHistoryProto::mutable_csv_lines(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
  return csv_lines_.Mutable(index);
}
inline void BatteryStatsServiceDumpHistoryProto::set_csv_lines(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
  csv_lines_.Mutable(index)->assign(value);
}
inline void BatteryStatsServiceDumpHistoryProto::set_csv_lines(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
  csv_lines_.Mutable(index)->assign(std::move(value));
}
inline void BatteryStatsServiceDumpHistoryProto::set_csv_lines(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  csv_lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
}
inline void BatteryStatsServiceDumpHistoryProto::set_csv_lines(int index, const char* value, size_t size) {
  csv_lines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
}
inline std::string* BatteryStatsServiceDumpHistoryProto::add_csv_lines() {
  // @@protoc_insertion_point(field_add_mutable:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
  return csv_lines_.Add();
}
inline void BatteryStatsServiceDumpHistoryProto::add_csv_lines(const std::string& value) {
  csv_lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
}
inline void BatteryStatsServiceDumpHistoryProto::add_csv_lines(std::string&& value) {
  csv_lines_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
}
inline void BatteryStatsServiceDumpHistoryProto::add_csv_lines(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  csv_lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
}
inline void BatteryStatsServiceDumpHistoryProto::add_csv_lines(const char* value, size_t size) {
  csv_lines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BatteryStatsServiceDumpHistoryProto::csv_lines() const {
  // @@protoc_insertion_point(field_list:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
  return csv_lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BatteryStatsServiceDumpHistoryProto::mutable_csv_lines() {
  // @@protoc_insertion_point(field_mutable_list:android.service.batterystats.BatteryStatsServiceDumpHistoryProto.csv_lines)
  return &csv_lines_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace batterystats
}  // namespace service
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbatterystats_2eproto
