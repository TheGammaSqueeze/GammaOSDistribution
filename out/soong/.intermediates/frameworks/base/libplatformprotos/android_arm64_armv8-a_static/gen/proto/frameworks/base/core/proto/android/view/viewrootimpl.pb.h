// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/view/viewrootimpl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fviewrootimpl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fviewrootimpl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/graphics/rect.pb.h"
#include "frameworks/base/core/proto/android/view/displaycutout.pb.h"
#include "frameworks/base/core/proto/android/view/windowlayoutparams.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fviewrootimpl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fviewrootimpl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace view {
class ViewRootImplProto;
class ViewRootImplProtoDefaultTypeInternal;
extern ViewRootImplProtoDefaultTypeInternal _ViewRootImplProto_default_instance_;
}  // namespace view
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::view::ViewRootImplProto* Arena::CreateMaybeMessage<::android::view::ViewRootImplProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace view {

// ===================================================================

class ViewRootImplProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.view.ViewRootImplProto) */ {
 public:
  ViewRootImplProto();
  virtual ~ViewRootImplProto();

  ViewRootImplProto(const ViewRootImplProto& from);
  ViewRootImplProto(ViewRootImplProto&& from) noexcept
    : ViewRootImplProto() {
    *this = ::std::move(from);
  }

  inline ViewRootImplProto& operator=(const ViewRootImplProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewRootImplProto& operator=(ViewRootImplProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ViewRootImplProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ViewRootImplProto* internal_default_instance() {
    return reinterpret_cast<const ViewRootImplProto*>(
               &_ViewRootImplProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ViewRootImplProto& a, ViewRootImplProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewRootImplProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewRootImplProto* New() const final {
    return CreateMaybeMessage<ViewRootImplProto>(nullptr);
  }

  ViewRootImplProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewRootImplProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ViewRootImplProto& from);
  void MergeFrom(const ViewRootImplProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ViewRootImplProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.view.ViewRootImplProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewFieldNumber = 1,
    kLastWindowInsetsFieldNumber = 12,
    kSoftInputModeFieldNumber = 13,
    kVisibleRectFieldNumber = 7,
    kWinFrameFieldNumber = 10,
    kPendingDisplayCutoutFieldNumber = 11,
    kWindowAttributesFieldNumber = 17,
    kDisplayIdFieldNumber = 2,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kAppVisibleFieldNumber = 3,
    kIsAnimatingFieldNumber = 6,
    kIsDrawingFieldNumber = 8,
    kAddedFieldNumber = 9,
    kScrollYFieldNumber = 14,
    kCurScrollYFieldNumber = 15,
    kRemovedFieldNumber = 16,
  };
  // optional string view = 1;
  bool has_view() const;
  void clear_view();
  const std::string& view() const;
  void set_view(const std::string& value);
  void set_view(std::string&& value);
  void set_view(const char* value);
  void set_view(const char* value, size_t size);
  std::string* mutable_view();
  std::string* release_view();
  void set_allocated_view(std::string* view);

  // optional string last_window_insets = 12;
  bool has_last_window_insets() const;
  void clear_last_window_insets();
  const std::string& last_window_insets() const;
  void set_last_window_insets(const std::string& value);
  void set_last_window_insets(std::string&& value);
  void set_last_window_insets(const char* value);
  void set_last_window_insets(const char* value, size_t size);
  std::string* mutable_last_window_insets();
  std::string* release_last_window_insets();
  void set_allocated_last_window_insets(std::string* last_window_insets);

  // optional string soft_input_mode = 13;
  bool has_soft_input_mode() const;
  void clear_soft_input_mode();
  const std::string& soft_input_mode() const;
  void set_soft_input_mode(const std::string& value);
  void set_soft_input_mode(std::string&& value);
  void set_soft_input_mode(const char* value);
  void set_soft_input_mode(const char* value, size_t size);
  std::string* mutable_soft_input_mode();
  std::string* release_soft_input_mode();
  void set_allocated_soft_input_mode(std::string* soft_input_mode);

  // optional .android.graphics.RectProto visible_rect = 7;
  bool has_visible_rect() const;
  void clear_visible_rect();
  const ::android::graphics::RectProto& visible_rect() const;
  ::android::graphics::RectProto* release_visible_rect();
  ::android::graphics::RectProto* mutable_visible_rect();
  void set_allocated_visible_rect(::android::graphics::RectProto* visible_rect);

  // optional .android.graphics.RectProto win_frame = 10;
  bool has_win_frame() const;
  void clear_win_frame();
  const ::android::graphics::RectProto& win_frame() const;
  ::android::graphics::RectProto* release_win_frame();
  ::android::graphics::RectProto* mutable_win_frame();
  void set_allocated_win_frame(::android::graphics::RectProto* win_frame);

  // optional .android.view.DisplayCutoutProto pending_display_cutout = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_pending_display_cutout() const;
  PROTOBUF_DEPRECATED void clear_pending_display_cutout();
  PROTOBUF_DEPRECATED const ::android::view::DisplayCutoutProto& pending_display_cutout() const;
  PROTOBUF_DEPRECATED ::android::view::DisplayCutoutProto* release_pending_display_cutout();
  PROTOBUF_DEPRECATED ::android::view::DisplayCutoutProto* mutable_pending_display_cutout();
  PROTOBUF_DEPRECATED void set_allocated_pending_display_cutout(::android::view::DisplayCutoutProto* pending_display_cutout);

  // optional .android.view.WindowLayoutParamsProto window_attributes = 17;
  bool has_window_attributes() const;
  void clear_window_attributes();
  const ::android::view::WindowLayoutParamsProto& window_attributes() const;
  ::android::view::WindowLayoutParamsProto* release_window_attributes();
  ::android::view::WindowLayoutParamsProto* mutable_window_attributes();
  void set_allocated_window_attributes(::android::view::WindowLayoutParamsProto* window_attributes);

  // optional int32 display_id = 2;
  bool has_display_id() const;
  void clear_display_id();
  ::PROTOBUF_NAMESPACE_ID::int32 display_id() const;
  void set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 width = 4;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 5;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool app_visible = 3;
  bool has_app_visible() const;
  void clear_app_visible();
  bool app_visible() const;
  void set_app_visible(bool value);

  // optional bool is_animating = 6;
  bool has_is_animating() const;
  void clear_is_animating();
  bool is_animating() const;
  void set_is_animating(bool value);

  // optional bool is_drawing = 8;
  bool has_is_drawing() const;
  void clear_is_drawing();
  bool is_drawing() const;
  void set_is_drawing(bool value);

  // optional bool added = 9;
  bool has_added() const;
  void clear_added();
  bool added() const;
  void set_added(bool value);

  // optional int32 scroll_y = 14;
  bool has_scroll_y() const;
  void clear_scroll_y();
  ::PROTOBUF_NAMESPACE_ID::int32 scroll_y() const;
  void set_scroll_y(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cur_scroll_y = 15;
  bool has_cur_scroll_y() const;
  void clear_cur_scroll_y();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_scroll_y() const;
  void set_cur_scroll_y(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool removed = 16;
  bool has_removed() const;
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);

  // @@protoc_insertion_point(class_scope:android.view.ViewRootImplProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_window_insets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr soft_input_mode_;
  ::android::graphics::RectProto* visible_rect_;
  ::android::graphics::RectProto* win_frame_;
  ::android::view::DisplayCutoutProto* pending_display_cutout_;
  ::android::view::WindowLayoutParamsProto* window_attributes_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  bool app_visible_;
  bool is_animating_;
  bool is_drawing_;
  bool added_;
  ::PROTOBUF_NAMESPACE_ID::int32 scroll_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_scroll_y_;
  bool removed_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fviewrootimpl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ViewRootImplProto

// optional string view = 1;
inline bool ViewRootImplProto::has_view() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewRootImplProto::clear_view() {
  view_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ViewRootImplProto::view() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.view)
  return view_.GetNoArena();
}
inline void ViewRootImplProto::set_view(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.view)
}
inline void ViewRootImplProto::set_view(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  view_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.view.ViewRootImplProto.view)
}
inline void ViewRootImplProto::set_view(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.view.ViewRootImplProto.view)
}
inline void ViewRootImplProto::set_view(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  view_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.view.ViewRootImplProto.view)
}
inline std::string* ViewRootImplProto::mutable_view() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.view.ViewRootImplProto.view)
  return view_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ViewRootImplProto::release_view() {
  // @@protoc_insertion_point(field_release:android.view.ViewRootImplProto.view)
  if (!has_view()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return view_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ViewRootImplProto::set_allocated_view(std::string* view) {
  if (view != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  view_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view);
  // @@protoc_insertion_point(field_set_allocated:android.view.ViewRootImplProto.view)
}

// optional int32 display_id = 2;
inline bool ViewRootImplProto::has_display_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ViewRootImplProto::clear_display_id() {
  display_id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewRootImplProto::display_id() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.display_id)
  return display_id_;
}
inline void ViewRootImplProto::set_display_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  display_id_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.display_id)
}

// optional bool app_visible = 3;
inline bool ViewRootImplProto::has_app_visible() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ViewRootImplProto::clear_app_visible() {
  app_visible_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ViewRootImplProto::app_visible() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.app_visible)
  return app_visible_;
}
inline void ViewRootImplProto::set_app_visible(bool value) {
  _has_bits_[0] |= 0x00000400u;
  app_visible_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.app_visible)
}

// optional int32 width = 4;
inline bool ViewRootImplProto::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ViewRootImplProto::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewRootImplProto::width() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.width)
  return width_;
}
inline void ViewRootImplProto::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  width_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.width)
}

// optional int32 height = 5;
inline bool ViewRootImplProto::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ViewRootImplProto::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewRootImplProto::height() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.height)
  return height_;
}
inline void ViewRootImplProto::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.height)
}

// optional bool is_animating = 6;
inline bool ViewRootImplProto::has_is_animating() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ViewRootImplProto::clear_is_animating() {
  is_animating_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ViewRootImplProto::is_animating() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.is_animating)
  return is_animating_;
}
inline void ViewRootImplProto::set_is_animating(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_animating_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.is_animating)
}

// optional .android.graphics.RectProto visible_rect = 7;
inline bool ViewRootImplProto::has_visible_rect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::graphics::RectProto& ViewRootImplProto::visible_rect() const {
  const ::android::graphics::RectProto* p = visible_rect_;
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.visible_rect)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* ViewRootImplProto::release_visible_rect() {
  // @@protoc_insertion_point(field_release:android.view.ViewRootImplProto.visible_rect)
  _has_bits_[0] &= ~0x00000008u;
  ::android::graphics::RectProto* temp = visible_rect_;
  visible_rect_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* ViewRootImplProto::mutable_visible_rect() {
  _has_bits_[0] |= 0x00000008u;
  if (visible_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    visible_rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.ViewRootImplProto.visible_rect)
  return visible_rect_;
}
inline void ViewRootImplProto::set_allocated_visible_rect(::android::graphics::RectProto* visible_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible_rect_);
  }
  if (visible_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visible_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  visible_rect_ = visible_rect;
  // @@protoc_insertion_point(field_set_allocated:android.view.ViewRootImplProto.visible_rect)
}

// optional bool is_drawing = 8;
inline bool ViewRootImplProto::has_is_drawing() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ViewRootImplProto::clear_is_drawing() {
  is_drawing_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ViewRootImplProto::is_drawing() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.is_drawing)
  return is_drawing_;
}
inline void ViewRootImplProto::set_is_drawing(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_drawing_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.is_drawing)
}

// optional bool added = 9;
inline bool ViewRootImplProto::has_added() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ViewRootImplProto::clear_added() {
  added_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ViewRootImplProto::added() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.added)
  return added_;
}
inline void ViewRootImplProto::set_added(bool value) {
  _has_bits_[0] |= 0x00002000u;
  added_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.added)
}

// optional .android.graphics.RectProto win_frame = 10;
inline bool ViewRootImplProto::has_win_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::graphics::RectProto& ViewRootImplProto::win_frame() const {
  const ::android::graphics::RectProto* p = win_frame_;
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.win_frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::RectProto*>(
      &::android::graphics::_RectProto_default_instance_);
}
inline ::android::graphics::RectProto* ViewRootImplProto::release_win_frame() {
  // @@protoc_insertion_point(field_release:android.view.ViewRootImplProto.win_frame)
  _has_bits_[0] &= ~0x00000010u;
  ::android::graphics::RectProto* temp = win_frame_;
  win_frame_ = nullptr;
  return temp;
}
inline ::android::graphics::RectProto* ViewRootImplProto::mutable_win_frame() {
  _has_bits_[0] |= 0x00000010u;
  if (win_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::RectProto>(GetArenaNoVirtual());
    win_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.ViewRootImplProto.win_frame)
  return win_frame_;
}
inline void ViewRootImplProto::set_allocated_win_frame(::android::graphics::RectProto* win_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(win_frame_);
  }
  if (win_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      win_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, win_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  win_frame_ = win_frame;
  // @@protoc_insertion_point(field_set_allocated:android.view.ViewRootImplProto.win_frame)
}

// optional .android.view.DisplayCutoutProto pending_display_cutout = 11 [deprecated = true];
inline bool ViewRootImplProto::has_pending_display_cutout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::view::DisplayCutoutProto& ViewRootImplProto::pending_display_cutout() const {
  const ::android::view::DisplayCutoutProto* p = pending_display_cutout_;
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.pending_display_cutout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::DisplayCutoutProto*>(
      &::android::view::_DisplayCutoutProto_default_instance_);
}
inline ::android::view::DisplayCutoutProto* ViewRootImplProto::release_pending_display_cutout() {
  // @@protoc_insertion_point(field_release:android.view.ViewRootImplProto.pending_display_cutout)
  _has_bits_[0] &= ~0x00000020u;
  ::android::view::DisplayCutoutProto* temp = pending_display_cutout_;
  pending_display_cutout_ = nullptr;
  return temp;
}
inline ::android::view::DisplayCutoutProto* ViewRootImplProto::mutable_pending_display_cutout() {
  _has_bits_[0] |= 0x00000020u;
  if (pending_display_cutout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::DisplayCutoutProto>(GetArenaNoVirtual());
    pending_display_cutout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.ViewRootImplProto.pending_display_cutout)
  return pending_display_cutout_;
}
inline void ViewRootImplProto::set_allocated_pending_display_cutout(::android::view::DisplayCutoutProto* pending_display_cutout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_display_cutout_);
  }
  if (pending_display_cutout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pending_display_cutout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_display_cutout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pending_display_cutout_ = pending_display_cutout;
  // @@protoc_insertion_point(field_set_allocated:android.view.ViewRootImplProto.pending_display_cutout)
}

// optional string last_window_insets = 12;
inline bool ViewRootImplProto::has_last_window_insets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewRootImplProto::clear_last_window_insets() {
  last_window_insets_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ViewRootImplProto::last_window_insets() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.last_window_insets)
  return last_window_insets_.GetNoArena();
}
inline void ViewRootImplProto::set_last_window_insets(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_window_insets_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.last_window_insets)
}
inline void ViewRootImplProto::set_last_window_insets(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  last_window_insets_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.view.ViewRootImplProto.last_window_insets)
}
inline void ViewRootImplProto::set_last_window_insets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  last_window_insets_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.view.ViewRootImplProto.last_window_insets)
}
inline void ViewRootImplProto::set_last_window_insets(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  last_window_insets_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.view.ViewRootImplProto.last_window_insets)
}
inline std::string* ViewRootImplProto::mutable_last_window_insets() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.view.ViewRootImplProto.last_window_insets)
  return last_window_insets_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ViewRootImplProto::release_last_window_insets() {
  // @@protoc_insertion_point(field_release:android.view.ViewRootImplProto.last_window_insets)
  if (!has_last_window_insets()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return last_window_insets_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ViewRootImplProto::set_allocated_last_window_insets(std::string* last_window_insets) {
  if (last_window_insets != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_window_insets_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_window_insets);
  // @@protoc_insertion_point(field_set_allocated:android.view.ViewRootImplProto.last_window_insets)
}

// optional string soft_input_mode = 13;
inline bool ViewRootImplProto::has_soft_input_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ViewRootImplProto::clear_soft_input_mode() {
  soft_input_mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ViewRootImplProto::soft_input_mode() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.soft_input_mode)
  return soft_input_mode_.GetNoArena();
}
inline void ViewRootImplProto::set_soft_input_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  soft_input_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.soft_input_mode)
}
inline void ViewRootImplProto::set_soft_input_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  soft_input_mode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.view.ViewRootImplProto.soft_input_mode)
}
inline void ViewRootImplProto::set_soft_input_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  soft_input_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.view.ViewRootImplProto.soft_input_mode)
}
inline void ViewRootImplProto::set_soft_input_mode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  soft_input_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.view.ViewRootImplProto.soft_input_mode)
}
inline std::string* ViewRootImplProto::mutable_soft_input_mode() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.view.ViewRootImplProto.soft_input_mode)
  return soft_input_mode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ViewRootImplProto::release_soft_input_mode() {
  // @@protoc_insertion_point(field_release:android.view.ViewRootImplProto.soft_input_mode)
  if (!has_soft_input_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return soft_input_mode_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ViewRootImplProto::set_allocated_soft_input_mode(std::string* soft_input_mode) {
  if (soft_input_mode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  soft_input_mode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), soft_input_mode);
  // @@protoc_insertion_point(field_set_allocated:android.view.ViewRootImplProto.soft_input_mode)
}

// optional int32 scroll_y = 14;
inline bool ViewRootImplProto::has_scroll_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ViewRootImplProto::clear_scroll_y() {
  scroll_y_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewRootImplProto::scroll_y() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.scroll_y)
  return scroll_y_;
}
inline void ViewRootImplProto::set_scroll_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  scroll_y_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.scroll_y)
}

// optional int32 cur_scroll_y = 15;
inline bool ViewRootImplProto::has_cur_scroll_y() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ViewRootImplProto::clear_cur_scroll_y() {
  cur_scroll_y_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ViewRootImplProto::cur_scroll_y() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.cur_scroll_y)
  return cur_scroll_y_;
}
inline void ViewRootImplProto::set_cur_scroll_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  cur_scroll_y_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.cur_scroll_y)
}

// optional bool removed = 16;
inline bool ViewRootImplProto::has_removed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ViewRootImplProto::clear_removed() {
  removed_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ViewRootImplProto::removed() const {
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.removed)
  return removed_;
}
inline void ViewRootImplProto::set_removed(bool value) {
  _has_bits_[0] |= 0x00010000u;
  removed_ = value;
  // @@protoc_insertion_point(field_set:android.view.ViewRootImplProto.removed)
}

// optional .android.view.WindowLayoutParamsProto window_attributes = 17;
inline bool ViewRootImplProto::has_window_attributes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::view::WindowLayoutParamsProto& ViewRootImplProto::window_attributes() const {
  const ::android::view::WindowLayoutParamsProto* p = window_attributes_;
  // @@protoc_insertion_point(field_get:android.view.ViewRootImplProto.window_attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::WindowLayoutParamsProto*>(
      &::android::view::_WindowLayoutParamsProto_default_instance_);
}
inline ::android::view::WindowLayoutParamsProto* ViewRootImplProto::release_window_attributes() {
  // @@protoc_insertion_point(field_release:android.view.ViewRootImplProto.window_attributes)
  _has_bits_[0] &= ~0x00000040u;
  ::android::view::WindowLayoutParamsProto* temp = window_attributes_;
  window_attributes_ = nullptr;
  return temp;
}
inline ::android::view::WindowLayoutParamsProto* ViewRootImplProto::mutable_window_attributes() {
  _has_bits_[0] |= 0x00000040u;
  if (window_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::WindowLayoutParamsProto>(GetArenaNoVirtual());
    window_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.ViewRootImplProto.window_attributes)
  return window_attributes_;
}
inline void ViewRootImplProto::set_allocated_window_attributes(::android::view::WindowLayoutParamsProto* window_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_attributes_);
  }
  if (window_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  window_attributes_ = window_attributes;
  // @@protoc_insertion_point(field_set_allocated:android.view.ViewRootImplProto.window_attributes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace view
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fviewrootimpl_2eproto
