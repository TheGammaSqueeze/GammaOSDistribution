// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/content/package_item_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace content {
namespace pm {
class ApplicationInfoProto;
class ApplicationInfoProtoDefaultTypeInternal;
extern ApplicationInfoProtoDefaultTypeInternal _ApplicationInfoProto_default_instance_;
class ApplicationInfoProto_Detail;
class ApplicationInfoProto_DetailDefaultTypeInternal;
extern ApplicationInfoProto_DetailDefaultTypeInternal _ApplicationInfoProto_Detail_default_instance_;
class ApplicationInfoProto_Version;
class ApplicationInfoProto_VersionDefaultTypeInternal;
extern ApplicationInfoProto_VersionDefaultTypeInternal _ApplicationInfoProto_Version_default_instance_;
class PackageItemInfoProto;
class PackageItemInfoProtoDefaultTypeInternal;
extern PackageItemInfoProtoDefaultTypeInternal _PackageItemInfoProto_default_instance_;
}  // namespace pm
}  // namespace content
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::content::pm::ApplicationInfoProto* Arena::CreateMaybeMessage<::android::content::pm::ApplicationInfoProto>(Arena*);
template<> ::android::content::pm::ApplicationInfoProto_Detail* Arena::CreateMaybeMessage<::android::content::pm::ApplicationInfoProto_Detail>(Arena*);
template<> ::android::content::pm::ApplicationInfoProto_Version* Arena::CreateMaybeMessage<::android::content::pm::ApplicationInfoProto_Version>(Arena*);
template<> ::android::content::pm::PackageItemInfoProto* Arena::CreateMaybeMessage<::android::content::pm::PackageItemInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace content {
namespace pm {

// ===================================================================

class PackageItemInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.content.pm.PackageItemInfoProto) */ {
 public:
  PackageItemInfoProto();
  virtual ~PackageItemInfoProto();

  PackageItemInfoProto(const PackageItemInfoProto& from);
  PackageItemInfoProto(PackageItemInfoProto&& from) noexcept
    : PackageItemInfoProto() {
    *this = ::std::move(from);
  }

  inline PackageItemInfoProto& operator=(const PackageItemInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageItemInfoProto& operator=(PackageItemInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageItemInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageItemInfoProto* internal_default_instance() {
    return reinterpret_cast<const PackageItemInfoProto*>(
               &_PackageItemInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PackageItemInfoProto& a, PackageItemInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageItemInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageItemInfoProto* New() const final {
    return CreateMaybeMessage<PackageItemInfoProto>(nullptr);
  }

  PackageItemInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageItemInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageItemInfoProto& from);
  void MergeFrom(const PackageItemInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageItemInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.pm.PackageItemInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPackageNameFieldNumber = 2,
    kNonLocalizedLabelFieldNumber = 4,
    kLabelResFieldNumber = 3,
    kIconFieldNumber = 5,
    kBannerFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string package_name = 2;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional string non_localized_label = 4;
  bool has_non_localized_label() const;
  void clear_non_localized_label();
  const std::string& non_localized_label() const;
  void set_non_localized_label(const std::string& value);
  void set_non_localized_label(std::string&& value);
  void set_non_localized_label(const char* value);
  void set_non_localized_label(const char* value, size_t size);
  std::string* mutable_non_localized_label();
  std::string* release_non_localized_label();
  void set_allocated_non_localized_label(std::string* non_localized_label);

  // optional int32 label_res = 3;
  bool has_label_res() const;
  void clear_label_res();
  ::PROTOBUF_NAMESPACE_ID::int32 label_res() const;
  void set_label_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 icon = 5;
  bool has_icon() const;
  void clear_icon();
  ::PROTOBUF_NAMESPACE_ID::int32 icon() const;
  void set_icon(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 banner = 6;
  bool has_banner() const;
  void clear_banner();
  ::PROTOBUF_NAMESPACE_ID::int32 banner() const;
  void set_banner(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.content.pm.PackageItemInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr non_localized_label_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_res_;
  ::PROTOBUF_NAMESPACE_ID::int32 icon_;
  ::PROTOBUF_NAMESPACE_ID::int32 banner_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ApplicationInfoProto_Version :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.content.pm.ApplicationInfoProto.Version) */ {
 public:
  ApplicationInfoProto_Version();
  virtual ~ApplicationInfoProto_Version();

  ApplicationInfoProto_Version(const ApplicationInfoProto_Version& from);
  ApplicationInfoProto_Version(ApplicationInfoProto_Version&& from) noexcept
    : ApplicationInfoProto_Version() {
    *this = ::std::move(from);
  }

  inline ApplicationInfoProto_Version& operator=(const ApplicationInfoProto_Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInfoProto_Version& operator=(ApplicationInfoProto_Version&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ApplicationInfoProto_Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationInfoProto_Version* internal_default_instance() {
    return reinterpret_cast<const ApplicationInfoProto_Version*>(
               &_ApplicationInfoProto_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApplicationInfoProto_Version& a, ApplicationInfoProto_Version& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInfoProto_Version* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInfoProto_Version* New() const final {
    return CreateMaybeMessage<ApplicationInfoProto_Version>(nullptr);
  }

  ApplicationInfoProto_Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInfoProto_Version>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ApplicationInfoProto_Version& from);
  void MergeFrom(const ApplicationInfoProto_Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApplicationInfoProto_Version* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.pm.ApplicationInfoProto.Version";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kMinSdkVersionFieldNumber = 2,
    kTargetSdkVersionFieldNumber = 3,
    kVersionCodeFieldNumber = 4,
    kTargetSandboxVersionFieldNumber = 5,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional int32 min_sdk_version = 2;
  bool has_min_sdk_version() const;
  void clear_min_sdk_version();
  ::PROTOBUF_NAMESPACE_ID::int32 min_sdk_version() const;
  void set_min_sdk_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 target_sdk_version = 3;
  bool has_target_sdk_version() const;
  void clear_target_sdk_version();
  ::PROTOBUF_NAMESPACE_ID::int32 target_sdk_version() const;
  void set_target_sdk_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 version_code = 4;
  bool has_version_code() const;
  void clear_version_code();
  ::PROTOBUF_NAMESPACE_ID::int32 version_code() const;
  void set_version_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 target_sandbox_version = 5;
  bool has_target_sandbox_version() const;
  void clear_target_sandbox_version();
  ::PROTOBUF_NAMESPACE_ID::int32 target_sandbox_version() const;
  void set_target_sandbox_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.content.pm.ApplicationInfoProto.Version)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_sdk_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_sdk_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_sandbox_version_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ApplicationInfoProto_Detail :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.content.pm.ApplicationInfoProto.Detail) */ {
 public:
  ApplicationInfoProto_Detail();
  virtual ~ApplicationInfoProto_Detail();

  ApplicationInfoProto_Detail(const ApplicationInfoProto_Detail& from);
  ApplicationInfoProto_Detail(ApplicationInfoProto_Detail&& from) noexcept
    : ApplicationInfoProto_Detail() {
    *this = ::std::move(from);
  }

  inline ApplicationInfoProto_Detail& operator=(const ApplicationInfoProto_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInfoProto_Detail& operator=(ApplicationInfoProto_Detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ApplicationInfoProto_Detail& default_instance();

  enum FullBackupContentCase {
    kContent = 15,
    kIsFullBackup = 16,
    FULL_BACKUP_CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationInfoProto_Detail* internal_default_instance() {
    return reinterpret_cast<const ApplicationInfoProto_Detail*>(
               &_ApplicationInfoProto_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApplicationInfoProto_Detail& a, ApplicationInfoProto_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInfoProto_Detail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInfoProto_Detail* New() const final {
    return CreateMaybeMessage<ApplicationInfoProto_Detail>(nullptr);
  }

  ApplicationInfoProto_Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInfoProto_Detail>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ApplicationInfoProto_Detail& from);
  void MergeFrom(const ApplicationInfoProto_Detail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApplicationInfoProto_Detail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.pm.ApplicationInfoProto.Detail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedLibraryFilesFieldNumber = 10,
    kClassNameFieldNumber = 1,
    kTaskAffinityFieldNumber = 2,
    kSeinfoFieldNumber = 6,
    kSeinfoUserFieldNumber = 7,
    kDeviceProtectedDataDirFieldNumber = 8,
    kCredentialProtectedDataDirFieldNumber = 9,
    kManageSpaceActivityNameFieldNumber = 11,
    kRequiresSmallestWidthDpFieldNumber = 3,
    kCompatibleWidthLimitDpFieldNumber = 4,
    kLargestWidthLimitDpFieldNumber = 5,
    kDescriptionResFieldNumber = 12,
    kUiOptionsFieldNumber = 13,
    kNetworkSecurityConfigResFieldNumber = 17,
    kSupportsRtlFieldNumber = 14,
    kNativeHeapZeroInitFieldNumber = 21,
    kCategoryFieldNumber = 18,
    kEnableGwpAsanFieldNumber = 19,
    kEnableMemtagFieldNumber = 20,
    kContentFieldNumber = 15,
    kIsFullBackupFieldNumber = 16,
  };
  // repeated string shared_library_files = 10;
  int shared_library_files_size() const;
  void clear_shared_library_files();
  const std::string& shared_library_files(int index) const;
  std::string* mutable_shared_library_files(int index);
  void set_shared_library_files(int index, const std::string& value);
  void set_shared_library_files(int index, std::string&& value);
  void set_shared_library_files(int index, const char* value);
  void set_shared_library_files(int index, const char* value, size_t size);
  std::string* add_shared_library_files();
  void add_shared_library_files(const std::string& value);
  void add_shared_library_files(std::string&& value);
  void add_shared_library_files(const char* value);
  void add_shared_library_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& shared_library_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_shared_library_files();

  // optional string class_name = 1;
  bool has_class_name() const;
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);

  // optional string task_affinity = 2;
  bool has_task_affinity() const;
  void clear_task_affinity();
  const std::string& task_affinity() const;
  void set_task_affinity(const std::string& value);
  void set_task_affinity(std::string&& value);
  void set_task_affinity(const char* value);
  void set_task_affinity(const char* value, size_t size);
  std::string* mutable_task_affinity();
  std::string* release_task_affinity();
  void set_allocated_task_affinity(std::string* task_affinity);

  // optional string seinfo = 6;
  bool has_seinfo() const;
  void clear_seinfo();
  const std::string& seinfo() const;
  void set_seinfo(const std::string& value);
  void set_seinfo(std::string&& value);
  void set_seinfo(const char* value);
  void set_seinfo(const char* value, size_t size);
  std::string* mutable_seinfo();
  std::string* release_seinfo();
  void set_allocated_seinfo(std::string* seinfo);

  // optional string seinfo_user = 7;
  bool has_seinfo_user() const;
  void clear_seinfo_user();
  const std::string& seinfo_user() const;
  void set_seinfo_user(const std::string& value);
  void set_seinfo_user(std::string&& value);
  void set_seinfo_user(const char* value);
  void set_seinfo_user(const char* value, size_t size);
  std::string* mutable_seinfo_user();
  std::string* release_seinfo_user();
  void set_allocated_seinfo_user(std::string* seinfo_user);

  // optional string device_protected_data_dir = 8;
  bool has_device_protected_data_dir() const;
  void clear_device_protected_data_dir();
  const std::string& device_protected_data_dir() const;
  void set_device_protected_data_dir(const std::string& value);
  void set_device_protected_data_dir(std::string&& value);
  void set_device_protected_data_dir(const char* value);
  void set_device_protected_data_dir(const char* value, size_t size);
  std::string* mutable_device_protected_data_dir();
  std::string* release_device_protected_data_dir();
  void set_allocated_device_protected_data_dir(std::string* device_protected_data_dir);

  // optional string credential_protected_data_dir = 9;
  bool has_credential_protected_data_dir() const;
  void clear_credential_protected_data_dir();
  const std::string& credential_protected_data_dir() const;
  void set_credential_protected_data_dir(const std::string& value);
  void set_credential_protected_data_dir(std::string&& value);
  void set_credential_protected_data_dir(const char* value);
  void set_credential_protected_data_dir(const char* value, size_t size);
  std::string* mutable_credential_protected_data_dir();
  std::string* release_credential_protected_data_dir();
  void set_allocated_credential_protected_data_dir(std::string* credential_protected_data_dir);

  // optional string manage_space_activity_name = 11;
  bool has_manage_space_activity_name() const;
  void clear_manage_space_activity_name();
  const std::string& manage_space_activity_name() const;
  void set_manage_space_activity_name(const std::string& value);
  void set_manage_space_activity_name(std::string&& value);
  void set_manage_space_activity_name(const char* value);
  void set_manage_space_activity_name(const char* value, size_t size);
  std::string* mutable_manage_space_activity_name();
  std::string* release_manage_space_activity_name();
  void set_allocated_manage_space_activity_name(std::string* manage_space_activity_name);

  // optional int32 requires_smallest_width_dp = 3;
  bool has_requires_smallest_width_dp() const;
  void clear_requires_smallest_width_dp();
  ::PROTOBUF_NAMESPACE_ID::int32 requires_smallest_width_dp() const;
  void set_requires_smallest_width_dp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 compatible_width_limit_dp = 4;
  bool has_compatible_width_limit_dp() const;
  void clear_compatible_width_limit_dp();
  ::PROTOBUF_NAMESPACE_ID::int32 compatible_width_limit_dp() const;
  void set_compatible_width_limit_dp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 largest_width_limit_dp = 5;
  bool has_largest_width_limit_dp() const;
  void clear_largest_width_limit_dp();
  ::PROTOBUF_NAMESPACE_ID::int32 largest_width_limit_dp() const;
  void set_largest_width_limit_dp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 description_res = 12;
  bool has_description_res() const;
  void clear_description_res();
  ::PROTOBUF_NAMESPACE_ID::int32 description_res() const;
  void set_description_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ui_options = 13;
  bool has_ui_options() const;
  void clear_ui_options();
  ::PROTOBUF_NAMESPACE_ID::int32 ui_options() const;
  void set_ui_options(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 network_security_config_res = 17;
  bool has_network_security_config_res() const;
  void clear_network_security_config_res();
  ::PROTOBUF_NAMESPACE_ID::int32 network_security_config_res() const;
  void set_network_security_config_res(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool supports_rtl = 14;
  bool has_supports_rtl() const;
  void clear_supports_rtl();
  bool supports_rtl() const;
  void set_supports_rtl(bool value);

  // optional bool native_heap_zero_init = 21;
  bool has_native_heap_zero_init() const;
  void clear_native_heap_zero_init();
  bool native_heap_zero_init() const;
  void set_native_heap_zero_init(bool value);

  // optional int32 category = 18;
  bool has_category() const;
  void clear_category();
  ::PROTOBUF_NAMESPACE_ID::int32 category() const;
  void set_category(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 enable_gwp_asan = 19;
  bool has_enable_gwp_asan() const;
  void clear_enable_gwp_asan();
  ::PROTOBUF_NAMESPACE_ID::int32 enable_gwp_asan() const;
  void set_enable_gwp_asan(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 enable_memtag = 20;
  bool has_enable_memtag() const;
  void clear_enable_memtag();
  ::PROTOBUF_NAMESPACE_ID::int32 enable_memtag() const;
  void set_enable_memtag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional string content = 15;
  bool has_content() const;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // optional bool is_full_backup = 16;
  bool has_is_full_backup() const;
  void clear_is_full_backup();
  bool is_full_backup() const;
  void set_is_full_backup(bool value);

  void clear_full_backup_content();
  FullBackupContentCase full_backup_content_case() const;
  // @@protoc_insertion_point(class_scope:android.content.pm.ApplicationInfoProto.Detail)
 private:
  class _Internal;
  void set_has_content();
  void set_has_is_full_backup();

  inline bool has_full_backup_content() const;
  inline void clear_has_full_backup_content();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> shared_library_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_affinity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seinfo_user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_protected_data_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credential_protected_data_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manage_space_activity_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 requires_smallest_width_dp_;
  ::PROTOBUF_NAMESPACE_ID::int32 compatible_width_limit_dp_;
  ::PROTOBUF_NAMESPACE_ID::int32 largest_width_limit_dp_;
  ::PROTOBUF_NAMESPACE_ID::int32 description_res_;
  ::PROTOBUF_NAMESPACE_ID::int32 ui_options_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_security_config_res_;
  bool supports_rtl_;
  bool native_heap_zero_init_;
  ::PROTOBUF_NAMESPACE_ID::int32 category_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_gwp_asan_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_memtag_;
  union FullBackupContentUnion {
    FullBackupContentUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    bool is_full_backup_;
  } full_backup_content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ApplicationInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.content.pm.ApplicationInfoProto) */ {
 public:
  ApplicationInfoProto();
  virtual ~ApplicationInfoProto();

  ApplicationInfoProto(const ApplicationInfoProto& from);
  ApplicationInfoProto(ApplicationInfoProto&& from) noexcept
    : ApplicationInfoProto() {
    *this = ::std::move(from);
  }

  inline ApplicationInfoProto& operator=(const ApplicationInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInfoProto& operator=(ApplicationInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ApplicationInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationInfoProto* internal_default_instance() {
    return reinterpret_cast<const ApplicationInfoProto*>(
               &_ApplicationInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ApplicationInfoProto& a, ApplicationInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInfoProto* New() const final {
    return CreateMaybeMessage<ApplicationInfoProto>(nullptr);
  }

  ApplicationInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ApplicationInfoProto& from);
  void MergeFrom(const ApplicationInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApplicationInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.pm.ApplicationInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ApplicationInfoProto_Version Version;
  typedef ApplicationInfoProto_Detail Detail;

  // accessors -------------------------------------------------------

  enum : int {
    kSplitSourceDirsFieldNumber = 10,
    kSplitPublicSourceDirsFieldNumber = 11,
    kResourceDirsFieldNumber = 12,
    kSplitClassLoaderNamesFieldNumber = 15,
    kOverlayPathsFieldNumber = 18,
    kPermissionFieldNumber = 2,
    kProcessNameFieldNumber = 3,
    kSourceDirFieldNumber = 8,
    kPublicSourceDirFieldNumber = 9,
    kDataDirFieldNumber = 13,
    kClassLoaderNameFieldNumber = 14,
    kPackageFieldNumber = 1,
    kVersionFieldNumber = 16,
    kDetailFieldNumber = 17,
    kUidFieldNumber = 4,
    kFlagsFieldNumber = 5,
    kPrivateFlagsFieldNumber = 6,
    kThemeFieldNumber = 7,
  };
  // repeated string split_source_dirs = 10;
  int split_source_dirs_size() const;
  void clear_split_source_dirs();
  const std::string& split_source_dirs(int index) const;
  std::string* mutable_split_source_dirs(int index);
  void set_split_source_dirs(int index, const std::string& value);
  void set_split_source_dirs(int index, std::string&& value);
  void set_split_source_dirs(int index, const char* value);
  void set_split_source_dirs(int index, const char* value, size_t size);
  std::string* add_split_source_dirs();
  void add_split_source_dirs(const std::string& value);
  void add_split_source_dirs(std::string&& value);
  void add_split_source_dirs(const char* value);
  void add_split_source_dirs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& split_source_dirs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_split_source_dirs();

  // repeated string split_public_source_dirs = 11;
  int split_public_source_dirs_size() const;
  void clear_split_public_source_dirs();
  const std::string& split_public_source_dirs(int index) const;
  std::string* mutable_split_public_source_dirs(int index);
  void set_split_public_source_dirs(int index, const std::string& value);
  void set_split_public_source_dirs(int index, std::string&& value);
  void set_split_public_source_dirs(int index, const char* value);
  void set_split_public_source_dirs(int index, const char* value, size_t size);
  std::string* add_split_public_source_dirs();
  void add_split_public_source_dirs(const std::string& value);
  void add_split_public_source_dirs(std::string&& value);
  void add_split_public_source_dirs(const char* value);
  void add_split_public_source_dirs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& split_public_source_dirs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_split_public_source_dirs();

  // repeated string resource_dirs = 12;
  int resource_dirs_size() const;
  void clear_resource_dirs();
  const std::string& resource_dirs(int index) const;
  std::string* mutable_resource_dirs(int index);
  void set_resource_dirs(int index, const std::string& value);
  void set_resource_dirs(int index, std::string&& value);
  void set_resource_dirs(int index, const char* value);
  void set_resource_dirs(int index, const char* value, size_t size);
  std::string* add_resource_dirs();
  void add_resource_dirs(const std::string& value);
  void add_resource_dirs(std::string&& value);
  void add_resource_dirs(const char* value);
  void add_resource_dirs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_dirs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_dirs();

  // repeated string split_class_loader_names = 15;
  int split_class_loader_names_size() const;
  void clear_split_class_loader_names();
  const std::string& split_class_loader_names(int index) const;
  std::string* mutable_split_class_loader_names(int index);
  void set_split_class_loader_names(int index, const std::string& value);
  void set_split_class_loader_names(int index, std::string&& value);
  void set_split_class_loader_names(int index, const char* value);
  void set_split_class_loader_names(int index, const char* value, size_t size);
  std::string* add_split_class_loader_names();
  void add_split_class_loader_names(const std::string& value);
  void add_split_class_loader_names(std::string&& value);
  void add_split_class_loader_names(const char* value);
  void add_split_class_loader_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& split_class_loader_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_split_class_loader_names();

  // repeated string overlay_paths = 18;
  int overlay_paths_size() const;
  void clear_overlay_paths();
  const std::string& overlay_paths(int index) const;
  std::string* mutable_overlay_paths(int index);
  void set_overlay_paths(int index, const std::string& value);
  void set_overlay_paths(int index, std::string&& value);
  void set_overlay_paths(int index, const char* value);
  void set_overlay_paths(int index, const char* value, size_t size);
  std::string* add_overlay_paths();
  void add_overlay_paths(const std::string& value);
  void add_overlay_paths(std::string&& value);
  void add_overlay_paths(const char* value);
  void add_overlay_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& overlay_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_overlay_paths();

  // optional string permission = 2;
  bool has_permission() const;
  void clear_permission();
  const std::string& permission() const;
  void set_permission(const std::string& value);
  void set_permission(std::string&& value);
  void set_permission(const char* value);
  void set_permission(const char* value, size_t size);
  std::string* mutable_permission();
  std::string* release_permission();
  void set_allocated_permission(std::string* permission);

  // optional string process_name = 3;
  bool has_process_name() const;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);

  // optional string source_dir = 8;
  bool has_source_dir() const;
  void clear_source_dir();
  const std::string& source_dir() const;
  void set_source_dir(const std::string& value);
  void set_source_dir(std::string&& value);
  void set_source_dir(const char* value);
  void set_source_dir(const char* value, size_t size);
  std::string* mutable_source_dir();
  std::string* release_source_dir();
  void set_allocated_source_dir(std::string* source_dir);

  // optional string public_source_dir = 9;
  bool has_public_source_dir() const;
  void clear_public_source_dir();
  const std::string& public_source_dir() const;
  void set_public_source_dir(const std::string& value);
  void set_public_source_dir(std::string&& value);
  void set_public_source_dir(const char* value);
  void set_public_source_dir(const char* value, size_t size);
  std::string* mutable_public_source_dir();
  std::string* release_public_source_dir();
  void set_allocated_public_source_dir(std::string* public_source_dir);

  // optional string data_dir = 13;
  bool has_data_dir() const;
  void clear_data_dir();
  const std::string& data_dir() const;
  void set_data_dir(const std::string& value);
  void set_data_dir(std::string&& value);
  void set_data_dir(const char* value);
  void set_data_dir(const char* value, size_t size);
  std::string* mutable_data_dir();
  std::string* release_data_dir();
  void set_allocated_data_dir(std::string* data_dir);

  // optional string class_loader_name = 14;
  bool has_class_loader_name() const;
  void clear_class_loader_name();
  const std::string& class_loader_name() const;
  void set_class_loader_name(const std::string& value);
  void set_class_loader_name(std::string&& value);
  void set_class_loader_name(const char* value);
  void set_class_loader_name(const char* value, size_t size);
  std::string* mutable_class_loader_name();
  std::string* release_class_loader_name();
  void set_allocated_class_loader_name(std::string* class_loader_name);

  // optional .android.content.pm.PackageItemInfoProto package = 1;
  bool has_package() const;
  void clear_package();
  const ::android::content::pm::PackageItemInfoProto& package() const;
  ::android::content::pm::PackageItemInfoProto* release_package();
  ::android::content::pm::PackageItemInfoProto* mutable_package();
  void set_allocated_package(::android::content::pm::PackageItemInfoProto* package);

  // optional .android.content.pm.ApplicationInfoProto.Version version = 16;
  bool has_version() const;
  void clear_version();
  const ::android::content::pm::ApplicationInfoProto_Version& version() const;
  ::android::content::pm::ApplicationInfoProto_Version* release_version();
  ::android::content::pm::ApplicationInfoProto_Version* mutable_version();
  void set_allocated_version(::android::content::pm::ApplicationInfoProto_Version* version);

  // optional .android.content.pm.ApplicationInfoProto.Detail detail = 17;
  bool has_detail() const;
  void clear_detail();
  const ::android::content::pm::ApplicationInfoProto_Detail& detail() const;
  ::android::content::pm::ApplicationInfoProto_Detail* release_detail();
  ::android::content::pm::ApplicationInfoProto_Detail* mutable_detail();
  void set_allocated_detail(::android::content::pm::ApplicationInfoProto_Detail* detail);

  // optional int32 uid = 4;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 flags = 5;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 private_flags = 6;
  bool has_private_flags() const;
  void clear_private_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 private_flags() const;
  void set_private_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 theme = 7;
  bool has_theme() const;
  void clear_theme();
  ::PROTOBUF_NAMESPACE_ID::int32 theme() const;
  void set_theme(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.content.pm.ApplicationInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> split_source_dirs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> split_public_source_dirs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_dirs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> split_class_loader_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> overlay_paths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_source_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_loader_name_;
  ::android::content::pm::PackageItemInfoProto* package_;
  ::android::content::pm::ApplicationInfoProto_Version* version_;
  ::android::content::pm::ApplicationInfoProto_Detail* detail_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 private_flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 theme_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackageItemInfoProto

// optional string name = 1;
inline bool PackageItemInfoProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageItemInfoProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageItemInfoProto::name() const {
  // @@protoc_insertion_point(field_get:android.content.pm.PackageItemInfoProto.name)
  return name_.GetNoArena();
}
inline void PackageItemInfoProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.PackageItemInfoProto.name)
}
inline void PackageItemInfoProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.PackageItemInfoProto.name)
}
inline void PackageItemInfoProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.PackageItemInfoProto.name)
}
inline void PackageItemInfoProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.PackageItemInfoProto.name)
}
inline std::string* PackageItemInfoProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.PackageItemInfoProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageItemInfoProto::release_name() {
  // @@protoc_insertion_point(field_release:android.content.pm.PackageItemInfoProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageItemInfoProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.PackageItemInfoProto.name)
}

// optional string package_name = 2;
inline bool PackageItemInfoProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageItemInfoProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PackageItemInfoProto::package_name() const {
  // @@protoc_insertion_point(field_get:android.content.pm.PackageItemInfoProto.package_name)
  return package_name_.GetNoArena();
}
inline void PackageItemInfoProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.PackageItemInfoProto.package_name)
}
inline void PackageItemInfoProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.PackageItemInfoProto.package_name)
}
inline void PackageItemInfoProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.PackageItemInfoProto.package_name)
}
inline void PackageItemInfoProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.PackageItemInfoProto.package_name)
}
inline std::string* PackageItemInfoProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.PackageItemInfoProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageItemInfoProto::release_package_name() {
  // @@protoc_insertion_point(field_release:android.content.pm.PackageItemInfoProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageItemInfoProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.PackageItemInfoProto.package_name)
}

// optional int32 label_res = 3;
inline bool PackageItemInfoProto::has_label_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackageItemInfoProto::clear_label_res() {
  label_res_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageItemInfoProto::label_res() const {
  // @@protoc_insertion_point(field_get:android.content.pm.PackageItemInfoProto.label_res)
  return label_res_;
}
inline void PackageItemInfoProto::set_label_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  label_res_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.PackageItemInfoProto.label_res)
}

// optional string non_localized_label = 4;
inline bool PackageItemInfoProto::has_non_localized_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageItemInfoProto::clear_non_localized_label() {
  non_localized_label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PackageItemInfoProto::non_localized_label() const {
  // @@protoc_insertion_point(field_get:android.content.pm.PackageItemInfoProto.non_localized_label)
  return non_localized_label_.GetNoArena();
}
inline void PackageItemInfoProto::set_non_localized_label(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  non_localized_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.PackageItemInfoProto.non_localized_label)
}
inline void PackageItemInfoProto::set_non_localized_label(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  non_localized_label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.PackageItemInfoProto.non_localized_label)
}
inline void PackageItemInfoProto::set_non_localized_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  non_localized_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.PackageItemInfoProto.non_localized_label)
}
inline void PackageItemInfoProto::set_non_localized_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  non_localized_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.PackageItemInfoProto.non_localized_label)
}
inline std::string* PackageItemInfoProto::mutable_non_localized_label() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.PackageItemInfoProto.non_localized_label)
  return non_localized_label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageItemInfoProto::release_non_localized_label() {
  // @@protoc_insertion_point(field_release:android.content.pm.PackageItemInfoProto.non_localized_label)
  if (!has_non_localized_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return non_localized_label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageItemInfoProto::set_allocated_non_localized_label(std::string* non_localized_label) {
  if (non_localized_label != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  non_localized_label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), non_localized_label);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.PackageItemInfoProto.non_localized_label)
}

// optional int32 icon = 5;
inline bool PackageItemInfoProto::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackageItemInfoProto::clear_icon() {
  icon_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageItemInfoProto::icon() const {
  // @@protoc_insertion_point(field_get:android.content.pm.PackageItemInfoProto.icon)
  return icon_;
}
inline void PackageItemInfoProto::set_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  icon_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.PackageItemInfoProto.icon)
}

// optional int32 banner = 6;
inline bool PackageItemInfoProto::has_banner() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PackageItemInfoProto::clear_banner() {
  banner_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageItemInfoProto::banner() const {
  // @@protoc_insertion_point(field_get:android.content.pm.PackageItemInfoProto.banner)
  return banner_;
}
inline void PackageItemInfoProto::set_banner(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  banner_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.PackageItemInfoProto.banner)
}

// -------------------------------------------------------------------

// ApplicationInfoProto_Version

// optional bool enabled = 1;
inline bool ApplicationInfoProto_Version::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplicationInfoProto_Version::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ApplicationInfoProto_Version::enabled() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Version.enabled)
  return enabled_;
}
inline void ApplicationInfoProto_Version::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Version.enabled)
}

// optional int32 min_sdk_version = 2;
inline bool ApplicationInfoProto_Version::has_min_sdk_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplicationInfoProto_Version::clear_min_sdk_version() {
  min_sdk_version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Version::min_sdk_version() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Version.min_sdk_version)
  return min_sdk_version_;
}
inline void ApplicationInfoProto_Version::set_min_sdk_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_sdk_version_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Version.min_sdk_version)
}

// optional int32 target_sdk_version = 3;
inline bool ApplicationInfoProto_Version::has_target_sdk_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplicationInfoProto_Version::clear_target_sdk_version() {
  target_sdk_version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Version::target_sdk_version() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Version.target_sdk_version)
  return target_sdk_version_;
}
inline void ApplicationInfoProto_Version::set_target_sdk_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  target_sdk_version_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Version.target_sdk_version)
}

// optional int32 version_code = 4;
inline bool ApplicationInfoProto_Version::has_version_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplicationInfoProto_Version::clear_version_code() {
  version_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Version::version_code() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Version.version_code)
  return version_code_;
}
inline void ApplicationInfoProto_Version::set_version_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_code_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Version.version_code)
}

// optional int32 target_sandbox_version = 5;
inline bool ApplicationInfoProto_Version::has_target_sandbox_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApplicationInfoProto_Version::clear_target_sandbox_version() {
  target_sandbox_version_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Version::target_sandbox_version() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Version.target_sandbox_version)
  return target_sandbox_version_;
}
inline void ApplicationInfoProto_Version::set_target_sandbox_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  target_sandbox_version_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Version.target_sandbox_version)
}

// -------------------------------------------------------------------

// ApplicationInfoProto_Detail

// optional string class_name = 1;
inline bool ApplicationInfoProto_Detail::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ApplicationInfoProto_Detail::class_name() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.class_name)
  return class_name_.GetNoArena();
}
inline void ApplicationInfoProto_Detail::set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.class_name)
}
inline void ApplicationInfoProto_Detail::set_class_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.Detail.class_name)
}
inline void ApplicationInfoProto_Detail::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.class_name)
}
inline void ApplicationInfoProto_Detail::set_class_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.class_name)
}
inline std::string* ApplicationInfoProto_Detail::mutable_class_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.class_name)
  return class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto_Detail::release_class_name() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.Detail.class_name)
  if (!has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return class_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto_Detail::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  class_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.Detail.class_name)
}

// optional string task_affinity = 2;
inline bool ApplicationInfoProto_Detail::has_task_affinity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_task_affinity() {
  task_affinity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ApplicationInfoProto_Detail::task_affinity() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.task_affinity)
  return task_affinity_.GetNoArena();
}
inline void ApplicationInfoProto_Detail::set_task_affinity(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  task_affinity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.task_affinity)
}
inline void ApplicationInfoProto_Detail::set_task_affinity(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  task_affinity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.Detail.task_affinity)
}
inline void ApplicationInfoProto_Detail::set_task_affinity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  task_affinity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.task_affinity)
}
inline void ApplicationInfoProto_Detail::set_task_affinity(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  task_affinity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.task_affinity)
}
inline std::string* ApplicationInfoProto_Detail::mutable_task_affinity() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.task_affinity)
  return task_affinity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto_Detail::release_task_affinity() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.Detail.task_affinity)
  if (!has_task_affinity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return task_affinity_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto_Detail::set_allocated_task_affinity(std::string* task_affinity) {
  if (task_affinity != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  task_affinity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_affinity);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.Detail.task_affinity)
}

// optional int32 requires_smallest_width_dp = 3;
inline bool ApplicationInfoProto_Detail::has_requires_smallest_width_dp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_requires_smallest_width_dp() {
  requires_smallest_width_dp_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::requires_smallest_width_dp() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.requires_smallest_width_dp)
  return requires_smallest_width_dp_;
}
inline void ApplicationInfoProto_Detail::set_requires_smallest_width_dp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  requires_smallest_width_dp_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.requires_smallest_width_dp)
}

// optional int32 compatible_width_limit_dp = 4;
inline bool ApplicationInfoProto_Detail::has_compatible_width_limit_dp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_compatible_width_limit_dp() {
  compatible_width_limit_dp_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::compatible_width_limit_dp() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.compatible_width_limit_dp)
  return compatible_width_limit_dp_;
}
inline void ApplicationInfoProto_Detail::set_compatible_width_limit_dp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  compatible_width_limit_dp_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.compatible_width_limit_dp)
}

// optional int32 largest_width_limit_dp = 5;
inline bool ApplicationInfoProto_Detail::has_largest_width_limit_dp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_largest_width_limit_dp() {
  largest_width_limit_dp_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::largest_width_limit_dp() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.largest_width_limit_dp)
  return largest_width_limit_dp_;
}
inline void ApplicationInfoProto_Detail::set_largest_width_limit_dp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  largest_width_limit_dp_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.largest_width_limit_dp)
}

// optional string seinfo = 6;
inline bool ApplicationInfoProto_Detail::has_seinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_seinfo() {
  seinfo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ApplicationInfoProto_Detail::seinfo() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.seinfo)
  return seinfo_.GetNoArena();
}
inline void ApplicationInfoProto_Detail::set_seinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  seinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.seinfo)
}
inline void ApplicationInfoProto_Detail::set_seinfo(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  seinfo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.Detail.seinfo)
}
inline void ApplicationInfoProto_Detail::set_seinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  seinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.seinfo)
}
inline void ApplicationInfoProto_Detail::set_seinfo(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  seinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.seinfo)
}
inline std::string* ApplicationInfoProto_Detail::mutable_seinfo() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.seinfo)
  return seinfo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto_Detail::release_seinfo() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.Detail.seinfo)
  if (!has_seinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return seinfo_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto_Detail::set_allocated_seinfo(std::string* seinfo) {
  if (seinfo != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  seinfo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seinfo);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.Detail.seinfo)
}

// optional string seinfo_user = 7;
inline bool ApplicationInfoProto_Detail::has_seinfo_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_seinfo_user() {
  seinfo_user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ApplicationInfoProto_Detail::seinfo_user() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.seinfo_user)
  return seinfo_user_.GetNoArena();
}
inline void ApplicationInfoProto_Detail::set_seinfo_user(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  seinfo_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.seinfo_user)
}
inline void ApplicationInfoProto_Detail::set_seinfo_user(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  seinfo_user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.Detail.seinfo_user)
}
inline void ApplicationInfoProto_Detail::set_seinfo_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  seinfo_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.seinfo_user)
}
inline void ApplicationInfoProto_Detail::set_seinfo_user(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  seinfo_user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.seinfo_user)
}
inline std::string* ApplicationInfoProto_Detail::mutable_seinfo_user() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.seinfo_user)
  return seinfo_user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto_Detail::release_seinfo_user() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.Detail.seinfo_user)
  if (!has_seinfo_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return seinfo_user_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto_Detail::set_allocated_seinfo_user(std::string* seinfo_user) {
  if (seinfo_user != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  seinfo_user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seinfo_user);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.Detail.seinfo_user)
}

// optional string device_protected_data_dir = 8;
inline bool ApplicationInfoProto_Detail::has_device_protected_data_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_device_protected_data_dir() {
  device_protected_data_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ApplicationInfoProto_Detail::device_protected_data_dir() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.device_protected_data_dir)
  return device_protected_data_dir_.GetNoArena();
}
inline void ApplicationInfoProto_Detail::set_device_protected_data_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  device_protected_data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.device_protected_data_dir)
}
inline void ApplicationInfoProto_Detail::set_device_protected_data_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  device_protected_data_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.Detail.device_protected_data_dir)
}
inline void ApplicationInfoProto_Detail::set_device_protected_data_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  device_protected_data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.device_protected_data_dir)
}
inline void ApplicationInfoProto_Detail::set_device_protected_data_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  device_protected_data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.device_protected_data_dir)
}
inline std::string* ApplicationInfoProto_Detail::mutable_device_protected_data_dir() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.device_protected_data_dir)
  return device_protected_data_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto_Detail::release_device_protected_data_dir() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.Detail.device_protected_data_dir)
  if (!has_device_protected_data_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return device_protected_data_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto_Detail::set_allocated_device_protected_data_dir(std::string* device_protected_data_dir) {
  if (device_protected_data_dir != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  device_protected_data_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_protected_data_dir);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.Detail.device_protected_data_dir)
}

// optional string credential_protected_data_dir = 9;
inline bool ApplicationInfoProto_Detail::has_credential_protected_data_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_credential_protected_data_dir() {
  credential_protected_data_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ApplicationInfoProto_Detail::credential_protected_data_dir() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.credential_protected_data_dir)
  return credential_protected_data_dir_.GetNoArena();
}
inline void ApplicationInfoProto_Detail::set_credential_protected_data_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  credential_protected_data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.credential_protected_data_dir)
}
inline void ApplicationInfoProto_Detail::set_credential_protected_data_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  credential_protected_data_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.Detail.credential_protected_data_dir)
}
inline void ApplicationInfoProto_Detail::set_credential_protected_data_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  credential_protected_data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.credential_protected_data_dir)
}
inline void ApplicationInfoProto_Detail::set_credential_protected_data_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  credential_protected_data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.credential_protected_data_dir)
}
inline std::string* ApplicationInfoProto_Detail::mutable_credential_protected_data_dir() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.credential_protected_data_dir)
  return credential_protected_data_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto_Detail::release_credential_protected_data_dir() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.Detail.credential_protected_data_dir)
  if (!has_credential_protected_data_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return credential_protected_data_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto_Detail::set_allocated_credential_protected_data_dir(std::string* credential_protected_data_dir) {
  if (credential_protected_data_dir != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  credential_protected_data_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credential_protected_data_dir);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.Detail.credential_protected_data_dir)
}

// repeated string shared_library_files = 10;
inline int ApplicationInfoProto_Detail::shared_library_files_size() const {
  return shared_library_files_.size();
}
inline void ApplicationInfoProto_Detail::clear_shared_library_files() {
  shared_library_files_.Clear();
}
inline const std::string& ApplicationInfoProto_Detail::shared_library_files(int index) const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
  return shared_library_files_.Get(index);
}
inline std::string* ApplicationInfoProto_Detail::mutable_shared_library_files(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
  return shared_library_files_.Mutable(index);
}
inline void ApplicationInfoProto_Detail::set_shared_library_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
  shared_library_files_.Mutable(index)->assign(value);
}
inline void ApplicationInfoProto_Detail::set_shared_library_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
  shared_library_files_.Mutable(index)->assign(std::move(value));
}
inline void ApplicationInfoProto_Detail::set_shared_library_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  shared_library_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
}
inline void ApplicationInfoProto_Detail::set_shared_library_files(int index, const char* value, size_t size) {
  shared_library_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
}
inline std::string* ApplicationInfoProto_Detail::add_shared_library_files() {
  // @@protoc_insertion_point(field_add_mutable:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
  return shared_library_files_.Add();
}
inline void ApplicationInfoProto_Detail::add_shared_library_files(const std::string& value) {
  shared_library_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
}
inline void ApplicationInfoProto_Detail::add_shared_library_files(std::string&& value) {
  shared_library_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
}
inline void ApplicationInfoProto_Detail::add_shared_library_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  shared_library_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
}
inline void ApplicationInfoProto_Detail::add_shared_library_files(const char* value, size_t size) {
  shared_library_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApplicationInfoProto_Detail::shared_library_files() const {
  // @@protoc_insertion_point(field_list:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
  return shared_library_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApplicationInfoProto_Detail::mutable_shared_library_files() {
  // @@protoc_insertion_point(field_mutable_list:android.content.pm.ApplicationInfoProto.Detail.shared_library_files)
  return &shared_library_files_;
}

// optional string manage_space_activity_name = 11;
inline bool ApplicationInfoProto_Detail::has_manage_space_activity_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_manage_space_activity_name() {
  manage_space_activity_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ApplicationInfoProto_Detail::manage_space_activity_name() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.manage_space_activity_name)
  return manage_space_activity_name_.GetNoArena();
}
inline void ApplicationInfoProto_Detail::set_manage_space_activity_name(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  manage_space_activity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.manage_space_activity_name)
}
inline void ApplicationInfoProto_Detail::set_manage_space_activity_name(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  manage_space_activity_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.Detail.manage_space_activity_name)
}
inline void ApplicationInfoProto_Detail::set_manage_space_activity_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  manage_space_activity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.manage_space_activity_name)
}
inline void ApplicationInfoProto_Detail::set_manage_space_activity_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  manage_space_activity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.manage_space_activity_name)
}
inline std::string* ApplicationInfoProto_Detail::mutable_manage_space_activity_name() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.manage_space_activity_name)
  return manage_space_activity_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto_Detail::release_manage_space_activity_name() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.Detail.manage_space_activity_name)
  if (!has_manage_space_activity_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return manage_space_activity_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto_Detail::set_allocated_manage_space_activity_name(std::string* manage_space_activity_name) {
  if (manage_space_activity_name != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  manage_space_activity_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manage_space_activity_name);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.Detail.manage_space_activity_name)
}

// optional int32 description_res = 12;
inline bool ApplicationInfoProto_Detail::has_description_res() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_description_res() {
  description_res_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::description_res() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.description_res)
  return description_res_;
}
inline void ApplicationInfoProto_Detail::set_description_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  description_res_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.description_res)
}

// optional int32 ui_options = 13;
inline bool ApplicationInfoProto_Detail::has_ui_options() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_ui_options() {
  ui_options_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::ui_options() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.ui_options)
  return ui_options_;
}
inline void ApplicationInfoProto_Detail::set_ui_options(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  ui_options_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.ui_options)
}

// optional bool supports_rtl = 14;
inline bool ApplicationInfoProto_Detail::has_supports_rtl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_supports_rtl() {
  supports_rtl_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ApplicationInfoProto_Detail::supports_rtl() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.supports_rtl)
  return supports_rtl_;
}
inline void ApplicationInfoProto_Detail::set_supports_rtl(bool value) {
  _has_bits_[0] |= 0x00002000u;
  supports_rtl_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.supports_rtl)
}

// optional string content = 15;
inline bool ApplicationInfoProto_Detail::has_content() const {
  return full_backup_content_case() == kContent;
}
inline void ApplicationInfoProto_Detail::set_has_content() {
  _oneof_case_[0] = kContent;
}
inline void ApplicationInfoProto_Detail::clear_content() {
  if (has_content()) {
    full_backup_content_.content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_full_backup_content();
  }
}
inline const std::string& ApplicationInfoProto_Detail::content() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.content)
  if (has_content()) {
    return full_backup_content_.content_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ApplicationInfoProto_Detail::set_content(const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.content)
  if (!has_content()) {
    clear_full_backup_content();
    set_has_content();
    full_backup_content_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  full_backup_content_.content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.content)
}
inline void ApplicationInfoProto_Detail::set_content(std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.content)
  if (!has_content()) {
    clear_full_backup_content();
    set_has_content();
    full_backup_content_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  full_backup_content_.content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.Detail.content)
}
inline void ApplicationInfoProto_Detail::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_content()) {
    clear_full_backup_content();
    set_has_content();
    full_backup_content_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  full_backup_content_.content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.Detail.content)
}
inline void ApplicationInfoProto_Detail::set_content(const char* value, size_t size) {
  if (!has_content()) {
    clear_full_backup_content();
    set_has_content();
    full_backup_content_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  full_backup_content_.content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.Detail.content)
}
inline std::string* ApplicationInfoProto_Detail::mutable_content() {
  if (!has_content()) {
    clear_full_backup_content();
    set_has_content();
    full_backup_content_.content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.Detail.content)
  return full_backup_content_.content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto_Detail::release_content() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.Detail.content)
  if (has_content()) {
    clear_has_full_backup_content();
    return full_backup_content_.content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ApplicationInfoProto_Detail::set_allocated_content(std::string* content) {
  if (has_full_backup_content()) {
    clear_full_backup_content();
  }
  if (content != nullptr) {
    set_has_content();
    full_backup_content_.content_.UnsafeSetDefault(content);
  }
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.Detail.content)
}

// optional bool is_full_backup = 16;
inline bool ApplicationInfoProto_Detail::has_is_full_backup() const {
  return full_backup_content_case() == kIsFullBackup;
}
inline void ApplicationInfoProto_Detail::set_has_is_full_backup() {
  _oneof_case_[0] = kIsFullBackup;
}
inline void ApplicationInfoProto_Detail::clear_is_full_backup() {
  if (has_is_full_backup()) {
    full_backup_content_.is_full_backup_ = false;
    clear_has_full_backup_content();
  }
}
inline bool ApplicationInfoProto_Detail::is_full_backup() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.is_full_backup)
  if (has_is_full_backup()) {
    return full_backup_content_.is_full_backup_;
  }
  return false;
}
inline void ApplicationInfoProto_Detail::set_is_full_backup(bool value) {
  if (!has_is_full_backup()) {
    clear_full_backup_content();
    set_has_is_full_backup();
  }
  full_backup_content_.is_full_backup_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.is_full_backup)
}

// optional int32 network_security_config_res = 17;
inline bool ApplicationInfoProto_Detail::has_network_security_config_res() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_network_security_config_res() {
  network_security_config_res_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::network_security_config_res() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.network_security_config_res)
  return network_security_config_res_;
}
inline void ApplicationInfoProto_Detail::set_network_security_config_res(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  network_security_config_res_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.network_security_config_res)
}

// optional int32 category = 18;
inline bool ApplicationInfoProto_Detail::has_category() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_category() {
  category_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::category() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.category)
  return category_;
}
inline void ApplicationInfoProto_Detail::set_category(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  category_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.category)
}

// optional int32 enable_gwp_asan = 19;
inline bool ApplicationInfoProto_Detail::has_enable_gwp_asan() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_enable_gwp_asan() {
  enable_gwp_asan_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::enable_gwp_asan() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.enable_gwp_asan)
  return enable_gwp_asan_;
}
inline void ApplicationInfoProto_Detail::set_enable_gwp_asan(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  enable_gwp_asan_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.enable_gwp_asan)
}

// optional int32 enable_memtag = 20;
inline bool ApplicationInfoProto_Detail::has_enable_memtag() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_enable_memtag() {
  enable_memtag_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto_Detail::enable_memtag() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.enable_memtag)
  return enable_memtag_;
}
inline void ApplicationInfoProto_Detail::set_enable_memtag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  enable_memtag_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.enable_memtag)
}

// optional bool native_heap_zero_init = 21;
inline bool ApplicationInfoProto_Detail::has_native_heap_zero_init() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ApplicationInfoProto_Detail::clear_native_heap_zero_init() {
  native_heap_zero_init_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ApplicationInfoProto_Detail::native_heap_zero_init() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.Detail.native_heap_zero_init)
  return native_heap_zero_init_;
}
inline void ApplicationInfoProto_Detail::set_native_heap_zero_init(bool value) {
  _has_bits_[0] |= 0x00004000u;
  native_heap_zero_init_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.Detail.native_heap_zero_init)
}

inline bool ApplicationInfoProto_Detail::has_full_backup_content() const {
  return full_backup_content_case() != FULL_BACKUP_CONTENT_NOT_SET;
}
inline void ApplicationInfoProto_Detail::clear_has_full_backup_content() {
  _oneof_case_[0] = FULL_BACKUP_CONTENT_NOT_SET;
}
inline ApplicationInfoProto_Detail::FullBackupContentCase ApplicationInfoProto_Detail::full_backup_content_case() const {
  return ApplicationInfoProto_Detail::FullBackupContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ApplicationInfoProto

// optional .android.content.pm.PackageItemInfoProto package = 1;
inline bool ApplicationInfoProto::has_package() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ApplicationInfoProto::clear_package() {
  if (package_ != nullptr) package_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::android::content::pm::PackageItemInfoProto& ApplicationInfoProto::package() const {
  const ::android::content::pm::PackageItemInfoProto* p = package_;
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.package)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::pm::PackageItemInfoProto*>(
      &::android::content::pm::_PackageItemInfoProto_default_instance_);
}
inline ::android::content::pm::PackageItemInfoProto* ApplicationInfoProto::release_package() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.package)
  _has_bits_[0] &= ~0x00000040u;
  ::android::content::pm::PackageItemInfoProto* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::android::content::pm::PackageItemInfoProto* ApplicationInfoProto::mutable_package() {
  _has_bits_[0] |= 0x00000040u;
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::pm::PackageItemInfoProto>(GetArenaNoVirtual());
    package_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.package)
  return package_;
}
inline void ApplicationInfoProto::set_allocated_package(::android::content::pm::PackageItemInfoProto* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.package)
}

// optional string permission = 2;
inline bool ApplicationInfoProto::has_permission() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplicationInfoProto::clear_permission() {
  permission_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ApplicationInfoProto::permission() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.permission)
  return permission_.GetNoArena();
}
inline void ApplicationInfoProto::set_permission(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.permission)
}
inline void ApplicationInfoProto::set_permission(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  permission_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.permission)
}
inline void ApplicationInfoProto::set_permission(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.permission)
}
inline void ApplicationInfoProto::set_permission(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.permission)
}
inline std::string* ApplicationInfoProto::mutable_permission() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.permission)
  return permission_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto::release_permission() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.permission)
  if (!has_permission()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return permission_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto::set_allocated_permission(std::string* permission) {
  if (permission != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  permission_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permission);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.permission)
}

// optional string process_name = 3;
inline bool ApplicationInfoProto::has_process_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplicationInfoProto::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ApplicationInfoProto::process_name() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.process_name)
  return process_name_.GetNoArena();
}
inline void ApplicationInfoProto::set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.process_name)
}
inline void ApplicationInfoProto::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.process_name)
}
inline void ApplicationInfoProto::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.process_name)
}
inline void ApplicationInfoProto::set_process_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.process_name)
}
inline std::string* ApplicationInfoProto::mutable_process_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.process_name)
  return process_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto::release_process_name() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.process_name)
  if (!has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return process_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.process_name)
}

// optional int32 uid = 4;
inline bool ApplicationInfoProto::has_uid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ApplicationInfoProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto::uid() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.uid)
  return uid_;
}
inline void ApplicationInfoProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.uid)
}

// optional int32 flags = 5;
inline bool ApplicationInfoProto::has_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ApplicationInfoProto::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto::flags() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.flags)
  return flags_;
}
inline void ApplicationInfoProto::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.flags)
}

// optional int32 private_flags = 6;
inline bool ApplicationInfoProto::has_private_flags() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ApplicationInfoProto::clear_private_flags() {
  private_flags_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto::private_flags() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.private_flags)
  return private_flags_;
}
inline void ApplicationInfoProto::set_private_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  private_flags_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.private_flags)
}

// optional int32 theme = 7;
inline bool ApplicationInfoProto::has_theme() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ApplicationInfoProto::clear_theme() {
  theme_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfoProto::theme() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.theme)
  return theme_;
}
inline void ApplicationInfoProto::set_theme(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  theme_ = value;
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.theme)
}

// optional string source_dir = 8;
inline bool ApplicationInfoProto::has_source_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplicationInfoProto::clear_source_dir() {
  source_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ApplicationInfoProto::source_dir() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.source_dir)
  return source_dir_.GetNoArena();
}
inline void ApplicationInfoProto::set_source_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.source_dir)
}
inline void ApplicationInfoProto::set_source_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  source_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.source_dir)
}
inline void ApplicationInfoProto::set_source_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  source_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.source_dir)
}
inline void ApplicationInfoProto::set_source_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  source_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.source_dir)
}
inline std::string* ApplicationInfoProto::mutable_source_dir() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.source_dir)
  return source_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto::release_source_dir() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.source_dir)
  if (!has_source_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return source_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto::set_allocated_source_dir(std::string* source_dir) {
  if (source_dir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_dir);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.source_dir)
}

// optional string public_source_dir = 9;
inline bool ApplicationInfoProto::has_public_source_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplicationInfoProto::clear_public_source_dir() {
  public_source_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ApplicationInfoProto::public_source_dir() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.public_source_dir)
  return public_source_dir_.GetNoArena();
}
inline void ApplicationInfoProto::set_public_source_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  public_source_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.public_source_dir)
}
inline void ApplicationInfoProto::set_public_source_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  public_source_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.public_source_dir)
}
inline void ApplicationInfoProto::set_public_source_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  public_source_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.public_source_dir)
}
inline void ApplicationInfoProto::set_public_source_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  public_source_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.public_source_dir)
}
inline std::string* ApplicationInfoProto::mutable_public_source_dir() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.public_source_dir)
  return public_source_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto::release_public_source_dir() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.public_source_dir)
  if (!has_public_source_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return public_source_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto::set_allocated_public_source_dir(std::string* public_source_dir) {
  if (public_source_dir != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  public_source_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_source_dir);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.public_source_dir)
}

// repeated string split_source_dirs = 10;
inline int ApplicationInfoProto::split_source_dirs_size() const {
  return split_source_dirs_.size();
}
inline void ApplicationInfoProto::clear_split_source_dirs() {
  split_source_dirs_.Clear();
}
inline const std::string& ApplicationInfoProto::split_source_dirs(int index) const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.split_source_dirs)
  return split_source_dirs_.Get(index);
}
inline std::string* ApplicationInfoProto::mutable_split_source_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.split_source_dirs)
  return split_source_dirs_.Mutable(index);
}
inline void ApplicationInfoProto::set_split_source_dirs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.split_source_dirs)
  split_source_dirs_.Mutable(index)->assign(value);
}
inline void ApplicationInfoProto::set_split_source_dirs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.split_source_dirs)
  split_source_dirs_.Mutable(index)->assign(std::move(value));
}
inline void ApplicationInfoProto::set_split_source_dirs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_source_dirs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.split_source_dirs)
}
inline void ApplicationInfoProto::set_split_source_dirs(int index, const char* value, size_t size) {
  split_source_dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.split_source_dirs)
}
inline std::string* ApplicationInfoProto::add_split_source_dirs() {
  // @@protoc_insertion_point(field_add_mutable:android.content.pm.ApplicationInfoProto.split_source_dirs)
  return split_source_dirs_.Add();
}
inline void ApplicationInfoProto::add_split_source_dirs(const std::string& value) {
  split_source_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.split_source_dirs)
}
inline void ApplicationInfoProto::add_split_source_dirs(std::string&& value) {
  split_source_dirs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.split_source_dirs)
}
inline void ApplicationInfoProto::add_split_source_dirs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_source_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.pm.ApplicationInfoProto.split_source_dirs)
}
inline void ApplicationInfoProto::add_split_source_dirs(const char* value, size_t size) {
  split_source_dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.pm.ApplicationInfoProto.split_source_dirs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApplicationInfoProto::split_source_dirs() const {
  // @@protoc_insertion_point(field_list:android.content.pm.ApplicationInfoProto.split_source_dirs)
  return split_source_dirs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApplicationInfoProto::mutable_split_source_dirs() {
  // @@protoc_insertion_point(field_mutable_list:android.content.pm.ApplicationInfoProto.split_source_dirs)
  return &split_source_dirs_;
}

// repeated string split_public_source_dirs = 11;
inline int ApplicationInfoProto::split_public_source_dirs_size() const {
  return split_public_source_dirs_.size();
}
inline void ApplicationInfoProto::clear_split_public_source_dirs() {
  split_public_source_dirs_.Clear();
}
inline const std::string& ApplicationInfoProto::split_public_source_dirs(int index) const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
  return split_public_source_dirs_.Get(index);
}
inline std::string* ApplicationInfoProto::mutable_split_public_source_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
  return split_public_source_dirs_.Mutable(index);
}
inline void ApplicationInfoProto::set_split_public_source_dirs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
  split_public_source_dirs_.Mutable(index)->assign(value);
}
inline void ApplicationInfoProto::set_split_public_source_dirs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
  split_public_source_dirs_.Mutable(index)->assign(std::move(value));
}
inline void ApplicationInfoProto::set_split_public_source_dirs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_public_source_dirs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
}
inline void ApplicationInfoProto::set_split_public_source_dirs(int index, const char* value, size_t size) {
  split_public_source_dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
}
inline std::string* ApplicationInfoProto::add_split_public_source_dirs() {
  // @@protoc_insertion_point(field_add_mutable:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
  return split_public_source_dirs_.Add();
}
inline void ApplicationInfoProto::add_split_public_source_dirs(const std::string& value) {
  split_public_source_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
}
inline void ApplicationInfoProto::add_split_public_source_dirs(std::string&& value) {
  split_public_source_dirs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
}
inline void ApplicationInfoProto::add_split_public_source_dirs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_public_source_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
}
inline void ApplicationInfoProto::add_split_public_source_dirs(const char* value, size_t size) {
  split_public_source_dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApplicationInfoProto::split_public_source_dirs() const {
  // @@protoc_insertion_point(field_list:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
  return split_public_source_dirs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApplicationInfoProto::mutable_split_public_source_dirs() {
  // @@protoc_insertion_point(field_mutable_list:android.content.pm.ApplicationInfoProto.split_public_source_dirs)
  return &split_public_source_dirs_;
}

// repeated string resource_dirs = 12;
inline int ApplicationInfoProto::resource_dirs_size() const {
  return resource_dirs_.size();
}
inline void ApplicationInfoProto::clear_resource_dirs() {
  resource_dirs_.Clear();
}
inline const std::string& ApplicationInfoProto::resource_dirs(int index) const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.resource_dirs)
  return resource_dirs_.Get(index);
}
inline std::string* ApplicationInfoProto::mutable_resource_dirs(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.resource_dirs)
  return resource_dirs_.Mutable(index);
}
inline void ApplicationInfoProto::set_resource_dirs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.resource_dirs)
  resource_dirs_.Mutable(index)->assign(value);
}
inline void ApplicationInfoProto::set_resource_dirs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.resource_dirs)
  resource_dirs_.Mutable(index)->assign(std::move(value));
}
inline void ApplicationInfoProto::set_resource_dirs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resource_dirs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.resource_dirs)
}
inline void ApplicationInfoProto::set_resource_dirs(int index, const char* value, size_t size) {
  resource_dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.resource_dirs)
}
inline std::string* ApplicationInfoProto::add_resource_dirs() {
  // @@protoc_insertion_point(field_add_mutable:android.content.pm.ApplicationInfoProto.resource_dirs)
  return resource_dirs_.Add();
}
inline void ApplicationInfoProto::add_resource_dirs(const std::string& value) {
  resource_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.resource_dirs)
}
inline void ApplicationInfoProto::add_resource_dirs(std::string&& value) {
  resource_dirs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.resource_dirs)
}
inline void ApplicationInfoProto::add_resource_dirs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resource_dirs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.pm.ApplicationInfoProto.resource_dirs)
}
inline void ApplicationInfoProto::add_resource_dirs(const char* value, size_t size) {
  resource_dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.pm.ApplicationInfoProto.resource_dirs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApplicationInfoProto::resource_dirs() const {
  // @@protoc_insertion_point(field_list:android.content.pm.ApplicationInfoProto.resource_dirs)
  return resource_dirs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApplicationInfoProto::mutable_resource_dirs() {
  // @@protoc_insertion_point(field_mutable_list:android.content.pm.ApplicationInfoProto.resource_dirs)
  return &resource_dirs_;
}

// optional string data_dir = 13;
inline bool ApplicationInfoProto::has_data_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApplicationInfoProto::clear_data_dir() {
  data_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ApplicationInfoProto::data_dir() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.data_dir)
  return data_dir_.GetNoArena();
}
inline void ApplicationInfoProto::set_data_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.data_dir)
}
inline void ApplicationInfoProto::set_data_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  data_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.data_dir)
}
inline void ApplicationInfoProto::set_data_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.data_dir)
}
inline void ApplicationInfoProto::set_data_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.data_dir)
}
inline std::string* ApplicationInfoProto::mutable_data_dir() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.data_dir)
  return data_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto::release_data_dir() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.data_dir)
  if (!has_data_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return data_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto::set_allocated_data_dir(std::string* data_dir) {
  if (data_dir != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  data_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_dir);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.data_dir)
}

// optional string class_loader_name = 14;
inline bool ApplicationInfoProto::has_class_loader_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ApplicationInfoProto::clear_class_loader_name() {
  class_loader_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ApplicationInfoProto::class_loader_name() const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.class_loader_name)
  return class_loader_name_.GetNoArena();
}
inline void ApplicationInfoProto::set_class_loader_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  class_loader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.class_loader_name)
}
inline void ApplicationInfoProto::set_class_loader_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  class_loader_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.pm.ApplicationInfoProto.class_loader_name)
}
inline void ApplicationInfoProto::set_class_loader_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  class_loader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.class_loader_name)
}
inline void ApplicationInfoProto::set_class_loader_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  class_loader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.class_loader_name)
}
inline std::string* ApplicationInfoProto::mutable_class_loader_name() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.class_loader_name)
  return class_loader_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfoProto::release_class_loader_name() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.class_loader_name)
  if (!has_class_loader_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return class_loader_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfoProto::set_allocated_class_loader_name(std::string* class_loader_name) {
  if (class_loader_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  class_loader_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_loader_name);
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.class_loader_name)
}

// repeated string split_class_loader_names = 15;
inline int ApplicationInfoProto::split_class_loader_names_size() const {
  return split_class_loader_names_.size();
}
inline void ApplicationInfoProto::clear_split_class_loader_names() {
  split_class_loader_names_.Clear();
}
inline const std::string& ApplicationInfoProto::split_class_loader_names(int index) const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.split_class_loader_names)
  return split_class_loader_names_.Get(index);
}
inline std::string* ApplicationInfoProto::mutable_split_class_loader_names(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.split_class_loader_names)
  return split_class_loader_names_.Mutable(index);
}
inline void ApplicationInfoProto::set_split_class_loader_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.split_class_loader_names)
  split_class_loader_names_.Mutable(index)->assign(value);
}
inline void ApplicationInfoProto::set_split_class_loader_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.split_class_loader_names)
  split_class_loader_names_.Mutable(index)->assign(std::move(value));
}
inline void ApplicationInfoProto::set_split_class_loader_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_class_loader_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.split_class_loader_names)
}
inline void ApplicationInfoProto::set_split_class_loader_names(int index, const char* value, size_t size) {
  split_class_loader_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.split_class_loader_names)
}
inline std::string* ApplicationInfoProto::add_split_class_loader_names() {
  // @@protoc_insertion_point(field_add_mutable:android.content.pm.ApplicationInfoProto.split_class_loader_names)
  return split_class_loader_names_.Add();
}
inline void ApplicationInfoProto::add_split_class_loader_names(const std::string& value) {
  split_class_loader_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.split_class_loader_names)
}
inline void ApplicationInfoProto::add_split_class_loader_names(std::string&& value) {
  split_class_loader_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.split_class_loader_names)
}
inline void ApplicationInfoProto::add_split_class_loader_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  split_class_loader_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.pm.ApplicationInfoProto.split_class_loader_names)
}
inline void ApplicationInfoProto::add_split_class_loader_names(const char* value, size_t size) {
  split_class_loader_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.pm.ApplicationInfoProto.split_class_loader_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApplicationInfoProto::split_class_loader_names() const {
  // @@protoc_insertion_point(field_list:android.content.pm.ApplicationInfoProto.split_class_loader_names)
  return split_class_loader_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApplicationInfoProto::mutable_split_class_loader_names() {
  // @@protoc_insertion_point(field_mutable_list:android.content.pm.ApplicationInfoProto.split_class_loader_names)
  return &split_class_loader_names_;
}

// optional .android.content.pm.ApplicationInfoProto.Version version = 16;
inline bool ApplicationInfoProto::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ApplicationInfoProto::clear_version() {
  if (version_ != nullptr) version_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::android::content::pm::ApplicationInfoProto_Version& ApplicationInfoProto::version() const {
  const ::android::content::pm::ApplicationInfoProto_Version* p = version_;
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.version)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::pm::ApplicationInfoProto_Version*>(
      &::android::content::pm::_ApplicationInfoProto_Version_default_instance_);
}
inline ::android::content::pm::ApplicationInfoProto_Version* ApplicationInfoProto::release_version() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.version)
  _has_bits_[0] &= ~0x00000080u;
  ::android::content::pm::ApplicationInfoProto_Version* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::android::content::pm::ApplicationInfoProto_Version* ApplicationInfoProto::mutable_version() {
  _has_bits_[0] |= 0x00000080u;
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::pm::ApplicationInfoProto_Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.version)
  return version_;
}
inline void ApplicationInfoProto::set_allocated_version(::android::content::pm::ApplicationInfoProto_Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.version)
}

// optional .android.content.pm.ApplicationInfoProto.Detail detail = 17;
inline bool ApplicationInfoProto::has_detail() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ApplicationInfoProto::clear_detail() {
  if (detail_ != nullptr) detail_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::android::content::pm::ApplicationInfoProto_Detail& ApplicationInfoProto::detail() const {
  const ::android::content::pm::ApplicationInfoProto_Detail* p = detail_;
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.detail)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::pm::ApplicationInfoProto_Detail*>(
      &::android::content::pm::_ApplicationInfoProto_Detail_default_instance_);
}
inline ::android::content::pm::ApplicationInfoProto_Detail* ApplicationInfoProto::release_detail() {
  // @@protoc_insertion_point(field_release:android.content.pm.ApplicationInfoProto.detail)
  _has_bits_[0] &= ~0x00000100u;
  ::android::content::pm::ApplicationInfoProto_Detail* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::android::content::pm::ApplicationInfoProto_Detail* ApplicationInfoProto::mutable_detail() {
  _has_bits_[0] |= 0x00000100u;
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::pm::ApplicationInfoProto_Detail>(GetArenaNoVirtual());
    detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.detail)
  return detail_;
}
inline void ApplicationInfoProto::set_allocated_detail(::android::content::pm::ApplicationInfoProto_Detail* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:android.content.pm.ApplicationInfoProto.detail)
}

// repeated string overlay_paths = 18;
inline int ApplicationInfoProto::overlay_paths_size() const {
  return overlay_paths_.size();
}
inline void ApplicationInfoProto::clear_overlay_paths() {
  overlay_paths_.Clear();
}
inline const std::string& ApplicationInfoProto::overlay_paths(int index) const {
  // @@protoc_insertion_point(field_get:android.content.pm.ApplicationInfoProto.overlay_paths)
  return overlay_paths_.Get(index);
}
inline std::string* ApplicationInfoProto::mutable_overlay_paths(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.pm.ApplicationInfoProto.overlay_paths)
  return overlay_paths_.Mutable(index);
}
inline void ApplicationInfoProto::set_overlay_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.overlay_paths)
  overlay_paths_.Mutable(index)->assign(value);
}
inline void ApplicationInfoProto::set_overlay_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.pm.ApplicationInfoProto.overlay_paths)
  overlay_paths_.Mutable(index)->assign(std::move(value));
}
inline void ApplicationInfoProto::set_overlay_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  overlay_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.pm.ApplicationInfoProto.overlay_paths)
}
inline void ApplicationInfoProto::set_overlay_paths(int index, const char* value, size_t size) {
  overlay_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.pm.ApplicationInfoProto.overlay_paths)
}
inline std::string* ApplicationInfoProto::add_overlay_paths() {
  // @@protoc_insertion_point(field_add_mutable:android.content.pm.ApplicationInfoProto.overlay_paths)
  return overlay_paths_.Add();
}
inline void ApplicationInfoProto::add_overlay_paths(const std::string& value) {
  overlay_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.overlay_paths)
}
inline void ApplicationInfoProto::add_overlay_paths(std::string&& value) {
  overlay_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.pm.ApplicationInfoProto.overlay_paths)
}
inline void ApplicationInfoProto::add_overlay_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  overlay_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.pm.ApplicationInfoProto.overlay_paths)
}
inline void ApplicationInfoProto::add_overlay_paths(const char* value, size_t size) {
  overlay_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.pm.ApplicationInfoProto.overlay_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApplicationInfoProto::overlay_paths() const {
  // @@protoc_insertion_point(field_list:android.content.pm.ApplicationInfoProto.overlay_paths)
  return overlay_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApplicationInfoProto::mutable_overlay_paths() {
  // @@protoc_insertion_point(field_mutable_list:android.content.pm.ApplicationInfoProto.overlay_paths)
  return &overlay_paths_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pm
}  // namespace content
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fpackage_5fitem_5finfo_2eproto
