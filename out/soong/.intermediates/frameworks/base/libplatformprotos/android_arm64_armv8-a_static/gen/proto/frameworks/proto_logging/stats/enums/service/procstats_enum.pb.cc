// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/service/procstats_enum.proto

#include "frameworks/proto_logging/stats/enums/service/procstats_enum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace service {
namespace procstats {
}  // namespace procstats
}  // namespace service
}  // namespace android
namespace android {
namespace service {
namespace procstats {
bool ScreenState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ScreenState_strings[3] = {};

static const char ScreenState_names[] =
  "SCREEN_STATE_OFF"
  "SCREEN_STATE_ON"
  "SCREEN_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ScreenState_entries[] = {
  { {ScreenState_names + 0, 16}, 1 },
  { {ScreenState_names + 16, 15}, 2 },
  { {ScreenState_names + 31, 20}, 0 },
};

static const int ScreenState_entries_by_number[] = {
  2, // 0 -> SCREEN_STATE_UNKNOWN
  0, // 1 -> SCREEN_STATE_OFF
  1, // 2 -> SCREEN_STATE_ON
};

const std::string& ScreenState_Name(
    ScreenState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ScreenState_entries,
          ScreenState_entries_by_number,
          3, ScreenState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ScreenState_entries,
      ScreenState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ScreenState_strings[idx].get();
}
bool ScreenState_Parse(
    const std::string& name, ScreenState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ScreenState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ScreenState>(int_value);
  }
  return success;
}
bool MemoryState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MemoryState_strings[5] = {};

static const char MemoryState_names[] =
  "MEMORY_STATE_CRITICAL"
  "MEMORY_STATE_LOW"
  "MEMORY_STATE_MODERATE"
  "MEMORY_STATE_NORMAL"
  "MEMORY_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MemoryState_entries[] = {
  { {MemoryState_names + 0, 21}, 4 },
  { {MemoryState_names + 21, 16}, 3 },
  { {MemoryState_names + 37, 21}, 2 },
  { {MemoryState_names + 58, 19}, 1 },
  { {MemoryState_names + 77, 20}, 0 },
};

static const int MemoryState_entries_by_number[] = {
  4, // 0 -> MEMORY_STATE_UNKNOWN
  3, // 1 -> MEMORY_STATE_NORMAL
  2, // 2 -> MEMORY_STATE_MODERATE
  1, // 3 -> MEMORY_STATE_LOW
  0, // 4 -> MEMORY_STATE_CRITICAL
};

const std::string& MemoryState_Name(
    MemoryState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MemoryState_entries,
          MemoryState_entries_by_number,
          5, MemoryState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MemoryState_entries,
      MemoryState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MemoryState_strings[idx].get();
}
bool MemoryState_Parse(
    const std::string& name, MemoryState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MemoryState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<MemoryState>(int_value);
  }
  return success;
}
bool ProcessState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProcessState_strings[17] = {};

static const char ProcessState_names[] =
  "PROCESS_STATE_BACKUP"
  "PROCESS_STATE_BOUND_TOP_OR_FGS"
  "PROCESS_STATE_CACHED_ACTIVITY"
  "PROCESS_STATE_CACHED_ACTIVITY_CLIENT"
  "PROCESS_STATE_CACHED_EMPTY"
  "PROCESS_STATE_FGS"
  "PROCESS_STATE_HEAVY_WEIGHT"
  "PROCESS_STATE_HOME"
  "PROCESS_STATE_IMPORTANT_BACKGROUND"
  "PROCESS_STATE_IMPORTANT_FOREGROUND"
  "PROCESS_STATE_LAST_ACTIVITY"
  "PROCESS_STATE_PERSISTENT"
  "PROCESS_STATE_RECEIVER"
  "PROCESS_STATE_SERVICE"
  "PROCESS_STATE_SERVICE_RESTARTING"
  "PROCESS_STATE_TOP"
  "PROCESS_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProcessState_entries[] = {
  { {ProcessState_names + 0, 20}, 5 },
  { {ProcessState_names + 20, 30}, 15 },
  { {ProcessState_names + 50, 29}, 12 },
  { {ProcessState_names + 79, 36}, 13 },
  { {ProcessState_names + 115, 26}, 14 },
  { {ProcessState_names + 141, 17}, 16 },
  { {ProcessState_names + 158, 26}, 9 },
  { {ProcessState_names + 184, 18}, 10 },
  { {ProcessState_names + 202, 34}, 4 },
  { {ProcessState_names + 236, 34}, 3 },
  { {ProcessState_names + 270, 27}, 11 },
  { {ProcessState_names + 297, 24}, 1 },
  { {ProcessState_names + 321, 22}, 8 },
  { {ProcessState_names + 343, 21}, 6 },
  { {ProcessState_names + 364, 32}, 7 },
  { {ProcessState_names + 396, 17}, 2 },
  { {ProcessState_names + 413, 21}, 0 },
};

static const int ProcessState_entries_by_number[] = {
  16, // 0 -> PROCESS_STATE_UNKNOWN
  11, // 1 -> PROCESS_STATE_PERSISTENT
  15, // 2 -> PROCESS_STATE_TOP
  9, // 3 -> PROCESS_STATE_IMPORTANT_FOREGROUND
  8, // 4 -> PROCESS_STATE_IMPORTANT_BACKGROUND
  0, // 5 -> PROCESS_STATE_BACKUP
  13, // 6 -> PROCESS_STATE_SERVICE
  14, // 7 -> PROCESS_STATE_SERVICE_RESTARTING
  12, // 8 -> PROCESS_STATE_RECEIVER
  6, // 9 -> PROCESS_STATE_HEAVY_WEIGHT
  7, // 10 -> PROCESS_STATE_HOME
  10, // 11 -> PROCESS_STATE_LAST_ACTIVITY
  2, // 12 -> PROCESS_STATE_CACHED_ACTIVITY
  3, // 13 -> PROCESS_STATE_CACHED_ACTIVITY_CLIENT
  4, // 14 -> PROCESS_STATE_CACHED_EMPTY
  1, // 15 -> PROCESS_STATE_BOUND_TOP_OR_FGS
  5, // 16 -> PROCESS_STATE_FGS
};

const std::string& ProcessState_Name(
    ProcessState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProcessState_entries,
          ProcessState_entries_by_number,
          17, ProcessState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProcessState_entries,
      ProcessState_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProcessState_strings[idx].get();
}
bool ProcessState_Parse(
    const std::string& name, ProcessState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProcessState_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<ProcessState>(int_value);
  }
  return success;
}
bool ServiceOperationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServiceOperationState_strings[6] = {};

static const char ServiceOperationState_names[] =
  "SERVICE_OPERATION_STATE_BOUND"
  "SERVICE_OPERATION_STATE_EXECUTING"
  "SERVICE_OPERATION_STATE_FOREGROUND"
  "SERVICE_OPERATION_STATE_RUNNING"
  "SERVICE_OPERATION_STATE_STARTED"
  "SERVICE_OPERATION_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServiceOperationState_entries[] = {
  { {ServiceOperationState_names + 0, 29}, 4 },
  { {ServiceOperationState_names + 29, 33}, 5 },
  { {ServiceOperationState_names + 62, 34}, 3 },
  { {ServiceOperationState_names + 96, 31}, 1 },
  { {ServiceOperationState_names + 127, 31}, 2 },
  { {ServiceOperationState_names + 158, 31}, 0 },
};

static const int ServiceOperationState_entries_by_number[] = {
  5, // 0 -> SERVICE_OPERATION_STATE_UNKNOWN
  3, // 1 -> SERVICE_OPERATION_STATE_RUNNING
  4, // 2 -> SERVICE_OPERATION_STATE_STARTED
  2, // 3 -> SERVICE_OPERATION_STATE_FOREGROUND
  0, // 4 -> SERVICE_OPERATION_STATE_BOUND
  1, // 5 -> SERVICE_OPERATION_STATE_EXECUTING
};

const std::string& ServiceOperationState_Name(
    ServiceOperationState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServiceOperationState_entries,
          ServiceOperationState_entries_by_number,
          6, ServiceOperationState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServiceOperationState_entries,
      ServiceOperationState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServiceOperationState_strings[idx].get();
}
bool ServiceOperationState_Parse(
    const std::string& name, ServiceOperationState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServiceOperationState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ServiceOperationState>(int_value);
  }
  return success;
}
bool AggregatedProcessState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AggregatedProcessState_strings[9] = {};

static const char AggregatedProcessState_names[] =
  "AGGREGATED_PROCESS_STATE_BACKGROUND"
  "AGGREGATED_PROCESS_STATE_BOUND_TOP_OR_FGS"
  "AGGREGATED_PROCESS_STATE_CACHED"
  "AGGREGATED_PROCESS_STATE_FGS"
  "AGGREGATED_PROCESS_STATE_IMPORTANT_FOREGROUND"
  "AGGREGATED_PROCESS_STATE_PERSISTENT"
  "AGGREGATED_PROCESS_STATE_RECEIVER"
  "AGGREGATED_PROCESS_STATE_TOP"
  "AGGREGATED_PROCESS_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AggregatedProcessState_entries[] = {
  { {AggregatedProcessState_names + 0, 35}, 6 },
  { {AggregatedProcessState_names + 35, 41}, 3 },
  { {AggregatedProcessState_names + 76, 31}, 8 },
  { {AggregatedProcessState_names + 107, 28}, 4 },
  { {AggregatedProcessState_names + 135, 45}, 5 },
  { {AggregatedProcessState_names + 180, 35}, 1 },
  { {AggregatedProcessState_names + 215, 33}, 7 },
  { {AggregatedProcessState_names + 248, 28}, 2 },
  { {AggregatedProcessState_names + 276, 32}, 0 },
};

static const int AggregatedProcessState_entries_by_number[] = {
  8, // 0 -> AGGREGATED_PROCESS_STATE_UNKNOWN
  5, // 1 -> AGGREGATED_PROCESS_STATE_PERSISTENT
  7, // 2 -> AGGREGATED_PROCESS_STATE_TOP
  1, // 3 -> AGGREGATED_PROCESS_STATE_BOUND_TOP_OR_FGS
  3, // 4 -> AGGREGATED_PROCESS_STATE_FGS
  4, // 5 -> AGGREGATED_PROCESS_STATE_IMPORTANT_FOREGROUND
  0, // 6 -> AGGREGATED_PROCESS_STATE_BACKGROUND
  6, // 7 -> AGGREGATED_PROCESS_STATE_RECEIVER
  2, // 8 -> AGGREGATED_PROCESS_STATE_CACHED
};

const std::string& AggregatedProcessState_Name(
    AggregatedProcessState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AggregatedProcessState_entries,
          AggregatedProcessState_entries_by_number,
          9, AggregatedProcessState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AggregatedProcessState_entries,
      AggregatedProcessState_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AggregatedProcessState_strings[idx].get();
}
bool AggregatedProcessState_Parse(
    const std::string& name, AggregatedProcessState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AggregatedProcessState_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<AggregatedProcessState>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace procstats
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
