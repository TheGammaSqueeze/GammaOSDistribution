// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/privacy.proto

#include "frameworks/base/core/proto/android/privacy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivacyFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto;
namespace android {
class PrivacyFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrivacyFlags> _instance;
} _PrivacyFlags_default_instance_;
}  // namespace android
static void InitDefaultsscc_info_PrivacyFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::_PrivacyFlags_default_instance_;
    new (ptr) ::android::PrivacyFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::PrivacyFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrivacyFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PrivacyFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto}, {}};

namespace android {
bool Destination_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 200:
    case 255:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Destination_strings[4] = {};

static const char Destination_names[] =
  "DEST_AUTOMATIC"
  "DEST_EXPLICIT"
  "DEST_LOCAL"
  "DEST_UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Destination_entries[] = {
  { {Destination_names + 0, 14}, 200 },
  { {Destination_names + 14, 13}, 100 },
  { {Destination_names + 27, 10}, 0 },
  { {Destination_names + 37, 10}, 255 },
};

static const int Destination_entries_by_number[] = {
  2, // 0 -> DEST_LOCAL
  1, // 100 -> DEST_EXPLICIT
  0, // 200 -> DEST_AUTOMATIC
  3, // 255 -> DEST_UNSET
};

const std::string& Destination_Name(
    Destination value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Destination_entries,
          Destination_entries_by_number,
          4, Destination_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Destination_entries,
      Destination_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Destination_strings[idx].get();
}
bool Destination_Parse(
    const std::string& name, Destination* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Destination_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Destination>(int_value);
  }
  return success;
}

// ===================================================================

void PrivacyFlags::InitAsDefaultInstance() {
}
class PrivacyFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<PrivacyFlags>()._has_bits_);
  static void set_has_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PrivacyFlags::PrivacyFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.PrivacyFlags)
}
PrivacyFlags::PrivacyFlags(const PrivacyFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      patterns_(from.patterns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_ = from.dest_;
  // @@protoc_insertion_point(copy_constructor:android.PrivacyFlags)
}

void PrivacyFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrivacyFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto.base);
  dest_ = 255;
}

PrivacyFlags::~PrivacyFlags() {
  // @@protoc_insertion_point(destructor:android.PrivacyFlags)
  SharedDtor();
}

void PrivacyFlags::SharedDtor() {
}

void PrivacyFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrivacyFlags& PrivacyFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrivacyFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto.base);
  return *internal_default_instance();
}


void PrivacyFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:android.PrivacyFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patterns_.Clear();
  dest_ = 255;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrivacyFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.Destination dest = 1 [default = DEST_UNSET];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::Destination_IsValid(val))) {
            set_dest(static_cast<::android::Destination>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string patterns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_patterns(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrivacyFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.PrivacyFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.Destination dest = 1 [default = DEST_UNSET];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::Destination_IsValid(value)) {
            set_dest(static_cast< ::android::Destination >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string patterns = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_patterns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.PrivacyFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.PrivacyFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrivacyFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.PrivacyFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.Destination dest = 1 [default = DEST_UNSET];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->dest(), output);
  }

  // repeated string patterns = 2;
  for (int i = 0, n = this->patterns_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->patterns(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.PrivacyFlags)
}

size_t PrivacyFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.PrivacyFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string patterns = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->patterns_size());
  for (int i = 0, n = this->patterns_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->patterns(i));
  }

  // optional .android.Destination dest = 1 [default = DEST_UNSET];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dest());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivacyFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PrivacyFlags*>(
      &from));
}

void PrivacyFlags::MergeFrom(const PrivacyFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.PrivacyFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patterns_.MergeFrom(from.patterns_);
  if (from.has_dest()) {
    set_dest(from.dest());
  }
}

void PrivacyFlags::CopyFrom(const PrivacyFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.PrivacyFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivacyFlags::IsInitialized() const {
  return true;
}

void PrivacyFlags::InternalSwap(PrivacyFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  patterns_.InternalSwap(CastToBase(&other->patterns_));
  swap(dest_, other->dest_);
}

std::string PrivacyFlags::GetTypeName() const {
  return "android.PrivacyFlags";
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::android::PrivacyFlags >, 11, false >
  privacy(kPrivacyFieldNumber, *::android::PrivacyFlags::internal_default_instance());
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::android::PrivacyFlags >, 11, false >
  msg_privacy(kMsgPrivacyFieldNumber, *::android::PrivacyFlags::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::PrivacyFlags* Arena::CreateMaybeMessage< ::android::PrivacyFlags >(Arena* arena) {
  return Arena::CreateInternal< ::android::PrivacyFlags >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
