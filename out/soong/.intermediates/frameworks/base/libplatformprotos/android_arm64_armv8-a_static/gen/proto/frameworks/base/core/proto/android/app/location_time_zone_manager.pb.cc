// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/location_time_zone_manager.proto

#include "frameworks/base/core/proto/android/app/location_time_zone_manager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeolocationTimeZoneSuggestionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeZoneProviderStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto;
namespace android {
namespace app {
namespace time {
class LocationTimeZoneManagerServiceStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocationTimeZoneManagerServiceStateProto> _instance;
} _LocationTimeZoneManagerServiceStateProto_default_instance_;
class TimeZoneProviderStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeZoneProviderStateProto> _instance;
} _TimeZoneProviderStateProto_default_instance_;
}  // namespace time
}  // namespace app
}  // namespace android
static void InitDefaultsscc_info_LocationTimeZoneManagerServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::app::time::_LocationTimeZoneManagerServiceStateProto_default_instance_;
    new (ptr) ::android::app::time::LocationTimeZoneManagerServiceStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::app::time::LocationTimeZoneManagerServiceStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LocationTimeZoneManagerServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LocationTimeZoneManagerServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto}, {
      &scc_info_GeolocationTimeZoneSuggestionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto.base,
      &scc_info_TimeZoneProviderStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto.base,}};

static void InitDefaultsscc_info_TimeZoneProviderStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::app::time::_TimeZoneProviderStateProto_default_instance_;
    new (ptr) ::android::app::time::TimeZoneProviderStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::app::time::TimeZoneProviderStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeZoneProviderStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimeZoneProviderStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto}, {}};

namespace android {
namespace app {
namespace time {
bool TimeZoneProviderStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TimeZoneProviderStateEnum_strings[7] = {};

static const char TimeZoneProviderStateEnum_names[] =
  "TIME_ZONE_PROVIDER_STATE_CERTAIN"
  "TIME_ZONE_PROVIDER_STATE_DESTROYED"
  "TIME_ZONE_PROVIDER_STATE_DISABLED"
  "TIME_ZONE_PROVIDER_STATE_INITIALIZING"
  "TIME_ZONE_PROVIDER_STATE_PERM_FAILED"
  "TIME_ZONE_PROVIDER_STATE_UNCERTAIN"
  "TIME_ZONE_PROVIDER_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TimeZoneProviderStateEnum_entries[] = {
  { {TimeZoneProviderStateEnum_names + 0, 32}, 2 },
  { {TimeZoneProviderStateEnum_names + 32, 34}, 6 },
  { {TimeZoneProviderStateEnum_names + 66, 33}, 4 },
  { {TimeZoneProviderStateEnum_names + 99, 37}, 1 },
  { {TimeZoneProviderStateEnum_names + 136, 36}, 5 },
  { {TimeZoneProviderStateEnum_names + 172, 34}, 3 },
  { {TimeZoneProviderStateEnum_names + 206, 32}, 0 },
};

static const int TimeZoneProviderStateEnum_entries_by_number[] = {
  6, // 0 -> TIME_ZONE_PROVIDER_STATE_UNKNOWN
  3, // 1 -> TIME_ZONE_PROVIDER_STATE_INITIALIZING
  0, // 2 -> TIME_ZONE_PROVIDER_STATE_CERTAIN
  5, // 3 -> TIME_ZONE_PROVIDER_STATE_UNCERTAIN
  2, // 4 -> TIME_ZONE_PROVIDER_STATE_DISABLED
  4, // 5 -> TIME_ZONE_PROVIDER_STATE_PERM_FAILED
  1, // 6 -> TIME_ZONE_PROVIDER_STATE_DESTROYED
};

const std::string& TimeZoneProviderStateEnum_Name(
    TimeZoneProviderStateEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TimeZoneProviderStateEnum_entries,
          TimeZoneProviderStateEnum_entries_by_number,
          7, TimeZoneProviderStateEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TimeZoneProviderStateEnum_entries,
      TimeZoneProviderStateEnum_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TimeZoneProviderStateEnum_strings[idx].get();
}
bool TimeZoneProviderStateEnum_Parse(
    const std::string& name, TimeZoneProviderStateEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TimeZoneProviderStateEnum_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<TimeZoneProviderStateEnum>(int_value);
  }
  return success;
}

// ===================================================================

void LocationTimeZoneManagerServiceStateProto::InitAsDefaultInstance() {
  ::android::app::time::_LocationTimeZoneManagerServiceStateProto_default_instance_._instance.get_mutable()->last_suggestion_ = const_cast< ::android::app::time::GeolocationTimeZoneSuggestionProto*>(
      ::android::app::time::GeolocationTimeZoneSuggestionProto::internal_default_instance());
}
class LocationTimeZoneManagerServiceStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LocationTimeZoneManagerServiceStateProto>()._has_bits_);
  static const ::android::app::time::GeolocationTimeZoneSuggestionProto& last_suggestion(const LocationTimeZoneManagerServiceStateProto* msg);
  static void set_has_last_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::app::time::GeolocationTimeZoneSuggestionProto&
LocationTimeZoneManagerServiceStateProto::_Internal::last_suggestion(const LocationTimeZoneManagerServiceStateProto* msg) {
  return *msg->last_suggestion_;
}
void LocationTimeZoneManagerServiceStateProto::clear_last_suggestion() {
  if (last_suggestion_ != nullptr) last_suggestion_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LocationTimeZoneManagerServiceStateProto::LocationTimeZoneManagerServiceStateProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.app.time.LocationTimeZoneManagerServiceStateProto)
}
LocationTimeZoneManagerServiceStateProto::LocationTimeZoneManagerServiceStateProto(const LocationTimeZoneManagerServiceStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      primary_provider_states_(from.primary_provider_states_),
      secondary_provider_states_(from.secondary_provider_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_suggestion()) {
    last_suggestion_ = new ::android::app::time::GeolocationTimeZoneSuggestionProto(*from.last_suggestion_);
  } else {
    last_suggestion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.app.time.LocationTimeZoneManagerServiceStateProto)
}

void LocationTimeZoneManagerServiceStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocationTimeZoneManagerServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto.base);
  last_suggestion_ = nullptr;
}

LocationTimeZoneManagerServiceStateProto::~LocationTimeZoneManagerServiceStateProto() {
  // @@protoc_insertion_point(destructor:android.app.time.LocationTimeZoneManagerServiceStateProto)
  SharedDtor();
}

void LocationTimeZoneManagerServiceStateProto::SharedDtor() {
  if (this != internal_default_instance()) delete last_suggestion_;
}

void LocationTimeZoneManagerServiceStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocationTimeZoneManagerServiceStateProto& LocationTimeZoneManagerServiceStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocationTimeZoneManagerServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void LocationTimeZoneManagerServiceStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.app.time.LocationTimeZoneManagerServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_provider_states_.Clear();
  secondary_provider_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(last_suggestion_ != nullptr);
    last_suggestion_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocationTimeZoneManagerServiceStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.app.time.GeolocationTimeZoneSuggestionProto last_suggestion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_last_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.app.time.TimeZoneProviderStateProto primary_provider_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_primary_provider_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .android.app.time.TimeZoneProviderStateProto secondary_provider_states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_secondary_provider_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocationTimeZoneManagerServiceStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.app.time.LocationTimeZoneManagerServiceStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.app.time.GeolocationTimeZoneSuggestionProto last_suggestion = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_suggestion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.app.time.TimeZoneProviderStateProto primary_provider_states = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_primary_provider_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.app.time.TimeZoneProviderStateProto secondary_provider_states = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_secondary_provider_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.app.time.LocationTimeZoneManagerServiceStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.app.time.LocationTimeZoneManagerServiceStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocationTimeZoneManagerServiceStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.app.time.LocationTimeZoneManagerServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.app.time.GeolocationTimeZoneSuggestionProto last_suggestion = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::last_suggestion(this), output);
  }

  // repeated .android.app.time.TimeZoneProviderStateProto primary_provider_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->primary_provider_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->primary_provider_states(static_cast<int>(i)),
      output);
  }

  // repeated .android.app.time.TimeZoneProviderStateProto secondary_provider_states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->secondary_provider_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->secondary_provider_states(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.app.time.LocationTimeZoneManagerServiceStateProto)
}

size_t LocationTimeZoneManagerServiceStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.app.time.LocationTimeZoneManagerServiceStateProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.app.time.TimeZoneProviderStateProto primary_provider_states = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->primary_provider_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->primary_provider_states(static_cast<int>(i)));
    }
  }

  // repeated .android.app.time.TimeZoneProviderStateProto secondary_provider_states = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->secondary_provider_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->secondary_provider_states(static_cast<int>(i)));
    }
  }

  // optional .android.app.time.GeolocationTimeZoneSuggestionProto last_suggestion = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_suggestion_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationTimeZoneManagerServiceStateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LocationTimeZoneManagerServiceStateProto*>(
      &from));
}

void LocationTimeZoneManagerServiceStateProto::MergeFrom(const LocationTimeZoneManagerServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.app.time.LocationTimeZoneManagerServiceStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  primary_provider_states_.MergeFrom(from.primary_provider_states_);
  secondary_provider_states_.MergeFrom(from.secondary_provider_states_);
  if (from.has_last_suggestion()) {
    mutable_last_suggestion()->::android::app::time::GeolocationTimeZoneSuggestionProto::MergeFrom(from.last_suggestion());
  }
}

void LocationTimeZoneManagerServiceStateProto::CopyFrom(const LocationTimeZoneManagerServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.app.time.LocationTimeZoneManagerServiceStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationTimeZoneManagerServiceStateProto::IsInitialized() const {
  return true;
}

void LocationTimeZoneManagerServiceStateProto::InternalSwap(LocationTimeZoneManagerServiceStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&primary_provider_states_)->InternalSwap(CastToBase(&other->primary_provider_states_));
  CastToBase(&secondary_provider_states_)->InternalSwap(CastToBase(&other->secondary_provider_states_));
  swap(last_suggestion_, other->last_suggestion_);
}

std::string LocationTimeZoneManagerServiceStateProto::GetTypeName() const {
  return "android.app.time.LocationTimeZoneManagerServiceStateProto";
}


// ===================================================================

void TimeZoneProviderStateProto::InitAsDefaultInstance() {
}
class TimeZoneProviderStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeZoneProviderStateProto>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TimeZoneProviderStateProto::TimeZoneProviderStateProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.app.time.TimeZoneProviderStateProto)
}
TimeZoneProviderStateProto::TimeZoneProviderStateProto(const TimeZoneProviderStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:android.app.time.TimeZoneProviderStateProto)
}

void TimeZoneProviderStateProto::SharedCtor() {
  state_ = 0;
}

TimeZoneProviderStateProto::~TimeZoneProviderStateProto() {
  // @@protoc_insertion_point(destructor:android.app.time.TimeZoneProviderStateProto)
  SharedDtor();
}

void TimeZoneProviderStateProto::SharedDtor() {
}

void TimeZoneProviderStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeZoneProviderStateProto& TimeZoneProviderStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeZoneProviderStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2flocation_5ftime_5fzone_5fmanager_2eproto.base);
  return *internal_default_instance();
}


void TimeZoneProviderStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.app.time.TimeZoneProviderStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeZoneProviderStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.app.time.TimeZoneProviderStateEnum state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::time::TimeZoneProviderStateEnum_IsValid(val))) {
            set_state(static_cast<::android::app::time::TimeZoneProviderStateEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeZoneProviderStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.app.time.TimeZoneProviderStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.app.time.TimeZoneProviderStateEnum state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::time::TimeZoneProviderStateEnum_IsValid(value)) {
            set_state(static_cast< ::android::app::time::TimeZoneProviderStateEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.app.time.TimeZoneProviderStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.app.time.TimeZoneProviderStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeZoneProviderStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.app.time.TimeZoneProviderStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.app.time.TimeZoneProviderStateEnum state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.app.time.TimeZoneProviderStateProto)
}

size_t TimeZoneProviderStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.app.time.TimeZoneProviderStateProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.app.time.TimeZoneProviderStateEnum state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeZoneProviderStateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TimeZoneProviderStateProto*>(
      &from));
}

void TimeZoneProviderStateProto::MergeFrom(const TimeZoneProviderStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.app.time.TimeZoneProviderStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void TimeZoneProviderStateProto::CopyFrom(const TimeZoneProviderStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.app.time.TimeZoneProviderStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeZoneProviderStateProto::IsInitialized() const {
  return true;
}

void TimeZoneProviderStateProto::InternalSwap(TimeZoneProviderStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

std::string TimeZoneProviderStateProto::GetTypeName() const {
  return "android.app.time.TimeZoneProviderStateProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace time
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::app::time::LocationTimeZoneManagerServiceStateProto* Arena::CreateMaybeMessage< ::android::app::time::LocationTimeZoneManagerServiceStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::app::time::LocationTimeZoneManagerServiceStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::app::time::TimeZoneProviderStateProto* Arena::CreateMaybeMessage< ::android::app::time::TimeZoneProviderStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::app::time::TimeZoneProviderStateProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
