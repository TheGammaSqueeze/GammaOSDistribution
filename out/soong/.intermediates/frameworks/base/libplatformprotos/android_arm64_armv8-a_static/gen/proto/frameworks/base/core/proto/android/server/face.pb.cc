// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/face.proto

#include "frameworks/base/core/proto/android/server/face.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceActionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto;
namespace com {
namespace android {
namespace server {
namespace biometrics {
namespace face {
class FaceServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceServiceDumpProto> _instance;
} _FaceServiceDumpProto_default_instance_;
class FaceUserStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceUserStatsProto> _instance;
} _FaceUserStatsProto_default_instance_;
class FaceActionStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceActionStatsProto> _instance;
} _FaceActionStatsProto_default_instance_;
}  // namespace face
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_FaceActionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::face::_FaceActionStatsProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::face::FaceActionStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::face::FaceActionStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceActionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FaceActionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto}, {}};

static void InitDefaultsscc_info_FaceServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::face::_FaceServiceDumpProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::face::FaceServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::face::FaceServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaceServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto}, {
      &scc_info_FaceUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto.base,}};

static void InitDefaultsscc_info_FaceUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::face::_FaceUserStatsProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::face::FaceUserStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::face::FaceUserStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FaceUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FaceUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto}, {
      &scc_info_FaceActionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto.base,}};

namespace com {
namespace android {
namespace server {
namespace biometrics {
namespace face {

// ===================================================================

void FaceServiceDumpProto::InitAsDefaultInstance() {
}
class FaceServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceServiceDumpProto>()._has_bits_);
};

FaceServiceDumpProto::FaceServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.face.FaceServiceDumpProto)
}
FaceServiceDumpProto::FaceServiceDumpProto(const FaceServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.face.FaceServiceDumpProto)
}

void FaceServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto.base);
}

FaceServiceDumpProto::~FaceServiceDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.face.FaceServiceDumpProto)
  SharedDtor();
}

void FaceServiceDumpProto::SharedDtor() {
}

void FaceServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceServiceDumpProto& FaceServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto.base);
  return *internal_default_instance();
}


void FaceServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.face.FaceServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.biometrics.face.FaceUserStatsProto users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.face.FaceServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.biometrics.face.FaceUserStatsProto users = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.face.FaceServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.face.FaceServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.face.FaceServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.face.FaceUserStatsProto users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.face.FaceServiceDumpProto)
}

size_t FaceServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.face.FaceServiceDumpProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.face.FaceUserStatsProto users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceServiceDumpProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FaceServiceDumpProto*>(
      &from));
}

void FaceServiceDumpProto::MergeFrom(const FaceServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.face.FaceServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void FaceServiceDumpProto::CopyFrom(const FaceServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.face.FaceServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceServiceDumpProto::IsInitialized() const {
  return true;
}

void FaceServiceDumpProto::InternalSwap(FaceServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
}

std::string FaceServiceDumpProto::GetTypeName() const {
  return "com.android.server.biometrics.face.FaceServiceDumpProto";
}


// ===================================================================

void FaceUserStatsProto::InitAsDefaultInstance() {
  ::com::android::server::biometrics::face::_FaceUserStatsProto_default_instance_._instance.get_mutable()->normal_ = const_cast< ::com::android::server::biometrics::face::FaceActionStatsProto*>(
      ::com::android::server::biometrics::face::FaceActionStatsProto::internal_default_instance());
  ::com::android::server::biometrics::face::_FaceUserStatsProto_default_instance_._instance.get_mutable()->crypto_ = const_cast< ::com::android::server::biometrics::face::FaceActionStatsProto*>(
      ::com::android::server::biometrics::face::FaceActionStatsProto::internal_default_instance());
}
class FaceUserStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceUserStatsProto>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_faces(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::biometrics::face::FaceActionStatsProto& normal(const FaceUserStatsProto* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::biometrics::face::FaceActionStatsProto& crypto(const FaceUserStatsProto* msg);
  static void set_has_crypto(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::biometrics::face::FaceActionStatsProto&
FaceUserStatsProto::_Internal::normal(const FaceUserStatsProto* msg) {
  return *msg->normal_;
}
const ::com::android::server::biometrics::face::FaceActionStatsProto&
FaceUserStatsProto::_Internal::crypto(const FaceUserStatsProto* msg) {
  return *msg->crypto_;
}
FaceUserStatsProto::FaceUserStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.face.FaceUserStatsProto)
}
FaceUserStatsProto::FaceUserStatsProto(const FaceUserStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_normal()) {
    normal_ = new ::com::android::server::biometrics::face::FaceActionStatsProto(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  if (from.has_crypto()) {
    crypto_ = new ::com::android::server::biometrics::face::FaceActionStatsProto(*from.crypto_);
  } else {
    crypto_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_faces_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(num_faces_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.face.FaceUserStatsProto)
}

void FaceUserStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto.base);
  ::memset(&normal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_faces_) -
      reinterpret_cast<char*>(&normal_)) + sizeof(num_faces_));
}

FaceUserStatsProto::~FaceUserStatsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.face.FaceUserStatsProto)
  SharedDtor();
}

void FaceUserStatsProto::SharedDtor() {
  if (this != internal_default_instance()) delete normal_;
  if (this != internal_default_instance()) delete crypto_;
}

void FaceUserStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceUserStatsProto& FaceUserStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceUserStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto.base);
  return *internal_default_instance();
}


void FaceUserStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.face.FaceUserStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(normal_ != nullptr);
      normal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crypto_ != nullptr);
      crypto_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_faces_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(num_faces_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceUserStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_faces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_faces(&has_bits);
          num_faces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.face.FaceActionStatsProto normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.face.FaceActionStatsProto crypto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_crypto(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceUserStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.face.FaceUserStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_faces = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_faces(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_faces_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.face.FaceActionStatsProto normal = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.face.FaceActionStatsProto crypto = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_crypto()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.face.FaceUserStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.face.FaceUserStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceUserStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.face.FaceUserStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional int32 num_faces = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_faces(), output);
  }

  // optional .com.android.server.biometrics.face.FaceActionStatsProto normal = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::normal(this), output);
  }

  // optional .com.android.server.biometrics.face.FaceActionStatsProto crypto = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::crypto(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.face.FaceUserStatsProto)
}

size_t FaceUserStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.face.FaceUserStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.biometrics.face.FaceActionStatsProto normal = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normal_);
    }

    // optional .com.android.server.biometrics.face.FaceActionStatsProto crypto = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *crypto_);
    }

    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 num_faces = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_faces());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceUserStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FaceUserStatsProto*>(
      &from));
}

void FaceUserStatsProto::MergeFrom(const FaceUserStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.face.FaceUserStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_normal()->::com::android::server::biometrics::face::FaceActionStatsProto::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_crypto()->::com::android::server::biometrics::face::FaceActionStatsProto::MergeFrom(from.crypto());
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_faces_ = from.num_faces_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FaceUserStatsProto::CopyFrom(const FaceUserStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.face.FaceUserStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceUserStatsProto::IsInitialized() const {
  return true;
}

void FaceUserStatsProto::InternalSwap(FaceUserStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(normal_, other->normal_);
  swap(crypto_, other->crypto_);
  swap(user_id_, other->user_id_);
  swap(num_faces_, other->num_faces_);
}

std::string FaceUserStatsProto::GetTypeName() const {
  return "com.android.server.biometrics.face.FaceUserStatsProto";
}


// ===================================================================

void FaceActionStatsProto::InitAsDefaultInstance() {
}
class FaceActionStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FaceActionStatsProto>()._has_bits_);
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reject(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acquire(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lockout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lockout_permanent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FaceActionStatsProto::FaceActionStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.face.FaceActionStatsProto)
}
FaceActionStatsProto::FaceActionStatsProto(const FaceActionStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accept_, &from.accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&lockout_permanent_) -
    reinterpret_cast<char*>(&accept_)) + sizeof(lockout_permanent_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.face.FaceActionStatsProto)
}

void FaceActionStatsProto::SharedCtor() {
  ::memset(&accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lockout_permanent_) -
      reinterpret_cast<char*>(&accept_)) + sizeof(lockout_permanent_));
}

FaceActionStatsProto::~FaceActionStatsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.face.FaceActionStatsProto)
  SharedDtor();
}

void FaceActionStatsProto::SharedDtor() {
}

void FaceActionStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceActionStatsProto& FaceActionStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceActionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto.base);
  return *internal_default_instance();
}


void FaceActionStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.face.FaceActionStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&accept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lockout_permanent_) -
        reinterpret_cast<char*>(&accept_)) + sizeof(lockout_permanent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceActionStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reject(&has_bits);
          reject_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 acquire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_acquire(&has_bits);
          acquire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lockout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lockout(&has_bits);
          lockout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lockout_permanent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lockout_permanent(&has_bits);
          lockout_permanent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceActionStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.face.FaceActionStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 accept = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_accept(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reject = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_reject(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reject_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 acquire = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_acquire(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &acquire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lockout = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_lockout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lockout_permanent = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_lockout_permanent(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockout_permanent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.face.FaceActionStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.face.FaceActionStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceActionStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.face.FaceActionStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 accept = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->accept(), output);
  }

  // optional int32 reject = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->reject(), output);
  }

  // optional int32 acquire = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->acquire(), output);
  }

  // optional int32 lockout = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->lockout(), output);
  }

  // optional int32 lockout_permanent = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->lockout_permanent(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.face.FaceActionStatsProto)
}

size_t FaceActionStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.face.FaceActionStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 accept = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->accept());
    }

    // optional int32 reject = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->reject());
    }

    // optional int32 acquire = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->acquire());
    }

    // optional int32 lockout = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lockout());
    }

    // optional int32 lockout_permanent = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lockout_permanent());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceActionStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FaceActionStatsProto*>(
      &from));
}

void FaceActionStatsProto::MergeFrom(const FaceActionStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.face.FaceActionStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000002u) {
      reject_ = from.reject_;
    }
    if (cached_has_bits & 0x00000004u) {
      acquire_ = from.acquire_;
    }
    if (cached_has_bits & 0x00000008u) {
      lockout_ = from.lockout_;
    }
    if (cached_has_bits & 0x00000010u) {
      lockout_permanent_ = from.lockout_permanent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FaceActionStatsProto::CopyFrom(const FaceActionStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.face.FaceActionStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceActionStatsProto::IsInitialized() const {
  return true;
}

void FaceActionStatsProto::InternalSwap(FaceActionStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accept_, other->accept_);
  swap(reject_, other->reject_);
  swap(acquire_, other->acquire_);
  swap(lockout_, other->lockout_);
  swap(lockout_permanent_, other->lockout_permanent_);
}

std::string FaceActionStatsProto::GetTypeName() const {
  return "com.android.server.biometrics.face.FaceActionStatsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace face
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::face::FaceServiceDumpProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::face::FaceServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::face::FaceServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::face::FaceUserStatsProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::face::FaceUserStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::face::FaceUserStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::face::FaceActionStatsProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::face::FaceActionStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::face::FaceActionStatsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
