// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/view/enums.proto

#include "frameworks/proto_logging/stats/enums/view/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace view {
}  // namespace view
}  // namespace android
namespace android {
namespace view {
bool DisplayStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DisplayStateEnum_strings[7] = {};

static const char DisplayStateEnum_names[] =
  "DISPLAY_STATE_DOZE"
  "DISPLAY_STATE_DOZE_SUSPEND"
  "DISPLAY_STATE_OFF"
  "DISPLAY_STATE_ON"
  "DISPLAY_STATE_ON_SUSPEND"
  "DISPLAY_STATE_UNKNOWN"
  "DISPLAY_STATE_VR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DisplayStateEnum_entries[] = {
  { {DisplayStateEnum_names + 0, 18}, 3 },
  { {DisplayStateEnum_names + 18, 26}, 4 },
  { {DisplayStateEnum_names + 44, 17}, 1 },
  { {DisplayStateEnum_names + 61, 16}, 2 },
  { {DisplayStateEnum_names + 77, 24}, 6 },
  { {DisplayStateEnum_names + 101, 21}, 0 },
  { {DisplayStateEnum_names + 122, 16}, 5 },
};

static const int DisplayStateEnum_entries_by_number[] = {
  5, // 0 -> DISPLAY_STATE_UNKNOWN
  2, // 1 -> DISPLAY_STATE_OFF
  3, // 2 -> DISPLAY_STATE_ON
  0, // 3 -> DISPLAY_STATE_DOZE
  1, // 4 -> DISPLAY_STATE_DOZE_SUSPEND
  6, // 5 -> DISPLAY_STATE_VR
  4, // 6 -> DISPLAY_STATE_ON_SUSPEND
};

const std::string& DisplayStateEnum_Name(
    DisplayStateEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DisplayStateEnum_entries,
          DisplayStateEnum_entries_by_number,
          7, DisplayStateEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DisplayStateEnum_entries,
      DisplayStateEnum_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DisplayStateEnum_strings[idx].get();
}
bool DisplayStateEnum_Parse(
    const std::string& name, DisplayStateEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DisplayStateEnum_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<DisplayStateEnum>(int_value);
  }
  return success;
}
bool TransitionTypeEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransitionTypeEnum_strings[23] = {};

static const char TransitionTypeEnum_names[] =
  "TRANSIT_ACTIVITY_CLOSE"
  "TRANSIT_ACTIVITY_OPEN"
  "TRANSIT_ACTIVITY_RELAUNCH"
  "TRANSIT_CRASHING_ACTIVITY_CLOSE"
  "TRANSIT_DOCK_TASK_FROM_RECENTS"
  "TRANSIT_KEYGUARD_GOING_AWAY"
  "TRANSIT_KEYGUARD_GOING_AWAY_ON_WALLPAPER"
  "TRANSIT_KEYGUARD_OCCLUDE"
  "TRANSIT_KEYGUARD_UNOCCLUDE"
  "TRANSIT_NONE"
  "TRANSIT_TASK_CLOSE"
  "TRANSIT_TASK_IN_PLACE"
  "TRANSIT_TASK_OPEN"
  "TRANSIT_TASK_OPEN_BEHIND"
  "TRANSIT_TASK_TO_BACK"
  "TRANSIT_TASK_TO_FRONT"
  "TRANSIT_TRANSLUCENT_ACTIVITY_CLOSE"
  "TRANSIT_TRANSLUCENT_ACTIVITY_OPEN"
  "TRANSIT_UNSET"
  "TRANSIT_WALLPAPER_CLOSE"
  "TRANSIT_WALLPAPER_INTRA_CLOSE"
  "TRANSIT_WALLPAPER_INTRA_OPEN"
  "TRANSIT_WALLPAPER_OPEN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransitionTypeEnum_entries[] = {
  { {TransitionTypeEnum_names + 0, 22}, 7 },
  { {TransitionTypeEnum_names + 22, 21}, 6 },
  { {TransitionTypeEnum_names + 43, 25}, 18 },
  { {TransitionTypeEnum_names + 68, 31}, 26 },
  { {TransitionTypeEnum_names + 99, 30}, 19 },
  { {TransitionTypeEnum_names + 129, 27}, 20 },
  { {TransitionTypeEnum_names + 156, 40}, 21 },
  { {TransitionTypeEnum_names + 196, 24}, 22 },
  { {TransitionTypeEnum_names + 220, 26}, 23 },
  { {TransitionTypeEnum_names + 246, 12}, 0 },
  { {TransitionTypeEnum_names + 258, 18}, 9 },
  { {TransitionTypeEnum_names + 276, 21}, 17 },
  { {TransitionTypeEnum_names + 297, 17}, 8 },
  { {TransitionTypeEnum_names + 314, 24}, 16 },
  { {TransitionTypeEnum_names + 338, 20}, 11 },
  { {TransitionTypeEnum_names + 358, 21}, 10 },
  { {TransitionTypeEnum_names + 379, 34}, 25 },
  { {TransitionTypeEnum_names + 413, 33}, 24 },
  { {TransitionTypeEnum_names + 446, 13}, -1 },
  { {TransitionTypeEnum_names + 459, 23}, 12 },
  { {TransitionTypeEnum_names + 482, 29}, 15 },
  { {TransitionTypeEnum_names + 511, 28}, 14 },
  { {TransitionTypeEnum_names + 539, 22}, 13 },
};

static const int TransitionTypeEnum_entries_by_number[] = {
  18, // -1 -> TRANSIT_UNSET
  9, // 0 -> TRANSIT_NONE
  1, // 6 -> TRANSIT_ACTIVITY_OPEN
  0, // 7 -> TRANSIT_ACTIVITY_CLOSE
  12, // 8 -> TRANSIT_TASK_OPEN
  10, // 9 -> TRANSIT_TASK_CLOSE
  15, // 10 -> TRANSIT_TASK_TO_FRONT
  14, // 11 -> TRANSIT_TASK_TO_BACK
  19, // 12 -> TRANSIT_WALLPAPER_CLOSE
  22, // 13 -> TRANSIT_WALLPAPER_OPEN
  21, // 14 -> TRANSIT_WALLPAPER_INTRA_OPEN
  20, // 15 -> TRANSIT_WALLPAPER_INTRA_CLOSE
  13, // 16 -> TRANSIT_TASK_OPEN_BEHIND
  11, // 17 -> TRANSIT_TASK_IN_PLACE
  2, // 18 -> TRANSIT_ACTIVITY_RELAUNCH
  4, // 19 -> TRANSIT_DOCK_TASK_FROM_RECENTS
  5, // 20 -> TRANSIT_KEYGUARD_GOING_AWAY
  6, // 21 -> TRANSIT_KEYGUARD_GOING_AWAY_ON_WALLPAPER
  7, // 22 -> TRANSIT_KEYGUARD_OCCLUDE
  8, // 23 -> TRANSIT_KEYGUARD_UNOCCLUDE
  17, // 24 -> TRANSIT_TRANSLUCENT_ACTIVITY_OPEN
  16, // 25 -> TRANSIT_TRANSLUCENT_ACTIVITY_CLOSE
  3, // 26 -> TRANSIT_CRASHING_ACTIVITY_CLOSE
};

const std::string& TransitionTypeEnum_Name(
    TransitionTypeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransitionTypeEnum_entries,
          TransitionTypeEnum_entries_by_number,
          23, TransitionTypeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransitionTypeEnum_entries,
      TransitionTypeEnum_entries_by_number,
      23, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransitionTypeEnum_strings[idx].get();
}
bool TransitionTypeEnum_Parse(
    const std::string& name, TransitionTypeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransitionTypeEnum_entries, 23, name, &int_value);
  if (success) {
    *value = static_cast<TransitionTypeEnum>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace view
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
