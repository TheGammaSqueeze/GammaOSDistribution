// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/section.proto

#include "frameworks/base/core/proto/android/section.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SectionFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto;
namespace android {
class SectionFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SectionFlags> _instance;
} _SectionFlags_default_instance_;
}  // namespace android
static void InitDefaultsscc_info_SectionFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::_SectionFlags_default_instance_;
    new (ptr) ::android::SectionFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::SectionFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SectionFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SectionFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto}, {}};

namespace android {
bool SectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SectionType_strings[8] = {};

static const char SectionType_names[] =
  "SECTION_COMMAND"
  "SECTION_DUMPSYS"
  "SECTION_FILE"
  "SECTION_GZIP"
  "SECTION_LOG"
  "SECTION_NONE"
  "SECTION_TEXT_DUMPSYS"
  "SECTION_TOMBSTONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SectionType_entries[] = {
  { {SectionType_names + 0, 15}, 2 },
  { {SectionType_names + 15, 15}, 3 },
  { {SectionType_names + 30, 12}, 1 },
  { {SectionType_names + 42, 12}, 5 },
  { {SectionType_names + 54, 11}, 4 },
  { {SectionType_names + 65, 12}, 0 },
  { {SectionType_names + 77, 20}, 7 },
  { {SectionType_names + 97, 17}, 6 },
};

static const int SectionType_entries_by_number[] = {
  5, // 0 -> SECTION_NONE
  2, // 1 -> SECTION_FILE
  0, // 2 -> SECTION_COMMAND
  1, // 3 -> SECTION_DUMPSYS
  4, // 4 -> SECTION_LOG
  3, // 5 -> SECTION_GZIP
  7, // 6 -> SECTION_TOMBSTONE
  6, // 7 -> SECTION_TEXT_DUMPSYS
};

const std::string& SectionType_Name(
    SectionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SectionType_entries,
          SectionType_entries_by_number,
          8, SectionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SectionType_entries,
      SectionType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SectionType_strings[idx].get();
}
bool SectionType_Parse(
    const std::string& name, SectionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SectionType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<SectionType>(int_value);
  }
  return success;
}

// ===================================================================

void SectionFlags::InitAsDefaultInstance() {
}
class SectionFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<SectionFlags>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_args(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userdebug_and_eng_only(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SectionFlags::SectionFlags()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.SectionFlags)
}
SectionFlags::SectionFlags(const SectionFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_args()) {
    args_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&userdebug_and_eng_only_) -
    reinterpret_cast<char*>(&type_)) + sizeof(userdebug_and_eng_only_));
  // @@protoc_insertion_point(copy_constructor:android.SectionFlags)
}

void SectionFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SectionFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto.base);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userdebug_and_eng_only_) -
      reinterpret_cast<char*>(&type_)) + sizeof(userdebug_and_eng_only_));
}

SectionFlags::~SectionFlags() {
  // @@protoc_insertion_point(destructor:android.SectionFlags)
  SharedDtor();
}

void SectionFlags::SharedDtor() {
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SectionFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SectionFlags& SectionFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SectionFlags_frameworks_2fbase_2fcore_2fproto_2fandroid_2fsection_2eproto.base);
  return *internal_default_instance();
}


void SectionFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:android.SectionFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    args_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userdebug_and_eng_only_) -
        reinterpret_cast<char*>(&type_)) + sizeof(userdebug_and_eng_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SectionFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.SectionType type = 1 [default = SECTION_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::SectionType_IsValid(val))) {
            set_type(static_cast<::android::SectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_args(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool userdebug_and_eng_only = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_userdebug_and_eng_only(&has_bits);
          userdebug_and_eng_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SectionFlags::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.SectionFlags)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.SectionType type = 1 [default = SECTION_NONE];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::SectionType_IsValid(value)) {
            set_type(static_cast< ::android::SectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string args = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool userdebug_and_eng_only = 3 [default = false];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_userdebug_and_eng_only(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &userdebug_and_eng_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.SectionFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.SectionFlags)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SectionFlags::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.SectionFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.SectionType type = 1 [default = SECTION_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string args = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->args(), output);
  }

  // optional bool userdebug_and_eng_only = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->userdebug_and_eng_only(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.SectionFlags)
}

size_t SectionFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.SectionFlags)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string args = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->args());
    }

    // optional .android.SectionType type = 1 [default = SECTION_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool userdebug_and_eng_only = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectionFlags::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SectionFlags*>(
      &from));
}

void SectionFlags::MergeFrom(const SectionFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.SectionFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      args_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.args_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      userdebug_and_eng_only_ = from.userdebug_and_eng_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SectionFlags::CopyFrom(const SectionFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.SectionFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionFlags::IsInitialized() const {
  return true;
}

void SectionFlags::InternalSwap(SectionFlags* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(userdebug_and_eng_only_, other->userdebug_and_eng_only_);
}

std::string SectionFlags::GetTypeName() const {
  return "android.SectionFlags";
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::android::SectionFlags >, 11, false >
  section(kSectionFieldNumber, *::android::SectionFlags::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::SectionFlags* Arena::CreateMaybeMessage< ::android::SectionFlags >(Arena* arena) {
  return Arena::CreateInternal< ::android::SectionFlags >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
