// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/vibrator/vibratormanagerservice.proto

#include "frameworks/base/core/proto/android/server/vibrator/vibratormanagerservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CombinedVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrebakedSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrimitiveSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RampSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VibrationAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VibrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace vibrator {
class StepSegmentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StepSegmentProto> _instance;
} _StepSegmentProto_default_instance_;
class RampSegmentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RampSegmentProto> _instance;
} _RampSegmentProto_default_instance_;
class PrebakedSegmentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrebakedSegmentProto> _instance;
} _PrebakedSegmentProto_default_instance_;
class PrimitiveSegmentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrimitiveSegmentProto> _instance;
} _PrimitiveSegmentProto_default_instance_;
class SegmentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentProto> _instance;
} _SegmentProto_default_instance_;
class VibrationEffectProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VibrationEffectProto> _instance;
} _VibrationEffectProto_default_instance_;
class SyncVibrationEffectProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncVibrationEffectProto> _instance;
} _SyncVibrationEffectProto_default_instance_;
class CombinedVibrationEffectProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CombinedVibrationEffectProto> _instance;
} _CombinedVibrationEffectProto_default_instance_;
class VibrationAttributesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VibrationAttributesProto> _instance;
} _VibrationAttributesProto_default_instance_;
class VibrationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VibrationProto> _instance;
} _VibrationProto_default_instance_;
class VibratorManagerServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VibratorManagerServiceDumpProto> _instance;
} _VibratorManagerServiceDumpProto_default_instance_;
}  // namespace vibrator
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_CombinedVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_CombinedVibrationEffectProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::CombinedVibrationEffectProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::CombinedVibrationEffectProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CombinedVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CombinedVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {
      &scc_info_SyncVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_PrebakedSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_PrebakedSegmentProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::PrebakedSegmentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::PrebakedSegmentProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrebakedSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PrebakedSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_PrimitiveSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_PrimitiveSegmentProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::PrimitiveSegmentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::PrimitiveSegmentProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrimitiveSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PrimitiveSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_RampSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_RampSegmentProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::RampSegmentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::RampSegmentProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RampSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RampSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_SegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_SegmentProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::SegmentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::SegmentProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_SegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {
      &scc_info_PrebakedSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,
      &scc_info_PrimitiveSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,
      &scc_info_StepSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,
      &scc_info_RampSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_StepSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_StepSegmentProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::StepSegmentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::StepSegmentProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StepSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StepSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_SyncVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_SyncVibrationEffectProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::SyncVibrationEffectProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::SyncVibrationEffectProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SyncVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {
      &scc_info_VibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_VibrationAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_VibrationAttributesProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::VibrationAttributesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::VibrationAttributesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VibrationAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VibrationAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {}};

static void InitDefaultsscc_info_VibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_VibrationEffectProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::VibrationEffectProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::VibrationEffectProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {
      &scc_info_SegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_VibrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_VibrationProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::VibrationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::VibrationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VibrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VibrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {
      &scc_info_CombinedVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,
      &scc_info_VibrationAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,}};

static void InitDefaultsscc_info_VibratorManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::vibrator::_VibratorManagerServiceDumpProto_default_instance_;
    new (ptr) ::com::android::server::vibrator::VibratorManagerServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::vibrator::VibratorManagerServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VibratorManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VibratorManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto}, {
      &scc_info_VibrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base,}};

namespace com {
namespace android {
namespace server {
namespace vibrator {

// ===================================================================

void StepSegmentProto::InitAsDefaultInstance() {
}
class StepSegmentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StepSegmentProto>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amplitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StepSegmentProto::StepSegmentProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.StepSegmentProto)
}
StepSegmentProto::StepSegmentProto(const StepSegmentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(frequency_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.StepSegmentProto)
}

void StepSegmentProto::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(frequency_));
}

StepSegmentProto::~StepSegmentProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.StepSegmentProto)
  SharedDtor();
}

void StepSegmentProto::SharedDtor() {
}

void StepSegmentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StepSegmentProto& StepSegmentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StepSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void StepSegmentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.StepSegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frequency_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(frequency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StepSegmentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float amplitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_amplitude(&has_bits);
          amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_frequency(&has_bits);
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StepSegmentProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.StepSegmentProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float amplitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_amplitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_frequency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.StepSegmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.StepSegmentProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StepSegmentProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.StepSegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional float amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->amplitude(), output);
  }

  // optional float frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.StepSegmentProto)
}

size_t StepSegmentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.StepSegmentProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 duration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional float amplitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepSegmentProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StepSegmentProto*>(
      &from));
}

void StepSegmentProto::MergeFrom(const StepSegmentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.StepSegmentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      amplitude_ = from.amplitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_ = from.frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StepSegmentProto::CopyFrom(const StepSegmentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.StepSegmentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepSegmentProto::IsInitialized() const {
  return true;
}

void StepSegmentProto::InternalSwap(StepSegmentProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_, other->duration_);
  swap(amplitude_, other->amplitude_);
  swap(frequency_, other->frequency_);
}

std::string StepSegmentProto::GetTypeName() const {
  return "com.android.server.vibrator.StepSegmentProto";
}


// ===================================================================

void RampSegmentProto::InitAsDefaultInstance() {
}
class RampSegmentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RampSegmentProto>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_startamplitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endamplitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_startfrequency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_endfrequency(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RampSegmentProto::RampSegmentProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.RampSegmentProto)
}
RampSegmentProto::RampSegmentProto(const RampSegmentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&endfrequency_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(endfrequency_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.RampSegmentProto)
}

void RampSegmentProto::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endfrequency_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(endfrequency_));
}

RampSegmentProto::~RampSegmentProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.RampSegmentProto)
  SharedDtor();
}

void RampSegmentProto::SharedDtor() {
}

void RampSegmentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RampSegmentProto& RampSegmentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RampSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void RampSegmentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.RampSegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endfrequency_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(endfrequency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RampSegmentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float startAmplitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_startamplitude(&has_bits);
          startamplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endAmplitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_endamplitude(&has_bits);
          endamplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float startFrequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_startfrequency(&has_bits);
          startfrequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endFrequency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_endfrequency(&has_bits);
          endfrequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RampSegmentProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.RampSegmentProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float startAmplitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_startamplitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startamplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float endAmplitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_endamplitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endamplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float startFrequency = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_startfrequency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startfrequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float endFrequency = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_endfrequency(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endfrequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.RampSegmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.RampSegmentProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RampSegmentProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.RampSegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional float startAmplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->startamplitude(), output);
  }

  // optional float endAmplitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->endamplitude(), output);
  }

  // optional float startFrequency = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->startfrequency(), output);
  }

  // optional float endFrequency = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->endfrequency(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.RampSegmentProto)
}

size_t RampSegmentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.RampSegmentProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 duration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional float startAmplitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float endAmplitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float startFrequency = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float endFrequency = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RampSegmentProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RampSegmentProto*>(
      &from));
}

void RampSegmentProto::MergeFrom(const RampSegmentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.RampSegmentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      startamplitude_ = from.startamplitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      endamplitude_ = from.endamplitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      startfrequency_ = from.startfrequency_;
    }
    if (cached_has_bits & 0x00000010u) {
      endfrequency_ = from.endfrequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RampSegmentProto::CopyFrom(const RampSegmentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.RampSegmentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampSegmentProto::IsInitialized() const {
  return true;
}

void RampSegmentProto::InternalSwap(RampSegmentProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_, other->duration_);
  swap(startamplitude_, other->startamplitude_);
  swap(endamplitude_, other->endamplitude_);
  swap(startfrequency_, other->startfrequency_);
  swap(endfrequency_, other->endfrequency_);
}

std::string RampSegmentProto::GetTypeName() const {
  return "com.android.server.vibrator.RampSegmentProto";
}


// ===================================================================

void PrebakedSegmentProto::InitAsDefaultInstance() {
}
class PrebakedSegmentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PrebakedSegmentProto>()._has_bits_);
  static void set_has_effect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fallback(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PrebakedSegmentProto::PrebakedSegmentProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.PrebakedSegmentProto)
}
PrebakedSegmentProto::PrebakedSegmentProto(const PrebakedSegmentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&effect_id_, &from.effect_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fallback_) -
    reinterpret_cast<char*>(&effect_id_)) + sizeof(fallback_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.PrebakedSegmentProto)
}

void PrebakedSegmentProto::SharedCtor() {
  ::memset(&effect_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fallback_) -
      reinterpret_cast<char*>(&effect_id_)) + sizeof(fallback_));
}

PrebakedSegmentProto::~PrebakedSegmentProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.PrebakedSegmentProto)
  SharedDtor();
}

void PrebakedSegmentProto::SharedDtor() {
}

void PrebakedSegmentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrebakedSegmentProto& PrebakedSegmentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrebakedSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PrebakedSegmentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.PrebakedSegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&effect_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fallback_) -
        reinterpret_cast<char*>(&effect_id_)) + sizeof(fallback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrebakedSegmentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 effect_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_effect_id(&has_bits);
          effect_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 effect_strength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_effect_strength(&has_bits);
          effect_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fallback = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fallback(&has_bits);
          fallback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrebakedSegmentProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.PrebakedSegmentProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 effect_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_effect_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 effect_strength = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_effect_strength(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fallback = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_fallback(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fallback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.PrebakedSegmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.PrebakedSegmentProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrebakedSegmentProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.PrebakedSegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 effect_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->effect_id(), output);
  }

  // optional int32 effect_strength = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->effect_strength(), output);
  }

  // optional int32 fallback = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->fallback(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.PrebakedSegmentProto)
}

size_t PrebakedSegmentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.PrebakedSegmentProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 effect_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->effect_id());
    }

    // optional int32 effect_strength = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->effect_strength());
    }

    // optional int32 fallback = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->fallback());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrebakedSegmentProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PrebakedSegmentProto*>(
      &from));
}

void PrebakedSegmentProto::MergeFrom(const PrebakedSegmentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.PrebakedSegmentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      effect_id_ = from.effect_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      effect_strength_ = from.effect_strength_;
    }
    if (cached_has_bits & 0x00000004u) {
      fallback_ = from.fallback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrebakedSegmentProto::CopyFrom(const PrebakedSegmentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.PrebakedSegmentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrebakedSegmentProto::IsInitialized() const {
  return true;
}

void PrebakedSegmentProto::InternalSwap(PrebakedSegmentProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(effect_id_, other->effect_id_);
  swap(effect_strength_, other->effect_strength_);
  swap(fallback_, other->fallback_);
}

std::string PrebakedSegmentProto::GetTypeName() const {
  return "com.android.server.vibrator.PrebakedSegmentProto";
}


// ===================================================================

void PrimitiveSegmentProto::InitAsDefaultInstance() {
}
class PrimitiveSegmentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PrimitiveSegmentProto>()._has_bits_);
  static void set_has_primitive_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PrimitiveSegmentProto::PrimitiveSegmentProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.PrimitiveSegmentProto)
}
PrimitiveSegmentProto::PrimitiveSegmentProto(const PrimitiveSegmentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primitive_id_, &from.primitive_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&primitive_id_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.PrimitiveSegmentProto)
}

void PrimitiveSegmentProto::SharedCtor() {
  ::memset(&primitive_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&primitive_id_)) + sizeof(delay_));
}

PrimitiveSegmentProto::~PrimitiveSegmentProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.PrimitiveSegmentProto)
  SharedDtor();
}

void PrimitiveSegmentProto::SharedDtor() {
}

void PrimitiveSegmentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrimitiveSegmentProto& PrimitiveSegmentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrimitiveSegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void PrimitiveSegmentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.PrimitiveSegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&primitive_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delay_) -
        reinterpret_cast<char*>(&primitive_id_)) + sizeof(delay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrimitiveSegmentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 primitive_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_primitive_id(&has_bits);
          primitive_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrimitiveSegmentProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.PrimitiveSegmentProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 primitive_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_primitive_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &primitive_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delay = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_delay(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.PrimitiveSegmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.PrimitiveSegmentProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrimitiveSegmentProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.PrimitiveSegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 primitive_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->primitive_id(), output);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional int32 delay = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->delay(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.PrimitiveSegmentProto)
}

size_t PrimitiveSegmentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.PrimitiveSegmentProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 primitive_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->primitive_id());
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 delay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->delay());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrimitiveSegmentProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PrimitiveSegmentProto*>(
      &from));
}

void PrimitiveSegmentProto::MergeFrom(const PrimitiveSegmentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.PrimitiveSegmentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      primitive_id_ = from.primitive_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_ = from.delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrimitiveSegmentProto::CopyFrom(const PrimitiveSegmentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.PrimitiveSegmentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveSegmentProto::IsInitialized() const {
  return true;
}

void PrimitiveSegmentProto::InternalSwap(PrimitiveSegmentProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primitive_id_, other->primitive_id_);
  swap(scale_, other->scale_);
  swap(delay_, other->delay_);
}

std::string PrimitiveSegmentProto::GetTypeName() const {
  return "com.android.server.vibrator.PrimitiveSegmentProto";
}


// ===================================================================

void SegmentProto::InitAsDefaultInstance() {
  ::com::android::server::vibrator::_SegmentProto_default_instance_._instance.get_mutable()->prebaked_ = const_cast< ::com::android::server::vibrator::PrebakedSegmentProto*>(
      ::com::android::server::vibrator::PrebakedSegmentProto::internal_default_instance());
  ::com::android::server::vibrator::_SegmentProto_default_instance_._instance.get_mutable()->primitive_ = const_cast< ::com::android::server::vibrator::PrimitiveSegmentProto*>(
      ::com::android::server::vibrator::PrimitiveSegmentProto::internal_default_instance());
  ::com::android::server::vibrator::_SegmentProto_default_instance_._instance.get_mutable()->step_ = const_cast< ::com::android::server::vibrator::StepSegmentProto*>(
      ::com::android::server::vibrator::StepSegmentProto::internal_default_instance());
  ::com::android::server::vibrator::_SegmentProto_default_instance_._instance.get_mutable()->ramp_ = const_cast< ::com::android::server::vibrator::RampSegmentProto*>(
      ::com::android::server::vibrator::RampSegmentProto::internal_default_instance());
}
class SegmentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SegmentProto>()._has_bits_);
  static const ::com::android::server::vibrator::PrebakedSegmentProto& prebaked(const SegmentProto* msg);
  static void set_has_prebaked(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::vibrator::PrimitiveSegmentProto& primitive(const SegmentProto* msg);
  static void set_has_primitive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::vibrator::StepSegmentProto& step(const SegmentProto* msg);
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::vibrator::RampSegmentProto& ramp(const SegmentProto* msg);
  static void set_has_ramp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::vibrator::PrebakedSegmentProto&
SegmentProto::_Internal::prebaked(const SegmentProto* msg) {
  return *msg->prebaked_;
}
const ::com::android::server::vibrator::PrimitiveSegmentProto&
SegmentProto::_Internal::primitive(const SegmentProto* msg) {
  return *msg->primitive_;
}
const ::com::android::server::vibrator::StepSegmentProto&
SegmentProto::_Internal::step(const SegmentProto* msg) {
  return *msg->step_;
}
const ::com::android::server::vibrator::RampSegmentProto&
SegmentProto::_Internal::ramp(const SegmentProto* msg) {
  return *msg->ramp_;
}
SegmentProto::SegmentProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.SegmentProto)
}
SegmentProto::SegmentProto(const SegmentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_prebaked()) {
    prebaked_ = new ::com::android::server::vibrator::PrebakedSegmentProto(*from.prebaked_);
  } else {
    prebaked_ = nullptr;
  }
  if (from.has_primitive()) {
    primitive_ = new ::com::android::server::vibrator::PrimitiveSegmentProto(*from.primitive_);
  } else {
    primitive_ = nullptr;
  }
  if (from.has_step()) {
    step_ = new ::com::android::server::vibrator::StepSegmentProto(*from.step_);
  } else {
    step_ = nullptr;
  }
  if (from.has_ramp()) {
    ramp_ = new ::com::android::server::vibrator::RampSegmentProto(*from.ramp_);
  } else {
    ramp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.SegmentProto)
}

void SegmentProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  ::memset(&prebaked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ramp_) -
      reinterpret_cast<char*>(&prebaked_)) + sizeof(ramp_));
}

SegmentProto::~SegmentProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.SegmentProto)
  SharedDtor();
}

void SegmentProto::SharedDtor() {
  if (this != internal_default_instance()) delete prebaked_;
  if (this != internal_default_instance()) delete primitive_;
  if (this != internal_default_instance()) delete step_;
  if (this != internal_default_instance()) delete ramp_;
}

void SegmentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentProto& SegmentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void SegmentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.SegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(prebaked_ != nullptr);
      prebaked_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(primitive_ != nullptr);
      primitive_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(step_ != nullptr);
      step_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ramp_ != nullptr);
      ramp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegmentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.vibrator.PrebakedSegmentProto prebaked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_prebaked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.vibrator.PrimitiveSegmentProto primitive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_primitive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.vibrator.StepSegmentProto step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_step(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.vibrator.RampSegmentProto ramp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_ramp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegmentProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.SegmentProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.vibrator.PrebakedSegmentProto prebaked = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_prebaked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.vibrator.PrimitiveSegmentProto primitive = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_primitive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.vibrator.StepSegmentProto step = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.vibrator.RampSegmentProto ramp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ramp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.SegmentProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.SegmentProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegmentProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.SegmentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.vibrator.PrebakedSegmentProto prebaked = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::prebaked(this), output);
  }

  // optional .com.android.server.vibrator.PrimitiveSegmentProto primitive = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::primitive(this), output);
  }

  // optional .com.android.server.vibrator.StepSegmentProto step = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::step(this), output);
  }

  // optional .com.android.server.vibrator.RampSegmentProto ramp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::ramp(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.SegmentProto)
}

size_t SegmentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.SegmentProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.vibrator.PrebakedSegmentProto prebaked = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prebaked_);
    }

    // optional .com.android.server.vibrator.PrimitiveSegmentProto primitive = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *primitive_);
    }

    // optional .com.android.server.vibrator.StepSegmentProto step = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *step_);
    }

    // optional .com.android.server.vibrator.RampSegmentProto ramp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ramp_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SegmentProto*>(
      &from));
}

void SegmentProto::MergeFrom(const SegmentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.SegmentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_prebaked()->::com::android::server::vibrator::PrebakedSegmentProto::MergeFrom(from.prebaked());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_primitive()->::com::android::server::vibrator::PrimitiveSegmentProto::MergeFrom(from.primitive());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_step()->::com::android::server::vibrator::StepSegmentProto::MergeFrom(from.step());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ramp()->::com::android::server::vibrator::RampSegmentProto::MergeFrom(from.ramp());
    }
  }
}

void SegmentProto::CopyFrom(const SegmentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.SegmentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentProto::IsInitialized() const {
  return true;
}

void SegmentProto::InternalSwap(SegmentProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prebaked_, other->prebaked_);
  swap(primitive_, other->primitive_);
  swap(step_, other->step_);
  swap(ramp_, other->ramp_);
}

std::string SegmentProto::GetTypeName() const {
  return "com.android.server.vibrator.SegmentProto";
}


// ===================================================================

void VibrationEffectProto::InitAsDefaultInstance() {
  ::com::android::server::vibrator::_VibrationEffectProto_default_instance_._instance.get_mutable()->segments_ = const_cast< ::com::android::server::vibrator::SegmentProto*>(
      ::com::android::server::vibrator::SegmentProto::internal_default_instance());
}
class VibrationEffectProto::_Internal {
 public:
  using HasBits = decltype(std::declval<VibrationEffectProto>()._has_bits_);
  static const ::com::android::server::vibrator::SegmentProto& segments(const VibrationEffectProto* msg);
  static void set_has_segments(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_repeat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::vibrator::SegmentProto&
VibrationEffectProto::_Internal::segments(const VibrationEffectProto* msg) {
  return *msg->segments_;
}
VibrationEffectProto::VibrationEffectProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.VibrationEffectProto)
}
VibrationEffectProto::VibrationEffectProto(const VibrationEffectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_segments()) {
    segments_ = new ::com::android::server::vibrator::SegmentProto(*from.segments_);
  } else {
    segments_ = nullptr;
  }
  repeat_ = from.repeat_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.VibrationEffectProto)
}

void VibrationEffectProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  ::memset(&segments_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_) -
      reinterpret_cast<char*>(&segments_)) + sizeof(repeat_));
}

VibrationEffectProto::~VibrationEffectProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.VibrationEffectProto)
  SharedDtor();
}

void VibrationEffectProto::SharedDtor() {
  if (this != internal_default_instance()) delete segments_;
}

void VibrationEffectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VibrationEffectProto& VibrationEffectProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void VibrationEffectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.VibrationEffectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(segments_ != nullptr);
    segments_->Clear();
  }
  repeat_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VibrationEffectProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.vibrator.SegmentProto segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_segments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 repeat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_repeat(&has_bits);
          repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VibrationEffectProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.VibrationEffectProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.vibrator.SegmentProto segments = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 repeat = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_repeat(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.VibrationEffectProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.VibrationEffectProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VibrationEffectProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.VibrationEffectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.vibrator.SegmentProto segments = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::segments(this), output);
  }

  // required int32 repeat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->repeat(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.VibrationEffectProto)
}

size_t VibrationEffectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.VibrationEffectProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int32 repeat = 2;
  if (has_repeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->repeat());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.android.server.vibrator.SegmentProto segments = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segments_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VibrationEffectProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VibrationEffectProto*>(
      &from));
}

void VibrationEffectProto::MergeFrom(const VibrationEffectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.VibrationEffectProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_segments()->::com::android::server::vibrator::SegmentProto::MergeFrom(from.segments());
    }
    if (cached_has_bits & 0x00000002u) {
      repeat_ = from.repeat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VibrationEffectProto::CopyFrom(const VibrationEffectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.VibrationEffectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibrationEffectProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void VibrationEffectProto::InternalSwap(VibrationEffectProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(segments_, other->segments_);
  swap(repeat_, other->repeat_);
}

std::string VibrationEffectProto::GetTypeName() const {
  return "com.android.server.vibrator.VibrationEffectProto";
}


// ===================================================================

void SyncVibrationEffectProto::InitAsDefaultInstance() {
}
class SyncVibrationEffectProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncVibrationEffectProto>()._has_bits_);
};

SyncVibrationEffectProto::SyncVibrationEffectProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.SyncVibrationEffectProto)
}
SyncVibrationEffectProto::SyncVibrationEffectProto(const SyncVibrationEffectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      effects_(from.effects_),
      vibrator_ids_(from.vibrator_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.SyncVibrationEffectProto)
}

void SyncVibrationEffectProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
}

SyncVibrationEffectProto::~SyncVibrationEffectProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.SyncVibrationEffectProto)
  SharedDtor();
}

void SyncVibrationEffectProto::SharedDtor() {
}

void SyncVibrationEffectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncVibrationEffectProto& SyncVibrationEffectProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void SyncVibrationEffectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.SyncVibrationEffectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  vibrator_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncVibrationEffectProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.vibrator.VibrationEffectProto effects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated int32 vibrator_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_vibrator_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_vibrator_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncVibrationEffectProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.SyncVibrationEffectProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.vibrator.VibrationEffectProto effects = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_effects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 vibrator_ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_vibrator_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vibrator_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.SyncVibrationEffectProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.SyncVibrationEffectProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncVibrationEffectProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.SyncVibrationEffectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.vibrator.VibrationEffectProto effects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->effects(static_cast<int>(i)),
      output);
  }

  // repeated int32 vibrator_ids = 2;
  for (int i = 0, n = this->vibrator_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->vibrator_ids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.SyncVibrationEffectProto)
}

size_t SyncVibrationEffectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.SyncVibrationEffectProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.vibrator.VibrationEffectProto effects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->effects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->effects(static_cast<int>(i)));
    }
  }

  // repeated int32 vibrator_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vibrator_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->vibrator_ids_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncVibrationEffectProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SyncVibrationEffectProto*>(
      &from));
}

void SyncVibrationEffectProto::MergeFrom(const SyncVibrationEffectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.SyncVibrationEffectProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
  vibrator_ids_.MergeFrom(from.vibrator_ids_);
}

void SyncVibrationEffectProto::CopyFrom(const SyncVibrationEffectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.SyncVibrationEffectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncVibrationEffectProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->effects())) return false;
  return true;
}

void SyncVibrationEffectProto::InternalSwap(SyncVibrationEffectProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&effects_)->InternalSwap(CastToBase(&other->effects_));
  vibrator_ids_.InternalSwap(&other->vibrator_ids_);
}

std::string SyncVibrationEffectProto::GetTypeName() const {
  return "com.android.server.vibrator.SyncVibrationEffectProto";
}


// ===================================================================

void CombinedVibrationEffectProto::InitAsDefaultInstance() {
}
class CombinedVibrationEffectProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CombinedVibrationEffectProto>()._has_bits_);
};

CombinedVibrationEffectProto::CombinedVibrationEffectProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.CombinedVibrationEffectProto)
}
CombinedVibrationEffectProto::CombinedVibrationEffectProto(const CombinedVibrationEffectProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      effects_(from.effects_),
      delays_(from.delays_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.CombinedVibrationEffectProto)
}

void CombinedVibrationEffectProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CombinedVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
}

CombinedVibrationEffectProto::~CombinedVibrationEffectProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.CombinedVibrationEffectProto)
  SharedDtor();
}

void CombinedVibrationEffectProto::SharedDtor() {
}

void CombinedVibrationEffectProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CombinedVibrationEffectProto& CombinedVibrationEffectProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CombinedVibrationEffectProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void CombinedVibrationEffectProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.CombinedVibrationEffectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  delays_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CombinedVibrationEffectProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.vibrator.SyncVibrationEffectProto effects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_effects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated int32 delays = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_delays(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_delays(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CombinedVibrationEffectProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.CombinedVibrationEffectProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.vibrator.SyncVibrationEffectProto effects = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_effects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 delays = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_delays())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_delays())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.CombinedVibrationEffectProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.CombinedVibrationEffectProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CombinedVibrationEffectProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.CombinedVibrationEffectProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.vibrator.SyncVibrationEffectProto effects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->effects(static_cast<int>(i)),
      output);
  }

  // repeated int32 delays = 2;
  for (int i = 0, n = this->delays_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->delays(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.CombinedVibrationEffectProto)
}

size_t CombinedVibrationEffectProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.CombinedVibrationEffectProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.vibrator.SyncVibrationEffectProto effects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->effects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->effects(static_cast<int>(i)));
    }
  }

  // repeated int32 delays = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->delays_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->delays_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CombinedVibrationEffectProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CombinedVibrationEffectProto*>(
      &from));
}

void CombinedVibrationEffectProto::MergeFrom(const CombinedVibrationEffectProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.CombinedVibrationEffectProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
  delays_.MergeFrom(from.delays_);
}

void CombinedVibrationEffectProto::CopyFrom(const CombinedVibrationEffectProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.CombinedVibrationEffectProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombinedVibrationEffectProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->effects())) return false;
  return true;
}

void CombinedVibrationEffectProto::InternalSwap(CombinedVibrationEffectProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&effects_)->InternalSwap(CastToBase(&other->effects_));
  delays_.InternalSwap(&other->delays_);
}

std::string CombinedVibrationEffectProto::GetTypeName() const {
  return "com.android.server.vibrator.CombinedVibrationEffectProto";
}


// ===================================================================

void VibrationAttributesProto::InitAsDefaultInstance() {
}
class VibrationAttributesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<VibrationAttributesProto>()._has_bits_);
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audio_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VibrationAttributesProto::VibrationAttributesProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.VibrationAttributesProto)
}
VibrationAttributesProto::VibrationAttributesProto(const VibrationAttributesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&usage_, &from.usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&usage_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.VibrationAttributesProto)
}

void VibrationAttributesProto::SharedCtor() {
  ::memset(&usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&usage_)) + sizeof(flags_));
}

VibrationAttributesProto::~VibrationAttributesProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.VibrationAttributesProto)
  SharedDtor();
}

void VibrationAttributesProto::SharedDtor() {
}

void VibrationAttributesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VibrationAttributesProto& VibrationAttributesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VibrationAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void VibrationAttributesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.VibrationAttributesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&usage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&usage_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VibrationAttributesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_usage(&has_bits);
          usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 audio_usage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_audio_usage(&has_bits);
          audio_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VibrationAttributesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.VibrationAttributesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 usage = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_usage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_audio_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.VibrationAttributesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.VibrationAttributesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VibrationAttributesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.VibrationAttributesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 usage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->usage(), output);
  }

  // optional int32 audio_usage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->audio_usage(), output);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.VibrationAttributesProto)
}

size_t VibrationAttributesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.VibrationAttributesProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 usage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->usage());
    }

    // optional int32 audio_usage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->audio_usage());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VibrationAttributesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VibrationAttributesProto*>(
      &from));
}

void VibrationAttributesProto::MergeFrom(const VibrationAttributesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.VibrationAttributesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      usage_ = from.usage_;
    }
    if (cached_has_bits & 0x00000002u) {
      audio_usage_ = from.audio_usage_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VibrationAttributesProto::CopyFrom(const VibrationAttributesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.VibrationAttributesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibrationAttributesProto::IsInitialized() const {
  return true;
}

void VibrationAttributesProto::InternalSwap(VibrationAttributesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(usage_, other->usage_);
  swap(audio_usage_, other->audio_usage_);
  swap(flags_, other->flags_);
}

std::string VibrationAttributesProto::GetTypeName() const {
  return "com.android.server.vibrator.VibrationAttributesProto";
}


// ===================================================================

void VibrationProto::InitAsDefaultInstance() {
  ::com::android::server::vibrator::_VibrationProto_default_instance_._instance.get_mutable()->effect_ = const_cast< ::com::android::server::vibrator::CombinedVibrationEffectProto*>(
      ::com::android::server::vibrator::CombinedVibrationEffectProto::internal_default_instance());
  ::com::android::server::vibrator::_VibrationProto_default_instance_._instance.get_mutable()->original_effect_ = const_cast< ::com::android::server::vibrator::CombinedVibrationEffectProto*>(
      ::com::android::server::vibrator::CombinedVibrationEffectProto::internal_default_instance());
  ::com::android::server::vibrator::_VibrationProto_default_instance_._instance.get_mutable()->attributes_ = const_cast< ::com::android::server::vibrator::VibrationAttributesProto*>(
      ::com::android::server::vibrator::VibrationAttributesProto::internal_default_instance());
}
class VibrationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<VibrationProto>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::com::android::server::vibrator::CombinedVibrationEffectProto& effect(const VibrationProto* msg);
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::vibrator::CombinedVibrationEffectProto& original_effect(const VibrationProto* msg);
  static void set_has_original_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::vibrator::VibrationAttributesProto& attributes(const VibrationProto* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::vibrator::CombinedVibrationEffectProto&
VibrationProto::_Internal::effect(const VibrationProto* msg) {
  return *msg->effect_;
}
const ::com::android::server::vibrator::CombinedVibrationEffectProto&
VibrationProto::_Internal::original_effect(const VibrationProto* msg) {
  return *msg->original_effect_;
}
const ::com::android::server::vibrator::VibrationAttributesProto&
VibrationProto::_Internal::attributes(const VibrationProto* msg) {
  return *msg->attributes_;
}
VibrationProto::VibrationProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.VibrationProto)
}
VibrationProto::VibrationProto(const VibrationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_effect()) {
    effect_ = new ::com::android::server::vibrator::CombinedVibrationEffectProto(*from.effect_);
  } else {
    effect_ = nullptr;
  }
  if (from.has_original_effect()) {
    original_effect_ = new ::com::android::server::vibrator::CombinedVibrationEffectProto(*from.original_effect_);
  } else {
    original_effect_ = nullptr;
  }
  if (from.has_attributes()) {
    attributes_ = new ::com::android::server::vibrator::VibrationAttributesProto(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.VibrationProto)
}

void VibrationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VibrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  ::memset(&effect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&effect_)) + sizeof(status_));
}

VibrationProto::~VibrationProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.VibrationProto)
  SharedDtor();
}

void VibrationProto::SharedDtor() {
  if (this != internal_default_instance()) delete effect_;
  if (this != internal_default_instance()) delete original_effect_;
  if (this != internal_default_instance()) delete attributes_;
}

void VibrationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VibrationProto& VibrationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VibrationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void VibrationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.VibrationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(effect_ != nullptr);
      effect_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(original_effect_ != nullptr);
      original_effect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(attributes_ != nullptr);
      attributes_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VibrationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.vibrator.CombinedVibrationEffectProto effect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_effect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.vibrator.CombinedVibrationEffectProto original_effect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_original_effect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.vibrator.VibrationAttributesProto attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VibrationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.VibrationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 end_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_end_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.vibrator.CombinedVibrationEffectProto effect = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.vibrator.CombinedVibrationEffectProto original_effect = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_original_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.vibrator.VibrationAttributesProto attributes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.VibrationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.VibrationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VibrationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.VibrationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_time = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->start_time(), output);
  }

  // optional int64 end_time = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->end_time(), output);
  }

  // optional .com.android.server.vibrator.CombinedVibrationEffectProto effect = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::effect(this), output);
  }

  // optional .com.android.server.vibrator.CombinedVibrationEffectProto original_effect = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::original_effect(this), output);
  }

  // optional .com.android.server.vibrator.VibrationAttributesProto attributes = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::attributes(this), output);
  }

  // optional int32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.VibrationProto)
}

size_t VibrationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.VibrationProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .com.android.server.vibrator.CombinedVibrationEffectProto effect = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *effect_);
    }

    // optional .com.android.server.vibrator.CombinedVibrationEffectProto original_effect = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_effect_);
    }

    // optional .com.android.server.vibrator.VibrationAttributesProto attributes = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attributes_);
    }

    // optional int64 start_time = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VibrationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VibrationProto*>(
      &from));
}

void VibrationProto::MergeFrom(const VibrationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.VibrationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_effect()->::com::android::server::vibrator::CombinedVibrationEffectProto::MergeFrom(from.effect());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_original_effect()->::com::android::server::vibrator::CombinedVibrationEffectProto::MergeFrom(from.original_effect());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_attributes()->::com::android::server::vibrator::VibrationAttributesProto::MergeFrom(from.attributes());
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VibrationProto::CopyFrom(const VibrationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.VibrationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibrationProto::IsInitialized() const {
  if (has_effect()) {
    if (!this->effect_->IsInitialized()) return false;
  }
  if (has_original_effect()) {
    if (!this->original_effect_->IsInitialized()) return false;
  }
  return true;
}

void VibrationProto::InternalSwap(VibrationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(effect_, other->effect_);
  swap(original_effect_, other->original_effect_);
  swap(attributes_, other->attributes_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(status_, other->status_);
}

std::string VibrationProto::GetTypeName() const {
  return "com.android.server.vibrator.VibrationProto";
}


// ===================================================================

void VibratorManagerServiceDumpProto::InitAsDefaultInstance() {
  ::com::android::server::vibrator::_VibratorManagerServiceDumpProto_default_instance_._instance.get_mutable()->current_vibration_ = const_cast< ::com::android::server::vibrator::VibrationProto*>(
      ::com::android::server::vibrator::VibrationProto::internal_default_instance());
  ::com::android::server::vibrator::_VibratorManagerServiceDumpProto_default_instance_._instance.get_mutable()->current_external_vibration_ = const_cast< ::com::android::server::vibrator::VibrationProto*>(
      ::com::android::server::vibrator::VibrationProto::internal_default_instance());
}
class VibratorManagerServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<VibratorManagerServiceDumpProto>()._has_bits_);
  static const ::com::android::server::vibrator::VibrationProto& current_vibration(const VibratorManagerServiceDumpProto* msg);
  static void set_has_current_vibration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_vibrating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::vibrator::VibrationProto& current_external_vibration(const VibratorManagerServiceDumpProto* msg);
  static void set_has_current_external_vibration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vibrator_under_external_control(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_low_power_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_haptic_feedback_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_haptic_feedback_default_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_notification_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_notification_default_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ring_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ring_default_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::com::android::server::vibrator::VibrationProto&
VibratorManagerServiceDumpProto::_Internal::current_vibration(const VibratorManagerServiceDumpProto* msg) {
  return *msg->current_vibration_;
}
const ::com::android::server::vibrator::VibrationProto&
VibratorManagerServiceDumpProto::_Internal::current_external_vibration(const VibratorManagerServiceDumpProto* msg) {
  return *msg->current_external_vibration_;
}
VibratorManagerServiceDumpProto::VibratorManagerServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.vibrator.VibratorManagerServiceDumpProto)
}
VibratorManagerServiceDumpProto::VibratorManagerServiceDumpProto(const VibratorManagerServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vibrator_ids_(from.vibrator_ids_),
      previous_ring_vibrations_(from.previous_ring_vibrations_),
      previous_notification_vibrations_(from.previous_notification_vibrations_),
      previous_alarm_vibrations_(from.previous_alarm_vibrations_),
      previous_vibrations_(from.previous_vibrations_),
      previous_external_vibrations_(from.previous_external_vibrations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_vibration()) {
    current_vibration_ = new ::com::android::server::vibrator::VibrationProto(*from.current_vibration_);
  } else {
    current_vibration_ = nullptr;
  }
  if (from.has_current_external_vibration()) {
    current_external_vibration_ = new ::com::android::server::vibrator::VibrationProto(*from.current_external_vibration_);
  } else {
    current_external_vibration_ = nullptr;
  }
  ::memcpy(&is_vibrating_, &from.is_vibrating_,
    static_cast<size_t>(reinterpret_cast<char*>(&ring_default_intensity_) -
    reinterpret_cast<char*>(&is_vibrating_)) + sizeof(ring_default_intensity_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.vibrator.VibratorManagerServiceDumpProto)
}

void VibratorManagerServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VibratorManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  ::memset(&current_vibration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ring_default_intensity_) -
      reinterpret_cast<char*>(&current_vibration_)) + sizeof(ring_default_intensity_));
}

VibratorManagerServiceDumpProto::~VibratorManagerServiceDumpProto() {
  // @@protoc_insertion_point(destructor:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  SharedDtor();
}

void VibratorManagerServiceDumpProto::SharedDtor() {
  if (this != internal_default_instance()) delete current_vibration_;
  if (this != internal_default_instance()) delete current_external_vibration_;
}

void VibratorManagerServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VibratorManagerServiceDumpProto& VibratorManagerServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VibratorManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fvibrator_2fvibratormanagerservice_2eproto.base);
  return *internal_default_instance();
}


void VibratorManagerServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vibrator_ids_.Clear();
  previous_ring_vibrations_.Clear();
  previous_notification_vibrations_.Clear();
  previous_alarm_vibrations_.Clear();
  previous_vibrations_.Clear();
  previous_external_vibrations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(current_vibration_ != nullptr);
      current_vibration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(current_external_vibration_ != nullptr);
      current_external_vibration_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&is_vibrating_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notification_intensity_) -
        reinterpret_cast<char*>(&is_vibrating_)) + sizeof(notification_intensity_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&notification_default_intensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ring_default_intensity_) -
        reinterpret_cast<char*>(&notification_default_intensity_)) + sizeof(ring_default_intensity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VibratorManagerServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 vibrator_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_vibrator_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_vibrator_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.vibrator.VibrationProto current_vibration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_current_vibration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_vibrating = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_vibrating(&has_bits);
          is_vibrating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.vibrator.VibrationProto current_external_vibration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_current_external_vibration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vibrator_under_external_control = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_vibrator_under_external_control(&has_bits);
          vibrator_under_external_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_power_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_low_power_mode(&has_bits);
          low_power_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 haptic_feedback_intensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_haptic_feedback_intensity(&has_bits);
          haptic_feedback_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 haptic_feedback_default_intensity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_haptic_feedback_default_intensity(&has_bits);
          haptic_feedback_default_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 notification_intensity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_notification_intensity(&has_bits);
          notification_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 notification_default_intensity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_notification_default_intensity(&has_bits);
          notification_default_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ring_intensity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ring_intensity(&has_bits);
          ring_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ring_default_intensity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ring_default_intensity(&has_bits);
          ring_default_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.vibrator.VibrationProto previous_ring_vibrations = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_previous_ring_vibrations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.vibrator.VibrationProto previous_notification_vibrations = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_previous_notification_vibrations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.vibrator.VibrationProto previous_alarm_vibrations = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_previous_alarm_vibrations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.vibrator.VibrationProto previous_vibrations = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_previous_vibrations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.vibrator.VibrationProto previous_external_vibrations = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_previous_external_vibrations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VibratorManagerServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 vibrator_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_vibrator_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vibrator_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.vibrator.VibrationProto current_vibration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current_vibration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vibrating = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_vibrating(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vibrating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.vibrator.VibrationProto current_external_vibration = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current_external_vibration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vibrator_under_external_control = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_vibrator_under_external_control(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vibrator_under_external_control_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_power_mode = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_low_power_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_power_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 haptic_feedback_intensity = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_haptic_feedback_intensity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &haptic_feedback_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 haptic_feedback_default_intensity = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_haptic_feedback_default_intensity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &haptic_feedback_default_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 notification_intensity = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_notification_intensity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &notification_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 notification_default_intensity = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_notification_default_intensity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &notification_default_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ring_intensity = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_ring_intensity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ring_default_intensity = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_ring_default_intensity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ring_default_intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.vibrator.VibrationProto previous_ring_vibrations = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_previous_ring_vibrations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.vibrator.VibrationProto previous_notification_vibrations = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_previous_notification_vibrations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.vibrator.VibrationProto previous_alarm_vibrations = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_previous_alarm_vibrations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.vibrator.VibrationProto previous_vibrations = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_previous_vibrations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.vibrator.VibrationProto previous_external_vibrations = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_previous_external_vibrations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VibratorManagerServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 vibrator_ids = 1;
  for (int i = 0, n = this->vibrator_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->vibrator_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.vibrator.VibrationProto current_vibration = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::current_vibration(this), output);
  }

  // optional bool is_vibrating = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_vibrating(), output);
  }

  // optional .com.android.server.vibrator.VibrationProto current_external_vibration = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::current_external_vibration(this), output);
  }

  // optional bool vibrator_under_external_control = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->vibrator_under_external_control(), output);
  }

  // optional bool low_power_mode = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->low_power_mode(), output);
  }

  // optional int32 haptic_feedback_intensity = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->haptic_feedback_intensity(), output);
  }

  // optional int32 haptic_feedback_default_intensity = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->haptic_feedback_default_intensity(), output);
  }

  // optional int32 notification_intensity = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->notification_intensity(), output);
  }

  // optional int32 notification_default_intensity = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->notification_default_intensity(), output);
  }

  // optional int32 ring_intensity = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->ring_intensity(), output);
  }

  // optional int32 ring_default_intensity = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->ring_default_intensity(), output);
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_ring_vibrations = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->previous_ring_vibrations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13,
      this->previous_ring_vibrations(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_notification_vibrations = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->previous_notification_vibrations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14,
      this->previous_notification_vibrations(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_alarm_vibrations = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->previous_alarm_vibrations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15,
      this->previous_alarm_vibrations(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_vibrations = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->previous_vibrations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16,
      this->previous_vibrations(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_external_vibrations = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->previous_external_vibrations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17,
      this->previous_external_vibrations(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.vibrator.VibratorManagerServiceDumpProto)
}

size_t VibratorManagerServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vibrator_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vibrator_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->vibrator_ids_size());
    total_size += data_size;
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_ring_vibrations = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->previous_ring_vibrations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->previous_ring_vibrations(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_notification_vibrations = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->previous_notification_vibrations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->previous_notification_vibrations(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_alarm_vibrations = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->previous_alarm_vibrations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->previous_alarm_vibrations(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_vibrations = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->previous_vibrations_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->previous_vibrations(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.vibrator.VibrationProto previous_external_vibrations = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->previous_external_vibrations_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->previous_external_vibrations(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.vibrator.VibrationProto current_vibration = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_vibration_);
    }

    // optional .com.android.server.vibrator.VibrationProto current_external_vibration = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_external_vibration_);
    }

    // optional bool is_vibrating = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool vibrator_under_external_control = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool low_power_mode = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 haptic_feedback_intensity = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->haptic_feedback_intensity());
    }

    // optional int32 haptic_feedback_default_intensity = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->haptic_feedback_default_intensity());
    }

    // optional int32 notification_intensity = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->notification_intensity());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 notification_default_intensity = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->notification_default_intensity());
    }

    // optional int32 ring_intensity = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ring_intensity());
    }

    // optional int32 ring_default_intensity = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ring_default_intensity());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VibratorManagerServiceDumpProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VibratorManagerServiceDumpProto*>(
      &from));
}

void VibratorManagerServiceDumpProto::MergeFrom(const VibratorManagerServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vibrator_ids_.MergeFrom(from.vibrator_ids_);
  previous_ring_vibrations_.MergeFrom(from.previous_ring_vibrations_);
  previous_notification_vibrations_.MergeFrom(from.previous_notification_vibrations_);
  previous_alarm_vibrations_.MergeFrom(from.previous_alarm_vibrations_);
  previous_vibrations_.MergeFrom(from.previous_vibrations_);
  previous_external_vibrations_.MergeFrom(from.previous_external_vibrations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_current_vibration()->::com::android::server::vibrator::VibrationProto::MergeFrom(from.current_vibration());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_current_external_vibration()->::com::android::server::vibrator::VibrationProto::MergeFrom(from.current_external_vibration());
    }
    if (cached_has_bits & 0x00000004u) {
      is_vibrating_ = from.is_vibrating_;
    }
    if (cached_has_bits & 0x00000008u) {
      vibrator_under_external_control_ = from.vibrator_under_external_control_;
    }
    if (cached_has_bits & 0x00000010u) {
      low_power_mode_ = from.low_power_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      haptic_feedback_intensity_ = from.haptic_feedback_intensity_;
    }
    if (cached_has_bits & 0x00000040u) {
      haptic_feedback_default_intensity_ = from.haptic_feedback_default_intensity_;
    }
    if (cached_has_bits & 0x00000080u) {
      notification_intensity_ = from.notification_intensity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      notification_default_intensity_ = from.notification_default_intensity_;
    }
    if (cached_has_bits & 0x00000200u) {
      ring_intensity_ = from.ring_intensity_;
    }
    if (cached_has_bits & 0x00000400u) {
      ring_default_intensity_ = from.ring_default_intensity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VibratorManagerServiceDumpProto::CopyFrom(const VibratorManagerServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.vibrator.VibratorManagerServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VibratorManagerServiceDumpProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->previous_ring_vibrations())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->previous_notification_vibrations())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->previous_alarm_vibrations())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->previous_vibrations())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->previous_external_vibrations())) return false;
  if (has_current_vibration()) {
    if (!this->current_vibration_->IsInitialized()) return false;
  }
  if (has_current_external_vibration()) {
    if (!this->current_external_vibration_->IsInitialized()) return false;
  }
  return true;
}

void VibratorManagerServiceDumpProto::InternalSwap(VibratorManagerServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vibrator_ids_.InternalSwap(&other->vibrator_ids_);
  CastToBase(&previous_ring_vibrations_)->InternalSwap(CastToBase(&other->previous_ring_vibrations_));
  CastToBase(&previous_notification_vibrations_)->InternalSwap(CastToBase(&other->previous_notification_vibrations_));
  CastToBase(&previous_alarm_vibrations_)->InternalSwap(CastToBase(&other->previous_alarm_vibrations_));
  CastToBase(&previous_vibrations_)->InternalSwap(CastToBase(&other->previous_vibrations_));
  CastToBase(&previous_external_vibrations_)->InternalSwap(CastToBase(&other->previous_external_vibrations_));
  swap(current_vibration_, other->current_vibration_);
  swap(current_external_vibration_, other->current_external_vibration_);
  swap(is_vibrating_, other->is_vibrating_);
  swap(vibrator_under_external_control_, other->vibrator_under_external_control_);
  swap(low_power_mode_, other->low_power_mode_);
  swap(haptic_feedback_intensity_, other->haptic_feedback_intensity_);
  swap(haptic_feedback_default_intensity_, other->haptic_feedback_default_intensity_);
  swap(notification_intensity_, other->notification_intensity_);
  swap(notification_default_intensity_, other->notification_default_intensity_);
  swap(ring_intensity_, other->ring_intensity_);
  swap(ring_default_intensity_, other->ring_default_intensity_);
}

std::string VibratorManagerServiceDumpProto::GetTypeName() const {
  return "com.android.server.vibrator.VibratorManagerServiceDumpProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vibrator
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::StepSegmentProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::StepSegmentProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::StepSegmentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::RampSegmentProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::RampSegmentProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::RampSegmentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::PrebakedSegmentProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::PrebakedSegmentProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::PrebakedSegmentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::PrimitiveSegmentProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::PrimitiveSegmentProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::PrimitiveSegmentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::SegmentProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::SegmentProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::SegmentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::VibrationEffectProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::VibrationEffectProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::VibrationEffectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::SyncVibrationEffectProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::SyncVibrationEffectProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::SyncVibrationEffectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::CombinedVibrationEffectProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::CombinedVibrationEffectProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::CombinedVibrationEffectProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::VibrationAttributesProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::VibrationAttributesProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::VibrationAttributesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::VibrationProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::VibrationProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::VibrationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::vibrator::VibratorManagerServiceDumpProto* Arena::CreateMaybeMessage< ::com::android::server::vibrator::VibratorManagerServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::vibrator::VibratorManagerServiceDumpProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
