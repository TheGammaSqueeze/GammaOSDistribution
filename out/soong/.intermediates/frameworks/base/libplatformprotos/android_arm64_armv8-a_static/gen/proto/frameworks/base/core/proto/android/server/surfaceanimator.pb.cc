// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/surfaceanimator.proto

#include "frameworks/base/core/proto/android/server/surfaceanimator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurfacecontrol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SurfaceControlProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurfacecontrol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
namespace com {
namespace android {
namespace server {
namespace wm {
class SurfaceAnimatorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceAnimatorProto> _instance;
} _SurfaceAnimatorProto_default_instance_;
}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_SurfaceAnimatorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fsurfaceanimator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_SurfaceAnimatorProto_default_instance_;
    new (ptr) ::com::android::server::wm::SurfaceAnimatorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::SurfaceAnimatorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SurfaceAnimatorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fsurfaceanimator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SurfaceAnimatorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fsurfaceanimator_2eproto}, {
      &scc_info_SurfaceControlProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurfacecontrol_2eproto.base,
      &scc_info_AnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,}};

namespace com {
namespace android {
namespace server {
namespace wm {

// ===================================================================

void SurfaceAnimatorProto::InitAsDefaultInstance() {
  ::com::android::server::wm::_SurfaceAnimatorProto_default_instance_._instance.get_mutable()->leash_ = const_cast< ::android::view::SurfaceControlProto*>(
      ::android::view::SurfaceControlProto::internal_default_instance());
  ::com::android::server::wm::_SurfaceAnimatorProto_default_instance_._instance.get_mutable()->animation_adapter_ = const_cast< ::com::android::server::wm::AnimationAdapterProto*>(
      ::com::android::server::wm::AnimationAdapterProto::internal_default_instance());
}
class SurfaceAnimatorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SurfaceAnimatorProto>()._has_bits_);
  static const ::android::view::SurfaceControlProto& leash(const SurfaceAnimatorProto* msg);
  static void set_has_leash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_animation_start_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::wm::AnimationAdapterProto& animation_adapter(const SurfaceAnimatorProto* msg);
  static void set_has_animation_adapter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::view::SurfaceControlProto&
SurfaceAnimatorProto::_Internal::leash(const SurfaceAnimatorProto* msg) {
  return *msg->leash_;
}
const ::com::android::server::wm::AnimationAdapterProto&
SurfaceAnimatorProto::_Internal::animation_adapter(const SurfaceAnimatorProto* msg) {
  return *msg->animation_adapter_;
}
void SurfaceAnimatorProto::clear_leash() {
  if (leash_ != nullptr) leash_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SurfaceAnimatorProto::clear_animation_adapter() {
  if (animation_adapter_ != nullptr) animation_adapter_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SurfaceAnimatorProto::SurfaceAnimatorProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.SurfaceAnimatorProto)
}
SurfaceAnimatorProto::SurfaceAnimatorProto(const SurfaceAnimatorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leash()) {
    leash_ = new ::android::view::SurfaceControlProto(*from.leash_);
  } else {
    leash_ = nullptr;
  }
  if (from.has_animation_adapter()) {
    animation_adapter_ = new ::com::android::server::wm::AnimationAdapterProto(*from.animation_adapter_);
  } else {
    animation_adapter_ = nullptr;
  }
  animation_start_delayed_ = from.animation_start_delayed_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.SurfaceAnimatorProto)
}

void SurfaceAnimatorProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceAnimatorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fsurfaceanimator_2eproto.base);
  ::memset(&leash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_start_delayed_) -
      reinterpret_cast<char*>(&leash_)) + sizeof(animation_start_delayed_));
}

SurfaceAnimatorProto::~SurfaceAnimatorProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.SurfaceAnimatorProto)
  SharedDtor();
}

void SurfaceAnimatorProto::SharedDtor() {
  if (this != internal_default_instance()) delete leash_;
  if (this != internal_default_instance()) delete animation_adapter_;
}

void SurfaceAnimatorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceAnimatorProto& SurfaceAnimatorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceAnimatorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fsurfaceanimator_2eproto.base);
  return *internal_default_instance();
}


void SurfaceAnimatorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.SurfaceAnimatorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(leash_ != nullptr);
      leash_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(animation_adapter_ != nullptr);
      animation_adapter_->Clear();
    }
  }
  animation_start_delayed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SurfaceAnimatorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.view.SurfaceControlProto leash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_leash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool animation_start_delayed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_animation_start_delayed(&has_bits);
          animation_start_delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.wm.AnimationAdapterProto animation_adapter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_animation_adapter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SurfaceAnimatorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.wm.SurfaceAnimatorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.view.SurfaceControlProto leash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_leash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool animation_start_delayed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_animation_start_delayed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animation_start_delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.wm.AnimationAdapterProto animation_adapter = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_animation_adapter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.SurfaceAnimatorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.SurfaceAnimatorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SurfaceAnimatorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.SurfaceAnimatorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.view.SurfaceControlProto leash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::leash(this), output);
  }

  // optional bool animation_start_delayed = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->animation_start_delayed(), output);
  }

  // optional .com.android.server.wm.AnimationAdapterProto animation_adapter = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::animation_adapter(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.SurfaceAnimatorProto)
}

size_t SurfaceAnimatorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.SurfaceAnimatorProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.view.SurfaceControlProto leash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leash_);
    }

    // optional .com.android.server.wm.AnimationAdapterProto animation_adapter = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *animation_adapter_);
    }

    // optional bool animation_start_delayed = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceAnimatorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SurfaceAnimatorProto*>(
      &from));
}

void SurfaceAnimatorProto::MergeFrom(const SurfaceAnimatorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.SurfaceAnimatorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_leash()->::android::view::SurfaceControlProto::MergeFrom(from.leash());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_animation_adapter()->::com::android::server::wm::AnimationAdapterProto::MergeFrom(from.animation_adapter());
    }
    if (cached_has_bits & 0x00000004u) {
      animation_start_delayed_ = from.animation_start_delayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SurfaceAnimatorProto::CopyFrom(const SurfaceAnimatorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.SurfaceAnimatorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceAnimatorProto::IsInitialized() const {
  return true;
}

void SurfaceAnimatorProto::InternalSwap(SurfaceAnimatorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(leash_, other->leash_);
  swap(animation_adapter_, other->animation_adapter_);
  swap(animation_start_delayed_, other->animation_start_delayed_);
}

std::string SurfaceAnimatorProto::GetTypeName() const {
  return "com.android.server.wm.SurfaceAnimatorProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::wm::SurfaceAnimatorProto* Arena::CreateMaybeMessage< ::com::android::server::wm::SurfaceAnimatorProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::SurfaceAnimatorProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
