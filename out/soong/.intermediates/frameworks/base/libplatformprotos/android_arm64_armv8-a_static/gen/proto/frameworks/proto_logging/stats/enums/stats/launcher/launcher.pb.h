// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/launcher/launcher.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2flauncher_2flauncher_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2flauncher_2flauncher_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2flauncher_2flauncher_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2flauncher_2flauncher_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace stats {
namespace launcher {
class LauncherExtension;
class LauncherExtensionDefaultTypeInternal;
extern LauncherExtensionDefaultTypeInternal _LauncherExtension_default_instance_;
class LauncherTarget;
class LauncherTargetDefaultTypeInternal;
extern LauncherTargetDefaultTypeInternal _LauncherTarget_default_instance_;
}  // namespace launcher
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::stats::launcher::LauncherExtension* Arena::CreateMaybeMessage<::android::stats::launcher::LauncherExtension>(Arena*);
template<> ::android::stats::launcher::LauncherTarget* Arena::CreateMaybeMessage<::android::stats::launcher::LauncherTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace stats {
namespace launcher {

enum LauncherTarget_Type : int {
  LauncherTarget_Type_NONE = 0,
  LauncherTarget_Type_ITEM_TYPE = 1,
  LauncherTarget_Type_CONTROL_TYPE = 2,
  LauncherTarget_Type_CONTAINER_TYPE = 3
};
bool LauncherTarget_Type_IsValid(int value);
constexpr LauncherTarget_Type LauncherTarget_Type_Type_MIN = LauncherTarget_Type_NONE;
constexpr LauncherTarget_Type LauncherTarget_Type_Type_MAX = LauncherTarget_Type_CONTAINER_TYPE;
constexpr int LauncherTarget_Type_Type_ARRAYSIZE = LauncherTarget_Type_Type_MAX + 1;

const std::string& LauncherTarget_Type_Name(LauncherTarget_Type value);
template<typename T>
inline const std::string& LauncherTarget_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LauncherTarget_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LauncherTarget_Type_Name.");
  return LauncherTarget_Type_Name(static_cast<LauncherTarget_Type>(enum_t_value));
}
bool LauncherTarget_Type_Parse(
    const std::string& name, LauncherTarget_Type* value);
enum LauncherTarget_Item : int {
  LauncherTarget_Item_DEFAULT_ITEM = 0,
  LauncherTarget_Item_APP_ICON = 1,
  LauncherTarget_Item_SHORTCUT = 2,
  LauncherTarget_Item_WIDGET = 3,
  LauncherTarget_Item_FOLDER_ICON = 4,
  LauncherTarget_Item_DEEPSHORTCUT = 5,
  LauncherTarget_Item_SEARCHBOX = 6,
  LauncherTarget_Item_EDITTEXT = 7,
  LauncherTarget_Item_NOTIFICATION = 8,
  LauncherTarget_Item_TASK = 9
};
bool LauncherTarget_Item_IsValid(int value);
constexpr LauncherTarget_Item LauncherTarget_Item_Item_MIN = LauncherTarget_Item_DEFAULT_ITEM;
constexpr LauncherTarget_Item LauncherTarget_Item_Item_MAX = LauncherTarget_Item_TASK;
constexpr int LauncherTarget_Item_Item_ARRAYSIZE = LauncherTarget_Item_Item_MAX + 1;

const std::string& LauncherTarget_Item_Name(LauncherTarget_Item value);
template<typename T>
inline const std::string& LauncherTarget_Item_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LauncherTarget_Item>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LauncherTarget_Item_Name.");
  return LauncherTarget_Item_Name(static_cast<LauncherTarget_Item>(enum_t_value));
}
bool LauncherTarget_Item_Parse(
    const std::string& name, LauncherTarget_Item* value);
enum LauncherTarget_Container : int {
  LauncherTarget_Container_DEFAULT_CONTAINER = 0,
  LauncherTarget_Container_HOTSEAT = 1,
  LauncherTarget_Container_FOLDER = 2,
  LauncherTarget_Container_PREDICTION = 3,
  LauncherTarget_Container_SEARCHRESULT = 4
};
bool LauncherTarget_Container_IsValid(int value);
constexpr LauncherTarget_Container LauncherTarget_Container_Container_MIN = LauncherTarget_Container_DEFAULT_CONTAINER;
constexpr LauncherTarget_Container LauncherTarget_Container_Container_MAX = LauncherTarget_Container_SEARCHRESULT;
constexpr int LauncherTarget_Container_Container_ARRAYSIZE = LauncherTarget_Container_Container_MAX + 1;

const std::string& LauncherTarget_Container_Name(LauncherTarget_Container value);
template<typename T>
inline const std::string& LauncherTarget_Container_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LauncherTarget_Container>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LauncherTarget_Container_Name.");
  return LauncherTarget_Container_Name(static_cast<LauncherTarget_Container>(enum_t_value));
}
bool LauncherTarget_Container_Parse(
    const std::string& name, LauncherTarget_Container* value);
enum LauncherTarget_Control : int {
  LauncherTarget_Control_DEFAULT_CONTROL = 0,
  LauncherTarget_Control_MENU = 1,
  LauncherTarget_Control_UNINSTALL = 2,
  LauncherTarget_Control_REMOVE = 3
};
bool LauncherTarget_Control_IsValid(int value);
constexpr LauncherTarget_Control LauncherTarget_Control_Control_MIN = LauncherTarget_Control_DEFAULT_CONTROL;
constexpr LauncherTarget_Control LauncherTarget_Control_Control_MAX = LauncherTarget_Control_REMOVE;
constexpr int LauncherTarget_Control_Control_ARRAYSIZE = LauncherTarget_Control_Control_MAX + 1;

const std::string& LauncherTarget_Control_Name(LauncherTarget_Control value);
template<typename T>
inline const std::string& LauncherTarget_Control_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LauncherTarget_Control>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LauncherTarget_Control_Name.");
  return LauncherTarget_Control_Name(static_cast<LauncherTarget_Control>(enum_t_value));
}
bool LauncherTarget_Control_Parse(
    const std::string& name, LauncherTarget_Control* value);
enum LauncherAction : int {
  DEFAULT_ACTION = 0,
  LAUNCH_APP = 1,
  LAUNCH_TASK = 2,
  DISMISS_TASK = 3,
  LONGPRESS = 4,
  DRAGDROP = 5,
  SWIPE_UP = 6,
  SWIPE_DOWN = 7,
  SWIPE_LEFT = 8,
  SWIPE_RIGHT = 9
};
bool LauncherAction_IsValid(int value);
constexpr LauncherAction LauncherAction_MIN = DEFAULT_ACTION;
constexpr LauncherAction LauncherAction_MAX = SWIPE_RIGHT;
constexpr int LauncherAction_ARRAYSIZE = LauncherAction_MAX + 1;

const std::string& LauncherAction_Name(LauncherAction value);
template<typename T>
inline const std::string& LauncherAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LauncherAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LauncherAction_Name.");
  return LauncherAction_Name(static_cast<LauncherAction>(enum_t_value));
}
bool LauncherAction_Parse(
    const std::string& name, LauncherAction* value);
enum LauncherState : int {
  LAUNCHER_STATE_UNSPECIFIED = 0,
  BACKGROUND = 1,
  HOME = 2,
  OVERVIEW = 3,
  ALLAPPS = 4,
  UNCHANGED = 5
};
bool LauncherState_IsValid(int value);
constexpr LauncherState LauncherState_MIN = LAUNCHER_STATE_UNSPECIFIED;
constexpr LauncherState LauncherState_MAX = UNCHANGED;
constexpr int LauncherState_ARRAYSIZE = LauncherState_MAX + 1;

const std::string& LauncherState_Name(LauncherState value);
template<typename T>
inline const std::string& LauncherState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LauncherState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LauncherState_Name.");
  return LauncherState_Name(static_cast<LauncherState>(enum_t_value));
}
bool LauncherState_Parse(
    const std::string& name, LauncherState* value);
// ===================================================================

class LauncherTarget :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.launcher.LauncherTarget) */ {
 public:
  LauncherTarget();
  virtual ~LauncherTarget();

  LauncherTarget(const LauncherTarget& from);
  LauncherTarget(LauncherTarget&& from) noexcept
    : LauncherTarget() {
    *this = ::std::move(from);
  }

  inline LauncherTarget& operator=(const LauncherTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline LauncherTarget& operator=(LauncherTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LauncherTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LauncherTarget* internal_default_instance() {
    return reinterpret_cast<const LauncherTarget*>(
               &_LauncherTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LauncherTarget& a, LauncherTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(LauncherTarget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LauncherTarget* New() const final {
    return CreateMaybeMessage<LauncherTarget>(nullptr);
  }

  LauncherTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LauncherTarget>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LauncherTarget& from);
  void MergeFrom(const LauncherTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LauncherTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.launcher.LauncherTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LauncherTarget_Type Type;
  static constexpr Type NONE =
    LauncherTarget_Type_NONE;
  static constexpr Type ITEM_TYPE =
    LauncherTarget_Type_ITEM_TYPE;
  static constexpr Type CONTROL_TYPE =
    LauncherTarget_Type_CONTROL_TYPE;
  static constexpr Type CONTAINER_TYPE =
    LauncherTarget_Type_CONTAINER_TYPE;
  static inline bool Type_IsValid(int value) {
    return LauncherTarget_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LauncherTarget_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LauncherTarget_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LauncherTarget_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LauncherTarget_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return LauncherTarget_Type_Parse(name, value);
  }

  typedef LauncherTarget_Item Item;
  static constexpr Item DEFAULT_ITEM =
    LauncherTarget_Item_DEFAULT_ITEM;
  static constexpr Item APP_ICON =
    LauncherTarget_Item_APP_ICON;
  static constexpr Item SHORTCUT =
    LauncherTarget_Item_SHORTCUT;
  static constexpr Item WIDGET =
    LauncherTarget_Item_WIDGET;
  static constexpr Item FOLDER_ICON =
    LauncherTarget_Item_FOLDER_ICON;
  static constexpr Item DEEPSHORTCUT =
    LauncherTarget_Item_DEEPSHORTCUT;
  static constexpr Item SEARCHBOX =
    LauncherTarget_Item_SEARCHBOX;
  static constexpr Item EDITTEXT =
    LauncherTarget_Item_EDITTEXT;
  static constexpr Item NOTIFICATION =
    LauncherTarget_Item_NOTIFICATION;
  static constexpr Item TASK =
    LauncherTarget_Item_TASK;
  static inline bool Item_IsValid(int value) {
    return LauncherTarget_Item_IsValid(value);
  }
  static constexpr Item Item_MIN =
    LauncherTarget_Item_Item_MIN;
  static constexpr Item Item_MAX =
    LauncherTarget_Item_Item_MAX;
  static constexpr int Item_ARRAYSIZE =
    LauncherTarget_Item_Item_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Item_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Item>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Item_Name.");
    return LauncherTarget_Item_Name(enum_t_value);
  }
  static inline bool Item_Parse(const std::string& name,
      Item* value) {
    return LauncherTarget_Item_Parse(name, value);
  }

  typedef LauncherTarget_Container Container;
  static constexpr Container DEFAULT_CONTAINER =
    LauncherTarget_Container_DEFAULT_CONTAINER;
  static constexpr Container HOTSEAT =
    LauncherTarget_Container_HOTSEAT;
  static constexpr Container FOLDER =
    LauncherTarget_Container_FOLDER;
  static constexpr Container PREDICTION =
    LauncherTarget_Container_PREDICTION;
  static constexpr Container SEARCHRESULT =
    LauncherTarget_Container_SEARCHRESULT;
  static inline bool Container_IsValid(int value) {
    return LauncherTarget_Container_IsValid(value);
  }
  static constexpr Container Container_MIN =
    LauncherTarget_Container_Container_MIN;
  static constexpr Container Container_MAX =
    LauncherTarget_Container_Container_MAX;
  static constexpr int Container_ARRAYSIZE =
    LauncherTarget_Container_Container_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Container_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Container>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Container_Name.");
    return LauncherTarget_Container_Name(enum_t_value);
  }
  static inline bool Container_Parse(const std::string& name,
      Container* value) {
    return LauncherTarget_Container_Parse(name, value);
  }

  typedef LauncherTarget_Control Control;
  static constexpr Control DEFAULT_CONTROL =
    LauncherTarget_Control_DEFAULT_CONTROL;
  static constexpr Control MENU =
    LauncherTarget_Control_MENU;
  static constexpr Control UNINSTALL =
    LauncherTarget_Control_UNINSTALL;
  static constexpr Control REMOVE =
    LauncherTarget_Control_REMOVE;
  static inline bool Control_IsValid(int value) {
    return LauncherTarget_Control_IsValid(value);
  }
  static constexpr Control Control_MIN =
    LauncherTarget_Control_Control_MIN;
  static constexpr Control Control_MAX =
    LauncherTarget_Control_Control_MAX;
  static constexpr int Control_ARRAYSIZE =
    LauncherTarget_Control_Control_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Control_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Control>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Control_Name.");
    return LauncherTarget_Control_Name(enum_t_value);
  }
  static inline bool Control_Parse(const std::string& name,
      Control* value) {
    return LauncherTarget_Control_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLaunchComponentFieldNumber = 5,
    kTypeFieldNumber = 1,
    kItemFieldNumber = 2,
    kContainerFieldNumber = 3,
    kControlFieldNumber = 4,
    kPageIdFieldNumber = 6,
    kGridXFieldNumber = 7,
    kGridYFieldNumber = 8,
  };
  // optional string launch_component = 5;
  bool has_launch_component() const;
  void clear_launch_component();
  const std::string& launch_component() const;
  void set_launch_component(const std::string& value);
  void set_launch_component(std::string&& value);
  void set_launch_component(const char* value);
  void set_launch_component(const char* value, size_t size);
  std::string* mutable_launch_component();
  std::string* release_launch_component();
  void set_allocated_launch_component(std::string* launch_component);

  // optional .android.stats.launcher.LauncherTarget.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::android::stats::launcher::LauncherTarget_Type type() const;
  void set_type(::android::stats::launcher::LauncherTarget_Type value);

  // optional .android.stats.launcher.LauncherTarget.Item item = 2;
  bool has_item() const;
  void clear_item();
  ::android::stats::launcher::LauncherTarget_Item item() const;
  void set_item(::android::stats::launcher::LauncherTarget_Item value);

  // optional .android.stats.launcher.LauncherTarget.Container container = 3;
  bool has_container() const;
  void clear_container();
  ::android::stats::launcher::LauncherTarget_Container container() const;
  void set_container(::android::stats::launcher::LauncherTarget_Container value);

  // optional .android.stats.launcher.LauncherTarget.Control control = 4;
  bool has_control() const;
  void clear_control();
  ::android::stats::launcher::LauncherTarget_Control control() const;
  void set_control(::android::stats::launcher::LauncherTarget_Control value);

  // optional int32 page_id = 6;
  bool has_page_id() const;
  void clear_page_id();
  ::PROTOBUF_NAMESPACE_ID::int32 page_id() const;
  void set_page_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 grid_x = 7;
  bool has_grid_x() const;
  void clear_grid_x();
  ::PROTOBUF_NAMESPACE_ID::int32 grid_x() const;
  void set_grid_x(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 grid_y = 8;
  bool has_grid_y() const;
  void clear_grid_y();
  ::PROTOBUF_NAMESPACE_ID::int32 grid_y() const;
  void set_grid_y(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.stats.launcher.LauncherTarget)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launch_component_;
  int type_;
  int item_;
  int container_;
  int control_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 grid_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 grid_y_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2flauncher_2flauncher_2eproto;
};
// -------------------------------------------------------------------

class LauncherExtension :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.launcher.LauncherExtension) */ {
 public:
  LauncherExtension();
  virtual ~LauncherExtension();

  LauncherExtension(const LauncherExtension& from);
  LauncherExtension(LauncherExtension&& from) noexcept
    : LauncherExtension() {
    *this = ::std::move(from);
  }

  inline LauncherExtension& operator=(const LauncherExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline LauncherExtension& operator=(LauncherExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LauncherExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LauncherExtension* internal_default_instance() {
    return reinterpret_cast<const LauncherExtension*>(
               &_LauncherExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LauncherExtension& a, LauncherExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(LauncherExtension* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LauncherExtension* New() const final {
    return CreateMaybeMessage<LauncherExtension>(nullptr);
  }

  LauncherExtension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LauncherExtension>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LauncherExtension& from);
  void MergeFrom(const LauncherExtension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LauncherExtension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.launcher.LauncherExtension";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcTargetFieldNumber = 1,
    kDstTargetFieldNumber = 2,
  };
  // repeated .android.stats.launcher.LauncherTarget src_target = 1;
  int src_target_size() const;
  void clear_src_target();
  ::android::stats::launcher::LauncherTarget* mutable_src_target(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget >*
      mutable_src_target();
  const ::android::stats::launcher::LauncherTarget& src_target(int index) const;
  ::android::stats::launcher::LauncherTarget* add_src_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget >&
      src_target() const;

  // repeated .android.stats.launcher.LauncherTarget dst_target = 2;
  int dst_target_size() const;
  void clear_dst_target();
  ::android::stats::launcher::LauncherTarget* mutable_dst_target(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget >*
      mutable_dst_target();
  const ::android::stats::launcher::LauncherTarget& dst_target(int index) const;
  ::android::stats::launcher::LauncherTarget* add_dst_target();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget >&
      dst_target() const;

  // @@protoc_insertion_point(class_scope:android.stats.launcher.LauncherExtension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget > src_target_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget > dst_target_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2flauncher_2flauncher_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LauncherTarget

// optional .android.stats.launcher.LauncherTarget.Type type = 1;
inline bool LauncherTarget::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LauncherTarget::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::stats::launcher::LauncherTarget_Type LauncherTarget::type() const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherTarget.type)
  return static_cast< ::android::stats::launcher::LauncherTarget_Type >(type_);
}
inline void LauncherTarget::set_type(::android::stats::launcher::LauncherTarget_Type value) {
  assert(::android::stats::launcher::LauncherTarget_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:android.stats.launcher.LauncherTarget.type)
}

// optional .android.stats.launcher.LauncherTarget.Item item = 2;
inline bool LauncherTarget::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LauncherTarget::clear_item() {
  item_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::stats::launcher::LauncherTarget_Item LauncherTarget::item() const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherTarget.item)
  return static_cast< ::android::stats::launcher::LauncherTarget_Item >(item_);
}
inline void LauncherTarget::set_item(::android::stats::launcher::LauncherTarget_Item value) {
  assert(::android::stats::launcher::LauncherTarget_Item_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  item_ = value;
  // @@protoc_insertion_point(field_set:android.stats.launcher.LauncherTarget.item)
}

// optional .android.stats.launcher.LauncherTarget.Container container = 3;
inline bool LauncherTarget::has_container() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LauncherTarget::clear_container() {
  container_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::android::stats::launcher::LauncherTarget_Container LauncherTarget::container() const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherTarget.container)
  return static_cast< ::android::stats::launcher::LauncherTarget_Container >(container_);
}
inline void LauncherTarget::set_container(::android::stats::launcher::LauncherTarget_Container value) {
  assert(::android::stats::launcher::LauncherTarget_Container_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  container_ = value;
  // @@protoc_insertion_point(field_set:android.stats.launcher.LauncherTarget.container)
}

// optional .android.stats.launcher.LauncherTarget.Control control = 4;
inline bool LauncherTarget::has_control() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LauncherTarget::clear_control() {
  control_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::stats::launcher::LauncherTarget_Control LauncherTarget::control() const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherTarget.control)
  return static_cast< ::android::stats::launcher::LauncherTarget_Control >(control_);
}
inline void LauncherTarget::set_control(::android::stats::launcher::LauncherTarget_Control value) {
  assert(::android::stats::launcher::LauncherTarget_Control_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  control_ = value;
  // @@protoc_insertion_point(field_set:android.stats.launcher.LauncherTarget.control)
}

// optional string launch_component = 5;
inline bool LauncherTarget::has_launch_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LauncherTarget::clear_launch_component() {
  launch_component_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LauncherTarget::launch_component() const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherTarget.launch_component)
  return launch_component_.GetNoArena();
}
inline void LauncherTarget::set_launch_component(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  launch_component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.launcher.LauncherTarget.launch_component)
}
inline void LauncherTarget::set_launch_component(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  launch_component_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.launcher.LauncherTarget.launch_component)
}
inline void LauncherTarget::set_launch_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  launch_component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.launcher.LauncherTarget.launch_component)
}
inline void LauncherTarget::set_launch_component(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  launch_component_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.launcher.LauncherTarget.launch_component)
}
inline std::string* LauncherTarget::mutable_launch_component() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.launcher.LauncherTarget.launch_component)
  return launch_component_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LauncherTarget::release_launch_component() {
  // @@protoc_insertion_point(field_release:android.stats.launcher.LauncherTarget.launch_component)
  if (!has_launch_component()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return launch_component_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LauncherTarget::set_allocated_launch_component(std::string* launch_component) {
  if (launch_component != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  launch_component_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), launch_component);
  // @@protoc_insertion_point(field_set_allocated:android.stats.launcher.LauncherTarget.launch_component)
}

// optional int32 page_id = 6;
inline bool LauncherTarget::has_page_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LauncherTarget::clear_page_id() {
  page_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LauncherTarget::page_id() const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherTarget.page_id)
  return page_id_;
}
inline void LauncherTarget::set_page_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  page_id_ = value;
  // @@protoc_insertion_point(field_set:android.stats.launcher.LauncherTarget.page_id)
}

// optional int32 grid_x = 7;
inline bool LauncherTarget::has_grid_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LauncherTarget::clear_grid_x() {
  grid_x_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LauncherTarget::grid_x() const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherTarget.grid_x)
  return grid_x_;
}
inline void LauncherTarget::set_grid_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  grid_x_ = value;
  // @@protoc_insertion_point(field_set:android.stats.launcher.LauncherTarget.grid_x)
}

// optional int32 grid_y = 8;
inline bool LauncherTarget::has_grid_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LauncherTarget::clear_grid_y() {
  grid_y_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LauncherTarget::grid_y() const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherTarget.grid_y)
  return grid_y_;
}
inline void LauncherTarget::set_grid_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  grid_y_ = value;
  // @@protoc_insertion_point(field_set:android.stats.launcher.LauncherTarget.grid_y)
}

// -------------------------------------------------------------------

// LauncherExtension

// repeated .android.stats.launcher.LauncherTarget src_target = 1;
inline int LauncherExtension::src_target_size() const {
  return src_target_.size();
}
inline void LauncherExtension::clear_src_target() {
  src_target_.Clear();
}
inline ::android::stats::launcher::LauncherTarget* LauncherExtension::mutable_src_target(int index) {
  // @@protoc_insertion_point(field_mutable:android.stats.launcher.LauncherExtension.src_target)
  return src_target_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget >*
LauncherExtension::mutable_src_target() {
  // @@protoc_insertion_point(field_mutable_list:android.stats.launcher.LauncherExtension.src_target)
  return &src_target_;
}
inline const ::android::stats::launcher::LauncherTarget& LauncherExtension::src_target(int index) const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherExtension.src_target)
  return src_target_.Get(index);
}
inline ::android::stats::launcher::LauncherTarget* LauncherExtension::add_src_target() {
  // @@protoc_insertion_point(field_add:android.stats.launcher.LauncherExtension.src_target)
  return src_target_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget >&
LauncherExtension::src_target() const {
  // @@protoc_insertion_point(field_list:android.stats.launcher.LauncherExtension.src_target)
  return src_target_;
}

// repeated .android.stats.launcher.LauncherTarget dst_target = 2;
inline int LauncherExtension::dst_target_size() const {
  return dst_target_.size();
}
inline void LauncherExtension::clear_dst_target() {
  dst_target_.Clear();
}
inline ::android::stats::launcher::LauncherTarget* LauncherExtension::mutable_dst_target(int index) {
  // @@protoc_insertion_point(field_mutable:android.stats.launcher.LauncherExtension.dst_target)
  return dst_target_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget >*
LauncherExtension::mutable_dst_target() {
  // @@protoc_insertion_point(field_mutable_list:android.stats.launcher.LauncherExtension.dst_target)
  return &dst_target_;
}
inline const ::android::stats::launcher::LauncherTarget& LauncherExtension::dst_target(int index) const {
  // @@protoc_insertion_point(field_get:android.stats.launcher.LauncherExtension.dst_target)
  return dst_target_.Get(index);
}
inline ::android::stats::launcher::LauncherTarget* LauncherExtension::add_dst_target() {
  // @@protoc_insertion_point(field_add:android.stats.launcher.LauncherExtension.dst_target)
  return dst_target_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::stats::launcher::LauncherTarget >&
LauncherExtension::dst_target() const {
  // @@protoc_insertion_point(field_list:android.stats.launcher.LauncherExtension.dst_target)
  return dst_target_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace launcher
}  // namespace stats
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::stats::launcher::LauncherTarget_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::launcher::LauncherTarget_Item> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::launcher::LauncherTarget_Container> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::launcher::LauncherTarget_Control> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::launcher::LauncherAction> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::launcher::LauncherState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2flauncher_2flauncher_2eproto
