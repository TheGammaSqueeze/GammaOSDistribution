// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/statusbarmanager.proto

#include "frameworks/base/core/proto/android/app/statusbarmanager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace app {
class StatusBarManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusBarManagerProto> _instance;
} _StatusBarManagerProto_default_instance_;
}  // namespace app
}  // namespace android
static void InitDefaultsscc_info_StatusBarManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fstatusbarmanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::app::_StatusBarManagerProto_default_instance_;
    new (ptr) ::android::app::StatusBarManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::app::StatusBarManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusBarManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fstatusbarmanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StatusBarManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fstatusbarmanager_2eproto}, {}};

namespace android {
namespace app {
bool StatusBarManagerProto_WindowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StatusBarManagerProto_WindowState_strings[3] = {};

static const char StatusBarManagerProto_WindowState_names[] =
  "WINDOW_STATE_HIDDEN"
  "WINDOW_STATE_HIDING"
  "WINDOW_STATE_SHOWING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StatusBarManagerProto_WindowState_entries[] = {
  { {StatusBarManagerProto_WindowState_names + 0, 19}, 2 },
  { {StatusBarManagerProto_WindowState_names + 19, 19}, 1 },
  { {StatusBarManagerProto_WindowState_names + 38, 20}, 0 },
};

static const int StatusBarManagerProto_WindowState_entries_by_number[] = {
  2, // 0 -> WINDOW_STATE_SHOWING
  1, // 1 -> WINDOW_STATE_HIDING
  0, // 2 -> WINDOW_STATE_HIDDEN
};

const std::string& StatusBarManagerProto_WindowState_Name(
    StatusBarManagerProto_WindowState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StatusBarManagerProto_WindowState_entries,
          StatusBarManagerProto_WindowState_entries_by_number,
          3, StatusBarManagerProto_WindowState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StatusBarManagerProto_WindowState_entries,
      StatusBarManagerProto_WindowState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StatusBarManagerProto_WindowState_strings[idx].get();
}
bool StatusBarManagerProto_WindowState_Parse(
    const std::string& name, StatusBarManagerProto_WindowState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StatusBarManagerProto_WindowState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<StatusBarManagerProto_WindowState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StatusBarManagerProto_WindowState StatusBarManagerProto::WINDOW_STATE_SHOWING;
constexpr StatusBarManagerProto_WindowState StatusBarManagerProto::WINDOW_STATE_HIDING;
constexpr StatusBarManagerProto_WindowState StatusBarManagerProto::WINDOW_STATE_HIDDEN;
constexpr StatusBarManagerProto_WindowState StatusBarManagerProto::WindowState_MIN;
constexpr StatusBarManagerProto_WindowState StatusBarManagerProto::WindowState_MAX;
constexpr int StatusBarManagerProto::WindowState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StatusBarManagerProto_TransientWindowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StatusBarManagerProto_TransientWindowState_strings[4] = {};

static const char StatusBarManagerProto_TransientWindowState_names[] =
  "TRANSIENT_BAR_HIDING"
  "TRANSIENT_BAR_NONE"
  "TRANSIENT_BAR_SHOWING"
  "TRANSIENT_BAR_SHOW_REQUESTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StatusBarManagerProto_TransientWindowState_entries[] = {
  { {StatusBarManagerProto_TransientWindowState_names + 0, 20}, 3 },
  { {StatusBarManagerProto_TransientWindowState_names + 20, 18}, 0 },
  { {StatusBarManagerProto_TransientWindowState_names + 38, 21}, 2 },
  { {StatusBarManagerProto_TransientWindowState_names + 59, 28}, 1 },
};

static const int StatusBarManagerProto_TransientWindowState_entries_by_number[] = {
  1, // 0 -> TRANSIENT_BAR_NONE
  3, // 1 -> TRANSIENT_BAR_SHOW_REQUESTED
  2, // 2 -> TRANSIENT_BAR_SHOWING
  0, // 3 -> TRANSIENT_BAR_HIDING
};

const std::string& StatusBarManagerProto_TransientWindowState_Name(
    StatusBarManagerProto_TransientWindowState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StatusBarManagerProto_TransientWindowState_entries,
          StatusBarManagerProto_TransientWindowState_entries_by_number,
          4, StatusBarManagerProto_TransientWindowState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StatusBarManagerProto_TransientWindowState_entries,
      StatusBarManagerProto_TransientWindowState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StatusBarManagerProto_TransientWindowState_strings[idx].get();
}
bool StatusBarManagerProto_TransientWindowState_Parse(
    const std::string& name, StatusBarManagerProto_TransientWindowState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StatusBarManagerProto_TransientWindowState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<StatusBarManagerProto_TransientWindowState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StatusBarManagerProto_TransientWindowState StatusBarManagerProto::TRANSIENT_BAR_NONE;
constexpr StatusBarManagerProto_TransientWindowState StatusBarManagerProto::TRANSIENT_BAR_SHOW_REQUESTED;
constexpr StatusBarManagerProto_TransientWindowState StatusBarManagerProto::TRANSIENT_BAR_SHOWING;
constexpr StatusBarManagerProto_TransientWindowState StatusBarManagerProto::TRANSIENT_BAR_HIDING;
constexpr StatusBarManagerProto_TransientWindowState StatusBarManagerProto::TransientWindowState_MIN;
constexpr StatusBarManagerProto_TransientWindowState StatusBarManagerProto::TransientWindowState_MAX;
constexpr int StatusBarManagerProto::TransientWindowState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StatusBarManagerProto::InitAsDefaultInstance() {
}
class StatusBarManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusBarManagerProto>()._has_bits_);
};

StatusBarManagerProto::StatusBarManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.app.StatusBarManagerProto)
}
StatusBarManagerProto::StatusBarManagerProto(const StatusBarManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.app.StatusBarManagerProto)
}

void StatusBarManagerProto::SharedCtor() {
}

StatusBarManagerProto::~StatusBarManagerProto() {
  // @@protoc_insertion_point(destructor:android.app.StatusBarManagerProto)
  SharedDtor();
}

void StatusBarManagerProto::SharedDtor() {
}

void StatusBarManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusBarManagerProto& StatusBarManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusBarManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fstatusbarmanager_2eproto.base);
  return *internal_default_instance();
}


void StatusBarManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.app.StatusBarManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatusBarManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatusBarManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.app.StatusBarManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:android.app.StatusBarManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.app.StatusBarManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatusBarManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.app.StatusBarManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.app.StatusBarManagerProto)
}

size_t StatusBarManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.app.StatusBarManagerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusBarManagerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StatusBarManagerProto*>(
      &from));
}

void StatusBarManagerProto::MergeFrom(const StatusBarManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.app.StatusBarManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StatusBarManagerProto::CopyFrom(const StatusBarManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.app.StatusBarManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusBarManagerProto::IsInitialized() const {
  return true;
}

void StatusBarManagerProto::InternalSwap(StatusBarManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string StatusBarManagerProto::GetTypeName() const {
  return "android.app.StatusBarManagerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::app::StatusBarManagerProto* Arena::CreateMaybeMessage< ::android::app::StatusBarManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::app::StatusBarManagerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
