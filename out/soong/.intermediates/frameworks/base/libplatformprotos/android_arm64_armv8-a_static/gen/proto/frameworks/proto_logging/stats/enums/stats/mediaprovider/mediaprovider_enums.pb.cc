// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/mediaprovider/mediaprovider_enums.proto

#include "frameworks/proto_logging/stats/enums/stats/mediaprovider/mediaprovider_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace mediaprovider {
}  // namespace mediaprovider
}  // namespace stats
}  // namespace android
namespace android {
namespace stats {
namespace mediaprovider {
bool VolumeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VolumeType_strings[4] = {};

static const char VolumeType_names[] =
  "EXTERNAL_OTHER"
  "EXTERNAL_PRIMARY"
  "INTERNAL"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VolumeType_entries[] = {
  { {VolumeType_names + 0, 14}, 3 },
  { {VolumeType_names + 14, 16}, 2 },
  { {VolumeType_names + 30, 8}, 1 },
  { {VolumeType_names + 38, 7}, 0 },
};

static const int VolumeType_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  2, // 1 -> INTERNAL
  1, // 2 -> EXTERNAL_PRIMARY
  0, // 3 -> EXTERNAL_OTHER
};

const std::string& VolumeType_Name(
    VolumeType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VolumeType_entries,
          VolumeType_entries_by_number,
          4, VolumeType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VolumeType_entries,
      VolumeType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VolumeType_strings[idx].get();
}
bool VolumeType_Parse(
    const std::string& name, VolumeType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VolumeType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<VolumeType>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediaprovider
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
