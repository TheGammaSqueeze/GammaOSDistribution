// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/tv/tif_enums.proto

#include "frameworks/proto_logging/stats/enums/stats/tv/tif_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace tv {
}  // namespace tv
}  // namespace stats
}  // namespace android
namespace android {
namespace stats {
namespace tv {
bool TifTuneState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TifTuneState_strings[26] = {};

static const char TifTuneState_names[] =
  "CREATED"
  "RELEASED"
  "SURFACE_ATTACHED"
  "SURFACE_DETACHED"
  "TIF_TUNE_STATE_UNKNOWN"
  "TUNE_STARTED"
  "VIDEO_AVAILABLE"
  "VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY"
  "VIDEO_UNAVAILABLE_REASON_BUFFERING"
  "VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT"
  "VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID"
  "VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE"
  "VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION"
  "VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED"
  "VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION"
  "VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING"
  "VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD"
  "VIDEO_UNAVAILABLE_REASON_CAS_NO_LICENSE"
  "VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED"
  "VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING"
  "VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN"
  "VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE"
  "VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED"
  "VIDEO_UNAVAILABLE_REASON_TUNING"
  "VIDEO_UNAVAILABLE_REASON_UNKNOWN"
  "VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TifTuneState_entries[] = {
  { {TifTuneState_names + 0, 7}, 1 },
  { {TifTuneState_names + 7, 8}, 4 },
  { {TifTuneState_names + 15, 16}, 2 },
  { {TifTuneState_names + 31, 16}, 3 },
  { {TifTuneState_names + 47, 22}, 0 },
  { {TifTuneState_names + 69, 12}, 5 },
  { {TifTuneState_names + 81, 15}, 6 },
  { {TifTuneState_names + 96, 35}, 104 },
  { {TifTuneState_names + 131, 34}, 103 },
  { {TifTuneState_names + 165, 37}, 116 },
  { {TifTuneState_names + 202, 41}, 115 },
  { {TifTuneState_names + 243, 38}, 114 },
  { {TifTuneState_names + 281, 59}, 107 },
  { {TifTuneState_names + 340, 44}, 110 },
  { {TifTuneState_names + 384, 44}, 111 },
  { {TifTuneState_names + 428, 41}, 112 },
  { {TifTuneState_names + 469, 36}, 113 },
  { {TifTuneState_names + 505, 39}, 109 },
  { {TifTuneState_names + 544, 54}, 108 },
  { {TifTuneState_names + 598, 38}, 117 },
  { {TifTuneState_names + 636, 36}, 118 },
  { {TifTuneState_names + 672, 46}, 106 },
  { {TifTuneState_names + 718, 38}, 105 },
  { {TifTuneState_names + 756, 31}, 101 },
  { {TifTuneState_names + 787, 32}, 100 },
  { {TifTuneState_names + 819, 36}, 102 },
};

static const int TifTuneState_entries_by_number[] = {
  4, // 0 -> TIF_TUNE_STATE_UNKNOWN
  0, // 1 -> CREATED
  2, // 2 -> SURFACE_ATTACHED
  3, // 3 -> SURFACE_DETACHED
  1, // 4 -> RELEASED
  5, // 5 -> TUNE_STARTED
  6, // 6 -> VIDEO_AVAILABLE
  24, // 100 -> VIDEO_UNAVAILABLE_REASON_UNKNOWN
  23, // 101 -> VIDEO_UNAVAILABLE_REASON_TUNING
  25, // 102 -> VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL
  8, // 103 -> VIDEO_UNAVAILABLE_REASON_BUFFERING
  7, // 104 -> VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY
  22, // 105 -> VIDEO_UNAVAILABLE_REASON_NOT_CONNECTED
  21, // 106 -> VIDEO_UNAVAILABLE_REASON_INSUFFICIENT_RESOURCE
  12, // 107 -> VIDEO_UNAVAILABLE_REASON_CAS_INSUFFICIENT_OUTPUT_PROTECTION
  18, // 108 -> VIDEO_UNAVAILABLE_REASON_CAS_PVR_RECORDING_NOT_ALLOWED
  17, // 109 -> VIDEO_UNAVAILABLE_REASON_CAS_NO_LICENSE
  13, // 110 -> VIDEO_UNAVAILABLE_REASON_CAS_LICENSE_EXPIRED
  14, // 111 -> VIDEO_UNAVAILABLE_REASON_CAS_NEED_ACTIVATION
  15, // 112 -> VIDEO_UNAVAILABLE_REASON_CAS_NEED_PAIRING
  16, // 113 -> VIDEO_UNAVAILABLE_REASON_CAS_NO_CARD
  11, // 114 -> VIDEO_UNAVAILABLE_REASON_CAS_CARD_MUTE
  10, // 115 -> VIDEO_UNAVAILABLE_REASON_CAS_CARD_INVALID
  9, // 116 -> VIDEO_UNAVAILABLE_REASON_CAS_BLACKOUT
  19, // 117 -> VIDEO_UNAVAILABLE_REASON_CAS_REBOOTING
  20, // 118 -> VIDEO_UNAVAILABLE_REASON_CAS_UNKNOWN
};

const std::string& TifTuneState_Name(
    TifTuneState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TifTuneState_entries,
          TifTuneState_entries_by_number,
          26, TifTuneState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TifTuneState_entries,
      TifTuneState_entries_by_number,
      26, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TifTuneState_strings[idx].get();
}
bool TifTuneState_Parse(
    const std::string& name, TifTuneState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TifTuneState_entries, 26, name, &int_value);
  if (success) {
    *value = static_cast<TifTuneState>(int_value);
  }
  return success;
}
bool TifInputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TifInputType_strings[11] = {};

static const char TifInputType_names[] =
  "COMPONENT"
  "COMPOSITE"
  "DISPLAY_PORT"
  "DVI"
  "HDMI"
  "OTHER"
  "SCART"
  "SVIDEO"
  "TIF_INPUT_TYPE_UNKNOWN"
  "TUNER"
  "VGA";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TifInputType_entries[] = {
  { {TifInputType_names + 0, 9}, 1004 },
  { {TifInputType_names + 9, 9}, 1001 },
  { {TifInputType_names + 18, 12}, 1008 },
  { {TifInputType_names + 30, 3}, 1006 },
  { {TifInputType_names + 33, 4}, 1007 },
  { {TifInputType_names + 37, 5}, 1000 },
  { {TifInputType_names + 42, 5}, 1003 },
  { {TifInputType_names + 47, 6}, 1002 },
  { {TifInputType_names + 53, 22}, 0 },
  { {TifInputType_names + 75, 5}, 1 },
  { {TifInputType_names + 80, 3}, 1005 },
};

static const int TifInputType_entries_by_number[] = {
  8, // 0 -> TIF_INPUT_TYPE_UNKNOWN
  9, // 1 -> TUNER
  5, // 1000 -> OTHER
  1, // 1001 -> COMPOSITE
  7, // 1002 -> SVIDEO
  6, // 1003 -> SCART
  0, // 1004 -> COMPONENT
  10, // 1005 -> VGA
  3, // 1006 -> DVI
  4, // 1007 -> HDMI
  2, // 1008 -> DISPLAY_PORT
};

const std::string& TifInputType_Name(
    TifInputType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TifInputType_entries,
          TifInputType_entries_by_number,
          11, TifInputType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TifInputType_entries,
      TifInputType_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TifInputType_strings[idx].get();
}
bool TifInputType_Parse(
    const std::string& name, TifInputType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TifInputType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<TifInputType>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tv
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
