// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/activitymanagerservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/app/activitymanager.pb.h"
#include "frameworks/base/core/proto/android/app/appexitinfo.pb.h"
#include "frameworks/base/core/proto/android/app/notification.pb.h"
#include "frameworks/base/core/proto/android/app/profilerinfo.pb.h"
#include "frameworks/base/core/proto/android/content/component_name.pb.h"
#include "frameworks/base/core/proto/android/content/configuration.pb.h"
#include "frameworks/base/core/proto/android/content/intent.pb.h"
#include "frameworks/base/core/proto/android/content/package_item_info.pb.h"
#include "frameworks/base/core/proto/android/internal/processstats.pb.h"
#include "frameworks/base/core/proto/android/os/bundle.pb.h"
#include "frameworks/base/core/proto/android/os/looper.pb.h"
#include "frameworks/base/core/proto/android/os/powermanager.pb.h"
#include "frameworks/base/core/proto/android/server/intentresolver.pb.h"
#include "frameworks/base/core/proto/android/server/windowmanagerservice.pb.h"
#include "frameworks/base/core/proto/android/util/common.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
#include "frameworks/proto_logging/stats/enums/app/enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[76]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace am {
class ActiveInstrumentationProto;
class ActiveInstrumentationProtoDefaultTypeInternal;
extern ActiveInstrumentationProtoDefaultTypeInternal _ActiveInstrumentationProto_default_instance_;
class ActiveServicesProto;
class ActiveServicesProtoDefaultTypeInternal;
extern ActiveServicesProtoDefaultTypeInternal _ActiveServicesProto_default_instance_;
class ActiveServicesProto_ServicesByUser;
class ActiveServicesProto_ServicesByUserDefaultTypeInternal;
extern ActiveServicesProto_ServicesByUserDefaultTypeInternal _ActiveServicesProto_ServicesByUser_default_instance_;
class ActivityManagerServiceDumpActivitiesProto;
class ActivityManagerServiceDumpActivitiesProtoDefaultTypeInternal;
extern ActivityManagerServiceDumpActivitiesProtoDefaultTypeInternal _ActivityManagerServiceDumpActivitiesProto_default_instance_;
class ActivityManagerServiceDumpBroadcastsProto;
class ActivityManagerServiceDumpBroadcastsProtoDefaultTypeInternal;
extern ActivityManagerServiceDumpBroadcastsProtoDefaultTypeInternal _ActivityManagerServiceDumpBroadcastsProto_default_instance_;
class ActivityManagerServiceDumpBroadcastsProto_MainHandler;
class ActivityManagerServiceDumpBroadcastsProto_MainHandlerDefaultTypeInternal;
extern ActivityManagerServiceDumpBroadcastsProto_MainHandlerDefaultTypeInternal _ActivityManagerServiceDumpBroadcastsProto_MainHandler_default_instance_;
class ActivityManagerServiceDumpProcessesProto;
class ActivityManagerServiceDumpProcessesProtoDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProtoDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_default_instance_;
class ActivityManagerServiceDumpProcessesProto_Controller;
class ActivityManagerServiceDumpProcessesProto_ControllerDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_ControllerDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_Controller_default_instance_;
class ActivityManagerServiceDumpProcessesProto_DebugApp;
class ActivityManagerServiceDumpProcessesProto_DebugAppDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_DebugAppDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_DebugApp_default_instance_;
class ActivityManagerServiceDumpProcessesProto_LruProcesses;
class ActivityManagerServiceDumpProcessesProto_LruProcessesDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_LruProcessesDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_LruProcesses_default_instance_;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcessDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_MemWatchProcessDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_MemWatchProcess_default_instance_;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_DumpDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_MemWatchProcess_DumpDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_default_instance_;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_ProcessDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_MemWatchProcess_ProcessDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_default_instance_;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats;
class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStatsDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStatsDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_default_instance_;
class ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist;
class ActivityManagerServiceDumpProcessesProto_PendingTempWhitelistDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_PendingTempWhitelistDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_default_instance_;
class ActivityManagerServiceDumpProcessesProto_Profile;
class ActivityManagerServiceDumpProcessesProto_ProfileDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_ProfileDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_Profile_default_instance_;
class ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage;
class ActivityManagerServiceDumpProcessesProto_ScreenCompatPackageDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_ScreenCompatPackageDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_default_instance_;
class ActivityManagerServiceDumpProcessesProto_SleepStatus;
class ActivityManagerServiceDumpProcessesProto_SleepStatusDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_SleepStatusDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_SleepStatus_default_instance_;
class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto;
class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProtoDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProtoDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_default_instance_;
class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState;
class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcStateDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcStateDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_default_instance_;
class ActivityManagerServiceDumpProcessesProto_Voice;
class ActivityManagerServiceDumpProcessesProto_VoiceDefaultTypeInternal;
extern ActivityManagerServiceDumpProcessesProto_VoiceDefaultTypeInternal _ActivityManagerServiceDumpProcessesProto_Voice_default_instance_;
class ActivityManagerServiceDumpServicesProto;
class ActivityManagerServiceDumpServicesProtoDefaultTypeInternal;
extern ActivityManagerServiceDumpServicesProtoDefaultTypeInternal _ActivityManagerServiceDumpServicesProto_default_instance_;
class ActivityManagerServiceProto;
class ActivityManagerServiceProtoDefaultTypeInternal;
extern ActivityManagerServiceProtoDefaultTypeInternal _ActivityManagerServiceProto_default_instance_;
class AppBindRecordProto;
class AppBindRecordProtoDefaultTypeInternal;
extern AppBindRecordProtoDefaultTypeInternal _AppBindRecordProto_default_instance_;
class AppErrorsProto;
class AppErrorsProtoDefaultTypeInternal;
extern AppErrorsProtoDefaultTypeInternal _AppErrorsProto_default_instance_;
class AppErrorsProto_BadProcess;
class AppErrorsProto_BadProcessDefaultTypeInternal;
extern AppErrorsProto_BadProcessDefaultTypeInternal _AppErrorsProto_BadProcess_default_instance_;
class AppErrorsProto_BadProcess_Entry;
class AppErrorsProto_BadProcess_EntryDefaultTypeInternal;
extern AppErrorsProto_BadProcess_EntryDefaultTypeInternal _AppErrorsProto_BadProcess_Entry_default_instance_;
class AppErrorsProto_ProcessCrashTime;
class AppErrorsProto_ProcessCrashTimeDefaultTypeInternal;
extern AppErrorsProto_ProcessCrashTimeDefaultTypeInternal _AppErrorsProto_ProcessCrashTime_default_instance_;
class AppErrorsProto_ProcessCrashTime_Entry;
class AppErrorsProto_ProcessCrashTime_EntryDefaultTypeInternal;
extern AppErrorsProto_ProcessCrashTime_EntryDefaultTypeInternal _AppErrorsProto_ProcessCrashTime_Entry_default_instance_;
class AppTimeTrackerProto;
class AppTimeTrackerProtoDefaultTypeInternal;
extern AppTimeTrackerProtoDefaultTypeInternal _AppTimeTrackerProto_default_instance_;
class AppTimeTrackerProto_PackageTime;
class AppTimeTrackerProto_PackageTimeDefaultTypeInternal;
extern AppTimeTrackerProto_PackageTimeDefaultTypeInternal _AppTimeTrackerProto_PackageTime_default_instance_;
class AppsExitInfoProto;
class AppsExitInfoProtoDefaultTypeInternal;
extern AppsExitInfoProtoDefaultTypeInternal _AppsExitInfoProto_default_instance_;
class AppsExitInfoProto_Package;
class AppsExitInfoProto_PackageDefaultTypeInternal;
extern AppsExitInfoProto_PackageDefaultTypeInternal _AppsExitInfoProto_Package_default_instance_;
class AppsExitInfoProto_Package_User;
class AppsExitInfoProto_Package_UserDefaultTypeInternal;
extern AppsExitInfoProto_Package_UserDefaultTypeInternal _AppsExitInfoProto_Package_User_default_instance_;
class BroadcastFilterProto;
class BroadcastFilterProtoDefaultTypeInternal;
extern BroadcastFilterProtoDefaultTypeInternal _BroadcastFilterProto_default_instance_;
class BroadcastQueueProto;
class BroadcastQueueProtoDefaultTypeInternal;
extern BroadcastQueueProtoDefaultTypeInternal _BroadcastQueueProto_default_instance_;
class BroadcastQueueProto_BroadcastSummary;
class BroadcastQueueProto_BroadcastSummaryDefaultTypeInternal;
extern BroadcastQueueProto_BroadcastSummaryDefaultTypeInternal _BroadcastQueueProto_BroadcastSummary_default_instance_;
class BroadcastRecordProto;
class BroadcastRecordProtoDefaultTypeInternal;
extern BroadcastRecordProtoDefaultTypeInternal _BroadcastRecordProto_default_instance_;
class ConnectionRecordProto;
class ConnectionRecordProtoDefaultTypeInternal;
extern ConnectionRecordProtoDefaultTypeInternal _ConnectionRecordProto_default_instance_;
class GrantUriProto;
class GrantUriProtoDefaultTypeInternal;
extern GrantUriProtoDefaultTypeInternal _GrantUriProto_default_instance_;
class ImportanceTokenProto;
class ImportanceTokenProtoDefaultTypeInternal;
extern ImportanceTokenProtoDefaultTypeInternal _ImportanceTokenProto_default_instance_;
class IntentBindRecordProto;
class IntentBindRecordProtoDefaultTypeInternal;
extern IntentBindRecordProtoDefaultTypeInternal _IntentBindRecordProto_default_instance_;
class MemInfoDumpProto;
class MemInfoDumpProtoDefaultTypeInternal;
extern MemInfoDumpProtoDefaultTypeInternal _MemInfoDumpProto_default_instance_;
class MemInfoDumpProto_AppData;
class MemInfoDumpProto_AppDataDefaultTypeInternal;
extern MemInfoDumpProto_AppDataDefaultTypeInternal _MemInfoDumpProto_AppData_default_instance_;
class MemInfoDumpProto_AppData_ObjectStats;
class MemInfoDumpProto_AppData_ObjectStatsDefaultTypeInternal;
extern MemInfoDumpProto_AppData_ObjectStatsDefaultTypeInternal _MemInfoDumpProto_AppData_ObjectStats_default_instance_;
class MemInfoDumpProto_AppData_SqlStats;
class MemInfoDumpProto_AppData_SqlStatsDefaultTypeInternal;
extern MemInfoDumpProto_AppData_SqlStatsDefaultTypeInternal _MemInfoDumpProto_AppData_SqlStats_default_instance_;
class MemInfoDumpProto_AppData_SqlStats_Database;
class MemInfoDumpProto_AppData_SqlStats_DatabaseDefaultTypeInternal;
extern MemInfoDumpProto_AppData_SqlStats_DatabaseDefaultTypeInternal _MemInfoDumpProto_AppData_SqlStats_Database_default_instance_;
class MemInfoDumpProto_MemItem;
class MemInfoDumpProto_MemItemDefaultTypeInternal;
extern MemInfoDumpProto_MemItemDefaultTypeInternal _MemInfoDumpProto_MemItem_default_instance_;
class MemInfoDumpProto_ProcessMemory;
class MemInfoDumpProto_ProcessMemoryDefaultTypeInternal;
extern MemInfoDumpProto_ProcessMemoryDefaultTypeInternal _MemInfoDumpProto_ProcessMemory_default_instance_;
class MemInfoDumpProto_ProcessMemory_AppSummary;
class MemInfoDumpProto_ProcessMemory_AppSummaryDefaultTypeInternal;
extern MemInfoDumpProto_ProcessMemory_AppSummaryDefaultTypeInternal _MemInfoDumpProto_ProcessMemory_AppSummary_default_instance_;
class MemInfoDumpProto_ProcessMemory_HeapInfo;
class MemInfoDumpProto_ProcessMemory_HeapInfoDefaultTypeInternal;
extern MemInfoDumpProto_ProcessMemory_HeapInfoDefaultTypeInternal _MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_;
class MemInfoDumpProto_ProcessMemory_MemoryInfo;
class MemInfoDumpProto_ProcessMemory_MemoryInfoDefaultTypeInternal;
extern MemInfoDumpProto_ProcessMemory_MemoryInfoDefaultTypeInternal _MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_;
class NeededUriGrantsProto;
class NeededUriGrantsProtoDefaultTypeInternal;
extern NeededUriGrantsProtoDefaultTypeInternal _NeededUriGrantsProto_default_instance_;
class ProcessOomProto;
class ProcessOomProtoDefaultTypeInternal;
extern ProcessOomProtoDefaultTypeInternal _ProcessOomProto_default_instance_;
class ProcessOomProto_Detail;
class ProcessOomProto_DetailDefaultTypeInternal;
extern ProcessOomProto_DetailDefaultTypeInternal _ProcessOomProto_Detail_default_instance_;
class ProcessOomProto_Detail_CpuRunTime;
class ProcessOomProto_Detail_CpuRunTimeDefaultTypeInternal;
extern ProcessOomProto_Detail_CpuRunTimeDefaultTypeInternal _ProcessOomProto_Detail_CpuRunTime_default_instance_;
class ProcessRecordProto;
class ProcessRecordProtoDefaultTypeInternal;
extern ProcessRecordProtoDefaultTypeInternal _ProcessRecordProto_default_instance_;
class ProcessToGcProto;
class ProcessToGcProtoDefaultTypeInternal;
extern ProcessToGcProtoDefaultTypeInternal _ProcessToGcProto_default_instance_;
class ReceiverListProto;
class ReceiverListProtoDefaultTypeInternal;
extern ReceiverListProtoDefaultTypeInternal _ReceiverListProto_default_instance_;
class ServiceRecordProto;
class ServiceRecordProtoDefaultTypeInternal;
extern ServiceRecordProtoDefaultTypeInternal _ServiceRecordProto_default_instance_;
class ServiceRecordProto_AppInfo;
class ServiceRecordProto_AppInfoDefaultTypeInternal;
extern ServiceRecordProto_AppInfoDefaultTypeInternal _ServiceRecordProto_AppInfo_default_instance_;
class ServiceRecordProto_Crash;
class ServiceRecordProto_CrashDefaultTypeInternal;
extern ServiceRecordProto_CrashDefaultTypeInternal _ServiceRecordProto_Crash_default_instance_;
class ServiceRecordProto_ExecuteNesting;
class ServiceRecordProto_ExecuteNestingDefaultTypeInternal;
extern ServiceRecordProto_ExecuteNestingDefaultTypeInternal _ServiceRecordProto_ExecuteNesting_default_instance_;
class ServiceRecordProto_Foreground;
class ServiceRecordProto_ForegroundDefaultTypeInternal;
extern ServiceRecordProto_ForegroundDefaultTypeInternal _ServiceRecordProto_Foreground_default_instance_;
class ServiceRecordProto_Start;
class ServiceRecordProto_StartDefaultTypeInternal;
extern ServiceRecordProto_StartDefaultTypeInternal _ServiceRecordProto_Start_default_instance_;
class ServiceRecordProto_StartItem;
class ServiceRecordProto_StartItemDefaultTypeInternal;
extern ServiceRecordProto_StartItemDefaultTypeInternal _ServiceRecordProto_StartItem_default_instance_;
class StickyBroadcastProto;
class StickyBroadcastProtoDefaultTypeInternal;
extern StickyBroadcastProtoDefaultTypeInternal _StickyBroadcastProto_default_instance_;
class StickyBroadcastProto_StickyAction;
class StickyBroadcastProto_StickyActionDefaultTypeInternal;
extern StickyBroadcastProto_StickyActionDefaultTypeInternal _StickyBroadcastProto_StickyAction_default_instance_;
class UidRecordProto;
class UidRecordProtoDefaultTypeInternal;
extern UidRecordProtoDefaultTypeInternal _UidRecordProto_default_instance_;
class UidRecordProto_ProcStateSequence;
class UidRecordProto_ProcStateSequenceDefaultTypeInternal;
extern UidRecordProto_ProcStateSequenceDefaultTypeInternal _UidRecordProto_ProcStateSequence_default_instance_;
class UriPermissionOwnerProto;
class UriPermissionOwnerProtoDefaultTypeInternal;
extern UriPermissionOwnerProtoDefaultTypeInternal _UriPermissionOwnerProto_default_instance_;
class UserControllerProto;
class UserControllerProtoDefaultTypeInternal;
extern UserControllerProtoDefaultTypeInternal _UserControllerProto_default_instance_;
class UserControllerProto_User;
class UserControllerProto_UserDefaultTypeInternal;
extern UserControllerProto_UserDefaultTypeInternal _UserControllerProto_User_default_instance_;
class UserControllerProto_UserProfile;
class UserControllerProto_UserProfileDefaultTypeInternal;
extern UserControllerProto_UserProfileDefaultTypeInternal _UserControllerProto_UserProfile_default_instance_;
class UserStateProto;
class UserStateProtoDefaultTypeInternal;
extern UserStateProtoDefaultTypeInternal _UserStateProto_default_instance_;
class VrControllerProto;
class VrControllerProtoDefaultTypeInternal;
extern VrControllerProtoDefaultTypeInternal _VrControllerProto_default_instance_;
}  // namespace am
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::am::ActiveInstrumentationProto* Arena::CreateMaybeMessage<::com::android::server::am::ActiveInstrumentationProto>(Arena*);
template<> ::com::android::server::am::ActiveServicesProto* Arena::CreateMaybeMessage<::com::android::server::am::ActiveServicesProto>(Arena*);
template<> ::com::android::server::am::ActiveServicesProto_ServicesByUser* Arena::CreateMaybeMessage<::com::android::server::am::ActiveServicesProto_ServicesByUser>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpActivitiesProto>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceDumpServicesProto* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpServicesProto>(Arena*);
template<> ::com::android::server::am::ActivityManagerServiceProto* Arena::CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceProto>(Arena*);
template<> ::com::android::server::am::AppBindRecordProto* Arena::CreateMaybeMessage<::com::android::server::am::AppBindRecordProto>(Arena*);
template<> ::com::android::server::am::AppErrorsProto* Arena::CreateMaybeMessage<::com::android::server::am::AppErrorsProto>(Arena*);
template<> ::com::android::server::am::AppErrorsProto_BadProcess* Arena::CreateMaybeMessage<::com::android::server::am::AppErrorsProto_BadProcess>(Arena*);
template<> ::com::android::server::am::AppErrorsProto_BadProcess_Entry* Arena::CreateMaybeMessage<::com::android::server::am::AppErrorsProto_BadProcess_Entry>(Arena*);
template<> ::com::android::server::am::AppErrorsProto_ProcessCrashTime* Arena::CreateMaybeMessage<::com::android::server::am::AppErrorsProto_ProcessCrashTime>(Arena*);
template<> ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry* Arena::CreateMaybeMessage<::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry>(Arena*);
template<> ::com::android::server::am::AppTimeTrackerProto* Arena::CreateMaybeMessage<::com::android::server::am::AppTimeTrackerProto>(Arena*);
template<> ::com::android::server::am::AppTimeTrackerProto_PackageTime* Arena::CreateMaybeMessage<::com::android::server::am::AppTimeTrackerProto_PackageTime>(Arena*);
template<> ::com::android::server::am::AppsExitInfoProto* Arena::CreateMaybeMessage<::com::android::server::am::AppsExitInfoProto>(Arena*);
template<> ::com::android::server::am::AppsExitInfoProto_Package* Arena::CreateMaybeMessage<::com::android::server::am::AppsExitInfoProto_Package>(Arena*);
template<> ::com::android::server::am::AppsExitInfoProto_Package_User* Arena::CreateMaybeMessage<::com::android::server::am::AppsExitInfoProto_Package_User>(Arena*);
template<> ::com::android::server::am::BroadcastFilterProto* Arena::CreateMaybeMessage<::com::android::server::am::BroadcastFilterProto>(Arena*);
template<> ::com::android::server::am::BroadcastQueueProto* Arena::CreateMaybeMessage<::com::android::server::am::BroadcastQueueProto>(Arena*);
template<> ::com::android::server::am::BroadcastQueueProto_BroadcastSummary* Arena::CreateMaybeMessage<::com::android::server::am::BroadcastQueueProto_BroadcastSummary>(Arena*);
template<> ::com::android::server::am::BroadcastRecordProto* Arena::CreateMaybeMessage<::com::android::server::am::BroadcastRecordProto>(Arena*);
template<> ::com::android::server::am::ConnectionRecordProto* Arena::CreateMaybeMessage<::com::android::server::am::ConnectionRecordProto>(Arena*);
template<> ::com::android::server::am::GrantUriProto* Arena::CreateMaybeMessage<::com::android::server::am::GrantUriProto>(Arena*);
template<> ::com::android::server::am::ImportanceTokenProto* Arena::CreateMaybeMessage<::com::android::server::am::ImportanceTokenProto>(Arena*);
template<> ::com::android::server::am::IntentBindRecordProto* Arena::CreateMaybeMessage<::com::android::server::am::IntentBindRecordProto>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_AppData* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_AppData>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_AppData_SqlStats>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_MemItem* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_MemItem>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_ProcessMemory* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo>(Arena*);
template<> ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* Arena::CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo>(Arena*);
template<> ::com::android::server::am::NeededUriGrantsProto* Arena::CreateMaybeMessage<::com::android::server::am::NeededUriGrantsProto>(Arena*);
template<> ::com::android::server::am::ProcessOomProto* Arena::CreateMaybeMessage<::com::android::server::am::ProcessOomProto>(Arena*);
template<> ::com::android::server::am::ProcessOomProto_Detail* Arena::CreateMaybeMessage<::com::android::server::am::ProcessOomProto_Detail>(Arena*);
template<> ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* Arena::CreateMaybeMessage<::com::android::server::am::ProcessOomProto_Detail_CpuRunTime>(Arena*);
template<> ::com::android::server::am::ProcessRecordProto* Arena::CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(Arena*);
template<> ::com::android::server::am::ProcessToGcProto* Arena::CreateMaybeMessage<::com::android::server::am::ProcessToGcProto>(Arena*);
template<> ::com::android::server::am::ReceiverListProto* Arena::CreateMaybeMessage<::com::android::server::am::ReceiverListProto>(Arena*);
template<> ::com::android::server::am::ServiceRecordProto* Arena::CreateMaybeMessage<::com::android::server::am::ServiceRecordProto>(Arena*);
template<> ::com::android::server::am::ServiceRecordProto_AppInfo* Arena::CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_AppInfo>(Arena*);
template<> ::com::android::server::am::ServiceRecordProto_Crash* Arena::CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_Crash>(Arena*);
template<> ::com::android::server::am::ServiceRecordProto_ExecuteNesting* Arena::CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_ExecuteNesting>(Arena*);
template<> ::com::android::server::am::ServiceRecordProto_Foreground* Arena::CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_Foreground>(Arena*);
template<> ::com::android::server::am::ServiceRecordProto_Start* Arena::CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_Start>(Arena*);
template<> ::com::android::server::am::ServiceRecordProto_StartItem* Arena::CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_StartItem>(Arena*);
template<> ::com::android::server::am::StickyBroadcastProto* Arena::CreateMaybeMessage<::com::android::server::am::StickyBroadcastProto>(Arena*);
template<> ::com::android::server::am::StickyBroadcastProto_StickyAction* Arena::CreateMaybeMessage<::com::android::server::am::StickyBroadcastProto_StickyAction>(Arena*);
template<> ::com::android::server::am::UidRecordProto* Arena::CreateMaybeMessage<::com::android::server::am::UidRecordProto>(Arena*);
template<> ::com::android::server::am::UidRecordProto_ProcStateSequence* Arena::CreateMaybeMessage<::com::android::server::am::UidRecordProto_ProcStateSequence>(Arena*);
template<> ::com::android::server::am::UriPermissionOwnerProto* Arena::CreateMaybeMessage<::com::android::server::am::UriPermissionOwnerProto>(Arena*);
template<> ::com::android::server::am::UserControllerProto* Arena::CreateMaybeMessage<::com::android::server::am::UserControllerProto>(Arena*);
template<> ::com::android::server::am::UserControllerProto_User* Arena::CreateMaybeMessage<::com::android::server::am::UserControllerProto_User>(Arena*);
template<> ::com::android::server::am::UserControllerProto_UserProfile* Arena::CreateMaybeMessage<::com::android::server::am::UserControllerProto_UserProfile>(Arena*);
template<> ::com::android::server::am::UserStateProto* Arena::CreateMaybeMessage<::com::android::server::am::UserStateProto>(Arena*);
template<> ::com::android::server::am::VrControllerProto* Arena::CreateMaybeMessage<::com::android::server::am::VrControllerProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace am {

enum ConnectionRecordProto_Flag : int {
  ConnectionRecordProto_Flag_AUTO_CREATE = 0,
  ConnectionRecordProto_Flag_DEBUG_UNBIND = 1,
  ConnectionRecordProto_Flag_NOT_FG = 2,
  ConnectionRecordProto_Flag_IMPORTANT_BG = 3,
  ConnectionRecordProto_Flag_ABOVE_CLIENT = 4,
  ConnectionRecordProto_Flag_ALLOW_OOM_MANAGEMENT = 5,
  ConnectionRecordProto_Flag_WAIVE_PRIORITY = 6,
  ConnectionRecordProto_Flag_IMPORTANT = 7,
  ConnectionRecordProto_Flag_ADJUST_WITH_ACTIVITY = 8,
  ConnectionRecordProto_Flag_FG_SERVICE_WHILE_AWAKE = 9,
  ConnectionRecordProto_Flag_FG_SERVICE = 10,
  ConnectionRecordProto_Flag_TREAT_LIKE_ACTIVITY = 11,
  ConnectionRecordProto_Flag_VISIBLE = 12,
  ConnectionRecordProto_Flag_SHOWING_UI = 13,
  ConnectionRecordProto_Flag_NOT_VISIBLE = 14,
  ConnectionRecordProto_Flag_DEAD = 15,
  ConnectionRecordProto_Flag_NOT_PERCEPTIBLE = 16,
  ConnectionRecordProto_Flag_INCLUDE_CAPABILITIES = 17
};
bool ConnectionRecordProto_Flag_IsValid(int value);
constexpr ConnectionRecordProto_Flag ConnectionRecordProto_Flag_Flag_MIN = ConnectionRecordProto_Flag_AUTO_CREATE;
constexpr ConnectionRecordProto_Flag ConnectionRecordProto_Flag_Flag_MAX = ConnectionRecordProto_Flag_INCLUDE_CAPABILITIES;
constexpr int ConnectionRecordProto_Flag_Flag_ARRAYSIZE = ConnectionRecordProto_Flag_Flag_MAX + 1;

const std::string& ConnectionRecordProto_Flag_Name(ConnectionRecordProto_Flag value);
template<typename T>
inline const std::string& ConnectionRecordProto_Flag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionRecordProto_Flag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionRecordProto_Flag_Name.");
  return ConnectionRecordProto_Flag_Name(static_cast<ConnectionRecordProto_Flag>(enum_t_value));
}
bool ConnectionRecordProto_Flag_Parse(
    const std::string& name, ConnectionRecordProto_Flag* value);
enum UidRecordProto_Change : int {
  UidRecordProto_Change_CHANGE_GONE = 0,
  UidRecordProto_Change_CHANGE_IDLE = 1,
  UidRecordProto_Change_CHANGE_ACTIVE = 2,
  UidRecordProto_Change_CHANGE_CACHED = 3,
  UidRecordProto_Change_CHANGE_UNCACHED = 4,
  UidRecordProto_Change_CHANGE_CAPABILITY = 5
};
bool UidRecordProto_Change_IsValid(int value);
constexpr UidRecordProto_Change UidRecordProto_Change_Change_MIN = UidRecordProto_Change_CHANGE_GONE;
constexpr UidRecordProto_Change UidRecordProto_Change_Change_MAX = UidRecordProto_Change_CHANGE_CAPABILITY;
constexpr int UidRecordProto_Change_Change_ARRAYSIZE = UidRecordProto_Change_Change_MAX + 1;

const std::string& UidRecordProto_Change_Name(UidRecordProto_Change value);
template<typename T>
inline const std::string& UidRecordProto_Change_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UidRecordProto_Change>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UidRecordProto_Change_Name.");
  return UidRecordProto_Change_Name(static_cast<UidRecordProto_Change>(enum_t_value));
}
bool UidRecordProto_Change_Parse(
    const std::string& name, UidRecordProto_Change* value);
enum VrControllerProto_VrMode : int {
  VrControllerProto_VrMode_FLAG_NON_VR_MODE = 0,
  VrControllerProto_VrMode_FLAG_VR_MODE = 1,
  VrControllerProto_VrMode_FLAG_PERSISTENT_VR_MODE = 2
};
bool VrControllerProto_VrMode_IsValid(int value);
constexpr VrControllerProto_VrMode VrControllerProto_VrMode_VrMode_MIN = VrControllerProto_VrMode_FLAG_NON_VR_MODE;
constexpr VrControllerProto_VrMode VrControllerProto_VrMode_VrMode_MAX = VrControllerProto_VrMode_FLAG_PERSISTENT_VR_MODE;
constexpr int VrControllerProto_VrMode_VrMode_ARRAYSIZE = VrControllerProto_VrMode_VrMode_MAX + 1;

const std::string& VrControllerProto_VrMode_Name(VrControllerProto_VrMode value);
template<typename T>
inline const std::string& VrControllerProto_VrMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VrControllerProto_VrMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VrControllerProto_VrMode_Name.");
  return VrControllerProto_VrMode_Name(static_cast<VrControllerProto_VrMode>(enum_t_value));
}
bool VrControllerProto_VrMode_Parse(
    const std::string& name, VrControllerProto_VrMode* value);
enum ProcessOomProto_SchedGroup : int {
  ProcessOomProto_SchedGroup_SCHED_GROUP_UNKNOWN = -1,
  ProcessOomProto_SchedGroup_SCHED_GROUP_BACKGROUND = 0,
  ProcessOomProto_SchedGroup_SCHED_GROUP_DEFAULT = 1,
  ProcessOomProto_SchedGroup_SCHED_GROUP_TOP_APP = 2,
  ProcessOomProto_SchedGroup_SCHED_GROUP_TOP_APP_BOUND = 3
};
bool ProcessOomProto_SchedGroup_IsValid(int value);
constexpr ProcessOomProto_SchedGroup ProcessOomProto_SchedGroup_SchedGroup_MIN = ProcessOomProto_SchedGroup_SCHED_GROUP_UNKNOWN;
constexpr ProcessOomProto_SchedGroup ProcessOomProto_SchedGroup_SchedGroup_MAX = ProcessOomProto_SchedGroup_SCHED_GROUP_TOP_APP_BOUND;
constexpr int ProcessOomProto_SchedGroup_SchedGroup_ARRAYSIZE = ProcessOomProto_SchedGroup_SchedGroup_MAX + 1;

const std::string& ProcessOomProto_SchedGroup_Name(ProcessOomProto_SchedGroup value);
template<typename T>
inline const std::string& ProcessOomProto_SchedGroup_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessOomProto_SchedGroup>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessOomProto_SchedGroup_Name.");
  return ProcessOomProto_SchedGroup_Name(static_cast<ProcessOomProto_SchedGroup>(enum_t_value));
}
bool ProcessOomProto_SchedGroup_Parse(
    const std::string& name, ProcessOomProto_SchedGroup* value);
enum UserStateProto_State : int {
  UserStateProto_State_STATE_BOOTING = 0,
  UserStateProto_State_STATE_RUNNING_LOCKED = 1,
  UserStateProto_State_STATE_RUNNING_UNLOCKING = 2,
  UserStateProto_State_STATE_RUNNING_UNLOCKED = 3,
  UserStateProto_State_STATE_STOPPING = 4,
  UserStateProto_State_STATE_SHUTDOWN = 5
};
bool UserStateProto_State_IsValid(int value);
constexpr UserStateProto_State UserStateProto_State_State_MIN = UserStateProto_State_STATE_BOOTING;
constexpr UserStateProto_State UserStateProto_State_State_MAX = UserStateProto_State_STATE_SHUTDOWN;
constexpr int UserStateProto_State_State_ARRAYSIZE = UserStateProto_State_State_MAX + 1;

const std::string& UserStateProto_State_Name(UserStateProto_State value);
template<typename T>
inline const std::string& UserStateProto_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserStateProto_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserStateProto_State_Name.");
  return UserStateProto_State_Name(static_cast<UserStateProto_State>(enum_t_value));
}
bool UserStateProto_State_Parse(
    const std::string& name, UserStateProto_State* value);
// ===================================================================

class ActivityManagerServiceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceProto) */ {
 public:
  ActivityManagerServiceProto();
  virtual ~ActivityManagerServiceProto();

  ActivityManagerServiceProto(const ActivityManagerServiceProto& from);
  ActivityManagerServiceProto(ActivityManagerServiceProto&& from) noexcept
    : ActivityManagerServiceProto() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceProto& operator=(const ActivityManagerServiceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceProto& operator=(ActivityManagerServiceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceProto* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceProto*>(
               &_ActivityManagerServiceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActivityManagerServiceProto& a, ActivityManagerServiceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceProto* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceProto>(nullptr);
  }

  ActivityManagerServiceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceProto& from);
  void MergeFrom(const ActivityManagerServiceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivitiesFieldNumber = 1,
    kBroadcastsFieldNumber = 2,
    kServicesFieldNumber = 3,
    kProcessesFieldNumber = 4,
  };
  // optional .com.android.server.am.ActivityManagerServiceDumpActivitiesProto activities = 1;
  bool has_activities() const;
  void clear_activities();
  const ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto& activities() const;
  ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* release_activities();
  ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* mutable_activities();
  void set_allocated_activities(::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* activities);

  // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto broadcasts = 2;
  bool has_broadcasts() const;
  void clear_broadcasts();
  const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto& broadcasts() const;
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* release_broadcasts();
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* mutable_broadcasts();
  void set_allocated_broadcasts(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* broadcasts);

  // optional .com.android.server.am.ActivityManagerServiceDumpServicesProto services = 3;
  bool has_services() const;
  void clear_services();
  const ::com::android::server::am::ActivityManagerServiceDumpServicesProto& services() const;
  ::com::android::server::am::ActivityManagerServiceDumpServicesProto* release_services();
  ::com::android::server::am::ActivityManagerServiceDumpServicesProto* mutable_services();
  void set_allocated_services(::com::android::server::am::ActivityManagerServiceDumpServicesProto* services);

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto processes = 4;
  bool has_processes() const;
  void clear_processes();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto& processes() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* release_processes();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* mutable_processes();
  void set_allocated_processes(::com::android::server::am::ActivityManagerServiceDumpProcessesProto* processes);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* activities_;
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* broadcasts_;
  ::com::android::server::am::ActivityManagerServiceDumpServicesProto* services_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* processes_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpActivitiesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpActivitiesProto) */ {
 public:
  ActivityManagerServiceDumpActivitiesProto();
  virtual ~ActivityManagerServiceDumpActivitiesProto();

  ActivityManagerServiceDumpActivitiesProto(const ActivityManagerServiceDumpActivitiesProto& from);
  ActivityManagerServiceDumpActivitiesProto(ActivityManagerServiceDumpActivitiesProto&& from) noexcept
    : ActivityManagerServiceDumpActivitiesProto() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpActivitiesProto& operator=(const ActivityManagerServiceDumpActivitiesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpActivitiesProto& operator=(ActivityManagerServiceDumpActivitiesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpActivitiesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpActivitiesProto* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpActivitiesProto*>(
               &_ActivityManagerServiceDumpActivitiesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActivityManagerServiceDumpActivitiesProto& a, ActivityManagerServiceDumpActivitiesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpActivitiesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpActivitiesProto* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpActivitiesProto>(nullptr);
  }

  ActivityManagerServiceDumpActivitiesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpActivitiesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpActivitiesProto& from);
  void MergeFrom(const ActivityManagerServiceDumpActivitiesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpActivitiesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpActivitiesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootWindowContainerFieldNumber = 2,
  };
  // optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
  bool has_root_window_container() const;
  void clear_root_window_container();
  const ::com::android::server::wm::RootWindowContainerProto& root_window_container() const;
  ::com::android::server::wm::RootWindowContainerProto* release_root_window_container();
  ::com::android::server::wm::RootWindowContainerProto* mutable_root_window_container();
  void set_allocated_root_window_container(::com::android::server::wm::RootWindowContainerProto* root_window_container);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpActivitiesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::wm::RootWindowContainerProto* root_window_container_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpBroadcastsProto_MainHandler :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler) */ {
 public:
  ActivityManagerServiceDumpBroadcastsProto_MainHandler();
  virtual ~ActivityManagerServiceDumpBroadcastsProto_MainHandler();

  ActivityManagerServiceDumpBroadcastsProto_MainHandler(const ActivityManagerServiceDumpBroadcastsProto_MainHandler& from);
  ActivityManagerServiceDumpBroadcastsProto_MainHandler(ActivityManagerServiceDumpBroadcastsProto_MainHandler&& from) noexcept
    : ActivityManagerServiceDumpBroadcastsProto_MainHandler() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpBroadcastsProto_MainHandler& operator=(const ActivityManagerServiceDumpBroadcastsProto_MainHandler& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpBroadcastsProto_MainHandler& operator=(ActivityManagerServiceDumpBroadcastsProto_MainHandler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpBroadcastsProto_MainHandler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpBroadcastsProto_MainHandler* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpBroadcastsProto_MainHandler*>(
               &_ActivityManagerServiceDumpBroadcastsProto_MainHandler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActivityManagerServiceDumpBroadcastsProto_MainHandler& a, ActivityManagerServiceDumpBroadcastsProto_MainHandler& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpBroadcastsProto_MainHandler* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpBroadcastsProto_MainHandler* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpBroadcastsProto_MainHandler>(nullptr);
  }

  ActivityManagerServiceDumpBroadcastsProto_MainHandler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpBroadcastsProto_MainHandler>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpBroadcastsProto_MainHandler& from);
  void MergeFrom(const ActivityManagerServiceDumpBroadcastsProto_MainHandler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpBroadcastsProto_MainHandler* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandlerFieldNumber = 1,
    kLooperFieldNumber = 2,
  };
  // optional string handler = 1;
  bool has_handler() const;
  void clear_handler();
  const std::string& handler() const;
  void set_handler(const std::string& value);
  void set_handler(std::string&& value);
  void set_handler(const char* value);
  void set_handler(const char* value, size_t size);
  std::string* mutable_handler();
  std::string* release_handler();
  void set_allocated_handler(std::string* handler);

  // optional .android.os.LooperProto looper = 2;
  bool has_looper() const;
  void clear_looper();
  const ::android::os::LooperProto& looper() const;
  ::android::os::LooperProto* release_looper();
  ::android::os::LooperProto* mutable_looper();
  void set_allocated_looper(::android::os::LooperProto* looper);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handler_;
  ::android::os::LooperProto* looper_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpBroadcastsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto) */ {
 public:
  ActivityManagerServiceDumpBroadcastsProto();
  virtual ~ActivityManagerServiceDumpBroadcastsProto();

  ActivityManagerServiceDumpBroadcastsProto(const ActivityManagerServiceDumpBroadcastsProto& from);
  ActivityManagerServiceDumpBroadcastsProto(ActivityManagerServiceDumpBroadcastsProto&& from) noexcept
    : ActivityManagerServiceDumpBroadcastsProto() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpBroadcastsProto& operator=(const ActivityManagerServiceDumpBroadcastsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpBroadcastsProto& operator=(ActivityManagerServiceDumpBroadcastsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpBroadcastsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpBroadcastsProto* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpBroadcastsProto*>(
               &_ActivityManagerServiceDumpBroadcastsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActivityManagerServiceDumpBroadcastsProto& a, ActivityManagerServiceDumpBroadcastsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpBroadcastsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpBroadcastsProto* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpBroadcastsProto>(nullptr);
  }

  ActivityManagerServiceDumpBroadcastsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpBroadcastsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpBroadcastsProto& from);
  void MergeFrom(const ActivityManagerServiceDumpBroadcastsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpBroadcastsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpBroadcastsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ActivityManagerServiceDumpBroadcastsProto_MainHandler MainHandler;

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverListFieldNumber = 1,
    kBroadcastQueueFieldNumber = 3,
    kStickyBroadcastsFieldNumber = 4,
    kReceiverResolverFieldNumber = 2,
    kHandlerFieldNumber = 5,
  };
  // repeated .com.android.server.am.ReceiverListProto receiver_list = 1;
  int receiver_list_size() const;
  void clear_receiver_list();
  ::com::android::server::am::ReceiverListProto* mutable_receiver_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ReceiverListProto >*
      mutable_receiver_list();
  const ::com::android::server::am::ReceiverListProto& receiver_list(int index) const;
  ::com::android::server::am::ReceiverListProto* add_receiver_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ReceiverListProto >&
      receiver_list() const;

  // repeated .com.android.server.am.BroadcastQueueProto broadcast_queue = 3;
  int broadcast_queue_size() const;
  void clear_broadcast_queue();
  ::com::android::server::am::BroadcastQueueProto* mutable_broadcast_queue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto >*
      mutable_broadcast_queue();
  const ::com::android::server::am::BroadcastQueueProto& broadcast_queue(int index) const;
  ::com::android::server::am::BroadcastQueueProto* add_broadcast_queue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto >&
      broadcast_queue() const;

  // repeated .com.android.server.am.StickyBroadcastProto sticky_broadcasts = 4;
  int sticky_broadcasts_size() const;
  void clear_sticky_broadcasts();
  ::com::android::server::am::StickyBroadcastProto* mutable_sticky_broadcasts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto >*
      mutable_sticky_broadcasts();
  const ::com::android::server::am::StickyBroadcastProto& sticky_broadcasts(int index) const;
  ::com::android::server::am::StickyBroadcastProto* add_sticky_broadcasts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto >&
      sticky_broadcasts() const;

  // optional .com.android.server.IntentResolverProto receiver_resolver = 2;
  bool has_receiver_resolver() const;
  void clear_receiver_resolver();
  const ::com::android::server::IntentResolverProto& receiver_resolver() const;
  ::com::android::server::IntentResolverProto* release_receiver_resolver();
  ::com::android::server::IntentResolverProto* mutable_receiver_resolver();
  void set_allocated_receiver_resolver(::com::android::server::IntentResolverProto* receiver_resolver);

  // optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler handler = 5;
  bool has_handler() const;
  void clear_handler();
  const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler& handler() const;
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* release_handler();
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* mutable_handler();
  void set_allocated_handler(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* handler);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ReceiverListProto > receiver_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto > broadcast_queue_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto > sticky_broadcasts_;
  ::com::android::server::IntentResolverProto* receiver_resolver_;
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* handler_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ReceiverListProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ReceiverListProto) */ {
 public:
  ReceiverListProto();
  virtual ~ReceiverListProto();

  ReceiverListProto(const ReceiverListProto& from);
  ReceiverListProto(ReceiverListProto&& from) noexcept
    : ReceiverListProto() {
    *this = ::std::move(from);
  }

  inline ReceiverListProto& operator=(const ReceiverListProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiverListProto& operator=(ReceiverListProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReceiverListProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceiverListProto* internal_default_instance() {
    return reinterpret_cast<const ReceiverListProto*>(
               &_ReceiverListProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReceiverListProto& a, ReceiverListProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiverListProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceiverListProto* New() const final {
    return CreateMaybeMessage<ReceiverListProto>(nullptr);
  }

  ReceiverListProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceiverListProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReceiverListProto& from);
  void MergeFrom(const ReceiverListProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReceiverListProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ReceiverListProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 7,
    kHexHashFieldNumber = 8,
    kAppFieldNumber = 1,
    kCurrentFieldNumber = 5,
    kPidFieldNumber = 2,
    kUidFieldNumber = 3,
    kUserFieldNumber = 4,
    kLinkedToDeathFieldNumber = 6,
  };
  // repeated .com.android.server.am.BroadcastFilterProto filters = 7;
  int filters_size() const;
  void clear_filters();
  ::com::android::server::am::BroadcastFilterProto* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastFilterProto >*
      mutable_filters();
  const ::com::android::server::am::BroadcastFilterProto& filters(int index) const;
  ::com::android::server::am::BroadcastFilterProto* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastFilterProto >&
      filters() const;

  // optional string hex_hash = 8;
  bool has_hex_hash() const;
  void clear_hex_hash();
  const std::string& hex_hash() const;
  void set_hex_hash(const std::string& value);
  void set_hex_hash(std::string&& value);
  void set_hex_hash(const char* value);
  void set_hex_hash(const char* value, size_t size);
  std::string* mutable_hex_hash();
  std::string* release_hex_hash();
  void set_allocated_hex_hash(std::string* hex_hash);

  // optional .com.android.server.am.ProcessRecordProto app = 1;
  bool has_app() const;
  void clear_app();
  const ::com::android::server::am::ProcessRecordProto& app() const;
  ::com::android::server::am::ProcessRecordProto* release_app();
  ::com::android::server::am::ProcessRecordProto* mutable_app();
  void set_allocated_app(::com::android::server::am::ProcessRecordProto* app);

  // optional .com.android.server.am.BroadcastRecordProto current = 5;
  bool has_current() const;
  void clear_current();
  const ::com::android::server::am::BroadcastRecordProto& current() const;
  ::com::android::server::am::BroadcastRecordProto* release_current();
  ::com::android::server::am::BroadcastRecordProto* mutable_current();
  void set_allocated_current(::com::android::server::am::BroadcastRecordProto* current);

  // optional int32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 3;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 user = 4;
  bool has_user() const;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::int32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool linked_to_death = 6;
  bool has_linked_to_death() const;
  void clear_linked_to_death();
  bool linked_to_death() const;
  void set_linked_to_death(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ReceiverListProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastFilterProto > filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_hash_;
  ::com::android::server::am::ProcessRecordProto* app_;
  ::com::android::server::am::BroadcastRecordProto* current_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_;
  bool linked_to_death_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ProcessRecordProto) */ {
 public:
  ProcessRecordProto();
  virtual ~ProcessRecordProto();

  ProcessRecordProto(const ProcessRecordProto& from);
  ProcessRecordProto(ProcessRecordProto&& from) noexcept
    : ProcessRecordProto() {
    *this = ::std::move(from);
  }

  inline ProcessRecordProto& operator=(const ProcessRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessRecordProto& operator=(ProcessRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessRecordProto* internal_default_instance() {
    return reinterpret_cast<const ProcessRecordProto*>(
               &_ProcessRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProcessRecordProto& a, ProcessRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessRecordProto* New() const final {
    return CreateMaybeMessage<ProcessRecordProto>(nullptr);
  }

  ProcessRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessRecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessRecordProto& from);
  void MergeFrom(const ProcessRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ProcessRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessNameFieldNumber = 2,
    kPidFieldNumber = 1,
    kUidFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kAppIdFieldNumber = 5,
    kIsolatedAppIdFieldNumber = 6,
    kPersistentFieldNumber = 7,
    kLruIndexFieldNumber = 8,
  };
  // optional string process_name = 2;
  bool has_process_name() const;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 3;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 app_id = 5;
  bool has_app_id() const;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 isolated_app_id = 6;
  bool has_isolated_app_id() const;
  void clear_isolated_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 isolated_app_id() const;
  void set_isolated_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool persistent = 7;
  bool has_persistent() const;
  void clear_persistent();
  bool persistent() const;
  void set_persistent(bool value);

  // optional int32 lru_index = 8;
  bool has_lru_index() const;
  void clear_lru_index();
  ::PROTOBUF_NAMESPACE_ID::int32 lru_index() const;
  void set_lru_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ProcessRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 isolated_app_id_;
  bool persistent_;
  ::PROTOBUF_NAMESPACE_ID::int32 lru_index_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.BroadcastRecordProto) */ {
 public:
  BroadcastRecordProto();
  virtual ~BroadcastRecordProto();

  BroadcastRecordProto(const BroadcastRecordProto& from);
  BroadcastRecordProto(BroadcastRecordProto&& from) noexcept
    : BroadcastRecordProto() {
    *this = ::std::move(from);
  }

  inline BroadcastRecordProto& operator=(const BroadcastRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRecordProto& operator=(BroadcastRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BroadcastRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRecordProto* internal_default_instance() {
    return reinterpret_cast<const BroadcastRecordProto*>(
               &_BroadcastRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BroadcastRecordProto& a, BroadcastRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRecordProto* New() const final {
    return CreateMaybeMessage<BroadcastRecordProto>(nullptr);
  }

  BroadcastRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BroadcastRecordProto& from);
  void MergeFrom(const BroadcastRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BroadcastRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.BroadcastRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentActionFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // optional string intent_action = 2;
  bool has_intent_action() const;
  void clear_intent_action();
  const std::string& intent_action() const;
  void set_intent_action(const std::string& value);
  void set_intent_action(std::string&& value);
  void set_intent_action(const char* value);
  void set_intent_action(const char* value, size_t size);
  std::string* mutable_intent_action();
  std::string* release_intent_action();
  void set_allocated_intent_action(std::string* intent_action);

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.BroadcastRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intent_action_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class BroadcastFilterProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.BroadcastFilterProto) */ {
 public:
  BroadcastFilterProto();
  virtual ~BroadcastFilterProto();

  BroadcastFilterProto(const BroadcastFilterProto& from);
  BroadcastFilterProto(BroadcastFilterProto&& from) noexcept
    : BroadcastFilterProto() {
    *this = ::std::move(from);
  }

  inline BroadcastFilterProto& operator=(const BroadcastFilterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastFilterProto& operator=(BroadcastFilterProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BroadcastFilterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastFilterProto* internal_default_instance() {
    return reinterpret_cast<const BroadcastFilterProto*>(
               &_BroadcastFilterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BroadcastFilterProto& a, BroadcastFilterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastFilterProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastFilterProto* New() const final {
    return CreateMaybeMessage<BroadcastFilterProto>(nullptr);
  }

  BroadcastFilterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastFilterProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BroadcastFilterProto& from);
  void MergeFrom(const BroadcastFilterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BroadcastFilterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.BroadcastFilterProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredPermissionFieldNumber = 2,
    kHexHashFieldNumber = 3,
    kIntentFilterFieldNumber = 1,
    kOwningUserIdFieldNumber = 4,
  };
  // optional string required_permission = 2;
  bool has_required_permission() const;
  void clear_required_permission();
  const std::string& required_permission() const;
  void set_required_permission(const std::string& value);
  void set_required_permission(std::string&& value);
  void set_required_permission(const char* value);
  void set_required_permission(const char* value, size_t size);
  std::string* mutable_required_permission();
  std::string* release_required_permission();
  void set_allocated_required_permission(std::string* required_permission);

  // optional string hex_hash = 3;
  bool has_hex_hash() const;
  void clear_hex_hash();
  const std::string& hex_hash() const;
  void set_hex_hash(const std::string& value);
  void set_hex_hash(std::string&& value);
  void set_hex_hash(const char* value);
  void set_hex_hash(const char* value, size_t size);
  std::string* mutable_hex_hash();
  std::string* release_hex_hash();
  void set_allocated_hex_hash(std::string* hex_hash);

  // optional .android.content.IntentFilterProto intent_filter = 1;
  bool has_intent_filter() const;
  void clear_intent_filter();
  const ::android::content::IntentFilterProto& intent_filter() const;
  ::android::content::IntentFilterProto* release_intent_filter();
  ::android::content::IntentFilterProto* mutable_intent_filter();
  void set_allocated_intent_filter(::android::content::IntentFilterProto* intent_filter);

  // optional int32 owning_user_id = 4;
  bool has_owning_user_id() const;
  void clear_owning_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 owning_user_id() const;
  void set_owning_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.BroadcastFilterProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr required_permission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_hash_;
  ::android::content::IntentFilterProto* intent_filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 owning_user_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class BroadcastQueueProto_BroadcastSummary :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.BroadcastQueueProto.BroadcastSummary) */ {
 public:
  BroadcastQueueProto_BroadcastSummary();
  virtual ~BroadcastQueueProto_BroadcastSummary();

  BroadcastQueueProto_BroadcastSummary(const BroadcastQueueProto_BroadcastSummary& from);
  BroadcastQueueProto_BroadcastSummary(BroadcastQueueProto_BroadcastSummary&& from) noexcept
    : BroadcastQueueProto_BroadcastSummary() {
    *this = ::std::move(from);
  }

  inline BroadcastQueueProto_BroadcastSummary& operator=(const BroadcastQueueProto_BroadcastSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastQueueProto_BroadcastSummary& operator=(BroadcastQueueProto_BroadcastSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BroadcastQueueProto_BroadcastSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastQueueProto_BroadcastSummary* internal_default_instance() {
    return reinterpret_cast<const BroadcastQueueProto_BroadcastSummary*>(
               &_BroadcastQueueProto_BroadcastSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BroadcastQueueProto_BroadcastSummary& a, BroadcastQueueProto_BroadcastSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastQueueProto_BroadcastSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastQueueProto_BroadcastSummary* New() const final {
    return CreateMaybeMessage<BroadcastQueueProto_BroadcastSummary>(nullptr);
  }

  BroadcastQueueProto_BroadcastSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastQueueProto_BroadcastSummary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BroadcastQueueProto_BroadcastSummary& from);
  void MergeFrom(const BroadcastQueueProto_BroadcastSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BroadcastQueueProto_BroadcastSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.BroadcastQueueProto.BroadcastSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentFieldNumber = 1,
    kEnqueueClockTimeMsFieldNumber = 2,
    kDispatchClockTimeMsFieldNumber = 3,
    kFinishClockTimeMsFieldNumber = 4,
  };
  // optional .android.content.IntentProto intent = 1;
  bool has_intent() const;
  void clear_intent();
  const ::android::content::IntentProto& intent() const;
  ::android::content::IntentProto* release_intent();
  ::android::content::IntentProto* mutable_intent();
  void set_allocated_intent(::android::content::IntentProto* intent);

  // optional int64 enqueue_clock_time_ms = 2;
  bool has_enqueue_clock_time_ms() const;
  void clear_enqueue_clock_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 enqueue_clock_time_ms() const;
  void set_enqueue_clock_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 dispatch_clock_time_ms = 3;
  bool has_dispatch_clock_time_ms() const;
  void clear_dispatch_clock_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 dispatch_clock_time_ms() const;
  void set_dispatch_clock_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 finish_clock_time_ms = 4;
  bool has_finish_clock_time_ms() const;
  void clear_finish_clock_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 finish_clock_time_ms() const;
  void set_finish_clock_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.BroadcastQueueProto.BroadcastSummary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::content::IntentProto* intent_;
  ::PROTOBUF_NAMESPACE_ID::int64 enqueue_clock_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 dispatch_clock_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 finish_clock_time_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class BroadcastQueueProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.BroadcastQueueProto) */ {
 public:
  BroadcastQueueProto();
  virtual ~BroadcastQueueProto();

  BroadcastQueueProto(const BroadcastQueueProto& from);
  BroadcastQueueProto(BroadcastQueueProto&& from) noexcept
    : BroadcastQueueProto() {
    *this = ::std::move(from);
  }

  inline BroadcastQueueProto& operator=(const BroadcastQueueProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastQueueProto& operator=(BroadcastQueueProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BroadcastQueueProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastQueueProto* internal_default_instance() {
    return reinterpret_cast<const BroadcastQueueProto*>(
               &_BroadcastQueueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BroadcastQueueProto& a, BroadcastQueueProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastQueueProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastQueueProto* New() const final {
    return CreateMaybeMessage<BroadcastQueueProto>(nullptr);
  }

  BroadcastQueueProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastQueueProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BroadcastQueueProto& from);
  void MergeFrom(const BroadcastQueueProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BroadcastQueueProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.BroadcastQueueProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BroadcastQueueProto_BroadcastSummary BroadcastSummary;

  // accessors -------------------------------------------------------

  enum : int {
    kParallelBroadcastsFieldNumber = 2,
    kOrderedBroadcastsFieldNumber = 3,
    kHistoricalBroadcastsFieldNumber = 5,
    kHistoricalBroadcastsSummaryFieldNumber = 6,
    kQueueNameFieldNumber = 1,
    kPendingBroadcastFieldNumber = 4,
  };
  // repeated .com.android.server.am.BroadcastRecordProto parallel_broadcasts = 2;
  int parallel_broadcasts_size() const;
  void clear_parallel_broadcasts();
  ::com::android::server::am::BroadcastRecordProto* mutable_parallel_broadcasts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >*
      mutable_parallel_broadcasts();
  const ::com::android::server::am::BroadcastRecordProto& parallel_broadcasts(int index) const;
  ::com::android::server::am::BroadcastRecordProto* add_parallel_broadcasts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >&
      parallel_broadcasts() const;

  // repeated .com.android.server.am.BroadcastRecordProto ordered_broadcasts = 3;
  int ordered_broadcasts_size() const;
  void clear_ordered_broadcasts();
  ::com::android::server::am::BroadcastRecordProto* mutable_ordered_broadcasts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >*
      mutable_ordered_broadcasts();
  const ::com::android::server::am::BroadcastRecordProto& ordered_broadcasts(int index) const;
  ::com::android::server::am::BroadcastRecordProto* add_ordered_broadcasts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >&
      ordered_broadcasts() const;

  // repeated .com.android.server.am.BroadcastRecordProto historical_broadcasts = 5;
  int historical_broadcasts_size() const;
  void clear_historical_broadcasts();
  ::com::android::server::am::BroadcastRecordProto* mutable_historical_broadcasts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >*
      mutable_historical_broadcasts();
  const ::com::android::server::am::BroadcastRecordProto& historical_broadcasts(int index) const;
  ::com::android::server::am::BroadcastRecordProto* add_historical_broadcasts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >&
      historical_broadcasts() const;

  // repeated .com.android.server.am.BroadcastQueueProto.BroadcastSummary historical_broadcasts_summary = 6;
  int historical_broadcasts_summary_size() const;
  void clear_historical_broadcasts_summary();
  ::com::android::server::am::BroadcastQueueProto_BroadcastSummary* mutable_historical_broadcasts_summary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto_BroadcastSummary >*
      mutable_historical_broadcasts_summary();
  const ::com::android::server::am::BroadcastQueueProto_BroadcastSummary& historical_broadcasts_summary(int index) const;
  ::com::android::server::am::BroadcastQueueProto_BroadcastSummary* add_historical_broadcasts_summary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto_BroadcastSummary >&
      historical_broadcasts_summary() const;

  // optional string queue_name = 1;
  bool has_queue_name() const;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);

  // optional .com.android.server.am.BroadcastRecordProto pending_broadcast = 4;
  bool has_pending_broadcast() const;
  void clear_pending_broadcast();
  const ::com::android::server::am::BroadcastRecordProto& pending_broadcast() const;
  ::com::android::server::am::BroadcastRecordProto* release_pending_broadcast();
  ::com::android::server::am::BroadcastRecordProto* mutable_pending_broadcast();
  void set_allocated_pending_broadcast(::com::android::server::am::BroadcastRecordProto* pending_broadcast);

  // @@protoc_insertion_point(class_scope:com.android.server.am.BroadcastQueueProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto > parallel_broadcasts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto > ordered_broadcasts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto > historical_broadcasts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto_BroadcastSummary > historical_broadcasts_summary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::com::android::server::am::BroadcastRecordProto* pending_broadcast_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_ProcessMemory_MemoryInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo) */ {
 public:
  MemInfoDumpProto_ProcessMemory_MemoryInfo();
  virtual ~MemInfoDumpProto_ProcessMemory_MemoryInfo();

  MemInfoDumpProto_ProcessMemory_MemoryInfo(const MemInfoDumpProto_ProcessMemory_MemoryInfo& from);
  MemInfoDumpProto_ProcessMemory_MemoryInfo(MemInfoDumpProto_ProcessMemory_MemoryInfo&& from) noexcept
    : MemInfoDumpProto_ProcessMemory_MemoryInfo() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_ProcessMemory_MemoryInfo& operator=(const MemInfoDumpProto_ProcessMemory_MemoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_ProcessMemory_MemoryInfo& operator=(MemInfoDumpProto_ProcessMemory_MemoryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_ProcessMemory_MemoryInfo& default_instance();

  enum DirtySwapCase {
    kDirtySwapKb = 8,
    kDirtySwapPssKb = 9,
    DIRTY_SWAP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_ProcessMemory_MemoryInfo* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_ProcessMemory_MemoryInfo*>(
               &_MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MemInfoDumpProto_ProcessMemory_MemoryInfo& a, MemInfoDumpProto_ProcessMemory_MemoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_ProcessMemory_MemoryInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_ProcessMemory_MemoryInfo* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_ProcessMemory_MemoryInfo>(nullptr);
  }

  MemInfoDumpProto_ProcessMemory_MemoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_ProcessMemory_MemoryInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_ProcessMemory_MemoryInfo& from);
  void MergeFrom(const MemInfoDumpProto_ProcessMemory_MemoryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_ProcessMemory_MemoryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTotalPssKbFieldNumber = 2,
    kCleanPssKbFieldNumber = 3,
    kSharedDirtyKbFieldNumber = 4,
    kPrivateDirtyKbFieldNumber = 5,
    kSharedCleanKbFieldNumber = 6,
    kPrivateCleanKbFieldNumber = 7,
    kTotalRssKbFieldNumber = 10,
    kDirtySwapKbFieldNumber = 8,
    kDirtySwapPssKbFieldNumber = 9,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 total_pss_kb = 2;
  bool has_total_pss_kb() const;
  void clear_total_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 total_pss_kb() const;
  void set_total_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 clean_pss_kb = 3;
  bool has_clean_pss_kb() const;
  void clear_clean_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 clean_pss_kb() const;
  void set_clean_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 shared_dirty_kb = 4;
  bool has_shared_dirty_kb() const;
  void clear_shared_dirty_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 shared_dirty_kb() const;
  void set_shared_dirty_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 private_dirty_kb = 5;
  bool has_private_dirty_kb() const;
  void clear_private_dirty_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 private_dirty_kb() const;
  void set_private_dirty_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 shared_clean_kb = 6;
  bool has_shared_clean_kb() const;
  void clear_shared_clean_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 shared_clean_kb() const;
  void set_shared_clean_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 private_clean_kb = 7;
  bool has_private_clean_kb() const;
  void clear_private_clean_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 private_clean_kb() const;
  void set_private_clean_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_rss_kb = 10;
  bool has_total_rss_kb() const;
  void clear_total_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 total_rss_kb() const;
  void set_total_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dirty_swap_kb = 8;
  bool has_dirty_swap_kb() const;
  void clear_dirty_swap_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 dirty_swap_kb() const;
  void set_dirty_swap_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dirty_swap_pss_kb = 9;
  bool has_dirty_swap_pss_kb() const;
  void clear_dirty_swap_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 dirty_swap_pss_kb() const;
  void set_dirty_swap_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  void clear_dirty_swap();
  DirtySwapCase dirty_swap_case() const;
  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo)
 private:
  class _Internal;
  void set_has_dirty_swap_kb();
  void set_has_dirty_swap_pss_kb();

  inline bool has_dirty_swap() const;
  inline void clear_has_dirty_swap();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 clean_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 shared_dirty_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 private_dirty_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 shared_clean_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 private_clean_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_rss_kb_;
  union DirtySwapUnion {
    DirtySwapUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 dirty_swap_kb_;
    ::PROTOBUF_NAMESPACE_ID::int32 dirty_swap_pss_kb_;
  } dirty_swap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_ProcessMemory_HeapInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo) */ {
 public:
  MemInfoDumpProto_ProcessMemory_HeapInfo();
  virtual ~MemInfoDumpProto_ProcessMemory_HeapInfo();

  MemInfoDumpProto_ProcessMemory_HeapInfo(const MemInfoDumpProto_ProcessMemory_HeapInfo& from);
  MemInfoDumpProto_ProcessMemory_HeapInfo(MemInfoDumpProto_ProcessMemory_HeapInfo&& from) noexcept
    : MemInfoDumpProto_ProcessMemory_HeapInfo() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_ProcessMemory_HeapInfo& operator=(const MemInfoDumpProto_ProcessMemory_HeapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_ProcessMemory_HeapInfo& operator=(MemInfoDumpProto_ProcessMemory_HeapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_ProcessMemory_HeapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_ProcessMemory_HeapInfo* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_ProcessMemory_HeapInfo*>(
               &_MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MemInfoDumpProto_ProcessMemory_HeapInfo& a, MemInfoDumpProto_ProcessMemory_HeapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_ProcessMemory_HeapInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_ProcessMemory_HeapInfo* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_ProcessMemory_HeapInfo>(nullptr);
  }

  MemInfoDumpProto_ProcessMemory_HeapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_ProcessMemory_HeapInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_ProcessMemory_HeapInfo& from);
  void MergeFrom(const MemInfoDumpProto_ProcessMemory_HeapInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_ProcessMemory_HeapInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemInfoFieldNumber = 1,
    kHeapSizeKbFieldNumber = 2,
    kHeapAllocKbFieldNumber = 3,
    kHeapFreeKbFieldNumber = 4,
  };
  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo mem_info = 1;
  bool has_mem_info() const;
  void clear_mem_info();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& mem_info() const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* release_mem_info();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* mutable_mem_info();
  void set_allocated_mem_info(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* mem_info);

  // optional int32 heap_size_kb = 2;
  bool has_heap_size_kb() const;
  void clear_heap_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 heap_size_kb() const;
  void set_heap_size_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 heap_alloc_kb = 3;
  bool has_heap_alloc_kb() const;
  void clear_heap_alloc_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 heap_alloc_kb() const;
  void set_heap_alloc_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 heap_free_kb = 4;
  bool has_heap_free_kb() const;
  void clear_heap_free_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 heap_free_kb() const;
  void set_heap_free_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* mem_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 heap_size_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 heap_alloc_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 heap_free_kb_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_ProcessMemory_AppSummary :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary) */ {
 public:
  MemInfoDumpProto_ProcessMemory_AppSummary();
  virtual ~MemInfoDumpProto_ProcessMemory_AppSummary();

  MemInfoDumpProto_ProcessMemory_AppSummary(const MemInfoDumpProto_ProcessMemory_AppSummary& from);
  MemInfoDumpProto_ProcessMemory_AppSummary(MemInfoDumpProto_ProcessMemory_AppSummary&& from) noexcept
    : MemInfoDumpProto_ProcessMemory_AppSummary() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_ProcessMemory_AppSummary& operator=(const MemInfoDumpProto_ProcessMemory_AppSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_ProcessMemory_AppSummary& operator=(MemInfoDumpProto_ProcessMemory_AppSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_ProcessMemory_AppSummary& default_instance();

  enum TotalSwapCase {
    kTotalSwapPss = 8,
    kTotalSwapKb = 9,
    TOTAL_SWAP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_ProcessMemory_AppSummary* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_ProcessMemory_AppSummary*>(
               &_MemInfoDumpProto_ProcessMemory_AppSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MemInfoDumpProto_ProcessMemory_AppSummary& a, MemInfoDumpProto_ProcessMemory_AppSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_ProcessMemory_AppSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_ProcessMemory_AppSummary* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_ProcessMemory_AppSummary>(nullptr);
  }

  MemInfoDumpProto_ProcessMemory_AppSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_ProcessMemory_AppSummary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_ProcessMemory_AppSummary& from);
  void MergeFrom(const MemInfoDumpProto_ProcessMemory_AppSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_ProcessMemory_AppSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJavaHeapPssKbFieldNumber = 1,
    kNativeHeapPssKbFieldNumber = 2,
    kCodePssKbFieldNumber = 3,
    kStackPssKbFieldNumber = 4,
    kGraphicsPssKbFieldNumber = 5,
    kPrivateOtherPssKbFieldNumber = 6,
    kSystemPssKbFieldNumber = 7,
    kJavaHeapRssKbFieldNumber = 10,
    kNativeHeapRssKbFieldNumber = 11,
    kCodeRssKbFieldNumber = 12,
    kStackRssKbFieldNumber = 13,
    kGraphicsRssKbFieldNumber = 14,
    kUnknownRssKbFieldNumber = 15,
    kTotalSwapPssFieldNumber = 8,
    kTotalSwapKbFieldNumber = 9,
  };
  // optional int32 java_heap_pss_kb = 1;
  bool has_java_heap_pss_kb() const;
  void clear_java_heap_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 java_heap_pss_kb() const;
  void set_java_heap_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 native_heap_pss_kb = 2;
  bool has_native_heap_pss_kb() const;
  void clear_native_heap_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 native_heap_pss_kb() const;
  void set_native_heap_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 code_pss_kb = 3;
  bool has_code_pss_kb() const;
  void clear_code_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 code_pss_kb() const;
  void set_code_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 stack_pss_kb = 4;
  bool has_stack_pss_kb() const;
  void clear_stack_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 stack_pss_kb() const;
  void set_stack_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 graphics_pss_kb = 5;
  bool has_graphics_pss_kb() const;
  void clear_graphics_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 graphics_pss_kb() const;
  void set_graphics_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 private_other_pss_kb = 6;
  bool has_private_other_pss_kb() const;
  void clear_private_other_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 private_other_pss_kb() const;
  void set_private_other_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 system_pss_kb = 7;
  bool has_system_pss_kb() const;
  void clear_system_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 system_pss_kb() const;
  void set_system_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 java_heap_rss_kb = 10;
  bool has_java_heap_rss_kb() const;
  void clear_java_heap_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 java_heap_rss_kb() const;
  void set_java_heap_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 native_heap_rss_kb = 11;
  bool has_native_heap_rss_kb() const;
  void clear_native_heap_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 native_heap_rss_kb() const;
  void set_native_heap_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 code_rss_kb = 12;
  bool has_code_rss_kb() const;
  void clear_code_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 code_rss_kb() const;
  void set_code_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 stack_rss_kb = 13;
  bool has_stack_rss_kb() const;
  void clear_stack_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 stack_rss_kb() const;
  void set_stack_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 graphics_rss_kb = 14;
  bool has_graphics_rss_kb() const;
  void clear_graphics_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 graphics_rss_kb() const;
  void set_graphics_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 unknown_rss_kb = 15;
  bool has_unknown_rss_kb() const;
  void clear_unknown_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 unknown_rss_kb() const;
  void set_unknown_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_swap_pss = 8;
  bool has_total_swap_pss() const;
  void clear_total_swap_pss();
  ::PROTOBUF_NAMESPACE_ID::int32 total_swap_pss() const;
  void set_total_swap_pss(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 total_swap_kb = 9;
  bool has_total_swap_kb() const;
  void clear_total_swap_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 total_swap_kb() const;
  void set_total_swap_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  void clear_total_swap();
  TotalSwapCase total_swap_case() const;
  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary)
 private:
  class _Internal;
  void set_has_total_swap_pss();
  void set_has_total_swap_kb();

  inline bool has_total_swap() const;
  inline void clear_has_total_swap();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 java_heap_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 native_heap_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 stack_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 graphics_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 private_other_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 system_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 java_heap_rss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 native_heap_rss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_rss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 stack_rss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 graphics_rss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 unknown_rss_kb_;
  union TotalSwapUnion {
    TotalSwapUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 total_swap_pss_;
    ::PROTOBUF_NAMESPACE_ID::int32 total_swap_kb_;
  } total_swap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_ProcessMemory :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.ProcessMemory) */ {
 public:
  MemInfoDumpProto_ProcessMemory();
  virtual ~MemInfoDumpProto_ProcessMemory();

  MemInfoDumpProto_ProcessMemory(const MemInfoDumpProto_ProcessMemory& from);
  MemInfoDumpProto_ProcessMemory(MemInfoDumpProto_ProcessMemory&& from) noexcept
    : MemInfoDumpProto_ProcessMemory() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_ProcessMemory& operator=(const MemInfoDumpProto_ProcessMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_ProcessMemory& operator=(MemInfoDumpProto_ProcessMemory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_ProcessMemory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_ProcessMemory* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_ProcessMemory*>(
               &_MemInfoDumpProto_ProcessMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MemInfoDumpProto_ProcessMemory& a, MemInfoDumpProto_ProcessMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_ProcessMemory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_ProcessMemory* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_ProcessMemory>(nullptr);
  }

  MemInfoDumpProto_ProcessMemory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_ProcessMemory>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_ProcessMemory& from);
  void MergeFrom(const MemInfoDumpProto_ProcessMemory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_ProcessMemory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.ProcessMemory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemInfoDumpProto_ProcessMemory_MemoryInfo MemoryInfo;
  typedef MemInfoDumpProto_ProcessMemory_HeapInfo HeapInfo;
  typedef MemInfoDumpProto_ProcessMemory_AppSummary AppSummary;

  // accessors -------------------------------------------------------

  enum : int {
    kOtherHeapsFieldNumber = 5,
    kDalvikDetailsFieldNumber = 8,
    kProcessNameFieldNumber = 2,
    kNativeHeapFieldNumber = 3,
    kDalvikHeapFieldNumber = 4,
    kUnknownHeapFieldNumber = 6,
    kTotalHeapFieldNumber = 7,
    kAppSummaryFieldNumber = 9,
    kPidFieldNumber = 1,
  };
  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo other_heaps = 5;
  int other_heaps_size() const;
  void clear_other_heaps();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* mutable_other_heaps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >*
      mutable_other_heaps();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& other_heaps(int index) const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* add_other_heaps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >&
      other_heaps() const;

  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo dalvik_details = 8;
  int dalvik_details_size() const;
  void clear_dalvik_details();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* mutable_dalvik_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >*
      mutable_dalvik_details();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& dalvik_details(int index) const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* add_dalvik_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >&
      dalvik_details() const;

  // optional string process_name = 2;
  bool has_process_name() const;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo native_heap = 3;
  bool has_native_heap() const;
  void clear_native_heap();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& native_heap() const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* release_native_heap();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* mutable_native_heap();
  void set_allocated_native_heap(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* native_heap);

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo dalvik_heap = 4;
  bool has_dalvik_heap() const;
  void clear_dalvik_heap();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& dalvik_heap() const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* release_dalvik_heap();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* mutable_dalvik_heap();
  void set_allocated_dalvik_heap(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* dalvik_heap);

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo unknown_heap = 6;
  bool has_unknown_heap() const;
  void clear_unknown_heap();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& unknown_heap() const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* release_unknown_heap();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* mutable_unknown_heap();
  void set_allocated_unknown_heap(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* unknown_heap);

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo total_heap = 7;
  bool has_total_heap() const;
  void clear_total_heap();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& total_heap() const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* release_total_heap();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* mutable_total_heap();
  void set_allocated_total_heap(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* total_heap);

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary app_summary = 9;
  bool has_app_summary() const;
  void clear_app_summary();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary& app_summary() const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* release_app_summary();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* mutable_app_summary();
  void set_allocated_app_summary(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* app_summary);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.ProcessMemory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo > other_heaps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo > dalvik_details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* native_heap_;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* dalvik_heap_;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* unknown_heap_;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* total_heap_;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* app_summary_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_AppData_ObjectStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats) */ {
 public:
  MemInfoDumpProto_AppData_ObjectStats();
  virtual ~MemInfoDumpProto_AppData_ObjectStats();

  MemInfoDumpProto_AppData_ObjectStats(const MemInfoDumpProto_AppData_ObjectStats& from);
  MemInfoDumpProto_AppData_ObjectStats(MemInfoDumpProto_AppData_ObjectStats&& from) noexcept
    : MemInfoDumpProto_AppData_ObjectStats() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_AppData_ObjectStats& operator=(const MemInfoDumpProto_AppData_ObjectStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_AppData_ObjectStats& operator=(MemInfoDumpProto_AppData_ObjectStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_AppData_ObjectStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_AppData_ObjectStats* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_AppData_ObjectStats*>(
               &_MemInfoDumpProto_AppData_ObjectStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MemInfoDumpProto_AppData_ObjectStats& a, MemInfoDumpProto_AppData_ObjectStats& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_AppData_ObjectStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_AppData_ObjectStats* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_AppData_ObjectStats>(nullptr);
  }

  MemInfoDumpProto_AppData_ObjectStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_AppData_ObjectStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_AppData_ObjectStats& from);
  void MergeFrom(const MemInfoDumpProto_AppData_ObjectStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_AppData_ObjectStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.AppData.ObjectStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewInstanceCountFieldNumber = 1,
    kViewRootInstanceCountFieldNumber = 2,
    kAppContextInstanceCountFieldNumber = 3,
    kActivityInstanceCountFieldNumber = 4,
    kGlobalAssetCountFieldNumber = 5,
    kGlobalAssetManagerCountFieldNumber = 6,
    kLocalBinderObjectCountFieldNumber = 7,
    kProxyBinderObjectCountFieldNumber = 8,
    kParcelMemoryKbFieldNumber = 9,
    kParcelCountFieldNumber = 10,
    kBinderObjectDeathCountFieldNumber = 11,
    kOpenSslSocketCountFieldNumber = 12,
    kWebviewInstanceCountFieldNumber = 13,
  };
  // optional int32 view_instance_count = 1;
  bool has_view_instance_count() const;
  void clear_view_instance_count();
  ::PROTOBUF_NAMESPACE_ID::int32 view_instance_count() const;
  void set_view_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 view_root_instance_count = 2;
  bool has_view_root_instance_count() const;
  void clear_view_root_instance_count();
  ::PROTOBUF_NAMESPACE_ID::int32 view_root_instance_count() const;
  void set_view_root_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 app_context_instance_count = 3;
  bool has_app_context_instance_count() const;
  void clear_app_context_instance_count();
  ::PROTOBUF_NAMESPACE_ID::int32 app_context_instance_count() const;
  void set_app_context_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 activity_instance_count = 4;
  bool has_activity_instance_count() const;
  void clear_activity_instance_count();
  ::PROTOBUF_NAMESPACE_ID::int32 activity_instance_count() const;
  void set_activity_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 global_asset_count = 5;
  bool has_global_asset_count() const;
  void clear_global_asset_count();
  ::PROTOBUF_NAMESPACE_ID::int32 global_asset_count() const;
  void set_global_asset_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 global_asset_manager_count = 6;
  bool has_global_asset_manager_count() const;
  void clear_global_asset_manager_count();
  ::PROTOBUF_NAMESPACE_ID::int32 global_asset_manager_count() const;
  void set_global_asset_manager_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 local_binder_object_count = 7;
  bool has_local_binder_object_count() const;
  void clear_local_binder_object_count();
  ::PROTOBUF_NAMESPACE_ID::int32 local_binder_object_count() const;
  void set_local_binder_object_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 proxy_binder_object_count = 8;
  bool has_proxy_binder_object_count() const;
  void clear_proxy_binder_object_count();
  ::PROTOBUF_NAMESPACE_ID::int32 proxy_binder_object_count() const;
  void set_proxy_binder_object_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 parcel_memory_kb = 9;
  bool has_parcel_memory_kb() const;
  void clear_parcel_memory_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 parcel_memory_kb() const;
  void set_parcel_memory_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 parcel_count = 10;
  bool has_parcel_count() const;
  void clear_parcel_count();
  ::PROTOBUF_NAMESPACE_ID::int32 parcel_count() const;
  void set_parcel_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 binder_object_death_count = 11;
  bool has_binder_object_death_count() const;
  void clear_binder_object_death_count();
  ::PROTOBUF_NAMESPACE_ID::int32 binder_object_death_count() const;
  void set_binder_object_death_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 open_ssl_socket_count = 12;
  bool has_open_ssl_socket_count() const;
  void clear_open_ssl_socket_count();
  ::PROTOBUF_NAMESPACE_ID::int32 open_ssl_socket_count() const;
  void set_open_ssl_socket_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 webview_instance_count = 13;
  bool has_webview_instance_count() const;
  void clear_webview_instance_count();
  ::PROTOBUF_NAMESPACE_ID::int32 webview_instance_count() const;
  void set_webview_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_instance_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_root_instance_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_context_instance_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 activity_instance_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 global_asset_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 global_asset_manager_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 local_binder_object_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 proxy_binder_object_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 parcel_memory_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 parcel_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 binder_object_death_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_ssl_socket_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 webview_instance_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_AppData_SqlStats_Database :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database) */ {
 public:
  MemInfoDumpProto_AppData_SqlStats_Database();
  virtual ~MemInfoDumpProto_AppData_SqlStats_Database();

  MemInfoDumpProto_AppData_SqlStats_Database(const MemInfoDumpProto_AppData_SqlStats_Database& from);
  MemInfoDumpProto_AppData_SqlStats_Database(MemInfoDumpProto_AppData_SqlStats_Database&& from) noexcept
    : MemInfoDumpProto_AppData_SqlStats_Database() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_AppData_SqlStats_Database& operator=(const MemInfoDumpProto_AppData_SqlStats_Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_AppData_SqlStats_Database& operator=(MemInfoDumpProto_AppData_SqlStats_Database&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_AppData_SqlStats_Database& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_AppData_SqlStats_Database* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_AppData_SqlStats_Database*>(
               &_MemInfoDumpProto_AppData_SqlStats_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MemInfoDumpProto_AppData_SqlStats_Database& a, MemInfoDumpProto_AppData_SqlStats_Database& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_AppData_SqlStats_Database* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_AppData_SqlStats_Database* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_AppData_SqlStats_Database>(nullptr);
  }

  MemInfoDumpProto_AppData_SqlStats_Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_AppData_SqlStats_Database>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_AppData_SqlStats_Database& from);
  void MergeFrom(const MemInfoDumpProto_AppData_SqlStats_Database& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_AppData_SqlStats_Database* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCacheFieldNumber = 5,
    kPageSizeFieldNumber = 2,
    kDbSizeFieldNumber = 3,
    kLookasideBFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string cache = 5;
  bool has_cache() const;
  void clear_cache();
  const std::string& cache() const;
  void set_cache(const std::string& value);
  void set_cache(std::string&& value);
  void set_cache(const char* value);
  void set_cache(const char* value, size_t size);
  std::string* mutable_cache();
  std::string* release_cache();
  void set_allocated_cache(std::string* cache);

  // optional int32 page_size = 2;
  bool has_page_size() const;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 db_size = 3;
  bool has_db_size() const;
  void clear_db_size();
  ::PROTOBUF_NAMESPACE_ID::int32 db_size() const;
  void set_db_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 lookaside_b = 4;
  bool has_lookaside_b() const;
  void clear_lookaside_b();
  ::PROTOBUF_NAMESPACE_ID::int32 lookaside_b() const;
  void set_lookaside_b(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lookaside_b_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_AppData_SqlStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.AppData.SqlStats) */ {
 public:
  MemInfoDumpProto_AppData_SqlStats();
  virtual ~MemInfoDumpProto_AppData_SqlStats();

  MemInfoDumpProto_AppData_SqlStats(const MemInfoDumpProto_AppData_SqlStats& from);
  MemInfoDumpProto_AppData_SqlStats(MemInfoDumpProto_AppData_SqlStats&& from) noexcept
    : MemInfoDumpProto_AppData_SqlStats() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_AppData_SqlStats& operator=(const MemInfoDumpProto_AppData_SqlStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_AppData_SqlStats& operator=(MemInfoDumpProto_AppData_SqlStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_AppData_SqlStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_AppData_SqlStats* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_AppData_SqlStats*>(
               &_MemInfoDumpProto_AppData_SqlStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MemInfoDumpProto_AppData_SqlStats& a, MemInfoDumpProto_AppData_SqlStats& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_AppData_SqlStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_AppData_SqlStats* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_AppData_SqlStats>(nullptr);
  }

  MemInfoDumpProto_AppData_SqlStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_AppData_SqlStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_AppData_SqlStats& from);
  void MergeFrom(const MemInfoDumpProto_AppData_SqlStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_AppData_SqlStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.AppData.SqlStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemInfoDumpProto_AppData_SqlStats_Database Database;

  // accessors -------------------------------------------------------

  enum : int {
    kDatabasesFieldNumber = 4,
    kMemoryUsedKbFieldNumber = 1,
    kPagecacheOverflowKbFieldNumber = 2,
    kMallocSizeKbFieldNumber = 3,
  };
  // repeated .com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database databases = 4;
  int databases_size() const;
  void clear_databases();
  ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database* mutable_databases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database >*
      mutable_databases();
  const ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database& databases(int index) const;
  ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database* add_databases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database >&
      databases() const;

  // optional int32 memory_used_kb = 1;
  bool has_memory_used_kb() const;
  void clear_memory_used_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 memory_used_kb() const;
  void set_memory_used_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pagecache_overflow_kb = 2;
  bool has_pagecache_overflow_kb() const;
  void clear_pagecache_overflow_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 pagecache_overflow_kb() const;
  void set_pagecache_overflow_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 malloc_size_kb = 3;
  bool has_malloc_size_kb() const;
  void clear_malloc_size_kb();
  ::PROTOBUF_NAMESPACE_ID::int32 malloc_size_kb() const;
  void set_malloc_size_kb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.AppData.SqlStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database > databases_;
  ::PROTOBUF_NAMESPACE_ID::int32 memory_used_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagecache_overflow_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 malloc_size_kb_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_AppData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.AppData) */ {
 public:
  MemInfoDumpProto_AppData();
  virtual ~MemInfoDumpProto_AppData();

  MemInfoDumpProto_AppData(const MemInfoDumpProto_AppData& from);
  MemInfoDumpProto_AppData(MemInfoDumpProto_AppData&& from) noexcept
    : MemInfoDumpProto_AppData() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_AppData& operator=(const MemInfoDumpProto_AppData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_AppData& operator=(MemInfoDumpProto_AppData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_AppData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_AppData* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_AppData*>(
               &_MemInfoDumpProto_AppData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MemInfoDumpProto_AppData& a, MemInfoDumpProto_AppData& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_AppData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_AppData* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_AppData>(nullptr);
  }

  MemInfoDumpProto_AppData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_AppData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_AppData& from);
  void MergeFrom(const MemInfoDumpProto_AppData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_AppData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.AppData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemInfoDumpProto_AppData_ObjectStats ObjectStats;
  typedef MemInfoDumpProto_AppData_SqlStats SqlStats;

  // accessors -------------------------------------------------------

  enum : int {
    kAssetAllocationsFieldNumber = 4,
    kUnreachableMemoryFieldNumber = 5,
    kProcessMemoryFieldNumber = 1,
    kObjectsFieldNumber = 2,
    kSqlFieldNumber = 3,
  };
  // optional string asset_allocations = 4;
  bool has_asset_allocations() const;
  void clear_asset_allocations();
  const std::string& asset_allocations() const;
  void set_asset_allocations(const std::string& value);
  void set_asset_allocations(std::string&& value);
  void set_asset_allocations(const char* value);
  void set_asset_allocations(const char* value, size_t size);
  std::string* mutable_asset_allocations();
  std::string* release_asset_allocations();
  void set_allocated_asset_allocations(std::string* asset_allocations);

  // optional string unreachable_memory = 5;
  bool has_unreachable_memory() const;
  void clear_unreachable_memory();
  const std::string& unreachable_memory() const;
  void set_unreachable_memory(const std::string& value);
  void set_unreachable_memory(std::string&& value);
  void set_unreachable_memory(const char* value);
  void set_unreachable_memory(const char* value, size_t size);
  std::string* mutable_unreachable_memory();
  std::string* release_unreachable_memory();
  void set_allocated_unreachable_memory(std::string* unreachable_memory);

  // optional .com.android.server.am.MemInfoDumpProto.ProcessMemory process_memory = 1;
  bool has_process_memory() const;
  void clear_process_memory();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory& process_memory() const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory* release_process_memory();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory* mutable_process_memory();
  void set_allocated_process_memory(::com::android::server::am::MemInfoDumpProto_ProcessMemory* process_memory);

  // optional .com.android.server.am.MemInfoDumpProto.AppData.ObjectStats objects = 2;
  bool has_objects() const;
  void clear_objects();
  const ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats& objects() const;
  ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* release_objects();
  ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* mutable_objects();
  void set_allocated_objects(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* objects);

  // optional .com.android.server.am.MemInfoDumpProto.AppData.SqlStats sql = 3;
  bool has_sql() const;
  void clear_sql();
  const ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats& sql() const;
  ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* release_sql();
  ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* mutable_sql();
  void set_allocated_sql(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* sql);

  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.AppData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_allocations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unreachable_memory_;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory* process_memory_;
  ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* objects_;
  ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* sql_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto_MemItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto.MemItem) */ {
 public:
  MemInfoDumpProto_MemItem();
  virtual ~MemInfoDumpProto_MemItem();

  MemInfoDumpProto_MemItem(const MemInfoDumpProto_MemItem& from);
  MemInfoDumpProto_MemItem(MemInfoDumpProto_MemItem&& from) noexcept
    : MemInfoDumpProto_MemItem() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto_MemItem& operator=(const MemInfoDumpProto_MemItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto_MemItem& operator=(MemInfoDumpProto_MemItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto_MemItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto_MemItem* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto_MemItem*>(
               &_MemInfoDumpProto_MemItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MemInfoDumpProto_MemItem& a, MemInfoDumpProto_MemItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto_MemItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto_MemItem* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto_MemItem>(nullptr);
  }

  MemInfoDumpProto_MemItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto_MemItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto_MemItem& from);
  void MergeFrom(const MemInfoDumpProto_MemItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto_MemItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto.MemItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubItemsFieldNumber = 8,
    kTagFieldNumber = 1,
    kLabelFieldNumber = 2,
    kIdFieldNumber = 3,
    kIsProcFieldNumber = 4,
    kHasActivitiesFieldNumber = 5,
    kPssKbFieldNumber = 6,
    kSwapPssKbFieldNumber = 7,
    kRssKbFieldNumber = 9,
  };
  // repeated .com.android.server.am.MemInfoDumpProto.MemItem sub_items = 8;
  int sub_items_size() const;
  void clear_sub_items();
  ::com::android::server::am::MemInfoDumpProto_MemItem* mutable_sub_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
      mutable_sub_items();
  const ::com::android::server::am::MemInfoDumpProto_MemItem& sub_items(int index) const;
  ::com::android::server::am::MemInfoDumpProto_MemItem* add_sub_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
      sub_items() const;

  // optional string tag = 1;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional string label = 2;
  bool has_label() const;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // optional int32 id = 3;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_proc = 4;
  bool has_is_proc() const;
  void clear_is_proc();
  bool is_proc() const;
  void set_is_proc(bool value);

  // optional bool has_activities = 5;
  bool has_has_activities() const;
  void clear_has_activities();
  bool has_activities() const;
  void set_has_activities(bool value);

  // optional int64 pss_kb = 6;
  bool has_pss_kb() const;
  void clear_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 pss_kb() const;
  void set_pss_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 swap_pss_kb = 7;
  bool has_swap_pss_kb() const;
  void clear_swap_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 swap_pss_kb() const;
  void set_swap_pss_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 rss_kb = 9;
  bool has_rss_kb() const;
  void clear_rss_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 rss_kb() const;
  void set_rss_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto.MemItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem > sub_items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool is_proc_;
  bool has_activities_;
  ::PROTOBUF_NAMESPACE_ID::int64 pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 swap_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 rss_kb_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class MemInfoDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.MemInfoDumpProto) */ {
 public:
  MemInfoDumpProto();
  virtual ~MemInfoDumpProto();

  MemInfoDumpProto(const MemInfoDumpProto& from);
  MemInfoDumpProto(MemInfoDumpProto&& from) noexcept
    : MemInfoDumpProto() {
    *this = ::std::move(from);
  }

  inline MemInfoDumpProto& operator=(const MemInfoDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemInfoDumpProto& operator=(MemInfoDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MemInfoDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemInfoDumpProto* internal_default_instance() {
    return reinterpret_cast<const MemInfoDumpProto*>(
               &_MemInfoDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MemInfoDumpProto& a, MemInfoDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MemInfoDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemInfoDumpProto* New() const final {
    return CreateMaybeMessage<MemInfoDumpProto>(nullptr);
  }

  MemInfoDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemInfoDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MemInfoDumpProto& from);
  void MergeFrom(const MemInfoDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemInfoDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.MemInfoDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MemInfoDumpProto_ProcessMemory ProcessMemory;
  typedef MemInfoDumpProto_AppData AppData;
  typedef MemInfoDumpProto_MemItem MemItem;

  // accessors -------------------------------------------------------

  enum : int {
    kNativeProcessesFieldNumber = 3,
    kAppProcessesFieldNumber = 4,
    kTotalPssByProcessFieldNumber = 5,
    kTotalPssByOomAdjustmentFieldNumber = 6,
    kTotalPssByCategoryFieldNumber = 7,
    kTotalRssByProcessFieldNumber = 29,
    kTotalRssByOomAdjustmentFieldNumber = 30,
    kTotalRssByCategoryFieldNumber = 31,
    kUptimeDurationMsFieldNumber = 1,
    kElapsedRealtimeMsFieldNumber = 2,
    kTotalRamKbFieldNumber = 8,
    kCachedPssKbFieldNumber = 10,
    kCachedKernelKbFieldNumber = 11,
    kFreeKbFieldNumber = 12,
    kUsedPssKbFieldNumber = 13,
    kUsedKernelKbFieldNumber = 14,
    kLostRamKbFieldNumber = 15,
    kTotalZramKbFieldNumber = 16,
    kStatusFieldNumber = 9,
    kTuningMbFieldNumber = 23,
    kZramPhysicalUsedInSwapKbFieldNumber = 17,
    kTotalZramSwapKbFieldNumber = 18,
    kKsmSharingKbFieldNumber = 19,
    kKsmSharedKbFieldNumber = 20,
    kKsmUnsharedKbFieldNumber = 21,
    kKsmVolatileKbFieldNumber = 22,
    kOomKbFieldNumber = 25,
    kRestoreLimitKbFieldNumber = 26,
    kTuningLargeMbFieldNumber = 24,
    kIsLowRamDeviceFieldNumber = 27,
    kIsHighEndGfxFieldNumber = 28,
  };
  // repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory native_processes = 3;
  int native_processes_size() const;
  void clear_native_processes();
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory* mutable_native_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory >*
      mutable_native_processes();
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory& native_processes(int index) const;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory* add_native_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory >&
      native_processes() const;

  // repeated .com.android.server.am.MemInfoDumpProto.AppData app_processes = 4;
  int app_processes_size() const;
  void clear_app_processes();
  ::com::android::server::am::MemInfoDumpProto_AppData* mutable_app_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData >*
      mutable_app_processes();
  const ::com::android::server::am::MemInfoDumpProto_AppData& app_processes(int index) const;
  ::com::android::server::am::MemInfoDumpProto_AppData* add_app_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData >&
      app_processes() const;

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_process = 5;
  int total_pss_by_process_size() const;
  void clear_total_pss_by_process();
  ::com::android::server::am::MemInfoDumpProto_MemItem* mutable_total_pss_by_process(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
      mutable_total_pss_by_process();
  const ::com::android::server::am::MemInfoDumpProto_MemItem& total_pss_by_process(int index) const;
  ::com::android::server::am::MemInfoDumpProto_MemItem* add_total_pss_by_process();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
      total_pss_by_process() const;

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_oom_adjustment = 6;
  int total_pss_by_oom_adjustment_size() const;
  void clear_total_pss_by_oom_adjustment();
  ::com::android::server::am::MemInfoDumpProto_MemItem* mutable_total_pss_by_oom_adjustment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
      mutable_total_pss_by_oom_adjustment();
  const ::com::android::server::am::MemInfoDumpProto_MemItem& total_pss_by_oom_adjustment(int index) const;
  ::com::android::server::am::MemInfoDumpProto_MemItem* add_total_pss_by_oom_adjustment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
      total_pss_by_oom_adjustment() const;

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_category = 7;
  int total_pss_by_category_size() const;
  void clear_total_pss_by_category();
  ::com::android::server::am::MemInfoDumpProto_MemItem* mutable_total_pss_by_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
      mutable_total_pss_by_category();
  const ::com::android::server::am::MemInfoDumpProto_MemItem& total_pss_by_category(int index) const;
  ::com::android::server::am::MemInfoDumpProto_MemItem* add_total_pss_by_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
      total_pss_by_category() const;

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_process = 29;
  int total_rss_by_process_size() const;
  void clear_total_rss_by_process();
  ::com::android::server::am::MemInfoDumpProto_MemItem* mutable_total_rss_by_process(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
      mutable_total_rss_by_process();
  const ::com::android::server::am::MemInfoDumpProto_MemItem& total_rss_by_process(int index) const;
  ::com::android::server::am::MemInfoDumpProto_MemItem* add_total_rss_by_process();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
      total_rss_by_process() const;

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_oom_adjustment = 30;
  int total_rss_by_oom_adjustment_size() const;
  void clear_total_rss_by_oom_adjustment();
  ::com::android::server::am::MemInfoDumpProto_MemItem* mutable_total_rss_by_oom_adjustment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
      mutable_total_rss_by_oom_adjustment();
  const ::com::android::server::am::MemInfoDumpProto_MemItem& total_rss_by_oom_adjustment(int index) const;
  ::com::android::server::am::MemInfoDumpProto_MemItem* add_total_rss_by_oom_adjustment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
      total_rss_by_oom_adjustment() const;

  // repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_category = 31;
  int total_rss_by_category_size() const;
  void clear_total_rss_by_category();
  ::com::android::server::am::MemInfoDumpProto_MemItem* mutable_total_rss_by_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
      mutable_total_rss_by_category();
  const ::com::android::server::am::MemInfoDumpProto_MemItem& total_rss_by_category(int index) const;
  ::com::android::server::am::MemInfoDumpProto_MemItem* add_total_rss_by_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
      total_rss_by_category() const;

  // optional int64 uptime_duration_ms = 1;
  bool has_uptime_duration_ms() const;
  void clear_uptime_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_duration_ms() const;
  void set_uptime_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 elapsed_realtime_ms = 2;
  bool has_elapsed_realtime_ms() const;
  void clear_elapsed_realtime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 elapsed_realtime_ms() const;
  void set_elapsed_realtime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_ram_kb = 8;
  bool has_total_ram_kb() const;
  void clear_total_ram_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 total_ram_kb() const;
  void set_total_ram_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 cached_pss_kb = 10;
  bool has_cached_pss_kb() const;
  void clear_cached_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 cached_pss_kb() const;
  void set_cached_pss_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 cached_kernel_kb = 11;
  bool has_cached_kernel_kb() const;
  void clear_cached_kernel_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 cached_kernel_kb() const;
  void set_cached_kernel_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 free_kb = 12;
  bool has_free_kb() const;
  void clear_free_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 free_kb() const;
  void set_free_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 used_pss_kb = 13;
  bool has_used_pss_kb() const;
  void clear_used_pss_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 used_pss_kb() const;
  void set_used_pss_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 used_kernel_kb = 14;
  bool has_used_kernel_kb() const;
  void clear_used_kernel_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 used_kernel_kb() const;
  void set_used_kernel_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 lost_ram_kb = 15;
  bool has_lost_ram_kb() const;
  void clear_lost_ram_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 lost_ram_kb() const;
  void set_lost_ram_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_zram_kb = 16;
  bool has_total_zram_kb() const;
  void clear_total_zram_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 total_zram_kb() const;
  void set_total_zram_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .com.android.internal.app.procstats.ProcessStatsProto.MemoryFactor status = 9;
  bool has_status() const;
  void clear_status();
  ::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor status() const;
  void set_status(::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor value);

  // optional int32 tuning_mb = 23;
  bool has_tuning_mb() const;
  void clear_tuning_mb();
  ::PROTOBUF_NAMESPACE_ID::int32 tuning_mb() const;
  void set_tuning_mb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 zram_physical_used_in_swap_kb = 17;
  bool has_zram_physical_used_in_swap_kb() const;
  void clear_zram_physical_used_in_swap_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 zram_physical_used_in_swap_kb() const;
  void set_zram_physical_used_in_swap_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_zram_swap_kb = 18;
  bool has_total_zram_swap_kb() const;
  void clear_total_zram_swap_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 total_zram_swap_kb() const;
  void set_total_zram_swap_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ksm_sharing_kb = 19;
  bool has_ksm_sharing_kb() const;
  void clear_ksm_sharing_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 ksm_sharing_kb() const;
  void set_ksm_sharing_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ksm_shared_kb = 20;
  bool has_ksm_shared_kb() const;
  void clear_ksm_shared_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 ksm_shared_kb() const;
  void set_ksm_shared_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ksm_unshared_kb = 21;
  bool has_ksm_unshared_kb() const;
  void clear_ksm_unshared_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 ksm_unshared_kb() const;
  void set_ksm_unshared_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ksm_volatile_kb = 22;
  bool has_ksm_volatile_kb() const;
  void clear_ksm_volatile_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 ksm_volatile_kb() const;
  void set_ksm_volatile_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 oom_kb = 25;
  bool has_oom_kb() const;
  void clear_oom_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 oom_kb() const;
  void set_oom_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 restore_limit_kb = 26;
  bool has_restore_limit_kb() const;
  void clear_restore_limit_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 restore_limit_kb() const;
  void set_restore_limit_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 tuning_large_mb = 24;
  bool has_tuning_large_mb() const;
  void clear_tuning_large_mb();
  ::PROTOBUF_NAMESPACE_ID::int32 tuning_large_mb() const;
  void set_tuning_large_mb(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_low_ram_device = 27;
  bool has_is_low_ram_device() const;
  void clear_is_low_ram_device();
  bool is_low_ram_device() const;
  void set_is_low_ram_device(bool value);

  // optional bool is_high_end_gfx = 28;
  bool has_is_high_end_gfx() const;
  void clear_is_high_end_gfx();
  bool is_high_end_gfx() const;
  void set_is_high_end_gfx(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.MemInfoDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory > native_processes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData > app_processes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem > total_pss_by_process_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem > total_pss_by_oom_adjustment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem > total_pss_by_category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem > total_rss_by_process_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem > total_rss_by_oom_adjustment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem > total_rss_by_category_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 elapsed_realtime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_ram_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 cached_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 cached_kernel_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 free_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 used_pss_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 used_kernel_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 lost_ram_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_zram_kb_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 tuning_mb_;
  ::PROTOBUF_NAMESPACE_ID::int64 zram_physical_used_in_swap_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_zram_swap_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 ksm_sharing_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 ksm_shared_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 ksm_unshared_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 ksm_volatile_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 oom_kb_;
  ::PROTOBUF_NAMESPACE_ID::int64 restore_limit_kb_;
  ::PROTOBUF_NAMESPACE_ID::int32 tuning_large_mb_;
  bool is_low_ram_device_;
  bool is_high_end_gfx_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class StickyBroadcastProto_StickyAction :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.StickyBroadcastProto.StickyAction) */ {
 public:
  StickyBroadcastProto_StickyAction();
  virtual ~StickyBroadcastProto_StickyAction();

  StickyBroadcastProto_StickyAction(const StickyBroadcastProto_StickyAction& from);
  StickyBroadcastProto_StickyAction(StickyBroadcastProto_StickyAction&& from) noexcept
    : StickyBroadcastProto_StickyAction() {
    *this = ::std::move(from);
  }

  inline StickyBroadcastProto_StickyAction& operator=(const StickyBroadcastProto_StickyAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline StickyBroadcastProto_StickyAction& operator=(StickyBroadcastProto_StickyAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StickyBroadcastProto_StickyAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StickyBroadcastProto_StickyAction* internal_default_instance() {
    return reinterpret_cast<const StickyBroadcastProto_StickyAction*>(
               &_StickyBroadcastProto_StickyAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StickyBroadcastProto_StickyAction& a, StickyBroadcastProto_StickyAction& b) {
    a.Swap(&b);
  }
  inline void Swap(StickyBroadcastProto_StickyAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StickyBroadcastProto_StickyAction* New() const final {
    return CreateMaybeMessage<StickyBroadcastProto_StickyAction>(nullptr);
  }

  StickyBroadcastProto_StickyAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StickyBroadcastProto_StickyAction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StickyBroadcastProto_StickyAction& from);
  void MergeFrom(const StickyBroadcastProto_StickyAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StickyBroadcastProto_StickyAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.StickyBroadcastProto.StickyAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntentsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .android.content.IntentProto intents = 2;
  int intents_size() const;
  void clear_intents();
  ::android::content::IntentProto* mutable_intents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::IntentProto >*
      mutable_intents();
  const ::android::content::IntentProto& intents(int index) const;
  ::android::content::IntentProto* add_intents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::IntentProto >&
      intents() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:com.android.server.am.StickyBroadcastProto.StickyAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::IntentProto > intents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class StickyBroadcastProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.StickyBroadcastProto) */ {
 public:
  StickyBroadcastProto();
  virtual ~StickyBroadcastProto();

  StickyBroadcastProto(const StickyBroadcastProto& from);
  StickyBroadcastProto(StickyBroadcastProto&& from) noexcept
    : StickyBroadcastProto() {
    *this = ::std::move(from);
  }

  inline StickyBroadcastProto& operator=(const StickyBroadcastProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StickyBroadcastProto& operator=(StickyBroadcastProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StickyBroadcastProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StickyBroadcastProto* internal_default_instance() {
    return reinterpret_cast<const StickyBroadcastProto*>(
               &_StickyBroadcastProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StickyBroadcastProto& a, StickyBroadcastProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StickyBroadcastProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StickyBroadcastProto* New() const final {
    return CreateMaybeMessage<StickyBroadcastProto>(nullptr);
  }

  StickyBroadcastProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StickyBroadcastProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StickyBroadcastProto& from);
  void MergeFrom(const StickyBroadcastProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StickyBroadcastProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.StickyBroadcastProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StickyBroadcastProto_StickyAction StickyAction;

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // repeated .com.android.server.am.StickyBroadcastProto.StickyAction actions = 2;
  int actions_size() const;
  void clear_actions();
  ::com::android::server::am::StickyBroadcastProto_StickyAction* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto_StickyAction >*
      mutable_actions();
  const ::com::android::server::am::StickyBroadcastProto_StickyAction& actions(int index) const;
  ::com::android::server::am::StickyBroadcastProto_StickyAction* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto_StickyAction >&
      actions() const;

  // optional int32 user = 1;
  bool has_user() const;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::int32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.StickyBroadcastProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto_StickyAction > actions_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpServicesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpServicesProto) */ {
 public:
  ActivityManagerServiceDumpServicesProto();
  virtual ~ActivityManagerServiceDumpServicesProto();

  ActivityManagerServiceDumpServicesProto(const ActivityManagerServiceDumpServicesProto& from);
  ActivityManagerServiceDumpServicesProto(ActivityManagerServiceDumpServicesProto&& from) noexcept
    : ActivityManagerServiceDumpServicesProto() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpServicesProto& operator=(const ActivityManagerServiceDumpServicesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpServicesProto& operator=(ActivityManagerServiceDumpServicesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpServicesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpServicesProto* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpServicesProto*>(
               &_ActivityManagerServiceDumpServicesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ActivityManagerServiceDumpServicesProto& a, ActivityManagerServiceDumpServicesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpServicesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpServicesProto* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpServicesProto>(nullptr);
  }

  ActivityManagerServiceDumpServicesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpServicesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpServicesProto& from);
  void MergeFrom(const ActivityManagerServiceDumpServicesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpServicesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpServicesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveServicesFieldNumber = 1,
  };
  // optional .com.android.server.am.ActiveServicesProto active_services = 1;
  bool has_active_services() const;
  void clear_active_services();
  const ::com::android::server::am::ActiveServicesProto& active_services() const;
  ::com::android::server::am::ActiveServicesProto* release_active_services();
  ::com::android::server::am::ActiveServicesProto* mutable_active_services();
  void set_allocated_active_services(::com::android::server::am::ActiveServicesProto* active_services);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpServicesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::am::ActiveServicesProto* active_services_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActiveServicesProto_ServicesByUser :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActiveServicesProto.ServicesByUser) */ {
 public:
  ActiveServicesProto_ServicesByUser();
  virtual ~ActiveServicesProto_ServicesByUser();

  ActiveServicesProto_ServicesByUser(const ActiveServicesProto_ServicesByUser& from);
  ActiveServicesProto_ServicesByUser(ActiveServicesProto_ServicesByUser&& from) noexcept
    : ActiveServicesProto_ServicesByUser() {
    *this = ::std::move(from);
  }

  inline ActiveServicesProto_ServicesByUser& operator=(const ActiveServicesProto_ServicesByUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveServicesProto_ServicesByUser& operator=(ActiveServicesProto_ServicesByUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActiveServicesProto_ServicesByUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveServicesProto_ServicesByUser* internal_default_instance() {
    return reinterpret_cast<const ActiveServicesProto_ServicesByUser*>(
               &_ActiveServicesProto_ServicesByUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ActiveServicesProto_ServicesByUser& a, ActiveServicesProto_ServicesByUser& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveServicesProto_ServicesByUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveServicesProto_ServicesByUser* New() const final {
    return CreateMaybeMessage<ActiveServicesProto_ServicesByUser>(nullptr);
  }

  ActiveServicesProto_ServicesByUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveServicesProto_ServicesByUser>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActiveServicesProto_ServicesByUser& from);
  void MergeFrom(const ActiveServicesProto_ServicesByUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveServicesProto_ServicesByUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActiveServicesProto.ServicesByUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceRecordsFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // repeated .com.android.server.am.ServiceRecordProto service_records = 2;
  int service_records_size() const;
  void clear_service_records();
  ::com::android::server::am::ServiceRecordProto* mutable_service_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto >*
      mutable_service_records();
  const ::com::android::server::am::ServiceRecordProto& service_records(int index) const;
  ::com::android::server::am::ServiceRecordProto* add_service_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto >&
      service_records() const;

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActiveServicesProto.ServicesByUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto > service_records_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActiveServicesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActiveServicesProto) */ {
 public:
  ActiveServicesProto();
  virtual ~ActiveServicesProto();

  ActiveServicesProto(const ActiveServicesProto& from);
  ActiveServicesProto(ActiveServicesProto&& from) noexcept
    : ActiveServicesProto() {
    *this = ::std::move(from);
  }

  inline ActiveServicesProto& operator=(const ActiveServicesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveServicesProto& operator=(ActiveServicesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActiveServicesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveServicesProto* internal_default_instance() {
    return reinterpret_cast<const ActiveServicesProto*>(
               &_ActiveServicesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ActiveServicesProto& a, ActiveServicesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveServicesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveServicesProto* New() const final {
    return CreateMaybeMessage<ActiveServicesProto>(nullptr);
  }

  ActiveServicesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveServicesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActiveServicesProto& from);
  void MergeFrom(const ActiveServicesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveServicesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActiveServicesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ActiveServicesProto_ServicesByUser ServicesByUser;

  // accessors -------------------------------------------------------

  enum : int {
    kServicesByUsersFieldNumber = 1,
  };
  // repeated .com.android.server.am.ActiveServicesProto.ServicesByUser services_by_users = 1;
  int services_by_users_size() const;
  void clear_services_by_users();
  ::com::android::server::am::ActiveServicesProto_ServicesByUser* mutable_services_by_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveServicesProto_ServicesByUser >*
      mutable_services_by_users();
  const ::com::android::server::am::ActiveServicesProto_ServicesByUser& services_by_users(int index) const;
  ::com::android::server::am::ActiveServicesProto_ServicesByUser* add_services_by_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveServicesProto_ServicesByUser >&
      services_by_users() const;

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActiveServicesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveServicesProto_ServicesByUser > services_by_users_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class GrantUriProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.GrantUriProto) */ {
 public:
  GrantUriProto();
  virtual ~GrantUriProto();

  GrantUriProto(const GrantUriProto& from);
  GrantUriProto(GrantUriProto&& from) noexcept
    : GrantUriProto() {
    *this = ::std::move(from);
  }

  inline GrantUriProto& operator=(const GrantUriProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantUriProto& operator=(GrantUriProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GrantUriProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GrantUriProto* internal_default_instance() {
    return reinterpret_cast<const GrantUriProto*>(
               &_GrantUriProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GrantUriProto& a, GrantUriProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantUriProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GrantUriProto* New() const final {
    return CreateMaybeMessage<GrantUriProto>(nullptr);
  }

  GrantUriProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GrantUriProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GrantUriProto& from);
  void MergeFrom(const GrantUriProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GrantUriProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.GrantUriProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 2,
    kSourceUserIdFieldNumber = 1,
  };
  // optional string uri = 2 [(.android.privacy) = {
  bool has_uri() const;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);

  // optional int32 source_user_id = 1;
  bool has_source_user_id() const;
  void clear_source_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 source_user_id() const;
  void set_source_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.GrantUriProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_user_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class NeededUriGrantsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.NeededUriGrantsProto) */ {
 public:
  NeededUriGrantsProto();
  virtual ~NeededUriGrantsProto();

  NeededUriGrantsProto(const NeededUriGrantsProto& from);
  NeededUriGrantsProto(NeededUriGrantsProto&& from) noexcept
    : NeededUriGrantsProto() {
    *this = ::std::move(from);
  }

  inline NeededUriGrantsProto& operator=(const NeededUriGrantsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeededUriGrantsProto& operator=(NeededUriGrantsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NeededUriGrantsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NeededUriGrantsProto* internal_default_instance() {
    return reinterpret_cast<const NeededUriGrantsProto*>(
               &_NeededUriGrantsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(NeededUriGrantsProto& a, NeededUriGrantsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NeededUriGrantsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NeededUriGrantsProto* New() const final {
    return CreateMaybeMessage<NeededUriGrantsProto>(nullptr);
  }

  NeededUriGrantsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NeededUriGrantsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NeededUriGrantsProto& from);
  void MergeFrom(const NeededUriGrantsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NeededUriGrantsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.NeededUriGrantsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrantsFieldNumber = 4,
    kTargetPackageFieldNumber = 1,
    kTargetUidFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // repeated .com.android.server.am.GrantUriProto grants = 4;
  int grants_size() const;
  void clear_grants();
  ::com::android::server::am::GrantUriProto* mutable_grants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >*
      mutable_grants();
  const ::com::android::server::am::GrantUriProto& grants(int index) const;
  ::com::android::server::am::GrantUriProto* add_grants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >&
      grants() const;

  // optional string target_package = 1;
  bool has_target_package() const;
  void clear_target_package();
  const std::string& target_package() const;
  void set_target_package(const std::string& value);
  void set_target_package(std::string&& value);
  void set_target_package(const char* value);
  void set_target_package(const char* value, size_t size);
  std::string* mutable_target_package();
  std::string* release_target_package();
  void set_allocated_target_package(std::string* target_package);

  // optional int32 target_uid = 2;
  bool has_target_uid() const;
  void clear_target_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 target_uid() const;
  void set_target_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.NeededUriGrantsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto > grants_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_package_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class UriPermissionOwnerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.UriPermissionOwnerProto) */ {
 public:
  UriPermissionOwnerProto();
  virtual ~UriPermissionOwnerProto();

  UriPermissionOwnerProto(const UriPermissionOwnerProto& from);
  UriPermissionOwnerProto(UriPermissionOwnerProto&& from) noexcept
    : UriPermissionOwnerProto() {
    *this = ::std::move(from);
  }

  inline UriPermissionOwnerProto& operator=(const UriPermissionOwnerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UriPermissionOwnerProto& operator=(UriPermissionOwnerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UriPermissionOwnerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UriPermissionOwnerProto* internal_default_instance() {
    return reinterpret_cast<const UriPermissionOwnerProto*>(
               &_UriPermissionOwnerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UriPermissionOwnerProto& a, UriPermissionOwnerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UriPermissionOwnerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UriPermissionOwnerProto* New() const final {
    return CreateMaybeMessage<UriPermissionOwnerProto>(nullptr);
  }

  UriPermissionOwnerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UriPermissionOwnerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UriPermissionOwnerProto& from);
  void MergeFrom(const UriPermissionOwnerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UriPermissionOwnerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.UriPermissionOwnerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadPermsFieldNumber = 2,
    kWritePermsFieldNumber = 3,
    kOwnerFieldNumber = 1,
  };
  // repeated .com.android.server.am.GrantUriProto read_perms = 2;
  int read_perms_size() const;
  void clear_read_perms();
  ::com::android::server::am::GrantUriProto* mutable_read_perms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >*
      mutable_read_perms();
  const ::com::android::server::am::GrantUriProto& read_perms(int index) const;
  ::com::android::server::am::GrantUriProto* add_read_perms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >&
      read_perms() const;

  // repeated .com.android.server.am.GrantUriProto write_perms = 3;
  int write_perms_size() const;
  void clear_write_perms();
  ::com::android::server::am::GrantUriProto* mutable_write_perms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >*
      mutable_write_perms();
  const ::com::android::server::am::GrantUriProto& write_perms(int index) const;
  ::com::android::server::am::GrantUriProto* add_write_perms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >&
      write_perms() const;

  // optional string owner = 1;
  bool has_owner() const;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);

  // @@protoc_insertion_point(class_scope:com.android.server.am.UriPermissionOwnerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto > read_perms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto > write_perms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceRecordProto_AppInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ServiceRecordProto.AppInfo) */ {
 public:
  ServiceRecordProto_AppInfo();
  virtual ~ServiceRecordProto_AppInfo();

  ServiceRecordProto_AppInfo(const ServiceRecordProto_AppInfo& from);
  ServiceRecordProto_AppInfo(ServiceRecordProto_AppInfo&& from) noexcept
    : ServiceRecordProto_AppInfo() {
    *this = ::std::move(from);
  }

  inline ServiceRecordProto_AppInfo& operator=(const ServiceRecordProto_AppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRecordProto_AppInfo& operator=(ServiceRecordProto_AppInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceRecordProto_AppInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRecordProto_AppInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceRecordProto_AppInfo*>(
               &_ServiceRecordProto_AppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ServiceRecordProto_AppInfo& a, ServiceRecordProto_AppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRecordProto_AppInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRecordProto_AppInfo* New() const final {
    return CreateMaybeMessage<ServiceRecordProto_AppInfo>(nullptr);
  }

  ServiceRecordProto_AppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRecordProto_AppInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceRecordProto_AppInfo& from);
  void MergeFrom(const ServiceRecordProto_AppInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceRecordProto_AppInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ServiceRecordProto.AppInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseDirFieldNumber = 1,
    kResDirFieldNumber = 2,
    kDataDirFieldNumber = 3,
  };
  // optional string base_dir = 1;
  bool has_base_dir() const;
  void clear_base_dir();
  const std::string& base_dir() const;
  void set_base_dir(const std::string& value);
  void set_base_dir(std::string&& value);
  void set_base_dir(const char* value);
  void set_base_dir(const char* value, size_t size);
  std::string* mutable_base_dir();
  std::string* release_base_dir();
  void set_allocated_base_dir(std::string* base_dir);

  // optional string res_dir = 2;
  bool has_res_dir() const;
  void clear_res_dir();
  const std::string& res_dir() const;
  void set_res_dir(const std::string& value);
  void set_res_dir(std::string&& value);
  void set_res_dir(const char* value);
  void set_res_dir(const char* value, size_t size);
  std::string* mutable_res_dir();
  std::string* release_res_dir();
  void set_allocated_res_dir(std::string* res_dir);

  // optional string data_dir = 3;
  bool has_data_dir() const;
  void clear_data_dir();
  const std::string& data_dir() const;
  void set_data_dir(const std::string& value);
  void set_data_dir(std::string&& value);
  void set_data_dir(const char* value);
  void set_data_dir(const char* value, size_t size);
  std::string* mutable_data_dir();
  std::string* release_data_dir();
  void set_allocated_data_dir(std::string* data_dir);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ServiceRecordProto.AppInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_dir_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceRecordProto_Foreground :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ServiceRecordProto.Foreground) */ {
 public:
  ServiceRecordProto_Foreground();
  virtual ~ServiceRecordProto_Foreground();

  ServiceRecordProto_Foreground(const ServiceRecordProto_Foreground& from);
  ServiceRecordProto_Foreground(ServiceRecordProto_Foreground&& from) noexcept
    : ServiceRecordProto_Foreground() {
    *this = ::std::move(from);
  }

  inline ServiceRecordProto_Foreground& operator=(const ServiceRecordProto_Foreground& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRecordProto_Foreground& operator=(ServiceRecordProto_Foreground&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceRecordProto_Foreground& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRecordProto_Foreground* internal_default_instance() {
    return reinterpret_cast<const ServiceRecordProto_Foreground*>(
               &_ServiceRecordProto_Foreground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ServiceRecordProto_Foreground& a, ServiceRecordProto_Foreground& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRecordProto_Foreground* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRecordProto_Foreground* New() const final {
    return CreateMaybeMessage<ServiceRecordProto_Foreground>(nullptr);
  }

  ServiceRecordProto_Foreground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRecordProto_Foreground>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceRecordProto_Foreground& from);
  void MergeFrom(const ServiceRecordProto_Foreground& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceRecordProto_Foreground* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ServiceRecordProto.Foreground";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .android.app.NotificationProto notification = 2;
  bool has_notification() const;
  void clear_notification();
  const ::android::app::NotificationProto& notification() const;
  ::android::app::NotificationProto* release_notification();
  ::android::app::NotificationProto* mutable_notification();
  void set_allocated_notification(::android::app::NotificationProto* notification);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ServiceRecordProto.Foreground)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::app::NotificationProto* notification_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceRecordProto_Start :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ServiceRecordProto.Start) */ {
 public:
  ServiceRecordProto_Start();
  virtual ~ServiceRecordProto_Start();

  ServiceRecordProto_Start(const ServiceRecordProto_Start& from);
  ServiceRecordProto_Start(ServiceRecordProto_Start&& from) noexcept
    : ServiceRecordProto_Start() {
    *this = ::std::move(from);
  }

  inline ServiceRecordProto_Start& operator=(const ServiceRecordProto_Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRecordProto_Start& operator=(ServiceRecordProto_Start&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceRecordProto_Start& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRecordProto_Start* internal_default_instance() {
    return reinterpret_cast<const ServiceRecordProto_Start*>(
               &_ServiceRecordProto_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ServiceRecordProto_Start& a, ServiceRecordProto_Start& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRecordProto_Start* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRecordProto_Start* New() const final {
    return CreateMaybeMessage<ServiceRecordProto_Start>(nullptr);
  }

  ServiceRecordProto_Start* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRecordProto_Start>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceRecordProto_Start& from);
  void MergeFrom(const ServiceRecordProto_Start& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceRecordProto_Start* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ServiceRecordProto.Start";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartRequestedFieldNumber = 1,
    kDelayedStopFieldNumber = 2,
    kStopIfKilledFieldNumber = 3,
    kCallStartFieldNumber = 4,
    kLastStartIdFieldNumber = 5,
  };
  // optional bool start_requested = 1;
  bool has_start_requested() const;
  void clear_start_requested();
  bool start_requested() const;
  void set_start_requested(bool value);

  // optional bool delayed_stop = 2;
  bool has_delayed_stop() const;
  void clear_delayed_stop();
  bool delayed_stop() const;
  void set_delayed_stop(bool value);

  // optional bool stop_if_killed = 3;
  bool has_stop_if_killed() const;
  void clear_stop_if_killed();
  bool stop_if_killed() const;
  void set_stop_if_killed(bool value);

  // optional bool call_start = 4;
  bool has_call_start() const;
  void clear_call_start();
  bool call_start() const;
  void set_call_start(bool value);

  // optional int32 last_start_id = 5;
  bool has_last_start_id() const;
  void clear_last_start_id();
  ::PROTOBUF_NAMESPACE_ID::int32 last_start_id() const;
  void set_last_start_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ServiceRecordProto.Start)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool start_requested_;
  bool delayed_stop_;
  bool stop_if_killed_;
  bool call_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_start_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceRecordProto_ExecuteNesting :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ServiceRecordProto.ExecuteNesting) */ {
 public:
  ServiceRecordProto_ExecuteNesting();
  virtual ~ServiceRecordProto_ExecuteNesting();

  ServiceRecordProto_ExecuteNesting(const ServiceRecordProto_ExecuteNesting& from);
  ServiceRecordProto_ExecuteNesting(ServiceRecordProto_ExecuteNesting&& from) noexcept
    : ServiceRecordProto_ExecuteNesting() {
    *this = ::std::move(from);
  }

  inline ServiceRecordProto_ExecuteNesting& operator=(const ServiceRecordProto_ExecuteNesting& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRecordProto_ExecuteNesting& operator=(ServiceRecordProto_ExecuteNesting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceRecordProto_ExecuteNesting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRecordProto_ExecuteNesting* internal_default_instance() {
    return reinterpret_cast<const ServiceRecordProto_ExecuteNesting*>(
               &_ServiceRecordProto_ExecuteNesting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ServiceRecordProto_ExecuteNesting& a, ServiceRecordProto_ExecuteNesting& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRecordProto_ExecuteNesting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRecordProto_ExecuteNesting* New() const final {
    return CreateMaybeMessage<ServiceRecordProto_ExecuteNesting>(nullptr);
  }

  ServiceRecordProto_ExecuteNesting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRecordProto_ExecuteNesting>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceRecordProto_ExecuteNesting& from);
  void MergeFrom(const ServiceRecordProto_ExecuteNesting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceRecordProto_ExecuteNesting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ServiceRecordProto.ExecuteNesting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutingStartFieldNumber = 3,
    kExecuteNestingFieldNumber = 1,
    kExecuteFgFieldNumber = 2,
  };
  // optional .android.util.Duration executing_start = 3;
  bool has_executing_start() const;
  void clear_executing_start();
  const ::android::util::Duration& executing_start() const;
  ::android::util::Duration* release_executing_start();
  ::android::util::Duration* mutable_executing_start();
  void set_allocated_executing_start(::android::util::Duration* executing_start);

  // optional int32 execute_nesting = 1;
  bool has_execute_nesting() const;
  void clear_execute_nesting();
  ::PROTOBUF_NAMESPACE_ID::int32 execute_nesting() const;
  void set_execute_nesting(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool execute_fg = 2;
  bool has_execute_fg() const;
  void clear_execute_fg();
  bool execute_fg() const;
  void set_execute_fg(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ServiceRecordProto.ExecuteNesting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::util::Duration* executing_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 execute_nesting_;
  bool execute_fg_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceRecordProto_Crash :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ServiceRecordProto.Crash) */ {
 public:
  ServiceRecordProto_Crash();
  virtual ~ServiceRecordProto_Crash();

  ServiceRecordProto_Crash(const ServiceRecordProto_Crash& from);
  ServiceRecordProto_Crash(ServiceRecordProto_Crash&& from) noexcept
    : ServiceRecordProto_Crash() {
    *this = ::std::move(from);
  }

  inline ServiceRecordProto_Crash& operator=(const ServiceRecordProto_Crash& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRecordProto_Crash& operator=(ServiceRecordProto_Crash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceRecordProto_Crash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRecordProto_Crash* internal_default_instance() {
    return reinterpret_cast<const ServiceRecordProto_Crash*>(
               &_ServiceRecordProto_Crash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ServiceRecordProto_Crash& a, ServiceRecordProto_Crash& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRecordProto_Crash* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRecordProto_Crash* New() const final {
    return CreateMaybeMessage<ServiceRecordProto_Crash>(nullptr);
  }

  ServiceRecordProto_Crash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRecordProto_Crash>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceRecordProto_Crash& from);
  void MergeFrom(const ServiceRecordProto_Crash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceRecordProto_Crash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ServiceRecordProto.Crash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRestartDelayFieldNumber = 2,
    kNextRestartTimeFieldNumber = 3,
    kRestartCountFieldNumber = 1,
    kCrashCountFieldNumber = 4,
  };
  // optional .android.util.Duration restart_delay = 2;
  bool has_restart_delay() const;
  void clear_restart_delay();
  const ::android::util::Duration& restart_delay() const;
  ::android::util::Duration* release_restart_delay();
  ::android::util::Duration* mutable_restart_delay();
  void set_allocated_restart_delay(::android::util::Duration* restart_delay);

  // optional .android.util.Duration next_restart_time = 3;
  bool has_next_restart_time() const;
  void clear_next_restart_time();
  const ::android::util::Duration& next_restart_time() const;
  ::android::util::Duration* release_next_restart_time();
  ::android::util::Duration* mutable_next_restart_time();
  void set_allocated_next_restart_time(::android::util::Duration* next_restart_time);

  // optional int32 restart_count = 1;
  bool has_restart_count() const;
  void clear_restart_count();
  ::PROTOBUF_NAMESPACE_ID::int32 restart_count() const;
  void set_restart_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 crash_count = 4;
  bool has_crash_count() const;
  void clear_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count() const;
  void set_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ServiceRecordProto.Crash)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::util::Duration* restart_delay_;
  ::android::util::Duration* next_restart_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 restart_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceRecordProto_StartItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ServiceRecordProto.StartItem) */ {
 public:
  ServiceRecordProto_StartItem();
  virtual ~ServiceRecordProto_StartItem();

  ServiceRecordProto_StartItem(const ServiceRecordProto_StartItem& from);
  ServiceRecordProto_StartItem(ServiceRecordProto_StartItem&& from) noexcept
    : ServiceRecordProto_StartItem() {
    *this = ::std::move(from);
  }

  inline ServiceRecordProto_StartItem& operator=(const ServiceRecordProto_StartItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRecordProto_StartItem& operator=(ServiceRecordProto_StartItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceRecordProto_StartItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRecordProto_StartItem* internal_default_instance() {
    return reinterpret_cast<const ServiceRecordProto_StartItem*>(
               &_ServiceRecordProto_StartItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ServiceRecordProto_StartItem& a, ServiceRecordProto_StartItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRecordProto_StartItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRecordProto_StartItem* New() const final {
    return CreateMaybeMessage<ServiceRecordProto_StartItem>(nullptr);
  }

  ServiceRecordProto_StartItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRecordProto_StartItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceRecordProto_StartItem& from);
  void MergeFrom(const ServiceRecordProto_StartItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceRecordProto_StartItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ServiceRecordProto.StartItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 2,
    kIntentFieldNumber = 5,
    kNeededGrantsFieldNumber = 6,
    kUriPermissionsFieldNumber = 7,
    kIdFieldNumber = 1,
    kDeliveryCountFieldNumber = 3,
    kDoneExecutingCountFieldNumber = 4,
  };
  // optional .android.util.Duration duration = 2;
  bool has_duration() const;
  void clear_duration();
  const ::android::util::Duration& duration() const;
  ::android::util::Duration* release_duration();
  ::android::util::Duration* mutable_duration();
  void set_allocated_duration(::android::util::Duration* duration);

  // optional .android.content.IntentProto intent = 5;
  bool has_intent() const;
  void clear_intent();
  const ::android::content::IntentProto& intent() const;
  ::android::content::IntentProto* release_intent();
  ::android::content::IntentProto* mutable_intent();
  void set_allocated_intent(::android::content::IntentProto* intent);

  // optional .com.android.server.am.NeededUriGrantsProto needed_grants = 6;
  bool has_needed_grants() const;
  void clear_needed_grants();
  const ::com::android::server::am::NeededUriGrantsProto& needed_grants() const;
  ::com::android::server::am::NeededUriGrantsProto* release_needed_grants();
  ::com::android::server::am::NeededUriGrantsProto* mutable_needed_grants();
  void set_allocated_needed_grants(::com::android::server::am::NeededUriGrantsProto* needed_grants);

  // optional .com.android.server.am.UriPermissionOwnerProto uri_permissions = 7;
  bool has_uri_permissions() const;
  void clear_uri_permissions();
  const ::com::android::server::am::UriPermissionOwnerProto& uri_permissions() const;
  ::com::android::server::am::UriPermissionOwnerProto* release_uri_permissions();
  ::com::android::server::am::UriPermissionOwnerProto* mutable_uri_permissions();
  void set_allocated_uri_permissions(::com::android::server::am::UriPermissionOwnerProto* uri_permissions);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 delivery_count = 3;
  bool has_delivery_count() const;
  void clear_delivery_count();
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_count() const;
  void set_delivery_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 done_executing_count = 4;
  bool has_done_executing_count() const;
  void clear_done_executing_count();
  ::PROTOBUF_NAMESPACE_ID::int32 done_executing_count() const;
  void set_done_executing_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ServiceRecordProto.StartItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::util::Duration* duration_;
  ::android::content::IntentProto* intent_;
  ::com::android::server::am::NeededUriGrantsProto* needed_grants_;
  ::com::android::server::am::UriPermissionOwnerProto* uri_permissions_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 done_executing_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ServiceRecordProto) */ {
 public:
  ServiceRecordProto();
  virtual ~ServiceRecordProto();

  ServiceRecordProto(const ServiceRecordProto& from);
  ServiceRecordProto(ServiceRecordProto&& from) noexcept
    : ServiceRecordProto() {
    *this = ::std::move(from);
  }

  inline ServiceRecordProto& operator=(const ServiceRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceRecordProto& operator=(ServiceRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceRecordProto* internal_default_instance() {
    return reinterpret_cast<const ServiceRecordProto*>(
               &_ServiceRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ServiceRecordProto& a, ServiceRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceRecordProto* New() const final {
    return CreateMaybeMessage<ServiceRecordProto>(nullptr);
  }

  ServiceRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceRecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceRecordProto& from);
  void MergeFrom(const ServiceRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ServiceRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ServiceRecordProto_AppInfo AppInfo;
  typedef ServiceRecordProto_Foreground Foreground;
  typedef ServiceRecordProto_Start Start;
  typedef ServiceRecordProto_ExecuteNesting ExecuteNesting;
  typedef ServiceRecordProto_Crash Crash;
  typedef ServiceRecordProto_StartItem StartItem;

  // accessors -------------------------------------------------------

  enum : int {
    kDeliveredStartsFieldNumber = 23,
    kPendingStartsFieldNumber = 24,
    kBindingsFieldNumber = 25,
    kConnectionsFieldNumber = 26,
    kShortNameFieldNumber = 1,
    kPackageNameFieldNumber = 5,
    kProcessNameFieldNumber = 6,
    kPermissionFieldNumber = 7,
    kIntentFieldNumber = 4,
    kAppinfoFieldNumber = 8,
    kAppFieldNumber = 9,
    kIsolatedProcFieldNumber = 10,
    kForegroundFieldNumber = 13,
    kCreateRealTimeFieldNumber = 14,
    kStartingBgTimeoutFieldNumber = 15,
    kLastActivityTimeFieldNumber = 16,
    kRestartTimeFieldNumber = 17,
    kStartFieldNumber = 19,
    kExecuteFieldNumber = 20,
    kDestoryTimeFieldNumber = 21,
    kCrashFieldNumber = 22,
    kPidFieldNumber = 3,
    kIsRunningFieldNumber = 2,
    kWhitelistManagerFieldNumber = 11,
    kDelayedFieldNumber = 12,
    kCreatedFromFgFieldNumber = 18,
    kAllowWhileInUsePermissionInFgsFieldNumber = 27,
  };
  // repeated .com.android.server.am.ServiceRecordProto.StartItem delivered_starts = 23;
  int delivered_starts_size() const;
  void clear_delivered_starts();
  ::com::android::server::am::ServiceRecordProto_StartItem* mutable_delivered_starts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem >*
      mutable_delivered_starts();
  const ::com::android::server::am::ServiceRecordProto_StartItem& delivered_starts(int index) const;
  ::com::android::server::am::ServiceRecordProto_StartItem* add_delivered_starts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem >&
      delivered_starts() const;

  // repeated .com.android.server.am.ServiceRecordProto.StartItem pending_starts = 24;
  int pending_starts_size() const;
  void clear_pending_starts();
  ::com::android::server::am::ServiceRecordProto_StartItem* mutable_pending_starts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem >*
      mutable_pending_starts();
  const ::com::android::server::am::ServiceRecordProto_StartItem& pending_starts(int index) const;
  ::com::android::server::am::ServiceRecordProto_StartItem* add_pending_starts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem >&
      pending_starts() const;

  // repeated .com.android.server.am.IntentBindRecordProto bindings = 25;
  int bindings_size() const;
  void clear_bindings();
  ::com::android::server::am::IntentBindRecordProto* mutable_bindings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::IntentBindRecordProto >*
      mutable_bindings();
  const ::com::android::server::am::IntentBindRecordProto& bindings(int index) const;
  ::com::android::server::am::IntentBindRecordProto* add_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::IntentBindRecordProto >&
      bindings() const;

  // repeated .com.android.server.am.ConnectionRecordProto connections = 26;
  int connections_size() const;
  void clear_connections();
  ::com::android::server::am::ConnectionRecordProto* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ConnectionRecordProto >*
      mutable_connections();
  const ::com::android::server::am::ConnectionRecordProto& connections(int index) const;
  ::com::android::server::am::ConnectionRecordProto* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ConnectionRecordProto >&
      connections() const;

  // optional string short_name = 1;
  bool has_short_name() const;
  void clear_short_name();
  const std::string& short_name() const;
  void set_short_name(const std::string& value);
  void set_short_name(std::string&& value);
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  std::string* mutable_short_name();
  std::string* release_short_name();
  void set_allocated_short_name(std::string* short_name);

  // optional string package_name = 5;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional string process_name = 6;
  bool has_process_name() const;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);

  // optional string permission = 7;
  bool has_permission() const;
  void clear_permission();
  const std::string& permission() const;
  void set_permission(const std::string& value);
  void set_permission(std::string&& value);
  void set_permission(const char* value);
  void set_permission(const char* value, size_t size);
  std::string* mutable_permission();
  std::string* release_permission();
  void set_allocated_permission(std::string* permission);

  // optional .android.content.IntentProto intent = 4;
  bool has_intent() const;
  void clear_intent();
  const ::android::content::IntentProto& intent() const;
  ::android::content::IntentProto* release_intent();
  ::android::content::IntentProto* mutable_intent();
  void set_allocated_intent(::android::content::IntentProto* intent);

  // optional .com.android.server.am.ServiceRecordProto.AppInfo appinfo = 8;
  bool has_appinfo() const;
  void clear_appinfo();
  const ::com::android::server::am::ServiceRecordProto_AppInfo& appinfo() const;
  ::com::android::server::am::ServiceRecordProto_AppInfo* release_appinfo();
  ::com::android::server::am::ServiceRecordProto_AppInfo* mutable_appinfo();
  void set_allocated_appinfo(::com::android::server::am::ServiceRecordProto_AppInfo* appinfo);

  // optional .com.android.server.am.ProcessRecordProto app = 9;
  bool has_app() const;
  void clear_app();
  const ::com::android::server::am::ProcessRecordProto& app() const;
  ::com::android::server::am::ProcessRecordProto* release_app();
  ::com::android::server::am::ProcessRecordProto* mutable_app();
  void set_allocated_app(::com::android::server::am::ProcessRecordProto* app);

  // optional .com.android.server.am.ProcessRecordProto isolated_proc = 10;
  bool has_isolated_proc() const;
  void clear_isolated_proc();
  const ::com::android::server::am::ProcessRecordProto& isolated_proc() const;
  ::com::android::server::am::ProcessRecordProto* release_isolated_proc();
  ::com::android::server::am::ProcessRecordProto* mutable_isolated_proc();
  void set_allocated_isolated_proc(::com::android::server::am::ProcessRecordProto* isolated_proc);

  // optional .com.android.server.am.ServiceRecordProto.Foreground foreground = 13;
  bool has_foreground() const;
  void clear_foreground();
  const ::com::android::server::am::ServiceRecordProto_Foreground& foreground() const;
  ::com::android::server::am::ServiceRecordProto_Foreground* release_foreground();
  ::com::android::server::am::ServiceRecordProto_Foreground* mutable_foreground();
  void set_allocated_foreground(::com::android::server::am::ServiceRecordProto_Foreground* foreground);

  // optional .android.util.Duration create_real_time = 14;
  bool has_create_real_time() const;
  void clear_create_real_time();
  const ::android::util::Duration& create_real_time() const;
  ::android::util::Duration* release_create_real_time();
  ::android::util::Duration* mutable_create_real_time();
  void set_allocated_create_real_time(::android::util::Duration* create_real_time);

  // optional .android.util.Duration starting_bg_timeout = 15;
  bool has_starting_bg_timeout() const;
  void clear_starting_bg_timeout();
  const ::android::util::Duration& starting_bg_timeout() const;
  ::android::util::Duration* release_starting_bg_timeout();
  ::android::util::Duration* mutable_starting_bg_timeout();
  void set_allocated_starting_bg_timeout(::android::util::Duration* starting_bg_timeout);

  // optional .android.util.Duration last_activity_time = 16;
  bool has_last_activity_time() const;
  void clear_last_activity_time();
  const ::android::util::Duration& last_activity_time() const;
  ::android::util::Duration* release_last_activity_time();
  ::android::util::Duration* mutable_last_activity_time();
  void set_allocated_last_activity_time(::android::util::Duration* last_activity_time);

  // optional .android.util.Duration restart_time = 17;
  bool has_restart_time() const;
  void clear_restart_time();
  const ::android::util::Duration& restart_time() const;
  ::android::util::Duration* release_restart_time();
  ::android::util::Duration* mutable_restart_time();
  void set_allocated_restart_time(::android::util::Duration* restart_time);

  // optional .com.android.server.am.ServiceRecordProto.Start start = 19;
  bool has_start() const;
  void clear_start();
  const ::com::android::server::am::ServiceRecordProto_Start& start() const;
  ::com::android::server::am::ServiceRecordProto_Start* release_start();
  ::com::android::server::am::ServiceRecordProto_Start* mutable_start();
  void set_allocated_start(::com::android::server::am::ServiceRecordProto_Start* start);

  // optional .com.android.server.am.ServiceRecordProto.ExecuteNesting execute = 20;
  bool has_execute() const;
  void clear_execute();
  const ::com::android::server::am::ServiceRecordProto_ExecuteNesting& execute() const;
  ::com::android::server::am::ServiceRecordProto_ExecuteNesting* release_execute();
  ::com::android::server::am::ServiceRecordProto_ExecuteNesting* mutable_execute();
  void set_allocated_execute(::com::android::server::am::ServiceRecordProto_ExecuteNesting* execute);

  // optional .android.util.Duration destory_time = 21;
  bool has_destory_time() const;
  void clear_destory_time();
  const ::android::util::Duration& destory_time() const;
  ::android::util::Duration* release_destory_time();
  ::android::util::Duration* mutable_destory_time();
  void set_allocated_destory_time(::android::util::Duration* destory_time);

  // optional .com.android.server.am.ServiceRecordProto.Crash crash = 22;
  bool has_crash() const;
  void clear_crash();
  const ::com::android::server::am::ServiceRecordProto_Crash& crash() const;
  ::com::android::server::am::ServiceRecordProto_Crash* release_crash();
  ::com::android::server::am::ServiceRecordProto_Crash* mutable_crash();
  void set_allocated_crash(::com::android::server::am::ServiceRecordProto_Crash* crash);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_running = 2;
  bool has_is_running() const;
  void clear_is_running();
  bool is_running() const;
  void set_is_running(bool value);

  // optional bool whitelist_manager = 11;
  bool has_whitelist_manager() const;
  void clear_whitelist_manager();
  bool whitelist_manager() const;
  void set_whitelist_manager(bool value);

  // optional bool delayed = 12;
  bool has_delayed() const;
  void clear_delayed();
  bool delayed() const;
  void set_delayed(bool value);

  // optional bool created_from_fg = 18;
  bool has_created_from_fg() const;
  void clear_created_from_fg();
  bool created_from_fg() const;
  void set_created_from_fg(bool value);

  // optional bool allow_while_in_use_permission_in_fgs = 27;
  bool has_allow_while_in_use_permission_in_fgs() const;
  void clear_allow_while_in_use_permission_in_fgs();
  bool allow_while_in_use_permission_in_fgs() const;
  void set_allow_while_in_use_permission_in_fgs(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ServiceRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem > delivered_starts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem > pending_starts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::IntentBindRecordProto > bindings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ConnectionRecordProto > connections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_;
  ::android::content::IntentProto* intent_;
  ::com::android::server::am::ServiceRecordProto_AppInfo* appinfo_;
  ::com::android::server::am::ProcessRecordProto* app_;
  ::com::android::server::am::ProcessRecordProto* isolated_proc_;
  ::com::android::server::am::ServiceRecordProto_Foreground* foreground_;
  ::android::util::Duration* create_real_time_;
  ::android::util::Duration* starting_bg_timeout_;
  ::android::util::Duration* last_activity_time_;
  ::android::util::Duration* restart_time_;
  ::com::android::server::am::ServiceRecordProto_Start* start_;
  ::com::android::server::am::ServiceRecordProto_ExecuteNesting* execute_;
  ::android::util::Duration* destory_time_;
  ::com::android::server::am::ServiceRecordProto_Crash* crash_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  bool is_running_;
  bool whitelist_manager_;
  bool delayed_;
  bool created_from_fg_;
  bool allow_while_in_use_permission_in_fgs_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ConnectionRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ConnectionRecordProto) */ {
 public:
  ConnectionRecordProto();
  virtual ~ConnectionRecordProto();

  ConnectionRecordProto(const ConnectionRecordProto& from);
  ConnectionRecordProto(ConnectionRecordProto&& from) noexcept
    : ConnectionRecordProto() {
    *this = ::std::move(from);
  }

  inline ConnectionRecordProto& operator=(const ConnectionRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionRecordProto& operator=(ConnectionRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConnectionRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionRecordProto* internal_default_instance() {
    return reinterpret_cast<const ConnectionRecordProto*>(
               &_ConnectionRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ConnectionRecordProto& a, ConnectionRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionRecordProto* New() const final {
    return CreateMaybeMessage<ConnectionRecordProto>(nullptr);
  }

  ConnectionRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionRecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConnectionRecordProto& from);
  void MergeFrom(const ConnectionRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectionRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ConnectionRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ConnectionRecordProto_Flag Flag;
  static constexpr Flag AUTO_CREATE =
    ConnectionRecordProto_Flag_AUTO_CREATE;
  static constexpr Flag DEBUG_UNBIND =
    ConnectionRecordProto_Flag_DEBUG_UNBIND;
  static constexpr Flag NOT_FG =
    ConnectionRecordProto_Flag_NOT_FG;
  static constexpr Flag IMPORTANT_BG =
    ConnectionRecordProto_Flag_IMPORTANT_BG;
  static constexpr Flag ABOVE_CLIENT =
    ConnectionRecordProto_Flag_ABOVE_CLIENT;
  static constexpr Flag ALLOW_OOM_MANAGEMENT =
    ConnectionRecordProto_Flag_ALLOW_OOM_MANAGEMENT;
  static constexpr Flag WAIVE_PRIORITY =
    ConnectionRecordProto_Flag_WAIVE_PRIORITY;
  static constexpr Flag IMPORTANT =
    ConnectionRecordProto_Flag_IMPORTANT;
  static constexpr Flag ADJUST_WITH_ACTIVITY =
    ConnectionRecordProto_Flag_ADJUST_WITH_ACTIVITY;
  static constexpr Flag FG_SERVICE_WHILE_AWAKE =
    ConnectionRecordProto_Flag_FG_SERVICE_WHILE_AWAKE;
  static constexpr Flag FG_SERVICE =
    ConnectionRecordProto_Flag_FG_SERVICE;
  static constexpr Flag TREAT_LIKE_ACTIVITY =
    ConnectionRecordProto_Flag_TREAT_LIKE_ACTIVITY;
  static constexpr Flag VISIBLE =
    ConnectionRecordProto_Flag_VISIBLE;
  static constexpr Flag SHOWING_UI =
    ConnectionRecordProto_Flag_SHOWING_UI;
  static constexpr Flag NOT_VISIBLE =
    ConnectionRecordProto_Flag_NOT_VISIBLE;
  static constexpr Flag DEAD =
    ConnectionRecordProto_Flag_DEAD;
  static constexpr Flag NOT_PERCEPTIBLE =
    ConnectionRecordProto_Flag_NOT_PERCEPTIBLE;
  static constexpr Flag INCLUDE_CAPABILITIES =
    ConnectionRecordProto_Flag_INCLUDE_CAPABILITIES;
  static inline bool Flag_IsValid(int value) {
    return ConnectionRecordProto_Flag_IsValid(value);
  }
  static constexpr Flag Flag_MIN =
    ConnectionRecordProto_Flag_Flag_MIN;
  static constexpr Flag Flag_MAX =
    ConnectionRecordProto_Flag_Flag_MAX;
  static constexpr int Flag_ARRAYSIZE =
    ConnectionRecordProto_Flag_Flag_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Flag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flag_Name.");
    return ConnectionRecordProto_Flag_Name(enum_t_value);
  }
  static inline bool Flag_Parse(const std::string& name,
      Flag* value) {
    return ConnectionRecordProto_Flag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 3,
    kHexHashFieldNumber = 1,
    kServiceNameFieldNumber = 4,
    kUserIdFieldNumber = 2,
  };
  // repeated .com.android.server.am.ConnectionRecordProto.Flag flags = 3;
  int flags_size() const;
  void clear_flags();
  ::com::android::server::am::ConnectionRecordProto_Flag flags(int index) const;
  void set_flags(int index, ::com::android::server::am::ConnectionRecordProto_Flag value);
  void add_flags(::com::android::server::am::ConnectionRecordProto_Flag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_flags();

  // optional string hex_hash = 1;
  bool has_hex_hash() const;
  void clear_hex_hash();
  const std::string& hex_hash() const;
  void set_hex_hash(const std::string& value);
  void set_hex_hash(std::string&& value);
  void set_hex_hash(const char* value);
  void set_hex_hash(const char* value, size_t size);
  std::string* mutable_hex_hash();
  std::string* release_hex_hash();
  void set_allocated_hex_hash(std::string* hex_hash);

  // optional string service_name = 4;
  bool has_service_name() const;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);

  // optional int32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ConnectionRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> flags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppBindRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppBindRecordProto) */ {
 public:
  AppBindRecordProto();
  virtual ~AppBindRecordProto();

  AppBindRecordProto(const AppBindRecordProto& from);
  AppBindRecordProto(AppBindRecordProto&& from) noexcept
    : AppBindRecordProto() {
    *this = ::std::move(from);
  }

  inline AppBindRecordProto& operator=(const AppBindRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppBindRecordProto& operator=(AppBindRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppBindRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppBindRecordProto* internal_default_instance() {
    return reinterpret_cast<const AppBindRecordProto*>(
               &_AppBindRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(AppBindRecordProto& a, AppBindRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AppBindRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppBindRecordProto* New() const final {
    return CreateMaybeMessage<AppBindRecordProto>(nullptr);
  }

  AppBindRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppBindRecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppBindRecordProto& from);
  void MergeFrom(const AppBindRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppBindRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppBindRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 3,
    kServiceNameFieldNumber = 1,
    kClientProcNameFieldNumber = 2,
  };
  // repeated string connections = 3;
  int connections_size() const;
  void clear_connections();
  const std::string& connections(int index) const;
  std::string* mutable_connections(int index);
  void set_connections(int index, const std::string& value);
  void set_connections(int index, std::string&& value);
  void set_connections(int index, const char* value);
  void set_connections(int index, const char* value, size_t size);
  std::string* add_connections();
  void add_connections(const std::string& value);
  void add_connections(std::string&& value);
  void add_connections(const char* value);
  void add_connections(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& connections() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_connections();

  // optional string service_name = 1;
  bool has_service_name() const;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);

  // optional string client_proc_name = 2;
  bool has_client_proc_name() const;
  void clear_client_proc_name();
  const std::string& client_proc_name() const;
  void set_client_proc_name(const std::string& value);
  void set_client_proc_name(std::string&& value);
  void set_client_proc_name(const char* value);
  void set_client_proc_name(const char* value, size_t size);
  std::string* mutable_client_proc_name();
  std::string* release_client_proc_name();
  void set_allocated_client_proc_name(std::string* client_proc_name);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppBindRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> connections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_proc_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class IntentBindRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.IntentBindRecordProto) */ {
 public:
  IntentBindRecordProto();
  virtual ~IntentBindRecordProto();

  IntentBindRecordProto(const IntentBindRecordProto& from);
  IntentBindRecordProto(IntentBindRecordProto&& from) noexcept
    : IntentBindRecordProto() {
    *this = ::std::move(from);
  }

  inline IntentBindRecordProto& operator=(const IntentBindRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntentBindRecordProto& operator=(IntentBindRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IntentBindRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntentBindRecordProto* internal_default_instance() {
    return reinterpret_cast<const IntentBindRecordProto*>(
               &_IntentBindRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(IntentBindRecordProto& a, IntentBindRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IntentBindRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntentBindRecordProto* New() const final {
    return CreateMaybeMessage<IntentBindRecordProto>(nullptr);
  }

  IntentBindRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntentBindRecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IntentBindRecordProto& from);
  void MergeFrom(const IntentBindRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntentBindRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.IntentBindRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppsFieldNumber = 8,
    kBinderFieldNumber = 2,
    kIntentFieldNumber = 1,
    kAutoCreateFieldNumber = 3,
    kRequestedFieldNumber = 4,
    kReceivedFieldNumber = 5,
    kHasBoundFieldNumber = 6,
    kDoRebindFieldNumber = 7,
  };
  // repeated .com.android.server.am.AppBindRecordProto apps = 8;
  int apps_size() const;
  void clear_apps();
  ::com::android::server::am::AppBindRecordProto* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppBindRecordProto >*
      mutable_apps();
  const ::com::android::server::am::AppBindRecordProto& apps(int index) const;
  ::com::android::server::am::AppBindRecordProto* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppBindRecordProto >&
      apps() const;

  // optional string binder = 2;
  bool has_binder() const;
  void clear_binder();
  const std::string& binder() const;
  void set_binder(const std::string& value);
  void set_binder(std::string&& value);
  void set_binder(const char* value);
  void set_binder(const char* value, size_t size);
  std::string* mutable_binder();
  std::string* release_binder();
  void set_allocated_binder(std::string* binder);

  // optional .android.content.IntentProto intent = 1;
  bool has_intent() const;
  void clear_intent();
  const ::android::content::IntentProto& intent() const;
  ::android::content::IntentProto* release_intent();
  ::android::content::IntentProto* mutable_intent();
  void set_allocated_intent(::android::content::IntentProto* intent);

  // optional bool auto_create = 3;
  bool has_auto_create() const;
  void clear_auto_create();
  bool auto_create() const;
  void set_auto_create(bool value);

  // optional bool requested = 4;
  bool has_requested() const;
  void clear_requested();
  bool requested() const;
  void set_requested(bool value);

  // optional bool received = 5;
  bool has_received() const;
  void clear_received();
  bool received() const;
  void set_received(bool value);

  // optional bool has_bound = 6;
  bool has_has_bound() const;
  void clear_has_bound();
  bool has_bound() const;
  void set_has_bound(bool value);

  // optional bool do_rebind = 7;
  bool has_do_rebind() const;
  void clear_do_rebind();
  bool do_rebind() const;
  void set_do_rebind(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.IntentBindRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppBindRecordProto > apps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binder_;
  ::android::content::IntentProto* intent_;
  bool auto_create_;
  bool requested_;
  bool received_;
  bool has_bound_;
  bool do_rebind_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_LruProcesses :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_LruProcesses();
  virtual ~ActivityManagerServiceDumpProcessesProto_LruProcesses();

  ActivityManagerServiceDumpProcessesProto_LruProcesses(const ActivityManagerServiceDumpProcessesProto_LruProcesses& from);
  ActivityManagerServiceDumpProcessesProto_LruProcesses(ActivityManagerServiceDumpProcessesProto_LruProcesses&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_LruProcesses() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_LruProcesses& operator=(const ActivityManagerServiceDumpProcessesProto_LruProcesses& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_LruProcesses& operator=(ActivityManagerServiceDumpProcessesProto_LruProcesses&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_LruProcesses& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_LruProcesses* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_LruProcesses*>(
               &_ActivityManagerServiceDumpProcessesProto_LruProcesses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ActivityManagerServiceDumpProcessesProto_LruProcesses& a, ActivityManagerServiceDumpProcessesProto_LruProcesses& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_LruProcesses* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_LruProcesses* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_LruProcesses>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_LruProcesses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_LruProcesses>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_LruProcesses& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_LruProcesses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_LruProcesses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 4,
    kSizeFieldNumber = 1,
    kNonActAtFieldNumber = 2,
    kNonSvcAtFieldNumber = 3,
  };
  // repeated .com.android.server.am.ProcessOomProto list = 4;
  int list_size() const;
  void clear_list();
  ::com::android::server::am::ProcessOomProto* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessOomProto >*
      mutable_list();
  const ::com::android::server::am::ProcessOomProto& list(int index) const;
  ::com::android::server::am::ProcessOomProto* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessOomProto >&
      list() const;

  // optional int32 size = 1;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 non_act_at = 2;
  bool has_non_act_at() const;
  void clear_non_act_at();
  ::PROTOBUF_NAMESPACE_ID::int32 non_act_at() const;
  void set_non_act_at(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 non_svc_at = 3;
  bool has_non_svc_at() const;
  void clear_non_svc_at();
  ::PROTOBUF_NAMESPACE_ID::int32 non_svc_at() const;
  void set_non_svc_at(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessOomProto > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 non_act_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 non_svc_at_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage();
  virtual ~ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage();

  ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage(const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& from);
  ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage(ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& operator=(const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& operator=(ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage*>(
               &_ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& a, ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // optional string package = 1;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional int32 mode = 2;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState();
  virtual ~ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState();

  ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& from);
  ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& operator=(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& operator=(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState*>(
               &_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& a, ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 state = 2;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto();
  virtual ~ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto();

  ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& from);
  ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& operator=(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& operator=(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto*>(
               &_ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& a, ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState ProcState;

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 3,
    kLastProcStatesFieldNumber = 5,
    kPackageFieldNumber = 2,
    kUidFieldNumber = 1,
    kCutPointFieldNumber = 4,
  };
  // repeated .android.app.UidObserverFlag flags = 3;
  int flags_size() const;
  void clear_flags();
  ::android::app::UidObserverFlag flags(int index) const;
  void set_flags(int index, ::android::app::UidObserverFlag value);
  void add_flags(::android::app::UidObserverFlag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_flags();

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState last_proc_states = 5;
  int last_proc_states_size() const;
  void clear_last_proc_states();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* mutable_last_proc_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState >*
      mutable_last_proc_states();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& last_proc_states(int index) const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* add_last_proc_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState >&
      last_proc_states() const;

  // optional string package = 2;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cut_point = 4;
  bool has_cut_point() const;
  void clear_cut_point();
  ::PROTOBUF_NAMESPACE_ID::int32 cut_point() const;
  void set_cut_point(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> flags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState > last_proc_states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cut_point_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist();
  virtual ~ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist();

  ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist(const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& from);
  ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist(ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& operator=(const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& operator=(ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist*>(
               &_ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& a, ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 3,
    kDurationMsFieldNumber = 2,
    kTargetUidFieldNumber = 1,
    kTypeFieldNumber = 4,
    kReasonCodeFieldNumber = 5,
    kCallingUidFieldNumber = 6,
  };
  // optional string tag = 3;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional int64 duration_ms = 2;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 target_uid = 1;
  bool has_target_uid() const;
  void clear_target_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 target_uid() const;
  void set_target_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 type = 4;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reason_code = 5;
  bool has_reason_code() const;
  void clear_reason_code();
  ::PROTOBUF_NAMESPACE_ID::int32 reason_code() const;
  void set_reason_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 calling_uid = 6;
  bool has_calling_uid() const;
  void clear_calling_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 calling_uid() const;
  void set_calling_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 reason_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 calling_uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_SleepStatus :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_SleepStatus();
  virtual ~ActivityManagerServiceDumpProcessesProto_SleepStatus();

  ActivityManagerServiceDumpProcessesProto_SleepStatus(const ActivityManagerServiceDumpProcessesProto_SleepStatus& from);
  ActivityManagerServiceDumpProcessesProto_SleepStatus(ActivityManagerServiceDumpProcessesProto_SleepStatus&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_SleepStatus() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_SleepStatus& operator=(const ActivityManagerServiceDumpProcessesProto_SleepStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_SleepStatus& operator=(ActivityManagerServiceDumpProcessesProto_SleepStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_SleepStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_SleepStatus* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_SleepStatus*>(
               &_ActivityManagerServiceDumpProcessesProto_SleepStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ActivityManagerServiceDumpProcessesProto_SleepStatus& a, ActivityManagerServiceDumpProcessesProto_SleepStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_SleepStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_SleepStatus* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_SleepStatus>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_SleepStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_SleepStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_SleepStatus& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_SleepStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_SleepStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSleepTokensFieldNumber = 2,
    kWakefulnessFieldNumber = 1,
    kSleepingFieldNumber = 3,
    kShuttingDownFieldNumber = 4,
    kTestPssModeFieldNumber = 5,
  };
  // repeated string sleep_tokens = 2 [(.android.privacy) = {
  int sleep_tokens_size() const;
  void clear_sleep_tokens();
  const std::string& sleep_tokens(int index) const;
  std::string* mutable_sleep_tokens(int index);
  void set_sleep_tokens(int index, const std::string& value);
  void set_sleep_tokens(int index, std::string&& value);
  void set_sleep_tokens(int index, const char* value);
  void set_sleep_tokens(int index, const char* value, size_t size);
  std::string* add_sleep_tokens();
  void add_sleep_tokens(const std::string& value);
  void add_sleep_tokens(std::string&& value);
  void add_sleep_tokens(const char* value);
  void add_sleep_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sleep_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sleep_tokens();

  // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 1;
  bool has_wakefulness() const;
  void clear_wakefulness();
  ::android::os::PowerManagerInternalProto_Wakefulness wakefulness() const;
  void set_wakefulness(::android::os::PowerManagerInternalProto_Wakefulness value);

  // optional bool sleeping = 3;
  bool has_sleeping() const;
  void clear_sleeping();
  bool sleeping() const;
  void set_sleeping(bool value);

  // optional bool shutting_down = 4;
  bool has_shutting_down() const;
  void clear_shutting_down();
  bool shutting_down() const;
  void set_shutting_down(bool value);

  // optional bool test_pss_mode = 5;
  bool has_test_pss_mode() const;
  void clear_test_pss_mode();
  bool test_pss_mode() const;
  void set_test_pss_mode(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sleep_tokens_;
  int wakefulness_;
  bool sleeping_;
  bool shutting_down_;
  bool test_pss_mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_Voice :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_Voice();
  virtual ~ActivityManagerServiceDumpProcessesProto_Voice();

  ActivityManagerServiceDumpProcessesProto_Voice(const ActivityManagerServiceDumpProcessesProto_Voice& from);
  ActivityManagerServiceDumpProcessesProto_Voice(ActivityManagerServiceDumpProcessesProto_Voice&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_Voice() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_Voice& operator=(const ActivityManagerServiceDumpProcessesProto_Voice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_Voice& operator=(ActivityManagerServiceDumpProcessesProto_Voice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_Voice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_Voice* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_Voice*>(
               &_ActivityManagerServiceDumpProcessesProto_Voice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ActivityManagerServiceDumpProcessesProto_Voice& a, ActivityManagerServiceDumpProcessesProto_Voice& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_Voice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_Voice* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_Voice>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_Voice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_Voice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_Voice& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_Voice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_Voice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kWakelockFieldNumber = 2,
  };
  // optional string session = 1;
  bool has_session() const;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);

  // optional .android.os.PowerManagerProto.WakeLock wakelock = 2;
  bool has_wakelock() const;
  void clear_wakelock();
  const ::android::os::PowerManagerProto_WakeLock& wakelock() const;
  ::android::os::PowerManagerProto_WakeLock* release_wakelock();
  ::android::os::PowerManagerProto_WakeLock* mutable_wakelock();
  void set_allocated_wakelock(::android::os::PowerManagerProto_WakeLock* wakelock);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::android::os::PowerManagerProto_WakeLock* wakelock_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_DebugApp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_DebugApp();
  virtual ~ActivityManagerServiceDumpProcessesProto_DebugApp();

  ActivityManagerServiceDumpProcessesProto_DebugApp(const ActivityManagerServiceDumpProcessesProto_DebugApp& from);
  ActivityManagerServiceDumpProcessesProto_DebugApp(ActivityManagerServiceDumpProcessesProto_DebugApp&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_DebugApp() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_DebugApp& operator=(const ActivityManagerServiceDumpProcessesProto_DebugApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_DebugApp& operator=(ActivityManagerServiceDumpProcessesProto_DebugApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_DebugApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_DebugApp* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_DebugApp*>(
               &_ActivityManagerServiceDumpProcessesProto_DebugApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ActivityManagerServiceDumpProcessesProto_DebugApp& a, ActivityManagerServiceDumpProcessesProto_DebugApp& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_DebugApp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_DebugApp* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_DebugApp>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_DebugApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_DebugApp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_DebugApp& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_DebugApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_DebugApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugAppFieldNumber = 1,
    kOrigDebugAppFieldNumber = 2,
    kDebugTransientFieldNumber = 3,
    kOrigWaitForDebuggerFieldNumber = 4,
  };
  // optional string debug_app = 1;
  bool has_debug_app() const;
  void clear_debug_app();
  const std::string& debug_app() const;
  void set_debug_app(const std::string& value);
  void set_debug_app(std::string&& value);
  void set_debug_app(const char* value);
  void set_debug_app(const char* value, size_t size);
  std::string* mutable_debug_app();
  std::string* release_debug_app();
  void set_allocated_debug_app(std::string* debug_app);

  // optional string orig_debug_app = 2;
  bool has_orig_debug_app() const;
  void clear_orig_debug_app();
  const std::string& orig_debug_app() const;
  void set_orig_debug_app(const std::string& value);
  void set_orig_debug_app(std::string&& value);
  void set_orig_debug_app(const char* value);
  void set_orig_debug_app(const char* value, size_t size);
  std::string* mutable_orig_debug_app();
  std::string* release_orig_debug_app();
  void set_allocated_orig_debug_app(std::string* orig_debug_app);

  // optional bool debug_transient = 3;
  bool has_debug_transient() const;
  void clear_debug_transient();
  bool debug_transient() const;
  void set_debug_transient(bool value);

  // optional bool orig_wait_for_debugger = 4;
  bool has_orig_wait_for_debugger() const;
  void clear_orig_wait_for_debugger();
  bool orig_wait_for_debugger() const;
  void set_orig_wait_for_debugger(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_app_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orig_debug_app_;
  bool debug_transient_;
  bool orig_wait_for_debugger_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats();
  virtual ~ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats();

  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& from);
  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& operator=(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& operator=(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats*>(
               &_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& a, ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kReportToFieldNumber = 3,
    kUidFieldNumber = 1,
  };
  // optional string size = 2;
  bool has_size() const;
  void clear_size();
  const std::string& size() const;
  void set_size(const std::string& value);
  void set_size(std::string&& value);
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  std::string* mutable_size();
  std::string* release_size();
  void set_allocated_size(std::string* size);

  // optional string report_to = 3;
  bool has_report_to() const;
  void clear_report_to();
  const std::string& report_to() const;
  void set_report_to(const std::string& value);
  void set_report_to(std::string&& value);
  void set_report_to(const char* value);
  void set_report_to(const char* value, size_t size);
  std::string* mutable_report_to();
  std::string* release_report_to();
  void set_allocated_report_to(std::string* report_to);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_to_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process();
  virtual ~ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process();

  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& from);
  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& operator=(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& operator=(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process*>(
               &_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& a, ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats MemStats;

  // accessors -------------------------------------------------------

  enum : int {
    kMemStatsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats mem_stats = 2;
  int mem_stats_size() const;
  void clear_mem_stats();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* mutable_mem_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats >*
      mutable_mem_stats();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& mem_stats(int index) const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* add_mem_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats >&
      mem_stats() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats > mem_stats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump();
  virtual ~ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump();

  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& from);
  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& operator=(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& operator=(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump*>(
               &_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& a, ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcNameFieldNumber = 1,
    kUriFieldNumber = 6,
    kPidFieldNumber = 3,
    kUidFieldNumber = 4,
    kIsUserInitiatedFieldNumber = 5,
  };
  // optional string proc_name = 1;
  bool has_proc_name() const;
  void clear_proc_name();
  const std::string& proc_name() const;
  void set_proc_name(const std::string& value);
  void set_proc_name(std::string&& value);
  void set_proc_name(const char* value);
  void set_proc_name(const char* value, size_t size);
  std::string* mutable_proc_name();
  std::string* release_proc_name();
  void set_allocated_proc_name(std::string* proc_name);

  // optional string uri = 6 [(.android.privacy) = {
  bool has_uri() const;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);

  // optional int32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 4;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_user_initiated = 5;
  bool has_is_user_initiated() const;
  void clear_is_user_initiated();
  bool is_user_initiated() const;
  void set_is_user_initiated(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proc_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  bool is_user_initiated_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_MemWatchProcess :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_MemWatchProcess();
  virtual ~ActivityManagerServiceDumpProcessesProto_MemWatchProcess();

  ActivityManagerServiceDumpProcessesProto_MemWatchProcess(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& from);
  ActivityManagerServiceDumpProcessesProto_MemWatchProcess(ActivityManagerServiceDumpProcessesProto_MemWatchProcess&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_MemWatchProcess() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess& operator=(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess& operator=(ActivityManagerServiceDumpProcessesProto_MemWatchProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_MemWatchProcess* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_MemWatchProcess*>(
               &_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess& a, ActivityManagerServiceDumpProcessesProto_MemWatchProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_MemWatchProcess* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_MemWatchProcess>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_MemWatchProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_MemWatchProcess>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_MemWatchProcess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_MemWatchProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process Process;
  typedef ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump Dump;

  // accessors -------------------------------------------------------

  enum : int {
    kProcsFieldNumber = 1,
    kDumpFieldNumber = 2,
  };
  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process procs = 1;
  int procs_size() const;
  void clear_procs();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* mutable_procs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process >*
      mutable_procs();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& procs(int index) const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* add_procs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process >&
      procs() const;

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump dump = 2;
  bool has_dump() const;
  void clear_dump();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& dump() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* release_dump();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* mutable_dump();
  void set_allocated_dump(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* dump);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process > procs_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* dump_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_Profile :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_Profile();
  virtual ~ActivityManagerServiceDumpProcessesProto_Profile();

  ActivityManagerServiceDumpProcessesProto_Profile(const ActivityManagerServiceDumpProcessesProto_Profile& from);
  ActivityManagerServiceDumpProcessesProto_Profile(ActivityManagerServiceDumpProcessesProto_Profile&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_Profile() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_Profile& operator=(const ActivityManagerServiceDumpProcessesProto_Profile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_Profile& operator=(ActivityManagerServiceDumpProcessesProto_Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_Profile* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_Profile*>(
               &_ActivityManagerServiceDumpProcessesProto_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ActivityManagerServiceDumpProcessesProto_Profile& a, ActivityManagerServiceDumpProcessesProto_Profile& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_Profile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_Profile* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_Profile>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_Profile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_Profile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_Profile& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_Profile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_Profile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 1,
    kProcFieldNumber = 2,
    kInfoFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // optional string app_name = 1;
  bool has_app_name() const;
  void clear_app_name();
  const std::string& app_name() const;
  void set_app_name(const std::string& value);
  void set_app_name(std::string&& value);
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  std::string* mutable_app_name();
  std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);

  // optional .com.android.server.am.ProcessRecordProto proc = 2;
  bool has_proc() const;
  void clear_proc();
  const ::com::android::server::am::ProcessRecordProto& proc() const;
  ::com::android::server::am::ProcessRecordProto* release_proc();
  ::com::android::server::am::ProcessRecordProto* mutable_proc();
  void set_allocated_proc(::com::android::server::am::ProcessRecordProto* proc);

  // optional .android.app.ProfilerInfoProto info = 3;
  bool has_info() const;
  void clear_info();
  const ::android::app::ProfilerInfoProto& info() const;
  ::android::app::ProfilerInfoProto* release_info();
  ::android::app::ProfilerInfoProto* mutable_info();
  void set_allocated_info(::android::app::ProfilerInfoProto* info);

  // optional int32 type = 4;
  bool has_type() const;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::com::android::server::am::ProcessRecordProto* proc_;
  ::android::app::ProfilerInfoProto* info_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto_Controller :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller) */ {
 public:
  ActivityManagerServiceDumpProcessesProto_Controller();
  virtual ~ActivityManagerServiceDumpProcessesProto_Controller();

  ActivityManagerServiceDumpProcessesProto_Controller(const ActivityManagerServiceDumpProcessesProto_Controller& from);
  ActivityManagerServiceDumpProcessesProto_Controller(ActivityManagerServiceDumpProcessesProto_Controller&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto_Controller() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto_Controller& operator=(const ActivityManagerServiceDumpProcessesProto_Controller& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto_Controller& operator=(ActivityManagerServiceDumpProcessesProto_Controller&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto_Controller& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto_Controller* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto_Controller*>(
               &_ActivityManagerServiceDumpProcessesProto_Controller_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ActivityManagerServiceDumpProcessesProto_Controller& a, ActivityManagerServiceDumpProcessesProto_Controller& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto_Controller* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto_Controller* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_Controller>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto_Controller* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto_Controller>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto_Controller& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto_Controller& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto_Controller* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
    kIsAMonkeyFieldNumber = 2,
  };
  // optional string controller = 1;
  bool has_controller() const;
  void clear_controller();
  const std::string& controller() const;
  void set_controller(const std::string& value);
  void set_controller(std::string&& value);
  void set_controller(const char* value);
  void set_controller(const char* value, size_t size);
  std::string* mutable_controller();
  std::string* release_controller();
  void set_allocated_controller(std::string* controller);

  // optional bool is_a_monkey = 2;
  bool has_is_a_monkey() const;
  void clear_is_a_monkey();
  bool is_a_monkey() const;
  void set_is_a_monkey(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  bool is_a_monkey_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActivityManagerServiceDumpProcessesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActivityManagerServiceDumpProcessesProto) */ {
 public:
  ActivityManagerServiceDumpProcessesProto();
  virtual ~ActivityManagerServiceDumpProcessesProto();

  ActivityManagerServiceDumpProcessesProto(const ActivityManagerServiceDumpProcessesProto& from);
  ActivityManagerServiceDumpProcessesProto(ActivityManagerServiceDumpProcessesProto&& from) noexcept
    : ActivityManagerServiceDumpProcessesProto() {
    *this = ::std::move(from);
  }

  inline ActivityManagerServiceDumpProcessesProto& operator=(const ActivityManagerServiceDumpProcessesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityManagerServiceDumpProcessesProto& operator=(ActivityManagerServiceDumpProcessesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActivityManagerServiceDumpProcessesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityManagerServiceDumpProcessesProto* internal_default_instance() {
    return reinterpret_cast<const ActivityManagerServiceDumpProcessesProto*>(
               &_ActivityManagerServiceDumpProcessesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ActivityManagerServiceDumpProcessesProto& a, ActivityManagerServiceDumpProcessesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityManagerServiceDumpProcessesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityManagerServiceDumpProcessesProto* New() const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto>(nullptr);
  }

  ActivityManagerServiceDumpProcessesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityManagerServiceDumpProcessesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActivityManagerServiceDumpProcessesProto& from);
  void MergeFrom(const ActivityManagerServiceDumpProcessesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActivityManagerServiceDumpProcessesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActivityManagerServiceDumpProcessesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ActivityManagerServiceDumpProcessesProto_LruProcesses LruProcesses;
  typedef ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage ScreenCompatPackage;
  typedef ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto UidObserverRegistrationProto;
  typedef ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist PendingTempWhitelist;
  typedef ActivityManagerServiceDumpProcessesProto_SleepStatus SleepStatus;
  typedef ActivityManagerServiceDumpProcessesProto_Voice Voice;
  typedef ActivityManagerServiceDumpProcessesProto_DebugApp DebugApp;
  typedef ActivityManagerServiceDumpProcessesProto_MemWatchProcess MemWatchProcess;
  typedef ActivityManagerServiceDumpProcessesProto_Profile Profile;
  typedef ActivityManagerServiceDumpProcessesProto_Controller Controller;

  // accessors -------------------------------------------------------

  enum : int {
    kProcsFieldNumber = 1,
    kIsolatedProcsFieldNumber = 2,
    kActiveInstrumentationsFieldNumber = 3,
    kActiveUidsFieldNumber = 4,
    kValidateUidsFieldNumber = 5,
    kPidsSelfLockedFieldNumber = 7,
    kImportantProcsFieldNumber = 8,
    kPersistentStartingProcsFieldNumber = 9,
    kRemovedProcsFieldNumber = 10,
    kOnHoldProcsFieldNumber = 11,
    kGcProcsFieldNumber = 12,
    kScreenCompatPackagesFieldNumber = 22,
    kUidObserversFieldNumber = 23,
    kDeviceIdleWhitelistFieldNumber = 24,
    kDeviceIdleTempWhitelistFieldNumber = 25,
    kPendingTempWhitelistFieldNumber = 26,
    kTrackAllocationAppFieldNumber = 33,
    kNativeDebuggingAppFieldNumber = 35,
    kLruProcsFieldNumber = 6,
    kAppErrorsFieldNumber = 13,
    kUserControllerFieldNumber = 14,
    kHomeProcFieldNumber = 15,
    kPreviousProcFieldNumber = 16,
    kHeavyWeightProcFieldNumber = 18,
    kGlobalConfigurationFieldNumber = 19,
    kSleepStatusFieldNumber = 27,
    kRunningVoiceFieldNumber = 28,
    kVrControllerFieldNumber = 29,
    kDebugFieldNumber = 30,
    kCurrentTrackerFieldNumber = 31,
    kMemWatchProcessesFieldNumber = 32,
    kProfileFieldNumber = 34,
    kControllerFieldNumber = 37,
    kGoingToSleepFieldNumber = 47,
    kLaunchingActivityFieldNumber = 48,
    kLastIdleTimeFieldNumber = 58,
    kPreviousProcVisibleTimeMsFieldNumber = 17,
    kConfigWillChangeFieldNumber = 21,
    kAlwaysFinishActivitiesFieldNumber = 36,
    kProcessesReadyFieldNumber = 39,
    kSystemReadyFieldNumber = 40,
    kTotalPersistentProcsFieldNumber = 38,
    kFactoryTestFieldNumber = 42,
    kBootedFieldNumber = 41,
    kBootingFieldNumber = 43,
    kCallFinishBootingFieldNumber = 44,
    kBootAnimationCompleteFieldNumber = 45,
    kLastPowerCheckUptimeMsFieldNumber = 46,
    kAdjSeqFieldNumber = 49,
    kLruSeqFieldNumber = 50,
    kNumNonCachedProcsFieldNumber = 51,
    kNumCachedHiddenProcsFieldNumber = 52,
    kNumServiceProcsFieldNumber = 53,
    kNewNumServiceProcsFieldNumber = 54,
    kAllowLowerMemLevelFieldNumber = 55,
    kLastMemoryLevelFieldNumber = 56,
    kLowRamSinceLastIdleMsFieldNumber = 59,
    kLastNumProcessesFieldNumber = 57,
  };
  // repeated .com.android.server.am.ProcessRecordProto procs = 1;
  int procs_size() const;
  void clear_procs();
  ::com::android::server::am::ProcessRecordProto* mutable_procs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
      mutable_procs();
  const ::com::android::server::am::ProcessRecordProto& procs(int index) const;
  ::com::android::server::am::ProcessRecordProto* add_procs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
      procs() const;

  // repeated .com.android.server.am.ProcessRecordProto isolated_procs = 2;
  int isolated_procs_size() const;
  void clear_isolated_procs();
  ::com::android::server::am::ProcessRecordProto* mutable_isolated_procs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
      mutable_isolated_procs();
  const ::com::android::server::am::ProcessRecordProto& isolated_procs(int index) const;
  ::com::android::server::am::ProcessRecordProto* add_isolated_procs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
      isolated_procs() const;

  // repeated .com.android.server.am.ActiveInstrumentationProto active_instrumentations = 3;
  int active_instrumentations_size() const;
  void clear_active_instrumentations();
  ::com::android::server::am::ActiveInstrumentationProto* mutable_active_instrumentations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveInstrumentationProto >*
      mutable_active_instrumentations();
  const ::com::android::server::am::ActiveInstrumentationProto& active_instrumentations(int index) const;
  ::com::android::server::am::ActiveInstrumentationProto* add_active_instrumentations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveInstrumentationProto >&
      active_instrumentations() const;

  // repeated .com.android.server.am.UidRecordProto active_uids = 4;
  int active_uids_size() const;
  void clear_active_uids();
  ::com::android::server::am::UidRecordProto* mutable_active_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto >*
      mutable_active_uids();
  const ::com::android::server::am::UidRecordProto& active_uids(int index) const;
  ::com::android::server::am::UidRecordProto* add_active_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto >&
      active_uids() const;

  // repeated .com.android.server.am.UidRecordProto validate_uids = 5;
  int validate_uids_size() const;
  void clear_validate_uids();
  ::com::android::server::am::UidRecordProto* mutable_validate_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto >*
      mutable_validate_uids();
  const ::com::android::server::am::UidRecordProto& validate_uids(int index) const;
  ::com::android::server::am::UidRecordProto* add_validate_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto >&
      validate_uids() const;

  // repeated .com.android.server.am.ProcessRecordProto pids_self_locked = 7;
  int pids_self_locked_size() const;
  void clear_pids_self_locked();
  ::com::android::server::am::ProcessRecordProto* mutable_pids_self_locked(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
      mutable_pids_self_locked();
  const ::com::android::server::am::ProcessRecordProto& pids_self_locked(int index) const;
  ::com::android::server::am::ProcessRecordProto* add_pids_self_locked();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
      pids_self_locked() const;

  // repeated .com.android.server.am.ImportanceTokenProto important_procs = 8;
  int important_procs_size() const;
  void clear_important_procs();
  ::com::android::server::am::ImportanceTokenProto* mutable_important_procs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ImportanceTokenProto >*
      mutable_important_procs();
  const ::com::android::server::am::ImportanceTokenProto& important_procs(int index) const;
  ::com::android::server::am::ImportanceTokenProto* add_important_procs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ImportanceTokenProto >&
      important_procs() const;

  // repeated .com.android.server.am.ProcessRecordProto persistent_starting_procs = 9;
  int persistent_starting_procs_size() const;
  void clear_persistent_starting_procs();
  ::com::android::server::am::ProcessRecordProto* mutable_persistent_starting_procs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
      mutable_persistent_starting_procs();
  const ::com::android::server::am::ProcessRecordProto& persistent_starting_procs(int index) const;
  ::com::android::server::am::ProcessRecordProto* add_persistent_starting_procs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
      persistent_starting_procs() const;

  // repeated .com.android.server.am.ProcessRecordProto removed_procs = 10;
  int removed_procs_size() const;
  void clear_removed_procs();
  ::com::android::server::am::ProcessRecordProto* mutable_removed_procs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
      mutable_removed_procs();
  const ::com::android::server::am::ProcessRecordProto& removed_procs(int index) const;
  ::com::android::server::am::ProcessRecordProto* add_removed_procs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
      removed_procs() const;

  // repeated .com.android.server.am.ProcessRecordProto on_hold_procs = 11;
  int on_hold_procs_size() const;
  void clear_on_hold_procs();
  ::com::android::server::am::ProcessRecordProto* mutable_on_hold_procs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
      mutable_on_hold_procs();
  const ::com::android::server::am::ProcessRecordProto& on_hold_procs(int index) const;
  ::com::android::server::am::ProcessRecordProto* add_on_hold_procs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
      on_hold_procs() const;

  // repeated .com.android.server.am.ProcessToGcProto gc_procs = 12;
  int gc_procs_size() const;
  void clear_gc_procs();
  ::com::android::server::am::ProcessToGcProto* mutable_gc_procs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessToGcProto >*
      mutable_gc_procs();
  const ::com::android::server::am::ProcessToGcProto& gc_procs(int index) const;
  ::com::android::server::am::ProcessToGcProto* add_gc_procs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessToGcProto >&
      gc_procs() const;

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage screen_compat_packages = 22;
  int screen_compat_packages_size() const;
  void clear_screen_compat_packages();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* mutable_screen_compat_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage >*
      mutable_screen_compat_packages();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& screen_compat_packages(int index) const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* add_screen_compat_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage >&
      screen_compat_packages() const;

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto uid_observers = 23;
  int uid_observers_size() const;
  void clear_uid_observers();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* mutable_uid_observers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto >*
      mutable_uid_observers();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& uid_observers(int index) const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* add_uid_observers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto >&
      uid_observers() const;

  // repeated int32 device_idle_whitelist = 24;
  int device_idle_whitelist_size() const;
  void clear_device_idle_whitelist();
  ::PROTOBUF_NAMESPACE_ID::int32 device_idle_whitelist(int index) const;
  void set_device_idle_whitelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_device_idle_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      device_idle_whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_device_idle_whitelist();

  // repeated int32 device_idle_temp_whitelist = 25;
  int device_idle_temp_whitelist_size() const;
  void clear_device_idle_temp_whitelist();
  ::PROTOBUF_NAMESPACE_ID::int32 device_idle_temp_whitelist(int index) const;
  void set_device_idle_temp_whitelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_device_idle_temp_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      device_idle_temp_whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_device_idle_temp_whitelist();

  // repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist pending_temp_whitelist = 26;
  int pending_temp_whitelist_size() const;
  void clear_pending_temp_whitelist();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* mutable_pending_temp_whitelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist >*
      mutable_pending_temp_whitelist();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& pending_temp_whitelist(int index) const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* add_pending_temp_whitelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist >&
      pending_temp_whitelist() const;

  // optional string track_allocation_app = 33;
  bool has_track_allocation_app() const;
  void clear_track_allocation_app();
  const std::string& track_allocation_app() const;
  void set_track_allocation_app(const std::string& value);
  void set_track_allocation_app(std::string&& value);
  void set_track_allocation_app(const char* value);
  void set_track_allocation_app(const char* value, size_t size);
  std::string* mutable_track_allocation_app();
  std::string* release_track_allocation_app();
  void set_allocated_track_allocation_app(std::string* track_allocation_app);

  // optional string native_debugging_app = 35;
  bool has_native_debugging_app() const;
  void clear_native_debugging_app();
  const std::string& native_debugging_app() const;
  void set_native_debugging_app(const std::string& value);
  void set_native_debugging_app(std::string&& value);
  void set_native_debugging_app(const char* value);
  void set_native_debugging_app(const char* value, size_t size);
  std::string* mutable_native_debugging_app();
  std::string* release_native_debugging_app();
  void set_allocated_native_debugging_app(std::string* native_debugging_app);

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses lru_procs = 6;
  bool has_lru_procs() const;
  void clear_lru_procs();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses& lru_procs() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* release_lru_procs();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* mutable_lru_procs();
  void set_allocated_lru_procs(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* lru_procs);

  // optional .com.android.server.am.AppErrorsProto app_errors = 13;
  bool has_app_errors() const;
  void clear_app_errors();
  const ::com::android::server::am::AppErrorsProto& app_errors() const;
  ::com::android::server::am::AppErrorsProto* release_app_errors();
  ::com::android::server::am::AppErrorsProto* mutable_app_errors();
  void set_allocated_app_errors(::com::android::server::am::AppErrorsProto* app_errors);

  // optional .com.android.server.am.UserControllerProto user_controller = 14;
  bool has_user_controller() const;
  void clear_user_controller();
  const ::com::android::server::am::UserControllerProto& user_controller() const;
  ::com::android::server::am::UserControllerProto* release_user_controller();
  ::com::android::server::am::UserControllerProto* mutable_user_controller();
  void set_allocated_user_controller(::com::android::server::am::UserControllerProto* user_controller);

  // optional .com.android.server.am.ProcessRecordProto home_proc = 15;
  bool has_home_proc() const;
  void clear_home_proc();
  const ::com::android::server::am::ProcessRecordProto& home_proc() const;
  ::com::android::server::am::ProcessRecordProto* release_home_proc();
  ::com::android::server::am::ProcessRecordProto* mutable_home_proc();
  void set_allocated_home_proc(::com::android::server::am::ProcessRecordProto* home_proc);

  // optional .com.android.server.am.ProcessRecordProto previous_proc = 16;
  bool has_previous_proc() const;
  void clear_previous_proc();
  const ::com::android::server::am::ProcessRecordProto& previous_proc() const;
  ::com::android::server::am::ProcessRecordProto* release_previous_proc();
  ::com::android::server::am::ProcessRecordProto* mutable_previous_proc();
  void set_allocated_previous_proc(::com::android::server::am::ProcessRecordProto* previous_proc);

  // optional .com.android.server.am.ProcessRecordProto heavy_weight_proc = 18;
  bool has_heavy_weight_proc() const;
  void clear_heavy_weight_proc();
  const ::com::android::server::am::ProcessRecordProto& heavy_weight_proc() const;
  ::com::android::server::am::ProcessRecordProto* release_heavy_weight_proc();
  ::com::android::server::am::ProcessRecordProto* mutable_heavy_weight_proc();
  void set_allocated_heavy_weight_proc(::com::android::server::am::ProcessRecordProto* heavy_weight_proc);

  // optional .android.content.ConfigurationProto global_configuration = 19;
  bool has_global_configuration() const;
  void clear_global_configuration();
  const ::android::content::ConfigurationProto& global_configuration() const;
  ::android::content::ConfigurationProto* release_global_configuration();
  ::android::content::ConfigurationProto* mutable_global_configuration();
  void set_allocated_global_configuration(::android::content::ConfigurationProto* global_configuration);

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus sleep_status = 27;
  bool has_sleep_status() const;
  void clear_sleep_status();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus& sleep_status() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* release_sleep_status();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* mutable_sleep_status();
  void set_allocated_sleep_status(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* sleep_status);

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice running_voice = 28;
  bool has_running_voice() const;
  void clear_running_voice();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice& running_voice() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* release_running_voice();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* mutable_running_voice();
  void set_allocated_running_voice(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* running_voice);

  // optional .com.android.server.am.VrControllerProto vr_controller = 29;
  bool has_vr_controller() const;
  void clear_vr_controller();
  const ::com::android::server::am::VrControllerProto& vr_controller() const;
  ::com::android::server::am::VrControllerProto* release_vr_controller();
  ::com::android::server::am::VrControllerProto* mutable_vr_controller();
  void set_allocated_vr_controller(::com::android::server::am::VrControllerProto* vr_controller);

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp debug = 30;
  bool has_debug() const;
  void clear_debug();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp& debug() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* release_debug();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* mutable_debug();
  void set_allocated_debug(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* debug);

  // optional .com.android.server.am.AppTimeTrackerProto current_tracker = 31;
  bool has_current_tracker() const;
  void clear_current_tracker();
  const ::com::android::server::am::AppTimeTrackerProto& current_tracker() const;
  ::com::android::server::am::AppTimeTrackerProto* release_current_tracker();
  ::com::android::server::am::AppTimeTrackerProto* mutable_current_tracker();
  void set_allocated_current_tracker(::com::android::server::am::AppTimeTrackerProto* current_tracker);

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess mem_watch_processes = 32;
  bool has_mem_watch_processes() const;
  void clear_mem_watch_processes();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess& mem_watch_processes() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* release_mem_watch_processes();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* mutable_mem_watch_processes();
  void set_allocated_mem_watch_processes(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* mem_watch_processes);

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile profile = 34;
  bool has_profile() const;
  void clear_profile();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile& profile() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* release_profile();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* mutable_profile();
  void set_allocated_profile(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* profile);

  // optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller controller = 37;
  bool has_controller() const;
  void clear_controller();
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller& controller() const;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* release_controller();
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* mutable_controller();
  void set_allocated_controller(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* controller);

  // optional .android.os.PowerManagerProto.WakeLock going_to_sleep = 47;
  bool has_going_to_sleep() const;
  void clear_going_to_sleep();
  const ::android::os::PowerManagerProto_WakeLock& going_to_sleep() const;
  ::android::os::PowerManagerProto_WakeLock* release_going_to_sleep();
  ::android::os::PowerManagerProto_WakeLock* mutable_going_to_sleep();
  void set_allocated_going_to_sleep(::android::os::PowerManagerProto_WakeLock* going_to_sleep);

  // optional .android.os.PowerManagerProto.WakeLock launching_activity = 48;
  bool has_launching_activity() const;
  void clear_launching_activity();
  const ::android::os::PowerManagerProto_WakeLock& launching_activity() const;
  ::android::os::PowerManagerProto_WakeLock* release_launching_activity();
  ::android::os::PowerManagerProto_WakeLock* mutable_launching_activity();
  void set_allocated_launching_activity(::android::os::PowerManagerProto_WakeLock* launching_activity);

  // optional .android.util.Duration last_idle_time = 58;
  bool has_last_idle_time() const;
  void clear_last_idle_time();
  const ::android::util::Duration& last_idle_time() const;
  ::android::util::Duration* release_last_idle_time();
  ::android::util::Duration* mutable_last_idle_time();
  void set_allocated_last_idle_time(::android::util::Duration* last_idle_time);

  // optional int64 previous_proc_visible_time_ms = 17;
  bool has_previous_proc_visible_time_ms() const;
  void clear_previous_proc_visible_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 previous_proc_visible_time_ms() const;
  void set_previous_proc_visible_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool config_will_change = 21;
  bool has_config_will_change() const;
  void clear_config_will_change();
  bool config_will_change() const;
  void set_config_will_change(bool value);

  // optional bool always_finish_activities = 36;
  bool has_always_finish_activities() const;
  void clear_always_finish_activities();
  bool always_finish_activities() const;
  void set_always_finish_activities(bool value);

  // optional bool processes_ready = 39;
  bool has_processes_ready() const;
  void clear_processes_ready();
  bool processes_ready() const;
  void set_processes_ready(bool value);

  // optional bool system_ready = 40;
  bool has_system_ready() const;
  void clear_system_ready();
  bool system_ready() const;
  void set_system_ready(bool value);

  // optional int32 total_persistent_procs = 38;
  bool has_total_persistent_procs() const;
  void clear_total_persistent_procs();
  ::PROTOBUF_NAMESPACE_ID::int32 total_persistent_procs() const;
  void set_total_persistent_procs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 factory_test = 42;
  bool has_factory_test() const;
  void clear_factory_test();
  ::PROTOBUF_NAMESPACE_ID::int32 factory_test() const;
  void set_factory_test(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool booted = 41;
  bool has_booted() const;
  void clear_booted();
  bool booted() const;
  void set_booted(bool value);

  // optional bool booting = 43;
  bool has_booting() const;
  void clear_booting();
  bool booting() const;
  void set_booting(bool value);

  // optional bool call_finish_booting = 44;
  bool has_call_finish_booting() const;
  void clear_call_finish_booting();
  bool call_finish_booting() const;
  void set_call_finish_booting(bool value);

  // optional bool boot_animation_complete = 45;
  bool has_boot_animation_complete() const;
  void clear_boot_animation_complete();
  bool boot_animation_complete() const;
  void set_boot_animation_complete(bool value);

  // optional int64 last_power_check_uptime_ms = 46;
  bool has_last_power_check_uptime_ms() const;
  void clear_last_power_check_uptime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_power_check_uptime_ms() const;
  void set_last_power_check_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 adj_seq = 49;
  bool has_adj_seq() const;
  void clear_adj_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 adj_seq() const;
  void set_adj_seq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 lru_seq = 50;
  bool has_lru_seq() const;
  void clear_lru_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 lru_seq() const;
  void set_lru_seq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_non_cached_procs = 51;
  bool has_num_non_cached_procs() const;
  void clear_num_non_cached_procs();
  ::PROTOBUF_NAMESPACE_ID::int32 num_non_cached_procs() const;
  void set_num_non_cached_procs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_cached_hidden_procs = 52;
  bool has_num_cached_hidden_procs() const;
  void clear_num_cached_hidden_procs();
  ::PROTOBUF_NAMESPACE_ID::int32 num_cached_hidden_procs() const;
  void set_num_cached_hidden_procs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_service_procs = 53;
  bool has_num_service_procs() const;
  void clear_num_service_procs();
  ::PROTOBUF_NAMESPACE_ID::int32 num_service_procs() const;
  void set_num_service_procs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 new_num_service_procs = 54;
  bool has_new_num_service_procs() const;
  void clear_new_num_service_procs();
  ::PROTOBUF_NAMESPACE_ID::int32 new_num_service_procs() const;
  void set_new_num_service_procs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool allow_lower_mem_level = 55;
  bool has_allow_lower_mem_level() const;
  void clear_allow_lower_mem_level();
  bool allow_lower_mem_level() const;
  void set_allow_lower_mem_level(bool value);

  // optional int32 last_memory_level = 56;
  bool has_last_memory_level() const;
  void clear_last_memory_level();
  ::PROTOBUF_NAMESPACE_ID::int32 last_memory_level() const;
  void set_last_memory_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 low_ram_since_last_idle_ms = 59;
  bool has_low_ram_since_last_idle_ms() const;
  void clear_low_ram_since_last_idle_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 low_ram_since_last_idle_ms() const;
  void set_low_ram_since_last_idle_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 last_num_processes = 57;
  bool has_last_num_processes() const;
  void clear_last_num_processes();
  ::PROTOBUF_NAMESPACE_ID::int32 last_num_processes() const;
  void set_last_num_processes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActivityManagerServiceDumpProcessesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto > procs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto > isolated_procs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveInstrumentationProto > active_instrumentations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto > active_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto > validate_uids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto > pids_self_locked_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ImportanceTokenProto > important_procs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto > persistent_starting_procs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto > removed_procs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto > on_hold_procs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessToGcProto > gc_procs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage > screen_compat_packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto > uid_observers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > device_idle_whitelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > device_idle_temp_whitelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist > pending_temp_whitelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_allocation_app_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr native_debugging_app_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* lru_procs_;
  ::com::android::server::am::AppErrorsProto* app_errors_;
  ::com::android::server::am::UserControllerProto* user_controller_;
  ::com::android::server::am::ProcessRecordProto* home_proc_;
  ::com::android::server::am::ProcessRecordProto* previous_proc_;
  ::com::android::server::am::ProcessRecordProto* heavy_weight_proc_;
  ::android::content::ConfigurationProto* global_configuration_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* sleep_status_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* running_voice_;
  ::com::android::server::am::VrControllerProto* vr_controller_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* debug_;
  ::com::android::server::am::AppTimeTrackerProto* current_tracker_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* mem_watch_processes_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* profile_;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* controller_;
  ::android::os::PowerManagerProto_WakeLock* going_to_sleep_;
  ::android::os::PowerManagerProto_WakeLock* launching_activity_;
  ::android::util::Duration* last_idle_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 previous_proc_visible_time_ms_;
  bool config_will_change_;
  bool always_finish_activities_;
  bool processes_ready_;
  bool system_ready_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_persistent_procs_;
  ::PROTOBUF_NAMESPACE_ID::int32 factory_test_;
  bool booted_;
  bool booting_;
  bool call_finish_booting_;
  bool boot_animation_complete_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_power_check_uptime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 adj_seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 lru_seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_non_cached_procs_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_cached_hidden_procs_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_service_procs_;
  ::PROTOBUF_NAMESPACE_ID::int32 new_num_service_procs_;
  bool allow_lower_mem_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_memory_level_;
  ::PROTOBUF_NAMESPACE_ID::int64 low_ram_since_last_idle_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_num_processes_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ActiveInstrumentationProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ActiveInstrumentationProto) */ {
 public:
  ActiveInstrumentationProto();
  virtual ~ActiveInstrumentationProto();

  ActiveInstrumentationProto(const ActiveInstrumentationProto& from);
  ActiveInstrumentationProto(ActiveInstrumentationProto&& from) noexcept
    : ActiveInstrumentationProto() {
    *this = ::std::move(from);
  }

  inline ActiveInstrumentationProto& operator=(const ActiveInstrumentationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveInstrumentationProto& operator=(ActiveInstrumentationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActiveInstrumentationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveInstrumentationProto* internal_default_instance() {
    return reinterpret_cast<const ActiveInstrumentationProto*>(
               &_ActiveInstrumentationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ActiveInstrumentationProto& a, ActiveInstrumentationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveInstrumentationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveInstrumentationProto* New() const final {
    return CreateMaybeMessage<ActiveInstrumentationProto>(nullptr);
  }

  ActiveInstrumentationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveInstrumentationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActiveInstrumentationProto& from);
  void MergeFrom(const ActiveInstrumentationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveInstrumentationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ActiveInstrumentationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunningProcessesFieldNumber = 3,
    kTargetProcessesFieldNumber = 4,
    kProfileFileFieldNumber = 6,
    kWatcherFieldNumber = 7,
    kUiAutomationConnectionFieldNumber = 8,
    kClassFieldNumber = 1,
    kTargetInfoFieldNumber = 5,
    kArgumentsFieldNumber = 10,
    kFinishedFieldNumber = 2,
  };
  // repeated .com.android.server.am.ProcessRecordProto running_processes = 3;
  int running_processes_size() const;
  void clear_running_processes();
  ::com::android::server::am::ProcessRecordProto* mutable_running_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
      mutable_running_processes();
  const ::com::android::server::am::ProcessRecordProto& running_processes(int index) const;
  ::com::android::server::am::ProcessRecordProto* add_running_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
      running_processes() const;

  // repeated string target_processes = 4;
  int target_processes_size() const;
  void clear_target_processes();
  const std::string& target_processes(int index) const;
  std::string* mutable_target_processes(int index);
  void set_target_processes(int index, const std::string& value);
  void set_target_processes(int index, std::string&& value);
  void set_target_processes(int index, const char* value);
  void set_target_processes(int index, const char* value, size_t size);
  std::string* add_target_processes();
  void add_target_processes(const std::string& value);
  void add_target_processes(std::string&& value);
  void add_target_processes(const char* value);
  void add_target_processes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_processes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_processes();

  // optional string profile_file = 6;
  bool has_profile_file() const;
  void clear_profile_file();
  const std::string& profile_file() const;
  void set_profile_file(const std::string& value);
  void set_profile_file(std::string&& value);
  void set_profile_file(const char* value);
  void set_profile_file(const char* value, size_t size);
  std::string* mutable_profile_file();
  std::string* release_profile_file();
  void set_allocated_profile_file(std::string* profile_file);

  // optional string watcher = 7;
  bool has_watcher() const;
  void clear_watcher();
  const std::string& watcher() const;
  void set_watcher(const std::string& value);
  void set_watcher(std::string&& value);
  void set_watcher(const char* value);
  void set_watcher(const char* value, size_t size);
  std::string* mutable_watcher();
  std::string* release_watcher();
  void set_allocated_watcher(std::string* watcher);

  // optional string ui_automation_connection = 8;
  bool has_ui_automation_connection() const;
  void clear_ui_automation_connection();
  const std::string& ui_automation_connection() const;
  void set_ui_automation_connection(const std::string& value);
  void set_ui_automation_connection(std::string&& value);
  void set_ui_automation_connection(const char* value);
  void set_ui_automation_connection(const char* value, size_t size);
  std::string* mutable_ui_automation_connection();
  std::string* release_ui_automation_connection();
  void set_allocated_ui_automation_connection(std::string* ui_automation_connection);

  // optional .android.content.ComponentNameProto class = 1;
  bool has_class_() const;
  void clear_class_();
  const ::android::content::ComponentNameProto& class_() const;
  ::android::content::ComponentNameProto* release_class_();
  ::android::content::ComponentNameProto* mutable_class_();
  void set_allocated_class_(::android::content::ComponentNameProto* class_);

  // optional .android.content.pm.ApplicationInfoProto target_info = 5;
  bool has_target_info() const;
  void clear_target_info();
  const ::android::content::pm::ApplicationInfoProto& target_info() const;
  ::android::content::pm::ApplicationInfoProto* release_target_info();
  ::android::content::pm::ApplicationInfoProto* mutable_target_info();
  void set_allocated_target_info(::android::content::pm::ApplicationInfoProto* target_info);

  // optional .android.os.BundleProto arguments = 10;
  bool has_arguments() const;
  void clear_arguments();
  const ::android::os::BundleProto& arguments() const;
  ::android::os::BundleProto* release_arguments();
  ::android::os::BundleProto* mutable_arguments();
  void set_allocated_arguments(::android::os::BundleProto* arguments);

  // optional bool finished = 2;
  bool has_finished() const;
  void clear_finished();
  bool finished() const;
  void set_finished(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ActiveInstrumentationProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto > running_processes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_processes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr watcher_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ui_automation_connection_;
  ::android::content::ComponentNameProto* class__;
  ::android::content::pm::ApplicationInfoProto* target_info_;
  ::android::os::BundleProto* arguments_;
  bool finished_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class UidRecordProto_ProcStateSequence :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.UidRecordProto.ProcStateSequence) */ {
 public:
  UidRecordProto_ProcStateSequence();
  virtual ~UidRecordProto_ProcStateSequence();

  UidRecordProto_ProcStateSequence(const UidRecordProto_ProcStateSequence& from);
  UidRecordProto_ProcStateSequence(UidRecordProto_ProcStateSequence&& from) noexcept
    : UidRecordProto_ProcStateSequence() {
    *this = ::std::move(from);
  }

  inline UidRecordProto_ProcStateSequence& operator=(const UidRecordProto_ProcStateSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidRecordProto_ProcStateSequence& operator=(UidRecordProto_ProcStateSequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidRecordProto_ProcStateSequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidRecordProto_ProcStateSequence* internal_default_instance() {
    return reinterpret_cast<const UidRecordProto_ProcStateSequence*>(
               &_UidRecordProto_ProcStateSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(UidRecordProto_ProcStateSequence& a, UidRecordProto_ProcStateSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(UidRecordProto_ProcStateSequence* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidRecordProto_ProcStateSequence* New() const final {
    return CreateMaybeMessage<UidRecordProto_ProcStateSequence>(nullptr);
  }

  UidRecordProto_ProcStateSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidRecordProto_ProcStateSequence>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidRecordProto_ProcStateSequence& from);
  void MergeFrom(const UidRecordProto_ProcStateSequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidRecordProto_ProcStateSequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.UidRecordProto.ProcStateSequence";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCururentFieldNumber = 1,
    kLastNetworkUpdatedFieldNumber = 2,
    kLastDispatchedFieldNumber = 3,
  };
  // optional int64 cururent = 1;
  bool has_cururent() const;
  void clear_cururent();
  ::PROTOBUF_NAMESPACE_ID::int64 cururent() const;
  void set_cururent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_network_updated = 2;
  bool has_last_network_updated() const;
  void clear_last_network_updated();
  ::PROTOBUF_NAMESPACE_ID::int64 last_network_updated() const;
  void set_last_network_updated(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_dispatched = 3;
  bool has_last_dispatched() const;
  void clear_last_dispatched();
  ::PROTOBUF_NAMESPACE_ID::int64 last_dispatched() const;
  void set_last_dispatched(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.UidRecordProto.ProcStateSequence)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 cururent_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_network_updated_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_dispatched_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class UidRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.UidRecordProto) */ {
 public:
  UidRecordProto();
  virtual ~UidRecordProto();

  UidRecordProto(const UidRecordProto& from);
  UidRecordProto(UidRecordProto&& from) noexcept
    : UidRecordProto() {
    *this = ::std::move(from);
  }

  inline UidRecordProto& operator=(const UidRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidRecordProto& operator=(UidRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidRecordProto* internal_default_instance() {
    return reinterpret_cast<const UidRecordProto*>(
               &_UidRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(UidRecordProto& a, UidRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UidRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidRecordProto* New() const final {
    return CreateMaybeMessage<UidRecordProto>(nullptr);
  }

  UidRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidRecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidRecordProto& from);
  void MergeFrom(const UidRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.UidRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UidRecordProto_ProcStateSequence ProcStateSequence;

  typedef UidRecordProto_Change Change;
  static constexpr Change CHANGE_GONE =
    UidRecordProto_Change_CHANGE_GONE;
  static constexpr Change CHANGE_IDLE =
    UidRecordProto_Change_CHANGE_IDLE;
  static constexpr Change CHANGE_ACTIVE =
    UidRecordProto_Change_CHANGE_ACTIVE;
  static constexpr Change CHANGE_CACHED =
    UidRecordProto_Change_CHANGE_CACHED;
  static constexpr Change CHANGE_UNCACHED =
    UidRecordProto_Change_CHANGE_UNCACHED;
  static constexpr Change CHANGE_CAPABILITY =
    UidRecordProto_Change_CHANGE_CAPABILITY;
  static inline bool Change_IsValid(int value) {
    return UidRecordProto_Change_IsValid(value);
  }
  static constexpr Change Change_MIN =
    UidRecordProto_Change_Change_MIN;
  static constexpr Change Change_MAX =
    UidRecordProto_Change_Change_MAX;
  static constexpr int Change_ARRAYSIZE =
    UidRecordProto_Change_Change_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Change_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Change>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Change_Name.");
    return UidRecordProto_Change_Name(enum_t_value);
  }
  static inline bool Change_Parse(const std::string& name,
      Change* value) {
    return UidRecordProto_Change_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLastReportedChangesFieldNumber = 8,
    kLastBackgroundTimeFieldNumber = 6,
    kNetworkStateUpdateFieldNumber = 10,
    kUidFieldNumber = 1,
    kEphemeralFieldNumber = 3,
    kFgServicesFieldNumber = 4,
    kWhilelistFieldNumber = 5,
    kIdleFieldNumber = 7,
    kNumProcsFieldNumber = 9,
    kCurrentFieldNumber = 2,
  };
  // repeated .com.android.server.am.UidRecordProto.Change last_reported_changes = 8;
  int last_reported_changes_size() const;
  void clear_last_reported_changes();
  ::com::android::server::am::UidRecordProto_Change last_reported_changes(int index) const;
  void set_last_reported_changes(int index, ::com::android::server::am::UidRecordProto_Change value);
  void add_last_reported_changes(::com::android::server::am::UidRecordProto_Change value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& last_reported_changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_last_reported_changes();

  // optional .android.util.Duration last_background_time = 6;
  bool has_last_background_time() const;
  void clear_last_background_time();
  const ::android::util::Duration& last_background_time() const;
  ::android::util::Duration* release_last_background_time();
  ::android::util::Duration* mutable_last_background_time();
  void set_allocated_last_background_time(::android::util::Duration* last_background_time);

  // optional .com.android.server.am.UidRecordProto.ProcStateSequence network_state_update = 10;
  bool has_network_state_update() const;
  void clear_network_state_update();
  const ::com::android::server::am::UidRecordProto_ProcStateSequence& network_state_update() const;
  ::com::android::server::am::UidRecordProto_ProcStateSequence* release_network_state_update();
  ::com::android::server::am::UidRecordProto_ProcStateSequence* mutable_network_state_update();
  void set_allocated_network_state_update(::com::android::server::am::UidRecordProto_ProcStateSequence* network_state_update);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool ephemeral = 3;
  bool has_ephemeral() const;
  void clear_ephemeral();
  bool ephemeral() const;
  void set_ephemeral(bool value);

  // optional bool fg_services = 4;
  bool has_fg_services() const;
  void clear_fg_services();
  bool fg_services() const;
  void set_fg_services(bool value);

  // optional bool whilelist = 5;
  bool has_whilelist() const;
  void clear_whilelist();
  bool whilelist() const;
  void set_whilelist(bool value);

  // optional bool idle = 7;
  bool has_idle() const;
  void clear_idle();
  bool idle() const;
  void set_idle(bool value);

  // optional int32 num_procs = 9;
  bool has_num_procs() const;
  void clear_num_procs();
  ::PROTOBUF_NAMESPACE_ID::int32 num_procs() const;
  void set_num_procs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.app.ProcessStateEnum current = 2;
  bool has_current() const;
  void clear_current();
  ::android::app::ProcessStateEnum current() const;
  void set_current(::android::app::ProcessStateEnum value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.UidRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> last_reported_changes_;
  ::android::util::Duration* last_background_time_;
  ::com::android::server::am::UidRecordProto_ProcStateSequence* network_state_update_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  bool ephemeral_;
  bool fg_services_;
  bool whilelist_;
  bool idle_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_procs_;
  int current_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ImportanceTokenProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ImportanceTokenProto) */ {
 public:
  ImportanceTokenProto();
  virtual ~ImportanceTokenProto();

  ImportanceTokenProto(const ImportanceTokenProto& from);
  ImportanceTokenProto(ImportanceTokenProto&& from) noexcept
    : ImportanceTokenProto() {
    *this = ::std::move(from);
  }

  inline ImportanceTokenProto& operator=(const ImportanceTokenProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportanceTokenProto& operator=(ImportanceTokenProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ImportanceTokenProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportanceTokenProto* internal_default_instance() {
    return reinterpret_cast<const ImportanceTokenProto*>(
               &_ImportanceTokenProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ImportanceTokenProto& a, ImportanceTokenProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportanceTokenProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportanceTokenProto* New() const final {
    return CreateMaybeMessage<ImportanceTokenProto>(nullptr);
  }

  ImportanceTokenProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportanceTokenProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ImportanceTokenProto& from);
  void MergeFrom(const ImportanceTokenProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportanceTokenProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ImportanceTokenProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kReasonFieldNumber = 3,
    kPidFieldNumber = 1,
  };
  // optional string token = 2;
  bool has_token() const;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);

  // optional string reason = 3;
  bool has_reason() const;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // optional int32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ImportanceTokenProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class VrControllerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.VrControllerProto) */ {
 public:
  VrControllerProto();
  virtual ~VrControllerProto();

  VrControllerProto(const VrControllerProto& from);
  VrControllerProto(VrControllerProto&& from) noexcept
    : VrControllerProto() {
    *this = ::std::move(from);
  }

  inline VrControllerProto& operator=(const VrControllerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VrControllerProto& operator=(VrControllerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VrControllerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VrControllerProto* internal_default_instance() {
    return reinterpret_cast<const VrControllerProto*>(
               &_VrControllerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(VrControllerProto& a, VrControllerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VrControllerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VrControllerProto* New() const final {
    return CreateMaybeMessage<VrControllerProto>(nullptr);
  }

  VrControllerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VrControllerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VrControllerProto& from);
  void MergeFrom(const VrControllerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VrControllerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.VrControllerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef VrControllerProto_VrMode VrMode;
  static constexpr VrMode FLAG_NON_VR_MODE =
    VrControllerProto_VrMode_FLAG_NON_VR_MODE;
  static constexpr VrMode FLAG_VR_MODE =
    VrControllerProto_VrMode_FLAG_VR_MODE;
  static constexpr VrMode FLAG_PERSISTENT_VR_MODE =
    VrControllerProto_VrMode_FLAG_PERSISTENT_VR_MODE;
  static inline bool VrMode_IsValid(int value) {
    return VrControllerProto_VrMode_IsValid(value);
  }
  static constexpr VrMode VrMode_MIN =
    VrControllerProto_VrMode_VrMode_MIN;
  static constexpr VrMode VrMode_MAX =
    VrControllerProto_VrMode_VrMode_MAX;
  static constexpr int VrMode_ARRAYSIZE =
    VrControllerProto_VrMode_VrMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& VrMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VrMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VrMode_Name.");
    return VrControllerProto_VrMode_Name(enum_t_value);
  }
  static inline bool VrMode_Parse(const std::string& name,
      VrMode* value) {
    return VrControllerProto_VrMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVrModeFieldNumber = 1,
    kRenderThreadIdFieldNumber = 2,
  };
  // repeated .com.android.server.am.VrControllerProto.VrMode vr_mode = 1;
  int vr_mode_size() const;
  void clear_vr_mode();
  ::com::android::server::am::VrControllerProto_VrMode vr_mode(int index) const;
  void set_vr_mode(int index, ::com::android::server::am::VrControllerProto_VrMode value);
  void add_vr_mode(::com::android::server::am::VrControllerProto_VrMode value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& vr_mode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_vr_mode();

  // optional int32 render_thread_id = 2;
  bool has_render_thread_id() const;
  void clear_render_thread_id();
  ::PROTOBUF_NAMESPACE_ID::int32 render_thread_id() const;
  void set_render_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.VrControllerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> vr_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 render_thread_id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessOomProto_Detail_CpuRunTime :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ProcessOomProto.Detail.CpuRunTime) */ {
 public:
  ProcessOomProto_Detail_CpuRunTime();
  virtual ~ProcessOomProto_Detail_CpuRunTime();

  ProcessOomProto_Detail_CpuRunTime(const ProcessOomProto_Detail_CpuRunTime& from);
  ProcessOomProto_Detail_CpuRunTime(ProcessOomProto_Detail_CpuRunTime&& from) noexcept
    : ProcessOomProto_Detail_CpuRunTime() {
    *this = ::std::move(from);
  }

  inline ProcessOomProto_Detail_CpuRunTime& operator=(const ProcessOomProto_Detail_CpuRunTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessOomProto_Detail_CpuRunTime& operator=(ProcessOomProto_Detail_CpuRunTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessOomProto_Detail_CpuRunTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessOomProto_Detail_CpuRunTime* internal_default_instance() {
    return reinterpret_cast<const ProcessOomProto_Detail_CpuRunTime*>(
               &_ProcessOomProto_Detail_CpuRunTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ProcessOomProto_Detail_CpuRunTime& a, ProcessOomProto_Detail_CpuRunTime& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessOomProto_Detail_CpuRunTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessOomProto_Detail_CpuRunTime* New() const final {
    return CreateMaybeMessage<ProcessOomProto_Detail_CpuRunTime>(nullptr);
  }

  ProcessOomProto_Detail_CpuRunTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessOomProto_Detail_CpuRunTime>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessOomProto_Detail_CpuRunTime& from);
  void MergeFrom(const ProcessOomProto_Detail_CpuRunTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessOomProto_Detail_CpuRunTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ProcessOomProto.Detail.CpuRunTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverMsFieldNumber = 1,
    kUsedMsFieldNumber = 2,
    kUltilizationFieldNumber = 3,
  };
  // optional int64 over_ms = 1;
  bool has_over_ms() const;
  void clear_over_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 over_ms() const;
  void set_over_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 used_ms = 2;
  bool has_used_ms() const;
  void clear_used_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 used_ms() const;
  void set_used_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float ultilization = 3;
  bool has_ultilization() const;
  void clear_ultilization();
  float ultilization() const;
  void set_ultilization(float value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ProcessOomProto.Detail.CpuRunTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 over_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 used_ms_;
  float ultilization_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessOomProto_Detail :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ProcessOomProto.Detail) */ {
 public:
  ProcessOomProto_Detail();
  virtual ~ProcessOomProto_Detail();

  ProcessOomProto_Detail(const ProcessOomProto_Detail& from);
  ProcessOomProto_Detail(ProcessOomProto_Detail&& from) noexcept
    : ProcessOomProto_Detail() {
    *this = ::std::move(from);
  }

  inline ProcessOomProto_Detail& operator=(const ProcessOomProto_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessOomProto_Detail& operator=(ProcessOomProto_Detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessOomProto_Detail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessOomProto_Detail* internal_default_instance() {
    return reinterpret_cast<const ProcessOomProto_Detail*>(
               &_ProcessOomProto_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ProcessOomProto_Detail& a, ProcessOomProto_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessOomProto_Detail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessOomProto_Detail* New() const final {
    return CreateMaybeMessage<ProcessOomProto_Detail>(nullptr);
  }

  ProcessOomProto_Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessOomProto_Detail>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessOomProto_Detail& from);
  void MergeFrom(const ProcessOomProto_Detail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessOomProto_Detail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ProcessOomProto.Detail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProcessOomProto_Detail_CpuRunTime CpuRunTime;

  // accessors -------------------------------------------------------

  enum : int {
    kLastPssFieldNumber = 9,
    kLastSwapPssFieldNumber = 10,
    kLastCachedPssFieldNumber = 11,
    kServiceRunTimeFieldNumber = 15,
    kMaxAdjFieldNumber = 1,
    kCurRawAdjFieldNumber = 2,
    kSetRawAdjFieldNumber = 3,
    kCurAdjFieldNumber = 4,
    kSetAdjFieldNumber = 5,
    kCachedFieldNumber = 12,
    kEmptyFieldNumber = 13,
    kHasAboveClientFieldNumber = 14,
    kCurrentStateFieldNumber = 7,
    kSetStateFieldNumber = 8,
  };
  // optional string last_pss = 9;
  bool has_last_pss() const;
  void clear_last_pss();
  const std::string& last_pss() const;
  void set_last_pss(const std::string& value);
  void set_last_pss(std::string&& value);
  void set_last_pss(const char* value);
  void set_last_pss(const char* value, size_t size);
  std::string* mutable_last_pss();
  std::string* release_last_pss();
  void set_allocated_last_pss(std::string* last_pss);

  // optional string last_swap_pss = 10;
  bool has_last_swap_pss() const;
  void clear_last_swap_pss();
  const std::string& last_swap_pss() const;
  void set_last_swap_pss(const std::string& value);
  void set_last_swap_pss(std::string&& value);
  void set_last_swap_pss(const char* value);
  void set_last_swap_pss(const char* value, size_t size);
  std::string* mutable_last_swap_pss();
  std::string* release_last_swap_pss();
  void set_allocated_last_swap_pss(std::string* last_swap_pss);

  // optional string last_cached_pss = 11;
  bool has_last_cached_pss() const;
  void clear_last_cached_pss();
  const std::string& last_cached_pss() const;
  void set_last_cached_pss(const std::string& value);
  void set_last_cached_pss(std::string&& value);
  void set_last_cached_pss(const char* value);
  void set_last_cached_pss(const char* value, size_t size);
  std::string* mutable_last_cached_pss();
  std::string* release_last_cached_pss();
  void set_allocated_last_cached_pss(std::string* last_cached_pss);

  // optional .com.android.server.am.ProcessOomProto.Detail.CpuRunTime service_run_time = 15;
  bool has_service_run_time() const;
  void clear_service_run_time();
  const ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime& service_run_time() const;
  ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* release_service_run_time();
  ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* mutable_service_run_time();
  void set_allocated_service_run_time(::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* service_run_time);

  // optional int32 max_adj = 1;
  bool has_max_adj() const;
  void clear_max_adj();
  ::PROTOBUF_NAMESPACE_ID::int32 max_adj() const;
  void set_max_adj(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cur_raw_adj = 2;
  bool has_cur_raw_adj() const;
  void clear_cur_raw_adj();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_raw_adj() const;
  void set_cur_raw_adj(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 set_raw_adj = 3;
  bool has_set_raw_adj() const;
  void clear_set_raw_adj();
  ::PROTOBUF_NAMESPACE_ID::int32 set_raw_adj() const;
  void set_set_raw_adj(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 cur_adj = 4;
  bool has_cur_adj() const;
  void clear_cur_adj();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_adj() const;
  void set_cur_adj(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 set_adj = 5;
  bool has_set_adj() const;
  void clear_set_adj();
  ::PROTOBUF_NAMESPACE_ID::int32 set_adj() const;
  void set_set_adj(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool cached = 12;
  bool has_cached() const;
  void clear_cached();
  bool cached() const;
  void set_cached(bool value);

  // optional bool empty = 13;
  bool has_empty() const;
  void clear_empty();
  bool empty() const;
  void set_empty(bool value);

  // optional bool has_above_client = 14;
  bool has_has_above_client() const;
  void clear_has_above_client();
  bool has_above_client() const;
  void set_has_above_client(bool value);

  // optional .android.app.ProcessStateEnum current_state = 7;
  bool has_current_state() const;
  void clear_current_state();
  ::android::app::ProcessStateEnum current_state() const;
  void set_current_state(::android::app::ProcessStateEnum value);

  // optional .android.app.ProcessStateEnum set_state = 8;
  bool has_set_state() const;
  void clear_set_state();
  ::android::app::ProcessStateEnum set_state() const;
  void set_set_state(::android::app::ProcessStateEnum value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ProcessOomProto.Detail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_pss_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_swap_pss_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_cached_pss_;
  ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* service_run_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_adj_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_raw_adj_;
  ::PROTOBUF_NAMESPACE_ID::int32 set_raw_adj_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_adj_;
  ::PROTOBUF_NAMESPACE_ID::int32 set_adj_;
  bool cached_;
  bool empty_;
  bool has_above_client_;
  int current_state_;
  int set_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessOomProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ProcessOomProto) */ {
 public:
  ProcessOomProto();
  virtual ~ProcessOomProto();

  ProcessOomProto(const ProcessOomProto& from);
  ProcessOomProto(ProcessOomProto&& from) noexcept
    : ProcessOomProto() {
    *this = ::std::move(from);
  }

  inline ProcessOomProto& operator=(const ProcessOomProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessOomProto& operator=(ProcessOomProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessOomProto& default_instance();

  enum ForegroundCase {
    kActivities = 5,
    kServices = 6,
    FOREGROUND_NOT_SET = 0,
  };

  enum AdjTargetCase {
    kAdjTargetComponentName = 11,
    kAdjTargetObject = 12,
    ADJTARGET_NOT_SET = 0,
  };

  enum AdjSourceCase {
    kAdjSourceProc = 13,
    kAdjSourceObject = 14,
    ADJSOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessOomProto* internal_default_instance() {
    return reinterpret_cast<const ProcessOomProto*>(
               &_ProcessOomProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ProcessOomProto& a, ProcessOomProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessOomProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessOomProto* New() const final {
    return CreateMaybeMessage<ProcessOomProto>(nullptr);
  }

  ProcessOomProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessOomProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessOomProto& from);
  void MergeFrom(const ProcessOomProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessOomProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ProcessOomProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ProcessOomProto_Detail Detail;

  typedef ProcessOomProto_SchedGroup SchedGroup;
  static constexpr SchedGroup SCHED_GROUP_UNKNOWN =
    ProcessOomProto_SchedGroup_SCHED_GROUP_UNKNOWN;
  static constexpr SchedGroup SCHED_GROUP_BACKGROUND =
    ProcessOomProto_SchedGroup_SCHED_GROUP_BACKGROUND;
  static constexpr SchedGroup SCHED_GROUP_DEFAULT =
    ProcessOomProto_SchedGroup_SCHED_GROUP_DEFAULT;
  static constexpr SchedGroup SCHED_GROUP_TOP_APP =
    ProcessOomProto_SchedGroup_SCHED_GROUP_TOP_APP;
  static constexpr SchedGroup SCHED_GROUP_TOP_APP_BOUND =
    ProcessOomProto_SchedGroup_SCHED_GROUP_TOP_APP_BOUND;
  static inline bool SchedGroup_IsValid(int value) {
    return ProcessOomProto_SchedGroup_IsValid(value);
  }
  static constexpr SchedGroup SchedGroup_MIN =
    ProcessOomProto_SchedGroup_SchedGroup_MIN;
  static constexpr SchedGroup SchedGroup_MAX =
    ProcessOomProto_SchedGroup_SchedGroup_MAX;
  static constexpr int SchedGroup_ARRAYSIZE =
    ProcessOomProto_SchedGroup_SchedGroup_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SchedGroup_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SchedGroup>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SchedGroup_Name.");
    return ProcessOomProto_SchedGroup_Name(enum_t_value);
  }
  static inline bool SchedGroup_Parse(const std::string& name,
      SchedGroup* value) {
    return ProcessOomProto_SchedGroup_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOomAdjFieldNumber = 3,
    kAdjTypeFieldNumber = 10,
    kProcFieldNumber = 9,
    kDetailFieldNumber = 15,
    kPersistentFieldNumber = 1,
    kNumFieldNumber = 2,
    kTrimMemoryLevelFieldNumber = 8,
    kSchedGroupFieldNumber = 4,
    kStateFieldNumber = 7,
    kActivitiesFieldNumber = 5,
    kServicesFieldNumber = 6,
    kAdjTargetComponentNameFieldNumber = 11,
    kAdjTargetObjectFieldNumber = 12,
    kAdjSourceProcFieldNumber = 13,
    kAdjSourceObjectFieldNumber = 14,
  };
  // optional string oom_adj = 3;
  bool has_oom_adj() const;
  void clear_oom_adj();
  const std::string& oom_adj() const;
  void set_oom_adj(const std::string& value);
  void set_oom_adj(std::string&& value);
  void set_oom_adj(const char* value);
  void set_oom_adj(const char* value, size_t size);
  std::string* mutable_oom_adj();
  std::string* release_oom_adj();
  void set_allocated_oom_adj(std::string* oom_adj);

  // optional string adj_type = 10;
  bool has_adj_type() const;
  void clear_adj_type();
  const std::string& adj_type() const;
  void set_adj_type(const std::string& value);
  void set_adj_type(std::string&& value);
  void set_adj_type(const char* value);
  void set_adj_type(const char* value, size_t size);
  std::string* mutable_adj_type();
  std::string* release_adj_type();
  void set_allocated_adj_type(std::string* adj_type);

  // optional .com.android.server.am.ProcessRecordProto proc = 9;
  bool has_proc() const;
  void clear_proc();
  const ::com::android::server::am::ProcessRecordProto& proc() const;
  ::com::android::server::am::ProcessRecordProto* release_proc();
  ::com::android::server::am::ProcessRecordProto* mutable_proc();
  void set_allocated_proc(::com::android::server::am::ProcessRecordProto* proc);

  // optional .com.android.server.am.ProcessOomProto.Detail detail = 15;
  bool has_detail() const;
  void clear_detail();
  const ::com::android::server::am::ProcessOomProto_Detail& detail() const;
  ::com::android::server::am::ProcessOomProto_Detail* release_detail();
  ::com::android::server::am::ProcessOomProto_Detail* mutable_detail();
  void set_allocated_detail(::com::android::server::am::ProcessOomProto_Detail* detail);

  // optional bool persistent = 1;
  bool has_persistent() const;
  void clear_persistent();
  bool persistent() const;
  void set_persistent(bool value);

  // optional int32 num = 2;
  bool has_num() const;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 trim_memory_level = 8;
  bool has_trim_memory_level() const;
  void clear_trim_memory_level();
  ::PROTOBUF_NAMESPACE_ID::int32 trim_memory_level() const;
  void set_trim_memory_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .com.android.server.am.ProcessOomProto.SchedGroup sched_group = 4 [default = SCHED_GROUP_UNKNOWN];
  bool has_sched_group() const;
  void clear_sched_group();
  ::com::android::server::am::ProcessOomProto_SchedGroup sched_group() const;
  void set_sched_group(::com::android::server::am::ProcessOomProto_SchedGroup value);

  // optional .android.app.ProcessStateEnum state = 7;
  bool has_state() const;
  void clear_state();
  ::android::app::ProcessStateEnum state() const;
  void set_state(::android::app::ProcessStateEnum value);

  // optional bool activities = 5;
  bool has_activities() const;
  void clear_activities();
  bool activities() const;
  void set_activities(bool value);

  // optional bool services = 6;
  bool has_services() const;
  void clear_services();
  bool services() const;
  void set_services(bool value);

  // optional .android.content.ComponentNameProto adj_target_component_name = 11;
  bool has_adj_target_component_name() const;
  void clear_adj_target_component_name();
  const ::android::content::ComponentNameProto& adj_target_component_name() const;
  ::android::content::ComponentNameProto* release_adj_target_component_name();
  ::android::content::ComponentNameProto* mutable_adj_target_component_name();
  void set_allocated_adj_target_component_name(::android::content::ComponentNameProto* adj_target_component_name);

  // optional string adj_target_object = 12;
  bool has_adj_target_object() const;
  void clear_adj_target_object();
  const std::string& adj_target_object() const;
  void set_adj_target_object(const std::string& value);
  void set_adj_target_object(std::string&& value);
  void set_adj_target_object(const char* value);
  void set_adj_target_object(const char* value, size_t size);
  std::string* mutable_adj_target_object();
  std::string* release_adj_target_object();
  void set_allocated_adj_target_object(std::string* adj_target_object);

  // optional .com.android.server.am.ProcessRecordProto adj_source_proc = 13;
  bool has_adj_source_proc() const;
  void clear_adj_source_proc();
  const ::com::android::server::am::ProcessRecordProto& adj_source_proc() const;
  ::com::android::server::am::ProcessRecordProto* release_adj_source_proc();
  ::com::android::server::am::ProcessRecordProto* mutable_adj_source_proc();
  void set_allocated_adj_source_proc(::com::android::server::am::ProcessRecordProto* adj_source_proc);

  // optional string adj_source_object = 14;
  bool has_adj_source_object() const;
  void clear_adj_source_object();
  const std::string& adj_source_object() const;
  void set_adj_source_object(const std::string& value);
  void set_adj_source_object(std::string&& value);
  void set_adj_source_object(const char* value);
  void set_adj_source_object(const char* value, size_t size);
  std::string* mutable_adj_source_object();
  std::string* release_adj_source_object();
  void set_allocated_adj_source_object(std::string* adj_source_object);

  void clear_Foreground();
  ForegroundCase Foreground_case() const;
  void clear_AdjTarget();
  AdjTargetCase AdjTarget_case() const;
  void clear_AdjSource();
  AdjSourceCase AdjSource_case() const;
  // @@protoc_insertion_point(class_scope:com.android.server.am.ProcessOomProto)
 private:
  class _Internal;
  void set_has_activities();
  void set_has_services();
  void set_has_adj_target_component_name();
  void set_has_adj_target_object();
  void set_has_adj_source_proc();
  void set_has_adj_source_object();

  inline bool has_Foreground() const;
  inline void clear_has_Foreground();

  inline bool has_AdjTarget() const;
  inline void clear_has_AdjTarget();

  inline bool has_AdjSource() const;
  inline void clear_has_AdjSource();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oom_adj_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adj_type_;
  ::com::android::server::am::ProcessRecordProto* proc_;
  ::com::android::server::am::ProcessOomProto_Detail* detail_;
  bool persistent_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 trim_memory_level_;
  int sched_group_;
  int state_;
  union ForegroundUnion {
    ForegroundUnion() {}
    bool activities_;
    bool services_;
  } Foreground_;
  union AdjTargetUnion {
    AdjTargetUnion() {}
    ::android::content::ComponentNameProto* adj_target_component_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adj_target_object_;
  } AdjTarget_;
  union AdjSourceUnion {
    AdjSourceUnion() {}
    ::com::android::server::am::ProcessRecordProto* adj_source_proc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adj_source_object_;
  } AdjSource_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class ProcessToGcProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.ProcessToGcProto) */ {
 public:
  ProcessToGcProto();
  virtual ~ProcessToGcProto();

  ProcessToGcProto(const ProcessToGcProto& from);
  ProcessToGcProto(ProcessToGcProto&& from) noexcept
    : ProcessToGcProto() {
    *this = ::std::move(from);
  }

  inline ProcessToGcProto& operator=(const ProcessToGcProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessToGcProto& operator=(ProcessToGcProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProcessToGcProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessToGcProto* internal_default_instance() {
    return reinterpret_cast<const ProcessToGcProto*>(
               &_ProcessToGcProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ProcessToGcProto& a, ProcessToGcProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessToGcProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessToGcProto* New() const final {
    return CreateMaybeMessage<ProcessToGcProto>(nullptr);
  }

  ProcessToGcProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessToGcProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessToGcProto& from);
  void MergeFrom(const ProcessToGcProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessToGcProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.ProcessToGcProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcFieldNumber = 1,
    kNowUptimeMsFieldNumber = 3,
    kLastGcedMsFieldNumber = 4,
    kLastLowMemoryMsFieldNumber = 5,
    kReportLowMemoryFieldNumber = 2,
  };
  // optional .com.android.server.am.ProcessRecordProto proc = 1;
  bool has_proc() const;
  void clear_proc();
  const ::com::android::server::am::ProcessRecordProto& proc() const;
  ::com::android::server::am::ProcessRecordProto* release_proc();
  ::com::android::server::am::ProcessRecordProto* mutable_proc();
  void set_allocated_proc(::com::android::server::am::ProcessRecordProto* proc);

  // optional int64 now_uptime_ms = 3;
  bool has_now_uptime_ms() const;
  void clear_now_uptime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 now_uptime_ms() const;
  void set_now_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_gced_ms = 4;
  bool has_last_gced_ms() const;
  void clear_last_gced_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_gced_ms() const;
  void set_last_gced_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_low_memory_ms = 5;
  bool has_last_low_memory_ms() const;
  void clear_last_low_memory_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_low_memory_ms() const;
  void set_last_low_memory_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool report_low_memory = 2;
  bool has_report_low_memory() const;
  void clear_report_low_memory();
  bool report_low_memory() const;
  void set_report_low_memory(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.ProcessToGcProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::am::ProcessRecordProto* proc_;
  ::PROTOBUF_NAMESPACE_ID::int64 now_uptime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_gced_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_low_memory_ms_;
  bool report_low_memory_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppErrorsProto_ProcessCrashTime_Entry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry) */ {
 public:
  AppErrorsProto_ProcessCrashTime_Entry();
  virtual ~AppErrorsProto_ProcessCrashTime_Entry();

  AppErrorsProto_ProcessCrashTime_Entry(const AppErrorsProto_ProcessCrashTime_Entry& from);
  AppErrorsProto_ProcessCrashTime_Entry(AppErrorsProto_ProcessCrashTime_Entry&& from) noexcept
    : AppErrorsProto_ProcessCrashTime_Entry() {
    *this = ::std::move(from);
  }

  inline AppErrorsProto_ProcessCrashTime_Entry& operator=(const AppErrorsProto_ProcessCrashTime_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppErrorsProto_ProcessCrashTime_Entry& operator=(AppErrorsProto_ProcessCrashTime_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppErrorsProto_ProcessCrashTime_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppErrorsProto_ProcessCrashTime_Entry* internal_default_instance() {
    return reinterpret_cast<const AppErrorsProto_ProcessCrashTime_Entry*>(
               &_AppErrorsProto_ProcessCrashTime_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(AppErrorsProto_ProcessCrashTime_Entry& a, AppErrorsProto_ProcessCrashTime_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(AppErrorsProto_ProcessCrashTime_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppErrorsProto_ProcessCrashTime_Entry* New() const final {
    return CreateMaybeMessage<AppErrorsProto_ProcessCrashTime_Entry>(nullptr);
  }

  AppErrorsProto_ProcessCrashTime_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppErrorsProto_ProcessCrashTime_Entry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppErrorsProto_ProcessCrashTime_Entry& from);
  void MergeFrom(const AppErrorsProto_ProcessCrashTime_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppErrorsProto_ProcessCrashTime_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastCrashedAtMsFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // optional int64 last_crashed_at_ms = 2;
  bool has_last_crashed_at_ms() const;
  void clear_last_crashed_at_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_crashed_at_ms() const;
  void set_last_crashed_at_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_crashed_at_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppErrorsProto_ProcessCrashTime :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppErrorsProto.ProcessCrashTime) */ {
 public:
  AppErrorsProto_ProcessCrashTime();
  virtual ~AppErrorsProto_ProcessCrashTime();

  AppErrorsProto_ProcessCrashTime(const AppErrorsProto_ProcessCrashTime& from);
  AppErrorsProto_ProcessCrashTime(AppErrorsProto_ProcessCrashTime&& from) noexcept
    : AppErrorsProto_ProcessCrashTime() {
    *this = ::std::move(from);
  }

  inline AppErrorsProto_ProcessCrashTime& operator=(const AppErrorsProto_ProcessCrashTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppErrorsProto_ProcessCrashTime& operator=(AppErrorsProto_ProcessCrashTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppErrorsProto_ProcessCrashTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppErrorsProto_ProcessCrashTime* internal_default_instance() {
    return reinterpret_cast<const AppErrorsProto_ProcessCrashTime*>(
               &_AppErrorsProto_ProcessCrashTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(AppErrorsProto_ProcessCrashTime& a, AppErrorsProto_ProcessCrashTime& b) {
    a.Swap(&b);
  }
  inline void Swap(AppErrorsProto_ProcessCrashTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppErrorsProto_ProcessCrashTime* New() const final {
    return CreateMaybeMessage<AppErrorsProto_ProcessCrashTime>(nullptr);
  }

  AppErrorsProto_ProcessCrashTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppErrorsProto_ProcessCrashTime>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppErrorsProto_ProcessCrashTime& from);
  void MergeFrom(const AppErrorsProto_ProcessCrashTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppErrorsProto_ProcessCrashTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppErrorsProto.ProcessCrashTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppErrorsProto_ProcessCrashTime_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kProcessNameFieldNumber = 1,
  };
  // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry entries = 2;
  int entries_size() const;
  void clear_entries();
  ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry >*
      mutable_entries();
  const ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry& entries(int index) const;
  ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry >&
      entries() const;

  // optional string process_name = 1;
  bool has_process_name() const;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppErrorsProto.ProcessCrashTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppErrorsProto_BadProcess_Entry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppErrorsProto.BadProcess.Entry) */ {
 public:
  AppErrorsProto_BadProcess_Entry();
  virtual ~AppErrorsProto_BadProcess_Entry();

  AppErrorsProto_BadProcess_Entry(const AppErrorsProto_BadProcess_Entry& from);
  AppErrorsProto_BadProcess_Entry(AppErrorsProto_BadProcess_Entry&& from) noexcept
    : AppErrorsProto_BadProcess_Entry() {
    *this = ::std::move(from);
  }

  inline AppErrorsProto_BadProcess_Entry& operator=(const AppErrorsProto_BadProcess_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppErrorsProto_BadProcess_Entry& operator=(AppErrorsProto_BadProcess_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppErrorsProto_BadProcess_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppErrorsProto_BadProcess_Entry* internal_default_instance() {
    return reinterpret_cast<const AppErrorsProto_BadProcess_Entry*>(
               &_AppErrorsProto_BadProcess_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(AppErrorsProto_BadProcess_Entry& a, AppErrorsProto_BadProcess_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(AppErrorsProto_BadProcess_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppErrorsProto_BadProcess_Entry* New() const final {
    return CreateMaybeMessage<AppErrorsProto_BadProcess_Entry>(nullptr);
  }

  AppErrorsProto_BadProcess_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppErrorsProto_BadProcess_Entry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppErrorsProto_BadProcess_Entry& from);
  void MergeFrom(const AppErrorsProto_BadProcess_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppErrorsProto_BadProcess_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppErrorsProto.BadProcess.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortMsgFieldNumber = 3,
    kLongMsgFieldNumber = 4,
    kStackFieldNumber = 5,
    kCrashedAtMsFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // optional string short_msg = 3;
  bool has_short_msg() const;
  void clear_short_msg();
  const std::string& short_msg() const;
  void set_short_msg(const std::string& value);
  void set_short_msg(std::string&& value);
  void set_short_msg(const char* value);
  void set_short_msg(const char* value, size_t size);
  std::string* mutable_short_msg();
  std::string* release_short_msg();
  void set_allocated_short_msg(std::string* short_msg);

  // optional string long_msg = 4 [(.android.privacy) = {
  bool has_long_msg() const;
  void clear_long_msg();
  const std::string& long_msg() const;
  void set_long_msg(const std::string& value);
  void set_long_msg(std::string&& value);
  void set_long_msg(const char* value);
  void set_long_msg(const char* value, size_t size);
  std::string* mutable_long_msg();
  std::string* release_long_msg();
  void set_allocated_long_msg(std::string* long_msg);

  // optional string stack = 5 [(.android.privacy) = {
  bool has_stack() const;
  void clear_stack();
  const std::string& stack() const;
  void set_stack(const std::string& value);
  void set_stack(std::string&& value);
  void set_stack(const char* value);
  void set_stack(const char* value, size_t size);
  std::string* mutable_stack();
  std::string* release_stack();
  void set_allocated_stack(std::string* stack);

  // optional int64 crashed_at_ms = 2;
  bool has_crashed_at_ms() const;
  void clear_crashed_at_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 crashed_at_ms() const;
  void set_crashed_at_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppErrorsProto.BadProcess.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stack_;
  ::PROTOBUF_NAMESPACE_ID::int64 crashed_at_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppErrorsProto_BadProcess :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppErrorsProto.BadProcess) */ {
 public:
  AppErrorsProto_BadProcess();
  virtual ~AppErrorsProto_BadProcess();

  AppErrorsProto_BadProcess(const AppErrorsProto_BadProcess& from);
  AppErrorsProto_BadProcess(AppErrorsProto_BadProcess&& from) noexcept
    : AppErrorsProto_BadProcess() {
    *this = ::std::move(from);
  }

  inline AppErrorsProto_BadProcess& operator=(const AppErrorsProto_BadProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppErrorsProto_BadProcess& operator=(AppErrorsProto_BadProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppErrorsProto_BadProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppErrorsProto_BadProcess* internal_default_instance() {
    return reinterpret_cast<const AppErrorsProto_BadProcess*>(
               &_AppErrorsProto_BadProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(AppErrorsProto_BadProcess& a, AppErrorsProto_BadProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(AppErrorsProto_BadProcess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppErrorsProto_BadProcess* New() const final {
    return CreateMaybeMessage<AppErrorsProto_BadProcess>(nullptr);
  }

  AppErrorsProto_BadProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppErrorsProto_BadProcess>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppErrorsProto_BadProcess& from);
  void MergeFrom(const AppErrorsProto_BadProcess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppErrorsProto_BadProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppErrorsProto.BadProcess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppErrorsProto_BadProcess_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kProcessNameFieldNumber = 1,
  };
  // repeated .com.android.server.am.AppErrorsProto.BadProcess.Entry entries = 2;
  int entries_size() const;
  void clear_entries();
  ::com::android::server::am::AppErrorsProto_BadProcess_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess_Entry >*
      mutable_entries();
  const ::com::android::server::am::AppErrorsProto_BadProcess_Entry& entries(int index) const;
  ::com::android::server::am::AppErrorsProto_BadProcess_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess_Entry >&
      entries() const;

  // optional string process_name = 1;
  bool has_process_name() const;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppErrorsProto.BadProcess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppErrorsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppErrorsProto) */ {
 public:
  AppErrorsProto();
  virtual ~AppErrorsProto();

  AppErrorsProto(const AppErrorsProto& from);
  AppErrorsProto(AppErrorsProto&& from) noexcept
    : AppErrorsProto() {
    *this = ::std::move(from);
  }

  inline AppErrorsProto& operator=(const AppErrorsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppErrorsProto& operator=(AppErrorsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppErrorsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppErrorsProto* internal_default_instance() {
    return reinterpret_cast<const AppErrorsProto*>(
               &_AppErrorsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(AppErrorsProto& a, AppErrorsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AppErrorsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppErrorsProto* New() const final {
    return CreateMaybeMessage<AppErrorsProto>(nullptr);
  }

  AppErrorsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppErrorsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppErrorsProto& from);
  void MergeFrom(const AppErrorsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppErrorsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppErrorsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppErrorsProto_ProcessCrashTime ProcessCrashTime;
  typedef AppErrorsProto_BadProcess BadProcess;

  // accessors -------------------------------------------------------

  enum : int {
    kProcessCrashTimesFieldNumber = 2,
    kBadProcessesFieldNumber = 3,
    kNowUptimeMsFieldNumber = 1,
  };
  // repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime process_crash_times = 2;
  int process_crash_times_size() const;
  void clear_process_crash_times();
  ::com::android::server::am::AppErrorsProto_ProcessCrashTime* mutable_process_crash_times(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime >*
      mutable_process_crash_times();
  const ::com::android::server::am::AppErrorsProto_ProcessCrashTime& process_crash_times(int index) const;
  ::com::android::server::am::AppErrorsProto_ProcessCrashTime* add_process_crash_times();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime >&
      process_crash_times() const;

  // repeated .com.android.server.am.AppErrorsProto.BadProcess bad_processes = 3;
  int bad_processes_size() const;
  void clear_bad_processes();
  ::com::android::server::am::AppErrorsProto_BadProcess* mutable_bad_processes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess >*
      mutable_bad_processes();
  const ::com::android::server::am::AppErrorsProto_BadProcess& bad_processes(int index) const;
  ::com::android::server::am::AppErrorsProto_BadProcess* add_bad_processes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess >&
      bad_processes() const;

  // optional int64 now_uptime_ms = 1;
  bool has_now_uptime_ms() const;
  void clear_now_uptime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 now_uptime_ms() const;
  void set_now_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppErrorsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime > process_crash_times_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess > bad_processes_;
  ::PROTOBUF_NAMESPACE_ID::int64 now_uptime_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class UserStateProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.UserStateProto) */ {
 public:
  UserStateProto();
  virtual ~UserStateProto();

  UserStateProto(const UserStateProto& from);
  UserStateProto(UserStateProto&& from) noexcept
    : UserStateProto() {
    *this = ::std::move(from);
  }

  inline UserStateProto& operator=(const UserStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserStateProto& operator=(UserStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStateProto* internal_default_instance() {
    return reinterpret_cast<const UserStateProto*>(
               &_UserStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(UserStateProto& a, UserStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UserStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserStateProto* New() const final {
    return CreateMaybeMessage<UserStateProto>(nullptr);
  }

  UserStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserStateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserStateProto& from);
  void MergeFrom(const UserStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.UserStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserStateProto_State State;
  static constexpr State STATE_BOOTING =
    UserStateProto_State_STATE_BOOTING;
  static constexpr State STATE_RUNNING_LOCKED =
    UserStateProto_State_STATE_RUNNING_LOCKED;
  static constexpr State STATE_RUNNING_UNLOCKING =
    UserStateProto_State_STATE_RUNNING_UNLOCKING;
  static constexpr State STATE_RUNNING_UNLOCKED =
    UserStateProto_State_STATE_RUNNING_UNLOCKED;
  static constexpr State STATE_STOPPING =
    UserStateProto_State_STATE_STOPPING;
  static constexpr State STATE_SHUTDOWN =
    UserStateProto_State_STATE_SHUTDOWN;
  static inline bool State_IsValid(int value) {
    return UserStateProto_State_IsValid(value);
  }
  static constexpr State State_MIN =
    UserStateProto_State_State_MIN;
  static constexpr State State_MAX =
    UserStateProto_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    UserStateProto_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return UserStateProto_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return UserStateProto_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kSwitchingFieldNumber = 2,
  };
  // optional .com.android.server.am.UserStateProto.State state = 1;
  bool has_state() const;
  void clear_state();
  ::com::android::server::am::UserStateProto_State state() const;
  void set_state(::com::android::server::am::UserStateProto_State value);

  // optional bool switching = 2;
  bool has_switching() const;
  void clear_switching();
  bool switching() const;
  void set_switching(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.UserStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int state_;
  bool switching_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class UserControllerProto_User :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.UserControllerProto.User) */ {
 public:
  UserControllerProto_User();
  virtual ~UserControllerProto_User();

  UserControllerProto_User(const UserControllerProto_User& from);
  UserControllerProto_User(UserControllerProto_User&& from) noexcept
    : UserControllerProto_User() {
    *this = ::std::move(from);
  }

  inline UserControllerProto_User& operator=(const UserControllerProto_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserControllerProto_User& operator=(UserControllerProto_User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserControllerProto_User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserControllerProto_User* internal_default_instance() {
    return reinterpret_cast<const UserControllerProto_User*>(
               &_UserControllerProto_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(UserControllerProto_User& a, UserControllerProto_User& b) {
    a.Swap(&b);
  }
  inline void Swap(UserControllerProto_User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserControllerProto_User* New() const final {
    return CreateMaybeMessage<UserControllerProto_User>(nullptr);
  }

  UserControllerProto_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserControllerProto_User>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserControllerProto_User& from);
  void MergeFrom(const UserControllerProto_User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserControllerProto_User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.UserControllerProto.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .com.android.server.am.UserStateProto state = 2;
  bool has_state() const;
  void clear_state();
  const ::com::android::server::am::UserStateProto& state() const;
  ::com::android::server::am::UserStateProto* release_state();
  ::com::android::server::am::UserStateProto* mutable_state();
  void set_allocated_state(::com::android::server::am::UserStateProto* state);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.UserControllerProto.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::am::UserStateProto* state_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class UserControllerProto_UserProfile :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.UserControllerProto.UserProfile) */ {
 public:
  UserControllerProto_UserProfile();
  virtual ~UserControllerProto_UserProfile();

  UserControllerProto_UserProfile(const UserControllerProto_UserProfile& from);
  UserControllerProto_UserProfile(UserControllerProto_UserProfile&& from) noexcept
    : UserControllerProto_UserProfile() {
    *this = ::std::move(from);
  }

  inline UserControllerProto_UserProfile& operator=(const UserControllerProto_UserProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserControllerProto_UserProfile& operator=(UserControllerProto_UserProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserControllerProto_UserProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserControllerProto_UserProfile* internal_default_instance() {
    return reinterpret_cast<const UserControllerProto_UserProfile*>(
               &_UserControllerProto_UserProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(UserControllerProto_UserProfile& a, UserControllerProto_UserProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(UserControllerProto_UserProfile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserControllerProto_UserProfile* New() const final {
    return CreateMaybeMessage<UserControllerProto_UserProfile>(nullptr);
  }

  UserControllerProto_UserProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserControllerProto_UserProfile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserControllerProto_UserProfile& from);
  void MergeFrom(const UserControllerProto_UserProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserControllerProto_UserProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.UserControllerProto.UserProfile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kProfileFieldNumber = 2,
  };
  // optional int32 user = 1;
  bool has_user() const;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::int32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 profile = 2;
  bool has_profile() const;
  void clear_profile();
  ::PROTOBUF_NAMESPACE_ID::int32 profile() const;
  void set_profile(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.UserControllerProto.UserProfile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_;
  ::PROTOBUF_NAMESPACE_ID::int32 profile_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class UserControllerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.UserControllerProto) */ {
 public:
  UserControllerProto();
  virtual ~UserControllerProto();

  UserControllerProto(const UserControllerProto& from);
  UserControllerProto(UserControllerProto&& from) noexcept
    : UserControllerProto() {
    *this = ::std::move(from);
  }

  inline UserControllerProto& operator=(const UserControllerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserControllerProto& operator=(UserControllerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UserControllerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserControllerProto* internal_default_instance() {
    return reinterpret_cast<const UserControllerProto*>(
               &_UserControllerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(UserControllerProto& a, UserControllerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UserControllerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserControllerProto* New() const final {
    return CreateMaybeMessage<UserControllerProto>(nullptr);
  }

  UserControllerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserControllerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserControllerProto& from);
  void MergeFrom(const UserControllerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserControllerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.UserControllerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UserControllerProto_User User;
  typedef UserControllerProto_UserProfile UserProfile;

  // accessors -------------------------------------------------------

  enum : int {
    kStartedUsersFieldNumber = 1,
    kStartedUserArrayFieldNumber = 2,
    kUserLruFieldNumber = 3,
    kUserProfileGroupIdsFieldNumber = 4,
  };
  // repeated .com.android.server.am.UserControllerProto.User started_users = 1;
  int started_users_size() const;
  void clear_started_users();
  ::com::android::server::am::UserControllerProto_User* mutable_started_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_User >*
      mutable_started_users();
  const ::com::android::server::am::UserControllerProto_User& started_users(int index) const;
  ::com::android::server::am::UserControllerProto_User* add_started_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_User >&
      started_users() const;

  // repeated int32 started_user_array = 2;
  int started_user_array_size() const;
  void clear_started_user_array();
  ::PROTOBUF_NAMESPACE_ID::int32 started_user_array(int index) const;
  void set_started_user_array(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_started_user_array(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      started_user_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_started_user_array();

  // repeated int32 user_lru = 3;
  int user_lru_size() const;
  void clear_user_lru();
  ::PROTOBUF_NAMESPACE_ID::int32 user_lru(int index) const;
  void set_user_lru(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_user_lru(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      user_lru() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_user_lru();

  // repeated .com.android.server.am.UserControllerProto.UserProfile user_profile_group_ids = 4;
  int user_profile_group_ids_size() const;
  void clear_user_profile_group_ids();
  ::com::android::server::am::UserControllerProto_UserProfile* mutable_user_profile_group_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_UserProfile >*
      mutable_user_profile_group_ids();
  const ::com::android::server::am::UserControllerProto_UserProfile& user_profile_group_ids(int index) const;
  ::com::android::server::am::UserControllerProto_UserProfile* add_user_profile_group_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_UserProfile >&
      user_profile_group_ids() const;

  // @@protoc_insertion_point(class_scope:com.android.server.am.UserControllerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_User > started_users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > started_user_array_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > user_lru_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_UserProfile > user_profile_group_ids_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppTimeTrackerProto_PackageTime :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppTimeTrackerProto.PackageTime) */ {
 public:
  AppTimeTrackerProto_PackageTime();
  virtual ~AppTimeTrackerProto_PackageTime();

  AppTimeTrackerProto_PackageTime(const AppTimeTrackerProto_PackageTime& from);
  AppTimeTrackerProto_PackageTime(AppTimeTrackerProto_PackageTime&& from) noexcept
    : AppTimeTrackerProto_PackageTime() {
    *this = ::std::move(from);
  }

  inline AppTimeTrackerProto_PackageTime& operator=(const AppTimeTrackerProto_PackageTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppTimeTrackerProto_PackageTime& operator=(AppTimeTrackerProto_PackageTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppTimeTrackerProto_PackageTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppTimeTrackerProto_PackageTime* internal_default_instance() {
    return reinterpret_cast<const AppTimeTrackerProto_PackageTime*>(
               &_AppTimeTrackerProto_PackageTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(AppTimeTrackerProto_PackageTime& a, AppTimeTrackerProto_PackageTime& b) {
    a.Swap(&b);
  }
  inline void Swap(AppTimeTrackerProto_PackageTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppTimeTrackerProto_PackageTime* New() const final {
    return CreateMaybeMessage<AppTimeTrackerProto_PackageTime>(nullptr);
  }

  AppTimeTrackerProto_PackageTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppTimeTrackerProto_PackageTime>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppTimeTrackerProto_PackageTime& from);
  void MergeFrom(const AppTimeTrackerProto_PackageTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppTimeTrackerProto_PackageTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppTimeTrackerProto.PackageTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
    kDurationMsFieldNumber = 2,
  };
  // optional string package = 1;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional int64 duration_ms = 2;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppTimeTrackerProto.PackageTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppTimeTrackerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppTimeTrackerProto) */ {
 public:
  AppTimeTrackerProto();
  virtual ~AppTimeTrackerProto();

  AppTimeTrackerProto(const AppTimeTrackerProto& from);
  AppTimeTrackerProto(AppTimeTrackerProto&& from) noexcept
    : AppTimeTrackerProto() {
    *this = ::std::move(from);
  }

  inline AppTimeTrackerProto& operator=(const AppTimeTrackerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppTimeTrackerProto& operator=(AppTimeTrackerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppTimeTrackerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppTimeTrackerProto* internal_default_instance() {
    return reinterpret_cast<const AppTimeTrackerProto*>(
               &_AppTimeTrackerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(AppTimeTrackerProto& a, AppTimeTrackerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AppTimeTrackerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppTimeTrackerProto* New() const final {
    return CreateMaybeMessage<AppTimeTrackerProto>(nullptr);
  }

  AppTimeTrackerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppTimeTrackerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppTimeTrackerProto& from);
  void MergeFrom(const AppTimeTrackerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppTimeTrackerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppTimeTrackerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppTimeTrackerProto_PackageTime PackageTime;

  // accessors -------------------------------------------------------

  enum : int {
    kPackageTimesFieldNumber = 3,
    kReceiverFieldNumber = 1,
    kStartedPackageFieldNumber = 5,
    kStartedTimeFieldNumber = 4,
    kTotalDurationMsFieldNumber = 2,
  };
  // repeated .com.android.server.am.AppTimeTrackerProto.PackageTime package_times = 3;
  int package_times_size() const;
  void clear_package_times();
  ::com::android::server::am::AppTimeTrackerProto_PackageTime* mutable_package_times(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppTimeTrackerProto_PackageTime >*
      mutable_package_times();
  const ::com::android::server::am::AppTimeTrackerProto_PackageTime& package_times(int index) const;
  ::com::android::server::am::AppTimeTrackerProto_PackageTime* add_package_times();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppTimeTrackerProto_PackageTime >&
      package_times() const;

  // optional string receiver = 1;
  bool has_receiver() const;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);

  // optional string started_package = 5;
  bool has_started_package() const;
  void clear_started_package();
  const std::string& started_package() const;
  void set_started_package(const std::string& value);
  void set_started_package(std::string&& value);
  void set_started_package(const char* value);
  void set_started_package(const char* value, size_t size);
  std::string* mutable_started_package();
  std::string* release_started_package();
  void set_allocated_started_package(std::string* started_package);

  // optional .android.util.Duration started_time = 4;
  bool has_started_time() const;
  void clear_started_time();
  const ::android::util::Duration& started_time() const;
  ::android::util::Duration* release_started_time();
  ::android::util::Duration* mutable_started_time();
  void set_allocated_started_time(::android::util::Duration* started_time);

  // optional int64 total_duration_ms = 2;
  bool has_total_duration_ms() const;
  void clear_total_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_duration_ms() const;
  void set_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppTimeTrackerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppTimeTrackerProto_PackageTime > package_times_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr started_package_;
  ::android::util::Duration* started_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppsExitInfoProto_Package_User :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppsExitInfoProto.Package.User) */ {
 public:
  AppsExitInfoProto_Package_User();
  virtual ~AppsExitInfoProto_Package_User();

  AppsExitInfoProto_Package_User(const AppsExitInfoProto_Package_User& from);
  AppsExitInfoProto_Package_User(AppsExitInfoProto_Package_User&& from) noexcept
    : AppsExitInfoProto_Package_User() {
    *this = ::std::move(from);
  }

  inline AppsExitInfoProto_Package_User& operator=(const AppsExitInfoProto_Package_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppsExitInfoProto_Package_User& operator=(AppsExitInfoProto_Package_User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppsExitInfoProto_Package_User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppsExitInfoProto_Package_User* internal_default_instance() {
    return reinterpret_cast<const AppsExitInfoProto_Package_User*>(
               &_AppsExitInfoProto_Package_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(AppsExitInfoProto_Package_User& a, AppsExitInfoProto_Package_User& b) {
    a.Swap(&b);
  }
  inline void Swap(AppsExitInfoProto_Package_User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppsExitInfoProto_Package_User* New() const final {
    return CreateMaybeMessage<AppsExitInfoProto_Package_User>(nullptr);
  }

  AppsExitInfoProto_Package_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppsExitInfoProto_Package_User>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppsExitInfoProto_Package_User& from);
  void MergeFrom(const AppsExitInfoProto_Package_User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppsExitInfoProto_Package_User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppsExitInfoProto.Package.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppExitInfoFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // repeated .android.app.ApplicationExitInfoProto app_exit_info = 2;
  int app_exit_info_size() const;
  void clear_app_exit_info();
  ::android::app::ApplicationExitInfoProto* mutable_app_exit_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::ApplicationExitInfoProto >*
      mutable_app_exit_info();
  const ::android::app::ApplicationExitInfoProto& app_exit_info(int index) const;
  ::android::app::ApplicationExitInfoProto* add_app_exit_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::ApplicationExitInfoProto >&
      app_exit_info() const;

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppsExitInfoProto.Package.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::ApplicationExitInfoProto > app_exit_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppsExitInfoProto_Package :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppsExitInfoProto.Package) */ {
 public:
  AppsExitInfoProto_Package();
  virtual ~AppsExitInfoProto_Package();

  AppsExitInfoProto_Package(const AppsExitInfoProto_Package& from);
  AppsExitInfoProto_Package(AppsExitInfoProto_Package&& from) noexcept
    : AppsExitInfoProto_Package() {
    *this = ::std::move(from);
  }

  inline AppsExitInfoProto_Package& operator=(const AppsExitInfoProto_Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppsExitInfoProto_Package& operator=(AppsExitInfoProto_Package&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppsExitInfoProto_Package& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppsExitInfoProto_Package* internal_default_instance() {
    return reinterpret_cast<const AppsExitInfoProto_Package*>(
               &_AppsExitInfoProto_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(AppsExitInfoProto_Package& a, AppsExitInfoProto_Package& b) {
    a.Swap(&b);
  }
  inline void Swap(AppsExitInfoProto_Package* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppsExitInfoProto_Package* New() const final {
    return CreateMaybeMessage<AppsExitInfoProto_Package>(nullptr);
  }

  AppsExitInfoProto_Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppsExitInfoProto_Package>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppsExitInfoProto_Package& from);
  void MergeFrom(const AppsExitInfoProto_Package& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppsExitInfoProto_Package* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppsExitInfoProto.Package";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppsExitInfoProto_Package_User User;

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kPackageNameFieldNumber = 1,
  };
  // repeated .com.android.server.am.AppsExitInfoProto.Package.User users = 2;
  int users_size() const;
  void clear_users();
  ::com::android::server::am::AppsExitInfoProto_Package_User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package_User >*
      mutable_users();
  const ::com::android::server::am::AppsExitInfoProto_Package_User& users(int index) const;
  ::com::android::server::am::AppsExitInfoProto_Package_User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package_User >&
      users() const;

  // optional string package_name = 1;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppsExitInfoProto.Package)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package_User > users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// -------------------------------------------------------------------

class AppsExitInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.am.AppsExitInfoProto) */ {
 public:
  AppsExitInfoProto();
  virtual ~AppsExitInfoProto();

  AppsExitInfoProto(const AppsExitInfoProto& from);
  AppsExitInfoProto(AppsExitInfoProto&& from) noexcept
    : AppsExitInfoProto() {
    *this = ::std::move(from);
  }

  inline AppsExitInfoProto& operator=(const AppsExitInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppsExitInfoProto& operator=(AppsExitInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AppsExitInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppsExitInfoProto* internal_default_instance() {
    return reinterpret_cast<const AppsExitInfoProto*>(
               &_AppsExitInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(AppsExitInfoProto& a, AppsExitInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AppsExitInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppsExitInfoProto* New() const final {
    return CreateMaybeMessage<AppsExitInfoProto>(nullptr);
  }

  AppsExitInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppsExitInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppsExitInfoProto& from);
  void MergeFrom(const AppsExitInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppsExitInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.am.AppsExitInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AppsExitInfoProto_Package Package;

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 2,
    kLastUpdateTimestampFieldNumber = 1,
  };
  // repeated .com.android.server.am.AppsExitInfoProto.Package packages = 2;
  int packages_size() const;
  void clear_packages();
  ::com::android::server::am::AppsExitInfoProto_Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package >*
      mutable_packages();
  const ::com::android::server::am::AppsExitInfoProto_Package& packages(int index) const;
  ::com::android::server::am::AppsExitInfoProto_Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package >&
      packages() const;

  // optional int64 last_update_timestamp = 1;
  bool has_last_update_timestamp() const;
  void clear_last_update_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_update_timestamp() const;
  void set_last_update_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.am.AppsExitInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package > packages_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_update_timestamp_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActivityManagerServiceProto

// optional .com.android.server.am.ActivityManagerServiceDumpActivitiesProto activities = 1;
inline bool ActivityManagerServiceProto::has_activities() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceProto::clear_activities() {
  if (activities_ != nullptr) activities_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto& ActivityManagerServiceProto::activities() const {
  const ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* p = activities_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceProto.activities)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto*>(
      &::com::android::server::am::_ActivityManagerServiceDumpActivitiesProto_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* ActivityManagerServiceProto::release_activities() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceProto.activities)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* temp = activities_;
  activities_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* ActivityManagerServiceProto::mutable_activities() {
  _has_bits_[0] |= 0x00000001u;
  if (activities_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpActivitiesProto>(GetArenaNoVirtual());
    activities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceProto.activities)
  return activities_;
}
inline void ActivityManagerServiceProto::set_allocated_activities(::com::android::server::am::ActivityManagerServiceDumpActivitiesProto* activities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activities_;
  }
  if (activities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activities, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activities_ = activities;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceProto.activities)
}

// optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto broadcasts = 2;
inline bool ActivityManagerServiceProto::has_broadcasts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceProto::clear_broadcasts() {
  if (broadcasts_ != nullptr) broadcasts_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto& ActivityManagerServiceProto::broadcasts() const {
  const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* p = broadcasts_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceProto.broadcasts)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto*>(
      &::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* ActivityManagerServiceProto::release_broadcasts() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceProto.broadcasts)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* temp = broadcasts_;
  broadcasts_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* ActivityManagerServiceProto::mutable_broadcasts() {
  _has_bits_[0] |= 0x00000002u;
  if (broadcasts_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto>(GetArenaNoVirtual());
    broadcasts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceProto.broadcasts)
  return broadcasts_;
}
inline void ActivityManagerServiceProto::set_allocated_broadcasts(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto* broadcasts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete broadcasts_;
  }
  if (broadcasts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcasts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcasts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  broadcasts_ = broadcasts;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceProto.broadcasts)
}

// optional .com.android.server.am.ActivityManagerServiceDumpServicesProto services = 3;
inline bool ActivityManagerServiceProto::has_services() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceProto::clear_services() {
  if (services_ != nullptr) services_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpServicesProto& ActivityManagerServiceProto::services() const {
  const ::com::android::server::am::ActivityManagerServiceDumpServicesProto* p = services_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceProto.services)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpServicesProto*>(
      &::com::android::server::am::_ActivityManagerServiceDumpServicesProto_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpServicesProto* ActivityManagerServiceProto::release_services() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceProto.services)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::am::ActivityManagerServiceDumpServicesProto* temp = services_;
  services_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpServicesProto* ActivityManagerServiceProto::mutable_services() {
  _has_bits_[0] |= 0x00000004u;
  if (services_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpServicesProto>(GetArenaNoVirtual());
    services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceProto.services)
  return services_;
}
inline void ActivityManagerServiceProto::set_allocated_services(::com::android::server::am::ActivityManagerServiceDumpServicesProto* services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete services_;
  }
  if (services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, services, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  services_ = services;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceProto.services)
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto processes = 4;
inline bool ActivityManagerServiceProto::has_processes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityManagerServiceProto::clear_processes() {
  if (processes_ != nullptr) processes_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto& ActivityManagerServiceProto::processes() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* p = processes_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceProto.processes)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* ActivityManagerServiceProto::release_processes() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceProto.processes)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* temp = processes_;
  processes_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto* ActivityManagerServiceProto::mutable_processes() {
  _has_bits_[0] |= 0x00000008u;
  if (processes_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto>(GetArenaNoVirtual());
    processes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceProto.processes)
  return processes_;
}
inline void ActivityManagerServiceProto::set_allocated_processes(::com::android::server::am::ActivityManagerServiceDumpProcessesProto* processes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete processes_;
  }
  if (processes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  processes_ = processes;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceProto.processes)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpActivitiesProto

// optional .com.android.server.wm.RootWindowContainerProto root_window_container = 2;
inline bool ActivityManagerServiceDumpActivitiesProto::has_root_window_container() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::com::android::server::wm::RootWindowContainerProto& ActivityManagerServiceDumpActivitiesProto::root_window_container() const {
  const ::com::android::server::wm::RootWindowContainerProto* p = root_window_container_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpActivitiesProto.root_window_container)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::RootWindowContainerProto*>(
      &::com::android::server::wm::_RootWindowContainerProto_default_instance_);
}
inline ::com::android::server::wm::RootWindowContainerProto* ActivityManagerServiceDumpActivitiesProto::release_root_window_container() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpActivitiesProto.root_window_container)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::wm::RootWindowContainerProto* temp = root_window_container_;
  root_window_container_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::RootWindowContainerProto* ActivityManagerServiceDumpActivitiesProto::mutable_root_window_container() {
  _has_bits_[0] |= 0x00000001u;
  if (root_window_container_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::RootWindowContainerProto>(GetArenaNoVirtual());
    root_window_container_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpActivitiesProto.root_window_container)
  return root_window_container_;
}
inline void ActivityManagerServiceDumpActivitiesProto::set_allocated_root_window_container(::com::android::server::wm::RootWindowContainerProto* root_window_container) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_window_container_);
  }
  if (root_window_container) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root_window_container = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_window_container, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_window_container_ = root_window_container;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpActivitiesProto.root_window_container)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpBroadcastsProto_MainHandler

// optional string handler = 1;
inline bool ActivityManagerServiceDumpBroadcastsProto_MainHandler::has_handler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpBroadcastsProto_MainHandler::clear_handler() {
  handler_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpBroadcastsProto_MainHandler::handler() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler)
  return handler_.GetNoArena();
}
inline void ActivityManagerServiceDumpBroadcastsProto_MainHandler::set_handler(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  handler_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler)
}
inline void ActivityManagerServiceDumpBroadcastsProto_MainHandler::set_handler(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  handler_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler)
}
inline void ActivityManagerServiceDumpBroadcastsProto_MainHandler::set_handler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  handler_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler)
}
inline void ActivityManagerServiceDumpBroadcastsProto_MainHandler::set_handler(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  handler_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler)
}
inline std::string* ActivityManagerServiceDumpBroadcastsProto_MainHandler::mutable_handler() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler)
  return handler_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpBroadcastsProto_MainHandler::release_handler() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler)
  if (!has_handler()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return handler_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpBroadcastsProto_MainHandler::set_allocated_handler(std::string* handler) {
  if (handler != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  handler_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handler);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.handler)
}

// optional .android.os.LooperProto looper = 2;
inline bool ActivityManagerServiceDumpBroadcastsProto_MainHandler::has_looper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::os::LooperProto& ActivityManagerServiceDumpBroadcastsProto_MainHandler::looper() const {
  const ::android::os::LooperProto* p = looper_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.looper)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::LooperProto*>(
      &::android::os::_LooperProto_default_instance_);
}
inline ::android::os::LooperProto* ActivityManagerServiceDumpBroadcastsProto_MainHandler::release_looper() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.looper)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::LooperProto* temp = looper_;
  looper_ = nullptr;
  return temp;
}
inline ::android::os::LooperProto* ActivityManagerServiceDumpBroadcastsProto_MainHandler::mutable_looper() {
  _has_bits_[0] |= 0x00000002u;
  if (looper_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::LooperProto>(GetArenaNoVirtual());
    looper_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.looper)
  return looper_;
}
inline void ActivityManagerServiceDumpBroadcastsProto_MainHandler::set_allocated_looper(::android::os::LooperProto* looper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(looper_);
  }
  if (looper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      looper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, looper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  looper_ = looper;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler.looper)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpBroadcastsProto

// repeated .com.android.server.am.ReceiverListProto receiver_list = 1;
inline int ActivityManagerServiceDumpBroadcastsProto::receiver_list_size() const {
  return receiver_list_.size();
}
inline void ActivityManagerServiceDumpBroadcastsProto::clear_receiver_list() {
  receiver_list_.Clear();
}
inline ::com::android::server::am::ReceiverListProto* ActivityManagerServiceDumpBroadcastsProto::mutable_receiver_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_list)
  return receiver_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ReceiverListProto >*
ActivityManagerServiceDumpBroadcastsProto::mutable_receiver_list() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_list)
  return &receiver_list_;
}
inline const ::com::android::server::am::ReceiverListProto& ActivityManagerServiceDumpBroadcastsProto::receiver_list(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_list)
  return receiver_list_.Get(index);
}
inline ::com::android::server::am::ReceiverListProto* ActivityManagerServiceDumpBroadcastsProto::add_receiver_list() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_list)
  return receiver_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ReceiverListProto >&
ActivityManagerServiceDumpBroadcastsProto::receiver_list() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_list)
  return receiver_list_;
}

// optional .com.android.server.IntentResolverProto receiver_resolver = 2;
inline bool ActivityManagerServiceDumpBroadcastsProto::has_receiver_resolver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::com::android::server::IntentResolverProto& ActivityManagerServiceDumpBroadcastsProto::receiver_resolver() const {
  const ::com::android::server::IntentResolverProto* p = receiver_resolver_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_resolver)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::IntentResolverProto*>(
      &::com::android::server::_IntentResolverProto_default_instance_);
}
inline ::com::android::server::IntentResolverProto* ActivityManagerServiceDumpBroadcastsProto::release_receiver_resolver() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_resolver)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::IntentResolverProto* temp = receiver_resolver_;
  receiver_resolver_ = nullptr;
  return temp;
}
inline ::com::android::server::IntentResolverProto* ActivityManagerServiceDumpBroadcastsProto::mutable_receiver_resolver() {
  _has_bits_[0] |= 0x00000001u;
  if (receiver_resolver_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::IntentResolverProto>(GetArenaNoVirtual());
    receiver_resolver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_resolver)
  return receiver_resolver_;
}
inline void ActivityManagerServiceDumpBroadcastsProto::set_allocated_receiver_resolver(::com::android::server::IntentResolverProto* receiver_resolver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_resolver_);
  }
  if (receiver_resolver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      receiver_resolver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver_resolver, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receiver_resolver_ = receiver_resolver;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.receiver_resolver)
}

// repeated .com.android.server.am.BroadcastQueueProto broadcast_queue = 3;
inline int ActivityManagerServiceDumpBroadcastsProto::broadcast_queue_size() const {
  return broadcast_queue_.size();
}
inline void ActivityManagerServiceDumpBroadcastsProto::clear_broadcast_queue() {
  broadcast_queue_.Clear();
}
inline ::com::android::server::am::BroadcastQueueProto* ActivityManagerServiceDumpBroadcastsProto::mutable_broadcast_queue(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.broadcast_queue)
  return broadcast_queue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto >*
ActivityManagerServiceDumpBroadcastsProto::mutable_broadcast_queue() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.broadcast_queue)
  return &broadcast_queue_;
}
inline const ::com::android::server::am::BroadcastQueueProto& ActivityManagerServiceDumpBroadcastsProto::broadcast_queue(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.broadcast_queue)
  return broadcast_queue_.Get(index);
}
inline ::com::android::server::am::BroadcastQueueProto* ActivityManagerServiceDumpBroadcastsProto::add_broadcast_queue() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.broadcast_queue)
  return broadcast_queue_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto >&
ActivityManagerServiceDumpBroadcastsProto::broadcast_queue() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.broadcast_queue)
  return broadcast_queue_;
}

// repeated .com.android.server.am.StickyBroadcastProto sticky_broadcasts = 4;
inline int ActivityManagerServiceDumpBroadcastsProto::sticky_broadcasts_size() const {
  return sticky_broadcasts_.size();
}
inline void ActivityManagerServiceDumpBroadcastsProto::clear_sticky_broadcasts() {
  sticky_broadcasts_.Clear();
}
inline ::com::android::server::am::StickyBroadcastProto* ActivityManagerServiceDumpBroadcastsProto::mutable_sticky_broadcasts(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.sticky_broadcasts)
  return sticky_broadcasts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto >*
ActivityManagerServiceDumpBroadcastsProto::mutable_sticky_broadcasts() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.sticky_broadcasts)
  return &sticky_broadcasts_;
}
inline const ::com::android::server::am::StickyBroadcastProto& ActivityManagerServiceDumpBroadcastsProto::sticky_broadcasts(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.sticky_broadcasts)
  return sticky_broadcasts_.Get(index);
}
inline ::com::android::server::am::StickyBroadcastProto* ActivityManagerServiceDumpBroadcastsProto::add_sticky_broadcasts() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.sticky_broadcasts)
  return sticky_broadcasts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto >&
ActivityManagerServiceDumpBroadcastsProto::sticky_broadcasts() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.sticky_broadcasts)
  return sticky_broadcasts_;
}

// optional .com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.MainHandler handler = 5;
inline bool ActivityManagerServiceDumpBroadcastsProto::has_handler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpBroadcastsProto::clear_handler() {
  if (handler_ != nullptr) handler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler& ActivityManagerServiceDumpBroadcastsProto::handler() const {
  const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* p = handler_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.handler)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler*>(
      &::com::android::server::am::_ActivityManagerServiceDumpBroadcastsProto_MainHandler_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* ActivityManagerServiceDumpBroadcastsProto::release_handler() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.handler)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* temp = handler_;
  handler_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* ActivityManagerServiceDumpBroadcastsProto::mutable_handler() {
  _has_bits_[0] |= 0x00000002u;
  if (handler_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler>(GetArenaNoVirtual());
    handler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.handler)
  return handler_;
}
inline void ActivityManagerServiceDumpBroadcastsProto::set_allocated_handler(::com::android::server::am::ActivityManagerServiceDumpBroadcastsProto_MainHandler* handler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete handler_;
  }
  if (handler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      handler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  handler_ = handler;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpBroadcastsProto.handler)
}

// -------------------------------------------------------------------

// ReceiverListProto

// optional .com.android.server.am.ProcessRecordProto app = 1;
inline bool ReceiverListProto::has_app() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiverListProto::clear_app() {
  if (app_ != nullptr) app_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::am::ProcessRecordProto& ReceiverListProto::app() const {
  const ::com::android::server::am::ProcessRecordProto* p = app_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ReceiverListProto.app)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ReceiverListProto::release_app() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ReceiverListProto.app)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::am::ProcessRecordProto* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ReceiverListProto::mutable_app() {
  _has_bits_[0] |= 0x00000002u;
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ReceiverListProto.app)
  return app_;
}
inline void ReceiverListProto::set_allocated_app(::com::android::server::am::ProcessRecordProto* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ReceiverListProto.app)
}

// optional int32 pid = 2;
inline bool ReceiverListProto::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReceiverListProto::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiverListProto::pid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ReceiverListProto.pid)
  return pid_;
}
inline void ReceiverListProto::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ReceiverListProto.pid)
}

// optional int32 uid = 3;
inline bool ReceiverListProto::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReceiverListProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiverListProto::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ReceiverListProto.uid)
  return uid_;
}
inline void ReceiverListProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ReceiverListProto.uid)
}

// optional int32 user = 4;
inline bool ReceiverListProto::has_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReceiverListProto::clear_user() {
  user_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReceiverListProto::user() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ReceiverListProto.user)
  return user_;
}
inline void ReceiverListProto::set_user(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  user_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ReceiverListProto.user)
}

// optional .com.android.server.am.BroadcastRecordProto current = 5;
inline bool ReceiverListProto::has_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceiverListProto::clear_current() {
  if (current_ != nullptr) current_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::am::BroadcastRecordProto& ReceiverListProto::current() const {
  const ::com::android::server::am::BroadcastRecordProto* p = current_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ReceiverListProto.current)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::BroadcastRecordProto*>(
      &::com::android::server::am::_BroadcastRecordProto_default_instance_);
}
inline ::com::android::server::am::BroadcastRecordProto* ReceiverListProto::release_current() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ReceiverListProto.current)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::am::BroadcastRecordProto* temp = current_;
  current_ = nullptr;
  return temp;
}
inline ::com::android::server::am::BroadcastRecordProto* ReceiverListProto::mutable_current() {
  _has_bits_[0] |= 0x00000004u;
  if (current_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::BroadcastRecordProto>(GetArenaNoVirtual());
    current_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ReceiverListProto.current)
  return current_;
}
inline void ReceiverListProto::set_allocated_current(::com::android::server::am::BroadcastRecordProto* current) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_;
  }
  if (current) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  current_ = current;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ReceiverListProto.current)
}

// optional bool linked_to_death = 6;
inline bool ReceiverListProto::has_linked_to_death() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReceiverListProto::clear_linked_to_death() {
  linked_to_death_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ReceiverListProto::linked_to_death() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ReceiverListProto.linked_to_death)
  return linked_to_death_;
}
inline void ReceiverListProto::set_linked_to_death(bool value) {
  _has_bits_[0] |= 0x00000040u;
  linked_to_death_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ReceiverListProto.linked_to_death)
}

// repeated .com.android.server.am.BroadcastFilterProto filters = 7;
inline int ReceiverListProto::filters_size() const {
  return filters_.size();
}
inline void ReceiverListProto::clear_filters() {
  filters_.Clear();
}
inline ::com::android::server::am::BroadcastFilterProto* ReceiverListProto::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ReceiverListProto.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastFilterProto >*
ReceiverListProto::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ReceiverListProto.filters)
  return &filters_;
}
inline const ::com::android::server::am::BroadcastFilterProto& ReceiverListProto::filters(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ReceiverListProto.filters)
  return filters_.Get(index);
}
inline ::com::android::server::am::BroadcastFilterProto* ReceiverListProto::add_filters() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ReceiverListProto.filters)
  return filters_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastFilterProto >&
ReceiverListProto::filters() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ReceiverListProto.filters)
  return filters_;
}

// optional string hex_hash = 8;
inline bool ReceiverListProto::has_hex_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiverListProto::clear_hex_hash() {
  hex_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReceiverListProto::hex_hash() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ReceiverListProto.hex_hash)
  return hex_hash_.GetNoArena();
}
inline void ReceiverListProto::set_hex_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ReceiverListProto.hex_hash)
}
inline void ReceiverListProto::set_hex_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hex_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ReceiverListProto.hex_hash)
}
inline void ReceiverListProto::set_hex_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ReceiverListProto.hex_hash)
}
inline void ReceiverListProto::set_hex_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ReceiverListProto.hex_hash)
}
inline std::string* ReceiverListProto::mutable_hex_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ReceiverListProto.hex_hash)
  return hex_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReceiverListProto::release_hex_hash() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ReceiverListProto.hex_hash)
  if (!has_hex_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hex_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiverListProto::set_allocated_hex_hash(std::string* hex_hash) {
  if (hex_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hex_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hex_hash);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ReceiverListProto.hex_hash)
}

// -------------------------------------------------------------------

// ProcessRecordProto

// optional int32 pid = 1;
inline bool ProcessRecordProto::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessRecordProto::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessRecordProto::pid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessRecordProto.pid)
  return pid_;
}
inline void ProcessRecordProto::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessRecordProto.pid)
}

// optional string process_name = 2;
inline bool ProcessRecordProto::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessRecordProto::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessRecordProto::process_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessRecordProto.process_name)
  return process_name_.GetNoArena();
}
inline void ProcessRecordProto::set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessRecordProto.process_name)
}
inline void ProcessRecordProto::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ProcessRecordProto.process_name)
}
inline void ProcessRecordProto::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ProcessRecordProto.process_name)
}
inline void ProcessRecordProto::set_process_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ProcessRecordProto.process_name)
}
inline std::string* ProcessRecordProto::mutable_process_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessRecordProto.process_name)
  return process_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessRecordProto::release_process_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessRecordProto.process_name)
  if (!has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return process_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessRecordProto::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  process_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessRecordProto.process_name)
}

// optional int32 uid = 3;
inline bool ProcessRecordProto::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessRecordProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessRecordProto::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessRecordProto.uid)
  return uid_;
}
inline void ProcessRecordProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessRecordProto.uid)
}

// optional int32 user_id = 4;
inline bool ProcessRecordProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessRecordProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessRecordProto::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessRecordProto.user_id)
  return user_id_;
}
inline void ProcessRecordProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessRecordProto.user_id)
}

// optional int32 app_id = 5;
inline bool ProcessRecordProto::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessRecordProto::clear_app_id() {
  app_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessRecordProto::app_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessRecordProto.app_id)
  return app_id_;
}
inline void ProcessRecordProto::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  app_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessRecordProto.app_id)
}

// optional int32 isolated_app_id = 6;
inline bool ProcessRecordProto::has_isolated_app_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessRecordProto::clear_isolated_app_id() {
  isolated_app_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessRecordProto::isolated_app_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessRecordProto.isolated_app_id)
  return isolated_app_id_;
}
inline void ProcessRecordProto::set_isolated_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  isolated_app_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessRecordProto.isolated_app_id)
}

// optional bool persistent = 7;
inline bool ProcessRecordProto::has_persistent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProcessRecordProto::clear_persistent() {
  persistent_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ProcessRecordProto::persistent() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessRecordProto.persistent)
  return persistent_;
}
inline void ProcessRecordProto::set_persistent(bool value) {
  _has_bits_[0] |= 0x00000040u;
  persistent_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessRecordProto.persistent)
}

// optional int32 lru_index = 8;
inline bool ProcessRecordProto::has_lru_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProcessRecordProto::clear_lru_index() {
  lru_index_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessRecordProto::lru_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessRecordProto.lru_index)
  return lru_index_;
}
inline void ProcessRecordProto::set_lru_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lru_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessRecordProto.lru_index)
}

// -------------------------------------------------------------------

// BroadcastRecordProto

// optional int32 user_id = 1;
inline bool BroadcastRecordProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadcastRecordProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastRecordProto::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastRecordProto.user_id)
  return user_id_;
}
inline void BroadcastRecordProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastRecordProto.user_id)
}

// optional string intent_action = 2;
inline bool BroadcastRecordProto::has_intent_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadcastRecordProto::clear_intent_action() {
  intent_action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastRecordProto::intent_action() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastRecordProto.intent_action)
  return intent_action_.GetNoArena();
}
inline void BroadcastRecordProto::set_intent_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  intent_action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastRecordProto.intent_action)
}
inline void BroadcastRecordProto::set_intent_action(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  intent_action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.BroadcastRecordProto.intent_action)
}
inline void BroadcastRecordProto::set_intent_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  intent_action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.BroadcastRecordProto.intent_action)
}
inline void BroadcastRecordProto::set_intent_action(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  intent_action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.BroadcastRecordProto.intent_action)
}
inline std::string* BroadcastRecordProto::mutable_intent_action() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastRecordProto.intent_action)
  return intent_action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastRecordProto::release_intent_action() {
  // @@protoc_insertion_point(field_release:com.android.server.am.BroadcastRecordProto.intent_action)
  if (!has_intent_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return intent_action_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastRecordProto::set_allocated_intent_action(std::string* intent_action) {
  if (intent_action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  intent_action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intent_action);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.BroadcastRecordProto.intent_action)
}

// -------------------------------------------------------------------

// BroadcastFilterProto

// optional .android.content.IntentFilterProto intent_filter = 1;
inline bool BroadcastFilterProto::has_intent_filter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::content::IntentFilterProto& BroadcastFilterProto::intent_filter() const {
  const ::android::content::IntentFilterProto* p = intent_filter_;
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastFilterProto.intent_filter)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::IntentFilterProto*>(
      &::android::content::_IntentFilterProto_default_instance_);
}
inline ::android::content::IntentFilterProto* BroadcastFilterProto::release_intent_filter() {
  // @@protoc_insertion_point(field_release:com.android.server.am.BroadcastFilterProto.intent_filter)
  _has_bits_[0] &= ~0x00000004u;
  ::android::content::IntentFilterProto* temp = intent_filter_;
  intent_filter_ = nullptr;
  return temp;
}
inline ::android::content::IntentFilterProto* BroadcastFilterProto::mutable_intent_filter() {
  _has_bits_[0] |= 0x00000004u;
  if (intent_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::IntentFilterProto>(GetArenaNoVirtual());
    intent_filter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastFilterProto.intent_filter)
  return intent_filter_;
}
inline void BroadcastFilterProto::set_allocated_intent_filter(::android::content::IntentFilterProto* intent_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent_filter_);
  }
  if (intent_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  intent_filter_ = intent_filter;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.BroadcastFilterProto.intent_filter)
}

// optional string required_permission = 2;
inline bool BroadcastFilterProto::has_required_permission() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadcastFilterProto::clear_required_permission() {
  required_permission_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastFilterProto::required_permission() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastFilterProto.required_permission)
  return required_permission_.GetNoArena();
}
inline void BroadcastFilterProto::set_required_permission(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  required_permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastFilterProto.required_permission)
}
inline void BroadcastFilterProto::set_required_permission(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  required_permission_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.BroadcastFilterProto.required_permission)
}
inline void BroadcastFilterProto::set_required_permission(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  required_permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.BroadcastFilterProto.required_permission)
}
inline void BroadcastFilterProto::set_required_permission(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  required_permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.BroadcastFilterProto.required_permission)
}
inline std::string* BroadcastFilterProto::mutable_required_permission() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastFilterProto.required_permission)
  return required_permission_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastFilterProto::release_required_permission() {
  // @@protoc_insertion_point(field_release:com.android.server.am.BroadcastFilterProto.required_permission)
  if (!has_required_permission()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return required_permission_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastFilterProto::set_allocated_required_permission(std::string* required_permission) {
  if (required_permission != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  required_permission_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), required_permission);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.BroadcastFilterProto.required_permission)
}

// optional string hex_hash = 3;
inline bool BroadcastFilterProto::has_hex_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadcastFilterProto::clear_hex_hash() {
  hex_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BroadcastFilterProto::hex_hash() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastFilterProto.hex_hash)
  return hex_hash_.GetNoArena();
}
inline void BroadcastFilterProto::set_hex_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastFilterProto.hex_hash)
}
inline void BroadcastFilterProto::set_hex_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hex_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.BroadcastFilterProto.hex_hash)
}
inline void BroadcastFilterProto::set_hex_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.BroadcastFilterProto.hex_hash)
}
inline void BroadcastFilterProto::set_hex_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.BroadcastFilterProto.hex_hash)
}
inline std::string* BroadcastFilterProto::mutable_hex_hash() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastFilterProto.hex_hash)
  return hex_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastFilterProto::release_hex_hash() {
  // @@protoc_insertion_point(field_release:com.android.server.am.BroadcastFilterProto.hex_hash)
  if (!has_hex_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hex_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastFilterProto::set_allocated_hex_hash(std::string* hex_hash) {
  if (hex_hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hex_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hex_hash);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.BroadcastFilterProto.hex_hash)
}

// optional int32 owning_user_id = 4;
inline bool BroadcastFilterProto::has_owning_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BroadcastFilterProto::clear_owning_user_id() {
  owning_user_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BroadcastFilterProto::owning_user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastFilterProto.owning_user_id)
  return owning_user_id_;
}
inline void BroadcastFilterProto::set_owning_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  owning_user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastFilterProto.owning_user_id)
}

// -------------------------------------------------------------------

// BroadcastQueueProto_BroadcastSummary

// optional .android.content.IntentProto intent = 1;
inline bool BroadcastQueueProto_BroadcastSummary::has_intent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::content::IntentProto& BroadcastQueueProto_BroadcastSummary::intent() const {
  const ::android::content::IntentProto* p = intent_;
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.BroadcastSummary.intent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::IntentProto*>(
      &::android::content::_IntentProto_default_instance_);
}
inline ::android::content::IntentProto* BroadcastQueueProto_BroadcastSummary::release_intent() {
  // @@protoc_insertion_point(field_release:com.android.server.am.BroadcastQueueProto.BroadcastSummary.intent)
  _has_bits_[0] &= ~0x00000001u;
  ::android::content::IntentProto* temp = intent_;
  intent_ = nullptr;
  return temp;
}
inline ::android::content::IntentProto* BroadcastQueueProto_BroadcastSummary::mutable_intent() {
  _has_bits_[0] |= 0x00000001u;
  if (intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::IntentProto>(GetArenaNoVirtual());
    intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastQueueProto.BroadcastSummary.intent)
  return intent_;
}
inline void BroadcastQueueProto_BroadcastSummary::set_allocated_intent(::android::content::IntentProto* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent_);
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.BroadcastQueueProto.BroadcastSummary.intent)
}

// optional int64 enqueue_clock_time_ms = 2;
inline bool BroadcastQueueProto_BroadcastSummary::has_enqueue_clock_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadcastQueueProto_BroadcastSummary::clear_enqueue_clock_time_ms() {
  enqueue_clock_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BroadcastQueueProto_BroadcastSummary::enqueue_clock_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.BroadcastSummary.enqueue_clock_time_ms)
  return enqueue_clock_time_ms_;
}
inline void BroadcastQueueProto_BroadcastSummary::set_enqueue_clock_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  enqueue_clock_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastQueueProto.BroadcastSummary.enqueue_clock_time_ms)
}

// optional int64 dispatch_clock_time_ms = 3;
inline bool BroadcastQueueProto_BroadcastSummary::has_dispatch_clock_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BroadcastQueueProto_BroadcastSummary::clear_dispatch_clock_time_ms() {
  dispatch_clock_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BroadcastQueueProto_BroadcastSummary::dispatch_clock_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.BroadcastSummary.dispatch_clock_time_ms)
  return dispatch_clock_time_ms_;
}
inline void BroadcastQueueProto_BroadcastSummary::set_dispatch_clock_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  dispatch_clock_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastQueueProto.BroadcastSummary.dispatch_clock_time_ms)
}

// optional int64 finish_clock_time_ms = 4;
inline bool BroadcastQueueProto_BroadcastSummary::has_finish_clock_time_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BroadcastQueueProto_BroadcastSummary::clear_finish_clock_time_ms() {
  finish_clock_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BroadcastQueueProto_BroadcastSummary::finish_clock_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.BroadcastSummary.finish_clock_time_ms)
  return finish_clock_time_ms_;
}
inline void BroadcastQueueProto_BroadcastSummary::set_finish_clock_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  finish_clock_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastQueueProto.BroadcastSummary.finish_clock_time_ms)
}

// -------------------------------------------------------------------

// BroadcastQueueProto

// optional string queue_name = 1;
inline bool BroadcastQueueProto::has_queue_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadcastQueueProto::clear_queue_name() {
  queue_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BroadcastQueueProto::queue_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.queue_name)
  return queue_name_.GetNoArena();
}
inline void BroadcastQueueProto::set_queue_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.BroadcastQueueProto.queue_name)
}
inline void BroadcastQueueProto::set_queue_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  queue_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.BroadcastQueueProto.queue_name)
}
inline void BroadcastQueueProto::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.BroadcastQueueProto.queue_name)
}
inline void BroadcastQueueProto::set_queue_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  queue_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.BroadcastQueueProto.queue_name)
}
inline std::string* BroadcastQueueProto::mutable_queue_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastQueueProto.queue_name)
  return queue_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BroadcastQueueProto::release_queue_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.BroadcastQueueProto.queue_name)
  if (!has_queue_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return queue_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BroadcastQueueProto::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  queue_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.BroadcastQueueProto.queue_name)
}

// repeated .com.android.server.am.BroadcastRecordProto parallel_broadcasts = 2;
inline int BroadcastQueueProto::parallel_broadcasts_size() const {
  return parallel_broadcasts_.size();
}
inline void BroadcastQueueProto::clear_parallel_broadcasts() {
  parallel_broadcasts_.Clear();
}
inline ::com::android::server::am::BroadcastRecordProto* BroadcastQueueProto::mutable_parallel_broadcasts(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastQueueProto.parallel_broadcasts)
  return parallel_broadcasts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >*
BroadcastQueueProto::mutable_parallel_broadcasts() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.BroadcastQueueProto.parallel_broadcasts)
  return &parallel_broadcasts_;
}
inline const ::com::android::server::am::BroadcastRecordProto& BroadcastQueueProto::parallel_broadcasts(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.parallel_broadcasts)
  return parallel_broadcasts_.Get(index);
}
inline ::com::android::server::am::BroadcastRecordProto* BroadcastQueueProto::add_parallel_broadcasts() {
  // @@protoc_insertion_point(field_add:com.android.server.am.BroadcastQueueProto.parallel_broadcasts)
  return parallel_broadcasts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >&
BroadcastQueueProto::parallel_broadcasts() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.BroadcastQueueProto.parallel_broadcasts)
  return parallel_broadcasts_;
}

// repeated .com.android.server.am.BroadcastRecordProto ordered_broadcasts = 3;
inline int BroadcastQueueProto::ordered_broadcasts_size() const {
  return ordered_broadcasts_.size();
}
inline void BroadcastQueueProto::clear_ordered_broadcasts() {
  ordered_broadcasts_.Clear();
}
inline ::com::android::server::am::BroadcastRecordProto* BroadcastQueueProto::mutable_ordered_broadcasts(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastQueueProto.ordered_broadcasts)
  return ordered_broadcasts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >*
BroadcastQueueProto::mutable_ordered_broadcasts() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.BroadcastQueueProto.ordered_broadcasts)
  return &ordered_broadcasts_;
}
inline const ::com::android::server::am::BroadcastRecordProto& BroadcastQueueProto::ordered_broadcasts(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.ordered_broadcasts)
  return ordered_broadcasts_.Get(index);
}
inline ::com::android::server::am::BroadcastRecordProto* BroadcastQueueProto::add_ordered_broadcasts() {
  // @@protoc_insertion_point(field_add:com.android.server.am.BroadcastQueueProto.ordered_broadcasts)
  return ordered_broadcasts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >&
BroadcastQueueProto::ordered_broadcasts() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.BroadcastQueueProto.ordered_broadcasts)
  return ordered_broadcasts_;
}

// optional .com.android.server.am.BroadcastRecordProto pending_broadcast = 4;
inline bool BroadcastQueueProto::has_pending_broadcast() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadcastQueueProto::clear_pending_broadcast() {
  if (pending_broadcast_ != nullptr) pending_broadcast_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::am::BroadcastRecordProto& BroadcastQueueProto::pending_broadcast() const {
  const ::com::android::server::am::BroadcastRecordProto* p = pending_broadcast_;
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.pending_broadcast)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::BroadcastRecordProto*>(
      &::com::android::server::am::_BroadcastRecordProto_default_instance_);
}
inline ::com::android::server::am::BroadcastRecordProto* BroadcastQueueProto::release_pending_broadcast() {
  // @@protoc_insertion_point(field_release:com.android.server.am.BroadcastQueueProto.pending_broadcast)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::am::BroadcastRecordProto* temp = pending_broadcast_;
  pending_broadcast_ = nullptr;
  return temp;
}
inline ::com::android::server::am::BroadcastRecordProto* BroadcastQueueProto::mutable_pending_broadcast() {
  _has_bits_[0] |= 0x00000002u;
  if (pending_broadcast_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::BroadcastRecordProto>(GetArenaNoVirtual());
    pending_broadcast_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastQueueProto.pending_broadcast)
  return pending_broadcast_;
}
inline void BroadcastQueueProto::set_allocated_pending_broadcast(::com::android::server::am::BroadcastRecordProto* pending_broadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pending_broadcast_;
  }
  if (pending_broadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pending_broadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_broadcast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pending_broadcast_ = pending_broadcast;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.BroadcastQueueProto.pending_broadcast)
}

// repeated .com.android.server.am.BroadcastRecordProto historical_broadcasts = 5;
inline int BroadcastQueueProto::historical_broadcasts_size() const {
  return historical_broadcasts_.size();
}
inline void BroadcastQueueProto::clear_historical_broadcasts() {
  historical_broadcasts_.Clear();
}
inline ::com::android::server::am::BroadcastRecordProto* BroadcastQueueProto::mutable_historical_broadcasts(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastQueueProto.historical_broadcasts)
  return historical_broadcasts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >*
BroadcastQueueProto::mutable_historical_broadcasts() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.BroadcastQueueProto.historical_broadcasts)
  return &historical_broadcasts_;
}
inline const ::com::android::server::am::BroadcastRecordProto& BroadcastQueueProto::historical_broadcasts(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.historical_broadcasts)
  return historical_broadcasts_.Get(index);
}
inline ::com::android::server::am::BroadcastRecordProto* BroadcastQueueProto::add_historical_broadcasts() {
  // @@protoc_insertion_point(field_add:com.android.server.am.BroadcastQueueProto.historical_broadcasts)
  return historical_broadcasts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastRecordProto >&
BroadcastQueueProto::historical_broadcasts() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.BroadcastQueueProto.historical_broadcasts)
  return historical_broadcasts_;
}

// repeated .com.android.server.am.BroadcastQueueProto.BroadcastSummary historical_broadcasts_summary = 6;
inline int BroadcastQueueProto::historical_broadcasts_summary_size() const {
  return historical_broadcasts_summary_.size();
}
inline void BroadcastQueueProto::clear_historical_broadcasts_summary() {
  historical_broadcasts_summary_.Clear();
}
inline ::com::android::server::am::BroadcastQueueProto_BroadcastSummary* BroadcastQueueProto::mutable_historical_broadcasts_summary(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.BroadcastQueueProto.historical_broadcasts_summary)
  return historical_broadcasts_summary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto_BroadcastSummary >*
BroadcastQueueProto::mutable_historical_broadcasts_summary() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.BroadcastQueueProto.historical_broadcasts_summary)
  return &historical_broadcasts_summary_;
}
inline const ::com::android::server::am::BroadcastQueueProto_BroadcastSummary& BroadcastQueueProto::historical_broadcasts_summary(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.BroadcastQueueProto.historical_broadcasts_summary)
  return historical_broadcasts_summary_.Get(index);
}
inline ::com::android::server::am::BroadcastQueueProto_BroadcastSummary* BroadcastQueueProto::add_historical_broadcasts_summary() {
  // @@protoc_insertion_point(field_add:com.android.server.am.BroadcastQueueProto.historical_broadcasts_summary)
  return historical_broadcasts_summary_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::BroadcastQueueProto_BroadcastSummary >&
BroadcastQueueProto::historical_broadcasts_summary() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.BroadcastQueueProto.historical_broadcasts_summary)
  return historical_broadcasts_summary_;
}

// -------------------------------------------------------------------

// MemInfoDumpProto_ProcessMemory_MemoryInfo

// optional string name = 1;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemInfoDumpProto_ProcessMemory_MemoryInfo::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name)
  return name_.GetNoArena();
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name)
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name)
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name)
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name)
}
inline std::string* MemInfoDumpProto_ProcessMemory_MemoryInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemInfoDumpProto_ProcessMemory_MemoryInfo::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.name)
}

// optional int32 total_pss_kb = 2;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_total_pss_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_total_pss_kb() {
  total_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::total_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.total_pss_kb)
  return total_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_total_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  total_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.total_pss_kb)
}

// optional int32 clean_pss_kb = 3;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_clean_pss_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_clean_pss_kb() {
  clean_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::clean_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.clean_pss_kb)
  return clean_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_clean_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  clean_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.clean_pss_kb)
}

// optional int32 shared_dirty_kb = 4;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_shared_dirty_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_shared_dirty_kb() {
  shared_dirty_kb_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::shared_dirty_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.shared_dirty_kb)
  return shared_dirty_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_shared_dirty_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  shared_dirty_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.shared_dirty_kb)
}

// optional int32 private_dirty_kb = 5;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_private_dirty_kb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_private_dirty_kb() {
  private_dirty_kb_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::private_dirty_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.private_dirty_kb)
  return private_dirty_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_private_dirty_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  private_dirty_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.private_dirty_kb)
}

// optional int32 shared_clean_kb = 6;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_shared_clean_kb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_shared_clean_kb() {
  shared_clean_kb_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::shared_clean_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.shared_clean_kb)
  return shared_clean_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_shared_clean_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  shared_clean_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.shared_clean_kb)
}

// optional int32 private_clean_kb = 7;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_private_clean_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_private_clean_kb() {
  private_clean_kb_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::private_clean_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.private_clean_kb)
  return private_clean_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_private_clean_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  private_clean_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.private_clean_kb)
}

// optional int32 dirty_swap_kb = 8;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_dirty_swap_kb() const {
  return dirty_swap_case() == kDirtySwapKb;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_has_dirty_swap_kb() {
  _oneof_case_[0] = kDirtySwapKb;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_dirty_swap_kb() {
  if (has_dirty_swap_kb()) {
    dirty_swap_.dirty_swap_kb_ = 0;
    clear_has_dirty_swap();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::dirty_swap_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.dirty_swap_kb)
  if (has_dirty_swap_kb()) {
    return dirty_swap_.dirty_swap_kb_;
  }
  return 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_dirty_swap_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!has_dirty_swap_kb()) {
    clear_dirty_swap();
    set_has_dirty_swap_kb();
  }
  dirty_swap_.dirty_swap_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.dirty_swap_kb)
}

// optional int32 dirty_swap_pss_kb = 9;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_dirty_swap_pss_kb() const {
  return dirty_swap_case() == kDirtySwapPssKb;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_has_dirty_swap_pss_kb() {
  _oneof_case_[0] = kDirtySwapPssKb;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_dirty_swap_pss_kb() {
  if (has_dirty_swap_pss_kb()) {
    dirty_swap_.dirty_swap_pss_kb_ = 0;
    clear_has_dirty_swap();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::dirty_swap_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.dirty_swap_pss_kb)
  if (has_dirty_swap_pss_kb()) {
    return dirty_swap_.dirty_swap_pss_kb_;
  }
  return 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_dirty_swap_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!has_dirty_swap_pss_kb()) {
    clear_dirty_swap();
    set_has_dirty_swap_pss_kb();
  }
  dirty_swap_.dirty_swap_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.dirty_swap_pss_kb)
}

// optional int32 total_rss_kb = 10;
inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_total_rss_kb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_total_rss_kb() {
  total_rss_kb_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_MemoryInfo::total_rss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.total_rss_kb)
  return total_rss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::set_total_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  total_rss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo.total_rss_kb)
}

inline bool MemInfoDumpProto_ProcessMemory_MemoryInfo::has_dirty_swap() const {
  return dirty_swap_case() != DIRTY_SWAP_NOT_SET;
}
inline void MemInfoDumpProto_ProcessMemory_MemoryInfo::clear_has_dirty_swap() {
  _oneof_case_[0] = DIRTY_SWAP_NOT_SET;
}
inline MemInfoDumpProto_ProcessMemory_MemoryInfo::DirtySwapCase MemInfoDumpProto_ProcessMemory_MemoryInfo::dirty_swap_case() const {
  return MemInfoDumpProto_ProcessMemory_MemoryInfo::DirtySwapCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MemInfoDumpProto_ProcessMemory_HeapInfo

// optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo mem_info = 1;
inline bool MemInfoDumpProto_ProcessMemory_HeapInfo::has_mem_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_HeapInfo::clear_mem_info() {
  if (mem_info_ != nullptr) mem_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& MemInfoDumpProto_ProcessMemory_HeapInfo::mem_info() const {
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* p = mem_info_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.mem_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo*>(
      &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* MemInfoDumpProto_ProcessMemory_HeapInfo::release_mem_info() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.mem_info)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* temp = mem_info_;
  mem_info_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* MemInfoDumpProto_ProcessMemory_HeapInfo::mutable_mem_info() {
  _has_bits_[0] |= 0x00000001u;
  if (mem_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo>(GetArenaNoVirtual());
    mem_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.mem_info)
  return mem_info_;
}
inline void MemInfoDumpProto_ProcessMemory_HeapInfo::set_allocated_mem_info(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* mem_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mem_info_;
  }
  if (mem_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mem_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mem_info_ = mem_info;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.mem_info)
}

// optional int32 heap_size_kb = 2;
inline bool MemInfoDumpProto_ProcessMemory_HeapInfo::has_heap_size_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_HeapInfo::clear_heap_size_kb() {
  heap_size_kb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_HeapInfo::heap_size_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.heap_size_kb)
  return heap_size_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_HeapInfo::set_heap_size_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  heap_size_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.heap_size_kb)
}

// optional int32 heap_alloc_kb = 3;
inline bool MemInfoDumpProto_ProcessMemory_HeapInfo::has_heap_alloc_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_HeapInfo::clear_heap_alloc_kb() {
  heap_alloc_kb_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_HeapInfo::heap_alloc_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.heap_alloc_kb)
  return heap_alloc_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_HeapInfo::set_heap_alloc_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  heap_alloc_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.heap_alloc_kb)
}

// optional int32 heap_free_kb = 4;
inline bool MemInfoDumpProto_ProcessMemory_HeapInfo::has_heap_free_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_HeapInfo::clear_heap_free_kb() {
  heap_free_kb_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_HeapInfo::heap_free_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.heap_free_kb)
  return heap_free_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_HeapInfo::set_heap_free_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  heap_free_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo.heap_free_kb)
}

// -------------------------------------------------------------------

// MemInfoDumpProto_ProcessMemory_AppSummary

// optional int32 java_heap_pss_kb = 1;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_java_heap_pss_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_java_heap_pss_kb() {
  java_heap_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::java_heap_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.java_heap_pss_kb)
  return java_heap_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_java_heap_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  java_heap_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.java_heap_pss_kb)
}

// optional int32 native_heap_pss_kb = 2;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_native_heap_pss_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_native_heap_pss_kb() {
  native_heap_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::native_heap_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.native_heap_pss_kb)
  return native_heap_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_native_heap_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  native_heap_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.native_heap_pss_kb)
}

// optional int32 code_pss_kb = 3;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_code_pss_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_code_pss_kb() {
  code_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::code_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.code_pss_kb)
  return code_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_code_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  code_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.code_pss_kb)
}

// optional int32 stack_pss_kb = 4;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_stack_pss_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_stack_pss_kb() {
  stack_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::stack_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.stack_pss_kb)
  return stack_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_stack_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  stack_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.stack_pss_kb)
}

// optional int32 graphics_pss_kb = 5;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_graphics_pss_kb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_graphics_pss_kb() {
  graphics_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::graphics_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.graphics_pss_kb)
  return graphics_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_graphics_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  graphics_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.graphics_pss_kb)
}

// optional int32 private_other_pss_kb = 6;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_private_other_pss_kb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_private_other_pss_kb() {
  private_other_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::private_other_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.private_other_pss_kb)
  return private_other_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_private_other_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  private_other_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.private_other_pss_kb)
}

// optional int32 system_pss_kb = 7;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_system_pss_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_system_pss_kb() {
  system_pss_kb_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::system_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.system_pss_kb)
  return system_pss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_system_pss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  system_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.system_pss_kb)
}

// optional int32 total_swap_pss = 8;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_total_swap_pss() const {
  return total_swap_case() == kTotalSwapPss;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_has_total_swap_pss() {
  _oneof_case_[0] = kTotalSwapPss;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_total_swap_pss() {
  if (has_total_swap_pss()) {
    total_swap_.total_swap_pss_ = 0;
    clear_has_total_swap();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::total_swap_pss() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.total_swap_pss)
  if (has_total_swap_pss()) {
    return total_swap_.total_swap_pss_;
  }
  return 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_total_swap_pss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!has_total_swap_pss()) {
    clear_total_swap();
    set_has_total_swap_pss();
  }
  total_swap_.total_swap_pss_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.total_swap_pss)
}

// optional int32 total_swap_kb = 9;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_total_swap_kb() const {
  return total_swap_case() == kTotalSwapKb;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_has_total_swap_kb() {
  _oneof_case_[0] = kTotalSwapKb;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_total_swap_kb() {
  if (has_total_swap_kb()) {
    total_swap_.total_swap_kb_ = 0;
    clear_has_total_swap();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::total_swap_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.total_swap_kb)
  if (has_total_swap_kb()) {
    return total_swap_.total_swap_kb_;
  }
  return 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_total_swap_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!has_total_swap_kb()) {
    clear_total_swap();
    set_has_total_swap_kb();
  }
  total_swap_.total_swap_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.total_swap_kb)
}

// optional int32 java_heap_rss_kb = 10;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_java_heap_rss_kb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_java_heap_rss_kb() {
  java_heap_rss_kb_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::java_heap_rss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.java_heap_rss_kb)
  return java_heap_rss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_java_heap_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  java_heap_rss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.java_heap_rss_kb)
}

// optional int32 native_heap_rss_kb = 11;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_native_heap_rss_kb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_native_heap_rss_kb() {
  native_heap_rss_kb_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::native_heap_rss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.native_heap_rss_kb)
  return native_heap_rss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_native_heap_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  native_heap_rss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.native_heap_rss_kb)
}

// optional int32 code_rss_kb = 12;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_code_rss_kb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_code_rss_kb() {
  code_rss_kb_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::code_rss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.code_rss_kb)
  return code_rss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_code_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  code_rss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.code_rss_kb)
}

// optional int32 stack_rss_kb = 13;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_stack_rss_kb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_stack_rss_kb() {
  stack_rss_kb_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::stack_rss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.stack_rss_kb)
  return stack_rss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_stack_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  stack_rss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.stack_rss_kb)
}

// optional int32 graphics_rss_kb = 14;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_graphics_rss_kb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_graphics_rss_kb() {
  graphics_rss_kb_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::graphics_rss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.graphics_rss_kb)
  return graphics_rss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_graphics_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  graphics_rss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.graphics_rss_kb)
}

// optional int32 unknown_rss_kb = 15;
inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_unknown_rss_kb() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_unknown_rss_kb() {
  unknown_rss_kb_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory_AppSummary::unknown_rss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.unknown_rss_kb)
  return unknown_rss_kb_;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::set_unknown_rss_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  unknown_rss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary.unknown_rss_kb)
}

inline bool MemInfoDumpProto_ProcessMemory_AppSummary::has_total_swap() const {
  return total_swap_case() != TOTAL_SWAP_NOT_SET;
}
inline void MemInfoDumpProto_ProcessMemory_AppSummary::clear_has_total_swap() {
  _oneof_case_[0] = TOTAL_SWAP_NOT_SET;
}
inline MemInfoDumpProto_ProcessMemory_AppSummary::TotalSwapCase MemInfoDumpProto_ProcessMemory_AppSummary::total_swap_case() const {
  return MemInfoDumpProto_ProcessMemory_AppSummary::TotalSwapCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MemInfoDumpProto_ProcessMemory

// optional int32 pid = 1;
inline bool MemInfoDumpProto_ProcessMemory::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_ProcessMemory::pid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.pid)
  return pid_;
}
inline void MemInfoDumpProto_ProcessMemory::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.pid)
}

// optional string process_name = 2;
inline bool MemInfoDumpProto_ProcessMemory::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemInfoDumpProto_ProcessMemory::process_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name)
  return process_name_.GetNoArena();
}
inline void MemInfoDumpProto_ProcessMemory::set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name)
}
inline void MemInfoDumpProto_ProcessMemory::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name)
}
inline void MemInfoDumpProto_ProcessMemory::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name)
}
inline void MemInfoDumpProto_ProcessMemory::set_process_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name)
}
inline std::string* MemInfoDumpProto_ProcessMemory::mutable_process_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name)
  return process_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemInfoDumpProto_ProcessMemory::release_process_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name)
  if (!has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return process_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemInfoDumpProto_ProcessMemory::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  process_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.ProcessMemory.process_name)
}

// optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo native_heap = 3;
inline bool MemInfoDumpProto_ProcessMemory::has_native_heap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory::clear_native_heap() {
  if (native_heap_ != nullptr) native_heap_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& MemInfoDumpProto_ProcessMemory::native_heap() const {
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* p = native_heap_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.native_heap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo*>(
      &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* MemInfoDumpProto_ProcessMemory::release_native_heap() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.ProcessMemory.native_heap)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* temp = native_heap_;
  native_heap_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* MemInfoDumpProto_ProcessMemory::mutable_native_heap() {
  _has_bits_[0] |= 0x00000002u;
  if (native_heap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo>(GetArenaNoVirtual());
    native_heap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.native_heap)
  return native_heap_;
}
inline void MemInfoDumpProto_ProcessMemory::set_allocated_native_heap(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* native_heap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete native_heap_;
  }
  if (native_heap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      native_heap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native_heap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  native_heap_ = native_heap;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.ProcessMemory.native_heap)
}

// optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo dalvik_heap = 4;
inline bool MemInfoDumpProto_ProcessMemory::has_dalvik_heap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory::clear_dalvik_heap() {
  if (dalvik_heap_ != nullptr) dalvik_heap_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& MemInfoDumpProto_ProcessMemory::dalvik_heap() const {
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* p = dalvik_heap_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_heap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo*>(
      &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* MemInfoDumpProto_ProcessMemory::release_dalvik_heap() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_heap)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* temp = dalvik_heap_;
  dalvik_heap_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* MemInfoDumpProto_ProcessMemory::mutable_dalvik_heap() {
  _has_bits_[0] |= 0x00000004u;
  if (dalvik_heap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo>(GetArenaNoVirtual());
    dalvik_heap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_heap)
  return dalvik_heap_;
}
inline void MemInfoDumpProto_ProcessMemory::set_allocated_dalvik_heap(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* dalvik_heap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dalvik_heap_;
  }
  if (dalvik_heap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dalvik_heap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dalvik_heap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dalvik_heap_ = dalvik_heap;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_heap)
}

// repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo other_heaps = 5;
inline int MemInfoDumpProto_ProcessMemory::other_heaps_size() const {
  return other_heaps_.size();
}
inline void MemInfoDumpProto_ProcessMemory::clear_other_heaps() {
  other_heaps_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* MemInfoDumpProto_ProcessMemory::mutable_other_heaps(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.other_heaps)
  return other_heaps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >*
MemInfoDumpProto_ProcessMemory::mutable_other_heaps() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.ProcessMemory.other_heaps)
  return &other_heaps_;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& MemInfoDumpProto_ProcessMemory::other_heaps(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.other_heaps)
  return other_heaps_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* MemInfoDumpProto_ProcessMemory::add_other_heaps() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.ProcessMemory.other_heaps)
  return other_heaps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >&
MemInfoDumpProto_ProcessMemory::other_heaps() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.ProcessMemory.other_heaps)
  return other_heaps_;
}

// optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo unknown_heap = 6;
inline bool MemInfoDumpProto_ProcessMemory::has_unknown_heap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory::clear_unknown_heap() {
  if (unknown_heap_ != nullptr) unknown_heap_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& MemInfoDumpProto_ProcessMemory::unknown_heap() const {
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* p = unknown_heap_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.unknown_heap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo*>(
      &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_MemoryInfo_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* MemInfoDumpProto_ProcessMemory::release_unknown_heap() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.ProcessMemory.unknown_heap)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* temp = unknown_heap_;
  unknown_heap_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* MemInfoDumpProto_ProcessMemory::mutable_unknown_heap() {
  _has_bits_[0] |= 0x00000008u;
  if (unknown_heap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo>(GetArenaNoVirtual());
    unknown_heap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.unknown_heap)
  return unknown_heap_;
}
inline void MemInfoDumpProto_ProcessMemory::set_allocated_unknown_heap(::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* unknown_heap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unknown_heap_;
  }
  if (unknown_heap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unknown_heap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unknown_heap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  unknown_heap_ = unknown_heap;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.ProcessMemory.unknown_heap)
}

// optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.HeapInfo total_heap = 7;
inline bool MemInfoDumpProto_ProcessMemory::has_total_heap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory::clear_total_heap() {
  if (total_heap_ != nullptr) total_heap_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo& MemInfoDumpProto_ProcessMemory::total_heap() const {
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* p = total_heap_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.total_heap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo*>(
      &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_HeapInfo_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* MemInfoDumpProto_ProcessMemory::release_total_heap() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.ProcessMemory.total_heap)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* temp = total_heap_;
  total_heap_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* MemInfoDumpProto_ProcessMemory::mutable_total_heap() {
  _has_bits_[0] |= 0x00000010u;
  if (total_heap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo>(GetArenaNoVirtual());
    total_heap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.total_heap)
  return total_heap_;
}
inline void MemInfoDumpProto_ProcessMemory::set_allocated_total_heap(::com::android::server::am::MemInfoDumpProto_ProcessMemory_HeapInfo* total_heap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_heap_;
  }
  if (total_heap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total_heap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_heap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  total_heap_ = total_heap;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.ProcessMemory.total_heap)
}

// repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory.MemoryInfo dalvik_details = 8;
inline int MemInfoDumpProto_ProcessMemory::dalvik_details_size() const {
  return dalvik_details_.size();
}
inline void MemInfoDumpProto_ProcessMemory::clear_dalvik_details() {
  dalvik_details_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* MemInfoDumpProto_ProcessMemory::mutable_dalvik_details(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_details)
  return dalvik_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >*
MemInfoDumpProto_ProcessMemory::mutable_dalvik_details() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_details)
  return &dalvik_details_;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo& MemInfoDumpProto_ProcessMemory::dalvik_details(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_details)
  return dalvik_details_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo* MemInfoDumpProto_ProcessMemory::add_dalvik_details() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_details)
  return dalvik_details_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory_MemoryInfo >&
MemInfoDumpProto_ProcessMemory::dalvik_details() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.ProcessMemory.dalvik_details)
  return dalvik_details_;
}

// optional .com.android.server.am.MemInfoDumpProto.ProcessMemory.AppSummary app_summary = 9;
inline bool MemInfoDumpProto_ProcessMemory::has_app_summary() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemInfoDumpProto_ProcessMemory::clear_app_summary() {
  if (app_summary_ != nullptr) app_summary_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary& MemInfoDumpProto_ProcessMemory::app_summary() const {
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* p = app_summary_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ProcessMemory.app_summary)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary*>(
      &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_AppSummary_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* MemInfoDumpProto_ProcessMemory::release_app_summary() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.ProcessMemory.app_summary)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* temp = app_summary_;
  app_summary_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* MemInfoDumpProto_ProcessMemory::mutable_app_summary() {
  _has_bits_[0] |= 0x00000020u;
  if (app_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary>(GetArenaNoVirtual());
    app_summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.ProcessMemory.app_summary)
  return app_summary_;
}
inline void MemInfoDumpProto_ProcessMemory::set_allocated_app_summary(::com::android::server::am::MemInfoDumpProto_ProcessMemory_AppSummary* app_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_summary_;
  }
  if (app_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  app_summary_ = app_summary;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.ProcessMemory.app_summary)
}

// -------------------------------------------------------------------

// MemInfoDumpProto_AppData_ObjectStats

// optional int32 view_instance_count = 1;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_view_instance_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_view_instance_count() {
  view_instance_count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::view_instance_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.view_instance_count)
  return view_instance_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_view_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  view_instance_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.view_instance_count)
}

// optional int32 view_root_instance_count = 2;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_view_root_instance_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_view_root_instance_count() {
  view_root_instance_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::view_root_instance_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.view_root_instance_count)
  return view_root_instance_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_view_root_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  view_root_instance_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.view_root_instance_count)
}

// optional int32 app_context_instance_count = 3;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_app_context_instance_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_app_context_instance_count() {
  app_context_instance_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::app_context_instance_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.app_context_instance_count)
  return app_context_instance_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_app_context_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  app_context_instance_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.app_context_instance_count)
}

// optional int32 activity_instance_count = 4;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_activity_instance_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_activity_instance_count() {
  activity_instance_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::activity_instance_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.activity_instance_count)
  return activity_instance_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_activity_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  activity_instance_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.activity_instance_count)
}

// optional int32 global_asset_count = 5;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_global_asset_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_global_asset_count() {
  global_asset_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::global_asset_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.global_asset_count)
  return global_asset_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_global_asset_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  global_asset_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.global_asset_count)
}

// optional int32 global_asset_manager_count = 6;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_global_asset_manager_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_global_asset_manager_count() {
  global_asset_manager_count_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::global_asset_manager_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.global_asset_manager_count)
  return global_asset_manager_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_global_asset_manager_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  global_asset_manager_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.global_asset_manager_count)
}

// optional int32 local_binder_object_count = 7;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_local_binder_object_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_local_binder_object_count() {
  local_binder_object_count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::local_binder_object_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.local_binder_object_count)
  return local_binder_object_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_local_binder_object_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  local_binder_object_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.local_binder_object_count)
}

// optional int32 proxy_binder_object_count = 8;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_proxy_binder_object_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_proxy_binder_object_count() {
  proxy_binder_object_count_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::proxy_binder_object_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.proxy_binder_object_count)
  return proxy_binder_object_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_proxy_binder_object_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  proxy_binder_object_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.proxy_binder_object_count)
}

// optional int64 parcel_memory_kb = 9;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_parcel_memory_kb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_parcel_memory_kb() {
  parcel_memory_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto_AppData_ObjectStats::parcel_memory_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.parcel_memory_kb)
  return parcel_memory_kb_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_parcel_memory_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  parcel_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.parcel_memory_kb)
}

// optional int32 parcel_count = 10;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_parcel_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_parcel_count() {
  parcel_count_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::parcel_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.parcel_count)
  return parcel_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_parcel_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  parcel_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.parcel_count)
}

// optional int32 binder_object_death_count = 11;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_binder_object_death_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_binder_object_death_count() {
  binder_object_death_count_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::binder_object_death_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.binder_object_death_count)
  return binder_object_death_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_binder_object_death_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  binder_object_death_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.binder_object_death_count)
}

// optional int32 open_ssl_socket_count = 12;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_open_ssl_socket_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_open_ssl_socket_count() {
  open_ssl_socket_count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::open_ssl_socket_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.open_ssl_socket_count)
  return open_ssl_socket_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_open_ssl_socket_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  open_ssl_socket_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.open_ssl_socket_count)
}

// optional int32 webview_instance_count = 13;
inline bool MemInfoDumpProto_AppData_ObjectStats::has_webview_instance_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MemInfoDumpProto_AppData_ObjectStats::clear_webview_instance_count() {
  webview_instance_count_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_ObjectStats::webview_instance_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.webview_instance_count)
  return webview_instance_count_;
}
inline void MemInfoDumpProto_AppData_ObjectStats::set_webview_instance_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  webview_instance_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.ObjectStats.webview_instance_count)
}

// -------------------------------------------------------------------

// MemInfoDumpProto_AppData_SqlStats_Database

// optional string name = 1;
inline bool MemInfoDumpProto_AppData_SqlStats_Database::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemInfoDumpProto_AppData_SqlStats_Database::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name)
  return name_.GetNoArena();
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name)
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name)
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name)
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name)
}
inline std::string* MemInfoDumpProto_AppData_SqlStats_Database::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemInfoDumpProto_AppData_SqlStats_Database::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.name)
}

// optional int32 page_size = 2;
inline bool MemInfoDumpProto_AppData_SqlStats_Database::has_page_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::clear_page_size() {
  page_size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_SqlStats_Database::page_size() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.page_size)
  return page_size_;
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  page_size_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.page_size)
}

// optional int32 db_size = 3;
inline bool MemInfoDumpProto_AppData_SqlStats_Database::has_db_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::clear_db_size() {
  db_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_SqlStats_Database::db_size() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.db_size)
  return db_size_;
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_db_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  db_size_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.db_size)
}

// optional int32 lookaside_b = 4;
inline bool MemInfoDumpProto_AppData_SqlStats_Database::has_lookaside_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::clear_lookaside_b() {
  lookaside_b_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_SqlStats_Database::lookaside_b() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.lookaside_b)
  return lookaside_b_;
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_lookaside_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  lookaside_b_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.lookaside_b)
}

// optional string cache = 5;
inline bool MemInfoDumpProto_AppData_SqlStats_Database::has_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::clear_cache() {
  cache_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MemInfoDumpProto_AppData_SqlStats_Database::cache() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache)
  return cache_.GetNoArena();
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_cache(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache)
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_cache(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache)
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_cache(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cache_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache)
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_cache(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cache_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache)
}
inline std::string* MemInfoDumpProto_AppData_SqlStats_Database::mutable_cache() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache)
  return cache_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemInfoDumpProto_AppData_SqlStats_Database::release_cache() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache)
  if (!has_cache()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cache_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemInfoDumpProto_AppData_SqlStats_Database::set_allocated_cache(std::string* cache) {
  if (cache != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cache_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cache);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database.cache)
}

// -------------------------------------------------------------------

// MemInfoDumpProto_AppData_SqlStats

// optional int32 memory_used_kb = 1;
inline bool MemInfoDumpProto_AppData_SqlStats::has_memory_used_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_AppData_SqlStats::clear_memory_used_kb() {
  memory_used_kb_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_SqlStats::memory_used_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.memory_used_kb)
  return memory_used_kb_;
}
inline void MemInfoDumpProto_AppData_SqlStats::set_memory_used_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  memory_used_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.memory_used_kb)
}

// optional int32 pagecache_overflow_kb = 2;
inline bool MemInfoDumpProto_AppData_SqlStats::has_pagecache_overflow_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_AppData_SqlStats::clear_pagecache_overflow_kb() {
  pagecache_overflow_kb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_SqlStats::pagecache_overflow_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.pagecache_overflow_kb)
  return pagecache_overflow_kb_;
}
inline void MemInfoDumpProto_AppData_SqlStats::set_pagecache_overflow_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pagecache_overflow_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.pagecache_overflow_kb)
}

// optional int32 malloc_size_kb = 3;
inline bool MemInfoDumpProto_AppData_SqlStats::has_malloc_size_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_AppData_SqlStats::clear_malloc_size_kb() {
  malloc_size_kb_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_AppData_SqlStats::malloc_size_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.malloc_size_kb)
  return malloc_size_kb_;
}
inline void MemInfoDumpProto_AppData_SqlStats::set_malloc_size_kb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  malloc_size_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.malloc_size_kb)
}

// repeated .com.android.server.am.MemInfoDumpProto.AppData.SqlStats.Database databases = 4;
inline int MemInfoDumpProto_AppData_SqlStats::databases_size() const {
  return databases_.size();
}
inline void MemInfoDumpProto_AppData_SqlStats::clear_databases() {
  databases_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database* MemInfoDumpProto_AppData_SqlStats::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.databases)
  return databases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database >*
MemInfoDumpProto_AppData_SqlStats::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.databases)
  return &databases_;
}
inline const ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database& MemInfoDumpProto_AppData_SqlStats::databases(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.databases)
  return databases_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database* MemInfoDumpProto_AppData_SqlStats::add_databases() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.databases)
  return databases_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats_Database >&
MemInfoDumpProto_AppData_SqlStats::databases() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.AppData.SqlStats.databases)
  return databases_;
}

// -------------------------------------------------------------------

// MemInfoDumpProto_AppData

// optional .com.android.server.am.MemInfoDumpProto.ProcessMemory process_memory = 1;
inline bool MemInfoDumpProto_AppData::has_process_memory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_AppData::clear_process_memory() {
  if (process_memory_ != nullptr) process_memory_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory& MemInfoDumpProto_AppData::process_memory() const {
  const ::com::android::server::am::MemInfoDumpProto_ProcessMemory* p = process_memory_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.process_memory)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_ProcessMemory*>(
      &::com::android::server::am::_MemInfoDumpProto_ProcessMemory_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory* MemInfoDumpProto_AppData::release_process_memory() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.AppData.process_memory)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::am::MemInfoDumpProto_ProcessMemory* temp = process_memory_;
  process_memory_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory* MemInfoDumpProto_AppData::mutable_process_memory() {
  _has_bits_[0] |= 0x00000004u;
  if (process_memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_ProcessMemory>(GetArenaNoVirtual());
    process_memory_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.AppData.process_memory)
  return process_memory_;
}
inline void MemInfoDumpProto_AppData::set_allocated_process_memory(::com::android::server::am::MemInfoDumpProto_ProcessMemory* process_memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete process_memory_;
  }
  if (process_memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_memory, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  process_memory_ = process_memory;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.AppData.process_memory)
}

// optional .com.android.server.am.MemInfoDumpProto.AppData.ObjectStats objects = 2;
inline bool MemInfoDumpProto_AppData::has_objects() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto_AppData::clear_objects() {
  if (objects_ != nullptr) objects_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats& MemInfoDumpProto_AppData::objects() const {
  const ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* p = objects_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.objects)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats*>(
      &::com::android::server::am::_MemInfoDumpProto_AppData_ObjectStats_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* MemInfoDumpProto_AppData::release_objects() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.AppData.objects)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* temp = objects_;
  objects_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* MemInfoDumpProto_AppData::mutable_objects() {
  _has_bits_[0] |= 0x00000008u;
  if (objects_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats>(GetArenaNoVirtual());
    objects_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.AppData.objects)
  return objects_;
}
inline void MemInfoDumpProto_AppData::set_allocated_objects(::com::android::server::am::MemInfoDumpProto_AppData_ObjectStats* objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete objects_;
  }
  if (objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objects, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  objects_ = objects;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.AppData.objects)
}

// optional .com.android.server.am.MemInfoDumpProto.AppData.SqlStats sql = 3;
inline bool MemInfoDumpProto_AppData::has_sql() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemInfoDumpProto_AppData::clear_sql() {
  if (sql_ != nullptr) sql_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats& MemInfoDumpProto_AppData::sql() const {
  const ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* p = sql_;
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.sql)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats*>(
      &::com::android::server::am::_MemInfoDumpProto_AppData_SqlStats_default_instance_);
}
inline ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* MemInfoDumpProto_AppData::release_sql() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.AppData.sql)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* temp = sql_;
  sql_ = nullptr;
  return temp;
}
inline ::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* MemInfoDumpProto_AppData::mutable_sql() {
  _has_bits_[0] |= 0x00000010u;
  if (sql_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::MemInfoDumpProto_AppData_SqlStats>(GetArenaNoVirtual());
    sql_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.AppData.sql)
  return sql_;
}
inline void MemInfoDumpProto_AppData::set_allocated_sql(::com::android::server::am::MemInfoDumpProto_AppData_SqlStats* sql) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sql_;
  }
  if (sql) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sql = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sql, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sql_ = sql;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.AppData.sql)
}

// optional string asset_allocations = 4;
inline bool MemInfoDumpProto_AppData::has_asset_allocations() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_AppData::clear_asset_allocations() {
  asset_allocations_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemInfoDumpProto_AppData::asset_allocations() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.asset_allocations)
  return asset_allocations_.GetNoArena();
}
inline void MemInfoDumpProto_AppData::set_asset_allocations(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  asset_allocations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.asset_allocations)
}
inline void MemInfoDumpProto_AppData::set_asset_allocations(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  asset_allocations_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.MemInfoDumpProto.AppData.asset_allocations)
}
inline void MemInfoDumpProto_AppData::set_asset_allocations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  asset_allocations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.MemInfoDumpProto.AppData.asset_allocations)
}
inline void MemInfoDumpProto_AppData::set_asset_allocations(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  asset_allocations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.MemInfoDumpProto.AppData.asset_allocations)
}
inline std::string* MemInfoDumpProto_AppData::mutable_asset_allocations() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.AppData.asset_allocations)
  return asset_allocations_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemInfoDumpProto_AppData::release_asset_allocations() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.AppData.asset_allocations)
  if (!has_asset_allocations()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return asset_allocations_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemInfoDumpProto_AppData::set_allocated_asset_allocations(std::string* asset_allocations) {
  if (asset_allocations != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  asset_allocations_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_allocations);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.AppData.asset_allocations)
}

// optional string unreachable_memory = 5;
inline bool MemInfoDumpProto_AppData::has_unreachable_memory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_AppData::clear_unreachable_memory() {
  unreachable_memory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MemInfoDumpProto_AppData::unreachable_memory() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory)
  return unreachable_memory_.GetNoArena();
}
inline void MemInfoDumpProto_AppData::set_unreachable_memory(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unreachable_memory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory)
}
inline void MemInfoDumpProto_AppData::set_unreachable_memory(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  unreachable_memory_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory)
}
inline void MemInfoDumpProto_AppData::set_unreachable_memory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  unreachable_memory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory)
}
inline void MemInfoDumpProto_AppData::set_unreachable_memory(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  unreachable_memory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory)
}
inline std::string* MemInfoDumpProto_AppData::mutable_unreachable_memory() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory)
  return unreachable_memory_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemInfoDumpProto_AppData::release_unreachable_memory() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory)
  if (!has_unreachable_memory()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unreachable_memory_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemInfoDumpProto_AppData::set_allocated_unreachable_memory(std::string* unreachable_memory) {
  if (unreachable_memory != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unreachable_memory_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unreachable_memory);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.AppData.unreachable_memory)
}

// -------------------------------------------------------------------

// MemInfoDumpProto_MemItem

// optional string tag = 1;
inline bool MemInfoDumpProto_MemItem::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto_MemItem::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemInfoDumpProto_MemItem::tag() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.tag)
  return tag_.GetNoArena();
}
inline void MemInfoDumpProto_MemItem::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.MemItem.tag)
}
inline void MemInfoDumpProto_MemItem::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.MemInfoDumpProto.MemItem.tag)
}
inline void MemInfoDumpProto_MemItem::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.MemInfoDumpProto.MemItem.tag)
}
inline void MemInfoDumpProto_MemItem::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.MemInfoDumpProto.MemItem.tag)
}
inline std::string* MemInfoDumpProto_MemItem::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.MemItem.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemInfoDumpProto_MemItem::release_tag() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.MemItem.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemInfoDumpProto_MemItem::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.MemItem.tag)
}

// optional string label = 2;
inline bool MemInfoDumpProto_MemItem::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto_MemItem::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MemInfoDumpProto_MemItem::label() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.label)
  return label_.GetNoArena();
}
inline void MemInfoDumpProto_MemItem::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.MemItem.label)
}
inline void MemInfoDumpProto_MemItem::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.MemInfoDumpProto.MemItem.label)
}
inline void MemInfoDumpProto_MemItem::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.MemInfoDumpProto.MemItem.label)
}
inline void MemInfoDumpProto_MemItem::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.MemInfoDumpProto.MemItem.label)
}
inline std::string* MemInfoDumpProto_MemItem::mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.MemItem.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemInfoDumpProto_MemItem::release_label() {
  // @@protoc_insertion_point(field_release:com.android.server.am.MemInfoDumpProto.MemItem.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemInfoDumpProto_MemItem::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.MemInfoDumpProto.MemItem.label)
}

// optional int32 id = 3;
inline bool MemInfoDumpProto_MemItem::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto_MemItem::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto_MemItem::id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.id)
  return id_;
}
inline void MemInfoDumpProto_MemItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.MemItem.id)
}

// optional bool is_proc = 4;
inline bool MemInfoDumpProto_MemItem::has_is_proc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto_MemItem::clear_is_proc() {
  is_proc_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MemInfoDumpProto_MemItem::is_proc() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.is_proc)
  return is_proc_;
}
inline void MemInfoDumpProto_MemItem::set_is_proc(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_proc_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.MemItem.is_proc)
}

// optional bool has_activities = 5;
inline bool MemInfoDumpProto_MemItem::has_has_activities() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemInfoDumpProto_MemItem::clear_has_activities() {
  has_activities_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MemInfoDumpProto_MemItem::has_activities() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.has_activities)
  return has_activities_;
}
inline void MemInfoDumpProto_MemItem::set_has_activities(bool value) {
  _has_bits_[0] |= 0x00000010u;
  has_activities_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.MemItem.has_activities)
}

// optional int64 pss_kb = 6;
inline bool MemInfoDumpProto_MemItem::has_pss_kb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemInfoDumpProto_MemItem::clear_pss_kb() {
  pss_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto_MemItem::pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.pss_kb)
  return pss_kb_;
}
inline void MemInfoDumpProto_MemItem::set_pss_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.MemItem.pss_kb)
}

// optional int64 rss_kb = 9;
inline bool MemInfoDumpProto_MemItem::has_rss_kb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemInfoDumpProto_MemItem::clear_rss_kb() {
  rss_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto_MemItem::rss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.rss_kb)
  return rss_kb_;
}
inline void MemInfoDumpProto_MemItem::set_rss_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  rss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.MemItem.rss_kb)
}

// optional int64 swap_pss_kb = 7;
inline bool MemInfoDumpProto_MemItem::has_swap_pss_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemInfoDumpProto_MemItem::clear_swap_pss_kb() {
  swap_pss_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto_MemItem::swap_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.swap_pss_kb)
  return swap_pss_kb_;
}
inline void MemInfoDumpProto_MemItem::set_swap_pss_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  swap_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.MemItem.swap_pss_kb)
}

// repeated .com.android.server.am.MemInfoDumpProto.MemItem sub_items = 8;
inline int MemInfoDumpProto_MemItem::sub_items_size() const {
  return sub_items_.size();
}
inline void MemInfoDumpProto_MemItem::clear_sub_items() {
  sub_items_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto_MemItem::mutable_sub_items(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.MemItem.sub_items)
  return sub_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
MemInfoDumpProto_MemItem::mutable_sub_items() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.MemItem.sub_items)
  return &sub_items_;
}
inline const ::com::android::server::am::MemInfoDumpProto_MemItem& MemInfoDumpProto_MemItem::sub_items(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.MemItem.sub_items)
  return sub_items_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto_MemItem::add_sub_items() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.MemItem.sub_items)
  return sub_items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
MemInfoDumpProto_MemItem::sub_items() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.MemItem.sub_items)
  return sub_items_;
}

// -------------------------------------------------------------------

// MemInfoDumpProto

// optional int64 uptime_duration_ms = 1;
inline bool MemInfoDumpProto::has_uptime_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemInfoDumpProto::clear_uptime_duration_ms() {
  uptime_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::uptime_duration_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.uptime_duration_ms)
  return uptime_duration_ms_;
}
inline void MemInfoDumpProto::set_uptime_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  uptime_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.uptime_duration_ms)
}

// optional int64 elapsed_realtime_ms = 2;
inline bool MemInfoDumpProto::has_elapsed_realtime_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemInfoDumpProto::clear_elapsed_realtime_ms() {
  elapsed_realtime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::elapsed_realtime_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.elapsed_realtime_ms)
  return elapsed_realtime_ms_;
}
inline void MemInfoDumpProto::set_elapsed_realtime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  elapsed_realtime_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.elapsed_realtime_ms)
}

// repeated .com.android.server.am.MemInfoDumpProto.ProcessMemory native_processes = 3;
inline int MemInfoDumpProto::native_processes_size() const {
  return native_processes_.size();
}
inline void MemInfoDumpProto::clear_native_processes() {
  native_processes_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory* MemInfoDumpProto::mutable_native_processes(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.native_processes)
  return native_processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory >*
MemInfoDumpProto::mutable_native_processes() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.native_processes)
  return &native_processes_;
}
inline const ::com::android::server::am::MemInfoDumpProto_ProcessMemory& MemInfoDumpProto::native_processes(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.native_processes)
  return native_processes_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_ProcessMemory* MemInfoDumpProto::add_native_processes() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.native_processes)
  return native_processes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_ProcessMemory >&
MemInfoDumpProto::native_processes() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.native_processes)
  return native_processes_;
}

// repeated .com.android.server.am.MemInfoDumpProto.AppData app_processes = 4;
inline int MemInfoDumpProto::app_processes_size() const {
  return app_processes_.size();
}
inline void MemInfoDumpProto::clear_app_processes() {
  app_processes_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_AppData* MemInfoDumpProto::mutable_app_processes(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.app_processes)
  return app_processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData >*
MemInfoDumpProto::mutable_app_processes() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.app_processes)
  return &app_processes_;
}
inline const ::com::android::server::am::MemInfoDumpProto_AppData& MemInfoDumpProto::app_processes(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.app_processes)
  return app_processes_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_AppData* MemInfoDumpProto::add_app_processes() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.app_processes)
  return app_processes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_AppData >&
MemInfoDumpProto::app_processes() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.app_processes)
  return app_processes_;
}

// repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_process = 29;
inline int MemInfoDumpProto::total_rss_by_process_size() const {
  return total_rss_by_process_.size();
}
inline void MemInfoDumpProto::clear_total_rss_by_process() {
  total_rss_by_process_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::mutable_total_rss_by_process(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.total_rss_by_process)
  return total_rss_by_process_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
MemInfoDumpProto::mutable_total_rss_by_process() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.total_rss_by_process)
  return &total_rss_by_process_;
}
inline const ::com::android::server::am::MemInfoDumpProto_MemItem& MemInfoDumpProto::total_rss_by_process(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_rss_by_process)
  return total_rss_by_process_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::add_total_rss_by_process() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.total_rss_by_process)
  return total_rss_by_process_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
MemInfoDumpProto::total_rss_by_process() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.total_rss_by_process)
  return total_rss_by_process_;
}

// repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_oom_adjustment = 30;
inline int MemInfoDumpProto::total_rss_by_oom_adjustment_size() const {
  return total_rss_by_oom_adjustment_.size();
}
inline void MemInfoDumpProto::clear_total_rss_by_oom_adjustment() {
  total_rss_by_oom_adjustment_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::mutable_total_rss_by_oom_adjustment(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.total_rss_by_oom_adjustment)
  return total_rss_by_oom_adjustment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
MemInfoDumpProto::mutable_total_rss_by_oom_adjustment() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.total_rss_by_oom_adjustment)
  return &total_rss_by_oom_adjustment_;
}
inline const ::com::android::server::am::MemInfoDumpProto_MemItem& MemInfoDumpProto::total_rss_by_oom_adjustment(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_rss_by_oom_adjustment)
  return total_rss_by_oom_adjustment_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::add_total_rss_by_oom_adjustment() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.total_rss_by_oom_adjustment)
  return total_rss_by_oom_adjustment_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
MemInfoDumpProto::total_rss_by_oom_adjustment() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.total_rss_by_oom_adjustment)
  return total_rss_by_oom_adjustment_;
}

// repeated .com.android.server.am.MemInfoDumpProto.MemItem total_rss_by_category = 31;
inline int MemInfoDumpProto::total_rss_by_category_size() const {
  return total_rss_by_category_.size();
}
inline void MemInfoDumpProto::clear_total_rss_by_category() {
  total_rss_by_category_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::mutable_total_rss_by_category(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.total_rss_by_category)
  return total_rss_by_category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
MemInfoDumpProto::mutable_total_rss_by_category() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.total_rss_by_category)
  return &total_rss_by_category_;
}
inline const ::com::android::server::am::MemInfoDumpProto_MemItem& MemInfoDumpProto::total_rss_by_category(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_rss_by_category)
  return total_rss_by_category_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::add_total_rss_by_category() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.total_rss_by_category)
  return total_rss_by_category_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
MemInfoDumpProto::total_rss_by_category() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.total_rss_by_category)
  return total_rss_by_category_;
}

// repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_process = 5;
inline int MemInfoDumpProto::total_pss_by_process_size() const {
  return total_pss_by_process_.size();
}
inline void MemInfoDumpProto::clear_total_pss_by_process() {
  total_pss_by_process_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::mutable_total_pss_by_process(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.total_pss_by_process)
  return total_pss_by_process_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
MemInfoDumpProto::mutable_total_pss_by_process() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.total_pss_by_process)
  return &total_pss_by_process_;
}
inline const ::com::android::server::am::MemInfoDumpProto_MemItem& MemInfoDumpProto::total_pss_by_process(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_pss_by_process)
  return total_pss_by_process_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::add_total_pss_by_process() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.total_pss_by_process)
  return total_pss_by_process_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
MemInfoDumpProto::total_pss_by_process() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.total_pss_by_process)
  return total_pss_by_process_;
}

// repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_oom_adjustment = 6;
inline int MemInfoDumpProto::total_pss_by_oom_adjustment_size() const {
  return total_pss_by_oom_adjustment_.size();
}
inline void MemInfoDumpProto::clear_total_pss_by_oom_adjustment() {
  total_pss_by_oom_adjustment_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::mutable_total_pss_by_oom_adjustment(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.total_pss_by_oom_adjustment)
  return total_pss_by_oom_adjustment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
MemInfoDumpProto::mutable_total_pss_by_oom_adjustment() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.total_pss_by_oom_adjustment)
  return &total_pss_by_oom_adjustment_;
}
inline const ::com::android::server::am::MemInfoDumpProto_MemItem& MemInfoDumpProto::total_pss_by_oom_adjustment(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_pss_by_oom_adjustment)
  return total_pss_by_oom_adjustment_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::add_total_pss_by_oom_adjustment() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.total_pss_by_oom_adjustment)
  return total_pss_by_oom_adjustment_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
MemInfoDumpProto::total_pss_by_oom_adjustment() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.total_pss_by_oom_adjustment)
  return total_pss_by_oom_adjustment_;
}

// repeated .com.android.server.am.MemInfoDumpProto.MemItem total_pss_by_category = 7;
inline int MemInfoDumpProto::total_pss_by_category_size() const {
  return total_pss_by_category_.size();
}
inline void MemInfoDumpProto::clear_total_pss_by_category() {
  total_pss_by_category_.Clear();
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::mutable_total_pss_by_category(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.MemInfoDumpProto.total_pss_by_category)
  return total_pss_by_category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >*
MemInfoDumpProto::mutable_total_pss_by_category() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.MemInfoDumpProto.total_pss_by_category)
  return &total_pss_by_category_;
}
inline const ::com::android::server::am::MemInfoDumpProto_MemItem& MemInfoDumpProto::total_pss_by_category(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_pss_by_category)
  return total_pss_by_category_.Get(index);
}
inline ::com::android::server::am::MemInfoDumpProto_MemItem* MemInfoDumpProto::add_total_pss_by_category() {
  // @@protoc_insertion_point(field_add:com.android.server.am.MemInfoDumpProto.total_pss_by_category)
  return total_pss_by_category_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::MemInfoDumpProto_MemItem >&
MemInfoDumpProto::total_pss_by_category() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.MemInfoDumpProto.total_pss_by_category)
  return total_pss_by_category_;
}

// optional int64 total_ram_kb = 8;
inline bool MemInfoDumpProto::has_total_ram_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemInfoDumpProto::clear_total_ram_kb() {
  total_ram_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::total_ram_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_ram_kb)
  return total_ram_kb_;
}
inline void MemInfoDumpProto::set_total_ram_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  total_ram_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.total_ram_kb)
}

// optional .com.android.internal.app.procstats.ProcessStatsProto.MemoryFactor status = 9;
inline bool MemInfoDumpProto::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MemInfoDumpProto::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor MemInfoDumpProto::status() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.status)
  return static_cast< ::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor >(status_);
}
inline void MemInfoDumpProto::set_status(::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor value) {
  assert(::com::android::internal::app::procstats::ProcessStatsProto_MemoryFactor_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  status_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.status)
}

// optional int64 cached_pss_kb = 10;
inline bool MemInfoDumpProto::has_cached_pss_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemInfoDumpProto::clear_cached_pss_kb() {
  cached_pss_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::cached_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.cached_pss_kb)
  return cached_pss_kb_;
}
inline void MemInfoDumpProto::set_cached_pss_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  cached_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.cached_pss_kb)
}

// optional int64 cached_kernel_kb = 11;
inline bool MemInfoDumpProto::has_cached_kernel_kb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemInfoDumpProto::clear_cached_kernel_kb() {
  cached_kernel_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::cached_kernel_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.cached_kernel_kb)
  return cached_kernel_kb_;
}
inline void MemInfoDumpProto::set_cached_kernel_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  cached_kernel_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.cached_kernel_kb)
}

// optional int64 free_kb = 12;
inline bool MemInfoDumpProto::has_free_kb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemInfoDumpProto::clear_free_kb() {
  free_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::free_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.free_kb)
  return free_kb_;
}
inline void MemInfoDumpProto::set_free_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  free_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.free_kb)
}

// optional int64 used_pss_kb = 13;
inline bool MemInfoDumpProto::has_used_pss_kb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MemInfoDumpProto::clear_used_pss_kb() {
  used_pss_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::used_pss_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.used_pss_kb)
  return used_pss_kb_;
}
inline void MemInfoDumpProto::set_used_pss_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  used_pss_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.used_pss_kb)
}

// optional int64 used_kernel_kb = 14;
inline bool MemInfoDumpProto::has_used_kernel_kb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MemInfoDumpProto::clear_used_kernel_kb() {
  used_kernel_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::used_kernel_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.used_kernel_kb)
  return used_kernel_kb_;
}
inline void MemInfoDumpProto::set_used_kernel_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  used_kernel_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.used_kernel_kb)
}

// optional int64 lost_ram_kb = 15;
inline bool MemInfoDumpProto::has_lost_ram_kb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MemInfoDumpProto::clear_lost_ram_kb() {
  lost_ram_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::lost_ram_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.lost_ram_kb)
  return lost_ram_kb_;
}
inline void MemInfoDumpProto::set_lost_ram_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  lost_ram_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.lost_ram_kb)
}

// optional int64 total_zram_kb = 16;
inline bool MemInfoDumpProto::has_total_zram_kb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MemInfoDumpProto::clear_total_zram_kb() {
  total_zram_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::total_zram_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_zram_kb)
  return total_zram_kb_;
}
inline void MemInfoDumpProto::set_total_zram_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  total_zram_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.total_zram_kb)
}

// optional int64 zram_physical_used_in_swap_kb = 17;
inline bool MemInfoDumpProto::has_zram_physical_used_in_swap_kb() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MemInfoDumpProto::clear_zram_physical_used_in_swap_kb() {
  zram_physical_used_in_swap_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::zram_physical_used_in_swap_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.zram_physical_used_in_swap_kb)
  return zram_physical_used_in_swap_kb_;
}
inline void MemInfoDumpProto::set_zram_physical_used_in_swap_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  zram_physical_used_in_swap_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.zram_physical_used_in_swap_kb)
}

// optional int64 total_zram_swap_kb = 18;
inline bool MemInfoDumpProto::has_total_zram_swap_kb() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MemInfoDumpProto::clear_total_zram_swap_kb() {
  total_zram_swap_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::total_zram_swap_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.total_zram_swap_kb)
  return total_zram_swap_kb_;
}
inline void MemInfoDumpProto::set_total_zram_swap_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  total_zram_swap_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.total_zram_swap_kb)
}

// optional int64 ksm_sharing_kb = 19;
inline bool MemInfoDumpProto::has_ksm_sharing_kb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MemInfoDumpProto::clear_ksm_sharing_kb() {
  ksm_sharing_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::ksm_sharing_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ksm_sharing_kb)
  return ksm_sharing_kb_;
}
inline void MemInfoDumpProto::set_ksm_sharing_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  ksm_sharing_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ksm_sharing_kb)
}

// optional int64 ksm_shared_kb = 20;
inline bool MemInfoDumpProto::has_ksm_shared_kb() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MemInfoDumpProto::clear_ksm_shared_kb() {
  ksm_shared_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::ksm_shared_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ksm_shared_kb)
  return ksm_shared_kb_;
}
inline void MemInfoDumpProto::set_ksm_shared_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  ksm_shared_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ksm_shared_kb)
}

// optional int64 ksm_unshared_kb = 21;
inline bool MemInfoDumpProto::has_ksm_unshared_kb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MemInfoDumpProto::clear_ksm_unshared_kb() {
  ksm_unshared_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::ksm_unshared_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ksm_unshared_kb)
  return ksm_unshared_kb_;
}
inline void MemInfoDumpProto::set_ksm_unshared_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  ksm_unshared_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ksm_unshared_kb)
}

// optional int64 ksm_volatile_kb = 22;
inline bool MemInfoDumpProto::has_ksm_volatile_kb() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MemInfoDumpProto::clear_ksm_volatile_kb() {
  ksm_volatile_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::ksm_volatile_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.ksm_volatile_kb)
  return ksm_volatile_kb_;
}
inline void MemInfoDumpProto::set_ksm_volatile_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  ksm_volatile_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.ksm_volatile_kb)
}

// optional int32 tuning_mb = 23;
inline bool MemInfoDumpProto::has_tuning_mb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MemInfoDumpProto::clear_tuning_mb() {
  tuning_mb_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto::tuning_mb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.tuning_mb)
  return tuning_mb_;
}
inline void MemInfoDumpProto::set_tuning_mb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  tuning_mb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.tuning_mb)
}

// optional int32 tuning_large_mb = 24;
inline bool MemInfoDumpProto::has_tuning_large_mb() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MemInfoDumpProto::clear_tuning_large_mb() {
  tuning_large_mb_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemInfoDumpProto::tuning_large_mb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.tuning_large_mb)
  return tuning_large_mb_;
}
inline void MemInfoDumpProto::set_tuning_large_mb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  tuning_large_mb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.tuning_large_mb)
}

// optional int64 oom_kb = 25;
inline bool MemInfoDumpProto::has_oom_kb() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MemInfoDumpProto::clear_oom_kb() {
  oom_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::oom_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.oom_kb)
  return oom_kb_;
}
inline void MemInfoDumpProto::set_oom_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00040000u;
  oom_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.oom_kb)
}

// optional int64 restore_limit_kb = 26;
inline bool MemInfoDumpProto::has_restore_limit_kb() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MemInfoDumpProto::clear_restore_limit_kb() {
  restore_limit_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MemInfoDumpProto::restore_limit_kb() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.restore_limit_kb)
  return restore_limit_kb_;
}
inline void MemInfoDumpProto::set_restore_limit_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  restore_limit_kb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.restore_limit_kb)
}

// optional bool is_low_ram_device = 27;
inline bool MemInfoDumpProto::has_is_low_ram_device() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MemInfoDumpProto::clear_is_low_ram_device() {
  is_low_ram_device_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool MemInfoDumpProto::is_low_ram_device() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.is_low_ram_device)
  return is_low_ram_device_;
}
inline void MemInfoDumpProto::set_is_low_ram_device(bool value) {
  _has_bits_[0] |= 0x00200000u;
  is_low_ram_device_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.is_low_ram_device)
}

// optional bool is_high_end_gfx = 28;
inline bool MemInfoDumpProto::has_is_high_end_gfx() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MemInfoDumpProto::clear_is_high_end_gfx() {
  is_high_end_gfx_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool MemInfoDumpProto::is_high_end_gfx() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.MemInfoDumpProto.is_high_end_gfx)
  return is_high_end_gfx_;
}
inline void MemInfoDumpProto::set_is_high_end_gfx(bool value) {
  _has_bits_[0] |= 0x00400000u;
  is_high_end_gfx_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.MemInfoDumpProto.is_high_end_gfx)
}

// -------------------------------------------------------------------

// StickyBroadcastProto_StickyAction

// optional string name = 1;
inline bool StickyBroadcastProto_StickyAction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StickyBroadcastProto_StickyAction::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StickyBroadcastProto_StickyAction::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.StickyBroadcastProto.StickyAction.name)
  return name_.GetNoArena();
}
inline void StickyBroadcastProto_StickyAction::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.StickyBroadcastProto.StickyAction.name)
}
inline void StickyBroadcastProto_StickyAction::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.StickyBroadcastProto.StickyAction.name)
}
inline void StickyBroadcastProto_StickyAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.StickyBroadcastProto.StickyAction.name)
}
inline void StickyBroadcastProto_StickyAction::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.StickyBroadcastProto.StickyAction.name)
}
inline std::string* StickyBroadcastProto_StickyAction::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.StickyBroadcastProto.StickyAction.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StickyBroadcastProto_StickyAction::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.StickyBroadcastProto.StickyAction.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StickyBroadcastProto_StickyAction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.StickyBroadcastProto.StickyAction.name)
}

// repeated .android.content.IntentProto intents = 2;
inline int StickyBroadcastProto_StickyAction::intents_size() const {
  return intents_.size();
}
inline ::android::content::IntentProto* StickyBroadcastProto_StickyAction::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.StickyBroadcastProto.StickyAction.intents)
  return intents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::IntentProto >*
StickyBroadcastProto_StickyAction::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.StickyBroadcastProto.StickyAction.intents)
  return &intents_;
}
inline const ::android::content::IntentProto& StickyBroadcastProto_StickyAction::intents(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.StickyBroadcastProto.StickyAction.intents)
  return intents_.Get(index);
}
inline ::android::content::IntentProto* StickyBroadcastProto_StickyAction::add_intents() {
  // @@protoc_insertion_point(field_add:com.android.server.am.StickyBroadcastProto.StickyAction.intents)
  return intents_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::IntentProto >&
StickyBroadcastProto_StickyAction::intents() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.StickyBroadcastProto.StickyAction.intents)
  return intents_;
}

// -------------------------------------------------------------------

// StickyBroadcastProto

// optional int32 user = 1;
inline bool StickyBroadcastProto::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StickyBroadcastProto::clear_user() {
  user_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StickyBroadcastProto::user() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.StickyBroadcastProto.user)
  return user_;
}
inline void StickyBroadcastProto::set_user(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  user_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.StickyBroadcastProto.user)
}

// repeated .com.android.server.am.StickyBroadcastProto.StickyAction actions = 2;
inline int StickyBroadcastProto::actions_size() const {
  return actions_.size();
}
inline void StickyBroadcastProto::clear_actions() {
  actions_.Clear();
}
inline ::com::android::server::am::StickyBroadcastProto_StickyAction* StickyBroadcastProto::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.StickyBroadcastProto.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto_StickyAction >*
StickyBroadcastProto::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.StickyBroadcastProto.actions)
  return &actions_;
}
inline const ::com::android::server::am::StickyBroadcastProto_StickyAction& StickyBroadcastProto::actions(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.StickyBroadcastProto.actions)
  return actions_.Get(index);
}
inline ::com::android::server::am::StickyBroadcastProto_StickyAction* StickyBroadcastProto::add_actions() {
  // @@protoc_insertion_point(field_add:com.android.server.am.StickyBroadcastProto.actions)
  return actions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::StickyBroadcastProto_StickyAction >&
StickyBroadcastProto::actions() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.StickyBroadcastProto.actions)
  return actions_;
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpServicesProto

// optional .com.android.server.am.ActiveServicesProto active_services = 1;
inline bool ActivityManagerServiceDumpServicesProto::has_active_services() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpServicesProto::clear_active_services() {
  if (active_services_ != nullptr) active_services_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::am::ActiveServicesProto& ActivityManagerServiceDumpServicesProto::active_services() const {
  const ::com::android::server::am::ActiveServicesProto* p = active_services_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpServicesProto.active_services)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActiveServicesProto*>(
      &::com::android::server::am::_ActiveServicesProto_default_instance_);
}
inline ::com::android::server::am::ActiveServicesProto* ActivityManagerServiceDumpServicesProto::release_active_services() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpServicesProto.active_services)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::am::ActiveServicesProto* temp = active_services_;
  active_services_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActiveServicesProto* ActivityManagerServiceDumpServicesProto::mutable_active_services() {
  _has_bits_[0] |= 0x00000001u;
  if (active_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActiveServicesProto>(GetArenaNoVirtual());
    active_services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpServicesProto.active_services)
  return active_services_;
}
inline void ActivityManagerServiceDumpServicesProto::set_allocated_active_services(::com::android::server::am::ActiveServicesProto* active_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete active_services_;
  }
  if (active_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      active_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_services, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  active_services_ = active_services;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpServicesProto.active_services)
}

// -------------------------------------------------------------------

// ActiveServicesProto_ServicesByUser

// optional int32 user_id = 1;
inline bool ActiveServicesProto_ServicesByUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveServicesProto_ServicesByUser::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveServicesProto_ServicesByUser::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveServicesProto.ServicesByUser.user_id)
  return user_id_;
}
inline void ActiveServicesProto_ServicesByUser::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActiveServicesProto.ServicesByUser.user_id)
}

// repeated .com.android.server.am.ServiceRecordProto service_records = 2;
inline int ActiveServicesProto_ServicesByUser::service_records_size() const {
  return service_records_.size();
}
inline void ActiveServicesProto_ServicesByUser::clear_service_records() {
  service_records_.Clear();
}
inline ::com::android::server::am::ServiceRecordProto* ActiveServicesProto_ServicesByUser::mutable_service_records(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveServicesProto.ServicesByUser.service_records)
  return service_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto >*
ActiveServicesProto_ServicesByUser::mutable_service_records() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActiveServicesProto.ServicesByUser.service_records)
  return &service_records_;
}
inline const ::com::android::server::am::ServiceRecordProto& ActiveServicesProto_ServicesByUser::service_records(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveServicesProto.ServicesByUser.service_records)
  return service_records_.Get(index);
}
inline ::com::android::server::am::ServiceRecordProto* ActiveServicesProto_ServicesByUser::add_service_records() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActiveServicesProto.ServicesByUser.service_records)
  return service_records_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto >&
ActiveServicesProto_ServicesByUser::service_records() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActiveServicesProto.ServicesByUser.service_records)
  return service_records_;
}

// -------------------------------------------------------------------

// ActiveServicesProto

// repeated .com.android.server.am.ActiveServicesProto.ServicesByUser services_by_users = 1;
inline int ActiveServicesProto::services_by_users_size() const {
  return services_by_users_.size();
}
inline void ActiveServicesProto::clear_services_by_users() {
  services_by_users_.Clear();
}
inline ::com::android::server::am::ActiveServicesProto_ServicesByUser* ActiveServicesProto::mutable_services_by_users(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveServicesProto.services_by_users)
  return services_by_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveServicesProto_ServicesByUser >*
ActiveServicesProto::mutable_services_by_users() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActiveServicesProto.services_by_users)
  return &services_by_users_;
}
inline const ::com::android::server::am::ActiveServicesProto_ServicesByUser& ActiveServicesProto::services_by_users(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveServicesProto.services_by_users)
  return services_by_users_.Get(index);
}
inline ::com::android::server::am::ActiveServicesProto_ServicesByUser* ActiveServicesProto::add_services_by_users() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActiveServicesProto.services_by_users)
  return services_by_users_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveServicesProto_ServicesByUser >&
ActiveServicesProto::services_by_users() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActiveServicesProto.services_by_users)
  return services_by_users_;
}

// -------------------------------------------------------------------

// GrantUriProto

// optional int32 source_user_id = 1;
inline bool GrantUriProto::has_source_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GrantUriProto::clear_source_user_id() {
  source_user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GrantUriProto::source_user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.GrantUriProto.source_user_id)
  return source_user_id_;
}
inline void GrantUriProto::set_source_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  source_user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.GrantUriProto.source_user_id)
}

// optional string uri = 2 [(.android.privacy) = {
inline bool GrantUriProto::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GrantUriProto::clear_uri() {
  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GrantUriProto::uri() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.GrantUriProto.uri)
  return uri_.GetNoArena();
}
inline void GrantUriProto::set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.GrantUriProto.uri)
}
inline void GrantUriProto::set_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.GrantUriProto.uri)
}
inline void GrantUriProto::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.GrantUriProto.uri)
}
inline void GrantUriProto::set_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.GrantUriProto.uri)
}
inline std::string* GrantUriProto::mutable_uri() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.GrantUriProto.uri)
  return uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GrantUriProto::release_uri() {
  // @@protoc_insertion_point(field_release:com.android.server.am.GrantUriProto.uri)
  if (!has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GrantUriProto::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.GrantUriProto.uri)
}

// -------------------------------------------------------------------

// NeededUriGrantsProto

// optional string target_package = 1;
inline bool NeededUriGrantsProto::has_target_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeededUriGrantsProto::clear_target_package() {
  target_package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NeededUriGrantsProto::target_package() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.NeededUriGrantsProto.target_package)
  return target_package_.GetNoArena();
}
inline void NeededUriGrantsProto::set_target_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.NeededUriGrantsProto.target_package)
}
inline void NeededUriGrantsProto::set_target_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.NeededUriGrantsProto.target_package)
}
inline void NeededUriGrantsProto::set_target_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.NeededUriGrantsProto.target_package)
}
inline void NeededUriGrantsProto::set_target_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.NeededUriGrantsProto.target_package)
}
inline std::string* NeededUriGrantsProto::mutable_target_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.NeededUriGrantsProto.target_package)
  return target_package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NeededUriGrantsProto::release_target_package() {
  // @@protoc_insertion_point(field_release:com.android.server.am.NeededUriGrantsProto.target_package)
  if (!has_target_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NeededUriGrantsProto::set_allocated_target_package(std::string* target_package) {
  if (target_package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.NeededUriGrantsProto.target_package)
}

// optional int32 target_uid = 2;
inline bool NeededUriGrantsProto::has_target_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeededUriGrantsProto::clear_target_uid() {
  target_uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NeededUriGrantsProto::target_uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.NeededUriGrantsProto.target_uid)
  return target_uid_;
}
inline void NeededUriGrantsProto::set_target_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.NeededUriGrantsProto.target_uid)
}

// optional int32 flags = 3;
inline bool NeededUriGrantsProto::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeededUriGrantsProto::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NeededUriGrantsProto::flags() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.NeededUriGrantsProto.flags)
  return flags_;
}
inline void NeededUriGrantsProto::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.NeededUriGrantsProto.flags)
}

// repeated .com.android.server.am.GrantUriProto grants = 4;
inline int NeededUriGrantsProto::grants_size() const {
  return grants_.size();
}
inline void NeededUriGrantsProto::clear_grants() {
  grants_.Clear();
}
inline ::com::android::server::am::GrantUriProto* NeededUriGrantsProto::mutable_grants(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.NeededUriGrantsProto.grants)
  return grants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >*
NeededUriGrantsProto::mutable_grants() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.NeededUriGrantsProto.grants)
  return &grants_;
}
inline const ::com::android::server::am::GrantUriProto& NeededUriGrantsProto::grants(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.NeededUriGrantsProto.grants)
  return grants_.Get(index);
}
inline ::com::android::server::am::GrantUriProto* NeededUriGrantsProto::add_grants() {
  // @@protoc_insertion_point(field_add:com.android.server.am.NeededUriGrantsProto.grants)
  return grants_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >&
NeededUriGrantsProto::grants() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.NeededUriGrantsProto.grants)
  return grants_;
}

// -------------------------------------------------------------------

// UriPermissionOwnerProto

// optional string owner = 1;
inline bool UriPermissionOwnerProto::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UriPermissionOwnerProto::clear_owner() {
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UriPermissionOwnerProto::owner() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UriPermissionOwnerProto.owner)
  return owner_.GetNoArena();
}
inline void UriPermissionOwnerProto::set_owner(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.UriPermissionOwnerProto.owner)
}
inline void UriPermissionOwnerProto::set_owner(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.UriPermissionOwnerProto.owner)
}
inline void UriPermissionOwnerProto::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.UriPermissionOwnerProto.owner)
}
inline void UriPermissionOwnerProto::set_owner(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.UriPermissionOwnerProto.owner)
}
inline std::string* UriPermissionOwnerProto::mutable_owner() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.UriPermissionOwnerProto.owner)
  return owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UriPermissionOwnerProto::release_owner() {
  // @@protoc_insertion_point(field_release:com.android.server.am.UriPermissionOwnerProto.owner)
  if (!has_owner()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return owner_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UriPermissionOwnerProto::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.UriPermissionOwnerProto.owner)
}

// repeated .com.android.server.am.GrantUriProto read_perms = 2;
inline int UriPermissionOwnerProto::read_perms_size() const {
  return read_perms_.size();
}
inline void UriPermissionOwnerProto::clear_read_perms() {
  read_perms_.Clear();
}
inline ::com::android::server::am::GrantUriProto* UriPermissionOwnerProto::mutable_read_perms(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.UriPermissionOwnerProto.read_perms)
  return read_perms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >*
UriPermissionOwnerProto::mutable_read_perms() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.UriPermissionOwnerProto.read_perms)
  return &read_perms_;
}
inline const ::com::android::server::am::GrantUriProto& UriPermissionOwnerProto::read_perms(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UriPermissionOwnerProto.read_perms)
  return read_perms_.Get(index);
}
inline ::com::android::server::am::GrantUriProto* UriPermissionOwnerProto::add_read_perms() {
  // @@protoc_insertion_point(field_add:com.android.server.am.UriPermissionOwnerProto.read_perms)
  return read_perms_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >&
UriPermissionOwnerProto::read_perms() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.UriPermissionOwnerProto.read_perms)
  return read_perms_;
}

// repeated .com.android.server.am.GrantUriProto write_perms = 3;
inline int UriPermissionOwnerProto::write_perms_size() const {
  return write_perms_.size();
}
inline void UriPermissionOwnerProto::clear_write_perms() {
  write_perms_.Clear();
}
inline ::com::android::server::am::GrantUriProto* UriPermissionOwnerProto::mutable_write_perms(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.UriPermissionOwnerProto.write_perms)
  return write_perms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >*
UriPermissionOwnerProto::mutable_write_perms() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.UriPermissionOwnerProto.write_perms)
  return &write_perms_;
}
inline const ::com::android::server::am::GrantUriProto& UriPermissionOwnerProto::write_perms(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UriPermissionOwnerProto.write_perms)
  return write_perms_.Get(index);
}
inline ::com::android::server::am::GrantUriProto* UriPermissionOwnerProto::add_write_perms() {
  // @@protoc_insertion_point(field_add:com.android.server.am.UriPermissionOwnerProto.write_perms)
  return write_perms_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::GrantUriProto >&
UriPermissionOwnerProto::write_perms() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.UriPermissionOwnerProto.write_perms)
  return write_perms_;
}

// -------------------------------------------------------------------

// ServiceRecordProto_AppInfo

// optional string base_dir = 1;
inline bool ServiceRecordProto_AppInfo::has_base_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceRecordProto_AppInfo::clear_base_dir() {
  base_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceRecordProto_AppInfo::base_dir() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.AppInfo.base_dir)
  return base_dir_.GetNoArena();
}
inline void ServiceRecordProto_AppInfo::set_base_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.AppInfo.base_dir)
}
inline void ServiceRecordProto_AppInfo::set_base_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  base_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ServiceRecordProto.AppInfo.base_dir)
}
inline void ServiceRecordProto_AppInfo::set_base_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ServiceRecordProto.AppInfo.base_dir)
}
inline void ServiceRecordProto_AppInfo::set_base_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  base_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ServiceRecordProto.AppInfo.base_dir)
}
inline std::string* ServiceRecordProto_AppInfo::mutable_base_dir() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.AppInfo.base_dir)
  return base_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceRecordProto_AppInfo::release_base_dir() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.AppInfo.base_dir)
  if (!has_base_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return base_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceRecordProto_AppInfo::set_allocated_base_dir(std::string* base_dir) {
  if (base_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_dir);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.AppInfo.base_dir)
}

// optional string res_dir = 2;
inline bool ServiceRecordProto_AppInfo::has_res_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceRecordProto_AppInfo::clear_res_dir() {
  res_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServiceRecordProto_AppInfo::res_dir() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.AppInfo.res_dir)
  return res_dir_.GetNoArena();
}
inline void ServiceRecordProto_AppInfo::set_res_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  res_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.AppInfo.res_dir)
}
inline void ServiceRecordProto_AppInfo::set_res_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  res_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ServiceRecordProto.AppInfo.res_dir)
}
inline void ServiceRecordProto_AppInfo::set_res_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  res_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ServiceRecordProto.AppInfo.res_dir)
}
inline void ServiceRecordProto_AppInfo::set_res_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  res_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ServiceRecordProto.AppInfo.res_dir)
}
inline std::string* ServiceRecordProto_AppInfo::mutable_res_dir() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.AppInfo.res_dir)
  return res_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceRecordProto_AppInfo::release_res_dir() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.AppInfo.res_dir)
  if (!has_res_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return res_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceRecordProto_AppInfo::set_allocated_res_dir(std::string* res_dir) {
  if (res_dir != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  res_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_dir);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.AppInfo.res_dir)
}

// optional string data_dir = 3;
inline bool ServiceRecordProto_AppInfo::has_data_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceRecordProto_AppInfo::clear_data_dir() {
  data_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServiceRecordProto_AppInfo::data_dir() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.AppInfo.data_dir)
  return data_dir_.GetNoArena();
}
inline void ServiceRecordProto_AppInfo::set_data_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.AppInfo.data_dir)
}
inline void ServiceRecordProto_AppInfo::set_data_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  data_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ServiceRecordProto.AppInfo.data_dir)
}
inline void ServiceRecordProto_AppInfo::set_data_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ServiceRecordProto.AppInfo.data_dir)
}
inline void ServiceRecordProto_AppInfo::set_data_dir(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  data_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ServiceRecordProto.AppInfo.data_dir)
}
inline std::string* ServiceRecordProto_AppInfo::mutable_data_dir() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.AppInfo.data_dir)
  return data_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceRecordProto_AppInfo::release_data_dir() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.AppInfo.data_dir)
  if (!has_data_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_dir_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceRecordProto_AppInfo::set_allocated_data_dir(std::string* data_dir) {
  if (data_dir != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_dir);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.AppInfo.data_dir)
}

// -------------------------------------------------------------------

// ServiceRecordProto_Foreground

// optional int32 id = 1;
inline bool ServiceRecordProto_Foreground::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceRecordProto_Foreground::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto_Foreground::id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Foreground.id)
  return id_;
}
inline void ServiceRecordProto_Foreground::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.Foreground.id)
}

// optional .android.app.NotificationProto notification = 2;
inline bool ServiceRecordProto_Foreground::has_notification() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::app::NotificationProto& ServiceRecordProto_Foreground::notification() const {
  const ::android::app::NotificationProto* p = notification_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Foreground.notification)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::app::NotificationProto*>(
      &::android::app::_NotificationProto_default_instance_);
}
inline ::android::app::NotificationProto* ServiceRecordProto_Foreground::release_notification() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.Foreground.notification)
  _has_bits_[0] &= ~0x00000001u;
  ::android::app::NotificationProto* temp = notification_;
  notification_ = nullptr;
  return temp;
}
inline ::android::app::NotificationProto* ServiceRecordProto_Foreground::mutable_notification() {
  _has_bits_[0] |= 0x00000001u;
  if (notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::app::NotificationProto>(GetArenaNoVirtual());
    notification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.Foreground.notification)
  return notification_;
}
inline void ServiceRecordProto_Foreground::set_allocated_notification(::android::app::NotificationProto* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(notification_);
  }
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  notification_ = notification;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.Foreground.notification)
}

// -------------------------------------------------------------------

// ServiceRecordProto_Start

// optional bool start_requested = 1;
inline bool ServiceRecordProto_Start::has_start_requested() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceRecordProto_Start::clear_start_requested() {
  start_requested_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ServiceRecordProto_Start::start_requested() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Start.start_requested)
  return start_requested_;
}
inline void ServiceRecordProto_Start::set_start_requested(bool value) {
  _has_bits_[0] |= 0x00000001u;
  start_requested_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.Start.start_requested)
}

// optional bool delayed_stop = 2;
inline bool ServiceRecordProto_Start::has_delayed_stop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceRecordProto_Start::clear_delayed_stop() {
  delayed_stop_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ServiceRecordProto_Start::delayed_stop() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Start.delayed_stop)
  return delayed_stop_;
}
inline void ServiceRecordProto_Start::set_delayed_stop(bool value) {
  _has_bits_[0] |= 0x00000002u;
  delayed_stop_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.Start.delayed_stop)
}

// optional bool stop_if_killed = 3;
inline bool ServiceRecordProto_Start::has_stop_if_killed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceRecordProto_Start::clear_stop_if_killed() {
  stop_if_killed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ServiceRecordProto_Start::stop_if_killed() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Start.stop_if_killed)
  return stop_if_killed_;
}
inline void ServiceRecordProto_Start::set_stop_if_killed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  stop_if_killed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.Start.stop_if_killed)
}

// optional bool call_start = 4;
inline bool ServiceRecordProto_Start::has_call_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceRecordProto_Start::clear_call_start() {
  call_start_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ServiceRecordProto_Start::call_start() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Start.call_start)
  return call_start_;
}
inline void ServiceRecordProto_Start::set_call_start(bool value) {
  _has_bits_[0] |= 0x00000008u;
  call_start_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.Start.call_start)
}

// optional int32 last_start_id = 5;
inline bool ServiceRecordProto_Start::has_last_start_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceRecordProto_Start::clear_last_start_id() {
  last_start_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto_Start::last_start_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Start.last_start_id)
  return last_start_id_;
}
inline void ServiceRecordProto_Start::set_last_start_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  last_start_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.Start.last_start_id)
}

// -------------------------------------------------------------------

// ServiceRecordProto_ExecuteNesting

// optional int32 execute_nesting = 1;
inline bool ServiceRecordProto_ExecuteNesting::has_execute_nesting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceRecordProto_ExecuteNesting::clear_execute_nesting() {
  execute_nesting_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto_ExecuteNesting::execute_nesting() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.ExecuteNesting.execute_nesting)
  return execute_nesting_;
}
inline void ServiceRecordProto_ExecuteNesting::set_execute_nesting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  execute_nesting_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.ExecuteNesting.execute_nesting)
}

// optional bool execute_fg = 2;
inline bool ServiceRecordProto_ExecuteNesting::has_execute_fg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceRecordProto_ExecuteNesting::clear_execute_fg() {
  execute_fg_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ServiceRecordProto_ExecuteNesting::execute_fg() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.ExecuteNesting.execute_fg)
  return execute_fg_;
}
inline void ServiceRecordProto_ExecuteNesting::set_execute_fg(bool value) {
  _has_bits_[0] |= 0x00000004u;
  execute_fg_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.ExecuteNesting.execute_fg)
}

// optional .android.util.Duration executing_start = 3;
inline bool ServiceRecordProto_ExecuteNesting::has_executing_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto_ExecuteNesting::executing_start() const {
  const ::android::util::Duration* p = executing_start_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.ExecuteNesting.executing_start)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto_ExecuteNesting::release_executing_start() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.ExecuteNesting.executing_start)
  _has_bits_[0] &= ~0x00000001u;
  ::android::util::Duration* temp = executing_start_;
  executing_start_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto_ExecuteNesting::mutable_executing_start() {
  _has_bits_[0] |= 0x00000001u;
  if (executing_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    executing_start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.ExecuteNesting.executing_start)
  return executing_start_;
}
inline void ServiceRecordProto_ExecuteNesting::set_allocated_executing_start(::android::util::Duration* executing_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(executing_start_);
  }
  if (executing_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      executing_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executing_start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  executing_start_ = executing_start;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.ExecuteNesting.executing_start)
}

// -------------------------------------------------------------------

// ServiceRecordProto_Crash

// optional int32 restart_count = 1;
inline bool ServiceRecordProto_Crash::has_restart_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceRecordProto_Crash::clear_restart_count() {
  restart_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto_Crash::restart_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Crash.restart_count)
  return restart_count_;
}
inline void ServiceRecordProto_Crash::set_restart_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  restart_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.Crash.restart_count)
}

// optional .android.util.Duration restart_delay = 2;
inline bool ServiceRecordProto_Crash::has_restart_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto_Crash::restart_delay() const {
  const ::android::util::Duration* p = restart_delay_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Crash.restart_delay)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto_Crash::release_restart_delay() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.Crash.restart_delay)
  _has_bits_[0] &= ~0x00000001u;
  ::android::util::Duration* temp = restart_delay_;
  restart_delay_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto_Crash::mutable_restart_delay() {
  _has_bits_[0] |= 0x00000001u;
  if (restart_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    restart_delay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.Crash.restart_delay)
  return restart_delay_;
}
inline void ServiceRecordProto_Crash::set_allocated_restart_delay(::android::util::Duration* restart_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(restart_delay_);
  }
  if (restart_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      restart_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_delay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  restart_delay_ = restart_delay;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.Crash.restart_delay)
}

// optional .android.util.Duration next_restart_time = 3;
inline bool ServiceRecordProto_Crash::has_next_restart_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto_Crash::next_restart_time() const {
  const ::android::util::Duration* p = next_restart_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Crash.next_restart_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto_Crash::release_next_restart_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.Crash.next_restart_time)
  _has_bits_[0] &= ~0x00000002u;
  ::android::util::Duration* temp = next_restart_time_;
  next_restart_time_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto_Crash::mutable_next_restart_time() {
  _has_bits_[0] |= 0x00000002u;
  if (next_restart_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    next_restart_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.Crash.next_restart_time)
  return next_restart_time_;
}
inline void ServiceRecordProto_Crash::set_allocated_next_restart_time(::android::util::Duration* next_restart_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_restart_time_);
  }
  if (next_restart_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      next_restart_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_restart_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  next_restart_time_ = next_restart_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.Crash.next_restart_time)
}

// optional int32 crash_count = 4;
inline bool ServiceRecordProto_Crash::has_crash_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceRecordProto_Crash::clear_crash_count() {
  crash_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto_Crash::crash_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.Crash.crash_count)
  return crash_count_;
}
inline void ServiceRecordProto_Crash::set_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  crash_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.Crash.crash_count)
}

// -------------------------------------------------------------------

// ServiceRecordProto_StartItem

// optional int32 id = 1;
inline bool ServiceRecordProto_StartItem::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceRecordProto_StartItem::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto_StartItem::id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.StartItem.id)
  return id_;
}
inline void ServiceRecordProto_StartItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.StartItem.id)
}

// optional .android.util.Duration duration = 2;
inline bool ServiceRecordProto_StartItem::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto_StartItem::duration() const {
  const ::android::util::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.StartItem.duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto_StartItem::release_duration() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.StartItem.duration)
  _has_bits_[0] &= ~0x00000001u;
  ::android::util::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto_StartItem::mutable_duration() {
  _has_bits_[0] |= 0x00000001u;
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.StartItem.duration)
  return duration_;
}
inline void ServiceRecordProto_StartItem::set_allocated_duration(::android::util::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.StartItem.duration)
}

// optional int32 delivery_count = 3;
inline bool ServiceRecordProto_StartItem::has_delivery_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceRecordProto_StartItem::clear_delivery_count() {
  delivery_count_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto_StartItem::delivery_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.StartItem.delivery_count)
  return delivery_count_;
}
inline void ServiceRecordProto_StartItem::set_delivery_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  delivery_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.StartItem.delivery_count)
}

// optional int32 done_executing_count = 4;
inline bool ServiceRecordProto_StartItem::has_done_executing_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceRecordProto_StartItem::clear_done_executing_count() {
  done_executing_count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto_StartItem::done_executing_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.StartItem.done_executing_count)
  return done_executing_count_;
}
inline void ServiceRecordProto_StartItem::set_done_executing_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  done_executing_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.StartItem.done_executing_count)
}

// optional .android.content.IntentProto intent = 5;
inline bool ServiceRecordProto_StartItem::has_intent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::IntentProto& ServiceRecordProto_StartItem::intent() const {
  const ::android::content::IntentProto* p = intent_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.StartItem.intent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::IntentProto*>(
      &::android::content::_IntentProto_default_instance_);
}
inline ::android::content::IntentProto* ServiceRecordProto_StartItem::release_intent() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.StartItem.intent)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::IntentProto* temp = intent_;
  intent_ = nullptr;
  return temp;
}
inline ::android::content::IntentProto* ServiceRecordProto_StartItem::mutable_intent() {
  _has_bits_[0] |= 0x00000002u;
  if (intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::IntentProto>(GetArenaNoVirtual());
    intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.StartItem.intent)
  return intent_;
}
inline void ServiceRecordProto_StartItem::set_allocated_intent(::android::content::IntentProto* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent_);
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.StartItem.intent)
}

// optional .com.android.server.am.NeededUriGrantsProto needed_grants = 6;
inline bool ServiceRecordProto_StartItem::has_needed_grants() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceRecordProto_StartItem::clear_needed_grants() {
  if (needed_grants_ != nullptr) needed_grants_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::am::NeededUriGrantsProto& ServiceRecordProto_StartItem::needed_grants() const {
  const ::com::android::server::am::NeededUriGrantsProto* p = needed_grants_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.StartItem.needed_grants)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::NeededUriGrantsProto*>(
      &::com::android::server::am::_NeededUriGrantsProto_default_instance_);
}
inline ::com::android::server::am::NeededUriGrantsProto* ServiceRecordProto_StartItem::release_needed_grants() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.StartItem.needed_grants)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::am::NeededUriGrantsProto* temp = needed_grants_;
  needed_grants_ = nullptr;
  return temp;
}
inline ::com::android::server::am::NeededUriGrantsProto* ServiceRecordProto_StartItem::mutable_needed_grants() {
  _has_bits_[0] |= 0x00000004u;
  if (needed_grants_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::NeededUriGrantsProto>(GetArenaNoVirtual());
    needed_grants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.StartItem.needed_grants)
  return needed_grants_;
}
inline void ServiceRecordProto_StartItem::set_allocated_needed_grants(::com::android::server::am::NeededUriGrantsProto* needed_grants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete needed_grants_;
  }
  if (needed_grants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      needed_grants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, needed_grants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  needed_grants_ = needed_grants;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.StartItem.needed_grants)
}

// optional .com.android.server.am.UriPermissionOwnerProto uri_permissions = 7;
inline bool ServiceRecordProto_StartItem::has_uri_permissions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceRecordProto_StartItem::clear_uri_permissions() {
  if (uri_permissions_ != nullptr) uri_permissions_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::am::UriPermissionOwnerProto& ServiceRecordProto_StartItem::uri_permissions() const {
  const ::com::android::server::am::UriPermissionOwnerProto* p = uri_permissions_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.StartItem.uri_permissions)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::UriPermissionOwnerProto*>(
      &::com::android::server::am::_UriPermissionOwnerProto_default_instance_);
}
inline ::com::android::server::am::UriPermissionOwnerProto* ServiceRecordProto_StartItem::release_uri_permissions() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.StartItem.uri_permissions)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::am::UriPermissionOwnerProto* temp = uri_permissions_;
  uri_permissions_ = nullptr;
  return temp;
}
inline ::com::android::server::am::UriPermissionOwnerProto* ServiceRecordProto_StartItem::mutable_uri_permissions() {
  _has_bits_[0] |= 0x00000008u;
  if (uri_permissions_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::UriPermissionOwnerProto>(GetArenaNoVirtual());
    uri_permissions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.StartItem.uri_permissions)
  return uri_permissions_;
}
inline void ServiceRecordProto_StartItem::set_allocated_uri_permissions(::com::android::server::am::UriPermissionOwnerProto* uri_permissions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uri_permissions_;
  }
  if (uri_permissions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uri_permissions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uri_permissions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  uri_permissions_ = uri_permissions;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.StartItem.uri_permissions)
}

// -------------------------------------------------------------------

// ServiceRecordProto

// optional string short_name = 1;
inline bool ServiceRecordProto::has_short_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceRecordProto::clear_short_name() {
  short_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServiceRecordProto::short_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.short_name)
  return short_name_.GetNoArena();
}
inline void ServiceRecordProto::set_short_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.short_name)
}
inline void ServiceRecordProto::set_short_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ServiceRecordProto.short_name)
}
inline void ServiceRecordProto::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ServiceRecordProto.short_name)
}
inline void ServiceRecordProto::set_short_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  short_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ServiceRecordProto.short_name)
}
inline std::string* ServiceRecordProto::mutable_short_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.short_name)
  return short_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceRecordProto::release_short_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.short_name)
  if (!has_short_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return short_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceRecordProto::set_allocated_short_name(std::string* short_name) {
  if (short_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  short_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.short_name)
}

// optional bool is_running = 2;
inline bool ServiceRecordProto::has_is_running() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ServiceRecordProto::clear_is_running() {
  is_running_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool ServiceRecordProto::is_running() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.is_running)
  return is_running_;
}
inline void ServiceRecordProto::set_is_running(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_running_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.is_running)
}

// optional int32 pid = 3;
inline bool ServiceRecordProto::has_pid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ServiceRecordProto::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceRecordProto::pid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.pid)
  return pid_;
}
inline void ServiceRecordProto::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.pid)
}

// optional .android.content.IntentProto intent = 4;
inline bool ServiceRecordProto::has_intent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::content::IntentProto& ServiceRecordProto::intent() const {
  const ::android::content::IntentProto* p = intent_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.intent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::IntentProto*>(
      &::android::content::_IntentProto_default_instance_);
}
inline ::android::content::IntentProto* ServiceRecordProto::release_intent() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.intent)
  _has_bits_[0] &= ~0x00000010u;
  ::android::content::IntentProto* temp = intent_;
  intent_ = nullptr;
  return temp;
}
inline ::android::content::IntentProto* ServiceRecordProto::mutable_intent() {
  _has_bits_[0] |= 0x00000010u;
  if (intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::IntentProto>(GetArenaNoVirtual());
    intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.intent)
  return intent_;
}
inline void ServiceRecordProto::set_allocated_intent(::android::content::IntentProto* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent_);
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.intent)
}

// optional string package_name = 5;
inline bool ServiceRecordProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceRecordProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServiceRecordProto::package_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.package_name)
  return package_name_.GetNoArena();
}
inline void ServiceRecordProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.package_name)
}
inline void ServiceRecordProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ServiceRecordProto.package_name)
}
inline void ServiceRecordProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ServiceRecordProto.package_name)
}
inline void ServiceRecordProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ServiceRecordProto.package_name)
}
inline std::string* ServiceRecordProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceRecordProto::release_package_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceRecordProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.package_name)
}

// optional string process_name = 6;
inline bool ServiceRecordProto::has_process_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceRecordProto::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServiceRecordProto::process_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.process_name)
  return process_name_.GetNoArena();
}
inline void ServiceRecordProto::set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.process_name)
}
inline void ServiceRecordProto::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  process_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ServiceRecordProto.process_name)
}
inline void ServiceRecordProto::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ServiceRecordProto.process_name)
}
inline void ServiceRecordProto::set_process_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ServiceRecordProto.process_name)
}
inline std::string* ServiceRecordProto::mutable_process_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.process_name)
  return process_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceRecordProto::release_process_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.process_name)
  if (!has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return process_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceRecordProto::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  process_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.process_name)
}

// optional string permission = 7;
inline bool ServiceRecordProto::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceRecordProto::clear_permission() {
  permission_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ServiceRecordProto::permission() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.permission)
  return permission_.GetNoArena();
}
inline void ServiceRecordProto::set_permission(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.permission)
}
inline void ServiceRecordProto::set_permission(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  permission_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ServiceRecordProto.permission)
}
inline void ServiceRecordProto::set_permission(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ServiceRecordProto.permission)
}
inline void ServiceRecordProto::set_permission(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  permission_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ServiceRecordProto.permission)
}
inline std::string* ServiceRecordProto::mutable_permission() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.permission)
  return permission_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceRecordProto::release_permission() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.permission)
  if (!has_permission()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return permission_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceRecordProto::set_allocated_permission(std::string* permission) {
  if (permission != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  permission_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permission);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.permission)
}

// optional .com.android.server.am.ServiceRecordProto.AppInfo appinfo = 8;
inline bool ServiceRecordProto::has_appinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceRecordProto::clear_appinfo() {
  if (appinfo_ != nullptr) appinfo_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::am::ServiceRecordProto_AppInfo& ServiceRecordProto::appinfo() const {
  const ::com::android::server::am::ServiceRecordProto_AppInfo* p = appinfo_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.appinfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ServiceRecordProto_AppInfo*>(
      &::com::android::server::am::_ServiceRecordProto_AppInfo_default_instance_);
}
inline ::com::android::server::am::ServiceRecordProto_AppInfo* ServiceRecordProto::release_appinfo() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.appinfo)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::am::ServiceRecordProto_AppInfo* temp = appinfo_;
  appinfo_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ServiceRecordProto_AppInfo* ServiceRecordProto::mutable_appinfo() {
  _has_bits_[0] |= 0x00000020u;
  if (appinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_AppInfo>(GetArenaNoVirtual());
    appinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.appinfo)
  return appinfo_;
}
inline void ServiceRecordProto::set_allocated_appinfo(::com::android::server::am::ServiceRecordProto_AppInfo* appinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete appinfo_;
  }
  if (appinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      appinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  appinfo_ = appinfo;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.appinfo)
}

// optional .com.android.server.am.ProcessRecordProto app = 9;
inline bool ServiceRecordProto::has_app() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceRecordProto::clear_app() {
  if (app_ != nullptr) app_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::server::am::ProcessRecordProto& ServiceRecordProto::app() const {
  const ::com::android::server::am::ProcessRecordProto* p = app_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.app)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ServiceRecordProto::release_app() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.app)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::server::am::ProcessRecordProto* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ServiceRecordProto::mutable_app() {
  _has_bits_[0] |= 0x00000040u;
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.app)
  return app_;
}
inline void ServiceRecordProto::set_allocated_app(::com::android::server::am::ProcessRecordProto* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.app)
}

// optional .com.android.server.am.ProcessRecordProto isolated_proc = 10;
inline bool ServiceRecordProto::has_isolated_proc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceRecordProto::clear_isolated_proc() {
  if (isolated_proc_ != nullptr) isolated_proc_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::com::android::server::am::ProcessRecordProto& ServiceRecordProto::isolated_proc() const {
  const ::com::android::server::am::ProcessRecordProto* p = isolated_proc_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.isolated_proc)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ServiceRecordProto::release_isolated_proc() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.isolated_proc)
  _has_bits_[0] &= ~0x00000080u;
  ::com::android::server::am::ProcessRecordProto* temp = isolated_proc_;
  isolated_proc_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ServiceRecordProto::mutable_isolated_proc() {
  _has_bits_[0] |= 0x00000080u;
  if (isolated_proc_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    isolated_proc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.isolated_proc)
  return isolated_proc_;
}
inline void ServiceRecordProto::set_allocated_isolated_proc(::com::android::server::am::ProcessRecordProto* isolated_proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete isolated_proc_;
  }
  if (isolated_proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      isolated_proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, isolated_proc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  isolated_proc_ = isolated_proc;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.isolated_proc)
}

// optional bool whitelist_manager = 11;
inline bool ServiceRecordProto::has_whitelist_manager() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ServiceRecordProto::clear_whitelist_manager() {
  whitelist_manager_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool ServiceRecordProto::whitelist_manager() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.whitelist_manager)
  return whitelist_manager_;
}
inline void ServiceRecordProto::set_whitelist_manager(bool value) {
  _has_bits_[0] |= 0x00080000u;
  whitelist_manager_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.whitelist_manager)
}

// optional bool delayed = 12;
inline bool ServiceRecordProto::has_delayed() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ServiceRecordProto::clear_delayed() {
  delayed_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool ServiceRecordProto::delayed() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.delayed)
  return delayed_;
}
inline void ServiceRecordProto::set_delayed(bool value) {
  _has_bits_[0] |= 0x00100000u;
  delayed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.delayed)
}

// optional .com.android.server.am.ServiceRecordProto.Foreground foreground = 13;
inline bool ServiceRecordProto::has_foreground() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceRecordProto::clear_foreground() {
  if (foreground_ != nullptr) foreground_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::com::android::server::am::ServiceRecordProto_Foreground& ServiceRecordProto::foreground() const {
  const ::com::android::server::am::ServiceRecordProto_Foreground* p = foreground_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.foreground)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ServiceRecordProto_Foreground*>(
      &::com::android::server::am::_ServiceRecordProto_Foreground_default_instance_);
}
inline ::com::android::server::am::ServiceRecordProto_Foreground* ServiceRecordProto::release_foreground() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.foreground)
  _has_bits_[0] &= ~0x00000100u;
  ::com::android::server::am::ServiceRecordProto_Foreground* temp = foreground_;
  foreground_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ServiceRecordProto_Foreground* ServiceRecordProto::mutable_foreground() {
  _has_bits_[0] |= 0x00000100u;
  if (foreground_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_Foreground>(GetArenaNoVirtual());
    foreground_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.foreground)
  return foreground_;
}
inline void ServiceRecordProto::set_allocated_foreground(::com::android::server::am::ServiceRecordProto_Foreground* foreground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete foreground_;
  }
  if (foreground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  foreground_ = foreground;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.foreground)
}

// optional .android.util.Duration create_real_time = 14;
inline bool ServiceRecordProto::has_create_real_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto::create_real_time() const {
  const ::android::util::Duration* p = create_real_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.create_real_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto::release_create_real_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.create_real_time)
  _has_bits_[0] &= ~0x00000200u;
  ::android::util::Duration* temp = create_real_time_;
  create_real_time_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto::mutable_create_real_time() {
  _has_bits_[0] |= 0x00000200u;
  if (create_real_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    create_real_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.create_real_time)
  return create_real_time_;
}
inline void ServiceRecordProto::set_allocated_create_real_time(::android::util::Duration* create_real_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_real_time_);
  }
  if (create_real_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      create_real_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_real_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  create_real_time_ = create_real_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.create_real_time)
}

// optional .android.util.Duration starting_bg_timeout = 15;
inline bool ServiceRecordProto::has_starting_bg_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto::starting_bg_timeout() const {
  const ::android::util::Duration* p = starting_bg_timeout_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.starting_bg_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto::release_starting_bg_timeout() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.starting_bg_timeout)
  _has_bits_[0] &= ~0x00000400u;
  ::android::util::Duration* temp = starting_bg_timeout_;
  starting_bg_timeout_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto::mutable_starting_bg_timeout() {
  _has_bits_[0] |= 0x00000400u;
  if (starting_bg_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    starting_bg_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.starting_bg_timeout)
  return starting_bg_timeout_;
}
inline void ServiceRecordProto::set_allocated_starting_bg_timeout(::android::util::Duration* starting_bg_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starting_bg_timeout_);
  }
  if (starting_bg_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      starting_bg_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starting_bg_timeout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  starting_bg_timeout_ = starting_bg_timeout;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.starting_bg_timeout)
}

// optional .android.util.Duration last_activity_time = 16;
inline bool ServiceRecordProto::has_last_activity_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto::last_activity_time() const {
  const ::android::util::Duration* p = last_activity_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.last_activity_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto::release_last_activity_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.last_activity_time)
  _has_bits_[0] &= ~0x00000800u;
  ::android::util::Duration* temp = last_activity_time_;
  last_activity_time_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto::mutable_last_activity_time() {
  _has_bits_[0] |= 0x00000800u;
  if (last_activity_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    last_activity_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.last_activity_time)
  return last_activity_time_;
}
inline void ServiceRecordProto::set_allocated_last_activity_time(::android::util::Duration* last_activity_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_activity_time_);
  }
  if (last_activity_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_activity_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_activity_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  last_activity_time_ = last_activity_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.last_activity_time)
}

// optional .android.util.Duration restart_time = 17;
inline bool ServiceRecordProto::has_restart_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto::restart_time() const {
  const ::android::util::Duration* p = restart_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.restart_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto::release_restart_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.restart_time)
  _has_bits_[0] &= ~0x00001000u;
  ::android::util::Duration* temp = restart_time_;
  restart_time_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto::mutable_restart_time() {
  _has_bits_[0] |= 0x00001000u;
  if (restart_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    restart_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.restart_time)
  return restart_time_;
}
inline void ServiceRecordProto::set_allocated_restart_time(::android::util::Duration* restart_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(restart_time_);
  }
  if (restart_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      restart_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restart_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  restart_time_ = restart_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.restart_time)
}

// optional bool created_from_fg = 18;
inline bool ServiceRecordProto::has_created_from_fg() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ServiceRecordProto::clear_created_from_fg() {
  created_from_fg_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ServiceRecordProto::created_from_fg() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.created_from_fg)
  return created_from_fg_;
}
inline void ServiceRecordProto::set_created_from_fg(bool value) {
  _has_bits_[0] |= 0x00200000u;
  created_from_fg_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.created_from_fg)
}

// optional .com.android.server.am.ServiceRecordProto.Start start = 19;
inline bool ServiceRecordProto::has_start() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ServiceRecordProto::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::com::android::server::am::ServiceRecordProto_Start& ServiceRecordProto::start() const {
  const ::com::android::server::am::ServiceRecordProto_Start* p = start_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.start)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ServiceRecordProto_Start*>(
      &::com::android::server::am::_ServiceRecordProto_Start_default_instance_);
}
inline ::com::android::server::am::ServiceRecordProto_Start* ServiceRecordProto::release_start() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.start)
  _has_bits_[0] &= ~0x00002000u;
  ::com::android::server::am::ServiceRecordProto_Start* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ServiceRecordProto_Start* ServiceRecordProto::mutable_start() {
  _has_bits_[0] |= 0x00002000u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_Start>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.start)
  return start_;
}
inline void ServiceRecordProto::set_allocated_start(::com::android::server::am::ServiceRecordProto_Start* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.start)
}

// optional .com.android.server.am.ServiceRecordProto.ExecuteNesting execute = 20;
inline bool ServiceRecordProto::has_execute() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ServiceRecordProto::clear_execute() {
  if (execute_ != nullptr) execute_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::com::android::server::am::ServiceRecordProto_ExecuteNesting& ServiceRecordProto::execute() const {
  const ::com::android::server::am::ServiceRecordProto_ExecuteNesting* p = execute_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.execute)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ServiceRecordProto_ExecuteNesting*>(
      &::com::android::server::am::_ServiceRecordProto_ExecuteNesting_default_instance_);
}
inline ::com::android::server::am::ServiceRecordProto_ExecuteNesting* ServiceRecordProto::release_execute() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.execute)
  _has_bits_[0] &= ~0x00004000u;
  ::com::android::server::am::ServiceRecordProto_ExecuteNesting* temp = execute_;
  execute_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ServiceRecordProto_ExecuteNesting* ServiceRecordProto::mutable_execute() {
  _has_bits_[0] |= 0x00004000u;
  if (execute_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_ExecuteNesting>(GetArenaNoVirtual());
    execute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.execute)
  return execute_;
}
inline void ServiceRecordProto::set_allocated_execute(::com::android::server::am::ServiceRecordProto_ExecuteNesting* execute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete execute_;
  }
  if (execute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execute, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  execute_ = execute;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.execute)
}

// optional .android.util.Duration destory_time = 21;
inline bool ServiceRecordProto::has_destory_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::util::Duration& ServiceRecordProto::destory_time() const {
  const ::android::util::Duration* p = destory_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.destory_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ServiceRecordProto::release_destory_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.destory_time)
  _has_bits_[0] &= ~0x00008000u;
  ::android::util::Duration* temp = destory_time_;
  destory_time_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ServiceRecordProto::mutable_destory_time() {
  _has_bits_[0] |= 0x00008000u;
  if (destory_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    destory_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.destory_time)
  return destory_time_;
}
inline void ServiceRecordProto::set_allocated_destory_time(::android::util::Duration* destory_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(destory_time_);
  }
  if (destory_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      destory_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destory_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  destory_time_ = destory_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.destory_time)
}

// optional .com.android.server.am.ServiceRecordProto.Crash crash = 22;
inline bool ServiceRecordProto::has_crash() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ServiceRecordProto::clear_crash() {
  if (crash_ != nullptr) crash_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::com::android::server::am::ServiceRecordProto_Crash& ServiceRecordProto::crash() const {
  const ::com::android::server::am::ServiceRecordProto_Crash* p = crash_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.crash)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ServiceRecordProto_Crash*>(
      &::com::android::server::am::_ServiceRecordProto_Crash_default_instance_);
}
inline ::com::android::server::am::ServiceRecordProto_Crash* ServiceRecordProto::release_crash() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ServiceRecordProto.crash)
  _has_bits_[0] &= ~0x00010000u;
  ::com::android::server::am::ServiceRecordProto_Crash* temp = crash_;
  crash_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ServiceRecordProto_Crash* ServiceRecordProto::mutable_crash() {
  _has_bits_[0] |= 0x00010000u;
  if (crash_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ServiceRecordProto_Crash>(GetArenaNoVirtual());
    crash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.crash)
  return crash_;
}
inline void ServiceRecordProto::set_allocated_crash(::com::android::server::am::ServiceRecordProto_Crash* crash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete crash_;
  }
  if (crash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crash, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  crash_ = crash;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ServiceRecordProto.crash)
}

// repeated .com.android.server.am.ServiceRecordProto.StartItem delivered_starts = 23;
inline int ServiceRecordProto::delivered_starts_size() const {
  return delivered_starts_.size();
}
inline void ServiceRecordProto::clear_delivered_starts() {
  delivered_starts_.Clear();
}
inline ::com::android::server::am::ServiceRecordProto_StartItem* ServiceRecordProto::mutable_delivered_starts(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.delivered_starts)
  return delivered_starts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem >*
ServiceRecordProto::mutable_delivered_starts() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ServiceRecordProto.delivered_starts)
  return &delivered_starts_;
}
inline const ::com::android::server::am::ServiceRecordProto_StartItem& ServiceRecordProto::delivered_starts(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.delivered_starts)
  return delivered_starts_.Get(index);
}
inline ::com::android::server::am::ServiceRecordProto_StartItem* ServiceRecordProto::add_delivered_starts() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ServiceRecordProto.delivered_starts)
  return delivered_starts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem >&
ServiceRecordProto::delivered_starts() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ServiceRecordProto.delivered_starts)
  return delivered_starts_;
}

// repeated .com.android.server.am.ServiceRecordProto.StartItem pending_starts = 24;
inline int ServiceRecordProto::pending_starts_size() const {
  return pending_starts_.size();
}
inline void ServiceRecordProto::clear_pending_starts() {
  pending_starts_.Clear();
}
inline ::com::android::server::am::ServiceRecordProto_StartItem* ServiceRecordProto::mutable_pending_starts(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.pending_starts)
  return pending_starts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem >*
ServiceRecordProto::mutable_pending_starts() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ServiceRecordProto.pending_starts)
  return &pending_starts_;
}
inline const ::com::android::server::am::ServiceRecordProto_StartItem& ServiceRecordProto::pending_starts(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.pending_starts)
  return pending_starts_.Get(index);
}
inline ::com::android::server::am::ServiceRecordProto_StartItem* ServiceRecordProto::add_pending_starts() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ServiceRecordProto.pending_starts)
  return pending_starts_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ServiceRecordProto_StartItem >&
ServiceRecordProto::pending_starts() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ServiceRecordProto.pending_starts)
  return pending_starts_;
}

// repeated .com.android.server.am.IntentBindRecordProto bindings = 25;
inline int ServiceRecordProto::bindings_size() const {
  return bindings_.size();
}
inline void ServiceRecordProto::clear_bindings() {
  bindings_.Clear();
}
inline ::com::android::server::am::IntentBindRecordProto* ServiceRecordProto::mutable_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.bindings)
  return bindings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::IntentBindRecordProto >*
ServiceRecordProto::mutable_bindings() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ServiceRecordProto.bindings)
  return &bindings_;
}
inline const ::com::android::server::am::IntentBindRecordProto& ServiceRecordProto::bindings(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.bindings)
  return bindings_.Get(index);
}
inline ::com::android::server::am::IntentBindRecordProto* ServiceRecordProto::add_bindings() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ServiceRecordProto.bindings)
  return bindings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::IntentBindRecordProto >&
ServiceRecordProto::bindings() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ServiceRecordProto.bindings)
  return bindings_;
}

// repeated .com.android.server.am.ConnectionRecordProto connections = 26;
inline int ServiceRecordProto::connections_size() const {
  return connections_.size();
}
inline void ServiceRecordProto::clear_connections() {
  connections_.Clear();
}
inline ::com::android::server::am::ConnectionRecordProto* ServiceRecordProto::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ServiceRecordProto.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ConnectionRecordProto >*
ServiceRecordProto::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ServiceRecordProto.connections)
  return &connections_;
}
inline const ::com::android::server::am::ConnectionRecordProto& ServiceRecordProto::connections(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.connections)
  return connections_.Get(index);
}
inline ::com::android::server::am::ConnectionRecordProto* ServiceRecordProto::add_connections() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ServiceRecordProto.connections)
  return connections_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ConnectionRecordProto >&
ServiceRecordProto::connections() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ServiceRecordProto.connections)
  return connections_;
}

// optional bool allow_while_in_use_permission_in_fgs = 27;
inline bool ServiceRecordProto::has_allow_while_in_use_permission_in_fgs() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ServiceRecordProto::clear_allow_while_in_use_permission_in_fgs() {
  allow_while_in_use_permission_in_fgs_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ServiceRecordProto::allow_while_in_use_permission_in_fgs() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ServiceRecordProto.allow_while_in_use_permission_in_fgs)
  return allow_while_in_use_permission_in_fgs_;
}
inline void ServiceRecordProto::set_allow_while_in_use_permission_in_fgs(bool value) {
  _has_bits_[0] |= 0x00400000u;
  allow_while_in_use_permission_in_fgs_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ServiceRecordProto.allow_while_in_use_permission_in_fgs)
}

// -------------------------------------------------------------------

// ConnectionRecordProto

// optional string hex_hash = 1;
inline bool ConnectionRecordProto::has_hex_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionRecordProto::clear_hex_hash() {
  hex_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConnectionRecordProto::hex_hash() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ConnectionRecordProto.hex_hash)
  return hex_hash_.GetNoArena();
}
inline void ConnectionRecordProto::set_hex_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ConnectionRecordProto.hex_hash)
}
inline void ConnectionRecordProto::set_hex_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hex_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ConnectionRecordProto.hex_hash)
}
inline void ConnectionRecordProto::set_hex_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ConnectionRecordProto.hex_hash)
}
inline void ConnectionRecordProto::set_hex_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hex_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ConnectionRecordProto.hex_hash)
}
inline std::string* ConnectionRecordProto::mutable_hex_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ConnectionRecordProto.hex_hash)
  return hex_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectionRecordProto::release_hex_hash() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ConnectionRecordProto.hex_hash)
  if (!has_hex_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hex_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRecordProto::set_allocated_hex_hash(std::string* hex_hash) {
  if (hex_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hex_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hex_hash);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ConnectionRecordProto.hex_hash)
}

// optional int32 user_id = 2;
inline bool ConnectionRecordProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionRecordProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectionRecordProto::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ConnectionRecordProto.user_id)
  return user_id_;
}
inline void ConnectionRecordProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ConnectionRecordProto.user_id)
}

// repeated .com.android.server.am.ConnectionRecordProto.Flag flags = 3;
inline int ConnectionRecordProto::flags_size() const {
  return flags_.size();
}
inline void ConnectionRecordProto::clear_flags() {
  flags_.Clear();
}
inline ::com::android::server::am::ConnectionRecordProto_Flag ConnectionRecordProto::flags(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ConnectionRecordProto.flags)
  return static_cast< ::com::android::server::am::ConnectionRecordProto_Flag >(flags_.Get(index));
}
inline void ConnectionRecordProto::set_flags(int index, ::com::android::server::am::ConnectionRecordProto_Flag value) {
  assert(::com::android::server::am::ConnectionRecordProto_Flag_IsValid(value));
  flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ConnectionRecordProto.flags)
}
inline void ConnectionRecordProto::add_flags(::com::android::server::am::ConnectionRecordProto_Flag value) {
  assert(::com::android::server::am::ConnectionRecordProto_Flag_IsValid(value));
  flags_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.ConnectionRecordProto.flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ConnectionRecordProto::flags() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ConnectionRecordProto.flags)
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ConnectionRecordProto::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ConnectionRecordProto.flags)
  return &flags_;
}

// optional string service_name = 4;
inline bool ConnectionRecordProto::has_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionRecordProto::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConnectionRecordProto::service_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ConnectionRecordProto.service_name)
  return service_name_.GetNoArena();
}
inline void ConnectionRecordProto::set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ConnectionRecordProto.service_name)
}
inline void ConnectionRecordProto::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ConnectionRecordProto.service_name)
}
inline void ConnectionRecordProto::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ConnectionRecordProto.service_name)
}
inline void ConnectionRecordProto::set_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ConnectionRecordProto.service_name)
}
inline std::string* ConnectionRecordProto::mutable_service_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ConnectionRecordProto.service_name)
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectionRecordProto::release_service_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ConnectionRecordProto.service_name)
  if (!has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRecordProto::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ConnectionRecordProto.service_name)
}

// -------------------------------------------------------------------

// AppBindRecordProto

// optional string service_name = 1;
inline bool AppBindRecordProto::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppBindRecordProto::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppBindRecordProto::service_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppBindRecordProto.service_name)
  return service_name_.GetNoArena();
}
inline void AppBindRecordProto::set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppBindRecordProto.service_name)
}
inline void AppBindRecordProto::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppBindRecordProto.service_name)
}
inline void AppBindRecordProto::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppBindRecordProto.service_name)
}
inline void AppBindRecordProto::set_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppBindRecordProto.service_name)
}
inline std::string* AppBindRecordProto::mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppBindRecordProto.service_name)
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppBindRecordProto::release_service_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppBindRecordProto.service_name)
  if (!has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppBindRecordProto::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppBindRecordProto.service_name)
}

// optional string client_proc_name = 2;
inline bool AppBindRecordProto::has_client_proc_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppBindRecordProto::clear_client_proc_name() {
  client_proc_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppBindRecordProto::client_proc_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppBindRecordProto.client_proc_name)
  return client_proc_name_.GetNoArena();
}
inline void AppBindRecordProto::set_client_proc_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppBindRecordProto.client_proc_name)
}
inline void AppBindRecordProto::set_client_proc_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  client_proc_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppBindRecordProto.client_proc_name)
}
inline void AppBindRecordProto::set_client_proc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  client_proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppBindRecordProto.client_proc_name)
}
inline void AppBindRecordProto::set_client_proc_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  client_proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppBindRecordProto.client_proc_name)
}
inline std::string* AppBindRecordProto::mutable_client_proc_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppBindRecordProto.client_proc_name)
  return client_proc_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppBindRecordProto::release_client_proc_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppBindRecordProto.client_proc_name)
  if (!has_client_proc_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return client_proc_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppBindRecordProto::set_allocated_client_proc_name(std::string* client_proc_name) {
  if (client_proc_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_proc_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_proc_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppBindRecordProto.client_proc_name)
}

// repeated string connections = 3;
inline int AppBindRecordProto::connections_size() const {
  return connections_.size();
}
inline void AppBindRecordProto::clear_connections() {
  connections_.Clear();
}
inline const std::string& AppBindRecordProto::connections(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppBindRecordProto.connections)
  return connections_.Get(index);
}
inline std::string* AppBindRecordProto::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppBindRecordProto.connections)
  return connections_.Mutable(index);
}
inline void AppBindRecordProto::set_connections(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.AppBindRecordProto.connections)
  connections_.Mutable(index)->assign(value);
}
inline void AppBindRecordProto::set_connections(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.AppBindRecordProto.connections)
  connections_.Mutable(index)->assign(std::move(value));
}
inline void AppBindRecordProto::set_connections(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  connections_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppBindRecordProto.connections)
}
inline void AppBindRecordProto::set_connections(int index, const char* value, size_t size) {
  connections_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppBindRecordProto.connections)
}
inline std::string* AppBindRecordProto::add_connections() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.am.AppBindRecordProto.connections)
  return connections_.Add();
}
inline void AppBindRecordProto::add_connections(const std::string& value) {
  connections_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.AppBindRecordProto.connections)
}
inline void AppBindRecordProto::add_connections(std::string&& value) {
  connections_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.am.AppBindRecordProto.connections)
}
inline void AppBindRecordProto::add_connections(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  connections_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.am.AppBindRecordProto.connections)
}
inline void AppBindRecordProto::add_connections(const char* value, size_t size) {
  connections_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.am.AppBindRecordProto.connections)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppBindRecordProto::connections() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppBindRecordProto.connections)
  return connections_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppBindRecordProto::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppBindRecordProto.connections)
  return &connections_;
}

// -------------------------------------------------------------------

// IntentBindRecordProto

// optional .android.content.IntentProto intent = 1;
inline bool IntentBindRecordProto::has_intent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::IntentProto& IntentBindRecordProto::intent() const {
  const ::android::content::IntentProto* p = intent_;
  // @@protoc_insertion_point(field_get:com.android.server.am.IntentBindRecordProto.intent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::IntentProto*>(
      &::android::content::_IntentProto_default_instance_);
}
inline ::android::content::IntentProto* IntentBindRecordProto::release_intent() {
  // @@protoc_insertion_point(field_release:com.android.server.am.IntentBindRecordProto.intent)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::IntentProto* temp = intent_;
  intent_ = nullptr;
  return temp;
}
inline ::android::content::IntentProto* IntentBindRecordProto::mutable_intent() {
  _has_bits_[0] |= 0x00000002u;
  if (intent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::IntentProto>(GetArenaNoVirtual());
    intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.IntentBindRecordProto.intent)
  return intent_;
}
inline void IntentBindRecordProto::set_allocated_intent(::android::content::IntentProto* intent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intent_);
  }
  if (intent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.IntentBindRecordProto.intent)
}

// optional string binder = 2;
inline bool IntentBindRecordProto::has_binder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntentBindRecordProto::clear_binder() {
  binder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IntentBindRecordProto::binder() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.IntentBindRecordProto.binder)
  return binder_.GetNoArena();
}
inline void IntentBindRecordProto::set_binder(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  binder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.IntentBindRecordProto.binder)
}
inline void IntentBindRecordProto::set_binder(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  binder_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.IntentBindRecordProto.binder)
}
inline void IntentBindRecordProto::set_binder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  binder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.IntentBindRecordProto.binder)
}
inline void IntentBindRecordProto::set_binder(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  binder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.IntentBindRecordProto.binder)
}
inline std::string* IntentBindRecordProto::mutable_binder() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.IntentBindRecordProto.binder)
  return binder_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentBindRecordProto::release_binder() {
  // @@protoc_insertion_point(field_release:com.android.server.am.IntentBindRecordProto.binder)
  if (!has_binder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return binder_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentBindRecordProto::set_allocated_binder(std::string* binder) {
  if (binder != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  binder_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binder);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.IntentBindRecordProto.binder)
}

// optional bool auto_create = 3;
inline bool IntentBindRecordProto::has_auto_create() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntentBindRecordProto::clear_auto_create() {
  auto_create_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool IntentBindRecordProto::auto_create() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.IntentBindRecordProto.auto_create)
  return auto_create_;
}
inline void IntentBindRecordProto::set_auto_create(bool value) {
  _has_bits_[0] |= 0x00000004u;
  auto_create_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.IntentBindRecordProto.auto_create)
}

// optional bool requested = 4;
inline bool IntentBindRecordProto::has_requested() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntentBindRecordProto::clear_requested() {
  requested_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool IntentBindRecordProto::requested() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.IntentBindRecordProto.requested)
  return requested_;
}
inline void IntentBindRecordProto::set_requested(bool value) {
  _has_bits_[0] |= 0x00000008u;
  requested_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.IntentBindRecordProto.requested)
}

// optional bool received = 5;
inline bool IntentBindRecordProto::has_received() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IntentBindRecordProto::clear_received() {
  received_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool IntentBindRecordProto::received() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.IntentBindRecordProto.received)
  return received_;
}
inline void IntentBindRecordProto::set_received(bool value) {
  _has_bits_[0] |= 0x00000010u;
  received_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.IntentBindRecordProto.received)
}

// optional bool has_bound = 6;
inline bool IntentBindRecordProto::has_has_bound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IntentBindRecordProto::clear_has_bound() {
  has_bound_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool IntentBindRecordProto::has_bound() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.IntentBindRecordProto.has_bound)
  return has_bound_;
}
inline void IntentBindRecordProto::set_has_bound(bool value) {
  _has_bits_[0] |= 0x00000020u;
  has_bound_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.IntentBindRecordProto.has_bound)
}

// optional bool do_rebind = 7;
inline bool IntentBindRecordProto::has_do_rebind() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IntentBindRecordProto::clear_do_rebind() {
  do_rebind_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool IntentBindRecordProto::do_rebind() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.IntentBindRecordProto.do_rebind)
  return do_rebind_;
}
inline void IntentBindRecordProto::set_do_rebind(bool value) {
  _has_bits_[0] |= 0x00000040u;
  do_rebind_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.IntentBindRecordProto.do_rebind)
}

// repeated .com.android.server.am.AppBindRecordProto apps = 8;
inline int IntentBindRecordProto::apps_size() const {
  return apps_.size();
}
inline void IntentBindRecordProto::clear_apps() {
  apps_.Clear();
}
inline ::com::android::server::am::AppBindRecordProto* IntentBindRecordProto::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.IntentBindRecordProto.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppBindRecordProto >*
IntentBindRecordProto::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.IntentBindRecordProto.apps)
  return &apps_;
}
inline const ::com::android::server::am::AppBindRecordProto& IntentBindRecordProto::apps(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.IntentBindRecordProto.apps)
  return apps_.Get(index);
}
inline ::com::android::server::am::AppBindRecordProto* IntentBindRecordProto::add_apps() {
  // @@protoc_insertion_point(field_add:com.android.server.am.IntentBindRecordProto.apps)
  return apps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppBindRecordProto >&
IntentBindRecordProto::apps() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.IntentBindRecordProto.apps)
  return apps_;
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_LruProcesses

// optional int32 size = 1;
inline bool ActivityManagerServiceDumpProcessesProto_LruProcesses::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_LruProcesses::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_LruProcesses::size() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.size)
  return size_;
}
inline void ActivityManagerServiceDumpProcessesProto_LruProcesses::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.size)
}

// optional int32 non_act_at = 2;
inline bool ActivityManagerServiceDumpProcessesProto_LruProcesses::has_non_act_at() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_LruProcesses::clear_non_act_at() {
  non_act_at_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_LruProcesses::non_act_at() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.non_act_at)
  return non_act_at_;
}
inline void ActivityManagerServiceDumpProcessesProto_LruProcesses::set_non_act_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  non_act_at_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.non_act_at)
}

// optional int32 non_svc_at = 3;
inline bool ActivityManagerServiceDumpProcessesProto_LruProcesses::has_non_svc_at() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_LruProcesses::clear_non_svc_at() {
  non_svc_at_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_LruProcesses::non_svc_at() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.non_svc_at)
  return non_svc_at_;
}
inline void ActivityManagerServiceDumpProcessesProto_LruProcesses::set_non_svc_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  non_svc_at_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.non_svc_at)
}

// repeated .com.android.server.am.ProcessOomProto list = 4;
inline int ActivityManagerServiceDumpProcessesProto_LruProcesses::list_size() const {
  return list_.size();
}
inline void ActivityManagerServiceDumpProcessesProto_LruProcesses::clear_list() {
  list_.Clear();
}
inline ::com::android::server::am::ProcessOomProto* ActivityManagerServiceDumpProcessesProto_LruProcesses::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessOomProto >*
ActivityManagerServiceDumpProcessesProto_LruProcesses::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.list)
  return &list_;
}
inline const ::com::android::server::am::ProcessOomProto& ActivityManagerServiceDumpProcessesProto_LruProcesses::list(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.list)
  return list_.Get(index);
}
inline ::com::android::server::am::ProcessOomProto* ActivityManagerServiceDumpProcessesProto_LruProcesses::add_list() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessOomProto >&
ActivityManagerServiceDumpProcessesProto_LruProcesses::list() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses.list)
  return list_;
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage

// optional string package = 1;
inline bool ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::package() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package)
  return package_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package)
}
inline void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package)
}
inline void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package)
}
inline void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::release_package() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.package)
}

// optional int32 mode = 2;
inline bool ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.mode)
  return mode_;
}
inline void ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage.mode)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState

// optional int32 uid = 1;
inline bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState.uid)
  return uid_;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState.uid)
}

// optional int32 state = 2;
inline bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::state() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState.state)
  return state_;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState.state)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto

// optional int32 uid = 1;
inline bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.uid)
  return uid_;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.uid)
}

// optional string package = 2;
inline bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::package() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package)
  return package_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package)
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package)
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package)
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::release_package() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.package)
}

// repeated .android.app.UidObserverFlag flags = 3;
inline int ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::flags_size() const {
  return flags_.size();
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::clear_flags() {
  flags_.Clear();
}
inline ::android::app::UidObserverFlag ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::flags(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.flags)
  return static_cast< ::android::app::UidObserverFlag >(flags_.Get(index));
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::set_flags(int index, ::android::app::UidObserverFlag value) {
  assert(::android::app::UidObserverFlag_IsValid(value));
  flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.flags)
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::add_flags(::android::app::UidObserverFlag value) {
  assert(::android::app::UidObserverFlag_IsValid(value));
  flags_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::flags() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.flags)
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.flags)
  return &flags_;
}

// optional int32 cut_point = 4;
inline bool ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::has_cut_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::clear_cut_point() {
  cut_point_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::cut_point() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.cut_point)
  return cut_point_;
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::set_cut_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cut_point_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.cut_point)
}

// repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.ProcState last_proc_states = 5;
inline int ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::last_proc_states_size() const {
  return last_proc_states_.size();
}
inline void ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::clear_last_proc_states() {
  last_proc_states_.Clear();
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::mutable_last_proc_states(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.last_proc_states)
  return last_proc_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState >*
ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::mutable_last_proc_states() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.last_proc_states)
  return &last_proc_states_;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState& ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::last_proc_states(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.last_proc_states)
  return last_proc_states_.Get(index);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState* ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::add_last_proc_states() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.last_proc_states)
  return last_proc_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto_ProcState >&
ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto::last_proc_states() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto.last_proc_states)
  return last_proc_states_;
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist

// optional int32 target_uid = 1;
inline bool ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::has_target_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::clear_target_uid() {
  target_uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::target_uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.target_uid)
  return target_uid_;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_target_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.target_uid)
}

// optional int64 duration_ms = 2;
inline bool ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::duration_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.duration_ms)
  return duration_ms_;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.duration_ms)
}

// optional string tag = 3;
inline bool ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::tag() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag)
  return tag_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag)
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag)
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag)
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::release_tag() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.tag)
}

// optional int32 type = 4;
inline bool ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::type() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.type)
  return type_;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.type)
}

// optional int32 reason_code = 5;
inline bool ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::has_reason_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::clear_reason_code() {
  reason_code_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::reason_code() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.reason_code)
  return reason_code_;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_reason_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  reason_code_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.reason_code)
}

// optional int32 calling_uid = 6;
inline bool ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::has_calling_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::clear_calling_uid() {
  calling_uid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::calling_uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.calling_uid)
  return calling_uid_;
}
inline void ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist::set_calling_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  calling_uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist.calling_uid)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_SleepStatus

// optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 1;
inline bool ActivityManagerServiceDumpProcessesProto_SleepStatus::has_wakefulness() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::clear_wakefulness() {
  wakefulness_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::os::PowerManagerInternalProto_Wakefulness ActivityManagerServiceDumpProcessesProto_SleepStatus::wakefulness() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.wakefulness)
  return static_cast< ::android::os::PowerManagerInternalProto_Wakefulness >(wakefulness_);
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::set_wakefulness(::android::os::PowerManagerInternalProto_Wakefulness value) {
  assert(::android::os::PowerManagerInternalProto_Wakefulness_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  wakefulness_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.wakefulness)
}

// repeated string sleep_tokens = 2 [(.android.privacy) = {
inline int ActivityManagerServiceDumpProcessesProto_SleepStatus::sleep_tokens_size() const {
  return sleep_tokens_.size();
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::clear_sleep_tokens() {
  sleep_tokens_.Clear();
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_SleepStatus::sleep_tokens(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
  return sleep_tokens_.Get(index);
}
inline std::string* ActivityManagerServiceDumpProcessesProto_SleepStatus::mutable_sleep_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
  return sleep_tokens_.Mutable(index);
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::set_sleep_tokens(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
  sleep_tokens_.Mutable(index)->assign(value);
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::set_sleep_tokens(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
  sleep_tokens_.Mutable(index)->assign(std::move(value));
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::set_sleep_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sleep_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::set_sleep_tokens(int index, const char* value, size_t size) {
  sleep_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_SleepStatus::add_sleep_tokens() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
  return sleep_tokens_.Add();
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::add_sleep_tokens(const std::string& value) {
  sleep_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::add_sleep_tokens(std::string&& value) {
  sleep_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::add_sleep_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sleep_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::add_sleep_tokens(const char* value, size_t size) {
  sleep_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ActivityManagerServiceDumpProcessesProto_SleepStatus::sleep_tokens() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
  return sleep_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ActivityManagerServiceDumpProcessesProto_SleepStatus::mutable_sleep_tokens() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleep_tokens)
  return &sleep_tokens_;
}

// optional bool sleeping = 3;
inline bool ActivityManagerServiceDumpProcessesProto_SleepStatus::has_sleeping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::clear_sleeping() {
  sleeping_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ActivityManagerServiceDumpProcessesProto_SleepStatus::sleeping() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleeping)
  return sleeping_;
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::set_sleeping(bool value) {
  _has_bits_[0] |= 0x00000002u;
  sleeping_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.sleeping)
}

// optional bool shutting_down = 4;
inline bool ActivityManagerServiceDumpProcessesProto_SleepStatus::has_shutting_down() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::clear_shutting_down() {
  shutting_down_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ActivityManagerServiceDumpProcessesProto_SleepStatus::shutting_down() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.shutting_down)
  return shutting_down_;
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::set_shutting_down(bool value) {
  _has_bits_[0] |= 0x00000004u;
  shutting_down_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.shutting_down)
}

// optional bool test_pss_mode = 5;
inline bool ActivityManagerServiceDumpProcessesProto_SleepStatus::has_test_pss_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::clear_test_pss_mode() {
  test_pss_mode_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ActivityManagerServiceDumpProcessesProto_SleepStatus::test_pss_mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.test_pss_mode)
  return test_pss_mode_;
}
inline void ActivityManagerServiceDumpProcessesProto_SleepStatus::set_test_pss_mode(bool value) {
  _has_bits_[0] |= 0x00000008u;
  test_pss_mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus.test_pss_mode)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_Voice

// optional string session = 1;
inline bool ActivityManagerServiceDumpProcessesProto_Voice::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_Voice::clear_session() {
  session_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_Voice::session() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session)
  return session_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_Voice::set_session(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session)
}
inline void ActivityManagerServiceDumpProcessesProto_Voice::set_session(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session)
}
inline void ActivityManagerServiceDumpProcessesProto_Voice::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session)
}
inline void ActivityManagerServiceDumpProcessesProto_Voice::set_session(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_Voice::mutable_session() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session)
  return session_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_Voice::release_session() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session)
  if (!has_session()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_Voice::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.session)
}

// optional .android.os.PowerManagerProto.WakeLock wakelock = 2;
inline bool ActivityManagerServiceDumpProcessesProto_Voice::has_wakelock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::os::PowerManagerProto_WakeLock& ActivityManagerServiceDumpProcessesProto_Voice::wakelock() const {
  const ::android::os::PowerManagerProto_WakeLock* p = wakelock_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.wakelock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::PowerManagerProto_WakeLock*>(
      &::android::os::_PowerManagerProto_WakeLock_default_instance_);
}
inline ::android::os::PowerManagerProto_WakeLock* ActivityManagerServiceDumpProcessesProto_Voice::release_wakelock() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.wakelock)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::PowerManagerProto_WakeLock* temp = wakelock_;
  wakelock_ = nullptr;
  return temp;
}
inline ::android::os::PowerManagerProto_WakeLock* ActivityManagerServiceDumpProcessesProto_Voice::mutable_wakelock() {
  _has_bits_[0] |= 0x00000002u;
  if (wakelock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::PowerManagerProto_WakeLock>(GetArenaNoVirtual());
    wakelock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.wakelock)
  return wakelock_;
}
inline void ActivityManagerServiceDumpProcessesProto_Voice::set_allocated_wakelock(::android::os::PowerManagerProto_WakeLock* wakelock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wakelock_);
  }
  if (wakelock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wakelock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wakelock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  wakelock_ = wakelock;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice.wakelock)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_DebugApp

// optional string debug_app = 1;
inline bool ActivityManagerServiceDumpProcessesProto_DebugApp::has_debug_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::clear_debug_app() {
  debug_app_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_DebugApp::debug_app() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app)
  return debug_app_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_debug_app(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  debug_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app)
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_debug_app(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  debug_app_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app)
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_debug_app(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  debug_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app)
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_debug_app(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  debug_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_DebugApp::mutable_debug_app() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app)
  return debug_app_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_DebugApp::release_debug_app() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app)
  if (!has_debug_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return debug_app_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_allocated_debug_app(std::string* debug_app) {
  if (debug_app != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debug_app_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), debug_app);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_app)
}

// optional string orig_debug_app = 2;
inline bool ActivityManagerServiceDumpProcessesProto_DebugApp::has_orig_debug_app() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::clear_orig_debug_app() {
  orig_debug_app_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_DebugApp::orig_debug_app() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app)
  return orig_debug_app_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_orig_debug_app(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  orig_debug_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app)
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_orig_debug_app(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  orig_debug_app_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app)
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_orig_debug_app(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  orig_debug_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app)
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_orig_debug_app(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  orig_debug_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_DebugApp::mutable_orig_debug_app() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app)
  return orig_debug_app_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_DebugApp::release_orig_debug_app() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app)
  if (!has_orig_debug_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return orig_debug_app_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_allocated_orig_debug_app(std::string* orig_debug_app) {
  if (orig_debug_app != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orig_debug_app_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orig_debug_app);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_debug_app)
}

// optional bool debug_transient = 3;
inline bool ActivityManagerServiceDumpProcessesProto_DebugApp::has_debug_transient() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::clear_debug_transient() {
  debug_transient_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ActivityManagerServiceDumpProcessesProto_DebugApp::debug_transient() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_transient)
  return debug_transient_;
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_debug_transient(bool value) {
  _has_bits_[0] |= 0x00000004u;
  debug_transient_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.debug_transient)
}

// optional bool orig_wait_for_debugger = 4;
inline bool ActivityManagerServiceDumpProcessesProto_DebugApp::has_orig_wait_for_debugger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::clear_orig_wait_for_debugger() {
  orig_wait_for_debugger_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ActivityManagerServiceDumpProcessesProto_DebugApp::orig_wait_for_debugger() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_wait_for_debugger)
  return orig_wait_for_debugger_;
}
inline void ActivityManagerServiceDumpProcessesProto_DebugApp::set_orig_wait_for_debugger(bool value) {
  _has_bits_[0] |= 0x00000008u;
  orig_wait_for_debugger_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp.orig_wait_for_debugger)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats

// optional int32 uid = 1;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.uid)
  return uid_;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.uid)
}

// optional string size = 2;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::clear_size() {
  size_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::size() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size)
  return size_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_size(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_size(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  size_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_size(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::mutable_size() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size)
  return size_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::release_size() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size)
  if (!has_size()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return size_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_allocated_size(std::string* size) {
  if (size != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  size_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.size)
}

// optional string report_to = 3;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::has_report_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::clear_report_to() {
  report_to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::report_to() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to)
  return report_to_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_report_to(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  report_to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_report_to(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  report_to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_report_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  report_to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_report_to(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  report_to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::mutable_report_to() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to)
  return report_to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::release_report_to() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to)
  if (!has_report_to()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return report_to_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats::set_allocated_report_to(std::string* report_to) {
  if (report_to != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  report_to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_to);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats.report_to)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process

// optional string name = 1;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name)
  return name_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.name)
}

// repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.MemStats mem_stats = 2;
inline int ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::mem_stats_size() const {
  return mem_stats_.size();
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::clear_mem_stats() {
  mem_stats_.Clear();
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::mutable_mem_stats(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.mem_stats)
  return mem_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats >*
ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::mutable_mem_stats() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.mem_stats)
  return &mem_stats_;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::mem_stats(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.mem_stats)
  return mem_stats_.Get(index);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::add_mem_stats() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.mem_stats)
  return mem_stats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process_MemStats >&
ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process::mem_stats() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process.mem_stats)
  return mem_stats_;
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump

// optional string proc_name = 1;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::has_proc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::proc_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name)
  return proc_name_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_proc_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_proc_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  proc_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_proc_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_proc_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  proc_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::mutable_proc_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name)
  return proc_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::release_proc_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name)
  if (!has_proc_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return proc_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_allocated_proc_name(std::string* proc_name) {
  if (proc_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  proc_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.proc_name)
}

// optional int32 pid = 3;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::pid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.pid)
  return pid_;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.pid)
}

// optional int32 uid = 4;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uid)
  return uid_;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uid)
}

// optional bool is_user_initiated = 5;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::has_is_user_initiated() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::clear_is_user_initiated() {
  is_user_initiated_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::is_user_initiated() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.is_user_initiated)
  return is_user_initiated_;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_is_user_initiated(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_user_initiated_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.is_user_initiated)
}

// optional string uri = 6 [(.android.privacy) = {
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::has_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::clear_uri() {
  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::uri() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri)
  return uri_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri)
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::mutable_uri() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri)
  return uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::release_uri() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri)
  if (!has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump.uri)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_MemWatchProcess

// repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Process procs = 1;
inline int ActivityManagerServiceDumpProcessesProto_MemWatchProcess::procs_size() const {
  return procs_.size();
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::clear_procs() {
  procs_.Clear();
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* ActivityManagerServiceDumpProcessesProto_MemWatchProcess::mutable_procs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.procs)
  return procs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process >*
ActivityManagerServiceDumpProcessesProto_MemWatchProcess::mutable_procs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.procs)
  return &procs_;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process& ActivityManagerServiceDumpProcessesProto_MemWatchProcess::procs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.procs)
  return procs_.Get(index);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process* ActivityManagerServiceDumpProcessesProto_MemWatchProcess::add_procs() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.procs)
  return procs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Process >&
ActivityManagerServiceDumpProcessesProto_MemWatchProcess::procs() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.procs)
  return procs_;
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.Dump dump = 2;
inline bool ActivityManagerServiceDumpProcessesProto_MemWatchProcess::has_dump() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::clear_dump() {
  if (dump_ != nullptr) dump_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump& ActivityManagerServiceDumpProcessesProto_MemWatchProcess::dump() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* p = dump_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.dump)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* ActivityManagerServiceDumpProcessesProto_MemWatchProcess::release_dump() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.dump)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* temp = dump_;
  dump_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* ActivityManagerServiceDumpProcessesProto_MemWatchProcess::mutable_dump() {
  _has_bits_[0] |= 0x00000001u;
  if (dump_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump>(GetArenaNoVirtual());
    dump_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.dump)
  return dump_;
}
inline void ActivityManagerServiceDumpProcessesProto_MemWatchProcess::set_allocated_dump(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess_Dump* dump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dump_;
  }
  if (dump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dump, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dump_ = dump;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess.dump)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_Profile

// optional string app_name = 1;
inline bool ActivityManagerServiceDumpProcessesProto_Profile::has_app_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_Profile::app_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name)
  return app_name_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name)
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::set_app_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  app_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name)
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name)
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::set_app_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_Profile::mutable_app_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name)
  return app_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_Profile::release_app_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name)
  if (!has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.app_name)
}

// optional .com.android.server.am.ProcessRecordProto proc = 2;
inline bool ActivityManagerServiceDumpProcessesProto_Profile::has_proc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::clear_proc() {
  if (proc_ != nullptr) proc_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto_Profile::proc() const {
  const ::com::android::server::am::ProcessRecordProto* p = proc_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.proc)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto_Profile::release_proc() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.proc)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::am::ProcessRecordProto* temp = proc_;
  proc_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto_Profile::mutable_proc() {
  _has_bits_[0] |= 0x00000002u;
  if (proc_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    proc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.proc)
  return proc_;
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::set_allocated_proc(::com::android::server::am::ProcessRecordProto* proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proc_;
  }
  if (proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proc_ = proc;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.proc)
}

// optional .android.app.ProfilerInfoProto info = 3;
inline bool ActivityManagerServiceDumpProcessesProto_Profile::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::app::ProfilerInfoProto& ActivityManagerServiceDumpProcessesProto_Profile::info() const {
  const ::android::app::ProfilerInfoProto* p = info_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::app::ProfilerInfoProto*>(
      &::android::app::_ProfilerInfoProto_default_instance_);
}
inline ::android::app::ProfilerInfoProto* ActivityManagerServiceDumpProcessesProto_Profile::release_info() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.info)
  _has_bits_[0] &= ~0x00000004u;
  ::android::app::ProfilerInfoProto* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::android::app::ProfilerInfoProto* ActivityManagerServiceDumpProcessesProto_Profile::mutable_info() {
  _has_bits_[0] |= 0x00000004u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::app::ProfilerInfoProto>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.info)
  return info_;
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::set_allocated_info(::android::app::ProfilerInfoProto* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.info)
}

// optional int32 type = 4;
inline bool ActivityManagerServiceDumpProcessesProto_Profile::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto_Profile::type() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.type)
  return type_;
}
inline void ActivityManagerServiceDumpProcessesProto_Profile::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile.type)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto_Controller

// optional string controller = 1;
inline bool ActivityManagerServiceDumpProcessesProto_Controller::has_controller() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_Controller::clear_controller() {
  controller_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto_Controller::controller() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller)
  return controller_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto_Controller::set_controller(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  controller_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller)
}
inline void ActivityManagerServiceDumpProcessesProto_Controller::set_controller(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  controller_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller)
}
inline void ActivityManagerServiceDumpProcessesProto_Controller::set_controller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  controller_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller)
}
inline void ActivityManagerServiceDumpProcessesProto_Controller::set_controller(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  controller_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller)
}
inline std::string* ActivityManagerServiceDumpProcessesProto_Controller::mutable_controller() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller)
  return controller_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto_Controller::release_controller() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller)
  if (!has_controller()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return controller_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto_Controller::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  controller_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.controller)
}

// optional bool is_a_monkey = 2;
inline bool ActivityManagerServiceDumpProcessesProto_Controller::has_is_a_monkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto_Controller::clear_is_a_monkey() {
  is_a_monkey_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ActivityManagerServiceDumpProcessesProto_Controller::is_a_monkey() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.is_a_monkey)
  return is_a_monkey_;
}
inline void ActivityManagerServiceDumpProcessesProto_Controller::set_is_a_monkey(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_a_monkey_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller.is_a_monkey)
}

// -------------------------------------------------------------------

// ActivityManagerServiceDumpProcessesProto

// repeated .com.android.server.am.ProcessRecordProto procs = 1;
inline int ActivityManagerServiceDumpProcessesProto::procs_size() const {
  return procs_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_procs() {
  procs_.Clear();
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_procs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.procs)
  return procs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
ActivityManagerServiceDumpProcessesProto::mutable_procs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.procs)
  return &procs_;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::procs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.procs)
  return procs_.Get(index);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::add_procs() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.procs)
  return procs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
ActivityManagerServiceDumpProcessesProto::procs() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.procs)
  return procs_;
}

// repeated .com.android.server.am.ProcessRecordProto isolated_procs = 2;
inline int ActivityManagerServiceDumpProcessesProto::isolated_procs_size() const {
  return isolated_procs_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_isolated_procs() {
  isolated_procs_.Clear();
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_isolated_procs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.isolated_procs)
  return isolated_procs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
ActivityManagerServiceDumpProcessesProto::mutable_isolated_procs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.isolated_procs)
  return &isolated_procs_;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::isolated_procs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.isolated_procs)
  return isolated_procs_.Get(index);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::add_isolated_procs() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.isolated_procs)
  return isolated_procs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
ActivityManagerServiceDumpProcessesProto::isolated_procs() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.isolated_procs)
  return isolated_procs_;
}

// repeated .com.android.server.am.ActiveInstrumentationProto active_instrumentations = 3;
inline int ActivityManagerServiceDumpProcessesProto::active_instrumentations_size() const {
  return active_instrumentations_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_active_instrumentations() {
  active_instrumentations_.Clear();
}
inline ::com::android::server::am::ActiveInstrumentationProto* ActivityManagerServiceDumpProcessesProto::mutable_active_instrumentations(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_instrumentations)
  return active_instrumentations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveInstrumentationProto >*
ActivityManagerServiceDumpProcessesProto::mutable_active_instrumentations() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_instrumentations)
  return &active_instrumentations_;
}
inline const ::com::android::server::am::ActiveInstrumentationProto& ActivityManagerServiceDumpProcessesProto::active_instrumentations(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_instrumentations)
  return active_instrumentations_.Get(index);
}
inline ::com::android::server::am::ActiveInstrumentationProto* ActivityManagerServiceDumpProcessesProto::add_active_instrumentations() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_instrumentations)
  return active_instrumentations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActiveInstrumentationProto >&
ActivityManagerServiceDumpProcessesProto::active_instrumentations() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_instrumentations)
  return active_instrumentations_;
}

// repeated .com.android.server.am.UidRecordProto active_uids = 4;
inline int ActivityManagerServiceDumpProcessesProto::active_uids_size() const {
  return active_uids_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_active_uids() {
  active_uids_.Clear();
}
inline ::com::android::server::am::UidRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_active_uids(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_uids)
  return active_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto >*
ActivityManagerServiceDumpProcessesProto::mutable_active_uids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_uids)
  return &active_uids_;
}
inline const ::com::android::server::am::UidRecordProto& ActivityManagerServiceDumpProcessesProto::active_uids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_uids)
  return active_uids_.Get(index);
}
inline ::com::android::server::am::UidRecordProto* ActivityManagerServiceDumpProcessesProto::add_active_uids() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_uids)
  return active_uids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto >&
ActivityManagerServiceDumpProcessesProto::active_uids() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.active_uids)
  return active_uids_;
}

// repeated .com.android.server.am.UidRecordProto validate_uids = 5;
inline int ActivityManagerServiceDumpProcessesProto::validate_uids_size() const {
  return validate_uids_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_validate_uids() {
  validate_uids_.Clear();
}
inline ::com::android::server::am::UidRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_validate_uids(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.validate_uids)
  return validate_uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto >*
ActivityManagerServiceDumpProcessesProto::mutable_validate_uids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.validate_uids)
  return &validate_uids_;
}
inline const ::com::android::server::am::UidRecordProto& ActivityManagerServiceDumpProcessesProto::validate_uids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.validate_uids)
  return validate_uids_.Get(index);
}
inline ::com::android::server::am::UidRecordProto* ActivityManagerServiceDumpProcessesProto::add_validate_uids() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.validate_uids)
  return validate_uids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UidRecordProto >&
ActivityManagerServiceDumpProcessesProto::validate_uids() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.validate_uids)
  return validate_uids_;
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.LruProcesses lru_procs = 6;
inline bool ActivityManagerServiceDumpProcessesProto::has_lru_procs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_lru_procs() {
  if (lru_procs_ != nullptr) lru_procs_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses& ActivityManagerServiceDumpProcessesProto::lru_procs() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* p = lru_procs_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.lru_procs)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_LruProcesses_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* ActivityManagerServiceDumpProcessesProto::release_lru_procs() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.lru_procs)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* temp = lru_procs_;
  lru_procs_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* ActivityManagerServiceDumpProcessesProto::mutable_lru_procs() {
  _has_bits_[0] |= 0x00000004u;
  if (lru_procs_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses>(GetArenaNoVirtual());
    lru_procs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.lru_procs)
  return lru_procs_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_lru_procs(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_LruProcesses* lru_procs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lru_procs_;
  }
  if (lru_procs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lru_procs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lru_procs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lru_procs_ = lru_procs;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.lru_procs)
}

// repeated .com.android.server.am.ProcessRecordProto pids_self_locked = 7;
inline int ActivityManagerServiceDumpProcessesProto::pids_self_locked_size() const {
  return pids_self_locked_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_pids_self_locked() {
  pids_self_locked_.Clear();
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_pids_self_locked(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pids_self_locked)
  return pids_self_locked_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
ActivityManagerServiceDumpProcessesProto::mutable_pids_self_locked() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pids_self_locked)
  return &pids_self_locked_;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::pids_self_locked(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pids_self_locked)
  return pids_self_locked_.Get(index);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::add_pids_self_locked() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pids_self_locked)
  return pids_self_locked_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
ActivityManagerServiceDumpProcessesProto::pids_self_locked() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pids_self_locked)
  return pids_self_locked_;
}

// repeated .com.android.server.am.ImportanceTokenProto important_procs = 8;
inline int ActivityManagerServiceDumpProcessesProto::important_procs_size() const {
  return important_procs_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_important_procs() {
  important_procs_.Clear();
}
inline ::com::android::server::am::ImportanceTokenProto* ActivityManagerServiceDumpProcessesProto::mutable_important_procs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.important_procs)
  return important_procs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ImportanceTokenProto >*
ActivityManagerServiceDumpProcessesProto::mutable_important_procs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.important_procs)
  return &important_procs_;
}
inline const ::com::android::server::am::ImportanceTokenProto& ActivityManagerServiceDumpProcessesProto::important_procs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.important_procs)
  return important_procs_.Get(index);
}
inline ::com::android::server::am::ImportanceTokenProto* ActivityManagerServiceDumpProcessesProto::add_important_procs() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.important_procs)
  return important_procs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ImportanceTokenProto >&
ActivityManagerServiceDumpProcessesProto::important_procs() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.important_procs)
  return important_procs_;
}

// repeated .com.android.server.am.ProcessRecordProto persistent_starting_procs = 9;
inline int ActivityManagerServiceDumpProcessesProto::persistent_starting_procs_size() const {
  return persistent_starting_procs_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_persistent_starting_procs() {
  persistent_starting_procs_.Clear();
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_persistent_starting_procs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.persistent_starting_procs)
  return persistent_starting_procs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
ActivityManagerServiceDumpProcessesProto::mutable_persistent_starting_procs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.persistent_starting_procs)
  return &persistent_starting_procs_;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::persistent_starting_procs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.persistent_starting_procs)
  return persistent_starting_procs_.Get(index);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::add_persistent_starting_procs() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.persistent_starting_procs)
  return persistent_starting_procs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
ActivityManagerServiceDumpProcessesProto::persistent_starting_procs() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.persistent_starting_procs)
  return persistent_starting_procs_;
}

// repeated .com.android.server.am.ProcessRecordProto removed_procs = 10;
inline int ActivityManagerServiceDumpProcessesProto::removed_procs_size() const {
  return removed_procs_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_removed_procs() {
  removed_procs_.Clear();
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_removed_procs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.removed_procs)
  return removed_procs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
ActivityManagerServiceDumpProcessesProto::mutable_removed_procs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.removed_procs)
  return &removed_procs_;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::removed_procs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.removed_procs)
  return removed_procs_.Get(index);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::add_removed_procs() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.removed_procs)
  return removed_procs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
ActivityManagerServiceDumpProcessesProto::removed_procs() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.removed_procs)
  return removed_procs_;
}

// repeated .com.android.server.am.ProcessRecordProto on_hold_procs = 11;
inline int ActivityManagerServiceDumpProcessesProto::on_hold_procs_size() const {
  return on_hold_procs_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_on_hold_procs() {
  on_hold_procs_.Clear();
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_on_hold_procs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.on_hold_procs)
  return on_hold_procs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
ActivityManagerServiceDumpProcessesProto::mutable_on_hold_procs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.on_hold_procs)
  return &on_hold_procs_;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::on_hold_procs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.on_hold_procs)
  return on_hold_procs_.Get(index);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::add_on_hold_procs() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.on_hold_procs)
  return on_hold_procs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
ActivityManagerServiceDumpProcessesProto::on_hold_procs() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.on_hold_procs)
  return on_hold_procs_;
}

// repeated .com.android.server.am.ProcessToGcProto gc_procs = 12;
inline int ActivityManagerServiceDumpProcessesProto::gc_procs_size() const {
  return gc_procs_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_gc_procs() {
  gc_procs_.Clear();
}
inline ::com::android::server::am::ProcessToGcProto* ActivityManagerServiceDumpProcessesProto::mutable_gc_procs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.gc_procs)
  return gc_procs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessToGcProto >*
ActivityManagerServiceDumpProcessesProto::mutable_gc_procs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.gc_procs)
  return &gc_procs_;
}
inline const ::com::android::server::am::ProcessToGcProto& ActivityManagerServiceDumpProcessesProto::gc_procs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.gc_procs)
  return gc_procs_.Get(index);
}
inline ::com::android::server::am::ProcessToGcProto* ActivityManagerServiceDumpProcessesProto::add_gc_procs() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.gc_procs)
  return gc_procs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessToGcProto >&
ActivityManagerServiceDumpProcessesProto::gc_procs() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.gc_procs)
  return gc_procs_;
}

// optional .com.android.server.am.AppErrorsProto app_errors = 13;
inline bool ActivityManagerServiceDumpProcessesProto::has_app_errors() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_app_errors() {
  if (app_errors_ != nullptr) app_errors_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::am::AppErrorsProto& ActivityManagerServiceDumpProcessesProto::app_errors() const {
  const ::com::android::server::am::AppErrorsProto* p = app_errors_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.app_errors)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::AppErrorsProto*>(
      &::com::android::server::am::_AppErrorsProto_default_instance_);
}
inline ::com::android::server::am::AppErrorsProto* ActivityManagerServiceDumpProcessesProto::release_app_errors() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.app_errors)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::am::AppErrorsProto* temp = app_errors_;
  app_errors_ = nullptr;
  return temp;
}
inline ::com::android::server::am::AppErrorsProto* ActivityManagerServiceDumpProcessesProto::mutable_app_errors() {
  _has_bits_[0] |= 0x00000008u;
  if (app_errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::AppErrorsProto>(GetArenaNoVirtual());
    app_errors_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.app_errors)
  return app_errors_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_app_errors(::com::android::server::am::AppErrorsProto* app_errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_errors_;
  }
  if (app_errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_errors, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  app_errors_ = app_errors;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.app_errors)
}

// optional .com.android.server.am.UserControllerProto user_controller = 14;
inline bool ActivityManagerServiceDumpProcessesProto::has_user_controller() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_user_controller() {
  if (user_controller_ != nullptr) user_controller_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::android::server::am::UserControllerProto& ActivityManagerServiceDumpProcessesProto::user_controller() const {
  const ::com::android::server::am::UserControllerProto* p = user_controller_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.user_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::UserControllerProto*>(
      &::com::android::server::am::_UserControllerProto_default_instance_);
}
inline ::com::android::server::am::UserControllerProto* ActivityManagerServiceDumpProcessesProto::release_user_controller() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.user_controller)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::am::UserControllerProto* temp = user_controller_;
  user_controller_ = nullptr;
  return temp;
}
inline ::com::android::server::am::UserControllerProto* ActivityManagerServiceDumpProcessesProto::mutable_user_controller() {
  _has_bits_[0] |= 0x00000010u;
  if (user_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::UserControllerProto>(GetArenaNoVirtual());
    user_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.user_controller)
  return user_controller_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_user_controller(::com::android::server::am::UserControllerProto* user_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_controller_;
  }
  if (user_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  user_controller_ = user_controller;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.user_controller)
}

// optional .com.android.server.am.ProcessRecordProto home_proc = 15;
inline bool ActivityManagerServiceDumpProcessesProto::has_home_proc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_home_proc() {
  if (home_proc_ != nullptr) home_proc_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::home_proc() const {
  const ::com::android::server::am::ProcessRecordProto* p = home_proc_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.home_proc)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::release_home_proc() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.home_proc)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::am::ProcessRecordProto* temp = home_proc_;
  home_proc_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_home_proc() {
  _has_bits_[0] |= 0x00000020u;
  if (home_proc_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    home_proc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.home_proc)
  return home_proc_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_home_proc(::com::android::server::am::ProcessRecordProto* home_proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete home_proc_;
  }
  if (home_proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      home_proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home_proc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  home_proc_ = home_proc;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.home_proc)
}

// optional .com.android.server.am.ProcessRecordProto previous_proc = 16;
inline bool ActivityManagerServiceDumpProcessesProto::has_previous_proc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_previous_proc() {
  if (previous_proc_ != nullptr) previous_proc_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::previous_proc() const {
  const ::com::android::server::am::ProcessRecordProto* p = previous_proc_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.previous_proc)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::release_previous_proc() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.previous_proc)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::server::am::ProcessRecordProto* temp = previous_proc_;
  previous_proc_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_previous_proc() {
  _has_bits_[0] |= 0x00000040u;
  if (previous_proc_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    previous_proc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.previous_proc)
  return previous_proc_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_previous_proc(::com::android::server::am::ProcessRecordProto* previous_proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete previous_proc_;
  }
  if (previous_proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      previous_proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_proc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  previous_proc_ = previous_proc;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.previous_proc)
}

// optional int64 previous_proc_visible_time_ms = 17;
inline bool ActivityManagerServiceDumpProcessesProto::has_previous_proc_visible_time_ms() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_previous_proc_visible_time_ms() {
  previous_proc_visible_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityManagerServiceDumpProcessesProto::previous_proc_visible_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.previous_proc_visible_time_ms)
  return previous_proc_visible_time_ms_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_previous_proc_visible_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  previous_proc_visible_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.previous_proc_visible_time_ms)
}

// optional .com.android.server.am.ProcessRecordProto heavy_weight_proc = 18;
inline bool ActivityManagerServiceDumpProcessesProto::has_heavy_weight_proc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_heavy_weight_proc() {
  if (heavy_weight_proc_ != nullptr) heavy_weight_proc_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::com::android::server::am::ProcessRecordProto& ActivityManagerServiceDumpProcessesProto::heavy_weight_proc() const {
  const ::com::android::server::am::ProcessRecordProto* p = heavy_weight_proc_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.heavy_weight_proc)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::release_heavy_weight_proc() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.heavy_weight_proc)
  _has_bits_[0] &= ~0x00000080u;
  ::com::android::server::am::ProcessRecordProto* temp = heavy_weight_proc_;
  heavy_weight_proc_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ActivityManagerServiceDumpProcessesProto::mutable_heavy_weight_proc() {
  _has_bits_[0] |= 0x00000080u;
  if (heavy_weight_proc_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    heavy_weight_proc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.heavy_weight_proc)
  return heavy_weight_proc_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_heavy_weight_proc(::com::android::server::am::ProcessRecordProto* heavy_weight_proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete heavy_weight_proc_;
  }
  if (heavy_weight_proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heavy_weight_proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heavy_weight_proc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  heavy_weight_proc_ = heavy_weight_proc;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.heavy_weight_proc)
}

// optional .android.content.ConfigurationProto global_configuration = 19;
inline bool ActivityManagerServiceDumpProcessesProto::has_global_configuration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::content::ConfigurationProto& ActivityManagerServiceDumpProcessesProto::global_configuration() const {
  const ::android::content::ConfigurationProto* p = global_configuration_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.global_configuration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ConfigurationProto*>(
      &::android::content::_ConfigurationProto_default_instance_);
}
inline ::android::content::ConfigurationProto* ActivityManagerServiceDumpProcessesProto::release_global_configuration() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.global_configuration)
  _has_bits_[0] &= ~0x00000100u;
  ::android::content::ConfigurationProto* temp = global_configuration_;
  global_configuration_ = nullptr;
  return temp;
}
inline ::android::content::ConfigurationProto* ActivityManagerServiceDumpProcessesProto::mutable_global_configuration() {
  _has_bits_[0] |= 0x00000100u;
  if (global_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ConfigurationProto>(GetArenaNoVirtual());
    global_configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.global_configuration)
  return global_configuration_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_global_configuration(::android::content::ConfigurationProto* global_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_configuration_);
  }
  if (global_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  global_configuration_ = global_configuration;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.global_configuration)
}

// optional bool config_will_change = 21;
inline bool ActivityManagerServiceDumpProcessesProto::has_config_will_change() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_config_will_change() {
  config_will_change_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool ActivityManagerServiceDumpProcessesProto::config_will_change() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.config_will_change)
  return config_will_change_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_config_will_change(bool value) {
  _has_bits_[0] |= 0x00200000u;
  config_will_change_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.config_will_change)
}

// repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.ScreenCompatPackage screen_compat_packages = 22;
inline int ActivityManagerServiceDumpProcessesProto::screen_compat_packages_size() const {
  return screen_compat_packages_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_screen_compat_packages() {
  screen_compat_packages_.Clear();
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* ActivityManagerServiceDumpProcessesProto::mutable_screen_compat_packages(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.screen_compat_packages)
  return screen_compat_packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage >*
ActivityManagerServiceDumpProcessesProto::mutable_screen_compat_packages() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.screen_compat_packages)
  return &screen_compat_packages_;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage& ActivityManagerServiceDumpProcessesProto::screen_compat_packages(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.screen_compat_packages)
  return screen_compat_packages_.Get(index);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage* ActivityManagerServiceDumpProcessesProto::add_screen_compat_packages() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.screen_compat_packages)
  return screen_compat_packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_ScreenCompatPackage >&
ActivityManagerServiceDumpProcessesProto::screen_compat_packages() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.screen_compat_packages)
  return screen_compat_packages_;
}

// repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.UidObserverRegistrationProto uid_observers = 23;
inline int ActivityManagerServiceDumpProcessesProto::uid_observers_size() const {
  return uid_observers_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_uid_observers() {
  uid_observers_.Clear();
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* ActivityManagerServiceDumpProcessesProto::mutable_uid_observers(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.uid_observers)
  return uid_observers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto >*
ActivityManagerServiceDumpProcessesProto::mutable_uid_observers() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.uid_observers)
  return &uid_observers_;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto& ActivityManagerServiceDumpProcessesProto::uid_observers(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.uid_observers)
  return uid_observers_.Get(index);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto* ActivityManagerServiceDumpProcessesProto::add_uid_observers() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.uid_observers)
  return uid_observers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_UidObserverRegistrationProto >&
ActivityManagerServiceDumpProcessesProto::uid_observers() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.uid_observers)
  return uid_observers_;
}

// repeated int32 device_idle_whitelist = 24;
inline int ActivityManagerServiceDumpProcessesProto::device_idle_whitelist_size() const {
  return device_idle_whitelist_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_device_idle_whitelist() {
  device_idle_whitelist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::device_idle_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_whitelist)
  return device_idle_whitelist_.Get(index);
}
inline void ActivityManagerServiceDumpProcessesProto::set_device_idle_whitelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  device_idle_whitelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_whitelist)
}
inline void ActivityManagerServiceDumpProcessesProto::add_device_idle_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  device_idle_whitelist_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_whitelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ActivityManagerServiceDumpProcessesProto::device_idle_whitelist() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_whitelist)
  return device_idle_whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ActivityManagerServiceDumpProcessesProto::mutable_device_idle_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_whitelist)
  return &device_idle_whitelist_;
}

// repeated int32 device_idle_temp_whitelist = 25;
inline int ActivityManagerServiceDumpProcessesProto::device_idle_temp_whitelist_size() const {
  return device_idle_temp_whitelist_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_device_idle_temp_whitelist() {
  device_idle_temp_whitelist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::device_idle_temp_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_temp_whitelist)
  return device_idle_temp_whitelist_.Get(index);
}
inline void ActivityManagerServiceDumpProcessesProto::set_device_idle_temp_whitelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  device_idle_temp_whitelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_temp_whitelist)
}
inline void ActivityManagerServiceDumpProcessesProto::add_device_idle_temp_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  device_idle_temp_whitelist_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_temp_whitelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ActivityManagerServiceDumpProcessesProto::device_idle_temp_whitelist() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_temp_whitelist)
  return device_idle_temp_whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ActivityManagerServiceDumpProcessesProto::mutable_device_idle_temp_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.device_idle_temp_whitelist)
  return &device_idle_temp_whitelist_;
}

// repeated .com.android.server.am.ActivityManagerServiceDumpProcessesProto.PendingTempWhitelist pending_temp_whitelist = 26;
inline int ActivityManagerServiceDumpProcessesProto::pending_temp_whitelist_size() const {
  return pending_temp_whitelist_.size();
}
inline void ActivityManagerServiceDumpProcessesProto::clear_pending_temp_whitelist() {
  pending_temp_whitelist_.Clear();
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* ActivityManagerServiceDumpProcessesProto::mutable_pending_temp_whitelist(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pending_temp_whitelist)
  return pending_temp_whitelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist >*
ActivityManagerServiceDumpProcessesProto::mutable_pending_temp_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pending_temp_whitelist)
  return &pending_temp_whitelist_;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist& ActivityManagerServiceDumpProcessesProto::pending_temp_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pending_temp_whitelist)
  return pending_temp_whitelist_.Get(index);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist* ActivityManagerServiceDumpProcessesProto::add_pending_temp_whitelist() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pending_temp_whitelist)
  return pending_temp_whitelist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_PendingTempWhitelist >&
ActivityManagerServiceDumpProcessesProto::pending_temp_whitelist() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActivityManagerServiceDumpProcessesProto.pending_temp_whitelist)
  return pending_temp_whitelist_;
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.SleepStatus sleep_status = 27;
inline bool ActivityManagerServiceDumpProcessesProto::has_sleep_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_sleep_status() {
  if (sleep_status_ != nullptr) sleep_status_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus& ActivityManagerServiceDumpProcessesProto::sleep_status() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* p = sleep_status_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.sleep_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_SleepStatus_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* ActivityManagerServiceDumpProcessesProto::release_sleep_status() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.sleep_status)
  _has_bits_[0] &= ~0x00000200u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* temp = sleep_status_;
  sleep_status_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* ActivityManagerServiceDumpProcessesProto::mutable_sleep_status() {
  _has_bits_[0] |= 0x00000200u;
  if (sleep_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus>(GetArenaNoVirtual());
    sleep_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.sleep_status)
  return sleep_status_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_sleep_status(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_SleepStatus* sleep_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sleep_status_;
  }
  if (sleep_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sleep_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sleep_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  sleep_status_ = sleep_status;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.sleep_status)
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Voice running_voice = 28;
inline bool ActivityManagerServiceDumpProcessesProto::has_running_voice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_running_voice() {
  if (running_voice_ != nullptr) running_voice_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice& ActivityManagerServiceDumpProcessesProto::running_voice() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* p = running_voice_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.running_voice)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Voice_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* ActivityManagerServiceDumpProcessesProto::release_running_voice() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.running_voice)
  _has_bits_[0] &= ~0x00000400u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* temp = running_voice_;
  running_voice_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* ActivityManagerServiceDumpProcessesProto::mutable_running_voice() {
  _has_bits_[0] |= 0x00000400u;
  if (running_voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice>(GetArenaNoVirtual());
    running_voice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.running_voice)
  return running_voice_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_running_voice(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Voice* running_voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete running_voice_;
  }
  if (running_voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      running_voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, running_voice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  running_voice_ = running_voice;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.running_voice)
}

// optional .com.android.server.am.VrControllerProto vr_controller = 29;
inline bool ActivityManagerServiceDumpProcessesProto::has_vr_controller() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_vr_controller() {
  if (vr_controller_ != nullptr) vr_controller_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::com::android::server::am::VrControllerProto& ActivityManagerServiceDumpProcessesProto::vr_controller() const {
  const ::com::android::server::am::VrControllerProto* p = vr_controller_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.vr_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::VrControllerProto*>(
      &::com::android::server::am::_VrControllerProto_default_instance_);
}
inline ::com::android::server::am::VrControllerProto* ActivityManagerServiceDumpProcessesProto::release_vr_controller() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.vr_controller)
  _has_bits_[0] &= ~0x00000800u;
  ::com::android::server::am::VrControllerProto* temp = vr_controller_;
  vr_controller_ = nullptr;
  return temp;
}
inline ::com::android::server::am::VrControllerProto* ActivityManagerServiceDumpProcessesProto::mutable_vr_controller() {
  _has_bits_[0] |= 0x00000800u;
  if (vr_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::VrControllerProto>(GetArenaNoVirtual());
    vr_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.vr_controller)
  return vr_controller_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_vr_controller(::com::android::server::am::VrControllerProto* vr_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vr_controller_;
  }
  if (vr_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vr_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vr_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  vr_controller_ = vr_controller;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.vr_controller)
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.DebugApp debug = 30;
inline bool ActivityManagerServiceDumpProcessesProto::has_debug() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_debug() {
  if (debug_ != nullptr) debug_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp& ActivityManagerServiceDumpProcessesProto::debug() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* p = debug_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_DebugApp_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* ActivityManagerServiceDumpProcessesProto::release_debug() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.debug)
  _has_bits_[0] &= ~0x00001000u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* ActivityManagerServiceDumpProcessesProto::mutable_debug() {
  _has_bits_[0] |= 0x00001000u;
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp>(GetArenaNoVirtual());
    debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.debug)
  return debug_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_debug(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_DebugApp* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.debug)
}

// optional .com.android.server.am.AppTimeTrackerProto current_tracker = 31;
inline bool ActivityManagerServiceDumpProcessesProto::has_current_tracker() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_current_tracker() {
  if (current_tracker_ != nullptr) current_tracker_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::com::android::server::am::AppTimeTrackerProto& ActivityManagerServiceDumpProcessesProto::current_tracker() const {
  const ::com::android::server::am::AppTimeTrackerProto* p = current_tracker_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.current_tracker)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::AppTimeTrackerProto*>(
      &::com::android::server::am::_AppTimeTrackerProto_default_instance_);
}
inline ::com::android::server::am::AppTimeTrackerProto* ActivityManagerServiceDumpProcessesProto::release_current_tracker() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.current_tracker)
  _has_bits_[0] &= ~0x00002000u;
  ::com::android::server::am::AppTimeTrackerProto* temp = current_tracker_;
  current_tracker_ = nullptr;
  return temp;
}
inline ::com::android::server::am::AppTimeTrackerProto* ActivityManagerServiceDumpProcessesProto::mutable_current_tracker() {
  _has_bits_[0] |= 0x00002000u;
  if (current_tracker_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::AppTimeTrackerProto>(GetArenaNoVirtual());
    current_tracker_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.current_tracker)
  return current_tracker_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_current_tracker(::com::android::server::am::AppTimeTrackerProto* current_tracker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete current_tracker_;
  }
  if (current_tracker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_tracker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_tracker, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  current_tracker_ = current_tracker;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.current_tracker)
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.MemWatchProcess mem_watch_processes = 32;
inline bool ActivityManagerServiceDumpProcessesProto::has_mem_watch_processes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_mem_watch_processes() {
  if (mem_watch_processes_ != nullptr) mem_watch_processes_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess& ActivityManagerServiceDumpProcessesProto::mem_watch_processes() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* p = mem_watch_processes_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.mem_watch_processes)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_MemWatchProcess_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* ActivityManagerServiceDumpProcessesProto::release_mem_watch_processes() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.mem_watch_processes)
  _has_bits_[0] &= ~0x00004000u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* temp = mem_watch_processes_;
  mem_watch_processes_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* ActivityManagerServiceDumpProcessesProto::mutable_mem_watch_processes() {
  _has_bits_[0] |= 0x00004000u;
  if (mem_watch_processes_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess>(GetArenaNoVirtual());
    mem_watch_processes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.mem_watch_processes)
  return mem_watch_processes_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_mem_watch_processes(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_MemWatchProcess* mem_watch_processes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mem_watch_processes_;
  }
  if (mem_watch_processes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mem_watch_processes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem_watch_processes, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  mem_watch_processes_ = mem_watch_processes;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.mem_watch_processes)
}

// optional string track_allocation_app = 33;
inline bool ActivityManagerServiceDumpProcessesProto::has_track_allocation_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_track_allocation_app() {
  track_allocation_app_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto::track_allocation_app() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app)
  return track_allocation_app_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto::set_track_allocation_app(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  track_allocation_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app)
}
inline void ActivityManagerServiceDumpProcessesProto::set_track_allocation_app(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  track_allocation_app_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app)
}
inline void ActivityManagerServiceDumpProcessesProto::set_track_allocation_app(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  track_allocation_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app)
}
inline void ActivityManagerServiceDumpProcessesProto::set_track_allocation_app(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  track_allocation_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app)
}
inline std::string* ActivityManagerServiceDumpProcessesProto::mutable_track_allocation_app() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app)
  return track_allocation_app_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto::release_track_allocation_app() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app)
  if (!has_track_allocation_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return track_allocation_app_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_track_allocation_app(std::string* track_allocation_app) {
  if (track_allocation_app != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  track_allocation_app_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_allocation_app);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.track_allocation_app)
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Profile profile = 34;
inline bool ActivityManagerServiceDumpProcessesProto::has_profile() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_profile() {
  if (profile_ != nullptr) profile_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile& ActivityManagerServiceDumpProcessesProto::profile() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* p = profile_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.profile)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Profile_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* ActivityManagerServiceDumpProcessesProto::release_profile() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.profile)
  _has_bits_[0] &= ~0x00008000u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* temp = profile_;
  profile_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* ActivityManagerServiceDumpProcessesProto::mutable_profile() {
  _has_bits_[0] |= 0x00008000u;
  if (profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile>(GetArenaNoVirtual());
    profile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.profile)
  return profile_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_profile(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Profile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete profile_;
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.profile)
}

// optional string native_debugging_app = 35;
inline bool ActivityManagerServiceDumpProcessesProto::has_native_debugging_app() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_native_debugging_app() {
  native_debugging_app_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ActivityManagerServiceDumpProcessesProto::native_debugging_app() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app)
  return native_debugging_app_.GetNoArena();
}
inline void ActivityManagerServiceDumpProcessesProto::set_native_debugging_app(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  native_debugging_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app)
}
inline void ActivityManagerServiceDumpProcessesProto::set_native_debugging_app(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  native_debugging_app_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app)
}
inline void ActivityManagerServiceDumpProcessesProto::set_native_debugging_app(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  native_debugging_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app)
}
inline void ActivityManagerServiceDumpProcessesProto::set_native_debugging_app(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  native_debugging_app_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app)
}
inline std::string* ActivityManagerServiceDumpProcessesProto::mutable_native_debugging_app() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app)
  return native_debugging_app_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityManagerServiceDumpProcessesProto::release_native_debugging_app() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app)
  if (!has_native_debugging_app()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return native_debugging_app_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_native_debugging_app(std::string* native_debugging_app) {
  if (native_debugging_app != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  native_debugging_app_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), native_debugging_app);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.native_debugging_app)
}

// optional bool always_finish_activities = 36;
inline bool ActivityManagerServiceDumpProcessesProto::has_always_finish_activities() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_always_finish_activities() {
  always_finish_activities_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool ActivityManagerServiceDumpProcessesProto::always_finish_activities() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.always_finish_activities)
  return always_finish_activities_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_always_finish_activities(bool value) {
  _has_bits_[0] |= 0x00400000u;
  always_finish_activities_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.always_finish_activities)
}

// optional .com.android.server.am.ActivityManagerServiceDumpProcessesProto.Controller controller = 37;
inline bool ActivityManagerServiceDumpProcessesProto::has_controller() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_controller() {
  if (controller_ != nullptr) controller_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller& ActivityManagerServiceDumpProcessesProto::controller() const {
  const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* p = controller_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller*>(
      &::com::android::server::am::_ActivityManagerServiceDumpProcessesProto_Controller_default_instance_);
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* ActivityManagerServiceDumpProcessesProto::release_controller() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.controller)
  _has_bits_[0] &= ~0x00010000u;
  ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* temp = controller_;
  controller_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* ActivityManagerServiceDumpProcessesProto::mutable_controller() {
  _has_bits_[0] |= 0x00010000u;
  if (controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller>(GetArenaNoVirtual());
    controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.controller)
  return controller_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_controller(::com::android::server::am::ActivityManagerServiceDumpProcessesProto_Controller* controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete controller_;
  }
  if (controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  controller_ = controller;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.controller)
}

// optional int32 total_persistent_procs = 38;
inline bool ActivityManagerServiceDumpProcessesProto::has_total_persistent_procs() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_total_persistent_procs() {
  total_persistent_procs_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::total_persistent_procs() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.total_persistent_procs)
  return total_persistent_procs_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_total_persistent_procs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  total_persistent_procs_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.total_persistent_procs)
}

// optional bool processes_ready = 39;
inline bool ActivityManagerServiceDumpProcessesProto::has_processes_ready() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_processes_ready() {
  processes_ready_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool ActivityManagerServiceDumpProcessesProto::processes_ready() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.processes_ready)
  return processes_ready_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_processes_ready(bool value) {
  _has_bits_[0] |= 0x00800000u;
  processes_ready_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.processes_ready)
}

// optional bool system_ready = 40;
inline bool ActivityManagerServiceDumpProcessesProto::has_system_ready() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_system_ready() {
  system_ready_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool ActivityManagerServiceDumpProcessesProto::system_ready() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.system_ready)
  return system_ready_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_system_ready(bool value) {
  _has_bits_[0] |= 0x01000000u;
  system_ready_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.system_ready)
}

// optional bool booted = 41;
inline bool ActivityManagerServiceDumpProcessesProto::has_booted() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_booted() {
  booted_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool ActivityManagerServiceDumpProcessesProto::booted() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.booted)
  return booted_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_booted(bool value) {
  _has_bits_[0] |= 0x08000000u;
  booted_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.booted)
}

// optional int32 factory_test = 42;
inline bool ActivityManagerServiceDumpProcessesProto::has_factory_test() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_factory_test() {
  factory_test_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::factory_test() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.factory_test)
  return factory_test_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_factory_test(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  factory_test_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.factory_test)
}

// optional bool booting = 43;
inline bool ActivityManagerServiceDumpProcessesProto::has_booting() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_booting() {
  booting_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool ActivityManagerServiceDumpProcessesProto::booting() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.booting)
  return booting_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_booting(bool value) {
  _has_bits_[0] |= 0x10000000u;
  booting_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.booting)
}

// optional bool call_finish_booting = 44;
inline bool ActivityManagerServiceDumpProcessesProto::has_call_finish_booting() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_call_finish_booting() {
  call_finish_booting_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool ActivityManagerServiceDumpProcessesProto::call_finish_booting() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.call_finish_booting)
  return call_finish_booting_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_call_finish_booting(bool value) {
  _has_bits_[0] |= 0x20000000u;
  call_finish_booting_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.call_finish_booting)
}

// optional bool boot_animation_complete = 45;
inline bool ActivityManagerServiceDumpProcessesProto::has_boot_animation_complete() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_boot_animation_complete() {
  boot_animation_complete_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool ActivityManagerServiceDumpProcessesProto::boot_animation_complete() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.boot_animation_complete)
  return boot_animation_complete_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_boot_animation_complete(bool value) {
  _has_bits_[0] |= 0x40000000u;
  boot_animation_complete_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.boot_animation_complete)
}

// optional int64 last_power_check_uptime_ms = 46;
inline bool ActivityManagerServiceDumpProcessesProto::has_last_power_check_uptime_ms() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_last_power_check_uptime_ms() {
  last_power_check_uptime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityManagerServiceDumpProcessesProto::last_power_check_uptime_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_power_check_uptime_ms)
  return last_power_check_uptime_ms_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_last_power_check_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x80000000u;
  last_power_check_uptime_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_power_check_uptime_ms)
}

// optional .android.os.PowerManagerProto.WakeLock going_to_sleep = 47;
inline bool ActivityManagerServiceDumpProcessesProto::has_going_to_sleep() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::os::PowerManagerProto_WakeLock& ActivityManagerServiceDumpProcessesProto::going_to_sleep() const {
  const ::android::os::PowerManagerProto_WakeLock* p = going_to_sleep_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.going_to_sleep)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::PowerManagerProto_WakeLock*>(
      &::android::os::_PowerManagerProto_WakeLock_default_instance_);
}
inline ::android::os::PowerManagerProto_WakeLock* ActivityManagerServiceDumpProcessesProto::release_going_to_sleep() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.going_to_sleep)
  _has_bits_[0] &= ~0x00020000u;
  ::android::os::PowerManagerProto_WakeLock* temp = going_to_sleep_;
  going_to_sleep_ = nullptr;
  return temp;
}
inline ::android::os::PowerManagerProto_WakeLock* ActivityManagerServiceDumpProcessesProto::mutable_going_to_sleep() {
  _has_bits_[0] |= 0x00020000u;
  if (going_to_sleep_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::PowerManagerProto_WakeLock>(GetArenaNoVirtual());
    going_to_sleep_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.going_to_sleep)
  return going_to_sleep_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_going_to_sleep(::android::os::PowerManagerProto_WakeLock* going_to_sleep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(going_to_sleep_);
  }
  if (going_to_sleep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      going_to_sleep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, going_to_sleep, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  going_to_sleep_ = going_to_sleep;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.going_to_sleep)
}

// optional .android.os.PowerManagerProto.WakeLock launching_activity = 48;
inline bool ActivityManagerServiceDumpProcessesProto::has_launching_activity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline const ::android::os::PowerManagerProto_WakeLock& ActivityManagerServiceDumpProcessesProto::launching_activity() const {
  const ::android::os::PowerManagerProto_WakeLock* p = launching_activity_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.launching_activity)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::PowerManagerProto_WakeLock*>(
      &::android::os::_PowerManagerProto_WakeLock_default_instance_);
}
inline ::android::os::PowerManagerProto_WakeLock* ActivityManagerServiceDumpProcessesProto::release_launching_activity() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.launching_activity)
  _has_bits_[0] &= ~0x00040000u;
  ::android::os::PowerManagerProto_WakeLock* temp = launching_activity_;
  launching_activity_ = nullptr;
  return temp;
}
inline ::android::os::PowerManagerProto_WakeLock* ActivityManagerServiceDumpProcessesProto::mutable_launching_activity() {
  _has_bits_[0] |= 0x00040000u;
  if (launching_activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::PowerManagerProto_WakeLock>(GetArenaNoVirtual());
    launching_activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.launching_activity)
  return launching_activity_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_launching_activity(::android::os::PowerManagerProto_WakeLock* launching_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(launching_activity_);
  }
  if (launching_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launching_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, launching_activity, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  launching_activity_ = launching_activity;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.launching_activity)
}

// optional int32 adj_seq = 49;
inline bool ActivityManagerServiceDumpProcessesProto::has_adj_seq() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_adj_seq() {
  adj_seq_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::adj_seq() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.adj_seq)
  return adj_seq_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_adj_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  adj_seq_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.adj_seq)
}

// optional int32 lru_seq = 50;
inline bool ActivityManagerServiceDumpProcessesProto::has_lru_seq() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_lru_seq() {
  lru_seq_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::lru_seq() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.lru_seq)
  return lru_seq_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_lru_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  lru_seq_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.lru_seq)
}

// optional int32 num_non_cached_procs = 51;
inline bool ActivityManagerServiceDumpProcessesProto::has_num_non_cached_procs() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_num_non_cached_procs() {
  num_non_cached_procs_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::num_non_cached_procs() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.num_non_cached_procs)
  return num_non_cached_procs_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_num_non_cached_procs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  num_non_cached_procs_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.num_non_cached_procs)
}

// optional int32 num_cached_hidden_procs = 52;
inline bool ActivityManagerServiceDumpProcessesProto::has_num_cached_hidden_procs() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_num_cached_hidden_procs() {
  num_cached_hidden_procs_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::num_cached_hidden_procs() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.num_cached_hidden_procs)
  return num_cached_hidden_procs_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_num_cached_hidden_procs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  num_cached_hidden_procs_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.num_cached_hidden_procs)
}

// optional int32 num_service_procs = 53;
inline bool ActivityManagerServiceDumpProcessesProto::has_num_service_procs() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_num_service_procs() {
  num_service_procs_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::num_service_procs() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.num_service_procs)
  return num_service_procs_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_num_service_procs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  num_service_procs_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.num_service_procs)
}

// optional int32 new_num_service_procs = 54;
inline bool ActivityManagerServiceDumpProcessesProto::has_new_num_service_procs() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_new_num_service_procs() {
  new_num_service_procs_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::new_num_service_procs() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.new_num_service_procs)
  return new_num_service_procs_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_new_num_service_procs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  new_num_service_procs_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.new_num_service_procs)
}

// optional bool allow_lower_mem_level = 55;
inline bool ActivityManagerServiceDumpProcessesProto::has_allow_lower_mem_level() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_allow_lower_mem_level() {
  allow_lower_mem_level_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool ActivityManagerServiceDumpProcessesProto::allow_lower_mem_level() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.allow_lower_mem_level)
  return allow_lower_mem_level_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allow_lower_mem_level(bool value) {
  _has_bits_[1] |= 0x00000040u;
  allow_lower_mem_level_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.allow_lower_mem_level)
}

// optional int32 last_memory_level = 56;
inline bool ActivityManagerServiceDumpProcessesProto::has_last_memory_level() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_last_memory_level() {
  last_memory_level_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::last_memory_level() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_memory_level)
  return last_memory_level_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_last_memory_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000080u;
  last_memory_level_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_memory_level)
}

// optional int32 last_num_processes = 57;
inline bool ActivityManagerServiceDumpProcessesProto::has_last_num_processes() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_last_num_processes() {
  last_num_processes_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityManagerServiceDumpProcessesProto::last_num_processes() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_num_processes)
  return last_num_processes_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_last_num_processes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000200u;
  last_num_processes_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_num_processes)
}

// optional .android.util.Duration last_idle_time = 58;
inline bool ActivityManagerServiceDumpProcessesProto::has_last_idle_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline const ::android::util::Duration& ActivityManagerServiceDumpProcessesProto::last_idle_time() const {
  const ::android::util::Duration* p = last_idle_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_idle_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* ActivityManagerServiceDumpProcessesProto::release_last_idle_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_idle_time)
  _has_bits_[0] &= ~0x00080000u;
  ::android::util::Duration* temp = last_idle_time_;
  last_idle_time_ = nullptr;
  return temp;
}
inline ::android::util::Duration* ActivityManagerServiceDumpProcessesProto::mutable_last_idle_time() {
  _has_bits_[0] |= 0x00080000u;
  if (last_idle_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    last_idle_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_idle_time)
  return last_idle_time_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_allocated_last_idle_time(::android::util::Duration* last_idle_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_idle_time_);
  }
  if (last_idle_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_idle_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_idle_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  last_idle_time_ = last_idle_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActivityManagerServiceDumpProcessesProto.last_idle_time)
}

// optional int64 low_ram_since_last_idle_ms = 59;
inline bool ActivityManagerServiceDumpProcessesProto::has_low_ram_since_last_idle_ms() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ActivityManagerServiceDumpProcessesProto::clear_low_ram_since_last_idle_ms() {
  low_ram_since_last_idle_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActivityManagerServiceDumpProcessesProto::low_ram_since_last_idle_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActivityManagerServiceDumpProcessesProto.low_ram_since_last_idle_ms)
  return low_ram_since_last_idle_ms_;
}
inline void ActivityManagerServiceDumpProcessesProto::set_low_ram_since_last_idle_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000100u;
  low_ram_since_last_idle_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActivityManagerServiceDumpProcessesProto.low_ram_since_last_idle_ms)
}

// -------------------------------------------------------------------

// ActiveInstrumentationProto

// optional .android.content.ComponentNameProto class = 1;
inline bool ActiveInstrumentationProto::has_class_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::content::ComponentNameProto& ActiveInstrumentationProto::class_() const {
  const ::android::content::ComponentNameProto* p = class__;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.class)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* ActiveInstrumentationProto::release_class_() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActiveInstrumentationProto.class)
  _has_bits_[0] &= ~0x00000008u;
  ::android::content::ComponentNameProto* temp = class__;
  class__ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* ActiveInstrumentationProto::mutable_class_() {
  _has_bits_[0] |= 0x00000008u;
  if (class__ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    class__ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveInstrumentationProto.class)
  return class__;
}
inline void ActiveInstrumentationProto::set_allocated_class_(::android::content::ComponentNameProto* class_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(class__);
  }
  if (class_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      class_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, class_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  class__ = class_;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActiveInstrumentationProto.class)
}

// optional bool finished = 2;
inline bool ActiveInstrumentationProto::has_finished() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActiveInstrumentationProto::clear_finished() {
  finished_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ActiveInstrumentationProto::finished() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.finished)
  return finished_;
}
inline void ActiveInstrumentationProto::set_finished(bool value) {
  _has_bits_[0] |= 0x00000040u;
  finished_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ActiveInstrumentationProto.finished)
}

// repeated .com.android.server.am.ProcessRecordProto running_processes = 3;
inline int ActiveInstrumentationProto::running_processes_size() const {
  return running_processes_.size();
}
inline void ActiveInstrumentationProto::clear_running_processes() {
  running_processes_.Clear();
}
inline ::com::android::server::am::ProcessRecordProto* ActiveInstrumentationProto::mutable_running_processes(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveInstrumentationProto.running_processes)
  return running_processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >*
ActiveInstrumentationProto::mutable_running_processes() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActiveInstrumentationProto.running_processes)
  return &running_processes_;
}
inline const ::com::android::server::am::ProcessRecordProto& ActiveInstrumentationProto::running_processes(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.running_processes)
  return running_processes_.Get(index);
}
inline ::com::android::server::am::ProcessRecordProto* ActiveInstrumentationProto::add_running_processes() {
  // @@protoc_insertion_point(field_add:com.android.server.am.ActiveInstrumentationProto.running_processes)
  return running_processes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::ProcessRecordProto >&
ActiveInstrumentationProto::running_processes() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActiveInstrumentationProto.running_processes)
  return running_processes_;
}

// repeated string target_processes = 4;
inline int ActiveInstrumentationProto::target_processes_size() const {
  return target_processes_.size();
}
inline void ActiveInstrumentationProto::clear_target_processes() {
  target_processes_.Clear();
}
inline const std::string& ActiveInstrumentationProto::target_processes(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.target_processes)
  return target_processes_.Get(index);
}
inline std::string* ActiveInstrumentationProto::mutable_target_processes(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveInstrumentationProto.target_processes)
  return target_processes_.Mutable(index);
}
inline void ActiveInstrumentationProto::set_target_processes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.ActiveInstrumentationProto.target_processes)
  target_processes_.Mutable(index)->assign(value);
}
inline void ActiveInstrumentationProto::set_target_processes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.ActiveInstrumentationProto.target_processes)
  target_processes_.Mutable(index)->assign(std::move(value));
}
inline void ActiveInstrumentationProto::set_target_processes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_processes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActiveInstrumentationProto.target_processes)
}
inline void ActiveInstrumentationProto::set_target_processes(int index, const char* value, size_t size) {
  target_processes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActiveInstrumentationProto.target_processes)
}
inline std::string* ActiveInstrumentationProto::add_target_processes() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.am.ActiveInstrumentationProto.target_processes)
  return target_processes_.Add();
}
inline void ActiveInstrumentationProto::add_target_processes(const std::string& value) {
  target_processes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.ActiveInstrumentationProto.target_processes)
}
inline void ActiveInstrumentationProto::add_target_processes(std::string&& value) {
  target_processes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.am.ActiveInstrumentationProto.target_processes)
}
inline void ActiveInstrumentationProto::add_target_processes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_processes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.am.ActiveInstrumentationProto.target_processes)
}
inline void ActiveInstrumentationProto::add_target_processes(const char* value, size_t size) {
  target_processes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.am.ActiveInstrumentationProto.target_processes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ActiveInstrumentationProto::target_processes() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.ActiveInstrumentationProto.target_processes)
  return target_processes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ActiveInstrumentationProto::mutable_target_processes() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.ActiveInstrumentationProto.target_processes)
  return &target_processes_;
}

// optional .android.content.pm.ApplicationInfoProto target_info = 5;
inline bool ActiveInstrumentationProto::has_target_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::content::pm::ApplicationInfoProto& ActiveInstrumentationProto::target_info() const {
  const ::android::content::pm::ApplicationInfoProto* p = target_info_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.target_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::pm::ApplicationInfoProto*>(
      &::android::content::pm::_ApplicationInfoProto_default_instance_);
}
inline ::android::content::pm::ApplicationInfoProto* ActiveInstrumentationProto::release_target_info() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActiveInstrumentationProto.target_info)
  _has_bits_[0] &= ~0x00000010u;
  ::android::content::pm::ApplicationInfoProto* temp = target_info_;
  target_info_ = nullptr;
  return temp;
}
inline ::android::content::pm::ApplicationInfoProto* ActiveInstrumentationProto::mutable_target_info() {
  _has_bits_[0] |= 0x00000010u;
  if (target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::pm::ApplicationInfoProto>(GetArenaNoVirtual());
    target_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveInstrumentationProto.target_info)
  return target_info_;
}
inline void ActiveInstrumentationProto::set_allocated_target_info(::android::content::pm::ApplicationInfoProto* target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_info_);
  }
  if (target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  target_info_ = target_info;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActiveInstrumentationProto.target_info)
}

// optional string profile_file = 6;
inline bool ActiveInstrumentationProto::has_profile_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveInstrumentationProto::clear_profile_file() {
  profile_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActiveInstrumentationProto::profile_file() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.profile_file)
  return profile_file_.GetNoArena();
}
inline void ActiveInstrumentationProto::set_profile_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  profile_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActiveInstrumentationProto.profile_file)
}
inline void ActiveInstrumentationProto::set_profile_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  profile_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActiveInstrumentationProto.profile_file)
}
inline void ActiveInstrumentationProto::set_profile_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  profile_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActiveInstrumentationProto.profile_file)
}
inline void ActiveInstrumentationProto::set_profile_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  profile_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActiveInstrumentationProto.profile_file)
}
inline std::string* ActiveInstrumentationProto::mutable_profile_file() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveInstrumentationProto.profile_file)
  return profile_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActiveInstrumentationProto::release_profile_file() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActiveInstrumentationProto.profile_file)
  if (!has_profile_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return profile_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveInstrumentationProto::set_allocated_profile_file(std::string* profile_file) {
  if (profile_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_file);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActiveInstrumentationProto.profile_file)
}

// optional string watcher = 7;
inline bool ActiveInstrumentationProto::has_watcher() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveInstrumentationProto::clear_watcher() {
  watcher_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ActiveInstrumentationProto::watcher() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.watcher)
  return watcher_.GetNoArena();
}
inline void ActiveInstrumentationProto::set_watcher(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  watcher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActiveInstrumentationProto.watcher)
}
inline void ActiveInstrumentationProto::set_watcher(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  watcher_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActiveInstrumentationProto.watcher)
}
inline void ActiveInstrumentationProto::set_watcher(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  watcher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActiveInstrumentationProto.watcher)
}
inline void ActiveInstrumentationProto::set_watcher(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  watcher_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActiveInstrumentationProto.watcher)
}
inline std::string* ActiveInstrumentationProto::mutable_watcher() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveInstrumentationProto.watcher)
  return watcher_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActiveInstrumentationProto::release_watcher() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActiveInstrumentationProto.watcher)
  if (!has_watcher()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return watcher_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveInstrumentationProto::set_allocated_watcher(std::string* watcher) {
  if (watcher != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  watcher_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), watcher);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActiveInstrumentationProto.watcher)
}

// optional string ui_automation_connection = 8;
inline bool ActiveInstrumentationProto::has_ui_automation_connection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActiveInstrumentationProto::clear_ui_automation_connection() {
  ui_automation_connection_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ActiveInstrumentationProto::ui_automation_connection() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.ui_automation_connection)
  return ui_automation_connection_.GetNoArena();
}
inline void ActiveInstrumentationProto::set_ui_automation_connection(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ui_automation_connection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ActiveInstrumentationProto.ui_automation_connection)
}
inline void ActiveInstrumentationProto::set_ui_automation_connection(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ui_automation_connection_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ActiveInstrumentationProto.ui_automation_connection)
}
inline void ActiveInstrumentationProto::set_ui_automation_connection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ui_automation_connection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ActiveInstrumentationProto.ui_automation_connection)
}
inline void ActiveInstrumentationProto::set_ui_automation_connection(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ui_automation_connection_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ActiveInstrumentationProto.ui_automation_connection)
}
inline std::string* ActiveInstrumentationProto::mutable_ui_automation_connection() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveInstrumentationProto.ui_automation_connection)
  return ui_automation_connection_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActiveInstrumentationProto::release_ui_automation_connection() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActiveInstrumentationProto.ui_automation_connection)
  if (!has_ui_automation_connection()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ui_automation_connection_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActiveInstrumentationProto::set_allocated_ui_automation_connection(std::string* ui_automation_connection) {
  if (ui_automation_connection != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ui_automation_connection_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ui_automation_connection);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActiveInstrumentationProto.ui_automation_connection)
}

// optional .android.os.BundleProto arguments = 10;
inline bool ActiveInstrumentationProto::has_arguments() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::os::BundleProto& ActiveInstrumentationProto::arguments() const {
  const ::android::os::BundleProto* p = arguments_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ActiveInstrumentationProto.arguments)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::BundleProto*>(
      &::android::os::_BundleProto_default_instance_);
}
inline ::android::os::BundleProto* ActiveInstrumentationProto::release_arguments() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ActiveInstrumentationProto.arguments)
  _has_bits_[0] &= ~0x00000020u;
  ::android::os::BundleProto* temp = arguments_;
  arguments_ = nullptr;
  return temp;
}
inline ::android::os::BundleProto* ActiveInstrumentationProto::mutable_arguments() {
  _has_bits_[0] |= 0x00000020u;
  if (arguments_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::BundleProto>(GetArenaNoVirtual());
    arguments_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ActiveInstrumentationProto.arguments)
  return arguments_;
}
inline void ActiveInstrumentationProto::set_allocated_arguments(::android::os::BundleProto* arguments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arguments_);
  }
  if (arguments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arguments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arguments, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  arguments_ = arguments;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ActiveInstrumentationProto.arguments)
}

// -------------------------------------------------------------------

// UidRecordProto_ProcStateSequence

// optional int64 cururent = 1;
inline bool UidRecordProto_ProcStateSequence::has_cururent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidRecordProto_ProcStateSequence::clear_cururent() {
  cururent_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidRecordProto_ProcStateSequence::cururent() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.ProcStateSequence.cururent)
  return cururent_;
}
inline void UidRecordProto_ProcStateSequence::set_cururent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  cururent_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.ProcStateSequence.cururent)
}

// optional int64 last_network_updated = 2;
inline bool UidRecordProto_ProcStateSequence::has_last_network_updated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidRecordProto_ProcStateSequence::clear_last_network_updated() {
  last_network_updated_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidRecordProto_ProcStateSequence::last_network_updated() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.ProcStateSequence.last_network_updated)
  return last_network_updated_;
}
inline void UidRecordProto_ProcStateSequence::set_last_network_updated(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_network_updated_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.ProcStateSequence.last_network_updated)
}

// optional int64 last_dispatched = 3;
inline bool UidRecordProto_ProcStateSequence::has_last_dispatched() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidRecordProto_ProcStateSequence::clear_last_dispatched() {
  last_dispatched_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidRecordProto_ProcStateSequence::last_dispatched() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.ProcStateSequence.last_dispatched)
  return last_dispatched_;
}
inline void UidRecordProto_ProcStateSequence::set_last_dispatched(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_dispatched_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.ProcStateSequence.last_dispatched)
}

// -------------------------------------------------------------------

// UidRecordProto

// optional int32 uid = 1;
inline bool UidRecordProto::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidRecordProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidRecordProto::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.uid)
  return uid_;
}
inline void UidRecordProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.uid)
}

// optional .android.app.ProcessStateEnum current = 2;
inline bool UidRecordProto::has_current() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UidRecordProto::clear_current() {
  current_ = 998;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::app::ProcessStateEnum UidRecordProto::current() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.current)
  return static_cast< ::android::app::ProcessStateEnum >(current_);
}
inline void UidRecordProto::set_current(::android::app::ProcessStateEnum value) {
  assert(::android::app::ProcessStateEnum_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  current_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.current)
}

// optional bool ephemeral = 3;
inline bool UidRecordProto::has_ephemeral() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidRecordProto::clear_ephemeral() {
  ephemeral_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool UidRecordProto::ephemeral() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.ephemeral)
  return ephemeral_;
}
inline void UidRecordProto::set_ephemeral(bool value) {
  _has_bits_[0] |= 0x00000008u;
  ephemeral_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.ephemeral)
}

// optional bool fg_services = 4;
inline bool UidRecordProto::has_fg_services() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UidRecordProto::clear_fg_services() {
  fg_services_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool UidRecordProto::fg_services() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.fg_services)
  return fg_services_;
}
inline void UidRecordProto::set_fg_services(bool value) {
  _has_bits_[0] |= 0x00000010u;
  fg_services_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.fg_services)
}

// optional bool whilelist = 5;
inline bool UidRecordProto::has_whilelist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UidRecordProto::clear_whilelist() {
  whilelist_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool UidRecordProto::whilelist() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.whilelist)
  return whilelist_;
}
inline void UidRecordProto::set_whilelist(bool value) {
  _has_bits_[0] |= 0x00000020u;
  whilelist_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.whilelist)
}

// optional .android.util.Duration last_background_time = 6;
inline bool UidRecordProto::has_last_background_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::util::Duration& UidRecordProto::last_background_time() const {
  const ::android::util::Duration* p = last_background_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.last_background_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* UidRecordProto::release_last_background_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.UidRecordProto.last_background_time)
  _has_bits_[0] &= ~0x00000001u;
  ::android::util::Duration* temp = last_background_time_;
  last_background_time_ = nullptr;
  return temp;
}
inline ::android::util::Duration* UidRecordProto::mutable_last_background_time() {
  _has_bits_[0] |= 0x00000001u;
  if (last_background_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    last_background_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.UidRecordProto.last_background_time)
  return last_background_time_;
}
inline void UidRecordProto::set_allocated_last_background_time(::android::util::Duration* last_background_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_background_time_);
  }
  if (last_background_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_background_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_background_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_background_time_ = last_background_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.UidRecordProto.last_background_time)
}

// optional bool idle = 7;
inline bool UidRecordProto::has_idle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UidRecordProto::clear_idle() {
  idle_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool UidRecordProto::idle() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.idle)
  return idle_;
}
inline void UidRecordProto::set_idle(bool value) {
  _has_bits_[0] |= 0x00000040u;
  idle_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.idle)
}

// repeated .com.android.server.am.UidRecordProto.Change last_reported_changes = 8;
inline int UidRecordProto::last_reported_changes_size() const {
  return last_reported_changes_.size();
}
inline void UidRecordProto::clear_last_reported_changes() {
  last_reported_changes_.Clear();
}
inline ::com::android::server::am::UidRecordProto_Change UidRecordProto::last_reported_changes(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.last_reported_changes)
  return static_cast< ::com::android::server::am::UidRecordProto_Change >(last_reported_changes_.Get(index));
}
inline void UidRecordProto::set_last_reported_changes(int index, ::com::android::server::am::UidRecordProto_Change value) {
  assert(::com::android::server::am::UidRecordProto_Change_IsValid(value));
  last_reported_changes_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.last_reported_changes)
}
inline void UidRecordProto::add_last_reported_changes(::com::android::server::am::UidRecordProto_Change value) {
  assert(::com::android::server::am::UidRecordProto_Change_IsValid(value));
  last_reported_changes_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.UidRecordProto.last_reported_changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UidRecordProto::last_reported_changes() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.UidRecordProto.last_reported_changes)
  return last_reported_changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UidRecordProto::mutable_last_reported_changes() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.UidRecordProto.last_reported_changes)
  return &last_reported_changes_;
}

// optional int32 num_procs = 9;
inline bool UidRecordProto::has_num_procs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UidRecordProto::clear_num_procs() {
  num_procs_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidRecordProto::num_procs() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.num_procs)
  return num_procs_;
}
inline void UidRecordProto::set_num_procs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  num_procs_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UidRecordProto.num_procs)
}

// optional .com.android.server.am.UidRecordProto.ProcStateSequence network_state_update = 10;
inline bool UidRecordProto::has_network_state_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidRecordProto::clear_network_state_update() {
  if (network_state_update_ != nullptr) network_state_update_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::am::UidRecordProto_ProcStateSequence& UidRecordProto::network_state_update() const {
  const ::com::android::server::am::UidRecordProto_ProcStateSequence* p = network_state_update_;
  // @@protoc_insertion_point(field_get:com.android.server.am.UidRecordProto.network_state_update)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::UidRecordProto_ProcStateSequence*>(
      &::com::android::server::am::_UidRecordProto_ProcStateSequence_default_instance_);
}
inline ::com::android::server::am::UidRecordProto_ProcStateSequence* UidRecordProto::release_network_state_update() {
  // @@protoc_insertion_point(field_release:com.android.server.am.UidRecordProto.network_state_update)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::am::UidRecordProto_ProcStateSequence* temp = network_state_update_;
  network_state_update_ = nullptr;
  return temp;
}
inline ::com::android::server::am::UidRecordProto_ProcStateSequence* UidRecordProto::mutable_network_state_update() {
  _has_bits_[0] |= 0x00000002u;
  if (network_state_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::UidRecordProto_ProcStateSequence>(GetArenaNoVirtual());
    network_state_update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.UidRecordProto.network_state_update)
  return network_state_update_;
}
inline void UidRecordProto::set_allocated_network_state_update(::com::android::server::am::UidRecordProto_ProcStateSequence* network_state_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_state_update_;
  }
  if (network_state_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_state_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_state_update, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  network_state_update_ = network_state_update;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.UidRecordProto.network_state_update)
}

// -------------------------------------------------------------------

// ImportanceTokenProto

// optional int32 pid = 1;
inline bool ImportanceTokenProto::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImportanceTokenProto::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportanceTokenProto::pid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ImportanceTokenProto.pid)
  return pid_;
}
inline void ImportanceTokenProto::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ImportanceTokenProto.pid)
}

// optional string token = 2;
inline bool ImportanceTokenProto::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportanceTokenProto::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImportanceTokenProto::token() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ImportanceTokenProto.token)
  return token_.GetNoArena();
}
inline void ImportanceTokenProto::set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ImportanceTokenProto.token)
}
inline void ImportanceTokenProto::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ImportanceTokenProto.token)
}
inline void ImportanceTokenProto::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ImportanceTokenProto.token)
}
inline void ImportanceTokenProto::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ImportanceTokenProto.token)
}
inline std::string* ImportanceTokenProto::mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ImportanceTokenProto.token)
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImportanceTokenProto::release_token() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ImportanceTokenProto.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImportanceTokenProto::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ImportanceTokenProto.token)
}

// optional string reason = 3;
inline bool ImportanceTokenProto::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportanceTokenProto::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImportanceTokenProto::reason() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ImportanceTokenProto.reason)
  return reason_.GetNoArena();
}
inline void ImportanceTokenProto::set_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ImportanceTokenProto.reason)
}
inline void ImportanceTokenProto::set_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ImportanceTokenProto.reason)
}
inline void ImportanceTokenProto::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ImportanceTokenProto.reason)
}
inline void ImportanceTokenProto::set_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ImportanceTokenProto.reason)
}
inline std::string* ImportanceTokenProto::mutable_reason() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ImportanceTokenProto.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImportanceTokenProto::release_reason() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ImportanceTokenProto.reason)
  if (!has_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImportanceTokenProto::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ImportanceTokenProto.reason)
}

// -------------------------------------------------------------------

// VrControllerProto

// repeated .com.android.server.am.VrControllerProto.VrMode vr_mode = 1;
inline int VrControllerProto::vr_mode_size() const {
  return vr_mode_.size();
}
inline void VrControllerProto::clear_vr_mode() {
  vr_mode_.Clear();
}
inline ::com::android::server::am::VrControllerProto_VrMode VrControllerProto::vr_mode(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.VrControllerProto.vr_mode)
  return static_cast< ::com::android::server::am::VrControllerProto_VrMode >(vr_mode_.Get(index));
}
inline void VrControllerProto::set_vr_mode(int index, ::com::android::server::am::VrControllerProto_VrMode value) {
  assert(::com::android::server::am::VrControllerProto_VrMode_IsValid(value));
  vr_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.am.VrControllerProto.vr_mode)
}
inline void VrControllerProto::add_vr_mode(::com::android::server::am::VrControllerProto_VrMode value) {
  assert(::com::android::server::am::VrControllerProto_VrMode_IsValid(value));
  vr_mode_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.VrControllerProto.vr_mode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
VrControllerProto::vr_mode() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.VrControllerProto.vr_mode)
  return vr_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
VrControllerProto::mutable_vr_mode() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.VrControllerProto.vr_mode)
  return &vr_mode_;
}

// optional int32 render_thread_id = 2;
inline bool VrControllerProto::has_render_thread_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VrControllerProto::clear_render_thread_id() {
  render_thread_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VrControllerProto::render_thread_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.VrControllerProto.render_thread_id)
  return render_thread_id_;
}
inline void VrControllerProto::set_render_thread_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  render_thread_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.VrControllerProto.render_thread_id)
}

// -------------------------------------------------------------------

// ProcessOomProto_Detail_CpuRunTime

// optional int64 over_ms = 1;
inline bool ProcessOomProto_Detail_CpuRunTime::has_over_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessOomProto_Detail_CpuRunTime::clear_over_ms() {
  over_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessOomProto_Detail_CpuRunTime::over_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.CpuRunTime.over_ms)
  return over_ms_;
}
inline void ProcessOomProto_Detail_CpuRunTime::set_over_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  over_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.CpuRunTime.over_ms)
}

// optional int64 used_ms = 2;
inline bool ProcessOomProto_Detail_CpuRunTime::has_used_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessOomProto_Detail_CpuRunTime::clear_used_ms() {
  used_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessOomProto_Detail_CpuRunTime::used_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.CpuRunTime.used_ms)
  return used_ms_;
}
inline void ProcessOomProto_Detail_CpuRunTime::set_used_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  used_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.CpuRunTime.used_ms)
}

// optional float ultilization = 3;
inline bool ProcessOomProto_Detail_CpuRunTime::has_ultilization() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessOomProto_Detail_CpuRunTime::clear_ultilization() {
  ultilization_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ProcessOomProto_Detail_CpuRunTime::ultilization() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.CpuRunTime.ultilization)
  return ultilization_;
}
inline void ProcessOomProto_Detail_CpuRunTime::set_ultilization(float value) {
  _has_bits_[0] |= 0x00000004u;
  ultilization_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.CpuRunTime.ultilization)
}

// -------------------------------------------------------------------

// ProcessOomProto_Detail

// optional int32 max_adj = 1;
inline bool ProcessOomProto_Detail::has_max_adj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessOomProto_Detail::clear_max_adj() {
  max_adj_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessOomProto_Detail::max_adj() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.max_adj)
  return max_adj_;
}
inline void ProcessOomProto_Detail::set_max_adj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_adj_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.max_adj)
}

// optional int32 cur_raw_adj = 2;
inline bool ProcessOomProto_Detail::has_cur_raw_adj() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessOomProto_Detail::clear_cur_raw_adj() {
  cur_raw_adj_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessOomProto_Detail::cur_raw_adj() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.cur_raw_adj)
  return cur_raw_adj_;
}
inline void ProcessOomProto_Detail::set_cur_raw_adj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  cur_raw_adj_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.cur_raw_adj)
}

// optional int32 set_raw_adj = 3;
inline bool ProcessOomProto_Detail::has_set_raw_adj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProcessOomProto_Detail::clear_set_raw_adj() {
  set_raw_adj_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessOomProto_Detail::set_raw_adj() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.set_raw_adj)
  return set_raw_adj_;
}
inline void ProcessOomProto_Detail::set_set_raw_adj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  set_raw_adj_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.set_raw_adj)
}

// optional int32 cur_adj = 4;
inline bool ProcessOomProto_Detail::has_cur_adj() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProcessOomProto_Detail::clear_cur_adj() {
  cur_adj_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessOomProto_Detail::cur_adj() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.cur_adj)
  return cur_adj_;
}
inline void ProcessOomProto_Detail::set_cur_adj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  cur_adj_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.cur_adj)
}

// optional int32 set_adj = 5;
inline bool ProcessOomProto_Detail::has_set_adj() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProcessOomProto_Detail::clear_set_adj() {
  set_adj_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessOomProto_Detail::set_adj() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.set_adj)
  return set_adj_;
}
inline void ProcessOomProto_Detail::set_set_adj(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  set_adj_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.set_adj)
}

// optional .android.app.ProcessStateEnum current_state = 7;
inline bool ProcessOomProto_Detail::has_current_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProcessOomProto_Detail::clear_current_state() {
  current_state_ = 998;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::android::app::ProcessStateEnum ProcessOomProto_Detail::current_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.current_state)
  return static_cast< ::android::app::ProcessStateEnum >(current_state_);
}
inline void ProcessOomProto_Detail::set_current_state(::android::app::ProcessStateEnum value) {
  assert(::android::app::ProcessStateEnum_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  current_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.current_state)
}

// optional .android.app.ProcessStateEnum set_state = 8;
inline bool ProcessOomProto_Detail::has_set_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProcessOomProto_Detail::clear_set_state() {
  set_state_ = 998;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::android::app::ProcessStateEnum ProcessOomProto_Detail::set_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.set_state)
  return static_cast< ::android::app::ProcessStateEnum >(set_state_);
}
inline void ProcessOomProto_Detail::set_set_state(::android::app::ProcessStateEnum value) {
  assert(::android::app::ProcessStateEnum_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  set_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.set_state)
}

// optional string last_pss = 9;
inline bool ProcessOomProto_Detail::has_last_pss() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessOomProto_Detail::clear_last_pss() {
  last_pss_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessOomProto_Detail::last_pss() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.last_pss)
  return last_pss_.GetNoArena();
}
inline void ProcessOomProto_Detail::set_last_pss(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.last_pss)
}
inline void ProcessOomProto_Detail::set_last_pss(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  last_pss_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ProcessOomProto.Detail.last_pss)
}
inline void ProcessOomProto_Detail::set_last_pss(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  last_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ProcessOomProto.Detail.last_pss)
}
inline void ProcessOomProto_Detail::set_last_pss(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  last_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ProcessOomProto.Detail.last_pss)
}
inline std::string* ProcessOomProto_Detail::mutable_last_pss() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.Detail.last_pss)
  return last_pss_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessOomProto_Detail::release_last_pss() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.Detail.last_pss)
  if (!has_last_pss()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return last_pss_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessOomProto_Detail::set_allocated_last_pss(std::string* last_pss) {
  if (last_pss != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_pss_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_pss);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.Detail.last_pss)
}

// optional string last_swap_pss = 10;
inline bool ProcessOomProto_Detail::has_last_swap_pss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessOomProto_Detail::clear_last_swap_pss() {
  last_swap_pss_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProcessOomProto_Detail::last_swap_pss() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.last_swap_pss)
  return last_swap_pss_.GetNoArena();
}
inline void ProcessOomProto_Detail::set_last_swap_pss(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_swap_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.last_swap_pss)
}
inline void ProcessOomProto_Detail::set_last_swap_pss(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  last_swap_pss_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ProcessOomProto.Detail.last_swap_pss)
}
inline void ProcessOomProto_Detail::set_last_swap_pss(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  last_swap_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ProcessOomProto.Detail.last_swap_pss)
}
inline void ProcessOomProto_Detail::set_last_swap_pss(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  last_swap_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ProcessOomProto.Detail.last_swap_pss)
}
inline std::string* ProcessOomProto_Detail::mutable_last_swap_pss() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.Detail.last_swap_pss)
  return last_swap_pss_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessOomProto_Detail::release_last_swap_pss() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.Detail.last_swap_pss)
  if (!has_last_swap_pss()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return last_swap_pss_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessOomProto_Detail::set_allocated_last_swap_pss(std::string* last_swap_pss) {
  if (last_swap_pss != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_swap_pss_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_swap_pss);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.Detail.last_swap_pss)
}

// optional string last_cached_pss = 11;
inline bool ProcessOomProto_Detail::has_last_cached_pss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessOomProto_Detail::clear_last_cached_pss() {
  last_cached_pss_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProcessOomProto_Detail::last_cached_pss() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.last_cached_pss)
  return last_cached_pss_.GetNoArena();
}
inline void ProcessOomProto_Detail::set_last_cached_pss(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  last_cached_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.last_cached_pss)
}
inline void ProcessOomProto_Detail::set_last_cached_pss(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  last_cached_pss_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ProcessOomProto.Detail.last_cached_pss)
}
inline void ProcessOomProto_Detail::set_last_cached_pss(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  last_cached_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ProcessOomProto.Detail.last_cached_pss)
}
inline void ProcessOomProto_Detail::set_last_cached_pss(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  last_cached_pss_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ProcessOomProto.Detail.last_cached_pss)
}
inline std::string* ProcessOomProto_Detail::mutable_last_cached_pss() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.Detail.last_cached_pss)
  return last_cached_pss_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessOomProto_Detail::release_last_cached_pss() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.Detail.last_cached_pss)
  if (!has_last_cached_pss()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return last_cached_pss_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessOomProto_Detail::set_allocated_last_cached_pss(std::string* last_cached_pss) {
  if (last_cached_pss != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  last_cached_pss_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_cached_pss);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.Detail.last_cached_pss)
}

// optional bool cached = 12;
inline bool ProcessOomProto_Detail::has_cached() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProcessOomProto_Detail::clear_cached() {
  cached_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ProcessOomProto_Detail::cached() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.cached)
  return cached_;
}
inline void ProcessOomProto_Detail::set_cached(bool value) {
  _has_bits_[0] |= 0x00000200u;
  cached_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.cached)
}

// optional bool empty = 13;
inline bool ProcessOomProto_Detail::has_empty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProcessOomProto_Detail::clear_empty() {
  empty_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ProcessOomProto_Detail::empty() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.empty)
  return empty_;
}
inline void ProcessOomProto_Detail::set_empty(bool value) {
  _has_bits_[0] |= 0x00000400u;
  empty_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.empty)
}

// optional bool has_above_client = 14;
inline bool ProcessOomProto_Detail::has_has_above_client() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProcessOomProto_Detail::clear_has_above_client() {
  has_above_client_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ProcessOomProto_Detail::has_above_client() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.has_above_client)
  return has_above_client_;
}
inline void ProcessOomProto_Detail::set_has_above_client(bool value) {
  _has_bits_[0] |= 0x00000800u;
  has_above_client_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.Detail.has_above_client)
}

// optional .com.android.server.am.ProcessOomProto.Detail.CpuRunTime service_run_time = 15;
inline bool ProcessOomProto_Detail::has_service_run_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessOomProto_Detail::clear_service_run_time() {
  if (service_run_time_ != nullptr) service_run_time_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime& ProcessOomProto_Detail::service_run_time() const {
  const ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* p = service_run_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.Detail.service_run_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime*>(
      &::com::android::server::am::_ProcessOomProto_Detail_CpuRunTime_default_instance_);
}
inline ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* ProcessOomProto_Detail::release_service_run_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.Detail.service_run_time)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* temp = service_run_time_;
  service_run_time_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* ProcessOomProto_Detail::mutable_service_run_time() {
  _has_bits_[0] |= 0x00000008u;
  if (service_run_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessOomProto_Detail_CpuRunTime>(GetArenaNoVirtual());
    service_run_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.Detail.service_run_time)
  return service_run_time_;
}
inline void ProcessOomProto_Detail::set_allocated_service_run_time(::com::android::server::am::ProcessOomProto_Detail_CpuRunTime* service_run_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete service_run_time_;
  }
  if (service_run_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_run_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_run_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  service_run_time_ = service_run_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.Detail.service_run_time)
}

// -------------------------------------------------------------------

// ProcessOomProto

// optional bool persistent = 1;
inline bool ProcessOomProto::has_persistent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessOomProto::clear_persistent() {
  persistent_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ProcessOomProto::persistent() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.persistent)
  return persistent_;
}
inline void ProcessOomProto::set_persistent(bool value) {
  _has_bits_[0] |= 0x00000010u;
  persistent_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.persistent)
}

// optional int32 num = 2;
inline bool ProcessOomProto::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessOomProto::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessOomProto::num() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.num)
  return num_;
}
inline void ProcessOomProto::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.num)
}

// optional string oom_adj = 3;
inline bool ProcessOomProto::has_oom_adj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessOomProto::clear_oom_adj() {
  oom_adj_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProcessOomProto::oom_adj() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.oom_adj)
  return oom_adj_.GetNoArena();
}
inline void ProcessOomProto::set_oom_adj(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  oom_adj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.oom_adj)
}
inline void ProcessOomProto::set_oom_adj(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  oom_adj_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ProcessOomProto.oom_adj)
}
inline void ProcessOomProto::set_oom_adj(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  oom_adj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ProcessOomProto.oom_adj)
}
inline void ProcessOomProto::set_oom_adj(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  oom_adj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ProcessOomProto.oom_adj)
}
inline std::string* ProcessOomProto::mutable_oom_adj() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.oom_adj)
  return oom_adj_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessOomProto::release_oom_adj() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.oom_adj)
  if (!has_oom_adj()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return oom_adj_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessOomProto::set_allocated_oom_adj(std::string* oom_adj) {
  if (oom_adj != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  oom_adj_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oom_adj);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.oom_adj)
}

// optional .com.android.server.am.ProcessOomProto.SchedGroup sched_group = 4 [default = SCHED_GROUP_UNKNOWN];
inline bool ProcessOomProto::has_sched_group() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProcessOomProto::clear_sched_group() {
  sched_group_ = -1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::com::android::server::am::ProcessOomProto_SchedGroup ProcessOomProto::sched_group() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.sched_group)
  return static_cast< ::com::android::server::am::ProcessOomProto_SchedGroup >(sched_group_);
}
inline void ProcessOomProto::set_sched_group(::com::android::server::am::ProcessOomProto_SchedGroup value) {
  assert(::com::android::server::am::ProcessOomProto_SchedGroup_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  sched_group_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.sched_group)
}

// optional bool activities = 5;
inline bool ProcessOomProto::has_activities() const {
  return Foreground_case() == kActivities;
}
inline void ProcessOomProto::set_has_activities() {
  _oneof_case_[0] = kActivities;
}
inline void ProcessOomProto::clear_activities() {
  if (has_activities()) {
    Foreground_.activities_ = false;
    clear_has_Foreground();
  }
}
inline bool ProcessOomProto::activities() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.activities)
  if (has_activities()) {
    return Foreground_.activities_;
  }
  return false;
}
inline void ProcessOomProto::set_activities(bool value) {
  if (!has_activities()) {
    clear_Foreground();
    set_has_activities();
  }
  Foreground_.activities_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.activities)
}

// optional bool services = 6;
inline bool ProcessOomProto::has_services() const {
  return Foreground_case() == kServices;
}
inline void ProcessOomProto::set_has_services() {
  _oneof_case_[0] = kServices;
}
inline void ProcessOomProto::clear_services() {
  if (has_services()) {
    Foreground_.services_ = false;
    clear_has_Foreground();
  }
}
inline bool ProcessOomProto::services() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.services)
  if (has_services()) {
    return Foreground_.services_;
  }
  return false;
}
inline void ProcessOomProto::set_services(bool value) {
  if (!has_services()) {
    clear_Foreground();
    set_has_services();
  }
  Foreground_.services_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.services)
}

// optional .android.app.ProcessStateEnum state = 7;
inline bool ProcessOomProto::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProcessOomProto::clear_state() {
  state_ = 998;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::app::ProcessStateEnum ProcessOomProto::state() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.state)
  return static_cast< ::android::app::ProcessStateEnum >(state_);
}
inline void ProcessOomProto::set_state(::android::app::ProcessStateEnum value) {
  assert(::android::app::ProcessStateEnum_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.state)
}

// optional int32 trim_memory_level = 8;
inline bool ProcessOomProto::has_trim_memory_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProcessOomProto::clear_trim_memory_level() {
  trim_memory_level_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessOomProto::trim_memory_level() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.trim_memory_level)
  return trim_memory_level_;
}
inline void ProcessOomProto::set_trim_memory_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  trim_memory_level_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.trim_memory_level)
}

// optional .com.android.server.am.ProcessRecordProto proc = 9;
inline bool ProcessOomProto::has_proc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessOomProto::clear_proc() {
  if (proc_ != nullptr) proc_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::am::ProcessRecordProto& ProcessOomProto::proc() const {
  const ::com::android::server::am::ProcessRecordProto* p = proc_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.proc)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ProcessOomProto::release_proc() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.proc)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::am::ProcessRecordProto* temp = proc_;
  proc_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ProcessOomProto::mutable_proc() {
  _has_bits_[0] |= 0x00000004u;
  if (proc_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    proc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.proc)
  return proc_;
}
inline void ProcessOomProto::set_allocated_proc(::com::android::server::am::ProcessRecordProto* proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proc_;
  }
  if (proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  proc_ = proc;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.proc)
}

// optional string adj_type = 10;
inline bool ProcessOomProto::has_adj_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessOomProto::clear_adj_type() {
  adj_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProcessOomProto::adj_type() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.adj_type)
  return adj_type_.GetNoArena();
}
inline void ProcessOomProto::set_adj_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  adj_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.adj_type)
}
inline void ProcessOomProto::set_adj_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  adj_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ProcessOomProto.adj_type)
}
inline void ProcessOomProto::set_adj_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  adj_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ProcessOomProto.adj_type)
}
inline void ProcessOomProto::set_adj_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  adj_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ProcessOomProto.adj_type)
}
inline std::string* ProcessOomProto::mutable_adj_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.adj_type)
  return adj_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessOomProto::release_adj_type() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.adj_type)
  if (!has_adj_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return adj_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessOomProto::set_allocated_adj_type(std::string* adj_type) {
  if (adj_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  adj_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adj_type);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.adj_type)
}

// optional .android.content.ComponentNameProto adj_target_component_name = 11;
inline bool ProcessOomProto::has_adj_target_component_name() const {
  return AdjTarget_case() == kAdjTargetComponentName;
}
inline void ProcessOomProto::set_has_adj_target_component_name() {
  _oneof_case_[1] = kAdjTargetComponentName;
}
inline ::android::content::ComponentNameProto* ProcessOomProto::release_adj_target_component_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.adj_target_component_name)
  if (has_adj_target_component_name()) {
    clear_has_AdjTarget();
      ::android::content::ComponentNameProto* temp = AdjTarget_.adj_target_component_name_;
    AdjTarget_.adj_target_component_name_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::content::ComponentNameProto& ProcessOomProto::adj_target_component_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.adj_target_component_name)
  return has_adj_target_component_name()
      ? *AdjTarget_.adj_target_component_name_
      : *reinterpret_cast< ::android::content::ComponentNameProto*>(&::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* ProcessOomProto::mutable_adj_target_component_name() {
  if (!has_adj_target_component_name()) {
    clear_AdjTarget();
    set_has_adj_target_component_name();
    AdjTarget_.adj_target_component_name_ = CreateMaybeMessage< ::android::content::ComponentNameProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.adj_target_component_name)
  return AdjTarget_.adj_target_component_name_;
}

// optional string adj_target_object = 12;
inline bool ProcessOomProto::has_adj_target_object() const {
  return AdjTarget_case() == kAdjTargetObject;
}
inline void ProcessOomProto::set_has_adj_target_object() {
  _oneof_case_[1] = kAdjTargetObject;
}
inline void ProcessOomProto::clear_adj_target_object() {
  if (has_adj_target_object()) {
    AdjTarget_.adj_target_object_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_AdjTarget();
  }
}
inline const std::string& ProcessOomProto::adj_target_object() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.adj_target_object)
  if (has_adj_target_object()) {
    return AdjTarget_.adj_target_object_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProcessOomProto::set_adj_target_object(const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.adj_target_object)
  if (!has_adj_target_object()) {
    clear_AdjTarget();
    set_has_adj_target_object();
    AdjTarget_.adj_target_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AdjTarget_.adj_target_object_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.adj_target_object)
}
inline void ProcessOomProto::set_adj_target_object(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.adj_target_object)
  if (!has_adj_target_object()) {
    clear_AdjTarget();
    set_has_adj_target_object();
    AdjTarget_.adj_target_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AdjTarget_.adj_target_object_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ProcessOomProto.adj_target_object)
}
inline void ProcessOomProto::set_adj_target_object(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_adj_target_object()) {
    clear_AdjTarget();
    set_has_adj_target_object();
    AdjTarget_.adj_target_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AdjTarget_.adj_target_object_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ProcessOomProto.adj_target_object)
}
inline void ProcessOomProto::set_adj_target_object(const char* value, size_t size) {
  if (!has_adj_target_object()) {
    clear_AdjTarget();
    set_has_adj_target_object();
    AdjTarget_.adj_target_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AdjTarget_.adj_target_object_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ProcessOomProto.adj_target_object)
}
inline std::string* ProcessOomProto::mutable_adj_target_object() {
  if (!has_adj_target_object()) {
    clear_AdjTarget();
    set_has_adj_target_object();
    AdjTarget_.adj_target_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.adj_target_object)
  return AdjTarget_.adj_target_object_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessOomProto::release_adj_target_object() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.adj_target_object)
  if (has_adj_target_object()) {
    clear_has_AdjTarget();
    return AdjTarget_.adj_target_object_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ProcessOomProto::set_allocated_adj_target_object(std::string* adj_target_object) {
  if (has_AdjTarget()) {
    clear_AdjTarget();
  }
  if (adj_target_object != nullptr) {
    set_has_adj_target_object();
    AdjTarget_.adj_target_object_.UnsafeSetDefault(adj_target_object);
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.adj_target_object)
}

// optional .com.android.server.am.ProcessRecordProto adj_source_proc = 13;
inline bool ProcessOomProto::has_adj_source_proc() const {
  return AdjSource_case() == kAdjSourceProc;
}
inline void ProcessOomProto::set_has_adj_source_proc() {
  _oneof_case_[2] = kAdjSourceProc;
}
inline void ProcessOomProto::clear_adj_source_proc() {
  if (has_adj_source_proc()) {
    delete AdjSource_.adj_source_proc_;
    clear_has_AdjSource();
  }
}
inline ::com::android::server::am::ProcessRecordProto* ProcessOomProto::release_adj_source_proc() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.adj_source_proc)
  if (has_adj_source_proc()) {
    clear_has_AdjSource();
      ::com::android::server::am::ProcessRecordProto* temp = AdjSource_.adj_source_proc_;
    AdjSource_.adj_source_proc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::android::server::am::ProcessRecordProto& ProcessOomProto::adj_source_proc() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.adj_source_proc)
  return has_adj_source_proc()
      ? *AdjSource_.adj_source_proc_
      : *reinterpret_cast< ::com::android::server::am::ProcessRecordProto*>(&::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ProcessOomProto::mutable_adj_source_proc() {
  if (!has_adj_source_proc()) {
    clear_AdjSource();
    set_has_adj_source_proc();
    AdjSource_.adj_source_proc_ = CreateMaybeMessage< ::com::android::server::am::ProcessRecordProto >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.adj_source_proc)
  return AdjSource_.adj_source_proc_;
}

// optional string adj_source_object = 14;
inline bool ProcessOomProto::has_adj_source_object() const {
  return AdjSource_case() == kAdjSourceObject;
}
inline void ProcessOomProto::set_has_adj_source_object() {
  _oneof_case_[2] = kAdjSourceObject;
}
inline void ProcessOomProto::clear_adj_source_object() {
  if (has_adj_source_object()) {
    AdjSource_.adj_source_object_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_AdjSource();
  }
}
inline const std::string& ProcessOomProto::adj_source_object() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.adj_source_object)
  if (has_adj_source_object()) {
    return AdjSource_.adj_source_object_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ProcessOomProto::set_adj_source_object(const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.adj_source_object)
  if (!has_adj_source_object()) {
    clear_AdjSource();
    set_has_adj_source_object();
    AdjSource_.adj_source_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AdjSource_.adj_source_object_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.adj_source_object)
}
inline void ProcessOomProto::set_adj_source_object(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessOomProto.adj_source_object)
  if (!has_adj_source_object()) {
    clear_AdjSource();
    set_has_adj_source_object();
    AdjSource_.adj_source_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AdjSource_.adj_source_object_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.ProcessOomProto.adj_source_object)
}
inline void ProcessOomProto::set_adj_source_object(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_adj_source_object()) {
    clear_AdjSource();
    set_has_adj_source_object();
    AdjSource_.adj_source_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AdjSource_.adj_source_object_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.ProcessOomProto.adj_source_object)
}
inline void ProcessOomProto::set_adj_source_object(const char* value, size_t size) {
  if (!has_adj_source_object()) {
    clear_AdjSource();
    set_has_adj_source_object();
    AdjSource_.adj_source_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  AdjSource_.adj_source_object_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.ProcessOomProto.adj_source_object)
}
inline std::string* ProcessOomProto::mutable_adj_source_object() {
  if (!has_adj_source_object()) {
    clear_AdjSource();
    set_has_adj_source_object();
    AdjSource_.adj_source_object_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.adj_source_object)
  return AdjSource_.adj_source_object_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessOomProto::release_adj_source_object() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.adj_source_object)
  if (has_adj_source_object()) {
    clear_has_AdjSource();
    return AdjSource_.adj_source_object_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ProcessOomProto::set_allocated_adj_source_object(std::string* adj_source_object) {
  if (has_AdjSource()) {
    clear_AdjSource();
  }
  if (adj_source_object != nullptr) {
    set_has_adj_source_object();
    AdjSource_.adj_source_object_.UnsafeSetDefault(adj_source_object);
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.adj_source_object)
}

// optional .com.android.server.am.ProcessOomProto.Detail detail = 15;
inline bool ProcessOomProto::has_detail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessOomProto::clear_detail() {
  if (detail_ != nullptr) detail_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::android::server::am::ProcessOomProto_Detail& ProcessOomProto::detail() const {
  const ::com::android::server::am::ProcessOomProto_Detail* p = detail_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessOomProto.detail)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessOomProto_Detail*>(
      &::com::android::server::am::_ProcessOomProto_Detail_default_instance_);
}
inline ::com::android::server::am::ProcessOomProto_Detail* ProcessOomProto::release_detail() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessOomProto.detail)
  _has_bits_[0] &= ~0x00000008u;
  ::com::android::server::am::ProcessOomProto_Detail* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessOomProto_Detail* ProcessOomProto::mutable_detail() {
  _has_bits_[0] |= 0x00000008u;
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessOomProto_Detail>(GetArenaNoVirtual());
    detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessOomProto.detail)
  return detail_;
}
inline void ProcessOomProto::set_allocated_detail(::com::android::server::am::ProcessOomProto_Detail* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessOomProto.detail)
}

inline bool ProcessOomProto::has_Foreground() const {
  return Foreground_case() != FOREGROUND_NOT_SET;
}
inline void ProcessOomProto::clear_has_Foreground() {
  _oneof_case_[0] = FOREGROUND_NOT_SET;
}
inline bool ProcessOomProto::has_AdjTarget() const {
  return AdjTarget_case() != ADJTARGET_NOT_SET;
}
inline void ProcessOomProto::clear_has_AdjTarget() {
  _oneof_case_[1] = ADJTARGET_NOT_SET;
}
inline bool ProcessOomProto::has_AdjSource() const {
  return AdjSource_case() != ADJSOURCE_NOT_SET;
}
inline void ProcessOomProto::clear_has_AdjSource() {
  _oneof_case_[2] = ADJSOURCE_NOT_SET;
}
inline ProcessOomProto::ForegroundCase ProcessOomProto::Foreground_case() const {
  return ProcessOomProto::ForegroundCase(_oneof_case_[0]);
}
inline ProcessOomProto::AdjTargetCase ProcessOomProto::AdjTarget_case() const {
  return ProcessOomProto::AdjTargetCase(_oneof_case_[1]);
}
inline ProcessOomProto::AdjSourceCase ProcessOomProto::AdjSource_case() const {
  return ProcessOomProto::AdjSourceCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// ProcessToGcProto

// optional .com.android.server.am.ProcessRecordProto proc = 1;
inline bool ProcessToGcProto::has_proc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessToGcProto::clear_proc() {
  if (proc_ != nullptr) proc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::am::ProcessRecordProto& ProcessToGcProto::proc() const {
  const ::com::android::server::am::ProcessRecordProto* p = proc_;
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessToGcProto.proc)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::ProcessRecordProto*>(
      &::com::android::server::am::_ProcessRecordProto_default_instance_);
}
inline ::com::android::server::am::ProcessRecordProto* ProcessToGcProto::release_proc() {
  // @@protoc_insertion_point(field_release:com.android.server.am.ProcessToGcProto.proc)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::am::ProcessRecordProto* temp = proc_;
  proc_ = nullptr;
  return temp;
}
inline ::com::android::server::am::ProcessRecordProto* ProcessToGcProto::mutable_proc() {
  _has_bits_[0] |= 0x00000001u;
  if (proc_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::ProcessRecordProto>(GetArenaNoVirtual());
    proc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.ProcessToGcProto.proc)
  return proc_;
}
inline void ProcessToGcProto::set_allocated_proc(::com::android::server::am::ProcessRecordProto* proc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proc_;
  }
  if (proc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  proc_ = proc;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.ProcessToGcProto.proc)
}

// optional bool report_low_memory = 2;
inline bool ProcessToGcProto::has_report_low_memory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessToGcProto::clear_report_low_memory() {
  report_low_memory_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ProcessToGcProto::report_low_memory() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessToGcProto.report_low_memory)
  return report_low_memory_;
}
inline void ProcessToGcProto::set_report_low_memory(bool value) {
  _has_bits_[0] |= 0x00000010u;
  report_low_memory_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessToGcProto.report_low_memory)
}

// optional int64 now_uptime_ms = 3;
inline bool ProcessToGcProto::has_now_uptime_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessToGcProto::clear_now_uptime_ms() {
  now_uptime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessToGcProto::now_uptime_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessToGcProto.now_uptime_ms)
  return now_uptime_ms_;
}
inline void ProcessToGcProto::set_now_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  now_uptime_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessToGcProto.now_uptime_ms)
}

// optional int64 last_gced_ms = 4;
inline bool ProcessToGcProto::has_last_gced_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessToGcProto::clear_last_gced_ms() {
  last_gced_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessToGcProto::last_gced_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessToGcProto.last_gced_ms)
  return last_gced_ms_;
}
inline void ProcessToGcProto::set_last_gced_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_gced_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessToGcProto.last_gced_ms)
}

// optional int64 last_low_memory_ms = 5;
inline bool ProcessToGcProto::has_last_low_memory_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessToGcProto::clear_last_low_memory_ms() {
  last_low_memory_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessToGcProto::last_low_memory_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.ProcessToGcProto.last_low_memory_ms)
  return last_low_memory_ms_;
}
inline void ProcessToGcProto::set_last_low_memory_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_low_memory_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.ProcessToGcProto.last_low_memory_ms)
}

// -------------------------------------------------------------------

// AppErrorsProto_ProcessCrashTime_Entry

// optional int32 uid = 1;
inline bool AppErrorsProto_ProcessCrashTime_Entry::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppErrorsProto_ProcessCrashTime_Entry::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppErrorsProto_ProcessCrashTime_Entry::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry.uid)
  return uid_;
}
inline void AppErrorsProto_ProcessCrashTime_Entry::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry.uid)
}

// optional int64 last_crashed_at_ms = 2;
inline bool AppErrorsProto_ProcessCrashTime_Entry::has_last_crashed_at_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppErrorsProto_ProcessCrashTime_Entry::clear_last_crashed_at_ms() {
  last_crashed_at_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppErrorsProto_ProcessCrashTime_Entry::last_crashed_at_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry.last_crashed_at_ms)
  return last_crashed_at_ms_;
}
inline void AppErrorsProto_ProcessCrashTime_Entry::set_last_crashed_at_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  last_crashed_at_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry.last_crashed_at_ms)
}

// -------------------------------------------------------------------

// AppErrorsProto_ProcessCrashTime

// optional string process_name = 1;
inline bool AppErrorsProto_ProcessCrashTime::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppErrorsProto_ProcessCrashTime::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppErrorsProto_ProcessCrashTime::process_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name)
  return process_name_.GetNoArena();
}
inline void AppErrorsProto_ProcessCrashTime::set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name)
}
inline void AppErrorsProto_ProcessCrashTime::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name)
}
inline void AppErrorsProto_ProcessCrashTime::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name)
}
inline void AppErrorsProto_ProcessCrashTime::set_process_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name)
}
inline std::string* AppErrorsProto_ProcessCrashTime::mutable_process_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name)
  return process_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppErrorsProto_ProcessCrashTime::release_process_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name)
  if (!has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return process_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppErrorsProto_ProcessCrashTime::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  process_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppErrorsProto.ProcessCrashTime.process_name)
}

// repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime.Entry entries = 2;
inline int AppErrorsProto_ProcessCrashTime::entries_size() const {
  return entries_.size();
}
inline void AppErrorsProto_ProcessCrashTime::clear_entries() {
  entries_.Clear();
}
inline ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry* AppErrorsProto_ProcessCrashTime::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.ProcessCrashTime.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry >*
AppErrorsProto_ProcessCrashTime::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppErrorsProto.ProcessCrashTime.entries)
  return &entries_;
}
inline const ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry& AppErrorsProto_ProcessCrashTime::entries(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.ProcessCrashTime.entries)
  return entries_.Get(index);
}
inline ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry* AppErrorsProto_ProcessCrashTime::add_entries() {
  // @@protoc_insertion_point(field_add:com.android.server.am.AppErrorsProto.ProcessCrashTime.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime_Entry >&
AppErrorsProto_ProcessCrashTime::entries() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppErrorsProto.ProcessCrashTime.entries)
  return entries_;
}

// -------------------------------------------------------------------

// AppErrorsProto_BadProcess_Entry

// optional int32 uid = 1;
inline bool AppErrorsProto_BadProcess_Entry::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppErrorsProto_BadProcess_Entry::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppErrorsProto_BadProcess_Entry::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.BadProcess.Entry.uid)
  return uid_;
}
inline void AppErrorsProto_BadProcess_Entry::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.BadProcess.Entry.uid)
}

// optional int64 crashed_at_ms = 2;
inline bool AppErrorsProto_BadProcess_Entry::has_crashed_at_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppErrorsProto_BadProcess_Entry::clear_crashed_at_ms() {
  crashed_at_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppErrorsProto_BadProcess_Entry::crashed_at_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.BadProcess.Entry.crashed_at_ms)
  return crashed_at_ms_;
}
inline void AppErrorsProto_BadProcess_Entry::set_crashed_at_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  crashed_at_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.BadProcess.Entry.crashed_at_ms)
}

// optional string short_msg = 3;
inline bool AppErrorsProto_BadProcess_Entry::has_short_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppErrorsProto_BadProcess_Entry::clear_short_msg() {
  short_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppErrorsProto_BadProcess_Entry::short_msg() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg)
  return short_msg_.GetNoArena();
}
inline void AppErrorsProto_BadProcess_Entry::set_short_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  short_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg)
}
inline void AppErrorsProto_BadProcess_Entry::set_short_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  short_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg)
}
inline void AppErrorsProto_BadProcess_Entry::set_short_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  short_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg)
}
inline void AppErrorsProto_BadProcess_Entry::set_short_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  short_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg)
}
inline std::string* AppErrorsProto_BadProcess_Entry::mutable_short_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg)
  return short_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppErrorsProto_BadProcess_Entry::release_short_msg() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg)
  if (!has_short_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return short_msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppErrorsProto_BadProcess_Entry::set_allocated_short_msg(std::string* short_msg) {
  if (short_msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  short_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_msg);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppErrorsProto.BadProcess.Entry.short_msg)
}

// optional string long_msg = 4 [(.android.privacy) = {
inline bool AppErrorsProto_BadProcess_Entry::has_long_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppErrorsProto_BadProcess_Entry::clear_long_msg() {
  long_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppErrorsProto_BadProcess_Entry::long_msg() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg)
  return long_msg_.GetNoArena();
}
inline void AppErrorsProto_BadProcess_Entry::set_long_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  long_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg)
}
inline void AppErrorsProto_BadProcess_Entry::set_long_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  long_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg)
}
inline void AppErrorsProto_BadProcess_Entry::set_long_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  long_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg)
}
inline void AppErrorsProto_BadProcess_Entry::set_long_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  long_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg)
}
inline std::string* AppErrorsProto_BadProcess_Entry::mutable_long_msg() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg)
  return long_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppErrorsProto_BadProcess_Entry::release_long_msg() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg)
  if (!has_long_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return long_msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppErrorsProto_BadProcess_Entry::set_allocated_long_msg(std::string* long_msg) {
  if (long_msg != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  long_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_msg);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppErrorsProto.BadProcess.Entry.long_msg)
}

// optional string stack = 5 [(.android.privacy) = {
inline bool AppErrorsProto_BadProcess_Entry::has_stack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppErrorsProto_BadProcess_Entry::clear_stack() {
  stack_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppErrorsProto_BadProcess_Entry::stack() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.BadProcess.Entry.stack)
  return stack_.GetNoArena();
}
inline void AppErrorsProto_BadProcess_Entry::set_stack(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  stack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.BadProcess.Entry.stack)
}
inline void AppErrorsProto_BadProcess_Entry::set_stack(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  stack_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppErrorsProto.BadProcess.Entry.stack)
}
inline void AppErrorsProto_BadProcess_Entry::set_stack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  stack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppErrorsProto.BadProcess.Entry.stack)
}
inline void AppErrorsProto_BadProcess_Entry::set_stack(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  stack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppErrorsProto.BadProcess.Entry.stack)
}
inline std::string* AppErrorsProto_BadProcess_Entry::mutable_stack() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.BadProcess.Entry.stack)
  return stack_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppErrorsProto_BadProcess_Entry::release_stack() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppErrorsProto.BadProcess.Entry.stack)
  if (!has_stack()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return stack_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppErrorsProto_BadProcess_Entry::set_allocated_stack(std::string* stack) {
  if (stack != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stack_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stack);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppErrorsProto.BadProcess.Entry.stack)
}

// -------------------------------------------------------------------

// AppErrorsProto_BadProcess

// optional string process_name = 1;
inline bool AppErrorsProto_BadProcess::has_process_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppErrorsProto_BadProcess::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppErrorsProto_BadProcess::process_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.BadProcess.process_name)
  return process_name_.GetNoArena();
}
inline void AppErrorsProto_BadProcess::set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.BadProcess.process_name)
}
inline void AppErrorsProto_BadProcess::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppErrorsProto.BadProcess.process_name)
}
inline void AppErrorsProto_BadProcess::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppErrorsProto.BadProcess.process_name)
}
inline void AppErrorsProto_BadProcess::set_process_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppErrorsProto.BadProcess.process_name)
}
inline std::string* AppErrorsProto_BadProcess::mutable_process_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.BadProcess.process_name)
  return process_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppErrorsProto_BadProcess::release_process_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppErrorsProto.BadProcess.process_name)
  if (!has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return process_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppErrorsProto_BadProcess::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  process_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppErrorsProto.BadProcess.process_name)
}

// repeated .com.android.server.am.AppErrorsProto.BadProcess.Entry entries = 2;
inline int AppErrorsProto_BadProcess::entries_size() const {
  return entries_.size();
}
inline void AppErrorsProto_BadProcess::clear_entries() {
  entries_.Clear();
}
inline ::com::android::server::am::AppErrorsProto_BadProcess_Entry* AppErrorsProto_BadProcess::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.BadProcess.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess_Entry >*
AppErrorsProto_BadProcess::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppErrorsProto.BadProcess.entries)
  return &entries_;
}
inline const ::com::android::server::am::AppErrorsProto_BadProcess_Entry& AppErrorsProto_BadProcess::entries(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.BadProcess.entries)
  return entries_.Get(index);
}
inline ::com::android::server::am::AppErrorsProto_BadProcess_Entry* AppErrorsProto_BadProcess::add_entries() {
  // @@protoc_insertion_point(field_add:com.android.server.am.AppErrorsProto.BadProcess.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess_Entry >&
AppErrorsProto_BadProcess::entries() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppErrorsProto.BadProcess.entries)
  return entries_;
}

// -------------------------------------------------------------------

// AppErrorsProto

// optional int64 now_uptime_ms = 1;
inline bool AppErrorsProto::has_now_uptime_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppErrorsProto::clear_now_uptime_ms() {
  now_uptime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppErrorsProto::now_uptime_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.now_uptime_ms)
  return now_uptime_ms_;
}
inline void AppErrorsProto::set_now_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  now_uptime_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppErrorsProto.now_uptime_ms)
}

// repeated .com.android.server.am.AppErrorsProto.ProcessCrashTime process_crash_times = 2;
inline int AppErrorsProto::process_crash_times_size() const {
  return process_crash_times_.size();
}
inline void AppErrorsProto::clear_process_crash_times() {
  process_crash_times_.Clear();
}
inline ::com::android::server::am::AppErrorsProto_ProcessCrashTime* AppErrorsProto::mutable_process_crash_times(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.process_crash_times)
  return process_crash_times_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime >*
AppErrorsProto::mutable_process_crash_times() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppErrorsProto.process_crash_times)
  return &process_crash_times_;
}
inline const ::com::android::server::am::AppErrorsProto_ProcessCrashTime& AppErrorsProto::process_crash_times(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.process_crash_times)
  return process_crash_times_.Get(index);
}
inline ::com::android::server::am::AppErrorsProto_ProcessCrashTime* AppErrorsProto::add_process_crash_times() {
  // @@protoc_insertion_point(field_add:com.android.server.am.AppErrorsProto.process_crash_times)
  return process_crash_times_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_ProcessCrashTime >&
AppErrorsProto::process_crash_times() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppErrorsProto.process_crash_times)
  return process_crash_times_;
}

// repeated .com.android.server.am.AppErrorsProto.BadProcess bad_processes = 3;
inline int AppErrorsProto::bad_processes_size() const {
  return bad_processes_.size();
}
inline void AppErrorsProto::clear_bad_processes() {
  bad_processes_.Clear();
}
inline ::com::android::server::am::AppErrorsProto_BadProcess* AppErrorsProto::mutable_bad_processes(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppErrorsProto.bad_processes)
  return bad_processes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess >*
AppErrorsProto::mutable_bad_processes() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppErrorsProto.bad_processes)
  return &bad_processes_;
}
inline const ::com::android::server::am::AppErrorsProto_BadProcess& AppErrorsProto::bad_processes(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppErrorsProto.bad_processes)
  return bad_processes_.Get(index);
}
inline ::com::android::server::am::AppErrorsProto_BadProcess* AppErrorsProto::add_bad_processes() {
  // @@protoc_insertion_point(field_add:com.android.server.am.AppErrorsProto.bad_processes)
  return bad_processes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppErrorsProto_BadProcess >&
AppErrorsProto::bad_processes() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppErrorsProto.bad_processes)
  return bad_processes_;
}

// -------------------------------------------------------------------

// UserStateProto

// optional .com.android.server.am.UserStateProto.State state = 1;
inline bool UserStateProto::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStateProto::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::com::android::server::am::UserStateProto_State UserStateProto::state() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserStateProto.state)
  return static_cast< ::com::android::server::am::UserStateProto_State >(state_);
}
inline void UserStateProto::set_state(::com::android::server::am::UserStateProto_State value) {
  assert(::com::android::server::am::UserStateProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UserStateProto.state)
}

// optional bool switching = 2;
inline bool UserStateProto::has_switching() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStateProto::clear_switching() {
  switching_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UserStateProto::switching() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserStateProto.switching)
  return switching_;
}
inline void UserStateProto::set_switching(bool value) {
  _has_bits_[0] |= 0x00000002u;
  switching_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UserStateProto.switching)
}

// -------------------------------------------------------------------

// UserControllerProto_User

// optional int32 id = 1;
inline bool UserControllerProto_User::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserControllerProto_User::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserControllerProto_User::id() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserControllerProto.User.id)
  return id_;
}
inline void UserControllerProto_User::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UserControllerProto.User.id)
}

// optional .com.android.server.am.UserStateProto state = 2;
inline bool UserControllerProto_User::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserControllerProto_User::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::am::UserStateProto& UserControllerProto_User::state() const {
  const ::com::android::server::am::UserStateProto* p = state_;
  // @@protoc_insertion_point(field_get:com.android.server.am.UserControllerProto.User.state)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::am::UserStateProto*>(
      &::com::android::server::am::_UserStateProto_default_instance_);
}
inline ::com::android::server::am::UserStateProto* UserControllerProto_User::release_state() {
  // @@protoc_insertion_point(field_release:com.android.server.am.UserControllerProto.User.state)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::am::UserStateProto* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::com::android::server::am::UserStateProto* UserControllerProto_User::mutable_state() {
  _has_bits_[0] |= 0x00000001u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::am::UserStateProto>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.UserControllerProto.User.state)
  return state_;
}
inline void UserControllerProto_User::set_allocated_state(::com::android::server::am::UserStateProto* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.UserControllerProto.User.state)
}

// -------------------------------------------------------------------

// UserControllerProto_UserProfile

// optional int32 user = 1;
inline bool UserControllerProto_UserProfile::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserControllerProto_UserProfile::clear_user() {
  user_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserControllerProto_UserProfile::user() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserControllerProto.UserProfile.user)
  return user_;
}
inline void UserControllerProto_UserProfile::set_user(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  user_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UserControllerProto.UserProfile.user)
}

// optional int32 profile = 2;
inline bool UserControllerProto_UserProfile::has_profile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserControllerProto_UserProfile::clear_profile() {
  profile_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserControllerProto_UserProfile::profile() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserControllerProto.UserProfile.profile)
  return profile_;
}
inline void UserControllerProto_UserProfile::set_profile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  profile_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.UserControllerProto.UserProfile.profile)
}

// -------------------------------------------------------------------

// UserControllerProto

// repeated .com.android.server.am.UserControllerProto.User started_users = 1;
inline int UserControllerProto::started_users_size() const {
  return started_users_.size();
}
inline void UserControllerProto::clear_started_users() {
  started_users_.Clear();
}
inline ::com::android::server::am::UserControllerProto_User* UserControllerProto::mutable_started_users(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.UserControllerProto.started_users)
  return started_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_User >*
UserControllerProto::mutable_started_users() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.UserControllerProto.started_users)
  return &started_users_;
}
inline const ::com::android::server::am::UserControllerProto_User& UserControllerProto::started_users(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserControllerProto.started_users)
  return started_users_.Get(index);
}
inline ::com::android::server::am::UserControllerProto_User* UserControllerProto::add_started_users() {
  // @@protoc_insertion_point(field_add:com.android.server.am.UserControllerProto.started_users)
  return started_users_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_User >&
UserControllerProto::started_users() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.UserControllerProto.started_users)
  return started_users_;
}

// repeated int32 started_user_array = 2;
inline int UserControllerProto::started_user_array_size() const {
  return started_user_array_.size();
}
inline void UserControllerProto::clear_started_user_array() {
  started_user_array_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserControllerProto::started_user_array(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserControllerProto.started_user_array)
  return started_user_array_.Get(index);
}
inline void UserControllerProto::set_started_user_array(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  started_user_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.am.UserControllerProto.started_user_array)
}
inline void UserControllerProto::add_started_user_array(::PROTOBUF_NAMESPACE_ID::int32 value) {
  started_user_array_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.UserControllerProto.started_user_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserControllerProto::started_user_array() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.UserControllerProto.started_user_array)
  return started_user_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserControllerProto::mutable_started_user_array() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.UserControllerProto.started_user_array)
  return &started_user_array_;
}

// repeated int32 user_lru = 3;
inline int UserControllerProto::user_lru_size() const {
  return user_lru_.size();
}
inline void UserControllerProto::clear_user_lru() {
  user_lru_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserControllerProto::user_lru(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserControllerProto.user_lru)
  return user_lru_.Get(index);
}
inline void UserControllerProto::set_user_lru(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  user_lru_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.am.UserControllerProto.user_lru)
}
inline void UserControllerProto::add_user_lru(::PROTOBUF_NAMESPACE_ID::int32 value) {
  user_lru_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.am.UserControllerProto.user_lru)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserControllerProto::user_lru() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.UserControllerProto.user_lru)
  return user_lru_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserControllerProto::mutable_user_lru() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.UserControllerProto.user_lru)
  return &user_lru_;
}

// repeated .com.android.server.am.UserControllerProto.UserProfile user_profile_group_ids = 4;
inline int UserControllerProto::user_profile_group_ids_size() const {
  return user_profile_group_ids_.size();
}
inline void UserControllerProto::clear_user_profile_group_ids() {
  user_profile_group_ids_.Clear();
}
inline ::com::android::server::am::UserControllerProto_UserProfile* UserControllerProto::mutable_user_profile_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.UserControllerProto.user_profile_group_ids)
  return user_profile_group_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_UserProfile >*
UserControllerProto::mutable_user_profile_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.UserControllerProto.user_profile_group_ids)
  return &user_profile_group_ids_;
}
inline const ::com::android::server::am::UserControllerProto_UserProfile& UserControllerProto::user_profile_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.UserControllerProto.user_profile_group_ids)
  return user_profile_group_ids_.Get(index);
}
inline ::com::android::server::am::UserControllerProto_UserProfile* UserControllerProto::add_user_profile_group_ids() {
  // @@protoc_insertion_point(field_add:com.android.server.am.UserControllerProto.user_profile_group_ids)
  return user_profile_group_ids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::UserControllerProto_UserProfile >&
UserControllerProto::user_profile_group_ids() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.UserControllerProto.user_profile_group_ids)
  return user_profile_group_ids_;
}

// -------------------------------------------------------------------

// AppTimeTrackerProto_PackageTime

// optional string package = 1;
inline bool AppTimeTrackerProto_PackageTime::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppTimeTrackerProto_PackageTime::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppTimeTrackerProto_PackageTime::package() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppTimeTrackerProto.PackageTime.package)
  return package_.GetNoArena();
}
inline void AppTimeTrackerProto_PackageTime::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppTimeTrackerProto.PackageTime.package)
}
inline void AppTimeTrackerProto_PackageTime::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppTimeTrackerProto.PackageTime.package)
}
inline void AppTimeTrackerProto_PackageTime::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppTimeTrackerProto.PackageTime.package)
}
inline void AppTimeTrackerProto_PackageTime::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppTimeTrackerProto.PackageTime.package)
}
inline std::string* AppTimeTrackerProto_PackageTime::mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppTimeTrackerProto.PackageTime.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppTimeTrackerProto_PackageTime::release_package() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppTimeTrackerProto.PackageTime.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppTimeTrackerProto_PackageTime::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppTimeTrackerProto.PackageTime.package)
}

// optional int64 duration_ms = 2;
inline bool AppTimeTrackerProto_PackageTime::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppTimeTrackerProto_PackageTime::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppTimeTrackerProto_PackageTime::duration_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppTimeTrackerProto.PackageTime.duration_ms)
  return duration_ms_;
}
inline void AppTimeTrackerProto_PackageTime::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppTimeTrackerProto.PackageTime.duration_ms)
}

// -------------------------------------------------------------------

// AppTimeTrackerProto

// optional string receiver = 1;
inline bool AppTimeTrackerProto::has_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppTimeTrackerProto::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppTimeTrackerProto::receiver() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppTimeTrackerProto.receiver)
  return receiver_.GetNoArena();
}
inline void AppTimeTrackerProto::set_receiver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppTimeTrackerProto.receiver)
}
inline void AppTimeTrackerProto::set_receiver(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppTimeTrackerProto.receiver)
}
inline void AppTimeTrackerProto::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppTimeTrackerProto.receiver)
}
inline void AppTimeTrackerProto::set_receiver(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppTimeTrackerProto.receiver)
}
inline std::string* AppTimeTrackerProto::mutable_receiver() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppTimeTrackerProto.receiver)
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppTimeTrackerProto::release_receiver() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppTimeTrackerProto.receiver)
  if (!has_receiver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return receiver_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppTimeTrackerProto::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppTimeTrackerProto.receiver)
}

// optional int64 total_duration_ms = 2;
inline bool AppTimeTrackerProto::has_total_duration_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppTimeTrackerProto::clear_total_duration_ms() {
  total_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppTimeTrackerProto::total_duration_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppTimeTrackerProto.total_duration_ms)
  return total_duration_ms_;
}
inline void AppTimeTrackerProto::set_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  total_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppTimeTrackerProto.total_duration_ms)
}

// repeated .com.android.server.am.AppTimeTrackerProto.PackageTime package_times = 3;
inline int AppTimeTrackerProto::package_times_size() const {
  return package_times_.size();
}
inline void AppTimeTrackerProto::clear_package_times() {
  package_times_.Clear();
}
inline ::com::android::server::am::AppTimeTrackerProto_PackageTime* AppTimeTrackerProto::mutable_package_times(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppTimeTrackerProto.package_times)
  return package_times_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppTimeTrackerProto_PackageTime >*
AppTimeTrackerProto::mutable_package_times() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppTimeTrackerProto.package_times)
  return &package_times_;
}
inline const ::com::android::server::am::AppTimeTrackerProto_PackageTime& AppTimeTrackerProto::package_times(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppTimeTrackerProto.package_times)
  return package_times_.Get(index);
}
inline ::com::android::server::am::AppTimeTrackerProto_PackageTime* AppTimeTrackerProto::add_package_times() {
  // @@protoc_insertion_point(field_add:com.android.server.am.AppTimeTrackerProto.package_times)
  return package_times_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppTimeTrackerProto_PackageTime >&
AppTimeTrackerProto::package_times() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppTimeTrackerProto.package_times)
  return package_times_;
}

// optional .android.util.Duration started_time = 4;
inline bool AppTimeTrackerProto::has_started_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::util::Duration& AppTimeTrackerProto::started_time() const {
  const ::android::util::Duration* p = started_time_;
  // @@protoc_insertion_point(field_get:com.android.server.am.AppTimeTrackerProto.started_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::util::Duration*>(
      &::android::util::_Duration_default_instance_);
}
inline ::android::util::Duration* AppTimeTrackerProto::release_started_time() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppTimeTrackerProto.started_time)
  _has_bits_[0] &= ~0x00000004u;
  ::android::util::Duration* temp = started_time_;
  started_time_ = nullptr;
  return temp;
}
inline ::android::util::Duration* AppTimeTrackerProto::mutable_started_time() {
  _has_bits_[0] |= 0x00000004u;
  if (started_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::util::Duration>(GetArenaNoVirtual());
    started_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppTimeTrackerProto.started_time)
  return started_time_;
}
inline void AppTimeTrackerProto::set_allocated_started_time(::android::util::Duration* started_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_time_);
  }
  if (started_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      started_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  started_time_ = started_time;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppTimeTrackerProto.started_time)
}

// optional string started_package = 5;
inline bool AppTimeTrackerProto::has_started_package() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppTimeTrackerProto::clear_started_package() {
  started_package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppTimeTrackerProto::started_package() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppTimeTrackerProto.started_package)
  return started_package_.GetNoArena();
}
inline void AppTimeTrackerProto::set_started_package(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  started_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppTimeTrackerProto.started_package)
}
inline void AppTimeTrackerProto::set_started_package(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  started_package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppTimeTrackerProto.started_package)
}
inline void AppTimeTrackerProto::set_started_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  started_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppTimeTrackerProto.started_package)
}
inline void AppTimeTrackerProto::set_started_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  started_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppTimeTrackerProto.started_package)
}
inline std::string* AppTimeTrackerProto::mutable_started_package() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppTimeTrackerProto.started_package)
  return started_package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppTimeTrackerProto::release_started_package() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppTimeTrackerProto.started_package)
  if (!has_started_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return started_package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppTimeTrackerProto::set_allocated_started_package(std::string* started_package) {
  if (started_package != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  started_package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), started_package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppTimeTrackerProto.started_package)
}

// -------------------------------------------------------------------

// AppsExitInfoProto_Package_User

// optional int32 uid = 1;
inline bool AppsExitInfoProto_Package_User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppsExitInfoProto_Package_User::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppsExitInfoProto_Package_User::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppsExitInfoProto.Package.User.uid)
  return uid_;
}
inline void AppsExitInfoProto_Package_User::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppsExitInfoProto.Package.User.uid)
}

// repeated .android.app.ApplicationExitInfoProto app_exit_info = 2;
inline int AppsExitInfoProto_Package_User::app_exit_info_size() const {
  return app_exit_info_.size();
}
inline ::android::app::ApplicationExitInfoProto* AppsExitInfoProto_Package_User::mutable_app_exit_info(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppsExitInfoProto.Package.User.app_exit_info)
  return app_exit_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::ApplicationExitInfoProto >*
AppsExitInfoProto_Package_User::mutable_app_exit_info() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppsExitInfoProto.Package.User.app_exit_info)
  return &app_exit_info_;
}
inline const ::android::app::ApplicationExitInfoProto& AppsExitInfoProto_Package_User::app_exit_info(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppsExitInfoProto.Package.User.app_exit_info)
  return app_exit_info_.Get(index);
}
inline ::android::app::ApplicationExitInfoProto* AppsExitInfoProto_Package_User::add_app_exit_info() {
  // @@protoc_insertion_point(field_add:com.android.server.am.AppsExitInfoProto.Package.User.app_exit_info)
  return app_exit_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::ApplicationExitInfoProto >&
AppsExitInfoProto_Package_User::app_exit_info() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppsExitInfoProto.Package.User.app_exit_info)
  return app_exit_info_;
}

// -------------------------------------------------------------------

// AppsExitInfoProto_Package

// optional string package_name = 1;
inline bool AppsExitInfoProto_Package::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppsExitInfoProto_Package::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppsExitInfoProto_Package::package_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppsExitInfoProto.Package.package_name)
  return package_name_.GetNoArena();
}
inline void AppsExitInfoProto_Package::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.am.AppsExitInfoProto.Package.package_name)
}
inline void AppsExitInfoProto_Package::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.am.AppsExitInfoProto.Package.package_name)
}
inline void AppsExitInfoProto_Package::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.am.AppsExitInfoProto.Package.package_name)
}
inline void AppsExitInfoProto_Package::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.am.AppsExitInfoProto.Package.package_name)
}
inline std::string* AppsExitInfoProto_Package::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppsExitInfoProto.Package.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppsExitInfoProto_Package::release_package_name() {
  // @@protoc_insertion_point(field_release:com.android.server.am.AppsExitInfoProto.Package.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppsExitInfoProto_Package::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.am.AppsExitInfoProto.Package.package_name)
}

// repeated .com.android.server.am.AppsExitInfoProto.Package.User users = 2;
inline int AppsExitInfoProto_Package::users_size() const {
  return users_.size();
}
inline void AppsExitInfoProto_Package::clear_users() {
  users_.Clear();
}
inline ::com::android::server::am::AppsExitInfoProto_Package_User* AppsExitInfoProto_Package::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppsExitInfoProto.Package.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package_User >*
AppsExitInfoProto_Package::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppsExitInfoProto.Package.users)
  return &users_;
}
inline const ::com::android::server::am::AppsExitInfoProto_Package_User& AppsExitInfoProto_Package::users(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppsExitInfoProto.Package.users)
  return users_.Get(index);
}
inline ::com::android::server::am::AppsExitInfoProto_Package_User* AppsExitInfoProto_Package::add_users() {
  // @@protoc_insertion_point(field_add:com.android.server.am.AppsExitInfoProto.Package.users)
  return users_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package_User >&
AppsExitInfoProto_Package::users() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppsExitInfoProto.Package.users)
  return users_;
}

// -------------------------------------------------------------------

// AppsExitInfoProto

// optional int64 last_update_timestamp = 1;
inline bool AppsExitInfoProto::has_last_update_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppsExitInfoProto::clear_last_update_timestamp() {
  last_update_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppsExitInfoProto::last_update_timestamp() const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppsExitInfoProto.last_update_timestamp)
  return last_update_timestamp_;
}
inline void AppsExitInfoProto::set_last_update_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  last_update_timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.am.AppsExitInfoProto.last_update_timestamp)
}

// repeated .com.android.server.am.AppsExitInfoProto.Package packages = 2;
inline int AppsExitInfoProto::packages_size() const {
  return packages_.size();
}
inline void AppsExitInfoProto::clear_packages() {
  packages_.Clear();
}
inline ::com::android::server::am::AppsExitInfoProto_Package* AppsExitInfoProto::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.am.AppsExitInfoProto.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package >*
AppsExitInfoProto::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.am.AppsExitInfoProto.packages)
  return &packages_;
}
inline const ::com::android::server::am::AppsExitInfoProto_Package& AppsExitInfoProto::packages(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.am.AppsExitInfoProto.packages)
  return packages_.Get(index);
}
inline ::com::android::server::am::AppsExitInfoProto_Package* AppsExitInfoProto::add_packages() {
  // @@protoc_insertion_point(field_add:com.android.server.am.AppsExitInfoProto.packages)
  return packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::am::AppsExitInfoProto_Package >&
AppsExitInfoProto::packages() const {
  // @@protoc_insertion_point(field_list:com.android.server.am.AppsExitInfoProto.packages)
  return packages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace am
}  // namespace server
}  // namespace android
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::android::server::am::ConnectionRecordProto_Flag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::android::server::am::UidRecordProto_Change> : ::std::true_type {};
template <> struct is_proto_enum< ::com::android::server::am::VrControllerProto_VrMode> : ::std::true_type {};
template <> struct is_proto_enum< ::com::android::server::am::ProcessOomProto_SchedGroup> : ::std::true_type {};
template <> struct is_proto_enum< ::com::android::server::am::UserStateProto_State> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2factivitymanagerservice_2eproto
