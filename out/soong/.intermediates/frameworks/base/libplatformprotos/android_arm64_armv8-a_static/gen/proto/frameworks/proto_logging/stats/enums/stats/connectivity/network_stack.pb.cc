// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/connectivity/network_stack.proto

#include "frameworks/proto_logging/stats/enums/stats/connectivity/network_stack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace connectivity {
class NetworkStackEventDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStackEventData> _instance;
} _NetworkStackEventData_default_instance_;
}  // namespace connectivity
}  // namespace stats
}  // namespace android
static void InitDefaultsscc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::stats::connectivity::_NetworkStackEventData_default_instance_;
    new (ptr) ::android::stats::connectivity::NetworkStackEventData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::stats::connectivity::NetworkStackEventData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto}, {}};

namespace android {
namespace stats {
namespace connectivity {
bool DhcpRenewResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DhcpRenewResult_strings[5] = {};

static const char DhcpRenewResult_names[] =
  "RR_ERROR_IP_EXPIRE"
  "RR_ERROR_IP_MISMATCH"
  "RR_ERROR_NAK"
  "RR_SUCCESS"
  "RR_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DhcpRenewResult_entries[] = {
  { {DhcpRenewResult_names + 0, 18}, 4 },
  { {DhcpRenewResult_names + 18, 20}, 3 },
  { {DhcpRenewResult_names + 38, 12}, 2 },
  { {DhcpRenewResult_names + 50, 10}, 1 },
  { {DhcpRenewResult_names + 60, 10}, 0 },
};

static const int DhcpRenewResult_entries_by_number[] = {
  4, // 0 -> RR_UNKNOWN
  3, // 1 -> RR_SUCCESS
  2, // 2 -> RR_ERROR_NAK
  1, // 3 -> RR_ERROR_IP_MISMATCH
  0, // 4 -> RR_ERROR_IP_EXPIRE
};

const std::string& DhcpRenewResult_Name(
    DhcpRenewResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DhcpRenewResult_entries,
          DhcpRenewResult_entries_by_number,
          5, DhcpRenewResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DhcpRenewResult_entries,
      DhcpRenewResult_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DhcpRenewResult_strings[idx].get();
}
bool DhcpRenewResult_Parse(
    const std::string& name, DhcpRenewResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DhcpRenewResult_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DhcpRenewResult>(int_value);
  }
  return success;
}
bool DisconnectCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DisconnectCode_strings[9] = {};

static const char DisconnectCode_names[] =
  "DC_ERROR_STARTING_IPREACHABILITYMONITOR"
  "DC_ERROR_STARTING_IPV4"
  "DC_ERROR_STARTING_IPV6"
  "DC_INTERFACE_NOT_FOUND"
  "DC_INVALID_PROVISIONING"
  "DC_NONE"
  "DC_NORMAL_TERMINATION"
  "DC_PROVISIONING_FAIL"
  "DC_PROVISIONING_TIMEOUT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DisconnectCode_entries[] = {
  { {DisconnectCode_names + 0, 39}, 6 },
  { {DisconnectCode_names + 39, 22}, 4 },
  { {DisconnectCode_names + 61, 22}, 5 },
  { {DisconnectCode_names + 83, 22}, 8 },
  { {DisconnectCode_names + 105, 23}, 7 },
  { {DisconnectCode_names + 128, 7}, 0 },
  { {DisconnectCode_names + 135, 21}, 1 },
  { {DisconnectCode_names + 156, 20}, 2 },
  { {DisconnectCode_names + 176, 23}, 9 },
};

static const int DisconnectCode_entries_by_number[] = {
  5, // 0 -> DC_NONE
  6, // 1 -> DC_NORMAL_TERMINATION
  7, // 2 -> DC_PROVISIONING_FAIL
  1, // 4 -> DC_ERROR_STARTING_IPV4
  2, // 5 -> DC_ERROR_STARTING_IPV6
  0, // 6 -> DC_ERROR_STARTING_IPREACHABILITYMONITOR
  4, // 7 -> DC_INVALID_PROVISIONING
  3, // 8 -> DC_INTERFACE_NOT_FOUND
  8, // 9 -> DC_PROVISIONING_TIMEOUT
};

const std::string& DisconnectCode_Name(
    DisconnectCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DisconnectCode_entries,
          DisconnectCode_entries_by_number,
          9, DisconnectCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DisconnectCode_entries,
      DisconnectCode_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DisconnectCode_strings[idx].get();
}
bool DisconnectCode_Parse(
    const std::string& name, DisconnectCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DisconnectCode_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<DisconnectCode>(int_value);
  }
  return success;
}
bool TransportType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransportType_strings[13] = {};

static const char TransportType_names[] =
  "TT_BLUETOOTH"
  "TT_BLUETOOTH_VPN"
  "TT_CELLULAR"
  "TT_CELLULAR_VPN"
  "TT_ETHERNET"
  "TT_ETHERNET_VPN"
  "TT_LOWPAN"
  "TT_TEST"
  "TT_UNKNOWN"
  "TT_WIFI"
  "TT_WIFI_AWARE"
  "TT_WIFI_CELLULAR_VPN"
  "TT_WIFI_VPN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransportType_entries[] = {
  { {TransportType_names + 0, 12}, 3 },
  { {TransportType_names + 12, 16}, 9 },
  { {TransportType_names + 28, 11}, 1 },
  { {TransportType_names + 39, 15}, 7 },
  { {TransportType_names + 54, 11}, 4 },
  { {TransportType_names + 65, 15}, 10 },
  { {TransportType_names + 80, 9}, 6 },
  { {TransportType_names + 89, 7}, 12 },
  { {TransportType_names + 96, 10}, 0 },
  { {TransportType_names + 106, 7}, 2 },
  { {TransportType_names + 113, 13}, 5 },
  { {TransportType_names + 126, 20}, 11 },
  { {TransportType_names + 146, 11}, 8 },
};

static const int TransportType_entries_by_number[] = {
  8, // 0 -> TT_UNKNOWN
  2, // 1 -> TT_CELLULAR
  9, // 2 -> TT_WIFI
  0, // 3 -> TT_BLUETOOTH
  4, // 4 -> TT_ETHERNET
  10, // 5 -> TT_WIFI_AWARE
  6, // 6 -> TT_LOWPAN
  3, // 7 -> TT_CELLULAR_VPN
  12, // 8 -> TT_WIFI_VPN
  1, // 9 -> TT_BLUETOOTH_VPN
  5, // 10 -> TT_ETHERNET_VPN
  11, // 11 -> TT_WIFI_CELLULAR_VPN
  7, // 12 -> TT_TEST
};

const std::string& TransportType_Name(
    TransportType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransportType_entries,
          TransportType_entries_by_number,
          13, TransportType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransportType_entries,
      TransportType_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransportType_strings[idx].get();
}
bool TransportType_Parse(
    const std::string& name, TransportType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransportType_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<TransportType>(int_value);
  }
  return success;
}
bool DhcpFeature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DhcpFeature_strings[5] = {};

static const char DhcpFeature_names[] =
  "DF_DAD"
  "DF_FILS"
  "DF_INITREBOOT"
  "DF_RAPIDCOMMIT"
  "DF_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DhcpFeature_entries[] = {
  { {DhcpFeature_names + 0, 6}, 3 },
  { {DhcpFeature_names + 6, 7}, 4 },
  { {DhcpFeature_names + 13, 13}, 1 },
  { {DhcpFeature_names + 26, 14}, 2 },
  { {DhcpFeature_names + 40, 10}, 0 },
};

static const int DhcpFeature_entries_by_number[] = {
  4, // 0 -> DF_UNKNOWN
  2, // 1 -> DF_INITREBOOT
  3, // 2 -> DF_RAPIDCOMMIT
  0, // 3 -> DF_DAD
  1, // 4 -> DF_FILS
};

const std::string& DhcpFeature_Name(
    DhcpFeature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DhcpFeature_entries,
          DhcpFeature_entries_by_number,
          5, DhcpFeature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DhcpFeature_entries,
      DhcpFeature_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DhcpFeature_strings[idx].get();
}
bool DhcpFeature_Parse(
    const std::string& name, DhcpFeature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DhcpFeature_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DhcpFeature>(int_value);
  }
  return success;
}
bool HostnameTransResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HostnameTransResult_strings[4] = {};

static const char HostnameTransResult_names[] =
  "HTR_DISABLE"
  "HTR_FAILURE"
  "HTR_SUCCESS"
  "HTR_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HostnameTransResult_entries[] = {
  { {HostnameTransResult_names + 0, 11}, 3 },
  { {HostnameTransResult_names + 11, 11}, 2 },
  { {HostnameTransResult_names + 22, 11}, 1 },
  { {HostnameTransResult_names + 33, 11}, 0 },
};

static const int HostnameTransResult_entries_by_number[] = {
  3, // 0 -> HTR_UNKNOWN
  2, // 1 -> HTR_SUCCESS
  1, // 2 -> HTR_FAILURE
  0, // 3 -> HTR_DISABLE
};

const std::string& HostnameTransResult_Name(
    HostnameTransResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HostnameTransResult_entries,
          HostnameTransResult_entries_by_number,
          4, HostnameTransResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HostnameTransResult_entries,
      HostnameTransResult_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HostnameTransResult_strings[idx].get();
}
bool HostnameTransResult_Parse(
    const std::string& name, HostnameTransResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HostnameTransResult_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<HostnameTransResult>(int_value);
  }
  return success;
}
bool ProbeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProbeResult_strings[5] = {};

static const char ProbeResult_names[] =
  "PR_FAILURE"
  "PR_PORTAL"
  "PR_PRIVATE_IP_DNS"
  "PR_SUCCESS"
  "PR_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProbeResult_entries[] = {
  { {ProbeResult_names + 0, 10}, 2 },
  { {ProbeResult_names + 10, 9}, 3 },
  { {ProbeResult_names + 19, 17}, 4 },
  { {ProbeResult_names + 36, 10}, 1 },
  { {ProbeResult_names + 46, 10}, 0 },
};

static const int ProbeResult_entries_by_number[] = {
  4, // 0 -> PR_UNKNOWN
  3, // 1 -> PR_SUCCESS
  0, // 2 -> PR_FAILURE
  1, // 3 -> PR_PORTAL
  2, // 4 -> PR_PRIVATE_IP_DNS
};

const std::string& ProbeResult_Name(
    ProbeResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProbeResult_entries,
          ProbeResult_entries_by_number,
          5, ProbeResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProbeResult_entries,
      ProbeResult_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProbeResult_strings[idx].get();
}
bool ProbeResult_Parse(
    const std::string& name, ProbeResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProbeResult_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ProbeResult>(int_value);
  }
  return success;
}
bool ValidationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ValidationResult_strings[5] = {};

static const char ValidationResult_names[] =
  "VR_FAILURE"
  "VR_PARTIAL"
  "VR_PORTAL"
  "VR_SUCCESS"
  "VR_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ValidationResult_entries[] = {
  { {ValidationResult_names + 0, 10}, 2 },
  { {ValidationResult_names + 10, 10}, 4 },
  { {ValidationResult_names + 20, 9}, 3 },
  { {ValidationResult_names + 29, 10}, 1 },
  { {ValidationResult_names + 39, 10}, 0 },
};

static const int ValidationResult_entries_by_number[] = {
  4, // 0 -> VR_UNKNOWN
  3, // 1 -> VR_SUCCESS
  0, // 2 -> VR_FAILURE
  2, // 3 -> VR_PORTAL
  1, // 4 -> VR_PARTIAL
};

const std::string& ValidationResult_Name(
    ValidationResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ValidationResult_entries,
          ValidationResult_entries_by_number,
          5, ValidationResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ValidationResult_entries,
      ValidationResult_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ValidationResult_strings[idx].get();
}
bool ValidationResult_Parse(
    const std::string& name, ValidationResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ValidationResult_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ValidationResult>(int_value);
  }
  return success;
}
bool ProbeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProbeType_strings[8] = {};

static const char ProbeType_names[] =
  "PT_CAPPORT_API"
  "PT_DNS"
  "PT_FALLBACK"
  "PT_HTTP"
  "PT_HTTPS"
  "PT_PAC"
  "PT_PRIVDNS"
  "PT_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProbeType_entries[] = {
  { {ProbeType_names + 0, 14}, 7 },
  { {ProbeType_names + 14, 6}, 1 },
  { {ProbeType_names + 20, 11}, 5 },
  { {ProbeType_names + 31, 7}, 2 },
  { {ProbeType_names + 38, 8}, 3 },
  { {ProbeType_names + 46, 6}, 4 },
  { {ProbeType_names + 52, 10}, 6 },
  { {ProbeType_names + 62, 10}, 0 },
};

static const int ProbeType_entries_by_number[] = {
  7, // 0 -> PT_UNKNOWN
  1, // 1 -> PT_DNS
  3, // 2 -> PT_HTTP
  4, // 3 -> PT_HTTPS
  5, // 4 -> PT_PAC
  2, // 5 -> PT_FALLBACK
  6, // 6 -> PT_PRIVDNS
  0, // 7 -> PT_CAPPORT_API
};

const std::string& ProbeType_Name(
    ProbeType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProbeType_entries,
          ProbeType_entries_by_number,
          8, ProbeType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProbeType_entries,
      ProbeType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProbeType_strings[idx].get();
}
bool ProbeType_Parse(
    const std::string& name, ProbeType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProbeType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<ProbeType>(int_value);
  }
  return success;
}
bool DhcpErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 16842752:
    case 16908288:
    case 33619968:
    case 33685504:
    case 33751040:
    case 50397184:
    case 50462720:
    case 67174400:
    case 67239936:
    case 67305472:
    case 67371008:
    case 67436544:
    case 67502080:
    case 83951616:
    case 84017152:
    case 84082688:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DhcpErrorCode_strings[22] = {};

static const char DhcpErrorCode_names[] =
  "ET_BOOTP_TOO_SHORT"
  "ET_BUFFER_UNDERFLOW"
  "ET_DHCP_BAD_MAGIC_COOKIE"
  "ET_DHCP_ERROR"
  "ET_DHCP_INVALID_OPTION_LENGTH"
  "ET_DHCP_NO_COOKIE"
  "ET_DHCP_NO_MSG_TYPE"
  "ET_DHCP_UNKNOWN_MSG_TYPE"
  "ET_L2_ERROR"
  "ET_L2_TOO_SHORT"
  "ET_L2_WRONG_ETH_TYPE"
  "ET_L3_ERROR"
  "ET_L3_INVALID_IP"
  "ET_L3_NOT_IPV4"
  "ET_L3_TOO_SHORT"
  "ET_L4_ERROR"
  "ET_L4_NOT_UDP"
  "ET_L4_WRONG_PORT"
  "ET_MISC_ERROR"
  "ET_PARSING_ERROR"
  "ET_RECEIVE_ERROR"
  "ET_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DhcpErrorCode_entries[] = {
  { {DhcpErrorCode_names + 0, 18}, 67174400 },
  { {DhcpErrorCode_names + 18, 19}, 83951616 },
  { {DhcpErrorCode_names + 37, 24}, 67239936 },
  { {DhcpErrorCode_names + 61, 13}, 4 },
  { {DhcpErrorCode_names + 74, 29}, 67305472 },
  { {DhcpErrorCode_names + 103, 17}, 67502080 },
  { {DhcpErrorCode_names + 120, 19}, 67371008 },
  { {DhcpErrorCode_names + 139, 24}, 67436544 },
  { {DhcpErrorCode_names + 163, 11}, 1 },
  { {DhcpErrorCode_names + 174, 15}, 16842752 },
  { {DhcpErrorCode_names + 189, 20}, 16908288 },
  { {DhcpErrorCode_names + 209, 11}, 2 },
  { {DhcpErrorCode_names + 220, 16}, 33751040 },
  { {DhcpErrorCode_names + 236, 14}, 33685504 },
  { {DhcpErrorCode_names + 250, 15}, 33619968 },
  { {DhcpErrorCode_names + 265, 11}, 3 },
  { {DhcpErrorCode_names + 276, 13}, 50397184 },
  { {DhcpErrorCode_names + 289, 16}, 50462720 },
  { {DhcpErrorCode_names + 305, 13}, 5 },
  { {DhcpErrorCode_names + 318, 16}, 84082688 },
  { {DhcpErrorCode_names + 334, 16}, 84017152 },
  { {DhcpErrorCode_names + 350, 10}, 0 },
};

static const int DhcpErrorCode_entries_by_number[] = {
  21, // 0 -> ET_UNKNOWN
  8, // 1 -> ET_L2_ERROR
  11, // 2 -> ET_L3_ERROR
  15, // 3 -> ET_L4_ERROR
  3, // 4 -> ET_DHCP_ERROR
  18, // 5 -> ET_MISC_ERROR
  9, // 16842752 -> ET_L2_TOO_SHORT
  10, // 16908288 -> ET_L2_WRONG_ETH_TYPE
  14, // 33619968 -> ET_L3_TOO_SHORT
  13, // 33685504 -> ET_L3_NOT_IPV4
  12, // 33751040 -> ET_L3_INVALID_IP
  16, // 50397184 -> ET_L4_NOT_UDP
  17, // 50462720 -> ET_L4_WRONG_PORT
  0, // 67174400 -> ET_BOOTP_TOO_SHORT
  2, // 67239936 -> ET_DHCP_BAD_MAGIC_COOKIE
  4, // 67305472 -> ET_DHCP_INVALID_OPTION_LENGTH
  6, // 67371008 -> ET_DHCP_NO_MSG_TYPE
  7, // 67436544 -> ET_DHCP_UNKNOWN_MSG_TYPE
  5, // 67502080 -> ET_DHCP_NO_COOKIE
  1, // 83951616 -> ET_BUFFER_UNDERFLOW
  20, // 84017152 -> ET_RECEIVE_ERROR
  19, // 84082688 -> ET_PARSING_ERROR
};

const std::string& DhcpErrorCode_Name(
    DhcpErrorCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DhcpErrorCode_entries,
          DhcpErrorCode_entries_by_number,
          22, DhcpErrorCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DhcpErrorCode_entries,
      DhcpErrorCode_entries_by_number,
      22, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DhcpErrorCode_strings[idx].get();
}
bool DhcpErrorCode_Parse(
    const std::string& name, DhcpErrorCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DhcpErrorCode_entries, 22, name, &int_value);
  if (success) {
    *value = static_cast<DhcpErrorCode>(int_value);
  }
  return success;
}
bool NetworkQuirkEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkQuirkEvent_strings[2] = {};

static const char NetworkQuirkEvent_names[] =
  "QE_IPV6_PROVISIONING_ROUTER_LOST"
  "QE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetworkQuirkEvent_entries[] = {
  { {NetworkQuirkEvent_names + 0, 32}, 1 },
  { {NetworkQuirkEvent_names + 32, 10}, 0 },
};

static const int NetworkQuirkEvent_entries_by_number[] = {
  1, // 0 -> QE_UNKNOWN
  0, // 1 -> QE_IPV6_PROVISIONING_ROUTER_LOST
};

const std::string& NetworkQuirkEvent_Name(
    NetworkQuirkEvent value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetworkQuirkEvent_entries,
          NetworkQuirkEvent_entries_by_number,
          2, NetworkQuirkEvent_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetworkQuirkEvent_entries,
      NetworkQuirkEvent_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetworkQuirkEvent_strings[idx].get();
}
bool NetworkQuirkEvent_Parse(
    const std::string& name, NetworkQuirkEvent* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetworkQuirkEvent_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<NetworkQuirkEvent>(int_value);
  }
  return success;
}
bool IpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IpType_strings[3] = {};

static const char IpType_names[] =
  "IPV4"
  "IPV6"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IpType_entries[] = {
  { {IpType_names + 0, 4}, 4 },
  { {IpType_names + 4, 4}, 6 },
  { {IpType_names + 8, 7}, 0 },
};

static const int IpType_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  0, // 4 -> IPV4
  1, // 6 -> IPV6
};

const std::string& IpType_Name(
    IpType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IpType_entries,
          IpType_entries_by_number,
          3, IpType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IpType_entries,
      IpType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IpType_strings[idx].get();
}
bool IpType_Parse(
    const std::string& name, IpType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IpType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<IpType>(int_value);
  }
  return success;
}
bool NudEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NudEventType_strings[8] = {};

static const char NudEventType_names[] =
  "NUD_CONFIRM_FAILED"
  "NUD_CONFIRM_FAILED_CRITICAL"
  "NUD_EVENT_UNKNOWN"
  "NUD_MAC_ADDRESS_CHANGED"
  "NUD_ORGANIC_FAILED"
  "NUD_ORGANIC_FAILED_CRITICAL"
  "NUD_POST_ROAMING_FAILED"
  "NUD_POST_ROAMING_FAILED_CRITICAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NudEventType_entries[] = {
  { {NudEventType_names + 0, 18}, 3 },
  { {NudEventType_names + 18, 27}, 4 },
  { {NudEventType_names + 45, 17}, 0 },
  { {NudEventType_names + 62, 23}, 7 },
  { {NudEventType_names + 85, 18}, 5 },
  { {NudEventType_names + 103, 27}, 6 },
  { {NudEventType_names + 130, 23}, 1 },
  { {NudEventType_names + 153, 32}, 2 },
};

static const int NudEventType_entries_by_number[] = {
  2, // 0 -> NUD_EVENT_UNKNOWN
  6, // 1 -> NUD_POST_ROAMING_FAILED
  7, // 2 -> NUD_POST_ROAMING_FAILED_CRITICAL
  0, // 3 -> NUD_CONFIRM_FAILED
  1, // 4 -> NUD_CONFIRM_FAILED_CRITICAL
  4, // 5 -> NUD_ORGANIC_FAILED
  5, // 6 -> NUD_ORGANIC_FAILED_CRITICAL
  3, // 7 -> NUD_MAC_ADDRESS_CHANGED
};

const std::string& NudEventType_Name(
    NudEventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NudEventType_entries,
          NudEventType_entries_by_number,
          8, NudEventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NudEventType_entries,
      NudEventType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NudEventType_strings[idx].get();
}
bool NudEventType_Parse(
    const std::string& name, NudEventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NudEventType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<NudEventType>(int_value);
  }
  return success;
}
bool NudNeighborType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NudNeighborType_strings[4] = {};

static const char NudNeighborType_names[] =
  "NUD_NEIGHBOR_BOTH"
  "NUD_NEIGHBOR_DNS"
  "NUD_NEIGHBOR_GATEWAY"
  "NUD_NEIGHBOR_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NudNeighborType_entries[] = {
  { {NudNeighborType_names + 0, 17}, 3 },
  { {NudNeighborType_names + 17, 16}, 2 },
  { {NudNeighborType_names + 33, 20}, 1 },
  { {NudNeighborType_names + 53, 20}, 0 },
};

static const int NudNeighborType_entries_by_number[] = {
  3, // 0 -> NUD_NEIGHBOR_UNKNOWN
  2, // 1 -> NUD_NEIGHBOR_GATEWAY
  1, // 2 -> NUD_NEIGHBOR_DNS
  0, // 3 -> NUD_NEIGHBOR_BOTH
};

const std::string& NudNeighborType_Name(
    NudNeighborType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NudNeighborType_entries,
          NudNeighborType_entries_by_number,
          4, NudNeighborType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NudNeighborType_entries,
      NudNeighborType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NudNeighborType_strings[idx].get();
}
bool NudNeighborType_Parse(
    const std::string& name, NudNeighborType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NudNeighborType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<NudNeighborType>(int_value);
  }
  return success;
}

// ===================================================================

void NetworkStackEventData::InitAsDefaultInstance() {
}
class NetworkStackEventData::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStackEventData>()._has_bits_);
};

NetworkStackEventData::NetworkStackEventData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.stats.connectivity.NetworkStackEventData)
}
NetworkStackEventData::NetworkStackEventData(const NetworkStackEventData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.stats.connectivity.NetworkStackEventData)
}

void NetworkStackEventData::SharedCtor() {
}

NetworkStackEventData::~NetworkStackEventData() {
  // @@protoc_insertion_point(destructor:android.stats.connectivity.NetworkStackEventData)
  SharedDtor();
}

void NetworkStackEventData::SharedDtor() {
}

void NetworkStackEventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStackEventData& NetworkStackEventData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStackEventData_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fconnectivity_2fnetwork_5fstack_2eproto.base);
  return *internal_default_instance();
}


void NetworkStackEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:android.stats.connectivity.NetworkStackEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStackEventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStackEventData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.stats.connectivity.NetworkStackEventData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:android.stats.connectivity.NetworkStackEventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.stats.connectivity.NetworkStackEventData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStackEventData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.stats.connectivity.NetworkStackEventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.stats.connectivity.NetworkStackEventData)
}

size_t NetworkStackEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.stats.connectivity.NetworkStackEventData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStackEventData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStackEventData*>(
      &from));
}

void NetworkStackEventData::MergeFrom(const NetworkStackEventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.stats.connectivity.NetworkStackEventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetworkStackEventData::CopyFrom(const NetworkStackEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.stats.connectivity.NetworkStackEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStackEventData::IsInitialized() const {
  return true;
}

void NetworkStackEventData::InternalSwap(NetworkStackEventData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string NetworkStackEventData::GetTypeName() const {
  return "android.stats.connectivity.NetworkStackEventData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace connectivity
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::stats::connectivity::NetworkStackEventData* Arena::CreateMaybeMessage< ::android::stats::connectivity::NetworkStackEventData >(Arena* arena) {
  return Arena::CreateInternal< ::android::stats::connectivity::NetworkStackEventData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
