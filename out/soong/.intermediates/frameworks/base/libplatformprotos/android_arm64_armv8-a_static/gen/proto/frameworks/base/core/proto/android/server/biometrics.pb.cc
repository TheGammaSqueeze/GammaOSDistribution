// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/biometrics.proto

#include "frameworks/base/core/proto/android/server/biometrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto;
namespace com {
namespace android {
namespace server {
namespace biometrics {
class BiometricServiceStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiometricServiceStateProto> _instance;
} _BiometricServiceStateProto_default_instance_;
class SensorServiceStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorServiceStateProto> _instance;
} _SensorServiceStateProto_default_instance_;
class SensorStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorStateProto> _instance;
} _SensorStateProto_default_instance_;
class UserStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserStateProto> _instance;
} _UserStateProto_default_instance_;
class BiometricSchedulerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BiometricSchedulerProto> _instance;
} _BiometricSchedulerProto_default_instance_;
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_BiometricSchedulerProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::BiometricSchedulerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::BiometricSchedulerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {}};

static void InitDefaultsscc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_BiometricServiceStateProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::BiometricServiceStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::BiometricServiceStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {
      &scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,}};

static void InitDefaultsscc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_SensorServiceStateProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::SensorServiceStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::SensorServiceStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {
      &scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,}};

static void InitDefaultsscc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_SensorStateProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::SensorStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::SensorStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {
      &scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,
      &scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base,}};

static void InitDefaultsscc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::biometrics::_UserStateProto_default_instance_;
    new (ptr) ::com::android::server::biometrics::UserStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::biometrics::UserStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto}, {}};

namespace com {
namespace android {
namespace server {
namespace biometrics {
bool BiometricServiceStateProto_AuthSessionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BiometricServiceStateProto_AuthSessionState_strings[11] = {};

static const char BiometricServiceStateProto_AuthSessionState_names[] =
  "STATE_AUTHENTICATED_PENDING_SYSUI"
  "STATE_AUTH_CALLED"
  "STATE_AUTH_IDLE"
  "STATE_AUTH_PAUSED"
  "STATE_AUTH_PAUSED_RESUMING"
  "STATE_AUTH_PENDING_CONFIRM"
  "STATE_AUTH_STARTED"
  "STATE_AUTH_STARTED_UI_SHOWING"
  "STATE_CLIENT_DIED_CANCELLING"
  "STATE_ERROR_PENDING_SYSUI"
  "STATE_SHOWING_DEVICE_CREDENTIAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BiometricServiceStateProto_AuthSessionState_entries[] = {
  { {BiometricServiceStateProto_AuthSessionState_names + 0, 33}, 7 },
  { {BiometricServiceStateProto_AuthSessionState_names + 33, 17}, 1 },
  { {BiometricServiceStateProto_AuthSessionState_names + 50, 15}, 0 },
  { {BiometricServiceStateProto_AuthSessionState_names + 65, 17}, 4 },
  { {BiometricServiceStateProto_AuthSessionState_names + 82, 26}, 5 },
  { {BiometricServiceStateProto_AuthSessionState_names + 108, 26}, 6 },
  { {BiometricServiceStateProto_AuthSessionState_names + 134, 18}, 2 },
  { {BiometricServiceStateProto_AuthSessionState_names + 152, 29}, 3 },
  { {BiometricServiceStateProto_AuthSessionState_names + 181, 28}, 10 },
  { {BiometricServiceStateProto_AuthSessionState_names + 209, 25}, 8 },
  { {BiometricServiceStateProto_AuthSessionState_names + 234, 31}, 9 },
};

static const int BiometricServiceStateProto_AuthSessionState_entries_by_number[] = {
  2, // 0 -> STATE_AUTH_IDLE
  1, // 1 -> STATE_AUTH_CALLED
  6, // 2 -> STATE_AUTH_STARTED
  7, // 3 -> STATE_AUTH_STARTED_UI_SHOWING
  3, // 4 -> STATE_AUTH_PAUSED
  4, // 5 -> STATE_AUTH_PAUSED_RESUMING
  5, // 6 -> STATE_AUTH_PENDING_CONFIRM
  0, // 7 -> STATE_AUTHENTICATED_PENDING_SYSUI
  9, // 8 -> STATE_ERROR_PENDING_SYSUI
  10, // 9 -> STATE_SHOWING_DEVICE_CREDENTIAL
  8, // 10 -> STATE_CLIENT_DIED_CANCELLING
};

const std::string& BiometricServiceStateProto_AuthSessionState_Name(
    BiometricServiceStateProto_AuthSessionState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BiometricServiceStateProto_AuthSessionState_entries,
          BiometricServiceStateProto_AuthSessionState_entries_by_number,
          11, BiometricServiceStateProto_AuthSessionState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BiometricServiceStateProto_AuthSessionState_entries,
      BiometricServiceStateProto_AuthSessionState_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BiometricServiceStateProto_AuthSessionState_strings[idx].get();
}
bool BiometricServiceStateProto_AuthSessionState_Parse(
    const std::string& name, BiometricServiceStateProto_AuthSessionState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BiometricServiceStateProto_AuthSessionState_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<BiometricServiceStateProto_AuthSessionState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_IDLE;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_CALLED;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_STARTED;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_STARTED_UI_SHOWING;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_PAUSED;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_PAUSED_RESUMING;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTH_PENDING_CONFIRM;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_AUTHENTICATED_PENDING_SYSUI;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_ERROR_PENDING_SYSUI;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_SHOWING_DEVICE_CREDENTIAL;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::STATE_CLIENT_DIED_CANCELLING;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::AuthSessionState_MIN;
constexpr BiometricServiceStateProto_AuthSessionState BiometricServiceStateProto::AuthSessionState_MAX;
constexpr int BiometricServiceStateProto::AuthSessionState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BiometricServiceStateProto_MultiSensorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BiometricServiceStateProto_MultiSensorState_strings[4] = {};

static const char BiometricServiceStateProto_MultiSensorState_names[] =
  "MULTI_SENSOR_STATE_FACE_SCANNING"
  "MULTI_SENSOR_STATE_FP_SCANNING"
  "MULTI_SENSOR_STATE_SWITCHING"
  "MULTI_SENSOR_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BiometricServiceStateProto_MultiSensorState_entries[] = {
  { {BiometricServiceStateProto_MultiSensorState_names + 0, 32}, 2 },
  { {BiometricServiceStateProto_MultiSensorState_names + 32, 30}, 3 },
  { {BiometricServiceStateProto_MultiSensorState_names + 62, 28}, 1 },
  { {BiometricServiceStateProto_MultiSensorState_names + 90, 26}, 0 },
};

static const int BiometricServiceStateProto_MultiSensorState_entries_by_number[] = {
  3, // 0 -> MULTI_SENSOR_STATE_UNKNOWN
  2, // 1 -> MULTI_SENSOR_STATE_SWITCHING
  0, // 2 -> MULTI_SENSOR_STATE_FACE_SCANNING
  1, // 3 -> MULTI_SENSOR_STATE_FP_SCANNING
};

const std::string& BiometricServiceStateProto_MultiSensorState_Name(
    BiometricServiceStateProto_MultiSensorState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BiometricServiceStateProto_MultiSensorState_entries,
          BiometricServiceStateProto_MultiSensorState_entries_by_number,
          4, BiometricServiceStateProto_MultiSensorState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BiometricServiceStateProto_MultiSensorState_entries,
      BiometricServiceStateProto_MultiSensorState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BiometricServiceStateProto_MultiSensorState_strings[idx].get();
}
bool BiometricServiceStateProto_MultiSensorState_Parse(
    const std::string& name, BiometricServiceStateProto_MultiSensorState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BiometricServiceStateProto_MultiSensorState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BiometricServiceStateProto_MultiSensorState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MULTI_SENSOR_STATE_UNKNOWN;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MULTI_SENSOR_STATE_SWITCHING;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MULTI_SENSOR_STATE_FACE_SCANNING;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MULTI_SENSOR_STATE_FP_SCANNING;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MultiSensorState_MIN;
constexpr BiometricServiceStateProto_MultiSensorState BiometricServiceStateProto::MultiSensorState_MAX;
constexpr int BiometricServiceStateProto::MultiSensorState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SensorStateProto_Modality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SensorStateProto_Modality_strings[4] = {};

static const char SensorStateProto_Modality_names[] =
  "FACE"
  "FINGERPRINT"
  "IRIS"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SensorStateProto_Modality_entries[] = {
  { {SensorStateProto_Modality_names + 0, 4}, 2 },
  { {SensorStateProto_Modality_names + 4, 11}, 1 },
  { {SensorStateProto_Modality_names + 15, 4}, 3 },
  { {SensorStateProto_Modality_names + 19, 7}, 0 },
};

static const int SensorStateProto_Modality_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  1, // 1 -> FINGERPRINT
  0, // 2 -> FACE
  2, // 3 -> IRIS
};

const std::string& SensorStateProto_Modality_Name(
    SensorStateProto_Modality value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SensorStateProto_Modality_entries,
          SensorStateProto_Modality_entries_by_number,
          4, SensorStateProto_Modality_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SensorStateProto_Modality_entries,
      SensorStateProto_Modality_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SensorStateProto_Modality_strings[idx].get();
}
bool SensorStateProto_Modality_Parse(
    const std::string& name, SensorStateProto_Modality* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SensorStateProto_Modality_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SensorStateProto_Modality>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorStateProto_Modality SensorStateProto::UNKNOWN;
constexpr SensorStateProto_Modality SensorStateProto::FINGERPRINT;
constexpr SensorStateProto_Modality SensorStateProto::FACE;
constexpr SensorStateProto_Modality SensorStateProto::IRIS;
constexpr SensorStateProto_Modality SensorStateProto::Modality_MIN;
constexpr SensorStateProto_Modality SensorStateProto::Modality_MAX;
constexpr int SensorStateProto::Modality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SensorStateProto_ModalityFlag_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SensorStateProto_ModalityFlag_strings[1] = {};

static const char SensorStateProto_ModalityFlag_names[] =
  "FINGERPRINT_UDFPS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SensorStateProto_ModalityFlag_entries[] = {
  { {SensorStateProto_ModalityFlag_names + 0, 17}, 0 },
};

static const int SensorStateProto_ModalityFlag_entries_by_number[] = {
  0, // 0 -> FINGERPRINT_UDFPS
};

const std::string& SensorStateProto_ModalityFlag_Name(
    SensorStateProto_ModalityFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SensorStateProto_ModalityFlag_entries,
          SensorStateProto_ModalityFlag_entries_by_number,
          1, SensorStateProto_ModalityFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SensorStateProto_ModalityFlag_entries,
      SensorStateProto_ModalityFlag_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SensorStateProto_ModalityFlag_strings[idx].get();
}
bool SensorStateProto_ModalityFlag_Parse(
    const std::string& name, SensorStateProto_ModalityFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SensorStateProto_ModalityFlag_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<SensorStateProto_ModalityFlag>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorStateProto_ModalityFlag SensorStateProto::FINGERPRINT_UDFPS;
constexpr SensorStateProto_ModalityFlag SensorStateProto::ModalityFlag_MIN;
constexpr SensorStateProto_ModalityFlag SensorStateProto::ModalityFlag_MAX;
constexpr int SensorStateProto::ModalityFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ClientMonitorEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientMonitorEnum_strings[18] = {};

static const char ClientMonitorEnum_names[] =
  "CM_AUTHENTICATE"
  "CM_DETECT_INTERACTION"
  "CM_ENROLL"
  "CM_ENUMERATE"
  "CM_GENERATE_CHALLENGE"
  "CM_GET_AUTHENTICATOR_ID"
  "CM_GET_FEATURE"
  "CM_INTERNAL_CLEANUP"
  "CM_INVALIDATE"
  "CM_INVALIDATION_REQUESTER"
  "CM_NONE"
  "CM_REMOVE"
  "CM_RESET_LOCKOUT"
  "CM_REVOKE_CHALLENGE"
  "CM_SET_FEATURE"
  "CM_START_USER"
  "CM_STOP_USER"
  "CM_UPDATE_ACTIVE_USER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientMonitorEnum_entries[] = {
  { {ClientMonitorEnum_names + 0, 15}, 3 },
  { {ClientMonitorEnum_names + 15, 21}, 13 },
  { {ClientMonitorEnum_names + 36, 9}, 2 },
  { {ClientMonitorEnum_names + 45, 12}, 6 },
  { {ClientMonitorEnum_names + 57, 21}, 10 },
  { {ClientMonitorEnum_names + 78, 23}, 5 },
  { {ClientMonitorEnum_names + 101, 14}, 9 },
  { {ClientMonitorEnum_names + 115, 19}, 7 },
  { {ClientMonitorEnum_names + 134, 13}, 15 },
  { {ClientMonitorEnum_names + 147, 25}, 14 },
  { {ClientMonitorEnum_names + 172, 7}, 0 },
  { {ClientMonitorEnum_names + 179, 9}, 4 },
  { {ClientMonitorEnum_names + 188, 16}, 12 },
  { {ClientMonitorEnum_names + 204, 19}, 11 },
  { {ClientMonitorEnum_names + 223, 14}, 8 },
  { {ClientMonitorEnum_names + 237, 13}, 17 },
  { {ClientMonitorEnum_names + 250, 12}, 16 },
  { {ClientMonitorEnum_names + 262, 21}, 1 },
};

static const int ClientMonitorEnum_entries_by_number[] = {
  10, // 0 -> CM_NONE
  17, // 1 -> CM_UPDATE_ACTIVE_USER
  2, // 2 -> CM_ENROLL
  0, // 3 -> CM_AUTHENTICATE
  11, // 4 -> CM_REMOVE
  5, // 5 -> CM_GET_AUTHENTICATOR_ID
  3, // 6 -> CM_ENUMERATE
  7, // 7 -> CM_INTERNAL_CLEANUP
  14, // 8 -> CM_SET_FEATURE
  6, // 9 -> CM_GET_FEATURE
  4, // 10 -> CM_GENERATE_CHALLENGE
  13, // 11 -> CM_REVOKE_CHALLENGE
  12, // 12 -> CM_RESET_LOCKOUT
  1, // 13 -> CM_DETECT_INTERACTION
  9, // 14 -> CM_INVALIDATION_REQUESTER
  8, // 15 -> CM_INVALIDATE
  16, // 16 -> CM_STOP_USER
  15, // 17 -> CM_START_USER
};

const std::string& ClientMonitorEnum_Name(
    ClientMonitorEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientMonitorEnum_entries,
          ClientMonitorEnum_entries_by_number,
          18, ClientMonitorEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientMonitorEnum_entries,
      ClientMonitorEnum_entries_by_number,
      18, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientMonitorEnum_strings[idx].get();
}
bool ClientMonitorEnum_Parse(
    const std::string& name, ClientMonitorEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientMonitorEnum_entries, 18, name, &int_value);
  if (success) {
    *value = static_cast<ClientMonitorEnum>(int_value);
  }
  return success;
}

// ===================================================================

void BiometricServiceStateProto::InitAsDefaultInstance() {
}
class BiometricServiceStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BiometricServiceStateProto>()._has_bits_);
  static void set_has_auth_session_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_session_multi_sensor_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BiometricServiceStateProto::BiometricServiceStateProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.BiometricServiceStateProto)
}
BiometricServiceStateProto::BiometricServiceStateProto(const BiometricServiceStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensor_service_states_(from.sensor_service_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&auth_session_state_, &from.auth_session_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_session_multi_sensor_state_) -
    reinterpret_cast<char*>(&auth_session_state_)) + sizeof(auth_session_multi_sensor_state_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.BiometricServiceStateProto)
}

void BiometricServiceStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  ::memset(&auth_session_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_session_multi_sensor_state_) -
      reinterpret_cast<char*>(&auth_session_state_)) + sizeof(auth_session_multi_sensor_state_));
}

BiometricServiceStateProto::~BiometricServiceStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.BiometricServiceStateProto)
  SharedDtor();
}

void BiometricServiceStateProto::SharedDtor() {
}

void BiometricServiceStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BiometricServiceStateProto& BiometricServiceStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BiometricServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void BiometricServiceStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.BiometricServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_service_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&auth_session_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auth_session_multi_sensor_state_) -
        reinterpret_cast<char*>(&auth_session_state_)) + sizeof(auth_session_multi_sensor_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BiometricServiceStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_service_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState_IsValid(val))) {
            set_auth_session_state(static_cast<::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState_IsValid(val))) {
            set_auth_session_multi_sensor_state(static_cast<::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BiometricServiceStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.BiometricServiceStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_service_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState_IsValid(value)) {
            set_auth_session_state(static_cast< ::com::android::server::biometrics::BiometricServiceStateProto_AuthSessionState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState_IsValid(value)) {
            set_auth_session_multi_sensor_state(static_cast< ::com::android::server::biometrics::BiometricServiceStateProto_MultiSensorState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.BiometricServiceStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.BiometricServiceStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BiometricServiceStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.BiometricServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_service_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->sensor_service_states(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->auth_session_state(), output);
  }

  // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->auth_session_multi_sensor_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.BiometricServiceStateProto)
}

size_t BiometricServiceStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.BiometricServiceStateProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorServiceStateProto sensor_service_states = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_service_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_service_states(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.biometrics.BiometricServiceStateProto.AuthSessionState auth_session_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->auth_session_state());
    }

    // optional .com.android.server.biometrics.BiometricServiceStateProto.MultiSensorState auth_session_multi_sensor_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->auth_session_multi_sensor_state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BiometricServiceStateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BiometricServiceStateProto*>(
      &from));
}

void BiometricServiceStateProto::MergeFrom(const BiometricServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.BiometricServiceStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_service_states_.MergeFrom(from.sensor_service_states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      auth_session_state_ = from.auth_session_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_session_multi_sensor_state_ = from.auth_session_multi_sensor_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BiometricServiceStateProto::CopyFrom(const BiometricServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.BiometricServiceStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricServiceStateProto::IsInitialized() const {
  return true;
}

void BiometricServiceStateProto::InternalSwap(BiometricServiceStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sensor_service_states_)->InternalSwap(CastToBase(&other->sensor_service_states_));
  swap(auth_session_state_, other->auth_session_state_);
  swap(auth_session_multi_sensor_state_, other->auth_session_multi_sensor_state_);
}

std::string BiometricServiceStateProto::GetTypeName() const {
  return "com.android.server.biometrics.BiometricServiceStateProto";
}


// ===================================================================

void SensorServiceStateProto::InitAsDefaultInstance() {
}
class SensorServiceStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorServiceStateProto>()._has_bits_);
};

SensorServiceStateProto::SensorServiceStateProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.SensorServiceStateProto)
}
SensorServiceStateProto::SensorServiceStateProto(const SensorServiceStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sensor_states_(from.sensor_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.SensorServiceStateProto)
}

void SensorServiceStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
}

SensorServiceStateProto::~SensorServiceStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.SensorServiceStateProto)
  SharedDtor();
}

void SensorServiceStateProto::SharedDtor() {
}

void SensorServiceStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorServiceStateProto& SensorServiceStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorServiceStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void SensorServiceStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.SensorServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_states_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorServiceStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorServiceStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.SensorServiceStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.SensorServiceStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.SensorServiceStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorServiceStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.SensorServiceStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->sensor_states(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.SensorServiceStateProto)
}

size_t SensorServiceStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.SensorServiceStateProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.SensorStateProto sensor_states = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_states(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorServiceStateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorServiceStateProto*>(
      &from));
}

void SensorServiceStateProto::MergeFrom(const SensorServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.SensorServiceStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_states_.MergeFrom(from.sensor_states_);
}

void SensorServiceStateProto::CopyFrom(const SensorServiceStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.SensorServiceStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorServiceStateProto::IsInitialized() const {
  return true;
}

void SensorServiceStateProto::InternalSwap(SensorServiceStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sensor_states_)->InternalSwap(CastToBase(&other->sensor_states_));
}

std::string SensorServiceStateProto::GetTypeName() const {
  return "com.android.server.biometrics.SensorServiceStateProto";
}


// ===================================================================

void SensorStateProto::InitAsDefaultInstance() {
  ::com::android::server::biometrics::_SensorStateProto_default_instance_._instance.get_mutable()->scheduler_ = const_cast< ::com::android::server::biometrics::BiometricSchedulerProto*>(
      ::com::android::server::biometrics::BiometricSchedulerProto::internal_default_instance());
}
class SensorStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorStateProto>()._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::biometrics::BiometricSchedulerProto& scheduler(const SensorStateProto* msg);
  static void set_has_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reset_lockout_requires_hardware_auth_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reset_lockout_requires_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::com::android::server::biometrics::BiometricSchedulerProto&
SensorStateProto::_Internal::scheduler(const SensorStateProto* msg) {
  return *msg->scheduler_;
}
SensorStateProto::SensorStateProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.SensorStateProto)
}
SensorStateProto::SensorStateProto(const SensorStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      user_states_(from.user_states_),
      modality_flags_(from.modality_flags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scheduler()) {
    scheduler_ = new ::com::android::server::biometrics::BiometricSchedulerProto(*from.scheduler_);
  } else {
    scheduler_ = nullptr;
  }
  ::memcpy(&sensor_id_, &from.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reset_lockout_requires_challenge_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(reset_lockout_requires_challenge_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.SensorStateProto)
}

void SensorStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  ::memset(&scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reset_lockout_requires_challenge_) -
      reinterpret_cast<char*>(&scheduler_)) + sizeof(reset_lockout_requires_challenge_));
}

SensorStateProto::~SensorStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.SensorStateProto)
  SharedDtor();
}

void SensorStateProto::SharedDtor() {
  if (this != internal_default_instance()) delete scheduler_;
}

void SensorStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorStateProto& SensorStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void SensorStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.SensorStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_states_.Clear();
  modality_flags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scheduler_ != nullptr);
    scheduler_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reset_lockout_requires_challenge_) -
        reinterpret_cast<char*>(&sensor_id_)) + sizeof(reset_lockout_requires_challenge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::SensorStateProto_Modality_IsValid(val))) {
            set_modality(static_cast<::com::android::server::biometrics::SensorStateProto_Modality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 current_strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_current_strength(&has_bits);
          current_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional bool reset_lockout_requires_hardware_auth_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_reset_lockout_requires_hardware_auth_token(&has_bits);
          reset_lockout_requires_hardware_auth_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reset_lockout_requires_challenge = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_reset_lockout_requires_challenge(&has_bits);
          reset_lockout_requires_challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid(val))) {
              add_modality_flags(static_cast<::com::android::server::biometrics::SensorStateProto_ModalityFlag>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_modality_flags(), ptr, ctx, ::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.SensorStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sensor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sensor_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::SensorStateProto_Modality_IsValid(value)) {
            set_modality(static_cast< ::com::android::server::biometrics::SensorStateProto_Modality >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_strength = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_current_strength(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reset_lockout_requires_hardware_auth_token = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_reset_lockout_requires_hardware_auth_token(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_lockout_requires_hardware_auth_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reset_lockout_requires_challenge = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_reset_lockout_requires_challenge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_lockout_requires_challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid(value)) {
            add_modality_flags(static_cast< ::com::android::server::biometrics::SensorStateProto_ModalityFlag >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::com::android::server::biometrics::SensorStateProto_ModalityFlag_IsValid,
                 &unknown_fields_stream,
                 this->mutable_modality_flags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.SensorStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.SensorStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.SensorStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sensor_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->sensor_id(), output);
  }

  // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->modality(), output);
  }

  // optional int32 current_strength = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->current_strength(), output);
  }

  // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::scheduler(this), output);
  }

  // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->user_states(static_cast<int>(i)),
      output);
  }

  // optional bool reset_lockout_requires_hardware_auth_token = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->reset_lockout_requires_hardware_auth_token(), output);
  }

  // optional bool reset_lockout_requires_challenge = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->reset_lockout_requires_challenge(), output);
  }

  // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
  for (int i = 0, n = this->modality_flags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->modality_flags(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.SensorStateProto)
}

size_t SensorStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.SensorStateProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.UserStateProto user_states = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->user_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_states(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.biometrics.SensorStateProto.ModalityFlag modality_flags = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->modality_flags_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->modality_flags(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .com.android.server.biometrics.BiometricSchedulerProto scheduler = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduler_);
    }

    // optional int32 sensor_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sensor_id());
    }

    // optional .com.android.server.biometrics.SensorStateProto.Modality modality = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->modality());
    }

    // optional int32 current_strength = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->current_strength());
    }

    // optional bool reset_lockout_requires_hardware_auth_token = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool reset_lockout_requires_challenge = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorStateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorStateProto*>(
      &from));
}

void SensorStateProto::MergeFrom(const SensorStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.SensorStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_states_.MergeFrom(from.user_states_);
  modality_flags_.MergeFrom(from.modality_flags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_scheduler()->::com::android::server::biometrics::BiometricSchedulerProto::MergeFrom(from.scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      modality_ = from.modality_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_strength_ = from.current_strength_;
    }
    if (cached_has_bits & 0x00000010u) {
      reset_lockout_requires_hardware_auth_token_ = from.reset_lockout_requires_hardware_auth_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      reset_lockout_requires_challenge_ = from.reset_lockout_requires_challenge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorStateProto::CopyFrom(const SensorStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.SensorStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorStateProto::IsInitialized() const {
  return true;
}

void SensorStateProto::InternalSwap(SensorStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&user_states_)->InternalSwap(CastToBase(&other->user_states_));
  modality_flags_.InternalSwap(&other->modality_flags_);
  swap(scheduler_, other->scheduler_);
  swap(sensor_id_, other->sensor_id_);
  swap(modality_, other->modality_);
  swap(current_strength_, other->current_strength_);
  swap(reset_lockout_requires_hardware_auth_token_, other->reset_lockout_requires_hardware_auth_token_);
  swap(reset_lockout_requires_challenge_, other->reset_lockout_requires_challenge_);
}

std::string SensorStateProto::GetTypeName() const {
  return "com.android.server.biometrics.SensorStateProto";
}


// ===================================================================

void UserStateProto::InitAsDefaultInstance() {
}
class UserStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UserStateProto>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_enrolled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserStateProto::UserStateProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.UserStateProto)
}
UserStateProto::UserStateProto(const UserStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_enrolled_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(num_enrolled_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.UserStateProto)
}

void UserStateProto::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_enrolled_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(num_enrolled_));
}

UserStateProto::~UserStateProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.UserStateProto)
  SharedDtor();
}

void UserStateProto::SharedDtor() {
}

void UserStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserStateProto& UserStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserStateProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void UserStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.UserStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_enrolled_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(num_enrolled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_enrolled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_enrolled(&has_bits);
          num_enrolled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.UserStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_enrolled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_enrolled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_enrolled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.UserStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.UserStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.UserStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional int32 num_enrolled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_enrolled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.UserStateProto)
}

size_t UserStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.UserStateProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 num_enrolled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_enrolled());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserStateProto*>(
      &from));
}

void UserStateProto::MergeFrom(const UserStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.UserStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_enrolled_ = from.num_enrolled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserStateProto::CopyFrom(const UserStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.UserStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStateProto::IsInitialized() const {
  return true;
}

void UserStateProto::InternalSwap(UserStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_id_, other->user_id_);
  swap(num_enrolled_, other->num_enrolled_);
}

std::string UserStateProto::GetTypeName() const {
  return "com.android.server.biometrics.UserStateProto";
}


// ===================================================================

void BiometricSchedulerProto::InitAsDefaultInstance() {
}
class BiometricSchedulerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BiometricSchedulerProto>()._has_bits_);
  static void set_has_current_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_operations(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BiometricSchedulerProto::BiometricSchedulerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.biometrics.BiometricSchedulerProto)
}
BiometricSchedulerProto::BiometricSchedulerProto(const BiometricSchedulerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      recent_operations_(from.recent_operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_operation_, &from.current_operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_operations_) -
    reinterpret_cast<char*>(&current_operation_)) + sizeof(total_operations_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.biometrics.BiometricSchedulerProto)
}

void BiometricSchedulerProto::SharedCtor() {
  ::memset(&current_operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_operations_) -
      reinterpret_cast<char*>(&current_operation_)) + sizeof(total_operations_));
}

BiometricSchedulerProto::~BiometricSchedulerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.biometrics.BiometricSchedulerProto)
  SharedDtor();
}

void BiometricSchedulerProto::SharedDtor() {
}

void BiometricSchedulerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BiometricSchedulerProto& BiometricSchedulerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BiometricSchedulerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbiometrics_2eproto.base);
  return *internal_default_instance();
}


void BiometricSchedulerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.biometrics.BiometricSchedulerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recent_operations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&current_operation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_operations_) -
        reinterpret_cast<char*>(&current_operation_)) + sizeof(total_operations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BiometricSchedulerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::ClientMonitorEnum_IsValid(val))) {
            set_current_operation(static_cast<::com::android::server::biometrics::ClientMonitorEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 total_operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_operations(&has_bits);
          total_operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::com::android::server::biometrics::ClientMonitorEnum_IsValid(val))) {
              add_recent_operations(static_cast<::com::android::server::biometrics::ClientMonitorEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_recent_operations(), ptr, ctx, ::com::android::server::biometrics::ClientMonitorEnum_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BiometricSchedulerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.biometrics.BiometricSchedulerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::ClientMonitorEnum_IsValid(value)) {
            set_current_operation(static_cast< ::com::android::server::biometrics::ClientMonitorEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_operations = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_operations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_operations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::biometrics::ClientMonitorEnum_IsValid(value)) {
            add_recent_operations(static_cast< ::com::android::server::biometrics::ClientMonitorEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::com::android::server::biometrics::ClientMonitorEnum_IsValid,
                 &unknown_fields_stream,
                 this->mutable_recent_operations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.biometrics.BiometricSchedulerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.biometrics.BiometricSchedulerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BiometricSchedulerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.biometrics.BiometricSchedulerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->current_operation(), output);
  }

  // optional int32 total_operations = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->total_operations(), output);
  }

  // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
  for (int i = 0, n = this->recent_operations_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->recent_operations(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.biometrics.BiometricSchedulerProto)
}

size_t BiometricSchedulerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.biometrics.BiometricSchedulerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.biometrics.ClientMonitorEnum recent_operations = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->recent_operations_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->recent_operations(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.biometrics.ClientMonitorEnum current_operation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->current_operation());
    }

    // optional int32 total_operations = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_operations());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BiometricSchedulerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BiometricSchedulerProto*>(
      &from));
}

void BiometricSchedulerProto::MergeFrom(const BiometricSchedulerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.biometrics.BiometricSchedulerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recent_operations_.MergeFrom(from.recent_operations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      current_operation_ = from.current_operation_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_operations_ = from.total_operations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BiometricSchedulerProto::CopyFrom(const BiometricSchedulerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.biometrics.BiometricSchedulerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiometricSchedulerProto::IsInitialized() const {
  return true;
}

void BiometricSchedulerProto::InternalSwap(BiometricSchedulerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  recent_operations_.InternalSwap(&other->recent_operations_);
  swap(current_operation_, other->current_operation_);
  swap(total_operations_, other->total_operations_);
}

std::string BiometricSchedulerProto::GetTypeName() const {
  return "com.android.server.biometrics.BiometricSchedulerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::BiometricServiceStateProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::BiometricServiceStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::BiometricServiceStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::SensorServiceStateProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::SensorServiceStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::SensorServiceStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::SensorStateProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::SensorStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::SensorStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::UserStateProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::UserStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::UserStateProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::biometrics::BiometricSchedulerProto* Arena::CreateMaybeMessage< ::com::android::server::biometrics::BiometricSchedulerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::biometrics::BiometricSchedulerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
