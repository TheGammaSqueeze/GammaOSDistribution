// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/media/audioattributes.proto

#include "frameworks/base/core/proto/android/media/audioattributes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace media {
class AudioAttributesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioAttributesProto> _instance;
} _AudioAttributesProto_default_instance_;
}  // namespace media
}  // namespace android
static void InitDefaultsscc_info_AudioAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::media::_AudioAttributesProto_default_instance_;
    new (ptr) ::android::media::AudioAttributesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::media::AudioAttributesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AudioAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto}, {}};

namespace android {
namespace media {
bool ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ContentType_strings[5] = {};

static const char ContentType_names[] =
  "CONTENT_TYPE_UNKNOWN"
  "MOVIE"
  "MUSIC"
  "SONIFICATION"
  "SPEECH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ContentType_entries[] = {
  { {ContentType_names + 0, 20}, 0 },
  { {ContentType_names + 20, 5}, 3 },
  { {ContentType_names + 25, 5}, 2 },
  { {ContentType_names + 30, 12}, 4 },
  { {ContentType_names + 42, 6}, 1 },
};

static const int ContentType_entries_by_number[] = {
  0, // 0 -> CONTENT_TYPE_UNKNOWN
  4, // 1 -> SPEECH
  2, // 2 -> MUSIC
  1, // 3 -> MOVIE
  3, // 4 -> SONIFICATION
};

const std::string& ContentType_Name(
    ContentType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ContentType_entries,
          ContentType_entries_by_number,
          5, ContentType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ContentType_entries,
      ContentType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ContentType_strings[idx].get();
}
bool ContentType_Parse(
    const std::string& name, ContentType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ContentType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ContentType>(int_value);
  }
  return success;
}
bool Usage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Usage_strings[17] = {};

static const char Usage_names[] =
  "ALARM"
  "ASSISTANCE_ACCESSIBILITY"
  "ASSISTANCE_NAVIGATION_GUIDANCE"
  "ASSISTANCE_SONIFICATION"
  "ASSISTANT"
  "GAME"
  "MEDIA"
  "NOTIFICATION"
  "NOTIFICATION_COMMUNICATION_DELAYED"
  "NOTIFICATION_COMMUNICATION_INSTANT"
  "NOTIFICATION_COMMUNICATION_REQUEST"
  "NOTIFICATION_EVENT"
  "NOTIFICATION_RINGTONE"
  "USAGE_UNKNOWN"
  "VIRTUAL_SOURCE"
  "VOICE_COMMUNICATION"
  "VOICE_COMMUNICATION_SIGNALLING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Usage_entries[] = {
  { {Usage_names + 0, 5}, 4 },
  { {Usage_names + 5, 24}, 11 },
  { {Usage_names + 29, 30}, 12 },
  { {Usage_names + 59, 23}, 13 },
  { {Usage_names + 82, 9}, 16 },
  { {Usage_names + 91, 4}, 14 },
  { {Usage_names + 95, 5}, 1 },
  { {Usage_names + 100, 12}, 5 },
  { {Usage_names + 112, 34}, 9 },
  { {Usage_names + 146, 34}, 8 },
  { {Usage_names + 180, 34}, 7 },
  { {Usage_names + 214, 18}, 10 },
  { {Usage_names + 232, 21}, 6 },
  { {Usage_names + 253, 13}, 0 },
  { {Usage_names + 266, 14}, 15 },
  { {Usage_names + 280, 19}, 2 },
  { {Usage_names + 299, 30}, 3 },
};

static const int Usage_entries_by_number[] = {
  13, // 0 -> USAGE_UNKNOWN
  6, // 1 -> MEDIA
  15, // 2 -> VOICE_COMMUNICATION
  16, // 3 -> VOICE_COMMUNICATION_SIGNALLING
  0, // 4 -> ALARM
  7, // 5 -> NOTIFICATION
  12, // 6 -> NOTIFICATION_RINGTONE
  10, // 7 -> NOTIFICATION_COMMUNICATION_REQUEST
  9, // 8 -> NOTIFICATION_COMMUNICATION_INSTANT
  8, // 9 -> NOTIFICATION_COMMUNICATION_DELAYED
  11, // 10 -> NOTIFICATION_EVENT
  1, // 11 -> ASSISTANCE_ACCESSIBILITY
  2, // 12 -> ASSISTANCE_NAVIGATION_GUIDANCE
  3, // 13 -> ASSISTANCE_SONIFICATION
  5, // 14 -> GAME
  14, // 15 -> VIRTUAL_SOURCE
  4, // 16 -> ASSISTANT
};

const std::string& Usage_Name(
    Usage value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Usage_entries,
          Usage_entries_by_number,
          17, Usage_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Usage_entries,
      Usage_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Usage_strings[idx].get();
}
bool Usage_Parse(
    const std::string& name, Usage* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Usage_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<Usage>(int_value);
  }
  return success;
}

// ===================================================================

void AudioAttributesProto::InitAsDefaultInstance() {
}
class AudioAttributesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioAttributesProto>()._has_bits_);
  static void set_has_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AudioAttributesProto::AudioAttributesProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.media.AudioAttributesProto)
}
AudioAttributesProto::AudioAttributesProto(const AudioAttributesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&usage_, &from.usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&usage_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:android.media.AudioAttributesProto)
}

void AudioAttributesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto.base);
  ::memset(&usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&usage_)) + sizeof(flags_));
}

AudioAttributesProto::~AudioAttributesProto() {
  // @@protoc_insertion_point(destructor:android.media.AudioAttributesProto)
  SharedDtor();
}

void AudioAttributesProto::SharedDtor() {
}

void AudioAttributesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioAttributesProto& AudioAttributesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioAttributesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto.base);
  return *internal_default_instance();
}


void AudioAttributesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.media.AudioAttributesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&usage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&usage_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioAttributesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.media.Usage usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::media::Usage_IsValid(val))) {
            set_usage(static_cast<::android::media::Usage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.media.ContentType content_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::media::ContentType_IsValid(val))) {
            set_content_type(static_cast<::android::media::ContentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_tags(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioAttributesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.media.AudioAttributesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.media.Usage usage = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::media::Usage_IsValid(value)) {
            set_usage(static_cast< ::android::media::Usage >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.media.ContentType content_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::media::ContentType_IsValid(value)) {
            set_content_type(static_cast< ::android::media::ContentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.media.AudioAttributesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.media.AudioAttributesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioAttributesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.media.AudioAttributesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.media.Usage usage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->usage(), output);
  }

  // optional .android.media.ContentType content_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->content_type(), output);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // repeated string tags = 4 [(.android.privacy) = {
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.media.AudioAttributesProto)
}

size_t AudioAttributesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.media.AudioAttributesProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4 [(.android.privacy) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.media.Usage usage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->usage());
    }

    // optional .android.media.ContentType content_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->content_type());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioAttributesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AudioAttributesProto*>(
      &from));
}

void AudioAttributesProto::MergeFrom(const AudioAttributesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.media.AudioAttributesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      usage_ = from.usage_;
    }
    if (cached_has_bits & 0x00000002u) {
      content_type_ = from.content_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioAttributesProto::CopyFrom(const AudioAttributesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.media.AudioAttributesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioAttributesProto::IsInitialized() const {
  return true;
}

void AudioAttributesProto::InternalSwap(AudioAttributesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(CastToBase(&other->tags_));
  swap(usage_, other->usage_);
  swap(content_type_, other->content_type_);
  swap(flags_, other->flags_);
}

std::string AudioAttributesProto::GetTypeName() const {
  return "android.media.AudioAttributesProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace media
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::media::AudioAttributesProto* Arena::CreateMaybeMessage< ::android::media::AudioAttributesProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::media::AudioAttributesProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
