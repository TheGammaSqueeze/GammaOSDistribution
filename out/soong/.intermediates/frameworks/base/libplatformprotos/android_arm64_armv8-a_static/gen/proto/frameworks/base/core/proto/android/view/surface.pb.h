// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/view/surface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace view {
class SurfaceProto;
class SurfaceProtoDefaultTypeInternal;
extern SurfaceProtoDefaultTypeInternal _SurfaceProto_default_instance_;
}  // namespace view
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::view::SurfaceProto* Arena::CreateMaybeMessage<::android::view::SurfaceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace view {

enum SurfaceProto_Rotation : int {
  SurfaceProto_Rotation_ROTATION_0 = 0,
  SurfaceProto_Rotation_ROTATION_90 = 1,
  SurfaceProto_Rotation_ROTATION_180 = 2,
  SurfaceProto_Rotation_ROTATION_270 = 3
};
bool SurfaceProto_Rotation_IsValid(int value);
constexpr SurfaceProto_Rotation SurfaceProto_Rotation_Rotation_MIN = SurfaceProto_Rotation_ROTATION_0;
constexpr SurfaceProto_Rotation SurfaceProto_Rotation_Rotation_MAX = SurfaceProto_Rotation_ROTATION_270;
constexpr int SurfaceProto_Rotation_Rotation_ARRAYSIZE = SurfaceProto_Rotation_Rotation_MAX + 1;

const std::string& SurfaceProto_Rotation_Name(SurfaceProto_Rotation value);
template<typename T>
inline const std::string& SurfaceProto_Rotation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SurfaceProto_Rotation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SurfaceProto_Rotation_Name.");
  return SurfaceProto_Rotation_Name(static_cast<SurfaceProto_Rotation>(enum_t_value));
}
bool SurfaceProto_Rotation_Parse(
    const std::string& name, SurfaceProto_Rotation* value);
// ===================================================================

class SurfaceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.view.SurfaceProto) */ {
 public:
  SurfaceProto();
  virtual ~SurfaceProto();

  SurfaceProto(const SurfaceProto& from);
  SurfaceProto(SurfaceProto&& from) noexcept
    : SurfaceProto() {
    *this = ::std::move(from);
  }

  inline SurfaceProto& operator=(const SurfaceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SurfaceProto& operator=(SurfaceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SurfaceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SurfaceProto* internal_default_instance() {
    return reinterpret_cast<const SurfaceProto*>(
               &_SurfaceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SurfaceProto& a, SurfaceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SurfaceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SurfaceProto* New() const final {
    return CreateMaybeMessage<SurfaceProto>(nullptr);
  }

  SurfaceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SurfaceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SurfaceProto& from);
  void MergeFrom(const SurfaceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SurfaceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.view.SurfaceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SurfaceProto_Rotation Rotation;
  static constexpr Rotation ROTATION_0 =
    SurfaceProto_Rotation_ROTATION_0;
  static constexpr Rotation ROTATION_90 =
    SurfaceProto_Rotation_ROTATION_90;
  static constexpr Rotation ROTATION_180 =
    SurfaceProto_Rotation_ROTATION_180;
  static constexpr Rotation ROTATION_270 =
    SurfaceProto_Rotation_ROTATION_270;
  static inline bool Rotation_IsValid(int value) {
    return SurfaceProto_Rotation_IsValid(value);
  }
  static constexpr Rotation Rotation_MIN =
    SurfaceProto_Rotation_Rotation_MIN;
  static constexpr Rotation Rotation_MAX =
    SurfaceProto_Rotation_Rotation_MAX;
  static constexpr int Rotation_ARRAYSIZE =
    SurfaceProto_Rotation_Rotation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Rotation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Rotation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Rotation_Name.");
    return SurfaceProto_Rotation_Name(enum_t_value);
  }
  static inline bool Rotation_Parse(const std::string& name,
      Rotation* value) {
    return SurfaceProto_Rotation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:android.view.SurfaceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SurfaceProto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace view
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::view::SurfaceProto_Rotation> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fsurface_2eproto
