// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/util/log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace util {
class BinaryLogEntry;
class BinaryLogEntryDefaultTypeInternal;
extern BinaryLogEntryDefaultTypeInternal _BinaryLogEntry_default_instance_;
class BinaryLogEntry_Elem;
class BinaryLogEntry_ElemDefaultTypeInternal;
extern BinaryLogEntry_ElemDefaultTypeInternal _BinaryLogEntry_Elem_default_instance_;
class LogProto;
class LogProtoDefaultTypeInternal;
extern LogProtoDefaultTypeInternal _LogProto_default_instance_;
class PersistedLogProto;
class PersistedLogProtoDefaultTypeInternal;
extern PersistedLogProtoDefaultTypeInternal _PersistedLogProto_default_instance_;
class TextLogEntry;
class TextLogEntryDefaultTypeInternal;
extern TextLogEntryDefaultTypeInternal _TextLogEntry_default_instance_;
}  // namespace util
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::util::BinaryLogEntry* Arena::CreateMaybeMessage<::android::util::BinaryLogEntry>(Arena*);
template<> ::android::util::BinaryLogEntry_Elem* Arena::CreateMaybeMessage<::android::util::BinaryLogEntry_Elem>(Arena*);
template<> ::android::util::LogProto* Arena::CreateMaybeMessage<::android::util::LogProto>(Arena*);
template<> ::android::util::PersistedLogProto* Arena::CreateMaybeMessage<::android::util::PersistedLogProto>(Arena*);
template<> ::android::util::TextLogEntry* Arena::CreateMaybeMessage<::android::util::TextLogEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace util {

enum TextLogEntry_LogPriority : int {
  TextLogEntry_LogPriority_LOG_UNKNOWN = 0,
  TextLogEntry_LogPriority_LOG_DEFAULT = 1,
  TextLogEntry_LogPriority_LOG_VERBOSE = 2,
  TextLogEntry_LogPriority_LOG_DEBUG = 3,
  TextLogEntry_LogPriority_LOG_INFO = 4,
  TextLogEntry_LogPriority_LOG_WARN = 5,
  TextLogEntry_LogPriority_LOG_ERROR = 6,
  TextLogEntry_LogPriority_LOG_FATAL = 7,
  TextLogEntry_LogPriority_LOG_SILENT = 8
};
bool TextLogEntry_LogPriority_IsValid(int value);
constexpr TextLogEntry_LogPriority TextLogEntry_LogPriority_LogPriority_MIN = TextLogEntry_LogPriority_LOG_UNKNOWN;
constexpr TextLogEntry_LogPriority TextLogEntry_LogPriority_LogPriority_MAX = TextLogEntry_LogPriority_LOG_SILENT;
constexpr int TextLogEntry_LogPriority_LogPriority_ARRAYSIZE = TextLogEntry_LogPriority_LogPriority_MAX + 1;

const std::string& TextLogEntry_LogPriority_Name(TextLogEntry_LogPriority value);
template<typename T>
inline const std::string& TextLogEntry_LogPriority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextLogEntry_LogPriority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextLogEntry_LogPriority_Name.");
  return TextLogEntry_LogPriority_Name(static_cast<TextLogEntry_LogPriority>(enum_t_value));
}
bool TextLogEntry_LogPriority_Parse(
    const std::string& name, TextLogEntry_LogPriority* value);
enum BinaryLogEntry_Elem_Type : int {
  BinaryLogEntry_Elem_Type_EVENT_TYPE_LIST_STOP = 10,
  BinaryLogEntry_Elem_Type_EVENT_TYPE_UNKNOWN = 63,
  BinaryLogEntry_Elem_Type_EVENT_TYPE_INT = 0,
  BinaryLogEntry_Elem_Type_EVENT_TYPE_LONG = 1,
  BinaryLogEntry_Elem_Type_EVENT_TYPE_STRING = 2,
  BinaryLogEntry_Elem_Type_EVENT_TYPE_LIST = 3,
  BinaryLogEntry_Elem_Type_EVENT_TYPE_FLOAT = 4
};
bool BinaryLogEntry_Elem_Type_IsValid(int value);
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem_Type_Type_MIN = BinaryLogEntry_Elem_Type_EVENT_TYPE_INT;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem_Type_Type_MAX = BinaryLogEntry_Elem_Type_EVENT_TYPE_UNKNOWN;
constexpr int BinaryLogEntry_Elem_Type_Type_ARRAYSIZE = BinaryLogEntry_Elem_Type_Type_MAX + 1;

const std::string& BinaryLogEntry_Elem_Type_Name(BinaryLogEntry_Elem_Type value);
template<typename T>
inline const std::string& BinaryLogEntry_Elem_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BinaryLogEntry_Elem_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BinaryLogEntry_Elem_Type_Name.");
  return BinaryLogEntry_Elem_Type_Name(static_cast<BinaryLogEntry_Elem_Type>(enum_t_value));
}
bool BinaryLogEntry_Elem_Type_Parse(
    const std::string& name, BinaryLogEntry_Elem_Type* value);
// ===================================================================

class TextLogEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.util.TextLogEntry) */ {
 public:
  TextLogEntry();
  virtual ~TextLogEntry();

  TextLogEntry(const TextLogEntry& from);
  TextLogEntry(TextLogEntry&& from) noexcept
    : TextLogEntry() {
    *this = ::std::move(from);
  }

  inline TextLogEntry& operator=(const TextLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextLogEntry& operator=(TextLogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TextLogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextLogEntry* internal_default_instance() {
    return reinterpret_cast<const TextLogEntry*>(
               &_TextLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextLogEntry& a, TextLogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TextLogEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextLogEntry* New() const final {
    return CreateMaybeMessage<TextLogEntry>(nullptr);
  }

  TextLogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextLogEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TextLogEntry& from);
  void MergeFrom(const TextLogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TextLogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.util.TextLogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TextLogEntry_LogPriority LogPriority;
  static constexpr LogPriority LOG_UNKNOWN =
    TextLogEntry_LogPriority_LOG_UNKNOWN;
  static constexpr LogPriority LOG_DEFAULT =
    TextLogEntry_LogPriority_LOG_DEFAULT;
  static constexpr LogPriority LOG_VERBOSE =
    TextLogEntry_LogPriority_LOG_VERBOSE;
  static constexpr LogPriority LOG_DEBUG =
    TextLogEntry_LogPriority_LOG_DEBUG;
  static constexpr LogPriority LOG_INFO =
    TextLogEntry_LogPriority_LOG_INFO;
  static constexpr LogPriority LOG_WARN =
    TextLogEntry_LogPriority_LOG_WARN;
  static constexpr LogPriority LOG_ERROR =
    TextLogEntry_LogPriority_LOG_ERROR;
  static constexpr LogPriority LOG_FATAL =
    TextLogEntry_LogPriority_LOG_FATAL;
  static constexpr LogPriority LOG_SILENT =
    TextLogEntry_LogPriority_LOG_SILENT;
  static inline bool LogPriority_IsValid(int value) {
    return TextLogEntry_LogPriority_IsValid(value);
  }
  static constexpr LogPriority LogPriority_MIN =
    TextLogEntry_LogPriority_LogPriority_MIN;
  static constexpr LogPriority LogPriority_MAX =
    TextLogEntry_LogPriority_LogPriority_MAX;
  static constexpr int LogPriority_ARRAYSIZE =
    TextLogEntry_LogPriority_LogPriority_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LogPriority_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogPriority>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogPriority_Name.");
    return TextLogEntry_LogPriority_Name(enum_t_value);
  }
  static inline bool LogPriority_Parse(const std::string& name,
      LogPriority* value) {
    return TextLogEntry_LogPriority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 7,
    kLogFieldNumber = 8,
    kSecFieldNumber = 1,
    kNanosecFieldNumber = 2,
    kPriorityFieldNumber = 3,
    kUidFieldNumber = 4,
    kPidFieldNumber = 5,
    kTidFieldNumber = 6,
  };
  // optional string tag = 7;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional string log = 8;
  bool has_log() const;
  void clear_log();
  const std::string& log() const;
  void set_log(const std::string& value);
  void set_log(std::string&& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  std::string* mutable_log();
  std::string* release_log();
  void set_allocated_log(std::string* log);

  // optional uint64 sec = 1;
  bool has_sec() const;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::uint64 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 nanosec = 2;
  bool has_nanosec() const;
  void clear_nanosec();
  ::PROTOBUF_NAMESPACE_ID::uint64 nanosec() const;
  void set_nanosec(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .android.util.TextLogEntry.LogPriority priority = 3;
  bool has_priority() const;
  void clear_priority();
  ::android::util::TextLogEntry_LogPriority priority() const;
  void set_priority(::android::util::TextLogEntry_LogPriority value);

  // optional int32 uid = 4;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pid = 5;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tid = 6;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.util.TextLogEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sec_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nanosec_;
  int priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
};
// -------------------------------------------------------------------

class BinaryLogEntry_Elem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.util.BinaryLogEntry.Elem) */ {
 public:
  BinaryLogEntry_Elem();
  virtual ~BinaryLogEntry_Elem();

  BinaryLogEntry_Elem(const BinaryLogEntry_Elem& from);
  BinaryLogEntry_Elem(BinaryLogEntry_Elem&& from) noexcept
    : BinaryLogEntry_Elem() {
    *this = ::std::move(from);
  }

  inline BinaryLogEntry_Elem& operator=(const BinaryLogEntry_Elem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryLogEntry_Elem& operator=(BinaryLogEntry_Elem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinaryLogEntry_Elem& default_instance();

  enum ValueCase {
    kValInt32 = 2,
    kValInt64 = 3,
    kValString = 4,
    kValFloat = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryLogEntry_Elem* internal_default_instance() {
    return reinterpret_cast<const BinaryLogEntry_Elem*>(
               &_BinaryLogEntry_Elem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BinaryLogEntry_Elem& a, BinaryLogEntry_Elem& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryLogEntry_Elem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryLogEntry_Elem* New() const final {
    return CreateMaybeMessage<BinaryLogEntry_Elem>(nullptr);
  }

  BinaryLogEntry_Elem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryLogEntry_Elem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinaryLogEntry_Elem& from);
  void MergeFrom(const BinaryLogEntry_Elem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinaryLogEntry_Elem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.util.BinaryLogEntry.Elem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BinaryLogEntry_Elem_Type Type;
  static constexpr Type EVENT_TYPE_LIST_STOP =
    BinaryLogEntry_Elem_Type_EVENT_TYPE_LIST_STOP;
  static constexpr Type EVENT_TYPE_UNKNOWN =
    BinaryLogEntry_Elem_Type_EVENT_TYPE_UNKNOWN;
  static constexpr Type EVENT_TYPE_INT =
    BinaryLogEntry_Elem_Type_EVENT_TYPE_INT;
  static constexpr Type EVENT_TYPE_LONG =
    BinaryLogEntry_Elem_Type_EVENT_TYPE_LONG;
  static constexpr Type EVENT_TYPE_STRING =
    BinaryLogEntry_Elem_Type_EVENT_TYPE_STRING;
  static constexpr Type EVENT_TYPE_LIST =
    BinaryLogEntry_Elem_Type_EVENT_TYPE_LIST;
  static constexpr Type EVENT_TYPE_FLOAT =
    BinaryLogEntry_Elem_Type_EVENT_TYPE_FLOAT;
  static inline bool Type_IsValid(int value) {
    return BinaryLogEntry_Elem_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BinaryLogEntry_Elem_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BinaryLogEntry_Elem_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BinaryLogEntry_Elem_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BinaryLogEntry_Elem_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return BinaryLogEntry_Elem_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValInt32FieldNumber = 2,
    kValInt64FieldNumber = 3,
    kValStringFieldNumber = 4,
    kValFloatFieldNumber = 5,
  };
  // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
  bool has_type() const;
  void clear_type();
  ::android::util::BinaryLogEntry_Elem_Type type() const;
  void set_type(::android::util::BinaryLogEntry_Elem_Type value);

  // optional int32 val_int32 = 2;
  bool has_val_int32() const;
  void clear_val_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 val_int32() const;
  void set_val_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 val_int64 = 3;
  bool has_val_int64() const;
  void clear_val_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 val_int64() const;
  void set_val_int64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional string val_string = 4;
  bool has_val_string() const;
  void clear_val_string();
  const std::string& val_string() const;
  void set_val_string(const std::string& value);
  void set_val_string(std::string&& value);
  void set_val_string(const char* value);
  void set_val_string(const char* value, size_t size);
  std::string* mutable_val_string();
  std::string* release_val_string();
  void set_allocated_val_string(std::string* val_string);

  // optional float val_float = 5;
  bool has_val_float() const;
  void clear_val_float();
  float val_float() const;
  void set_val_float(float value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:android.util.BinaryLogEntry.Elem)
 private:
  class _Internal;
  void set_has_val_int32();
  void set_has_val_int64();
  void set_has_val_string();
  void set_has_val_float();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 val_int32_;
    ::PROTOBUF_NAMESPACE_ID::int64 val_int64_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_string_;
    float val_float_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
};
// -------------------------------------------------------------------

class BinaryLogEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.util.BinaryLogEntry) */ {
 public:
  BinaryLogEntry();
  virtual ~BinaryLogEntry();

  BinaryLogEntry(const BinaryLogEntry& from);
  BinaryLogEntry(BinaryLogEntry&& from) noexcept
    : BinaryLogEntry() {
    *this = ::std::move(from);
  }

  inline BinaryLogEntry& operator=(const BinaryLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryLogEntry& operator=(BinaryLogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BinaryLogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryLogEntry* internal_default_instance() {
    return reinterpret_cast<const BinaryLogEntry*>(
               &_BinaryLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BinaryLogEntry& a, BinaryLogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryLogEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BinaryLogEntry* New() const final {
    return CreateMaybeMessage<BinaryLogEntry>(nullptr);
  }

  BinaryLogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BinaryLogEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BinaryLogEntry& from);
  void MergeFrom(const BinaryLogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BinaryLogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.util.BinaryLogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BinaryLogEntry_Elem Elem;

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 7,
    kSecFieldNumber = 1,
    kNanosecFieldNumber = 2,
    kUidFieldNumber = 3,
    kPidFieldNumber = 4,
    kTidFieldNumber = 5,
    kTagIndexFieldNumber = 6,
  };
  // repeated .android.util.BinaryLogEntry.Elem elems = 7;
  int elems_size() const;
  void clear_elems();
  ::android::util::BinaryLogEntry_Elem* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry_Elem >*
      mutable_elems();
  const ::android::util::BinaryLogEntry_Elem& elems(int index) const;
  ::android::util::BinaryLogEntry_Elem* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry_Elem >&
      elems() const;

  // optional uint64 sec = 1;
  bool has_sec() const;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::uint64 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 nanosec = 2;
  bool has_nanosec() const;
  void clear_nanosec();
  ::PROTOBUF_NAMESPACE_ID::uint64 nanosec() const;
  void set_nanosec(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 uid = 3;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pid = 4;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tid = 5;
  bool has_tid() const;
  void clear_tid();
  ::PROTOBUF_NAMESPACE_ID::int32 tid() const;
  void set_tid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint32 tag_index = 6;
  bool has_tag_index() const;
  void clear_tag_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_index() const;
  void set_tag_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.util.BinaryLogEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry_Elem > elems_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sec_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nanosec_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  ::PROTOBUF_NAMESPACE_ID::int32 tid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_index_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
};
// -------------------------------------------------------------------

class LogProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.util.LogProto) */ {
 public:
  LogProto();
  virtual ~LogProto();

  LogProto(const LogProto& from);
  LogProto(LogProto&& from) noexcept
    : LogProto() {
    *this = ::std::move(from);
  }

  inline LogProto& operator=(const LogProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogProto& operator=(LogProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LogProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogProto* internal_default_instance() {
    return reinterpret_cast<const LogProto*>(
               &_LogProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogProto& a, LogProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LogProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogProto* New() const final {
    return CreateMaybeMessage<LogProto>(nullptr);
  }

  LogProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LogProto& from);
  void MergeFrom(const LogProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.util.LogProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextLogsFieldNumber = 1,
    kBinaryLogsFieldNumber = 2,
  };
  // repeated .android.util.TextLogEntry text_logs = 1;
  int text_logs_size() const;
  void clear_text_logs();
  ::android::util::TextLogEntry* mutable_text_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_text_logs();
  const ::android::util::TextLogEntry& text_logs(int index) const;
  ::android::util::TextLogEntry* add_text_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      text_logs() const;

  // repeated .android.util.BinaryLogEntry binary_logs = 2;
  int binary_logs_size() const;
  void clear_binary_logs();
  ::android::util::BinaryLogEntry* mutable_binary_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry >*
      mutable_binary_logs();
  const ::android::util::BinaryLogEntry& binary_logs(int index) const;
  ::android::util::BinaryLogEntry* add_binary_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry >&
      binary_logs() const;

  // @@protoc_insertion_point(class_scope:android.util.LogProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > text_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry > binary_logs_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
};
// -------------------------------------------------------------------

class PersistedLogProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.util.PersistedLogProto) */ {
 public:
  PersistedLogProto();
  virtual ~PersistedLogProto();

  PersistedLogProto(const PersistedLogProto& from);
  PersistedLogProto(PersistedLogProto&& from) noexcept
    : PersistedLogProto() {
    *this = ::std::move(from);
  }

  inline PersistedLogProto& operator=(const PersistedLogProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistedLogProto& operator=(PersistedLogProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PersistedLogProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistedLogProto* internal_default_instance() {
    return reinterpret_cast<const PersistedLogProto*>(
               &_PersistedLogProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PersistedLogProto& a, PersistedLogProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistedLogProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PersistedLogProto* New() const final {
    return CreateMaybeMessage<PersistedLogProto>(nullptr);
  }

  PersistedLogProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistedLogProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PersistedLogProto& from);
  void MergeFrom(const PersistedLogProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersistedLogProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.util.PersistedLogProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainLogsFieldNumber = 1,
    kRadioLogsFieldNumber = 2,
    kEventsLogsFieldNumber = 3,
    kSystemLogsFieldNumber = 4,
    kCrashLogsFieldNumber = 5,
    kStatsLogsFieldNumber = 6,
    kSecurityLogsFieldNumber = 7,
    kKernelLogsFieldNumber = 8,
  };
  // repeated .android.util.TextLogEntry main_logs = 1;
  int main_logs_size() const;
  void clear_main_logs();
  ::android::util::TextLogEntry* mutable_main_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_main_logs();
  const ::android::util::TextLogEntry& main_logs(int index) const;
  ::android::util::TextLogEntry* add_main_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      main_logs() const;

  // repeated .android.util.TextLogEntry radio_logs = 2;
  int radio_logs_size() const;
  void clear_radio_logs();
  ::android::util::TextLogEntry* mutable_radio_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_radio_logs();
  const ::android::util::TextLogEntry& radio_logs(int index) const;
  ::android::util::TextLogEntry* add_radio_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      radio_logs() const;

  // repeated .android.util.TextLogEntry events_logs = 3;
  int events_logs_size() const;
  void clear_events_logs();
  ::android::util::TextLogEntry* mutable_events_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_events_logs();
  const ::android::util::TextLogEntry& events_logs(int index) const;
  ::android::util::TextLogEntry* add_events_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      events_logs() const;

  // repeated .android.util.TextLogEntry system_logs = 4;
  int system_logs_size() const;
  void clear_system_logs();
  ::android::util::TextLogEntry* mutable_system_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_system_logs();
  const ::android::util::TextLogEntry& system_logs(int index) const;
  ::android::util::TextLogEntry* add_system_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      system_logs() const;

  // repeated .android.util.TextLogEntry crash_logs = 5;
  int crash_logs_size() const;
  void clear_crash_logs();
  ::android::util::TextLogEntry* mutable_crash_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_crash_logs();
  const ::android::util::TextLogEntry& crash_logs(int index) const;
  ::android::util::TextLogEntry* add_crash_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      crash_logs() const;

  // repeated .android.util.TextLogEntry stats_logs = 6;
  int stats_logs_size() const;
  void clear_stats_logs();
  ::android::util::TextLogEntry* mutable_stats_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_stats_logs();
  const ::android::util::TextLogEntry& stats_logs(int index) const;
  ::android::util::TextLogEntry* add_stats_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      stats_logs() const;

  // repeated .android.util.TextLogEntry security_logs = 7;
  int security_logs_size() const;
  void clear_security_logs();
  ::android::util::TextLogEntry* mutable_security_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_security_logs();
  const ::android::util::TextLogEntry& security_logs(int index) const;
  ::android::util::TextLogEntry* add_security_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      security_logs() const;

  // repeated .android.util.TextLogEntry kernel_logs = 8;
  int kernel_logs_size() const;
  void clear_kernel_logs();
  ::android::util::TextLogEntry* mutable_kernel_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
      mutable_kernel_logs();
  const ::android::util::TextLogEntry& kernel_logs(int index) const;
  ::android::util::TextLogEntry* add_kernel_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
      kernel_logs() const;

  // @@protoc_insertion_point(class_scope:android.util.PersistedLogProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > main_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > radio_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > events_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > system_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > crash_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > stats_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > security_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry > kernel_logs_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextLogEntry

// optional uint64 sec = 1;
inline bool TextLogEntry::has_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TextLogEntry::clear_sec() {
  sec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TextLogEntry::sec() const {
  // @@protoc_insertion_point(field_get:android.util.TextLogEntry.sec)
  return sec_;
}
inline void TextLogEntry::set_sec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sec_ = value;
  // @@protoc_insertion_point(field_set:android.util.TextLogEntry.sec)
}

// optional uint64 nanosec = 2;
inline bool TextLogEntry::has_nanosec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TextLogEntry::clear_nanosec() {
  nanosec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TextLogEntry::nanosec() const {
  // @@protoc_insertion_point(field_get:android.util.TextLogEntry.nanosec)
  return nanosec_;
}
inline void TextLogEntry::set_nanosec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  nanosec_ = value;
  // @@protoc_insertion_point(field_set:android.util.TextLogEntry.nanosec)
}

// optional .android.util.TextLogEntry.LogPriority priority = 3;
inline bool TextLogEntry::has_priority() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TextLogEntry::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::util::TextLogEntry_LogPriority TextLogEntry::priority() const {
  // @@protoc_insertion_point(field_get:android.util.TextLogEntry.priority)
  return static_cast< ::android::util::TextLogEntry_LogPriority >(priority_);
}
inline void TextLogEntry::set_priority(::android::util::TextLogEntry_LogPriority value) {
  assert(::android::util::TextLogEntry_LogPriority_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:android.util.TextLogEntry.priority)
}

// optional int32 uid = 4;
inline bool TextLogEntry::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TextLogEntry::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextLogEntry::uid() const {
  // @@protoc_insertion_point(field_get:android.util.TextLogEntry.uid)
  return uid_;
}
inline void TextLogEntry::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.util.TextLogEntry.uid)
}

// optional int32 pid = 5;
inline bool TextLogEntry::has_pid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TextLogEntry::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextLogEntry::pid() const {
  // @@protoc_insertion_point(field_get:android.util.TextLogEntry.pid)
  return pid_;
}
inline void TextLogEntry::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:android.util.TextLogEntry.pid)
}

// optional int32 tid = 6;
inline bool TextLogEntry::has_tid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TextLogEntry::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TextLogEntry::tid() const {
  // @@protoc_insertion_point(field_get:android.util.TextLogEntry.tid)
  return tid_;
}
inline void TextLogEntry::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:android.util.TextLogEntry.tid)
}

// optional string tag = 7;
inline bool TextLogEntry::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextLogEntry::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TextLogEntry::tag() const {
  // @@protoc_insertion_point(field_get:android.util.TextLogEntry.tag)
  return tag_.GetNoArena();
}
inline void TextLogEntry::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.util.TextLogEntry.tag)
}
inline void TextLogEntry::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.util.TextLogEntry.tag)
}
inline void TextLogEntry::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.util.TextLogEntry.tag)
}
inline void TextLogEntry::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.util.TextLogEntry.tag)
}
inline std::string* TextLogEntry::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.util.TextLogEntry.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TextLogEntry::release_tag() {
  // @@protoc_insertion_point(field_release:android.util.TextLogEntry.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TextLogEntry::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:android.util.TextLogEntry.tag)
}

// optional string log = 8;
inline bool TextLogEntry::has_log() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TextLogEntry::clear_log() {
  log_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TextLogEntry::log() const {
  // @@protoc_insertion_point(field_get:android.util.TextLogEntry.log)
  return log_.GetNoArena();
}
inline void TextLogEntry::set_log(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.util.TextLogEntry.log)
}
inline void TextLogEntry::set_log(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  log_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.util.TextLogEntry.log)
}
inline void TextLogEntry::set_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.util.TextLogEntry.log)
}
inline void TextLogEntry::set_log(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.util.TextLogEntry.log)
}
inline std::string* TextLogEntry::mutable_log() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.util.TextLogEntry.log)
  return log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TextLogEntry::release_log() {
  // @@protoc_insertion_point(field_release:android.util.TextLogEntry.log)
  if (!has_log()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return log_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TextLogEntry::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  log_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:android.util.TextLogEntry.log)
}

// -------------------------------------------------------------------

// BinaryLogEntry_Elem

// optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
inline bool BinaryLogEntry_Elem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinaryLogEntry_Elem::clear_type() {
  type_ = 63;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::util::BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::type() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.Elem.type)
  return static_cast< ::android::util::BinaryLogEntry_Elem_Type >(type_);
}
inline void BinaryLogEntry_Elem::set_type(::android::util::BinaryLogEntry_Elem_Type value) {
  assert(::android::util::BinaryLogEntry_Elem_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.Elem.type)
}

// optional int32 val_int32 = 2;
inline bool BinaryLogEntry_Elem::has_val_int32() const {
  return value_case() == kValInt32;
}
inline void BinaryLogEntry_Elem::set_has_val_int32() {
  _oneof_case_[0] = kValInt32;
}
inline void BinaryLogEntry_Elem::clear_val_int32() {
  if (has_val_int32()) {
    value_.val_int32_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryLogEntry_Elem::val_int32() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.Elem.val_int32)
  if (has_val_int32()) {
    return value_.val_int32_;
  }
  return 0;
}
inline void BinaryLogEntry_Elem::set_val_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!has_val_int32()) {
    clear_value();
    set_has_val_int32();
  }
  value_.val_int32_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.Elem.val_int32)
}

// optional int64 val_int64 = 3;
inline bool BinaryLogEntry_Elem::has_val_int64() const {
  return value_case() == kValInt64;
}
inline void BinaryLogEntry_Elem::set_has_val_int64() {
  _oneof_case_[0] = kValInt64;
}
inline void BinaryLogEntry_Elem::clear_val_int64() {
  if (has_val_int64()) {
    value_.val_int64_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BinaryLogEntry_Elem::val_int64() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.Elem.val_int64)
  if (has_val_int64()) {
    return value_.val_int64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void BinaryLogEntry_Elem::set_val_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_val_int64()) {
    clear_value();
    set_has_val_int64();
  }
  value_.val_int64_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.Elem.val_int64)
}

// optional string val_string = 4;
inline bool BinaryLogEntry_Elem::has_val_string() const {
  return value_case() == kValString;
}
inline void BinaryLogEntry_Elem::set_has_val_string() {
  _oneof_case_[0] = kValString;
}
inline void BinaryLogEntry_Elem::clear_val_string() {
  if (has_val_string()) {
    value_.val_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& BinaryLogEntry_Elem::val_string() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.Elem.val_string)
  if (has_val_string()) {
    return value_.val_string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BinaryLogEntry_Elem::set_val_string(const std::string& value) {
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.Elem.val_string)
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.Elem.val_string)
}
inline void BinaryLogEntry_Elem::set_val_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.Elem.val_string)
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.util.BinaryLogEntry.Elem.val_string)
}
inline void BinaryLogEntry_Elem::set_val_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.util.BinaryLogEntry.Elem.val_string)
}
inline void BinaryLogEntry_Elem::set_val_string(const char* value, size_t size) {
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.util.BinaryLogEntry.Elem.val_string)
}
inline std::string* BinaryLogEntry_Elem::mutable_val_string() {
  if (!has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:android.util.BinaryLogEntry.Elem.val_string)
  return value_.val_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BinaryLogEntry_Elem::release_val_string() {
  // @@protoc_insertion_point(field_release:android.util.BinaryLogEntry.Elem.val_string)
  if (has_val_string()) {
    clear_has_value();
    return value_.val_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void BinaryLogEntry_Elem::set_allocated_val_string(std::string* val_string) {
  if (has_value()) {
    clear_value();
  }
  if (val_string != nullptr) {
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(val_string);
  }
  // @@protoc_insertion_point(field_set_allocated:android.util.BinaryLogEntry.Elem.val_string)
}

// optional float val_float = 5;
inline bool BinaryLogEntry_Elem::has_val_float() const {
  return value_case() == kValFloat;
}
inline void BinaryLogEntry_Elem::set_has_val_float() {
  _oneof_case_[0] = kValFloat;
}
inline void BinaryLogEntry_Elem::clear_val_float() {
  if (has_val_float()) {
    value_.val_float_ = 0;
    clear_has_value();
  }
}
inline float BinaryLogEntry_Elem::val_float() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.Elem.val_float)
  if (has_val_float()) {
    return value_.val_float_;
  }
  return 0;
}
inline void BinaryLogEntry_Elem::set_val_float(float value) {
  if (!has_val_float()) {
    clear_value();
    set_has_val_float();
  }
  value_.val_float_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.Elem.val_float)
}

inline bool BinaryLogEntry_Elem::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void BinaryLogEntry_Elem::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline BinaryLogEntry_Elem::ValueCase BinaryLogEntry_Elem::value_case() const {
  return BinaryLogEntry_Elem::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BinaryLogEntry

// optional uint64 sec = 1;
inline bool BinaryLogEntry::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinaryLogEntry::clear_sec() {
  sec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BinaryLogEntry::sec() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.sec)
  return sec_;
}
inline void BinaryLogEntry::set_sec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sec_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.sec)
}

// optional uint64 nanosec = 2;
inline bool BinaryLogEntry::has_nanosec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinaryLogEntry::clear_nanosec() {
  nanosec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BinaryLogEntry::nanosec() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.nanosec)
  return nanosec_;
}
inline void BinaryLogEntry::set_nanosec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  nanosec_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.nanosec)
}

// optional int32 uid = 3;
inline bool BinaryLogEntry::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BinaryLogEntry::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryLogEntry::uid() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.uid)
  return uid_;
}
inline void BinaryLogEntry::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.uid)
}

// optional int32 pid = 4;
inline bool BinaryLogEntry::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BinaryLogEntry::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryLogEntry::pid() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.pid)
  return pid_;
}
inline void BinaryLogEntry::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.pid)
}

// optional int32 tid = 5;
inline bool BinaryLogEntry::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BinaryLogEntry::clear_tid() {
  tid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BinaryLogEntry::tid() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.tid)
  return tid_;
}
inline void BinaryLogEntry::set_tid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  tid_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.tid)
}

// optional uint32 tag_index = 6;
inline bool BinaryLogEntry::has_tag_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BinaryLogEntry::clear_tag_index() {
  tag_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BinaryLogEntry::tag_index() const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.tag_index)
  return tag_index_;
}
inline void BinaryLogEntry::set_tag_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tag_index_ = value;
  // @@protoc_insertion_point(field_set:android.util.BinaryLogEntry.tag_index)
}

// repeated .android.util.BinaryLogEntry.Elem elems = 7;
inline int BinaryLogEntry::elems_size() const {
  return elems_.size();
}
inline void BinaryLogEntry::clear_elems() {
  elems_.Clear();
}
inline ::android::util::BinaryLogEntry_Elem* BinaryLogEntry::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.BinaryLogEntry.elems)
  return elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry_Elem >*
BinaryLogEntry::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:android.util.BinaryLogEntry.elems)
  return &elems_;
}
inline const ::android::util::BinaryLogEntry_Elem& BinaryLogEntry::elems(int index) const {
  // @@protoc_insertion_point(field_get:android.util.BinaryLogEntry.elems)
  return elems_.Get(index);
}
inline ::android::util::BinaryLogEntry_Elem* BinaryLogEntry::add_elems() {
  // @@protoc_insertion_point(field_add:android.util.BinaryLogEntry.elems)
  return elems_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry_Elem >&
BinaryLogEntry::elems() const {
  // @@protoc_insertion_point(field_list:android.util.BinaryLogEntry.elems)
  return elems_;
}

// -------------------------------------------------------------------

// LogProto

// repeated .android.util.TextLogEntry text_logs = 1;
inline int LogProto::text_logs_size() const {
  return text_logs_.size();
}
inline void LogProto::clear_text_logs() {
  text_logs_.Clear();
}
inline ::android::util::TextLogEntry* LogProto::mutable_text_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.LogProto.text_logs)
  return text_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
LogProto::mutable_text_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.LogProto.text_logs)
  return &text_logs_;
}
inline const ::android::util::TextLogEntry& LogProto::text_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.LogProto.text_logs)
  return text_logs_.Get(index);
}
inline ::android::util::TextLogEntry* LogProto::add_text_logs() {
  // @@protoc_insertion_point(field_add:android.util.LogProto.text_logs)
  return text_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
LogProto::text_logs() const {
  // @@protoc_insertion_point(field_list:android.util.LogProto.text_logs)
  return text_logs_;
}

// repeated .android.util.BinaryLogEntry binary_logs = 2;
inline int LogProto::binary_logs_size() const {
  return binary_logs_.size();
}
inline void LogProto::clear_binary_logs() {
  binary_logs_.Clear();
}
inline ::android::util::BinaryLogEntry* LogProto::mutable_binary_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.LogProto.binary_logs)
  return binary_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry >*
LogProto::mutable_binary_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.LogProto.binary_logs)
  return &binary_logs_;
}
inline const ::android::util::BinaryLogEntry& LogProto::binary_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.LogProto.binary_logs)
  return binary_logs_.Get(index);
}
inline ::android::util::BinaryLogEntry* LogProto::add_binary_logs() {
  // @@protoc_insertion_point(field_add:android.util.LogProto.binary_logs)
  return binary_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::BinaryLogEntry >&
LogProto::binary_logs() const {
  // @@protoc_insertion_point(field_list:android.util.LogProto.binary_logs)
  return binary_logs_;
}

// -------------------------------------------------------------------

// PersistedLogProto

// repeated .android.util.TextLogEntry main_logs = 1;
inline int PersistedLogProto::main_logs_size() const {
  return main_logs_.size();
}
inline void PersistedLogProto::clear_main_logs() {
  main_logs_.Clear();
}
inline ::android::util::TextLogEntry* PersistedLogProto::mutable_main_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.PersistedLogProto.main_logs)
  return main_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
PersistedLogProto::mutable_main_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.PersistedLogProto.main_logs)
  return &main_logs_;
}
inline const ::android::util::TextLogEntry& PersistedLogProto::main_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.PersistedLogProto.main_logs)
  return main_logs_.Get(index);
}
inline ::android::util::TextLogEntry* PersistedLogProto::add_main_logs() {
  // @@protoc_insertion_point(field_add:android.util.PersistedLogProto.main_logs)
  return main_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
PersistedLogProto::main_logs() const {
  // @@protoc_insertion_point(field_list:android.util.PersistedLogProto.main_logs)
  return main_logs_;
}

// repeated .android.util.TextLogEntry radio_logs = 2;
inline int PersistedLogProto::radio_logs_size() const {
  return radio_logs_.size();
}
inline void PersistedLogProto::clear_radio_logs() {
  radio_logs_.Clear();
}
inline ::android::util::TextLogEntry* PersistedLogProto::mutable_radio_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.PersistedLogProto.radio_logs)
  return radio_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
PersistedLogProto::mutable_radio_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.PersistedLogProto.radio_logs)
  return &radio_logs_;
}
inline const ::android::util::TextLogEntry& PersistedLogProto::radio_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.PersistedLogProto.radio_logs)
  return radio_logs_.Get(index);
}
inline ::android::util::TextLogEntry* PersistedLogProto::add_radio_logs() {
  // @@protoc_insertion_point(field_add:android.util.PersistedLogProto.radio_logs)
  return radio_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
PersistedLogProto::radio_logs() const {
  // @@protoc_insertion_point(field_list:android.util.PersistedLogProto.radio_logs)
  return radio_logs_;
}

// repeated .android.util.TextLogEntry events_logs = 3;
inline int PersistedLogProto::events_logs_size() const {
  return events_logs_.size();
}
inline void PersistedLogProto::clear_events_logs() {
  events_logs_.Clear();
}
inline ::android::util::TextLogEntry* PersistedLogProto::mutable_events_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.PersistedLogProto.events_logs)
  return events_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
PersistedLogProto::mutable_events_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.PersistedLogProto.events_logs)
  return &events_logs_;
}
inline const ::android::util::TextLogEntry& PersistedLogProto::events_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.PersistedLogProto.events_logs)
  return events_logs_.Get(index);
}
inline ::android::util::TextLogEntry* PersistedLogProto::add_events_logs() {
  // @@protoc_insertion_point(field_add:android.util.PersistedLogProto.events_logs)
  return events_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
PersistedLogProto::events_logs() const {
  // @@protoc_insertion_point(field_list:android.util.PersistedLogProto.events_logs)
  return events_logs_;
}

// repeated .android.util.TextLogEntry system_logs = 4;
inline int PersistedLogProto::system_logs_size() const {
  return system_logs_.size();
}
inline void PersistedLogProto::clear_system_logs() {
  system_logs_.Clear();
}
inline ::android::util::TextLogEntry* PersistedLogProto::mutable_system_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.PersistedLogProto.system_logs)
  return system_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
PersistedLogProto::mutable_system_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.PersistedLogProto.system_logs)
  return &system_logs_;
}
inline const ::android::util::TextLogEntry& PersistedLogProto::system_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.PersistedLogProto.system_logs)
  return system_logs_.Get(index);
}
inline ::android::util::TextLogEntry* PersistedLogProto::add_system_logs() {
  // @@protoc_insertion_point(field_add:android.util.PersistedLogProto.system_logs)
  return system_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
PersistedLogProto::system_logs() const {
  // @@protoc_insertion_point(field_list:android.util.PersistedLogProto.system_logs)
  return system_logs_;
}

// repeated .android.util.TextLogEntry crash_logs = 5;
inline int PersistedLogProto::crash_logs_size() const {
  return crash_logs_.size();
}
inline void PersistedLogProto::clear_crash_logs() {
  crash_logs_.Clear();
}
inline ::android::util::TextLogEntry* PersistedLogProto::mutable_crash_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.PersistedLogProto.crash_logs)
  return crash_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
PersistedLogProto::mutable_crash_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.PersistedLogProto.crash_logs)
  return &crash_logs_;
}
inline const ::android::util::TextLogEntry& PersistedLogProto::crash_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.PersistedLogProto.crash_logs)
  return crash_logs_.Get(index);
}
inline ::android::util::TextLogEntry* PersistedLogProto::add_crash_logs() {
  // @@protoc_insertion_point(field_add:android.util.PersistedLogProto.crash_logs)
  return crash_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
PersistedLogProto::crash_logs() const {
  // @@protoc_insertion_point(field_list:android.util.PersistedLogProto.crash_logs)
  return crash_logs_;
}

// repeated .android.util.TextLogEntry stats_logs = 6;
inline int PersistedLogProto::stats_logs_size() const {
  return stats_logs_.size();
}
inline void PersistedLogProto::clear_stats_logs() {
  stats_logs_.Clear();
}
inline ::android::util::TextLogEntry* PersistedLogProto::mutable_stats_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.PersistedLogProto.stats_logs)
  return stats_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
PersistedLogProto::mutable_stats_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.PersistedLogProto.stats_logs)
  return &stats_logs_;
}
inline const ::android::util::TextLogEntry& PersistedLogProto::stats_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.PersistedLogProto.stats_logs)
  return stats_logs_.Get(index);
}
inline ::android::util::TextLogEntry* PersistedLogProto::add_stats_logs() {
  // @@protoc_insertion_point(field_add:android.util.PersistedLogProto.stats_logs)
  return stats_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
PersistedLogProto::stats_logs() const {
  // @@protoc_insertion_point(field_list:android.util.PersistedLogProto.stats_logs)
  return stats_logs_;
}

// repeated .android.util.TextLogEntry security_logs = 7;
inline int PersistedLogProto::security_logs_size() const {
  return security_logs_.size();
}
inline void PersistedLogProto::clear_security_logs() {
  security_logs_.Clear();
}
inline ::android::util::TextLogEntry* PersistedLogProto::mutable_security_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.PersistedLogProto.security_logs)
  return security_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
PersistedLogProto::mutable_security_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.PersistedLogProto.security_logs)
  return &security_logs_;
}
inline const ::android::util::TextLogEntry& PersistedLogProto::security_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.PersistedLogProto.security_logs)
  return security_logs_.Get(index);
}
inline ::android::util::TextLogEntry* PersistedLogProto::add_security_logs() {
  // @@protoc_insertion_point(field_add:android.util.PersistedLogProto.security_logs)
  return security_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
PersistedLogProto::security_logs() const {
  // @@protoc_insertion_point(field_list:android.util.PersistedLogProto.security_logs)
  return security_logs_;
}

// repeated .android.util.TextLogEntry kernel_logs = 8;
inline int PersistedLogProto::kernel_logs_size() const {
  return kernel_logs_.size();
}
inline void PersistedLogProto::clear_kernel_logs() {
  kernel_logs_.Clear();
}
inline ::android::util::TextLogEntry* PersistedLogProto::mutable_kernel_logs(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.PersistedLogProto.kernel_logs)
  return kernel_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >*
PersistedLogProto::mutable_kernel_logs() {
  // @@protoc_insertion_point(field_mutable_list:android.util.PersistedLogProto.kernel_logs)
  return &kernel_logs_;
}
inline const ::android::util::TextLogEntry& PersistedLogProto::kernel_logs(int index) const {
  // @@protoc_insertion_point(field_get:android.util.PersistedLogProto.kernel_logs)
  return kernel_logs_.Get(index);
}
inline ::android::util::TextLogEntry* PersistedLogProto::add_kernel_logs() {
  // @@protoc_insertion_point(field_add:android.util.PersistedLogProto.kernel_logs)
  return kernel_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::TextLogEntry >&
PersistedLogProto::kernel_logs() const {
  // @@protoc_insertion_point(field_list:android.util.PersistedLogProto.kernel_logs)
  return kernel_logs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace util
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::util::TextLogEntry_LogPriority> : ::std::true_type {};
template <> struct is_proto_enum< ::android::util::BinaryLogEntry_Elem_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto
