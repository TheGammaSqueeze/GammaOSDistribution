// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/hotword/enums.proto

#include "frameworks/proto_logging/stats/enums/hotword/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace hotword {
}  // namespace hotword
}  // namespace android
namespace android {
namespace hotword {
bool HotwordDetectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HotwordDetectorType_strings[3] = {};

static const char HotwordDetectorType_names[] =
  "NORMAL_DETECTOR"
  "TRUSTED_DETECTOR_DSP"
  "TRUSTED_DETECTOR_SOFTWARE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HotwordDetectorType_entries[] = {
  { {HotwordDetectorType_names + 0, 15}, 0 },
  { {HotwordDetectorType_names + 15, 20}, 1 },
  { {HotwordDetectorType_names + 35, 25}, 2 },
};

static const int HotwordDetectorType_entries_by_number[] = {
  0, // 0 -> NORMAL_DETECTOR
  1, // 1 -> TRUSTED_DETECTOR_DSP
  2, // 2 -> TRUSTED_DETECTOR_SOFTWARE
};

const std::string& HotwordDetectorType_Name(
    HotwordDetectorType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HotwordDetectorType_entries,
          HotwordDetectorType_entries_by_number,
          3, HotwordDetectorType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HotwordDetectorType_entries,
      HotwordDetectorType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HotwordDetectorType_strings[idx].get();
}
bool HotwordDetectorType_Parse(
    const std::string& name, HotwordDetectorType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HotwordDetectorType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<HotwordDetectorType>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hotword
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
