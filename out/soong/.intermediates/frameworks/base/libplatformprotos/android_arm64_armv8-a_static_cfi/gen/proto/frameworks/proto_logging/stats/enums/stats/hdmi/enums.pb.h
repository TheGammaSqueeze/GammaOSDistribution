// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/hdmi/enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fhdmi_2fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fhdmi_2fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fhdmi_2fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fhdmi_2fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace stats {
namespace hdmi {

enum LogicalAddress : int {
  LOGICAL_ADDRESS_UNKNOWN = -1,
  TV = 0,
  RECORDING_DEVICE_1 = 1,
  RECORDING_DEVICE_2 = 2,
  TUNER_1 = 3,
  PLAYBACK_DEVICE_1 = 4,
  AUDIO_SYSTEM = 5,
  TUNER_2 = 6,
  TUNER_3 = 7,
  PLAYBACK_DEVICE_2 = 8,
  RECORDING_DEVICE_3 = 9,
  TUNER_4 = 10,
  PLAYBACK_DEVICE_3 = 11,
  RESERVED_1 = 12,
  RESERVED_2 = 13,
  SPECIFIC_USE = 14,
  UNREGISTERED_OR_BROADCAST = 15
};
bool LogicalAddress_IsValid(int value);
constexpr LogicalAddress LogicalAddress_MIN = LOGICAL_ADDRESS_UNKNOWN;
constexpr LogicalAddress LogicalAddress_MAX = UNREGISTERED_OR_BROADCAST;
constexpr int LogicalAddress_ARRAYSIZE = LogicalAddress_MAX + 1;

const std::string& LogicalAddress_Name(LogicalAddress value);
template<typename T>
inline const std::string& LogicalAddress_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalAddress>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalAddress_Name.");
  return LogicalAddress_Name(static_cast<LogicalAddress>(enum_t_value));
}
bool LogicalAddress_Parse(
    const std::string& name, LogicalAddress* value);
enum PathRelationship : int {
  RELATIONSHIP_TO_ACTIVE_SOURCE_UNKNOWN = 0,
  DIFFERENT_BRANCH = 1,
  ANCESTOR = 2,
  DESCENDANT = 3,
  SIBLING = 4,
  SAME = 5
};
bool PathRelationship_IsValid(int value);
constexpr PathRelationship PathRelationship_MIN = RELATIONSHIP_TO_ACTIVE_SOURCE_UNKNOWN;
constexpr PathRelationship PathRelationship_MAX = SAME;
constexpr int PathRelationship_ARRAYSIZE = PathRelationship_MAX + 1;

const std::string& PathRelationship_Name(PathRelationship value);
template<typename T>
inline const std::string& PathRelationship_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PathRelationship>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PathRelationship_Name.");
  return PathRelationship_Name(static_cast<PathRelationship>(enum_t_value));
}
bool PathRelationship_Parse(
    const std::string& name, PathRelationship* value);
enum SendMessageResult : int {
  SEND_MESSAGE_RESULT_UNKNOWN = 0,
  SUCCESS = 10,
  NACK = 11,
  BUSY = 12,
  FAIL = 13
};
bool SendMessageResult_IsValid(int value);
constexpr SendMessageResult SendMessageResult_MIN = SEND_MESSAGE_RESULT_UNKNOWN;
constexpr SendMessageResult SendMessageResult_MAX = FAIL;
constexpr int SendMessageResult_ARRAYSIZE = SendMessageResult_MAX + 1;

const std::string& SendMessageResult_Name(SendMessageResult value);
template<typename T>
inline const std::string& SendMessageResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SendMessageResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SendMessageResult_Name.");
  return SendMessageResult_Name(static_cast<SendMessageResult>(enum_t_value));
}
bool SendMessageResult_Parse(
    const std::string& name, SendMessageResult* value);
enum MessageDirection : int {
  MESSAGE_DIRECTION_UNKNOWN = 0,
  MESSAGE_DIRECTION_OTHER = 1,
  OUTGOING = 2,
  INCOMING = 3,
  TO_SELF = 4
};
bool MessageDirection_IsValid(int value);
constexpr MessageDirection MessageDirection_MIN = MESSAGE_DIRECTION_UNKNOWN;
constexpr MessageDirection MessageDirection_MAX = TO_SELF;
constexpr int MessageDirection_ARRAYSIZE = MessageDirection_MAX + 1;

const std::string& MessageDirection_Name(MessageDirection value);
template<typename T>
inline const std::string& MessageDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageDirection_Name.");
  return MessageDirection_Name(static_cast<MessageDirection>(enum_t_value));
}
bool MessageDirection_Parse(
    const std::string& name, MessageDirection* value);
enum UserControlPressedCommand : int {
  USER_CONTROL_PRESSED_COMMAND_UNKNOWN = 0,
  USER_CONTROL_PRESSED_COMMAND_OTHER = 1,
  NUMBER = 2,
  SELECT = 256,
  UP = 257,
  DOWN = 258,
  LEFT = 259,
  RIGHT = 260,
  RIGHT_UP = 261,
  RIGHT_DOWN = 262,
  LEFT_UP = 263,
  LEFT_DOWN = 264,
  EXIT = 269,
  VOLUME_UP = 321,
  VOLUME_DOWN = 322,
  VOLUME_MUTE = 323,
  POWER = 320,
  POWER_TOGGLE = 363,
  POWER_OFF = 364,
  POWER_ON = 365
};
bool UserControlPressedCommand_IsValid(int value);
constexpr UserControlPressedCommand UserControlPressedCommand_MIN = USER_CONTROL_PRESSED_COMMAND_UNKNOWN;
constexpr UserControlPressedCommand UserControlPressedCommand_MAX = POWER_ON;
constexpr int UserControlPressedCommand_ARRAYSIZE = UserControlPressedCommand_MAX + 1;

const std::string& UserControlPressedCommand_Name(UserControlPressedCommand value);
template<typename T>
inline const std::string& UserControlPressedCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserControlPressedCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserControlPressedCommand_Name.");
  return UserControlPressedCommand_Name(static_cast<UserControlPressedCommand>(enum_t_value));
}
bool UserControlPressedCommand_Parse(
    const std::string& name, UserControlPressedCommand* value);
enum FeatureAbortReason : int {
  FEATURE_ABORT_REASON_UNKNOWN = 0,
  UNRECOGNIZED_OPCODE = 10,
  NOT_IN_CORRECT_MODE_TO_RESPOND = 11,
  CANNOT_PROVIDE_SOURCE = 12,
  INVALID_OPERAND = 13,
  REFUSED = 14,
  UNABLE_TO_DETERMINE = 15
};
bool FeatureAbortReason_IsValid(int value);
constexpr FeatureAbortReason FeatureAbortReason_MIN = FEATURE_ABORT_REASON_UNKNOWN;
constexpr FeatureAbortReason FeatureAbortReason_MAX = UNABLE_TO_DETERMINE;
constexpr int FeatureAbortReason_ARRAYSIZE = FeatureAbortReason_MAX + 1;

const std::string& FeatureAbortReason_Name(FeatureAbortReason value);
template<typename T>
inline const std::string& FeatureAbortReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeatureAbortReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeatureAbortReason_Name.");
  return FeatureAbortReason_Name(static_cast<FeatureAbortReason>(enum_t_value));
}
bool FeatureAbortReason_Parse(
    const std::string& name, FeatureAbortReason* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmi
}  // namespace stats
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::stats::hdmi::LogicalAddress> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::hdmi::PathRelationship> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::hdmi::SendMessageResult> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::hdmi::MessageDirection> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::hdmi::UserControlPressedCommand> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::hdmi::FeatureAbortReason> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2fhdmi_2fenums_2eproto
