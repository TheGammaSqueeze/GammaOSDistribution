// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/internal/binder_latency.proto

#include "frameworks/base/core/proto/android/internal/binder_latency.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dims_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto;
namespace com {
namespace android {
namespace internal {
namespace os {
class RepeatedApiStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedApiStats> _instance;
} _RepeatedApiStats_default_instance_;
class DimsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dims> _instance;
  int service_class_name_as_enum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_class_name_;
  int service_method_name_as_enum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_method_name_;
} _Dims_default_instance_;
class ApiStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApiStats> _instance;
} _ApiStats_default_instance_;
}  // namespace os
}  // namespace internal
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_ApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::internal::os::_ApiStats_default_instance_;
    new (ptr) ::com::android::internal::os::ApiStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::internal::os::ApiStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto}, {
      &scc_info_Dims_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto.base,}};

static void InitDefaultsscc_info_Dims_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::internal::os::_Dims_default_instance_;
    new (ptr) ::com::android::internal::os::Dims();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::internal::os::Dims::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dims_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Dims_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::internal::os::_RepeatedApiStats_default_instance_;
    new (ptr) ::com::android::internal::os::RepeatedApiStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::internal::os::RepeatedApiStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RepeatedApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RepeatedApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto}, {
      &scc_info_ApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto.base,}};

namespace com {
namespace android {
namespace internal {
namespace os {
bool Dims_ProcessSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Dims_ProcessSource_strings[4] = {};

static const char Dims_ProcessSource_names[] =
  "BLUETOOTH"
  "SYSTEM_SERVER"
  "TELEPHONY"
  "UNKNOWN_PROCESS_SOURCE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Dims_ProcessSource_entries[] = {
  { {Dims_ProcessSource_names + 0, 9}, 3 },
  { {Dims_ProcessSource_names + 9, 13}, 1 },
  { {Dims_ProcessSource_names + 22, 9}, 2 },
  { {Dims_ProcessSource_names + 31, 22}, 0 },
};

static const int Dims_ProcessSource_entries_by_number[] = {
  3, // 0 -> UNKNOWN_PROCESS_SOURCE
  1, // 1 -> SYSTEM_SERVER
  2, // 2 -> TELEPHONY
  0, // 3 -> BLUETOOTH
};

const std::string& Dims_ProcessSource_Name(
    Dims_ProcessSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Dims_ProcessSource_entries,
          Dims_ProcessSource_entries_by_number,
          4, Dims_ProcessSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Dims_ProcessSource_entries,
      Dims_ProcessSource_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Dims_ProcessSource_strings[idx].get();
}
bool Dims_ProcessSource_Parse(
    const std::string& name, Dims_ProcessSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Dims_ProcessSource_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Dims_ProcessSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dims_ProcessSource Dims::UNKNOWN_PROCESS_SOURCE;
constexpr Dims_ProcessSource Dims::SYSTEM_SERVER;
constexpr Dims_ProcessSource Dims::TELEPHONY;
constexpr Dims_ProcessSource Dims::BLUETOOTH;
constexpr Dims_ProcessSource Dims::ProcessSource_MIN;
constexpr Dims_ProcessSource Dims::ProcessSource_MAX;
constexpr int Dims::ProcessSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Dims_ServiceClassName_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Dims_ServiceClassName_strings[1] = {};

static const char Dims_ServiceClassName_names[] =
  "UNKNOWN_CLASS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Dims_ServiceClassName_entries[] = {
  { {Dims_ServiceClassName_names + 0, 13}, 0 },
};

static const int Dims_ServiceClassName_entries_by_number[] = {
  0, // 0 -> UNKNOWN_CLASS
};

const std::string& Dims_ServiceClassName_Name(
    Dims_ServiceClassName value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Dims_ServiceClassName_entries,
          Dims_ServiceClassName_entries_by_number,
          1, Dims_ServiceClassName_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Dims_ServiceClassName_entries,
      Dims_ServiceClassName_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Dims_ServiceClassName_strings[idx].get();
}
bool Dims_ServiceClassName_Parse(
    const std::string& name, Dims_ServiceClassName* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Dims_ServiceClassName_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<Dims_ServiceClassName>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dims_ServiceClassName Dims::UNKNOWN_CLASS;
constexpr Dims_ServiceClassName Dims::ServiceClassName_MIN;
constexpr Dims_ServiceClassName Dims::ServiceClassName_MAX;
constexpr int Dims::ServiceClassName_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Dims_ServiceMethodName_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Dims_ServiceMethodName_strings[1] = {};

static const char Dims_ServiceMethodName_names[] =
  "UNKNOWN_METHOD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Dims_ServiceMethodName_entries[] = {
  { {Dims_ServiceMethodName_names + 0, 14}, 0 },
};

static const int Dims_ServiceMethodName_entries_by_number[] = {
  0, // 0 -> UNKNOWN_METHOD
};

const std::string& Dims_ServiceMethodName_Name(
    Dims_ServiceMethodName value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Dims_ServiceMethodName_entries,
          Dims_ServiceMethodName_entries_by_number,
          1, Dims_ServiceMethodName_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Dims_ServiceMethodName_entries,
      Dims_ServiceMethodName_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Dims_ServiceMethodName_strings[idx].get();
}
bool Dims_ServiceMethodName_Parse(
    const std::string& name, Dims_ServiceMethodName* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Dims_ServiceMethodName_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<Dims_ServiceMethodName>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dims_ServiceMethodName Dims::UNKNOWN_METHOD;
constexpr Dims_ServiceMethodName Dims::ServiceMethodName_MIN;
constexpr Dims_ServiceMethodName Dims::ServiceMethodName_MAX;
constexpr int Dims::ServiceMethodName_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RepeatedApiStats::InitAsDefaultInstance() {
}
class RepeatedApiStats::_Internal {
 public:
  using HasBits = decltype(std::declval<RepeatedApiStats>()._has_bits_);
};

RepeatedApiStats::RepeatedApiStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.internal.os.RepeatedApiStats)
}
RepeatedApiStats::RepeatedApiStats(const RepeatedApiStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      api_stats_(from.api_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.internal.os.RepeatedApiStats)
}

void RepeatedApiStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto.base);
}

RepeatedApiStats::~RepeatedApiStats() {
  // @@protoc_insertion_point(destructor:com.android.internal.os.RepeatedApiStats)
  SharedDtor();
}

void RepeatedApiStats::SharedDtor() {
}

void RepeatedApiStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedApiStats& RepeatedApiStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto.base);
  return *internal_default_instance();
}


void RepeatedApiStats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.internal.os.RepeatedApiStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  api_stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RepeatedApiStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.android.internal.os.ApiStats api_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_api_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RepeatedApiStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.internal.os.RepeatedApiStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.android.internal.os.ApiStats api_stats = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_api_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.internal.os.RepeatedApiStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.internal.os.RepeatedApiStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RepeatedApiStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.internal.os.RepeatedApiStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.android.internal.os.ApiStats api_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->api_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->api_stats(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.internal.os.RepeatedApiStats)
}

size_t RepeatedApiStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.internal.os.RepeatedApiStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.internal.os.ApiStats api_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->api_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->api_stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedApiStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RepeatedApiStats*>(
      &from));
}

void RepeatedApiStats::MergeFrom(const RepeatedApiStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.internal.os.RepeatedApiStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  api_stats_.MergeFrom(from.api_stats_);
}

void RepeatedApiStats::CopyFrom(const RepeatedApiStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.internal.os.RepeatedApiStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedApiStats::IsInitialized() const {
  return true;
}

void RepeatedApiStats::InternalSwap(RepeatedApiStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&api_stats_)->InternalSwap(CastToBase(&other->api_stats_));
}

std::string RepeatedApiStats::GetTypeName() const {
  return "com.android.internal.os.RepeatedApiStats";
}


// ===================================================================

void Dims::InitAsDefaultInstance() {
}
class Dims::_Internal {
 public:
  using HasBits = decltype(std::declval<Dims>()._has_bits_);
  static void set_has_process_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Dims::Dims()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.internal.os.Dims)
}
Dims::Dims(const Dims& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_source_ = from.process_source_;
  clear_has_service_class();
  switch (from.service_class_case()) {
    case kServiceClassNameAsEnum: {
      set_service_class_name_as_enum(from.service_class_name_as_enum());
      break;
    }
    case kServiceClassName: {
      set_service_class_name(from.service_class_name());
      break;
    }
    case SERVICE_CLASS_NOT_SET: {
      break;
    }
  }
  clear_has_service_method();
  switch (from.service_method_case()) {
    case kServiceMethodNameAsEnum: {
      set_service_method_name_as_enum(from.service_method_name_as_enum());
      break;
    }
    case kServiceMethodName: {
      set_service_method_name(from.service_method_name());
      break;
    }
    case SERVICE_METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.android.internal.os.Dims)
}

void Dims::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dims_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto.base);
  process_source_ = 0;
  clear_has_service_class();
  clear_has_service_method();
}

Dims::~Dims() {
  // @@protoc_insertion_point(destructor:com.android.internal.os.Dims)
  SharedDtor();
}

void Dims::SharedDtor() {
  if (has_service_class()) {
    clear_service_class();
  }
  if (has_service_method()) {
    clear_service_method();
  }
}

void Dims::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dims& Dims::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dims_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto.base);
  return *internal_default_instance();
}


void Dims::clear_service_class() {
// @@protoc_insertion_point(one_of_clear_start:com.android.internal.os.Dims)
  switch (service_class_case()) {
    case kServiceClassNameAsEnum: {
      // No need to clear
      break;
    }
    case kServiceClassName: {
      service_class_.service_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SERVICE_CLASS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVICE_CLASS_NOT_SET;
}

void Dims::clear_service_method() {
// @@protoc_insertion_point(one_of_clear_start:com.android.internal.os.Dims)
  switch (service_method_case()) {
    case kServiceMethodNameAsEnum: {
      // No need to clear
      break;
    }
    case kServiceMethodName: {
      service_method_.service_method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SERVICE_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SERVICE_METHOD_NOT_SET;
}


void Dims::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.internal.os.Dims)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_source_ = 0;
  clear_service_class();
  clear_service_method();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Dims::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.internal.os.Dims.ProcessSource process_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::internal::os::Dims_ProcessSource_IsValid(val))) {
            set_process_source(static_cast<::com::android::internal::os::Dims_ProcessSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .com.android.internal.os.Dims.ServiceClassName service_class_name_as_enum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::internal::os::Dims_ServiceClassName_IsValid(val))) {
            set_service_class_name_as_enum(static_cast<::com::android::internal::os::Dims_ServiceClassName>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string service_class_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_service_class_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.internal.os.Dims.ServiceMethodName service_method_name_as_enum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::internal::os::Dims_ServiceMethodName_IsValid(val))) {
            set_service_method_name_as_enum(static_cast<::com::android::internal::os::Dims_ServiceMethodName>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string service_method_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_service_method_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Dims::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.internal.os.Dims)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.internal.os.Dims.ProcessSource process_source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::internal::os::Dims_ProcessSource_IsValid(value)) {
            set_process_source(static_cast< ::com::android::internal::os::Dims_ProcessSource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.internal.os.Dims.ServiceClassName service_class_name_as_enum = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::internal::os::Dims_ServiceClassName_IsValid(value)) {
            set_service_class_name_as_enum(static_cast< ::com::android::internal::os::Dims_ServiceClassName >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_class_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_class_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.internal.os.Dims.ServiceMethodName service_method_name_as_enum = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::internal::os::Dims_ServiceMethodName_IsValid(value)) {
            set_service_method_name_as_enum(static_cast< ::com::android::internal::os::Dims_ServiceMethodName >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string service_method_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_method_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.internal.os.Dims)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.internal.os.Dims)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Dims::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.internal.os.Dims)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.internal.os.Dims.ProcessSource process_source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->process_source(), output);
  }

  switch (service_class_case()) {
    case kServiceClassNameAsEnum:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
        2, this->service_class_name_as_enum(), output);
      break;
    case kServiceClassName:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->service_class_name(), output);
      break;
    default: ;
  }
  switch (service_method_case()) {
    case kServiceMethodNameAsEnum:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
        4, this->service_method_name_as_enum(), output);
      break;
    case kServiceMethodName:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        5, this->service_method_name(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.internal.os.Dims)
}

size_t Dims::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.internal.os.Dims)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.android.internal.os.Dims.ProcessSource process_source = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->process_source());
  }

  switch (service_class_case()) {
    // optional .com.android.internal.os.Dims.ServiceClassName service_class_name_as_enum = 2;
    case kServiceClassNameAsEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->service_class_name_as_enum());
      break;
    }
    // optional string service_class_name = 3;
    case kServiceClassName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->service_class_name());
      break;
    }
    case SERVICE_CLASS_NOT_SET: {
      break;
    }
  }
  switch (service_method_case()) {
    // optional .com.android.internal.os.Dims.ServiceMethodName service_method_name_as_enum = 4;
    case kServiceMethodNameAsEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->service_method_name_as_enum());
      break;
    }
    // optional string service_method_name = 5;
    case kServiceMethodName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->service_method_name());
      break;
    }
    case SERVICE_METHOD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dims::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Dims*>(
      &from));
}

void Dims::MergeFrom(const Dims& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.internal.os.Dims)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_process_source()) {
    set_process_source(from.process_source());
  }
  switch (from.service_class_case()) {
    case kServiceClassNameAsEnum: {
      set_service_class_name_as_enum(from.service_class_name_as_enum());
      break;
    }
    case kServiceClassName: {
      set_service_class_name(from.service_class_name());
      break;
    }
    case SERVICE_CLASS_NOT_SET: {
      break;
    }
  }
  switch (from.service_method_case()) {
    case kServiceMethodNameAsEnum: {
      set_service_method_name_as_enum(from.service_method_name_as_enum());
      break;
    }
    case kServiceMethodName: {
      set_service_method_name(from.service_method_name());
      break;
    }
    case SERVICE_METHOD_NOT_SET: {
      break;
    }
  }
}

void Dims::CopyFrom(const Dims& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.internal.os.Dims)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dims::IsInitialized() const {
  return true;
}

void Dims::InternalSwap(Dims* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(process_source_, other->process_source_);
  swap(service_class_, other->service_class_);
  swap(service_method_, other->service_method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string Dims::GetTypeName() const {
  return "com.android.internal.os.Dims";
}


// ===================================================================

void ApiStats::InitAsDefaultInstance() {
  ::com::android::internal::os::_ApiStats_default_instance_._instance.get_mutable()->dims_ = const_cast< ::com::android::internal::os::Dims*>(
      ::com::android::internal::os::Dims::internal_default_instance());
}
class ApiStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ApiStats>()._has_bits_);
  static const ::com::android::internal::os::Dims& dims(const ApiStats* msg);
  static void set_has_dims(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_bucket_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bucket_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_bucket_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scale_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::com::android::internal::os::Dims&
ApiStats::_Internal::dims(const ApiStats* msg) {
  return *msg->dims_;
}
ApiStats::ApiStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.internal.os.ApiStats)
}
ApiStats::ApiStats(const ApiStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dims()) {
    dims_ = new ::com::android::internal::os::Dims(*from.dims_);
  } else {
    dims_ = nullptr;
  }
  ::memcpy(&first_bucket_index_, &from.first_bucket_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_factor_) -
    reinterpret_cast<char*>(&first_bucket_index_)) + sizeof(scale_factor_));
  // @@protoc_insertion_point(copy_constructor:com.android.internal.os.ApiStats)
}

void ApiStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto.base);
  ::memset(&dims_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_factor_) -
      reinterpret_cast<char*>(&dims_)) + sizeof(scale_factor_));
}

ApiStats::~ApiStats() {
  // @@protoc_insertion_point(destructor:com.android.internal.os.ApiStats)
  SharedDtor();
}

void ApiStats::SharedDtor() {
  if (this != internal_default_instance()) delete dims_;
}

void ApiStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApiStats& ApiStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApiStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto.base);
  return *internal_default_instance();
}


void ApiStats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.internal.os.ApiStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dims_ != nullptr);
    dims_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&first_bucket_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_factor_) -
        reinterpret_cast<char*>(&first_bucket_index_)) + sizeof(scale_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApiStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.internal.os.Dims dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_dims(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_bucket_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_first_bucket_index(&has_bits);
          first_bucket_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 buckets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_buckets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_buckets(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bucket_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bucket_count(&has_bits);
          bucket_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 first_bucket_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_first_bucket_size(&has_bits);
          first_bucket_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale_factor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_scale_factor(&has_bits);
          scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApiStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.internal.os.ApiStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.internal.os.Dims dims = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dims()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_bucket_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_first_bucket_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_bucket_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 buckets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_buckets())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buckets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bucket_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_bucket_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bucket_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_bucket_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_first_bucket_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_bucket_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_factor = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_scale_factor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.internal.os.ApiStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.internal.os.ApiStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApiStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.internal.os.ApiStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.internal.os.Dims dims = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::dims(this), output);
  }

  // optional int32 first_bucket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->first_bucket_index(), output);
  }

  // repeated int32 buckets = 3;
  for (int i = 0, n = this->buckets_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->buckets(i), output);
  }

  // optional int32 bucket_count = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->bucket_count(), output);
  }

  // optional int32 first_bucket_size = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->first_bucket_size(), output);
  }

  // optional float scale_factor = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->scale_factor(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.internal.os.ApiStats)
}

size_t ApiStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.internal.os.ApiStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 buckets = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->buckets_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->buckets_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .com.android.internal.os.Dims dims = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dims_);
    }

    // optional int32 first_bucket_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->first_bucket_index());
    }

    // optional int32 bucket_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->bucket_count());
    }

    // optional int32 first_bucket_size = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->first_bucket_size());
    }

    // optional float scale_factor = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApiStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ApiStats*>(
      &from));
}

void ApiStats::MergeFrom(const ApiStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.internal.os.ApiStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dims()->::com::android::internal::os::Dims::MergeFrom(from.dims());
    }
    if (cached_has_bits & 0x00000002u) {
      first_bucket_index_ = from.first_bucket_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      bucket_count_ = from.bucket_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_bucket_size_ = from.first_bucket_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      scale_factor_ = from.scale_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApiStats::CopyFrom(const ApiStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.internal.os.ApiStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApiStats::IsInitialized() const {
  return true;
}

void ApiStats::InternalSwap(ApiStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buckets_.InternalSwap(&other->buckets_);
  swap(dims_, other->dims_);
  swap(first_bucket_index_, other->first_bucket_index_);
  swap(bucket_count_, other->bucket_count_);
  swap(first_bucket_size_, other->first_bucket_size_);
  swap(scale_factor_, other->scale_factor_);
}

std::string ApiStats::GetTypeName() const {
  return "com.android.internal.os.ApiStats";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace internal
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::internal::os::RepeatedApiStats* Arena::CreateMaybeMessage< ::com::android::internal::os::RepeatedApiStats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::internal::os::RepeatedApiStats >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::internal::os::Dims* Arena::CreateMaybeMessage< ::com::android::internal::os::Dims >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::internal::os::Dims >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::internal::os::ApiStats* Arena::CreateMaybeMessage< ::com::android::internal::os::ApiStats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::internal::os::ApiStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
