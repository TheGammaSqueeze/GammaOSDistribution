// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/powermanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/os/worksource.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
class PowerManagerInternalProto;
class PowerManagerInternalProtoDefaultTypeInternal;
extern PowerManagerInternalProtoDefaultTypeInternal _PowerManagerInternalProto_default_instance_;
class PowerManagerProto;
class PowerManagerProtoDefaultTypeInternal;
extern PowerManagerProtoDefaultTypeInternal _PowerManagerProto_default_instance_;
class PowerManagerProto_WakeLock;
class PowerManagerProto_WakeLockDefaultTypeInternal;
extern PowerManagerProto_WakeLockDefaultTypeInternal _PowerManagerProto_WakeLock_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::PowerManagerInternalProto* Arena::CreateMaybeMessage<::android::os::PowerManagerInternalProto>(Arena*);
template<> ::android::os::PowerManagerProto* Arena::CreateMaybeMessage<::android::os::PowerManagerProto>(Arena*);
template<> ::android::os::PowerManagerProto_WakeLock* Arena::CreateMaybeMessage<::android::os::PowerManagerProto_WakeLock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

enum PowerManagerProto_UserActivityEvent : int {
  PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_OTHER = 0,
  PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_BUTTON = 1,
  PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_TOUCH = 2,
  PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_ACCESSIBILITY = 3
};
bool PowerManagerProto_UserActivityEvent_IsValid(int value);
constexpr PowerManagerProto_UserActivityEvent PowerManagerProto_UserActivityEvent_UserActivityEvent_MIN = PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_OTHER;
constexpr PowerManagerProto_UserActivityEvent PowerManagerProto_UserActivityEvent_UserActivityEvent_MAX = PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_ACCESSIBILITY;
constexpr int PowerManagerProto_UserActivityEvent_UserActivityEvent_ARRAYSIZE = PowerManagerProto_UserActivityEvent_UserActivityEvent_MAX + 1;

const std::string& PowerManagerProto_UserActivityEvent_Name(PowerManagerProto_UserActivityEvent value);
template<typename T>
inline const std::string& PowerManagerProto_UserActivityEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerManagerProto_UserActivityEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerManagerProto_UserActivityEvent_Name.");
  return PowerManagerProto_UserActivityEvent_Name(static_cast<PowerManagerProto_UserActivityEvent>(enum_t_value));
}
bool PowerManagerProto_UserActivityEvent_Parse(
    const std::string& name, PowerManagerProto_UserActivityEvent* value);
enum PowerManagerInternalProto_Wakefulness : int {
  PowerManagerInternalProto_Wakefulness_WAKEFULNESS_ASLEEP = 0,
  PowerManagerInternalProto_Wakefulness_WAKEFULNESS_AWAKE = 1,
  PowerManagerInternalProto_Wakefulness_WAKEFULNESS_DREAMING = 2,
  PowerManagerInternalProto_Wakefulness_WAKEFULNESS_DOZING = 3
};
bool PowerManagerInternalProto_Wakefulness_IsValid(int value);
constexpr PowerManagerInternalProto_Wakefulness PowerManagerInternalProto_Wakefulness_Wakefulness_MIN = PowerManagerInternalProto_Wakefulness_WAKEFULNESS_ASLEEP;
constexpr PowerManagerInternalProto_Wakefulness PowerManagerInternalProto_Wakefulness_Wakefulness_MAX = PowerManagerInternalProto_Wakefulness_WAKEFULNESS_DOZING;
constexpr int PowerManagerInternalProto_Wakefulness_Wakefulness_ARRAYSIZE = PowerManagerInternalProto_Wakefulness_Wakefulness_MAX + 1;

const std::string& PowerManagerInternalProto_Wakefulness_Name(PowerManagerInternalProto_Wakefulness value);
template<typename T>
inline const std::string& PowerManagerInternalProto_Wakefulness_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerManagerInternalProto_Wakefulness>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerManagerInternalProto_Wakefulness_Name.");
  return PowerManagerInternalProto_Wakefulness_Name(static_cast<PowerManagerInternalProto_Wakefulness>(enum_t_value));
}
bool PowerManagerInternalProto_Wakefulness_Parse(
    const std::string& name, PowerManagerInternalProto_Wakefulness* value);
// ===================================================================

class PowerManagerProto_WakeLock :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.PowerManagerProto.WakeLock) */ {
 public:
  PowerManagerProto_WakeLock();
  virtual ~PowerManagerProto_WakeLock();

  PowerManagerProto_WakeLock(const PowerManagerProto_WakeLock& from);
  PowerManagerProto_WakeLock(PowerManagerProto_WakeLock&& from) noexcept
    : PowerManagerProto_WakeLock() {
    *this = ::std::move(from);
  }

  inline PowerManagerProto_WakeLock& operator=(const PowerManagerProto_WakeLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerManagerProto_WakeLock& operator=(PowerManagerProto_WakeLock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerManagerProto_WakeLock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerManagerProto_WakeLock* internal_default_instance() {
    return reinterpret_cast<const PowerManagerProto_WakeLock*>(
               &_PowerManagerProto_WakeLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PowerManagerProto_WakeLock& a, PowerManagerProto_WakeLock& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerManagerProto_WakeLock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerManagerProto_WakeLock* New() const final {
    return CreateMaybeMessage<PowerManagerProto_WakeLock>(nullptr);
  }

  PowerManagerProto_WakeLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerManagerProto_WakeLock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerManagerProto_WakeLock& from);
  void MergeFrom(const PowerManagerProto_WakeLock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerManagerProto_WakeLock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.PowerManagerProto.WakeLock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kPackageNameFieldNumber = 2,
    kWorkSourceFieldNumber = 5,
    kHeldFieldNumber = 3,
    kInternalCountFieldNumber = 4,
  };
  // optional string tag = 1;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional string package_name = 2;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional .android.os.WorkSourceProto work_source = 5;
  bool has_work_source() const;
  void clear_work_source();
  const ::android::os::WorkSourceProto& work_source() const;
  ::android::os::WorkSourceProto* release_work_source();
  ::android::os::WorkSourceProto* mutable_work_source();
  void set_allocated_work_source(::android::os::WorkSourceProto* work_source);

  // optional bool held = 3;
  bool has_held() const;
  void clear_held();
  bool held() const;
  void set_held(bool value);

  // optional int32 internal_count = 4;
  bool has_internal_count() const;
  void clear_internal_count();
  ::PROTOBUF_NAMESPACE_ID::int32 internal_count() const;
  void set_internal_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.PowerManagerProto.WakeLock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::android::os::WorkSourceProto* work_source_;
  bool held_;
  ::PROTOBUF_NAMESPACE_ID::int32 internal_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto;
};
// -------------------------------------------------------------------

class PowerManagerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.PowerManagerProto) */ {
 public:
  PowerManagerProto();
  virtual ~PowerManagerProto();

  PowerManagerProto(const PowerManagerProto& from);
  PowerManagerProto(PowerManagerProto&& from) noexcept
    : PowerManagerProto() {
    *this = ::std::move(from);
  }

  inline PowerManagerProto& operator=(const PowerManagerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerManagerProto& operator=(PowerManagerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerManagerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerManagerProto* internal_default_instance() {
    return reinterpret_cast<const PowerManagerProto*>(
               &_PowerManagerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PowerManagerProto& a, PowerManagerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerManagerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerManagerProto* New() const final {
    return CreateMaybeMessage<PowerManagerProto>(nullptr);
  }

  PowerManagerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerManagerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerManagerProto& from);
  void MergeFrom(const PowerManagerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerManagerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.PowerManagerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PowerManagerProto_WakeLock WakeLock;

  typedef PowerManagerProto_UserActivityEvent UserActivityEvent;
  static constexpr UserActivityEvent USER_ACTIVITY_EVENT_OTHER =
    PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_OTHER;
  static constexpr UserActivityEvent USER_ACTIVITY_EVENT_BUTTON =
    PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_BUTTON;
  static constexpr UserActivityEvent USER_ACTIVITY_EVENT_TOUCH =
    PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_TOUCH;
  static constexpr UserActivityEvent USER_ACTIVITY_EVENT_ACCESSIBILITY =
    PowerManagerProto_UserActivityEvent_USER_ACTIVITY_EVENT_ACCESSIBILITY;
  static inline bool UserActivityEvent_IsValid(int value) {
    return PowerManagerProto_UserActivityEvent_IsValid(value);
  }
  static constexpr UserActivityEvent UserActivityEvent_MIN =
    PowerManagerProto_UserActivityEvent_UserActivityEvent_MIN;
  static constexpr UserActivityEvent UserActivityEvent_MAX =
    PowerManagerProto_UserActivityEvent_UserActivityEvent_MAX;
  static constexpr int UserActivityEvent_ARRAYSIZE =
    PowerManagerProto_UserActivityEvent_UserActivityEvent_ARRAYSIZE;
  template<typename T>
  static inline const std::string& UserActivityEvent_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UserActivityEvent>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UserActivityEvent_Name.");
    return PowerManagerProto_UserActivityEvent_Name(enum_t_value);
  }
  static inline bool UserActivityEvent_Parse(const std::string& name,
      UserActivityEvent* value) {
    return PowerManagerProto_UserActivityEvent_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:android.os.PowerManagerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto;
};
// -------------------------------------------------------------------

class PowerManagerInternalProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.PowerManagerInternalProto) */ {
 public:
  PowerManagerInternalProto();
  virtual ~PowerManagerInternalProto();

  PowerManagerInternalProto(const PowerManagerInternalProto& from);
  PowerManagerInternalProto(PowerManagerInternalProto&& from) noexcept
    : PowerManagerInternalProto() {
    *this = ::std::move(from);
  }

  inline PowerManagerInternalProto& operator=(const PowerManagerInternalProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerManagerInternalProto& operator=(PowerManagerInternalProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerManagerInternalProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerManagerInternalProto* internal_default_instance() {
    return reinterpret_cast<const PowerManagerInternalProto*>(
               &_PowerManagerInternalProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PowerManagerInternalProto& a, PowerManagerInternalProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerManagerInternalProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerManagerInternalProto* New() const final {
    return CreateMaybeMessage<PowerManagerInternalProto>(nullptr);
  }

  PowerManagerInternalProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerManagerInternalProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerManagerInternalProto& from);
  void MergeFrom(const PowerManagerInternalProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerManagerInternalProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.PowerManagerInternalProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PowerManagerInternalProto_Wakefulness Wakefulness;
  static constexpr Wakefulness WAKEFULNESS_ASLEEP =
    PowerManagerInternalProto_Wakefulness_WAKEFULNESS_ASLEEP;
  static constexpr Wakefulness WAKEFULNESS_AWAKE =
    PowerManagerInternalProto_Wakefulness_WAKEFULNESS_AWAKE;
  static constexpr Wakefulness WAKEFULNESS_DREAMING =
    PowerManagerInternalProto_Wakefulness_WAKEFULNESS_DREAMING;
  static constexpr Wakefulness WAKEFULNESS_DOZING =
    PowerManagerInternalProto_Wakefulness_WAKEFULNESS_DOZING;
  static inline bool Wakefulness_IsValid(int value) {
    return PowerManagerInternalProto_Wakefulness_IsValid(value);
  }
  static constexpr Wakefulness Wakefulness_MIN =
    PowerManagerInternalProto_Wakefulness_Wakefulness_MIN;
  static constexpr Wakefulness Wakefulness_MAX =
    PowerManagerInternalProto_Wakefulness_Wakefulness_MAX;
  static constexpr int Wakefulness_ARRAYSIZE =
    PowerManagerInternalProto_Wakefulness_Wakefulness_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Wakefulness_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Wakefulness>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Wakefulness_Name.");
    return PowerManagerInternalProto_Wakefulness_Name(enum_t_value);
  }
  static inline bool Wakefulness_Parse(const std::string& name,
      Wakefulness* value) {
    return PowerManagerInternalProto_Wakefulness_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:android.os.PowerManagerInternalProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PowerManagerProto_WakeLock

// optional string tag = 1;
inline bool PowerManagerProto_WakeLock::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerManagerProto_WakeLock::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PowerManagerProto_WakeLock::tag() const {
  // @@protoc_insertion_point(field_get:android.os.PowerManagerProto.WakeLock.tag)
  return tag_.GetNoArena();
}
inline void PowerManagerProto_WakeLock::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PowerManagerProto.WakeLock.tag)
}
inline void PowerManagerProto_WakeLock::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PowerManagerProto.WakeLock.tag)
}
inline void PowerManagerProto_WakeLock::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PowerManagerProto.WakeLock.tag)
}
inline void PowerManagerProto_WakeLock::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PowerManagerProto.WakeLock.tag)
}
inline std::string* PowerManagerProto_WakeLock::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.PowerManagerProto.WakeLock.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PowerManagerProto_WakeLock::release_tag() {
  // @@protoc_insertion_point(field_release:android.os.PowerManagerProto.WakeLock.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PowerManagerProto_WakeLock::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:android.os.PowerManagerProto.WakeLock.tag)
}

// optional string package_name = 2;
inline bool PowerManagerProto_WakeLock::has_package_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerManagerProto_WakeLock::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PowerManagerProto_WakeLock::package_name() const {
  // @@protoc_insertion_point(field_get:android.os.PowerManagerProto.WakeLock.package_name)
  return package_name_.GetNoArena();
}
inline void PowerManagerProto_WakeLock::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.PowerManagerProto.WakeLock.package_name)
}
inline void PowerManagerProto_WakeLock::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.PowerManagerProto.WakeLock.package_name)
}
inline void PowerManagerProto_WakeLock::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.PowerManagerProto.WakeLock.package_name)
}
inline void PowerManagerProto_WakeLock::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.PowerManagerProto.WakeLock.package_name)
}
inline std::string* PowerManagerProto_WakeLock::mutable_package_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.os.PowerManagerProto.WakeLock.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PowerManagerProto_WakeLock::release_package_name() {
  // @@protoc_insertion_point(field_release:android.os.PowerManagerProto.WakeLock.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PowerManagerProto_WakeLock::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.os.PowerManagerProto.WakeLock.package_name)
}

// optional bool held = 3;
inline bool PowerManagerProto_WakeLock::has_held() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PowerManagerProto_WakeLock::clear_held() {
  held_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PowerManagerProto_WakeLock::held() const {
  // @@protoc_insertion_point(field_get:android.os.PowerManagerProto.WakeLock.held)
  return held_;
}
inline void PowerManagerProto_WakeLock::set_held(bool value) {
  _has_bits_[0] |= 0x00000008u;
  held_ = value;
  // @@protoc_insertion_point(field_set:android.os.PowerManagerProto.WakeLock.held)
}

// optional int32 internal_count = 4;
inline bool PowerManagerProto_WakeLock::has_internal_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PowerManagerProto_WakeLock::clear_internal_count() {
  internal_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerProto_WakeLock::internal_count() const {
  // @@protoc_insertion_point(field_get:android.os.PowerManagerProto.WakeLock.internal_count)
  return internal_count_;
}
inline void PowerManagerProto_WakeLock::set_internal_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  internal_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.PowerManagerProto.WakeLock.internal_count)
}

// optional .android.os.WorkSourceProto work_source = 5;
inline bool PowerManagerProto_WakeLock::has_work_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::os::WorkSourceProto& PowerManagerProto_WakeLock::work_source() const {
  const ::android::os::WorkSourceProto* p = work_source_;
  // @@protoc_insertion_point(field_get:android.os.PowerManagerProto.WakeLock.work_source)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::WorkSourceProto*>(
      &::android::os::_WorkSourceProto_default_instance_);
}
inline ::android::os::WorkSourceProto* PowerManagerProto_WakeLock::release_work_source() {
  // @@protoc_insertion_point(field_release:android.os.PowerManagerProto.WakeLock.work_source)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::WorkSourceProto* temp = work_source_;
  work_source_ = nullptr;
  return temp;
}
inline ::android::os::WorkSourceProto* PowerManagerProto_WakeLock::mutable_work_source() {
  _has_bits_[0] |= 0x00000004u;
  if (work_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::WorkSourceProto>(GetArenaNoVirtual());
    work_source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.PowerManagerProto.WakeLock.work_source)
  return work_source_;
}
inline void PowerManagerProto_WakeLock::set_allocated_work_source(::android::os::WorkSourceProto* work_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_source_);
  }
  if (work_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      work_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  work_source_ = work_source;
  // @@protoc_insertion_point(field_set_allocated:android.os.PowerManagerProto.WakeLock.work_source)
}

// -------------------------------------------------------------------

// PowerManagerProto

// -------------------------------------------------------------------

// PowerManagerInternalProto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::os::PowerManagerProto_UserActivityEvent> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::PowerManagerInternalProto_Wakefulness> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto
