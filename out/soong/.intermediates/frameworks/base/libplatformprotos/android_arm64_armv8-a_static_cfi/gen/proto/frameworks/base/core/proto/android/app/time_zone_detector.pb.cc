// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/time_zone_detector.proto

#include "frameworks/base/core/proto/android/app/time_zone_detector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace app {
namespace time {
class GeolocationTimeZoneSuggestionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeolocationTimeZoneSuggestionProto> _instance;
} _GeolocationTimeZoneSuggestionProto_default_instance_;
class MetricsTimeZoneSuggestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricsTimeZoneSuggestion> _instance;
} _MetricsTimeZoneSuggestion_default_instance_;
}  // namespace time
}  // namespace app
}  // namespace android
static void InitDefaultsscc_info_GeolocationTimeZoneSuggestionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::app::time::_GeolocationTimeZoneSuggestionProto_default_instance_;
    new (ptr) ::android::app::time::GeolocationTimeZoneSuggestionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::app::time::GeolocationTimeZoneSuggestionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeolocationTimeZoneSuggestionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeolocationTimeZoneSuggestionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto}, {}};

static void InitDefaultsscc_info_MetricsTimeZoneSuggestion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::app::time::_MetricsTimeZoneSuggestion_default_instance_;
    new (ptr) ::android::app::time::MetricsTimeZoneSuggestion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::app::time::MetricsTimeZoneSuggestion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricsTimeZoneSuggestion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MetricsTimeZoneSuggestion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto}, {}};

namespace android {
namespace app {
namespace time {
bool MetricsTimeZoneSuggestion_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MetricsTimeZoneSuggestion_Type_strings[2] = {};

static const char MetricsTimeZoneSuggestion_Type_names[] =
  "CERTAIN"
  "UNCERTAIN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MetricsTimeZoneSuggestion_Type_entries[] = {
  { {MetricsTimeZoneSuggestion_Type_names + 0, 7}, 1 },
  { {MetricsTimeZoneSuggestion_Type_names + 7, 9}, 2 },
};

static const int MetricsTimeZoneSuggestion_Type_entries_by_number[] = {
  0, // 1 -> CERTAIN
  1, // 2 -> UNCERTAIN
};

const std::string& MetricsTimeZoneSuggestion_Type_Name(
    MetricsTimeZoneSuggestion_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MetricsTimeZoneSuggestion_Type_entries,
          MetricsTimeZoneSuggestion_Type_entries_by_number,
          2, MetricsTimeZoneSuggestion_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MetricsTimeZoneSuggestion_Type_entries,
      MetricsTimeZoneSuggestion_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MetricsTimeZoneSuggestion_Type_strings[idx].get();
}
bool MetricsTimeZoneSuggestion_Type_Parse(
    const std::string& name, MetricsTimeZoneSuggestion_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MetricsTimeZoneSuggestion_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<MetricsTimeZoneSuggestion_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MetricsTimeZoneSuggestion_Type MetricsTimeZoneSuggestion::CERTAIN;
constexpr MetricsTimeZoneSuggestion_Type MetricsTimeZoneSuggestion::UNCERTAIN;
constexpr MetricsTimeZoneSuggestion_Type MetricsTimeZoneSuggestion::Type_MIN;
constexpr MetricsTimeZoneSuggestion_Type MetricsTimeZoneSuggestion::Type_MAX;
constexpr int MetricsTimeZoneSuggestion::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GeolocationTimeZoneSuggestionProto::InitAsDefaultInstance() {
}
class GeolocationTimeZoneSuggestionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GeolocationTimeZoneSuggestionProto>()._has_bits_);
};

GeolocationTimeZoneSuggestionProto::GeolocationTimeZoneSuggestionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.app.time.GeolocationTimeZoneSuggestionProto)
}
GeolocationTimeZoneSuggestionProto::GeolocationTimeZoneSuggestionProto(const GeolocationTimeZoneSuggestionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      zone_ids_(from.zone_ids_),
      debug_info_(from.debug_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.app.time.GeolocationTimeZoneSuggestionProto)
}

void GeolocationTimeZoneSuggestionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeolocationTimeZoneSuggestionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto.base);
}

GeolocationTimeZoneSuggestionProto::~GeolocationTimeZoneSuggestionProto() {
  // @@protoc_insertion_point(destructor:android.app.time.GeolocationTimeZoneSuggestionProto)
  SharedDtor();
}

void GeolocationTimeZoneSuggestionProto::SharedDtor() {
}

void GeolocationTimeZoneSuggestionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeolocationTimeZoneSuggestionProto& GeolocationTimeZoneSuggestionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeolocationTimeZoneSuggestionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto.base);
  return *internal_default_instance();
}


void GeolocationTimeZoneSuggestionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.app.time.GeolocationTimeZoneSuggestionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zone_ids_.Clear();
  debug_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeolocationTimeZoneSuggestionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string zone_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_zone_ids(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated string debug_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_debug_info(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeolocationTimeZoneSuggestionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.app.time.GeolocationTimeZoneSuggestionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string zone_ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_zone_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string debug_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.app.time.GeolocationTimeZoneSuggestionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.app.time.GeolocationTimeZoneSuggestionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeolocationTimeZoneSuggestionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.app.time.GeolocationTimeZoneSuggestionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string zone_ids = 1;
  for (int i = 0, n = this->zone_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->zone_ids(i), output);
  }

  // repeated string debug_info = 2;
  for (int i = 0, n = this->debug_info_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->debug_info(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.app.time.GeolocationTimeZoneSuggestionProto)
}

size_t GeolocationTimeZoneSuggestionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.app.time.GeolocationTimeZoneSuggestionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string zone_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->zone_ids_size());
  for (int i = 0, n = this->zone_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->zone_ids(i));
  }

  // repeated string debug_info = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->debug_info_size());
  for (int i = 0, n = this->debug_info_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->debug_info(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeolocationTimeZoneSuggestionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GeolocationTimeZoneSuggestionProto*>(
      &from));
}

void GeolocationTimeZoneSuggestionProto::MergeFrom(const GeolocationTimeZoneSuggestionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.app.time.GeolocationTimeZoneSuggestionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zone_ids_.MergeFrom(from.zone_ids_);
  debug_info_.MergeFrom(from.debug_info_);
}

void GeolocationTimeZoneSuggestionProto::CopyFrom(const GeolocationTimeZoneSuggestionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.app.time.GeolocationTimeZoneSuggestionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeolocationTimeZoneSuggestionProto::IsInitialized() const {
  return true;
}

void GeolocationTimeZoneSuggestionProto::InternalSwap(GeolocationTimeZoneSuggestionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  zone_ids_.InternalSwap(CastToBase(&other->zone_ids_));
  debug_info_.InternalSwap(CastToBase(&other->debug_info_));
}

std::string GeolocationTimeZoneSuggestionProto::GetTypeName() const {
  return "android.app.time.GeolocationTimeZoneSuggestionProto";
}


// ===================================================================

void MetricsTimeZoneSuggestion::InitAsDefaultInstance() {
}
class MetricsTimeZoneSuggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricsTimeZoneSuggestion>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MetricsTimeZoneSuggestion::MetricsTimeZoneSuggestion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.app.time.MetricsTimeZoneSuggestion)
}
MetricsTimeZoneSuggestion::MetricsTimeZoneSuggestion(const MetricsTimeZoneSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      time_zone_ordinals_(from.time_zone_ordinals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:android.app.time.MetricsTimeZoneSuggestion)
}

void MetricsTimeZoneSuggestion::SharedCtor() {
  type_ = 1;
}

MetricsTimeZoneSuggestion::~MetricsTimeZoneSuggestion() {
  // @@protoc_insertion_point(destructor:android.app.time.MetricsTimeZoneSuggestion)
  SharedDtor();
}

void MetricsTimeZoneSuggestion::SharedDtor() {
}

void MetricsTimeZoneSuggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricsTimeZoneSuggestion& MetricsTimeZoneSuggestion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricsTimeZoneSuggestion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto.base);
  return *internal_default_instance();
}


void MetricsTimeZoneSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:android.app.time.MetricsTimeZoneSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_zone_ordinals_.Clear();
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricsTimeZoneSuggestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.app.time.MetricsTimeZoneSuggestion.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::time::MetricsTimeZoneSuggestion_Type_IsValid(val))) {
            set_type(static_cast<::android::app::time::MetricsTimeZoneSuggestion_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 time_zone_ordinals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_time_zone_ordinals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_time_zone_ordinals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricsTimeZoneSuggestion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.app.time.MetricsTimeZoneSuggestion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.app.time.MetricsTimeZoneSuggestion.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::time::MetricsTimeZoneSuggestion_Type_IsValid(value)) {
            set_type(static_cast< ::android::app::time::MetricsTimeZoneSuggestion_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 time_zone_ordinals = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_time_zone_ordinals())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_time_zone_ordinals())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.app.time.MetricsTimeZoneSuggestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.app.time.MetricsTimeZoneSuggestion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricsTimeZoneSuggestion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.app.time.MetricsTimeZoneSuggestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.app.time.MetricsTimeZoneSuggestion.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint32 time_zone_ordinals = 2;
  for (int i = 0, n = this->time_zone_ordinals_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      2, this->time_zone_ordinals(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.app.time.MetricsTimeZoneSuggestion)
}

size_t MetricsTimeZoneSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.app.time.MetricsTimeZoneSuggestion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 time_zone_ordinals = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->time_zone_ordinals_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->time_zone_ordinals_size());
    total_size += data_size;
  }

  // optional .android.app.time.MetricsTimeZoneSuggestion.Type type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricsTimeZoneSuggestion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MetricsTimeZoneSuggestion*>(
      &from));
}

void MetricsTimeZoneSuggestion::MergeFrom(const MetricsTimeZoneSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.app.time.MetricsTimeZoneSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_zone_ordinals_.MergeFrom(from.time_zone_ordinals_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void MetricsTimeZoneSuggestion::CopyFrom(const MetricsTimeZoneSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.app.time.MetricsTimeZoneSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsTimeZoneSuggestion::IsInitialized() const {
  return true;
}

void MetricsTimeZoneSuggestion::InternalSwap(MetricsTimeZoneSuggestion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  time_zone_ordinals_.InternalSwap(&other->time_zone_ordinals_);
  swap(type_, other->type_);
}

std::string MetricsTimeZoneSuggestion::GetTypeName() const {
  return "android.app.time.MetricsTimeZoneSuggestion";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace time
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::app::time::GeolocationTimeZoneSuggestionProto* Arena::CreateMaybeMessage< ::android::app::time::GeolocationTimeZoneSuggestionProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::app::time::GeolocationTimeZoneSuggestionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::app::time::MetricsTimeZoneSuggestion* Arena::CreateMaybeMessage< ::android::app::time::MetricsTimeZoneSuggestion >(Arena* arena) {
  return Arena::CreateInternal< ::android::app::time::MetricsTimeZoneSuggestion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
