// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
class MessageProto;
class MessageProtoDefaultTypeInternal;
extern MessageProtoDefaultTypeInternal _MessageProto_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::MessageProto* Arena::CreateMaybeMessage<::android::os::MessageProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

// ===================================================================

class MessageProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.MessageProto) */ {
 public:
  MessageProto();
  virtual ~MessageProto();

  MessageProto(const MessageProto& from);
  MessageProto(MessageProto&& from) noexcept
    : MessageProto() {
    *this = ::std::move(from);
  }

  inline MessageProto& operator=(const MessageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageProto& operator=(MessageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MessageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageProto* internal_default_instance() {
    return reinterpret_cast<const MessageProto*>(
               &_MessageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageProto& a, MessageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageProto* New() const final {
    return CreateMaybeMessage<MessageProto>(nullptr);
  }

  MessageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MessageProto& from);
  void MergeFrom(const MessageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.MessageProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallbackFieldNumber = 2,
    kObjFieldNumber = 6,
    kTargetFieldNumber = 7,
    kWhenFieldNumber = 1,
    kWhatFieldNumber = 3,
    kArg1FieldNumber = 4,
    kArg2FieldNumber = 5,
    kBarrierFieldNumber = 8,
  };
  // optional string callback = 2;
  bool has_callback() const;
  void clear_callback();
  const std::string& callback() const;
  void set_callback(const std::string& value);
  void set_callback(std::string&& value);
  void set_callback(const char* value);
  void set_callback(const char* value, size_t size);
  std::string* mutable_callback();
  std::string* release_callback();
  void set_allocated_callback(std::string* callback);

  // optional string obj = 6 [(.android.privacy) = {
  bool has_obj() const;
  void clear_obj();
  const std::string& obj() const;
  void set_obj(const std::string& value);
  void set_obj(std::string&& value);
  void set_obj(const char* value);
  void set_obj(const char* value, size_t size);
  std::string* mutable_obj();
  std::string* release_obj();
  void set_allocated_obj(std::string* obj);

  // optional string target = 7;
  bool has_target() const;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);

  // optional int64 when = 1;
  bool has_when() const;
  void clear_when();
  ::PROTOBUF_NAMESPACE_ID::int64 when() const;
  void set_when(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 what = 3;
  bool has_what() const;
  void clear_what();
  ::PROTOBUF_NAMESPACE_ID::int32 what() const;
  void set_what(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 arg1 = 4;
  bool has_arg1() const;
  void clear_arg1();
  ::PROTOBUF_NAMESPACE_ID::int32 arg1() const;
  void set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 arg2 = 5;
  bool has_arg2() const;
  void clear_arg2();
  ::PROTOBUF_NAMESPACE_ID::int32 arg2() const;
  void set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 barrier = 8;
  bool has_barrier() const;
  void clear_barrier();
  ::PROTOBUF_NAMESPACE_ID::int32 barrier() const;
  void set_barrier(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.MessageProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callback_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::int64 when_;
  ::PROTOBUF_NAMESPACE_ID::int32 what_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg1_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg2_;
  ::PROTOBUF_NAMESPACE_ID::int32 barrier_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageProto

// optional int64 when = 1;
inline bool MessageProto::has_when() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageProto::clear_when() {
  when_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageProto::when() const {
  // @@protoc_insertion_point(field_get:android.os.MessageProto.when)
  return when_;
}
inline void MessageProto::set_when(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  when_ = value;
  // @@protoc_insertion_point(field_set:android.os.MessageProto.when)
}

// optional string callback = 2;
inline bool MessageProto::has_callback() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageProto::clear_callback() {
  callback_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageProto::callback() const {
  // @@protoc_insertion_point(field_get:android.os.MessageProto.callback)
  return callback_.GetNoArena();
}
inline void MessageProto::set_callback(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  callback_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.MessageProto.callback)
}
inline void MessageProto::set_callback(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  callback_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.MessageProto.callback)
}
inline void MessageProto::set_callback(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  callback_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.MessageProto.callback)
}
inline void MessageProto::set_callback(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  callback_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.MessageProto.callback)
}
inline std::string* MessageProto::mutable_callback() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.MessageProto.callback)
  return callback_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageProto::release_callback() {
  // @@protoc_insertion_point(field_release:android.os.MessageProto.callback)
  if (!has_callback()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return callback_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageProto::set_allocated_callback(std::string* callback) {
  if (callback != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  callback_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callback);
  // @@protoc_insertion_point(field_set_allocated:android.os.MessageProto.callback)
}

// optional int32 what = 3;
inline bool MessageProto::has_what() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageProto::clear_what() {
  what_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageProto::what() const {
  // @@protoc_insertion_point(field_get:android.os.MessageProto.what)
  return what_;
}
inline void MessageProto::set_what(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  what_ = value;
  // @@protoc_insertion_point(field_set:android.os.MessageProto.what)
}

// optional int32 arg1 = 4;
inline bool MessageProto::has_arg1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageProto::clear_arg1() {
  arg1_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageProto::arg1() const {
  // @@protoc_insertion_point(field_get:android.os.MessageProto.arg1)
  return arg1_;
}
inline void MessageProto::set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  arg1_ = value;
  // @@protoc_insertion_point(field_set:android.os.MessageProto.arg1)
}

// optional int32 arg2 = 5;
inline bool MessageProto::has_arg2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageProto::clear_arg2() {
  arg2_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageProto::arg2() const {
  // @@protoc_insertion_point(field_get:android.os.MessageProto.arg2)
  return arg2_;
}
inline void MessageProto::set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  arg2_ = value;
  // @@protoc_insertion_point(field_set:android.os.MessageProto.arg2)
}

// optional string obj = 6 [(.android.privacy) = {
inline bool MessageProto::has_obj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageProto::clear_obj() {
  obj_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MessageProto::obj() const {
  // @@protoc_insertion_point(field_get:android.os.MessageProto.obj)
  return obj_.GetNoArena();
}
inline void MessageProto::set_obj(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.MessageProto.obj)
}
inline void MessageProto::set_obj(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  obj_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.MessageProto.obj)
}
inline void MessageProto::set_obj(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.MessageProto.obj)
}
inline void MessageProto::set_obj(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  obj_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.MessageProto.obj)
}
inline std::string* MessageProto::mutable_obj() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.os.MessageProto.obj)
  return obj_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageProto::release_obj() {
  // @@protoc_insertion_point(field_release:android.os.MessageProto.obj)
  if (!has_obj()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return obj_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageProto::set_allocated_obj(std::string* obj) {
  if (obj != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  obj_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj);
  // @@protoc_insertion_point(field_set_allocated:android.os.MessageProto.obj)
}

// optional string target = 7;
inline bool MessageProto::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageProto::clear_target() {
  target_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MessageProto::target() const {
  // @@protoc_insertion_point(field_get:android.os.MessageProto.target)
  return target_.GetNoArena();
}
inline void MessageProto::set_target(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.MessageProto.target)
}
inline void MessageProto::set_target(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  target_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.MessageProto.target)
}
inline void MessageProto::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.MessageProto.target)
}
inline void MessageProto::set_target(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  target_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.MessageProto.target)
}
inline std::string* MessageProto::mutable_target() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.os.MessageProto.target)
  return target_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageProto::release_target() {
  // @@protoc_insertion_point(field_release:android.os.MessageProto.target)
  if (!has_target()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return target_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageProto::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  target_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:android.os.MessageProto.target)
}

// optional int32 barrier = 8;
inline bool MessageProto::has_barrier() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MessageProto::clear_barrier() {
  barrier_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageProto::barrier() const {
  // @@protoc_insertion_point(field_get:android.os.MessageProto.barrier)
  return barrier_;
}
inline void MessageProto::set_barrier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  barrier_ = value;
  // @@protoc_insertion_point(field_set:android.os.MessageProto.barrier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmessage_2eproto
