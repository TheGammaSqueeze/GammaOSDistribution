// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/cpufreq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpufreq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpufreq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpufreq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpufreq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
class CpuFreqProto;
class CpuFreqProtoDefaultTypeInternal;
extern CpuFreqProtoDefaultTypeInternal _CpuFreqProto_default_instance_;
class CpuFreqProto_Stats;
class CpuFreqProto_StatsDefaultTypeInternal;
extern CpuFreqProto_StatsDefaultTypeInternal _CpuFreqProto_Stats_default_instance_;
class CpuFreqProto_Stats_TimeInState;
class CpuFreqProto_Stats_TimeInStateDefaultTypeInternal;
extern CpuFreqProto_Stats_TimeInStateDefaultTypeInternal _CpuFreqProto_Stats_TimeInState_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::CpuFreqProto* Arena::CreateMaybeMessage<::android::os::CpuFreqProto>(Arena*);
template<> ::android::os::CpuFreqProto_Stats* Arena::CreateMaybeMessage<::android::os::CpuFreqProto_Stats>(Arena*);
template<> ::android::os::CpuFreqProto_Stats_TimeInState* Arena::CreateMaybeMessage<::android::os::CpuFreqProto_Stats_TimeInState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

// ===================================================================

class CpuFreqProto_Stats_TimeInState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.CpuFreqProto.Stats.TimeInState) */ {
 public:
  CpuFreqProto_Stats_TimeInState();
  virtual ~CpuFreqProto_Stats_TimeInState();

  CpuFreqProto_Stats_TimeInState(const CpuFreqProto_Stats_TimeInState& from);
  CpuFreqProto_Stats_TimeInState(CpuFreqProto_Stats_TimeInState&& from) noexcept
    : CpuFreqProto_Stats_TimeInState() {
    *this = ::std::move(from);
  }

  inline CpuFreqProto_Stats_TimeInState& operator=(const CpuFreqProto_Stats_TimeInState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuFreqProto_Stats_TimeInState& operator=(CpuFreqProto_Stats_TimeInState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuFreqProto_Stats_TimeInState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuFreqProto_Stats_TimeInState* internal_default_instance() {
    return reinterpret_cast<const CpuFreqProto_Stats_TimeInState*>(
               &_CpuFreqProto_Stats_TimeInState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CpuFreqProto_Stats_TimeInState& a, CpuFreqProto_Stats_TimeInState& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuFreqProto_Stats_TimeInState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuFreqProto_Stats_TimeInState* New() const final {
    return CreateMaybeMessage<CpuFreqProto_Stats_TimeInState>(nullptr);
  }

  CpuFreqProto_Stats_TimeInState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuFreqProto_Stats_TimeInState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuFreqProto_Stats_TimeInState& from);
  void MergeFrom(const CpuFreqProto_Stats_TimeInState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuFreqProto_Stats_TimeInState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.CpuFreqProto.Stats.TimeInState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeJiffyFieldNumber = 2,
    kStateKhzFieldNumber = 1,
  };
  // optional int64 time_jiffy = 2;
  bool has_time_jiffy() const;
  void clear_time_jiffy();
  ::PROTOBUF_NAMESPACE_ID::int64 time_jiffy() const;
  void set_time_jiffy(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 state_khz = 1;
  bool has_state_khz() const;
  void clear_state_khz();
  ::PROTOBUF_NAMESPACE_ID::int32 state_khz() const;
  void set_state_khz(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.CpuFreqProto.Stats.TimeInState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_jiffy_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_khz_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpufreq_2eproto;
};
// -------------------------------------------------------------------

class CpuFreqProto_Stats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.CpuFreqProto.Stats) */ {
 public:
  CpuFreqProto_Stats();
  virtual ~CpuFreqProto_Stats();

  CpuFreqProto_Stats(const CpuFreqProto_Stats& from);
  CpuFreqProto_Stats(CpuFreqProto_Stats&& from) noexcept
    : CpuFreqProto_Stats() {
    *this = ::std::move(from);
  }

  inline CpuFreqProto_Stats& operator=(const CpuFreqProto_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuFreqProto_Stats& operator=(CpuFreqProto_Stats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuFreqProto_Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuFreqProto_Stats* internal_default_instance() {
    return reinterpret_cast<const CpuFreqProto_Stats*>(
               &_CpuFreqProto_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CpuFreqProto_Stats& a, CpuFreqProto_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuFreqProto_Stats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuFreqProto_Stats* New() const final {
    return CreateMaybeMessage<CpuFreqProto_Stats>(nullptr);
  }

  CpuFreqProto_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuFreqProto_Stats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuFreqProto_Stats& from);
  void MergeFrom(const CpuFreqProto_Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuFreqProto_Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.CpuFreqProto.Stats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CpuFreqProto_Stats_TimeInState TimeInState;

  // accessors -------------------------------------------------------

  enum : int {
    kTimesFieldNumber = 2,
    kCpuNameFieldNumber = 1,
  };
  // repeated .android.os.CpuFreqProto.Stats.TimeInState times = 2;
  int times_size() const;
  void clear_times();
  ::android::os::CpuFreqProto_Stats_TimeInState* mutable_times(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats_TimeInState >*
      mutable_times();
  const ::android::os::CpuFreqProto_Stats_TimeInState& times(int index) const;
  ::android::os::CpuFreqProto_Stats_TimeInState* add_times();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats_TimeInState >&
      times() const;

  // optional string cpu_name = 1;
  bool has_cpu_name() const;
  void clear_cpu_name();
  const std::string& cpu_name() const;
  void set_cpu_name(const std::string& value);
  void set_cpu_name(std::string&& value);
  void set_cpu_name(const char* value);
  void set_cpu_name(const char* value, size_t size);
  std::string* mutable_cpu_name();
  std::string* release_cpu_name();
  void set_allocated_cpu_name(std::string* cpu_name);

  // @@protoc_insertion_point(class_scope:android.os.CpuFreqProto.Stats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats_TimeInState > times_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpufreq_2eproto;
};
// -------------------------------------------------------------------

class CpuFreqProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.CpuFreqProto) */ {
 public:
  CpuFreqProto();
  virtual ~CpuFreqProto();

  CpuFreqProto(const CpuFreqProto& from);
  CpuFreqProto(CpuFreqProto&& from) noexcept
    : CpuFreqProto() {
    *this = ::std::move(from);
  }

  inline CpuFreqProto& operator=(const CpuFreqProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuFreqProto& operator=(CpuFreqProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CpuFreqProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuFreqProto* internal_default_instance() {
    return reinterpret_cast<const CpuFreqProto*>(
               &_CpuFreqProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CpuFreqProto& a, CpuFreqProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuFreqProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuFreqProto* New() const final {
    return CreateMaybeMessage<CpuFreqProto>(nullptr);
  }

  CpuFreqProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuFreqProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CpuFreqProto& from);
  void MergeFrom(const CpuFreqProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CpuFreqProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.CpuFreqProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CpuFreqProto_Stats Stats;

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFreqsFieldNumber = 2,
    kJiffyHzFieldNumber = 1,
  };
  // repeated .android.os.CpuFreqProto.Stats cpu_freqs = 2;
  int cpu_freqs_size() const;
  void clear_cpu_freqs();
  ::android::os::CpuFreqProto_Stats* mutable_cpu_freqs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats >*
      mutable_cpu_freqs();
  const ::android::os::CpuFreqProto_Stats& cpu_freqs(int index) const;
  ::android::os::CpuFreqProto_Stats* add_cpu_freqs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats >&
      cpu_freqs() const;

  // optional int32 jiffy_hz = 1;
  bool has_jiffy_hz() const;
  void clear_jiffy_hz();
  ::PROTOBUF_NAMESPACE_ID::int32 jiffy_hz() const;
  void set_jiffy_hz(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.CpuFreqProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats > cpu_freqs_;
  ::PROTOBUF_NAMESPACE_ID::int32 jiffy_hz_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpufreq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CpuFreqProto_Stats_TimeInState

// optional int32 state_khz = 1;
inline bool CpuFreqProto_Stats_TimeInState::has_state_khz() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CpuFreqProto_Stats_TimeInState::clear_state_khz() {
  state_khz_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuFreqProto_Stats_TimeInState::state_khz() const {
  // @@protoc_insertion_point(field_get:android.os.CpuFreqProto.Stats.TimeInState.state_khz)
  return state_khz_;
}
inline void CpuFreqProto_Stats_TimeInState::set_state_khz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  state_khz_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuFreqProto.Stats.TimeInState.state_khz)
}

// optional int64 time_jiffy = 2;
inline bool CpuFreqProto_Stats_TimeInState::has_time_jiffy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuFreqProto_Stats_TimeInState::clear_time_jiffy() {
  time_jiffy_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CpuFreqProto_Stats_TimeInState::time_jiffy() const {
  // @@protoc_insertion_point(field_get:android.os.CpuFreqProto.Stats.TimeInState.time_jiffy)
  return time_jiffy_;
}
inline void CpuFreqProto_Stats_TimeInState::set_time_jiffy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_jiffy_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuFreqProto.Stats.TimeInState.time_jiffy)
}

// -------------------------------------------------------------------

// CpuFreqProto_Stats

// optional string cpu_name = 1;
inline bool CpuFreqProto_Stats::has_cpu_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuFreqProto_Stats::clear_cpu_name() {
  cpu_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CpuFreqProto_Stats::cpu_name() const {
  // @@protoc_insertion_point(field_get:android.os.CpuFreqProto.Stats.cpu_name)
  return cpu_name_.GetNoArena();
}
inline void CpuFreqProto_Stats::set_cpu_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.CpuFreqProto.Stats.cpu_name)
}
inline void CpuFreqProto_Stats::set_cpu_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.CpuFreqProto.Stats.cpu_name)
}
inline void CpuFreqProto_Stats::set_cpu_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cpu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.CpuFreqProto.Stats.cpu_name)
}
inline void CpuFreqProto_Stats::set_cpu_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cpu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.CpuFreqProto.Stats.cpu_name)
}
inline std::string* CpuFreqProto_Stats::mutable_cpu_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.CpuFreqProto.Stats.cpu_name)
  return cpu_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CpuFreqProto_Stats::release_cpu_name() {
  // @@protoc_insertion_point(field_release:android.os.CpuFreqProto.Stats.cpu_name)
  if (!has_cpu_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cpu_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CpuFreqProto_Stats::set_allocated_cpu_name(std::string* cpu_name) {
  if (cpu_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cpu_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu_name);
  // @@protoc_insertion_point(field_set_allocated:android.os.CpuFreqProto.Stats.cpu_name)
}

// repeated .android.os.CpuFreqProto.Stats.TimeInState times = 2;
inline int CpuFreqProto_Stats::times_size() const {
  return times_.size();
}
inline void CpuFreqProto_Stats::clear_times() {
  times_.Clear();
}
inline ::android::os::CpuFreqProto_Stats_TimeInState* CpuFreqProto_Stats::mutable_times(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.CpuFreqProto.Stats.times)
  return times_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats_TimeInState >*
CpuFreqProto_Stats::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:android.os.CpuFreqProto.Stats.times)
  return &times_;
}
inline const ::android::os::CpuFreqProto_Stats_TimeInState& CpuFreqProto_Stats::times(int index) const {
  // @@protoc_insertion_point(field_get:android.os.CpuFreqProto.Stats.times)
  return times_.Get(index);
}
inline ::android::os::CpuFreqProto_Stats_TimeInState* CpuFreqProto_Stats::add_times() {
  // @@protoc_insertion_point(field_add:android.os.CpuFreqProto.Stats.times)
  return times_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats_TimeInState >&
CpuFreqProto_Stats::times() const {
  // @@protoc_insertion_point(field_list:android.os.CpuFreqProto.Stats.times)
  return times_;
}

// -------------------------------------------------------------------

// CpuFreqProto

// optional int32 jiffy_hz = 1;
inline bool CpuFreqProto::has_jiffy_hz() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CpuFreqProto::clear_jiffy_hz() {
  jiffy_hz_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuFreqProto::jiffy_hz() const {
  // @@protoc_insertion_point(field_get:android.os.CpuFreqProto.jiffy_hz)
  return jiffy_hz_;
}
inline void CpuFreqProto::set_jiffy_hz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  jiffy_hz_ = value;
  // @@protoc_insertion_point(field_set:android.os.CpuFreqProto.jiffy_hz)
}

// repeated .android.os.CpuFreqProto.Stats cpu_freqs = 2;
inline int CpuFreqProto::cpu_freqs_size() const {
  return cpu_freqs_.size();
}
inline void CpuFreqProto::clear_cpu_freqs() {
  cpu_freqs_.Clear();
}
inline ::android::os::CpuFreqProto_Stats* CpuFreqProto::mutable_cpu_freqs(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.CpuFreqProto.cpu_freqs)
  return cpu_freqs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats >*
CpuFreqProto::mutable_cpu_freqs() {
  // @@protoc_insertion_point(field_mutable_list:android.os.CpuFreqProto.cpu_freqs)
  return &cpu_freqs_;
}
inline const ::android::os::CpuFreqProto_Stats& CpuFreqProto::cpu_freqs(int index) const {
  // @@protoc_insertion_point(field_get:android.os.CpuFreqProto.cpu_freqs)
  return cpu_freqs_.Get(index);
}
inline ::android::os::CpuFreqProto_Stats* CpuFreqProto::add_cpu_freqs() {
  // @@protoc_insertion_point(field_add:android.os.CpuFreqProto.cpu_freqs)
  return cpu_freqs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::CpuFreqProto_Stats >&
CpuFreqProto::cpu_freqs() const {
  // @@protoc_insertion_point(field_list:android.os.CpuFreqProto.cpu_freqs)
  return cpu_freqs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpufreq_2eproto
