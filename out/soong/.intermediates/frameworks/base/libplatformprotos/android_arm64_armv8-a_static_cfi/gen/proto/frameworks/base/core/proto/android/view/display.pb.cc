// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/view/display.proto

#include "frameworks/base/core/proto/android/view/display.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace view {
class DisplayProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayProto> _instance;
} _DisplayProto_default_instance_;
}  // namespace view
}  // namespace android
static void InitDefaultsscc_info_DisplayProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fdisplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::view::_DisplayProto_default_instance_;
    new (ptr) ::android::view::DisplayProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::view::DisplayProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fdisplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DisplayProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fdisplay_2eproto}, {}};

namespace android {
namespace view {
bool DisplayProto_ColorMode_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DisplayProto_ColorMode_strings[11] = {};

static const char DisplayProto_ColorMode_names[] =
  "COLOR_MODE_ADOBE_RGB"
  "COLOR_MODE_BT601_525"
  "COLOR_MODE_BT601_525_UNADJUSTED"
  "COLOR_MODE_BT601_625"
  "COLOR_MODE_BT601_625_UNADJUSTED"
  "COLOR_MODE_BT709"
  "COLOR_MODE_DCI_P3"
  "COLOR_MODE_DEFAULT"
  "COLOR_MODE_DISPLAY_P3"
  "COLOR_MODE_INVALID"
  "COLOR_MODE_SRGB";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DisplayProto_ColorMode_entries[] = {
  { {DisplayProto_ColorMode_names + 0, 20}, 8 },
  { {DisplayProto_ColorMode_names + 20, 20}, 3 },
  { {DisplayProto_ColorMode_names + 40, 31}, 4 },
  { {DisplayProto_ColorMode_names + 71, 20}, 1 },
  { {DisplayProto_ColorMode_names + 91, 31}, 2 },
  { {DisplayProto_ColorMode_names + 122, 16}, 5 },
  { {DisplayProto_ColorMode_names + 138, 17}, 6 },
  { {DisplayProto_ColorMode_names + 155, 18}, 0 },
  { {DisplayProto_ColorMode_names + 173, 21}, 9 },
  { {DisplayProto_ColorMode_names + 194, 18}, -1 },
  { {DisplayProto_ColorMode_names + 212, 15}, 7 },
};

static const int DisplayProto_ColorMode_entries_by_number[] = {
  9, // -1 -> COLOR_MODE_INVALID
  7, // 0 -> COLOR_MODE_DEFAULT
  3, // 1 -> COLOR_MODE_BT601_625
  4, // 2 -> COLOR_MODE_BT601_625_UNADJUSTED
  1, // 3 -> COLOR_MODE_BT601_525
  2, // 4 -> COLOR_MODE_BT601_525_UNADJUSTED
  5, // 5 -> COLOR_MODE_BT709
  6, // 6 -> COLOR_MODE_DCI_P3
  10, // 7 -> COLOR_MODE_SRGB
  0, // 8 -> COLOR_MODE_ADOBE_RGB
  8, // 9 -> COLOR_MODE_DISPLAY_P3
};

const std::string& DisplayProto_ColorMode_Name(
    DisplayProto_ColorMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DisplayProto_ColorMode_entries,
          DisplayProto_ColorMode_entries_by_number,
          11, DisplayProto_ColorMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DisplayProto_ColorMode_entries,
      DisplayProto_ColorMode_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DisplayProto_ColorMode_strings[idx].get();
}
bool DisplayProto_ColorMode_Parse(
    const std::string& name, DisplayProto_ColorMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DisplayProto_ColorMode_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<DisplayProto_ColorMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_INVALID;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_DEFAULT;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_BT601_625;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_BT601_625_UNADJUSTED;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_BT601_525;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_BT601_525_UNADJUSTED;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_BT709;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_DCI_P3;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_SRGB;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_ADOBE_RGB;
constexpr DisplayProto_ColorMode DisplayProto::COLOR_MODE_DISPLAY_P3;
constexpr DisplayProto_ColorMode DisplayProto::ColorMode_MIN;
constexpr DisplayProto_ColorMode DisplayProto::ColorMode_MAX;
constexpr int DisplayProto::ColorMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DisplayProto::InitAsDefaultInstance() {
}
class DisplayProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayProto>()._has_bits_);
};

DisplayProto::DisplayProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.view.DisplayProto)
}
DisplayProto::DisplayProto(const DisplayProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.view.DisplayProto)
}

void DisplayProto::SharedCtor() {
}

DisplayProto::~DisplayProto() {
  // @@protoc_insertion_point(destructor:android.view.DisplayProto)
  SharedDtor();
}

void DisplayProto::SharedDtor() {
}

void DisplayProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayProto& DisplayProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fdisplay_2eproto.base);
  return *internal_default_instance();
}


void DisplayProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.view.DisplayProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisplayProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisplayProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.view.DisplayProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:android.view.DisplayProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.view.DisplayProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisplayProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.view.DisplayProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.view.DisplayProto)
}

size_t DisplayProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.view.DisplayProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DisplayProto*>(
      &from));
}

void DisplayProto::MergeFrom(const DisplayProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.view.DisplayProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisplayProto::CopyFrom(const DisplayProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.view.DisplayProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayProto::IsInitialized() const {
  return true;
}

void DisplayProto::InternalSwap(DisplayProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string DisplayProto::GetTypeName() const {
  return "android.view.DisplayProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace view
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::view::DisplayProto* Arena::CreateMaybeMessage< ::android::view::DisplayProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::view::DisplayProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
