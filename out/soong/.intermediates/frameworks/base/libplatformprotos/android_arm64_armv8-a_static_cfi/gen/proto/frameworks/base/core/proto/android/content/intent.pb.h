// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/content/intent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/content/component_name.pb.h"
#include "frameworks/base/core/proto/android/os/patternmatcher.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace content {
class AuthorityEntryProto;
class AuthorityEntryProtoDefaultTypeInternal;
extern AuthorityEntryProtoDefaultTypeInternal _AuthorityEntryProto_default_instance_;
class IntentFilterProto;
class IntentFilterProtoDefaultTypeInternal;
extern IntentFilterProtoDefaultTypeInternal _IntentFilterProto_default_instance_;
class IntentProto;
class IntentProtoDefaultTypeInternal;
extern IntentProtoDefaultTypeInternal _IntentProto_default_instance_;
}  // namespace content
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::content::AuthorityEntryProto* Arena::CreateMaybeMessage<::android::content::AuthorityEntryProto>(Arena*);
template<> ::android::content::IntentFilterProto* Arena::CreateMaybeMessage<::android::content::IntentFilterProto>(Arena*);
template<> ::android::content::IntentProto* Arena::CreateMaybeMessage<::android::content::IntentProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace content {

enum IntentProto_DockState : int {
  IntentProto_DockState_DOCK_STATE_UNDOCKED = 0,
  IntentProto_DockState_DOCK_STATE_DESK = 1,
  IntentProto_DockState_DOCK_STATE_CAR = 2,
  IntentProto_DockState_DOCK_STATE_LE_DESK = 3,
  IntentProto_DockState_DOCK_STATE_HE_DESK = 4
};
bool IntentProto_DockState_IsValid(int value);
constexpr IntentProto_DockState IntentProto_DockState_DockState_MIN = IntentProto_DockState_DOCK_STATE_UNDOCKED;
constexpr IntentProto_DockState IntentProto_DockState_DockState_MAX = IntentProto_DockState_DOCK_STATE_HE_DESK;
constexpr int IntentProto_DockState_DockState_ARRAYSIZE = IntentProto_DockState_DockState_MAX + 1;

const std::string& IntentProto_DockState_Name(IntentProto_DockState value);
template<typename T>
inline const std::string& IntentProto_DockState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntentProto_DockState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntentProto_DockState_Name.");
  return IntentProto_DockState_Name(static_cast<IntentProto_DockState>(enum_t_value));
}
bool IntentProto_DockState_Parse(
    const std::string& name, IntentProto_DockState* value);
// ===================================================================

class IntentProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.content.IntentProto) */ {
 public:
  IntentProto();
  virtual ~IntentProto();

  IntentProto(const IntentProto& from);
  IntentProto(IntentProto&& from) noexcept
    : IntentProto() {
    *this = ::std::move(from);
  }

  inline IntentProto& operator=(const IntentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntentProto& operator=(IntentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IntentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntentProto* internal_default_instance() {
    return reinterpret_cast<const IntentProto*>(
               &_IntentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntentProto& a, IntentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IntentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntentProto* New() const final {
    return CreateMaybeMessage<IntentProto>(nullptr);
  }

  IntentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntentProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IntentProto& from);
  void MergeFrom(const IntentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.IntentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IntentProto_DockState DockState;
  static constexpr DockState DOCK_STATE_UNDOCKED =
    IntentProto_DockState_DOCK_STATE_UNDOCKED;
  static constexpr DockState DOCK_STATE_DESK =
    IntentProto_DockState_DOCK_STATE_DESK;
  static constexpr DockState DOCK_STATE_CAR =
    IntentProto_DockState_DOCK_STATE_CAR;
  static constexpr DockState DOCK_STATE_LE_DESK =
    IntentProto_DockState_DOCK_STATE_LE_DESK;
  static constexpr DockState DOCK_STATE_HE_DESK =
    IntentProto_DockState_DOCK_STATE_HE_DESK;
  static inline bool DockState_IsValid(int value) {
    return IntentProto_DockState_IsValid(value);
  }
  static constexpr DockState DockState_MIN =
    IntentProto_DockState_DockState_MIN;
  static constexpr DockState DockState_MAX =
    IntentProto_DockState_DockState_MAX;
  static constexpr int DockState_ARRAYSIZE =
    IntentProto_DockState_DockState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DockState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DockState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DockState_Name.");
    return IntentProto_DockState_Name(enum_t_value);
  }
  static inline bool DockState_Parse(const std::string& name,
      DockState* value) {
    return IntentProto_DockState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 2,
    kActionFieldNumber = 1,
    kDataFieldNumber = 3,
    kTypeFieldNumber = 4,
    kFlagFieldNumber = 5,
    kPackageFieldNumber = 6,
    kSourceBoundsFieldNumber = 8,
    kClipDataFieldNumber = 9,
    kExtrasFieldNumber = 10,
    kSelectorFieldNumber = 12,
    kIdentifierFieldNumber = 13,
    kComponentFieldNumber = 7,
    kContentUserHintFieldNumber = 11,
  };
  // repeated string categories = 2;
  int categories_size() const;
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();

  // optional string action = 1;
  bool has_action() const;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);

  // optional string data = 3 [(.android.privacy) = {
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // optional string type = 4;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // optional string flag = 5;
  bool has_flag() const;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const char* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);

  // optional string package = 6;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional string source_bounds = 8;
  bool has_source_bounds() const;
  void clear_source_bounds();
  const std::string& source_bounds() const;
  void set_source_bounds(const std::string& value);
  void set_source_bounds(std::string&& value);
  void set_source_bounds(const char* value);
  void set_source_bounds(const char* value, size_t size);
  std::string* mutable_source_bounds();
  std::string* release_source_bounds();
  void set_allocated_source_bounds(std::string* source_bounds);

  // optional string clip_data = 9 [(.android.privacy) = {
  bool has_clip_data() const;
  void clear_clip_data();
  const std::string& clip_data() const;
  void set_clip_data(const std::string& value);
  void set_clip_data(std::string&& value);
  void set_clip_data(const char* value);
  void set_clip_data(const char* value, size_t size);
  std::string* mutable_clip_data();
  std::string* release_clip_data();
  void set_allocated_clip_data(std::string* clip_data);

  // optional string extras = 10 [(.android.privacy) = {
  bool has_extras() const;
  void clear_extras();
  const std::string& extras() const;
  void set_extras(const std::string& value);
  void set_extras(std::string&& value);
  void set_extras(const char* value);
  void set_extras(const char* value, size_t size);
  std::string* mutable_extras();
  std::string* release_extras();
  void set_allocated_extras(std::string* extras);

  // optional string selector = 12;
  bool has_selector() const;
  void clear_selector();
  const std::string& selector() const;
  void set_selector(const std::string& value);
  void set_selector(std::string&& value);
  void set_selector(const char* value);
  void set_selector(const char* value, size_t size);
  std::string* mutable_selector();
  std::string* release_selector();
  void set_allocated_selector(std::string* selector);

  // optional string identifier = 13 [(.android.privacy) = {
  bool has_identifier() const;
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);

  // optional .android.content.ComponentNameProto component = 7;
  bool has_component() const;
  void clear_component();
  const ::android::content::ComponentNameProto& component() const;
  ::android::content::ComponentNameProto* release_component();
  ::android::content::ComponentNameProto* mutable_component();
  void set_allocated_component(::android::content::ComponentNameProto* component);

  // optional int32 content_user_hint = 11;
  bool has_content_user_hint() const;
  void clear_content_user_hint();
  ::PROTOBUF_NAMESPACE_ID::int32 content_user_hint() const;
  void set_content_user_hint(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.content.IntentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_bounds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clip_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extras_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::android::content::ComponentNameProto* component_;
  ::PROTOBUF_NAMESPACE_ID::int32 content_user_hint_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto;
};
// -------------------------------------------------------------------

class IntentFilterProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.content.IntentFilterProto) */ {
 public:
  IntentFilterProto();
  virtual ~IntentFilterProto();

  IntentFilterProto(const IntentFilterProto& from);
  IntentFilterProto(IntentFilterProto&& from) noexcept
    : IntentFilterProto() {
    *this = ::std::move(from);
  }

  inline IntentFilterProto& operator=(const IntentFilterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntentFilterProto& operator=(IntentFilterProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IntentFilterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntentFilterProto* internal_default_instance() {
    return reinterpret_cast<const IntentFilterProto*>(
               &_IntentFilterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntentFilterProto& a, IntentFilterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IntentFilterProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntentFilterProto* New() const final {
    return CreateMaybeMessage<IntentFilterProto>(nullptr);
  }

  IntentFilterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntentFilterProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IntentFilterProto& from);
  void MergeFrom(const IntentFilterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntentFilterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.IntentFilterProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
    kCategoriesFieldNumber = 2,
    kDataSchemesFieldNumber = 3,
    kDataSchemeSpecsFieldNumber = 4,
    kDataAuthoritiesFieldNumber = 5,
    kDataPathsFieldNumber = 6,
    kDataTypesFieldNumber = 7,
    kMimeGroupsFieldNumber = 11,
    kPriorityFieldNumber = 8,
    kHasPartialTypesFieldNumber = 9,
    kGetAutoVerifyFieldNumber = 10,
  };
  // repeated string actions = 1;
  int actions_size() const;
  void clear_actions();
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  void set_actions(int index, const std::string& value);
  void set_actions(int index, std::string&& value);
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  std::string* add_actions();
  void add_actions(const std::string& value);
  void add_actions(std::string&& value);
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actions();

  // repeated string categories = 2;
  int categories_size() const;
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();

  // repeated string data_schemes = 3 [(.android.privacy) = {
  int data_schemes_size() const;
  void clear_data_schemes();
  const std::string& data_schemes(int index) const;
  std::string* mutable_data_schemes(int index);
  void set_data_schemes(int index, const std::string& value);
  void set_data_schemes(int index, std::string&& value);
  void set_data_schemes(int index, const char* value);
  void set_data_schemes(int index, const char* value, size_t size);
  std::string* add_data_schemes();
  void add_data_schemes(const std::string& value);
  void add_data_schemes(std::string&& value);
  void add_data_schemes(const char* value);
  void add_data_schemes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_schemes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_schemes();

  // repeated .android.os.PatternMatcherProto data_scheme_specs = 4;
  int data_scheme_specs_size() const;
  void clear_data_scheme_specs();
  ::android::os::PatternMatcherProto* mutable_data_scheme_specs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto >*
      mutable_data_scheme_specs();
  const ::android::os::PatternMatcherProto& data_scheme_specs(int index) const;
  ::android::os::PatternMatcherProto* add_data_scheme_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto >&
      data_scheme_specs() const;

  // repeated .android.content.AuthorityEntryProto data_authorities = 5;
  int data_authorities_size() const;
  void clear_data_authorities();
  ::android::content::AuthorityEntryProto* mutable_data_authorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::AuthorityEntryProto >*
      mutable_data_authorities();
  const ::android::content::AuthorityEntryProto& data_authorities(int index) const;
  ::android::content::AuthorityEntryProto* add_data_authorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::AuthorityEntryProto >&
      data_authorities() const;

  // repeated .android.os.PatternMatcherProto data_paths = 6;
  int data_paths_size() const;
  void clear_data_paths();
  ::android::os::PatternMatcherProto* mutable_data_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto >*
      mutable_data_paths();
  const ::android::os::PatternMatcherProto& data_paths(int index) const;
  ::android::os::PatternMatcherProto* add_data_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto >&
      data_paths() const;

  // repeated string data_types = 7;
  int data_types_size() const;
  void clear_data_types();
  const std::string& data_types(int index) const;
  std::string* mutable_data_types(int index);
  void set_data_types(int index, const std::string& value);
  void set_data_types(int index, std::string&& value);
  void set_data_types(int index, const char* value);
  void set_data_types(int index, const char* value, size_t size);
  std::string* add_data_types();
  void add_data_types(const std::string& value);
  void add_data_types(std::string&& value);
  void add_data_types(const char* value);
  void add_data_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_types();

  // repeated string mime_groups = 11;
  int mime_groups_size() const;
  void clear_mime_groups();
  const std::string& mime_groups(int index) const;
  std::string* mutable_mime_groups(int index);
  void set_mime_groups(int index, const std::string& value);
  void set_mime_groups(int index, std::string&& value);
  void set_mime_groups(int index, const char* value);
  void set_mime_groups(int index, const char* value, size_t size);
  std::string* add_mime_groups();
  void add_mime_groups(const std::string& value);
  void add_mime_groups(std::string&& value);
  void add_mime_groups(const char* value);
  void add_mime_groups(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mime_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mime_groups();

  // optional int32 priority = 8;
  bool has_priority() const;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool has_partial_types = 9;
  bool has_has_partial_types() const;
  void clear_has_partial_types();
  bool has_partial_types() const;
  void set_has_partial_types(bool value);

  // optional bool get_auto_verify = 10;
  bool has_get_auto_verify() const;
  void clear_get_auto_verify();
  bool get_auto_verify() const;
  void set_get_auto_verify(bool value);

  // @@protoc_insertion_point(class_scope:android.content.IntentFilterProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_schemes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto > data_scheme_specs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::AuthorityEntryProto > data_authorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto > data_paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mime_groups_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  bool has_partial_types_;
  bool get_auto_verify_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto;
};
// -------------------------------------------------------------------

class AuthorityEntryProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.content.AuthorityEntryProto) */ {
 public:
  AuthorityEntryProto();
  virtual ~AuthorityEntryProto();

  AuthorityEntryProto(const AuthorityEntryProto& from);
  AuthorityEntryProto(AuthorityEntryProto&& from) noexcept
    : AuthorityEntryProto() {
    *this = ::std::move(from);
  }

  inline AuthorityEntryProto& operator=(const AuthorityEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorityEntryProto& operator=(AuthorityEntryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthorityEntryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorityEntryProto* internal_default_instance() {
    return reinterpret_cast<const AuthorityEntryProto*>(
               &_AuthorityEntryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthorityEntryProto& a, AuthorityEntryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorityEntryProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorityEntryProto* New() const final {
    return CreateMaybeMessage<AuthorityEntryProto>(nullptr);
  }

  AuthorityEntryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorityEntryProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AuthorityEntryProto& from);
  void MergeFrom(const AuthorityEntryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthorityEntryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.AuthorityEntryProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kWildFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // optional string host = 1;
  bool has_host() const;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // optional bool wild = 2;
  bool has_wild() const;
  void clear_wild();
  bool wild() const;
  void set_wild(bool value);

  // optional int32 port = 3;
  bool has_port() const;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.content.AuthorityEntryProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  bool wild_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntentProto

// optional string action = 1;
inline bool IntentProto::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntentProto::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IntentProto::action() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.action)
  return action_.GetNoArena();
}
inline void IntentProto::set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.action)
}
inline void IntentProto::set_action(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.action)
}
inline void IntentProto::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.action)
}
inline void IntentProto::set_action(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.action)
}
inline std::string* IntentProto::mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.action)
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_action() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.action)
  if (!has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.action)
}

// repeated string categories = 2;
inline int IntentProto::categories_size() const {
  return categories_.size();
}
inline void IntentProto::clear_categories() {
  categories_.Clear();
}
inline const std::string& IntentProto::categories(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.categories)
  return categories_.Get(index);
}
inline std::string* IntentProto::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.categories)
  return categories_.Mutable(index);
}
inline void IntentProto::set_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentProto.categories)
  categories_.Mutable(index)->assign(value);
}
inline void IntentProto::set_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentProto.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
inline void IntentProto::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.categories)
}
inline void IntentProto::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.categories)
}
inline std::string* IntentProto::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:android.content.IntentProto.categories)
  return categories_.Add();
}
inline void IntentProto::add_categories(const std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.IntentProto.categories)
}
inline void IntentProto::add_categories(std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.IntentProto.categories)
}
inline void IntentProto::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.IntentProto.categories)
}
inline void IntentProto::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.IntentProto.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IntentProto::categories() const {
  // @@protoc_insertion_point(field_list:android.content.IntentProto.categories)
  return categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IntentProto::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentProto.categories)
  return &categories_;
}

// optional string data = 3 [(.android.privacy) = {
inline bool IntentProto::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntentProto::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IntentProto::data() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.data)
  return data_.GetNoArena();
}
inline void IntentProto::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.data)
}
inline void IntentProto::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.data)
}
inline void IntentProto::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.data)
}
inline void IntentProto::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.data)
}
inline std::string* IntentProto::mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_data() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.data)
}

// optional string type = 4;
inline bool IntentProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntentProto::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IntentProto::type() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.type)
  return type_.GetNoArena();
}
inline void IntentProto::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.type)
}
inline void IntentProto::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.type)
}
inline void IntentProto::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.type)
}
inline void IntentProto::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.type)
}
inline std::string* IntentProto::mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_type() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.type)
}

// optional string flag = 5;
inline bool IntentProto::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntentProto::clear_flag() {
  flag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& IntentProto::flag() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.flag)
  return flag_.GetNoArena();
}
inline void IntentProto::set_flag(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.flag)
}
inline void IntentProto::set_flag(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  flag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.flag)
}
inline void IntentProto::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.flag)
}
inline void IntentProto::set_flag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  flag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.flag)
}
inline std::string* IntentProto::mutable_flag() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.flag)
  return flag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_flag() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.flag)
  if (!has_flag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return flag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  flag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.flag)
}

// optional string package = 6;
inline bool IntentProto::has_package() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IntentProto::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& IntentProto::package() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.package)
  return package_.GetNoArena();
}
inline void IntentProto::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.package)
}
inline void IntentProto::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.package)
}
inline void IntentProto::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.package)
}
inline void IntentProto::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.package)
}
inline std::string* IntentProto::mutable_package() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_package() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.package)
}

// optional .android.content.ComponentNameProto component = 7;
inline bool IntentProto::has_component() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::content::ComponentNameProto& IntentProto::component() const {
  const ::android::content::ComponentNameProto* p = component_;
  // @@protoc_insertion_point(field_get:android.content.IntentProto.component)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* IntentProto::release_component() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.component)
  _has_bits_[0] &= ~0x00000400u;
  ::android::content::ComponentNameProto* temp = component_;
  component_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* IntentProto::mutable_component() {
  _has_bits_[0] |= 0x00000400u;
  if (component_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    component_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.component)
  return component_;
}
inline void IntentProto::set_allocated_component(::android::content::ComponentNameProto* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_);
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  component_ = component;
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.component)
}

// optional string source_bounds = 8;
inline bool IntentProto::has_source_bounds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IntentProto::clear_source_bounds() {
  source_bounds_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& IntentProto::source_bounds() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.source_bounds)
  return source_bounds_.GetNoArena();
}
inline void IntentProto::set_source_bounds(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  source_bounds_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.source_bounds)
}
inline void IntentProto::set_source_bounds(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  source_bounds_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.source_bounds)
}
inline void IntentProto::set_source_bounds(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  source_bounds_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.source_bounds)
}
inline void IntentProto::set_source_bounds(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  source_bounds_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.source_bounds)
}
inline std::string* IntentProto::mutable_source_bounds() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.source_bounds)
  return source_bounds_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_source_bounds() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.source_bounds)
  if (!has_source_bounds()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return source_bounds_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_source_bounds(std::string* source_bounds) {
  if (source_bounds != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  source_bounds_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_bounds);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.source_bounds)
}

// optional string clip_data = 9 [(.android.privacy) = {
inline bool IntentProto::has_clip_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IntentProto::clear_clip_data() {
  clip_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& IntentProto::clip_data() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.clip_data)
  return clip_data_.GetNoArena();
}
inline void IntentProto::set_clip_data(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  clip_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.clip_data)
}
inline void IntentProto::set_clip_data(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  clip_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.clip_data)
}
inline void IntentProto::set_clip_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  clip_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.clip_data)
}
inline void IntentProto::set_clip_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  clip_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.clip_data)
}
inline std::string* IntentProto::mutable_clip_data() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.clip_data)
  return clip_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_clip_data() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.clip_data)
  if (!has_clip_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return clip_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_clip_data(std::string* clip_data) {
  if (clip_data != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  clip_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clip_data);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.clip_data)
}

// optional string extras = 10 [(.android.privacy) = {
inline bool IntentProto::has_extras() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IntentProto::clear_extras() {
  extras_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& IntentProto::extras() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.extras)
  return extras_.GetNoArena();
}
inline void IntentProto::set_extras(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  extras_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.extras)
}
inline void IntentProto::set_extras(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  extras_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.extras)
}
inline void IntentProto::set_extras(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  extras_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.extras)
}
inline void IntentProto::set_extras(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  extras_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.extras)
}
inline std::string* IntentProto::mutable_extras() {
  _has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.extras)
  return extras_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_extras() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.extras)
  if (!has_extras()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return extras_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_extras(std::string* extras) {
  if (extras != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  extras_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extras);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.extras)
}

// optional int32 content_user_hint = 11;
inline bool IntentProto::has_content_user_hint() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IntentProto::clear_content_user_hint() {
  content_user_hint_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntentProto::content_user_hint() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.content_user_hint)
  return content_user_hint_;
}
inline void IntentProto::set_content_user_hint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  content_user_hint_ = value;
  // @@protoc_insertion_point(field_set:android.content.IntentProto.content_user_hint)
}

// optional string selector = 12;
inline bool IntentProto::has_selector() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IntentProto::clear_selector() {
  selector_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& IntentProto::selector() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.selector)
  return selector_.GetNoArena();
}
inline void IntentProto::set_selector(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.selector)
}
inline void IntentProto::set_selector(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  selector_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.selector)
}
inline void IntentProto::set_selector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.selector)
}
inline void IntentProto::set_selector(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.selector)
}
inline std::string* IntentProto::mutable_selector() {
  _has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.selector)
  return selector_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_selector() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.selector)
  if (!has_selector()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return selector_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  selector_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.selector)
}

// optional string identifier = 13 [(.android.privacy) = {
inline bool IntentProto::has_identifier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IntentProto::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& IntentProto::identifier() const {
  // @@protoc_insertion_point(field_get:android.content.IntentProto.identifier)
  return identifier_.GetNoArena();
}
inline void IntentProto::set_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.IntentProto.identifier)
}
inline void IntentProto::set_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  identifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.IntentProto.identifier)
}
inline void IntentProto::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.IntentProto.identifier)
}
inline void IntentProto::set_identifier(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentProto.identifier)
}
inline std::string* IntentProto::mutable_identifier() {
  _has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_mutable:android.content.IntentProto.identifier)
  return identifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IntentProto::release_identifier() {
  // @@protoc_insertion_point(field_release:android.content.IntentProto.identifier)
  if (!has_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return identifier_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IntentProto::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  identifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:android.content.IntentProto.identifier)
}

// -------------------------------------------------------------------

// IntentFilterProto

// repeated string actions = 1;
inline int IntentFilterProto::actions_size() const {
  return actions_.size();
}
inline void IntentFilterProto::clear_actions() {
  actions_.Clear();
}
inline const std::string& IntentFilterProto::actions(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.actions)
  return actions_.Get(index);
}
inline std::string* IntentFilterProto::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentFilterProto.actions)
  return actions_.Mutable(index);
}
inline void IntentFilterProto::set_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.actions)
  actions_.Mutable(index)->assign(value);
}
inline void IntentFilterProto::set_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
inline void IntentFilterProto::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.IntentFilterProto.actions)
}
inline void IntentFilterProto::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentFilterProto.actions)
}
inline std::string* IntentFilterProto::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:android.content.IntentFilterProto.actions)
  return actions_.Add();
}
inline void IntentFilterProto::add_actions(const std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.actions)
}
inline void IntentFilterProto::add_actions(std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.actions)
}
inline void IntentFilterProto::add_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.IntentFilterProto.actions)
}
inline void IntentFilterProto::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.IntentFilterProto.actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IntentFilterProto::actions() const {
  // @@protoc_insertion_point(field_list:android.content.IntentFilterProto.actions)
  return actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IntentFilterProto::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentFilterProto.actions)
  return &actions_;
}

// repeated string categories = 2;
inline int IntentFilterProto::categories_size() const {
  return categories_.size();
}
inline void IntentFilterProto::clear_categories() {
  categories_.Clear();
}
inline const std::string& IntentFilterProto::categories(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.categories)
  return categories_.Get(index);
}
inline std::string* IntentFilterProto::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentFilterProto.categories)
  return categories_.Mutable(index);
}
inline void IntentFilterProto::set_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.categories)
  categories_.Mutable(index)->assign(value);
}
inline void IntentFilterProto::set_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
inline void IntentFilterProto::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.IntentFilterProto.categories)
}
inline void IntentFilterProto::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentFilterProto.categories)
}
inline std::string* IntentFilterProto::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:android.content.IntentFilterProto.categories)
  return categories_.Add();
}
inline void IntentFilterProto::add_categories(const std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.categories)
}
inline void IntentFilterProto::add_categories(std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.categories)
}
inline void IntentFilterProto::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.IntentFilterProto.categories)
}
inline void IntentFilterProto::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.IntentFilterProto.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IntentFilterProto::categories() const {
  // @@protoc_insertion_point(field_list:android.content.IntentFilterProto.categories)
  return categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IntentFilterProto::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentFilterProto.categories)
  return &categories_;
}

// repeated string data_schemes = 3 [(.android.privacy) = {
inline int IntentFilterProto::data_schemes_size() const {
  return data_schemes_.size();
}
inline void IntentFilterProto::clear_data_schemes() {
  data_schemes_.Clear();
}
inline const std::string& IntentFilterProto::data_schemes(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.data_schemes)
  return data_schemes_.Get(index);
}
inline std::string* IntentFilterProto::mutable_data_schemes(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentFilterProto.data_schemes)
  return data_schemes_.Mutable(index);
}
inline void IntentFilterProto::set_data_schemes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.data_schemes)
  data_schemes_.Mutable(index)->assign(value);
}
inline void IntentFilterProto::set_data_schemes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.data_schemes)
  data_schemes_.Mutable(index)->assign(std::move(value));
}
inline void IntentFilterProto::set_data_schemes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_schemes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.IntentFilterProto.data_schemes)
}
inline void IntentFilterProto::set_data_schemes(int index, const char* value, size_t size) {
  data_schemes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentFilterProto.data_schemes)
}
inline std::string* IntentFilterProto::add_data_schemes() {
  // @@protoc_insertion_point(field_add_mutable:android.content.IntentFilterProto.data_schemes)
  return data_schemes_.Add();
}
inline void IntentFilterProto::add_data_schemes(const std::string& value) {
  data_schemes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.data_schemes)
}
inline void IntentFilterProto::add_data_schemes(std::string&& value) {
  data_schemes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.data_schemes)
}
inline void IntentFilterProto::add_data_schemes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_schemes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.IntentFilterProto.data_schemes)
}
inline void IntentFilterProto::add_data_schemes(const char* value, size_t size) {
  data_schemes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.IntentFilterProto.data_schemes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IntentFilterProto::data_schemes() const {
  // @@protoc_insertion_point(field_list:android.content.IntentFilterProto.data_schemes)
  return data_schemes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IntentFilterProto::mutable_data_schemes() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentFilterProto.data_schemes)
  return &data_schemes_;
}

// repeated .android.os.PatternMatcherProto data_scheme_specs = 4;
inline int IntentFilterProto::data_scheme_specs_size() const {
  return data_scheme_specs_.size();
}
inline ::android::os::PatternMatcherProto* IntentFilterProto::mutable_data_scheme_specs(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentFilterProto.data_scheme_specs)
  return data_scheme_specs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto >*
IntentFilterProto::mutable_data_scheme_specs() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentFilterProto.data_scheme_specs)
  return &data_scheme_specs_;
}
inline const ::android::os::PatternMatcherProto& IntentFilterProto::data_scheme_specs(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.data_scheme_specs)
  return data_scheme_specs_.Get(index);
}
inline ::android::os::PatternMatcherProto* IntentFilterProto::add_data_scheme_specs() {
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.data_scheme_specs)
  return data_scheme_specs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto >&
IntentFilterProto::data_scheme_specs() const {
  // @@protoc_insertion_point(field_list:android.content.IntentFilterProto.data_scheme_specs)
  return data_scheme_specs_;
}

// repeated .android.content.AuthorityEntryProto data_authorities = 5;
inline int IntentFilterProto::data_authorities_size() const {
  return data_authorities_.size();
}
inline void IntentFilterProto::clear_data_authorities() {
  data_authorities_.Clear();
}
inline ::android::content::AuthorityEntryProto* IntentFilterProto::mutable_data_authorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentFilterProto.data_authorities)
  return data_authorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::AuthorityEntryProto >*
IntentFilterProto::mutable_data_authorities() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentFilterProto.data_authorities)
  return &data_authorities_;
}
inline const ::android::content::AuthorityEntryProto& IntentFilterProto::data_authorities(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.data_authorities)
  return data_authorities_.Get(index);
}
inline ::android::content::AuthorityEntryProto* IntentFilterProto::add_data_authorities() {
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.data_authorities)
  return data_authorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::AuthorityEntryProto >&
IntentFilterProto::data_authorities() const {
  // @@protoc_insertion_point(field_list:android.content.IntentFilterProto.data_authorities)
  return data_authorities_;
}

// repeated .android.os.PatternMatcherProto data_paths = 6;
inline int IntentFilterProto::data_paths_size() const {
  return data_paths_.size();
}
inline ::android::os::PatternMatcherProto* IntentFilterProto::mutable_data_paths(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentFilterProto.data_paths)
  return data_paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto >*
IntentFilterProto::mutable_data_paths() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentFilterProto.data_paths)
  return &data_paths_;
}
inline const ::android::os::PatternMatcherProto& IntentFilterProto::data_paths(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.data_paths)
  return data_paths_.Get(index);
}
inline ::android::os::PatternMatcherProto* IntentFilterProto::add_data_paths() {
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.data_paths)
  return data_paths_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::PatternMatcherProto >&
IntentFilterProto::data_paths() const {
  // @@protoc_insertion_point(field_list:android.content.IntentFilterProto.data_paths)
  return data_paths_;
}

// repeated string data_types = 7;
inline int IntentFilterProto::data_types_size() const {
  return data_types_.size();
}
inline void IntentFilterProto::clear_data_types() {
  data_types_.Clear();
}
inline const std::string& IntentFilterProto::data_types(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.data_types)
  return data_types_.Get(index);
}
inline std::string* IntentFilterProto::mutable_data_types(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentFilterProto.data_types)
  return data_types_.Mutable(index);
}
inline void IntentFilterProto::set_data_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.data_types)
  data_types_.Mutable(index)->assign(value);
}
inline void IntentFilterProto::set_data_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.data_types)
  data_types_.Mutable(index)->assign(std::move(value));
}
inline void IntentFilterProto::set_data_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.IntentFilterProto.data_types)
}
inline void IntentFilterProto::set_data_types(int index, const char* value, size_t size) {
  data_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentFilterProto.data_types)
}
inline std::string* IntentFilterProto::add_data_types() {
  // @@protoc_insertion_point(field_add_mutable:android.content.IntentFilterProto.data_types)
  return data_types_.Add();
}
inline void IntentFilterProto::add_data_types(const std::string& value) {
  data_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.data_types)
}
inline void IntentFilterProto::add_data_types(std::string&& value) {
  data_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.data_types)
}
inline void IntentFilterProto::add_data_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.IntentFilterProto.data_types)
}
inline void IntentFilterProto::add_data_types(const char* value, size_t size) {
  data_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.IntentFilterProto.data_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IntentFilterProto::data_types() const {
  // @@protoc_insertion_point(field_list:android.content.IntentFilterProto.data_types)
  return data_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IntentFilterProto::mutable_data_types() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentFilterProto.data_types)
  return &data_types_;
}

// optional int32 priority = 8;
inline bool IntentFilterProto::has_priority() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntentFilterProto::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntentFilterProto::priority() const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.priority)
  return priority_;
}
inline void IntentFilterProto::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.priority)
}

// optional bool has_partial_types = 9;
inline bool IntentFilterProto::has_has_partial_types() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntentFilterProto::clear_has_partial_types() {
  has_partial_types_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool IntentFilterProto::has_partial_types() const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.has_partial_types)
  return has_partial_types_;
}
inline void IntentFilterProto::set_has_partial_types(bool value) {
  _has_bits_[0] |= 0x00000002u;
  has_partial_types_ = value;
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.has_partial_types)
}

// optional bool get_auto_verify = 10;
inline bool IntentFilterProto::has_get_auto_verify() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntentFilterProto::clear_get_auto_verify() {
  get_auto_verify_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool IntentFilterProto::get_auto_verify() const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.get_auto_verify)
  return get_auto_verify_;
}
inline void IntentFilterProto::set_get_auto_verify(bool value) {
  _has_bits_[0] |= 0x00000004u;
  get_auto_verify_ = value;
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.get_auto_verify)
}

// repeated string mime_groups = 11;
inline int IntentFilterProto::mime_groups_size() const {
  return mime_groups_.size();
}
inline void IntentFilterProto::clear_mime_groups() {
  mime_groups_.Clear();
}
inline const std::string& IntentFilterProto::mime_groups(int index) const {
  // @@protoc_insertion_point(field_get:android.content.IntentFilterProto.mime_groups)
  return mime_groups_.Get(index);
}
inline std::string* IntentFilterProto::mutable_mime_groups(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.IntentFilterProto.mime_groups)
  return mime_groups_.Mutable(index);
}
inline void IntentFilterProto::set_mime_groups(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.mime_groups)
  mime_groups_.Mutable(index)->assign(value);
}
inline void IntentFilterProto::set_mime_groups(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.IntentFilterProto.mime_groups)
  mime_groups_.Mutable(index)->assign(std::move(value));
}
inline void IntentFilterProto::set_mime_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mime_groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.IntentFilterProto.mime_groups)
}
inline void IntentFilterProto::set_mime_groups(int index, const char* value, size_t size) {
  mime_groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.IntentFilterProto.mime_groups)
}
inline std::string* IntentFilterProto::add_mime_groups() {
  // @@protoc_insertion_point(field_add_mutable:android.content.IntentFilterProto.mime_groups)
  return mime_groups_.Add();
}
inline void IntentFilterProto::add_mime_groups(const std::string& value) {
  mime_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.mime_groups)
}
inline void IntentFilterProto::add_mime_groups(std::string&& value) {
  mime_groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.IntentFilterProto.mime_groups)
}
inline void IntentFilterProto::add_mime_groups(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mime_groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.IntentFilterProto.mime_groups)
}
inline void IntentFilterProto::add_mime_groups(const char* value, size_t size) {
  mime_groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.IntentFilterProto.mime_groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IntentFilterProto::mime_groups() const {
  // @@protoc_insertion_point(field_list:android.content.IntentFilterProto.mime_groups)
  return mime_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IntentFilterProto::mutable_mime_groups() {
  // @@protoc_insertion_point(field_mutable_list:android.content.IntentFilterProto.mime_groups)
  return &mime_groups_;
}

// -------------------------------------------------------------------

// AuthorityEntryProto

// optional string host = 1;
inline bool AuthorityEntryProto::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthorityEntryProto::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthorityEntryProto::host() const {
  // @@protoc_insertion_point(field_get:android.content.AuthorityEntryProto.host)
  return host_.GetNoArena();
}
inline void AuthorityEntryProto::set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.AuthorityEntryProto.host)
}
inline void AuthorityEntryProto::set_host(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.AuthorityEntryProto.host)
}
inline void AuthorityEntryProto::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.AuthorityEntryProto.host)
}
inline void AuthorityEntryProto::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.AuthorityEntryProto.host)
}
inline std::string* AuthorityEntryProto::mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.content.AuthorityEntryProto.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthorityEntryProto::release_host() {
  // @@protoc_insertion_point(field_release:android.content.AuthorityEntryProto.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorityEntryProto::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:android.content.AuthorityEntryProto.host)
}

// optional bool wild = 2;
inline bool AuthorityEntryProto::has_wild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthorityEntryProto::clear_wild() {
  wild_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AuthorityEntryProto::wild() const {
  // @@protoc_insertion_point(field_get:android.content.AuthorityEntryProto.wild)
  return wild_;
}
inline void AuthorityEntryProto::set_wild(bool value) {
  _has_bits_[0] |= 0x00000002u;
  wild_ = value;
  // @@protoc_insertion_point(field_set:android.content.AuthorityEntryProto.wild)
}

// optional int32 port = 3;
inline bool AuthorityEntryProto::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AuthorityEntryProto::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthorityEntryProto::port() const {
  // @@protoc_insertion_point(field_get:android.content.AuthorityEntryProto.port)
  return port_;
}
inline void AuthorityEntryProto::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
  // @@protoc_insertion_point(field_set:android.content.AuthorityEntryProto.port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::content::IntentProto_DockState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fintent_2eproto
