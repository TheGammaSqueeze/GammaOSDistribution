// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/powermanagerservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/content/intent.pb.h"
#include "frameworks/base/core/proto/android/os/looper.pb.h"
#include "frameworks/base/core/proto/android/os/powermanager.pb.h"
#include "frameworks/base/core/proto/android/os/worksource.pb.h"
#include "frameworks/base/core/proto/android/providers/settings.pb.h"
#include "frameworks/base/core/proto/android/server/wirelesschargerdetector.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
#include "frameworks/proto_logging/stats/enums/app/enums.pb.h"
#include "frameworks/proto_logging/stats/enums/os/enums.pb.h"
#include "frameworks/proto_logging/stats/enums/view/enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace power {
class BatterySaverStateMachineProto;
class BatterySaverStateMachineProtoDefaultTypeInternal;
extern BatterySaverStateMachineProtoDefaultTypeInternal _BatterySaverStateMachineProto_default_instance_;
class PowerManagerServiceDumpProto;
class PowerManagerServiceDumpProtoDefaultTypeInternal;
extern PowerManagerServiceDumpProtoDefaultTypeInternal _PowerManagerServiceDumpProto_default_instance_;
class PowerManagerServiceDumpProto_ActiveWakeLocksProto;
class PowerManagerServiceDumpProto_ActiveWakeLocksProtoDefaultTypeInternal;
extern PowerManagerServiceDumpProto_ActiveWakeLocksProtoDefaultTypeInternal _PowerManagerServiceDumpProto_ActiveWakeLocksProto_default_instance_;
class PowerManagerServiceDumpProto_ConstantsProto;
class PowerManagerServiceDumpProto_ConstantsProtoDefaultTypeInternal;
extern PowerManagerServiceDumpProto_ConstantsProtoDefaultTypeInternal _PowerManagerServiceDumpProto_ConstantsProto_default_instance_;
class PowerManagerServiceDumpProto_UidStateProto;
class PowerManagerServiceDumpProto_UidStateProtoDefaultTypeInternal;
extern PowerManagerServiceDumpProto_UidStateProtoDefaultTypeInternal _PowerManagerServiceDumpProto_UidStateProto_default_instance_;
class PowerManagerServiceDumpProto_UserActivityProto;
class PowerManagerServiceDumpProto_UserActivityProtoDefaultTypeInternal;
extern PowerManagerServiceDumpProto_UserActivityProtoDefaultTypeInternal _PowerManagerServiceDumpProto_UserActivityProto_default_instance_;
class PowerServiceSettingsAndConfigurationDumpProto;
class PowerServiceSettingsAndConfigurationDumpProtoDefaultTypeInternal;
extern PowerServiceSettingsAndConfigurationDumpProtoDefaultTypeInternal _PowerServiceSettingsAndConfigurationDumpProto_default_instance_;
class PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto;
class PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProtoDefaultTypeInternal;
extern PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProtoDefaultTypeInternal _PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_default_instance_;
class PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto;
class PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProtoDefaultTypeInternal;
extern PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProtoDefaultTypeInternal _PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_default_instance_;
class SuspendBlockerProto;
class SuspendBlockerProtoDefaultTypeInternal;
extern SuspendBlockerProtoDefaultTypeInternal _SuspendBlockerProto_default_instance_;
class WakeLockProto;
class WakeLockProtoDefaultTypeInternal;
extern WakeLockProtoDefaultTypeInternal _WakeLockProto_default_instance_;
class WakeLockProto_WakeLockFlagsProto;
class WakeLockProto_WakeLockFlagsProtoDefaultTypeInternal;
extern WakeLockProto_WakeLockFlagsProtoDefaultTypeInternal _WakeLockProto_WakeLockFlagsProto_default_instance_;
}  // namespace power
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::power::BatterySaverStateMachineProto* Arena::CreateMaybeMessage<::com::android::server::power::BatterySaverStateMachineProto>(Arena*);
template<> ::com::android::server::power::PowerManagerServiceDumpProto* Arena::CreateMaybeMessage<::com::android::server::power::PowerManagerServiceDumpProto>(Arena*);
template<> ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* Arena::CreateMaybeMessage<::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto>(Arena*);
template<> ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* Arena::CreateMaybeMessage<::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto>(Arena*);
template<> ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto* Arena::CreateMaybeMessage<::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto>(Arena*);
template<> ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto* Arena::CreateMaybeMessage<::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto>(Arena*);
template<> ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* Arena::CreateMaybeMessage<::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto>(Arena*);
template<> ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* Arena::CreateMaybeMessage<::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto>(Arena*);
template<> ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* Arena::CreateMaybeMessage<::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto>(Arena*);
template<> ::com::android::server::power::SuspendBlockerProto* Arena::CreateMaybeMessage<::com::android::server::power::SuspendBlockerProto>(Arena*);
template<> ::com::android::server::power::WakeLockProto* Arena::CreateMaybeMessage<::com::android::server::power::WakeLockProto>(Arena*);
template<> ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* Arena::CreateMaybeMessage<::com::android::server::power::WakeLockProto_WakeLockFlagsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace power {

enum BatterySaverStateMachineProto_StateEnum : int {
  BatterySaverStateMachineProto_StateEnum_STATE_UNKNOWN = 0,
  BatterySaverStateMachineProto_StateEnum_STATE_OFF = 1,
  BatterySaverStateMachineProto_StateEnum_STATE_MANUAL_ON = 2,
  BatterySaverStateMachineProto_StateEnum_STATE_AUTOMATIC_ON = 3,
  BatterySaverStateMachineProto_StateEnum_STATE_OFF_AUTOMATIC_SNOOZED = 4,
  BatterySaverStateMachineProto_StateEnum_STATE_PENDING_STICKY_ON = 5
};
bool BatterySaverStateMachineProto_StateEnum_IsValid(int value);
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto_StateEnum_StateEnum_MIN = BatterySaverStateMachineProto_StateEnum_STATE_UNKNOWN;
constexpr BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto_StateEnum_StateEnum_MAX = BatterySaverStateMachineProto_StateEnum_STATE_PENDING_STICKY_ON;
constexpr int BatterySaverStateMachineProto_StateEnum_StateEnum_ARRAYSIZE = BatterySaverStateMachineProto_StateEnum_StateEnum_MAX + 1;

const std::string& BatterySaverStateMachineProto_StateEnum_Name(BatterySaverStateMachineProto_StateEnum value);
template<typename T>
inline const std::string& BatterySaverStateMachineProto_StateEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatterySaverStateMachineProto_StateEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatterySaverStateMachineProto_StateEnum_Name.");
  return BatterySaverStateMachineProto_StateEnum_Name(static_cast<BatterySaverStateMachineProto_StateEnum>(enum_t_value));
}
bool BatterySaverStateMachineProto_StateEnum_Parse(
    const std::string& name, BatterySaverStateMachineProto_StateEnum* value);
enum BatterySaverStateMachineProto_AutomaticTriggerEnum : int {
  BatterySaverStateMachineProto_AutomaticTriggerEnum_TRIGGER_PERCENTAGE = 0,
  BatterySaverStateMachineProto_AutomaticTriggerEnum_TRIGGER_DYNAMIC = 1
};
bool BatterySaverStateMachineProto_AutomaticTriggerEnum_IsValid(int value);
constexpr BatterySaverStateMachineProto_AutomaticTriggerEnum BatterySaverStateMachineProto_AutomaticTriggerEnum_AutomaticTriggerEnum_MIN = BatterySaverStateMachineProto_AutomaticTriggerEnum_TRIGGER_PERCENTAGE;
constexpr BatterySaverStateMachineProto_AutomaticTriggerEnum BatterySaverStateMachineProto_AutomaticTriggerEnum_AutomaticTriggerEnum_MAX = BatterySaverStateMachineProto_AutomaticTriggerEnum_TRIGGER_DYNAMIC;
constexpr int BatterySaverStateMachineProto_AutomaticTriggerEnum_AutomaticTriggerEnum_ARRAYSIZE = BatterySaverStateMachineProto_AutomaticTriggerEnum_AutomaticTriggerEnum_MAX + 1;

const std::string& BatterySaverStateMachineProto_AutomaticTriggerEnum_Name(BatterySaverStateMachineProto_AutomaticTriggerEnum value);
template<typename T>
inline const std::string& BatterySaverStateMachineProto_AutomaticTriggerEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatterySaverStateMachineProto_AutomaticTriggerEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatterySaverStateMachineProto_AutomaticTriggerEnum_Name.");
  return BatterySaverStateMachineProto_AutomaticTriggerEnum_Name(static_cast<BatterySaverStateMachineProto_AutomaticTriggerEnum>(enum_t_value));
}
bool BatterySaverStateMachineProto_AutomaticTriggerEnum_Parse(
    const std::string& name, BatterySaverStateMachineProto_AutomaticTriggerEnum* value);
// ===================================================================

class PowerManagerServiceDumpProto_ConstantsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto) */ {
 public:
  PowerManagerServiceDumpProto_ConstantsProto();
  virtual ~PowerManagerServiceDumpProto_ConstantsProto();

  PowerManagerServiceDumpProto_ConstantsProto(const PowerManagerServiceDumpProto_ConstantsProto& from);
  PowerManagerServiceDumpProto_ConstantsProto(PowerManagerServiceDumpProto_ConstantsProto&& from) noexcept
    : PowerManagerServiceDumpProto_ConstantsProto() {
    *this = ::std::move(from);
  }

  inline PowerManagerServiceDumpProto_ConstantsProto& operator=(const PowerManagerServiceDumpProto_ConstantsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerManagerServiceDumpProto_ConstantsProto& operator=(PowerManagerServiceDumpProto_ConstantsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerManagerServiceDumpProto_ConstantsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerManagerServiceDumpProto_ConstantsProto* internal_default_instance() {
    return reinterpret_cast<const PowerManagerServiceDumpProto_ConstantsProto*>(
               &_PowerManagerServiceDumpProto_ConstantsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PowerManagerServiceDumpProto_ConstantsProto& a, PowerManagerServiceDumpProto_ConstantsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerManagerServiceDumpProto_ConstantsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerManagerServiceDumpProto_ConstantsProto* New() const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto_ConstantsProto>(nullptr);
  }

  PowerManagerServiceDumpProto_ConstantsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto_ConstantsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerManagerServiceDumpProto_ConstantsProto& from);
  void MergeFrom(const PowerManagerServiceDumpProto_ConstantsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerManagerServiceDumpProto_ConstantsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsNoCachedWakeLocksFieldNumber = 1,
  };
  // optional bool is_no_cached_wake_locks = 1;
  bool has_is_no_cached_wake_locks() const;
  void clear_is_no_cached_wake_locks();
  bool is_no_cached_wake_locks() const;
  void set_is_no_cached_wake_locks(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_no_cached_wake_locks_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PowerManagerServiceDumpProto_ActiveWakeLocksProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto) */ {
 public:
  PowerManagerServiceDumpProto_ActiveWakeLocksProto();
  virtual ~PowerManagerServiceDumpProto_ActiveWakeLocksProto();

  PowerManagerServiceDumpProto_ActiveWakeLocksProto(const PowerManagerServiceDumpProto_ActiveWakeLocksProto& from);
  PowerManagerServiceDumpProto_ActiveWakeLocksProto(PowerManagerServiceDumpProto_ActiveWakeLocksProto&& from) noexcept
    : PowerManagerServiceDumpProto_ActiveWakeLocksProto() {
    *this = ::std::move(from);
  }

  inline PowerManagerServiceDumpProto_ActiveWakeLocksProto& operator=(const PowerManagerServiceDumpProto_ActiveWakeLocksProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerManagerServiceDumpProto_ActiveWakeLocksProto& operator=(PowerManagerServiceDumpProto_ActiveWakeLocksProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerManagerServiceDumpProto_ActiveWakeLocksProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerManagerServiceDumpProto_ActiveWakeLocksProto* internal_default_instance() {
    return reinterpret_cast<const PowerManagerServiceDumpProto_ActiveWakeLocksProto*>(
               &_PowerManagerServiceDumpProto_ActiveWakeLocksProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PowerManagerServiceDumpProto_ActiveWakeLocksProto& a, PowerManagerServiceDumpProto_ActiveWakeLocksProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerManagerServiceDumpProto_ActiveWakeLocksProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerManagerServiceDumpProto_ActiveWakeLocksProto* New() const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto_ActiveWakeLocksProto>(nullptr);
  }

  PowerManagerServiceDumpProto_ActiveWakeLocksProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto_ActiveWakeLocksProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerManagerServiceDumpProto_ActiveWakeLocksProto& from);
  void MergeFrom(const PowerManagerServiceDumpProto_ActiveWakeLocksProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerManagerServiceDumpProto_ActiveWakeLocksProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsCpuFieldNumber = 1,
    kIsScreenBrightFieldNumber = 2,
    kIsScreenDimFieldNumber = 3,
    kIsButtonBrightFieldNumber = 4,
    kIsProximityScreenOffFieldNumber = 5,
    kIsStayAwakeFieldNumber = 6,
    kIsDozeFieldNumber = 7,
    kIsDrawFieldNumber = 8,
  };
  // optional bool is_cpu = 1;
  bool has_is_cpu() const;
  void clear_is_cpu();
  bool is_cpu() const;
  void set_is_cpu(bool value);

  // optional bool is_screen_bright = 2;
  bool has_is_screen_bright() const;
  void clear_is_screen_bright();
  bool is_screen_bright() const;
  void set_is_screen_bright(bool value);

  // optional bool is_screen_dim = 3;
  bool has_is_screen_dim() const;
  void clear_is_screen_dim();
  bool is_screen_dim() const;
  void set_is_screen_dim(bool value);

  // optional bool is_button_bright = 4;
  bool has_is_button_bright() const;
  void clear_is_button_bright();
  bool is_button_bright() const;
  void set_is_button_bright(bool value);

  // optional bool is_proximity_screen_off = 5;
  bool has_is_proximity_screen_off() const;
  void clear_is_proximity_screen_off();
  bool is_proximity_screen_off() const;
  void set_is_proximity_screen_off(bool value);

  // optional bool is_stay_awake = 6;
  bool has_is_stay_awake() const;
  void clear_is_stay_awake();
  bool is_stay_awake() const;
  void set_is_stay_awake(bool value);

  // optional bool is_doze = 7;
  bool has_is_doze() const;
  void clear_is_doze();
  bool is_doze() const;
  void set_is_doze(bool value);

  // optional bool is_draw = 8;
  bool has_is_draw() const;
  void clear_is_draw();
  bool is_draw() const;
  void set_is_draw(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_cpu_;
  bool is_screen_bright_;
  bool is_screen_dim_;
  bool is_button_bright_;
  bool is_proximity_screen_off_;
  bool is_stay_awake_;
  bool is_doze_;
  bool is_draw_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PowerManagerServiceDumpProto_UserActivityProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto) */ {
 public:
  PowerManagerServiceDumpProto_UserActivityProto();
  virtual ~PowerManagerServiceDumpProto_UserActivityProto();

  PowerManagerServiceDumpProto_UserActivityProto(const PowerManagerServiceDumpProto_UserActivityProto& from);
  PowerManagerServiceDumpProto_UserActivityProto(PowerManagerServiceDumpProto_UserActivityProto&& from) noexcept
    : PowerManagerServiceDumpProto_UserActivityProto() {
    *this = ::std::move(from);
  }

  inline PowerManagerServiceDumpProto_UserActivityProto& operator=(const PowerManagerServiceDumpProto_UserActivityProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerManagerServiceDumpProto_UserActivityProto& operator=(PowerManagerServiceDumpProto_UserActivityProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerManagerServiceDumpProto_UserActivityProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerManagerServiceDumpProto_UserActivityProto* internal_default_instance() {
    return reinterpret_cast<const PowerManagerServiceDumpProto_UserActivityProto*>(
               &_PowerManagerServiceDumpProto_UserActivityProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PowerManagerServiceDumpProto_UserActivityProto& a, PowerManagerServiceDumpProto_UserActivityProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerManagerServiceDumpProto_UserActivityProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerManagerServiceDumpProto_UserActivityProto* New() const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto_UserActivityProto>(nullptr);
  }

  PowerManagerServiceDumpProto_UserActivityProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto_UserActivityProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerManagerServiceDumpProto_UserActivityProto& from);
  void MergeFrom(const PowerManagerServiceDumpProto_UserActivityProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerManagerServiceDumpProto_UserActivityProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsScreenBrightFieldNumber = 1,
    kIsScreenDimFieldNumber = 2,
    kIsScreenDreamFieldNumber = 3,
    kDisplayGroupIdFieldNumber = 6,
    kLastUserActivityTimeMsFieldNumber = 4,
    kLastUserActivityTimeNoChangeLightsMsFieldNumber = 5,
  };
  // optional bool is_screen_bright = 1;
  bool has_is_screen_bright() const;
  void clear_is_screen_bright();
  bool is_screen_bright() const;
  void set_is_screen_bright(bool value);

  // optional bool is_screen_dim = 2;
  bool has_is_screen_dim() const;
  void clear_is_screen_dim();
  bool is_screen_dim() const;
  void set_is_screen_dim(bool value);

  // optional bool is_screen_dream = 3;
  bool has_is_screen_dream() const;
  void clear_is_screen_dream();
  bool is_screen_dream() const;
  void set_is_screen_dream(bool value);

  // optional int32 display_group_id = 6;
  bool has_display_group_id() const;
  void clear_display_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 display_group_id() const;
  void set_display_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 last_user_activity_time_ms = 4;
  bool has_last_user_activity_time_ms() const;
  void clear_last_user_activity_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_user_activity_time_ms() const;
  void set_last_user_activity_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_user_activity_time_no_change_lights_ms = 5;
  bool has_last_user_activity_time_no_change_lights_ms() const;
  void clear_last_user_activity_time_no_change_lights_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_user_activity_time_no_change_lights_ms() const;
  void set_last_user_activity_time_no_change_lights_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_screen_bright_;
  bool is_screen_dim_;
  bool is_screen_dream_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_group_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_user_activity_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_user_activity_time_no_change_lights_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PowerManagerServiceDumpProto_UidStateProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto) */ {
 public:
  PowerManagerServiceDumpProto_UidStateProto();
  virtual ~PowerManagerServiceDumpProto_UidStateProto();

  PowerManagerServiceDumpProto_UidStateProto(const PowerManagerServiceDumpProto_UidStateProto& from);
  PowerManagerServiceDumpProto_UidStateProto(PowerManagerServiceDumpProto_UidStateProto&& from) noexcept
    : PowerManagerServiceDumpProto_UidStateProto() {
    *this = ::std::move(from);
  }

  inline PowerManagerServiceDumpProto_UidStateProto& operator=(const PowerManagerServiceDumpProto_UidStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerManagerServiceDumpProto_UidStateProto& operator=(PowerManagerServiceDumpProto_UidStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerManagerServiceDumpProto_UidStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerManagerServiceDumpProto_UidStateProto* internal_default_instance() {
    return reinterpret_cast<const PowerManagerServiceDumpProto_UidStateProto*>(
               &_PowerManagerServiceDumpProto_UidStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PowerManagerServiceDumpProto_UidStateProto& a, PowerManagerServiceDumpProto_UidStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerManagerServiceDumpProto_UidStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerManagerServiceDumpProto_UidStateProto* New() const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto_UidStateProto>(nullptr);
  }

  PowerManagerServiceDumpProto_UidStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto_UidStateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerManagerServiceDumpProto_UidStateProto& from);
  void MergeFrom(const PowerManagerServiceDumpProto_UidStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerManagerServiceDumpProto_UidStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.PowerManagerServiceDumpProto.UidStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidStringFieldNumber = 2,
    kUidFieldNumber = 1,
    kIsActiveFieldNumber = 3,
    kNumWakeLocksFieldNumber = 4,
    kProcessStateFieldNumber = 5,
  };
  // optional string uid_string = 2;
  bool has_uid_string() const;
  void clear_uid_string();
  const std::string& uid_string() const;
  void set_uid_string(const std::string& value);
  void set_uid_string(std::string&& value);
  void set_uid_string(const char* value);
  void set_uid_string(const char* value, size_t size);
  std::string* mutable_uid_string();
  std::string* release_uid_string();
  void set_allocated_uid_string(std::string* uid_string);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_active = 3;
  bool has_is_active() const;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);

  // optional int32 num_wake_locks = 4;
  bool has_num_wake_locks() const;
  void clear_num_wake_locks();
  ::PROTOBUF_NAMESPACE_ID::int32 num_wake_locks() const;
  void set_num_wake_locks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.app.ProcessStateEnum process_state = 5;
  bool has_process_state() const;
  void clear_process_state();
  ::android::app::ProcessStateEnum process_state() const;
  void set_process_state(::android::app::ProcessStateEnum value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  bool is_active_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_wake_locks_;
  int process_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PowerManagerServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.PowerManagerServiceDumpProto) */ {
 public:
  PowerManagerServiceDumpProto();
  virtual ~PowerManagerServiceDumpProto();

  PowerManagerServiceDumpProto(const PowerManagerServiceDumpProto& from);
  PowerManagerServiceDumpProto(PowerManagerServiceDumpProto&& from) noexcept
    : PowerManagerServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline PowerManagerServiceDumpProto& operator=(const PowerManagerServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerManagerServiceDumpProto& operator=(PowerManagerServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerManagerServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerManagerServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const PowerManagerServiceDumpProto*>(
               &_PowerManagerServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PowerManagerServiceDumpProto& a, PowerManagerServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerManagerServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerManagerServiceDumpProto* New() const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto>(nullptr);
  }

  PowerManagerServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerManagerServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerManagerServiceDumpProto& from);
  void MergeFrom(const PowerManagerServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerManagerServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.PowerManagerServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PowerManagerServiceDumpProto_ConstantsProto ConstantsProto;
  typedef PowerManagerServiceDumpProto_ActiveWakeLocksProto ActiveWakeLocksProto;
  typedef PowerManagerServiceDumpProto_UserActivityProto UserActivityProto;
  typedef PowerManagerServiceDumpProto_UidStateProto UidStateProto;

  // accessors -------------------------------------------------------

  enum : int {
    kUserActivityFieldNumber = 20,
    kDeviceIdleWhitelistFieldNumber = 27,
    kDeviceIdleTempWhitelistFieldNumber = 28,
    kUidStatesFieldNumber = 45,
    kWakeLocksFieldNumber = 47,
    kSuspendBlockersFieldNumber = 48,
    kConstantsFieldNumber = 1,
    kActiveWakeLocksFieldNumber = 16,
    kSettingsAndConfigurationFieldNumber = 39,
    kLooperFieldNumber = 46,
    kWirelessChargerDetectorFieldNumber = 49,
    kBatterySaverStateMachineFieldNumber = 50,
    kDirtyFieldNumber = 2,
    kWakefulnessFieldNumber = 3,
    kPlugTypeFieldNumber = 6,
    kBatteryLevelFieldNumber = 7,
    kIsWakefulnessChangingFieldNumber = 4,
    kIsPoweredFieldNumber = 5,
    kIsStayOnFieldNumber = 10,
    kIsProximityPositiveFieldNumber = 11,
    kBatteryLevelWhenDreamStartedFieldNumber = 8,
    kDockStateFieldNumber = 9,
    kIsBootCompletedFieldNumber = 12,
    kIsSystemReadyFieldNumber = 13,
    kIsHalAutoSuspendModeEnabledFieldNumber = 14,
    kIsHalAutoInteractiveModeEnabledFieldNumber = 15,
    kNotifyLongScheduledMsFieldNumber = 17,
    kNotifyLongDispatchedMsFieldNumber = 18,
    kNotifyLongNextCheckMsFieldNumber = 19,
    kIsRequestWaitForNegativeProximityFieldNumber = 21,
    kIsSandmanScheduledFieldNumber = 22,
    kIsSandmanSummonedFieldNumber = 23,
    kIsBatteryLevelLowFieldNumber = 24,
    kIsLightDeviceIdleModeFieldNumber = 25,
    kIsDeviceIdleModeFieldNumber = 26,
    kIsScreenBrightnessBoostInProgressFieldNumber = 35,
    kIsDisplayReadyFieldNumber = 36,
    kLastWakeTimeMsFieldNumber = 29,
    kLastSleepTimeMsFieldNumber = 30,
    kLastUserActivityTimeMsFieldNumber = 31,
    kLastUserActivityTimeNoChangeLightsMsFieldNumber = 32,
    kLastInteractivePowerHintTimeMsFieldNumber = 33,
    kLastScreenBrightnessBoostTimeMsFieldNumber = 34,
    kSleepTimeoutMsFieldNumber = 40,
    kIsHoldingWakeLockSuspendBlockerFieldNumber = 37,
    kIsHoldingDisplaySuspendBlockerFieldNumber = 38,
    kAreUidsChangingFieldNumber = 43,
    kAreUidsChangedFieldNumber = 44,
    kScreenOffTimeoutMsFieldNumber = 41,
    kScreenDimDurationMsFieldNumber = 42,
    kEnhancedDischargeTimeElapsedFieldNumber = 52,
    kAttentiveTimeoutMsFieldNumber = 51,
    kIsEnhancedDischargePredictionPersonalizedFieldNumber = 54,
    kLastEnhancedDischargeTimeUpdatedElapsedFieldNumber = 53,
  };
  // repeated .com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto user_activity = 20;
  int user_activity_size() const;
  void clear_user_activity();
  ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto* mutable_user_activity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto >*
      mutable_user_activity();
  const ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto& user_activity(int index) const;
  ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto* add_user_activity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto >&
      user_activity() const;

  // repeated int32 device_idle_whitelist = 27;
  int device_idle_whitelist_size() const;
  void clear_device_idle_whitelist();
  ::PROTOBUF_NAMESPACE_ID::int32 device_idle_whitelist(int index) const;
  void set_device_idle_whitelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_device_idle_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      device_idle_whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_device_idle_whitelist();

  // repeated int32 device_idle_temp_whitelist = 28;
  int device_idle_temp_whitelist_size() const;
  void clear_device_idle_temp_whitelist();
  ::PROTOBUF_NAMESPACE_ID::int32 device_idle_temp_whitelist(int index) const;
  void set_device_idle_temp_whitelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_device_idle_temp_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      device_idle_temp_whitelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_device_idle_temp_whitelist();

  // repeated .com.android.server.power.PowerManagerServiceDumpProto.UidStateProto uid_states = 45;
  int uid_states_size() const;
  void clear_uid_states();
  ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto* mutable_uid_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto >*
      mutable_uid_states();
  const ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto& uid_states(int index) const;
  ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto* add_uid_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto >&
      uid_states() const;

  // repeated .com.android.server.power.WakeLockProto wake_locks = 47;
  int wake_locks_size() const;
  void clear_wake_locks();
  ::com::android::server::power::WakeLockProto* mutable_wake_locks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::WakeLockProto >*
      mutable_wake_locks();
  const ::com::android::server::power::WakeLockProto& wake_locks(int index) const;
  ::com::android::server::power::WakeLockProto* add_wake_locks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::WakeLockProto >&
      wake_locks() const;

  // repeated .com.android.server.power.SuspendBlockerProto suspend_blockers = 48;
  int suspend_blockers_size() const;
  void clear_suspend_blockers();
  ::com::android::server::power::SuspendBlockerProto* mutable_suspend_blockers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::SuspendBlockerProto >*
      mutable_suspend_blockers();
  const ::com::android::server::power::SuspendBlockerProto& suspend_blockers(int index) const;
  ::com::android::server::power::SuspendBlockerProto* add_suspend_blockers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::SuspendBlockerProto >&
      suspend_blockers() const;

  // optional .com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto constants = 1;
  bool has_constants() const;
  void clear_constants();
  const ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto& constants() const;
  ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* release_constants();
  ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* mutable_constants();
  void set_allocated_constants(::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* constants);

  // optional .com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto active_wake_locks = 16;
  bool has_active_wake_locks() const;
  void clear_active_wake_locks();
  const ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto& active_wake_locks() const;
  ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* release_active_wake_locks();
  ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* mutable_active_wake_locks();
  void set_allocated_active_wake_locks(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* active_wake_locks);

  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto settings_and_configuration = 39;
  bool has_settings_and_configuration() const;
  void clear_settings_and_configuration();
  const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto& settings_and_configuration() const;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* release_settings_and_configuration();
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* mutable_settings_and_configuration();
  void set_allocated_settings_and_configuration(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* settings_and_configuration);

  // optional .android.os.LooperProto looper = 46;
  bool has_looper() const;
  void clear_looper();
  const ::android::os::LooperProto& looper() const;
  ::android::os::LooperProto* release_looper();
  ::android::os::LooperProto* mutable_looper();
  void set_allocated_looper(::android::os::LooperProto* looper);

  // optional .com.android.server.power.WirelessChargerDetectorProto wireless_charger_detector = 49;
  bool has_wireless_charger_detector() const;
  void clear_wireless_charger_detector();
  const ::com::android::server::power::WirelessChargerDetectorProto& wireless_charger_detector() const;
  ::com::android::server::power::WirelessChargerDetectorProto* release_wireless_charger_detector();
  ::com::android::server::power::WirelessChargerDetectorProto* mutable_wireless_charger_detector();
  void set_allocated_wireless_charger_detector(::com::android::server::power::WirelessChargerDetectorProto* wireless_charger_detector);

  // optional .com.android.server.power.BatterySaverStateMachineProto battery_saver_state_machine = 50;
  bool has_battery_saver_state_machine() const;
  void clear_battery_saver_state_machine();
  const ::com::android::server::power::BatterySaverStateMachineProto& battery_saver_state_machine() const;
  ::com::android::server::power::BatterySaverStateMachineProto* release_battery_saver_state_machine();
  ::com::android::server::power::BatterySaverStateMachineProto* mutable_battery_saver_state_machine();
  void set_allocated_battery_saver_state_machine(::com::android::server::power::BatterySaverStateMachineProto* battery_saver_state_machine);

  // optional int32 dirty = 2;
  bool has_dirty() const;
  void clear_dirty();
  ::PROTOBUF_NAMESPACE_ID::int32 dirty() const;
  void set_dirty(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 3;
  bool has_wakefulness() const;
  void clear_wakefulness();
  ::android::os::PowerManagerInternalProto_Wakefulness wakefulness() const;
  void set_wakefulness(::android::os::PowerManagerInternalProto_Wakefulness value);

  // optional .android.os.BatteryPluggedStateEnum plug_type = 6;
  bool has_plug_type() const;
  void clear_plug_type();
  ::android::os::BatteryPluggedStateEnum plug_type() const;
  void set_plug_type(::android::os::BatteryPluggedStateEnum value);

  // optional int32 battery_level = 7;
  bool has_battery_level() const;
  void clear_battery_level();
  ::PROTOBUF_NAMESPACE_ID::int32 battery_level() const;
  void set_battery_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_wakefulness_changing = 4;
  bool has_is_wakefulness_changing() const;
  void clear_is_wakefulness_changing();
  bool is_wakefulness_changing() const;
  void set_is_wakefulness_changing(bool value);

  // optional bool is_powered = 5;
  bool has_is_powered() const;
  void clear_is_powered();
  bool is_powered() const;
  void set_is_powered(bool value);

  // optional bool is_stay_on = 10;
  bool has_is_stay_on() const;
  void clear_is_stay_on();
  bool is_stay_on() const;
  void set_is_stay_on(bool value);

  // optional bool is_proximity_positive = 11;
  bool has_is_proximity_positive() const;
  void clear_is_proximity_positive();
  bool is_proximity_positive() const;
  void set_is_proximity_positive(bool value);

  // optional int32 battery_level_when_dream_started = 8;
  bool has_battery_level_when_dream_started() const;
  void clear_battery_level_when_dream_started();
  ::PROTOBUF_NAMESPACE_ID::int32 battery_level_when_dream_started() const;
  void set_battery_level_when_dream_started(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.content.IntentProto.DockState dock_state = 9;
  bool has_dock_state() const;
  void clear_dock_state();
  ::android::content::IntentProto_DockState dock_state() const;
  void set_dock_state(::android::content::IntentProto_DockState value);

  // optional bool is_boot_completed = 12;
  bool has_is_boot_completed() const;
  void clear_is_boot_completed();
  bool is_boot_completed() const;
  void set_is_boot_completed(bool value);

  // optional bool is_system_ready = 13;
  bool has_is_system_ready() const;
  void clear_is_system_ready();
  bool is_system_ready() const;
  void set_is_system_ready(bool value);

  // optional bool is_hal_auto_suspend_mode_enabled = 14;
  bool has_is_hal_auto_suspend_mode_enabled() const;
  void clear_is_hal_auto_suspend_mode_enabled();
  bool is_hal_auto_suspend_mode_enabled() const;
  void set_is_hal_auto_suspend_mode_enabled(bool value);

  // optional bool is_hal_auto_interactive_mode_enabled = 15;
  bool has_is_hal_auto_interactive_mode_enabled() const;
  void clear_is_hal_auto_interactive_mode_enabled();
  bool is_hal_auto_interactive_mode_enabled() const;
  void set_is_hal_auto_interactive_mode_enabled(bool value);

  // optional int64 notify_long_scheduled_ms = 17;
  bool has_notify_long_scheduled_ms() const;
  void clear_notify_long_scheduled_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 notify_long_scheduled_ms() const;
  void set_notify_long_scheduled_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 notify_long_dispatched_ms = 18;
  bool has_notify_long_dispatched_ms() const;
  void clear_notify_long_dispatched_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 notify_long_dispatched_ms() const;
  void set_notify_long_dispatched_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 notify_long_next_check_ms = 19;
  bool has_notify_long_next_check_ms() const;
  void clear_notify_long_next_check_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 notify_long_next_check_ms() const;
  void set_notify_long_next_check_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_request_wait_for_negative_proximity = 21;
  bool has_is_request_wait_for_negative_proximity() const;
  void clear_is_request_wait_for_negative_proximity();
  bool is_request_wait_for_negative_proximity() const;
  void set_is_request_wait_for_negative_proximity(bool value);

  // optional bool is_sandman_scheduled = 22;
  bool has_is_sandman_scheduled() const;
  void clear_is_sandman_scheduled();
  bool is_sandman_scheduled() const;
  void set_is_sandman_scheduled(bool value);

  // optional bool is_sandman_summoned = 23;
  bool has_is_sandman_summoned() const;
  void clear_is_sandman_summoned();
  bool is_sandman_summoned() const;
  void set_is_sandman_summoned(bool value);

  // optional bool is_battery_level_low = 24;
  bool has_is_battery_level_low() const;
  void clear_is_battery_level_low();
  bool is_battery_level_low() const;
  void set_is_battery_level_low(bool value);

  // optional bool is_light_device_idle_mode = 25;
  bool has_is_light_device_idle_mode() const;
  void clear_is_light_device_idle_mode();
  bool is_light_device_idle_mode() const;
  void set_is_light_device_idle_mode(bool value);

  // optional bool is_device_idle_mode = 26;
  bool has_is_device_idle_mode() const;
  void clear_is_device_idle_mode();
  bool is_device_idle_mode() const;
  void set_is_device_idle_mode(bool value);

  // optional bool is_screen_brightness_boost_in_progress = 35;
  bool has_is_screen_brightness_boost_in_progress() const;
  void clear_is_screen_brightness_boost_in_progress();
  bool is_screen_brightness_boost_in_progress() const;
  void set_is_screen_brightness_boost_in_progress(bool value);

  // optional bool is_display_ready = 36;
  bool has_is_display_ready() const;
  void clear_is_display_ready();
  bool is_display_ready() const;
  void set_is_display_ready(bool value);

  // optional int64 last_wake_time_ms = 29;
  bool has_last_wake_time_ms() const;
  void clear_last_wake_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_wake_time_ms() const;
  void set_last_wake_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_sleep_time_ms = 30;
  bool has_last_sleep_time_ms() const;
  void clear_last_sleep_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_sleep_time_ms() const;
  void set_last_sleep_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_user_activity_time_ms = 31 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_last_user_activity_time_ms() const;
  PROTOBUF_DEPRECATED void clear_last_user_activity_time_ms();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 last_user_activity_time_ms() const;
  PROTOBUF_DEPRECATED void set_last_user_activity_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_user_activity_time_no_change_lights_ms = 32 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_last_user_activity_time_no_change_lights_ms() const;
  PROTOBUF_DEPRECATED void clear_last_user_activity_time_no_change_lights_ms();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 last_user_activity_time_no_change_lights_ms() const;
  PROTOBUF_DEPRECATED void set_last_user_activity_time_no_change_lights_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_interactive_power_hint_time_ms = 33;
  bool has_last_interactive_power_hint_time_ms() const;
  void clear_last_interactive_power_hint_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_interactive_power_hint_time_ms() const;
  void set_last_interactive_power_hint_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_screen_brightness_boost_time_ms = 34;
  bool has_last_screen_brightness_boost_time_ms() const;
  void clear_last_screen_brightness_boost_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_screen_brightness_boost_time_ms() const;
  void set_last_screen_brightness_boost_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional sint32 sleep_timeout_ms = 40;
  bool has_sleep_timeout_ms() const;
  void clear_sleep_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 sleep_timeout_ms() const;
  void set_sleep_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_holding_wake_lock_suspend_blocker = 37;
  bool has_is_holding_wake_lock_suspend_blocker() const;
  void clear_is_holding_wake_lock_suspend_blocker();
  bool is_holding_wake_lock_suspend_blocker() const;
  void set_is_holding_wake_lock_suspend_blocker(bool value);

  // optional bool is_holding_display_suspend_blocker = 38;
  bool has_is_holding_display_suspend_blocker() const;
  void clear_is_holding_display_suspend_blocker();
  bool is_holding_display_suspend_blocker() const;
  void set_is_holding_display_suspend_blocker(bool value);

  // optional bool are_uids_changing = 43;
  bool has_are_uids_changing() const;
  void clear_are_uids_changing();
  bool are_uids_changing() const;
  void set_are_uids_changing(bool value);

  // optional bool are_uids_changed = 44;
  bool has_are_uids_changed() const;
  void clear_are_uids_changed();
  bool are_uids_changed() const;
  void set_are_uids_changed(bool value);

  // optional int32 screen_off_timeout_ms = 41;
  bool has_screen_off_timeout_ms() const;
  void clear_screen_off_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 screen_off_timeout_ms() const;
  void set_screen_off_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 screen_dim_duration_ms = 42;
  bool has_screen_dim_duration_ms() const;
  void clear_screen_dim_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 screen_dim_duration_ms() const;
  void set_screen_dim_duration_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 enhanced_discharge_time_elapsed = 52;
  bool has_enhanced_discharge_time_elapsed() const;
  void clear_enhanced_discharge_time_elapsed();
  ::PROTOBUF_NAMESPACE_ID::int64 enhanced_discharge_time_elapsed() const;
  void set_enhanced_discharge_time_elapsed(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional sint32 attentive_timeout_ms = 51;
  bool has_attentive_timeout_ms() const;
  void clear_attentive_timeout_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 attentive_timeout_ms() const;
  void set_attentive_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_enhanced_discharge_prediction_personalized = 54;
  bool has_is_enhanced_discharge_prediction_personalized() const;
  void clear_is_enhanced_discharge_prediction_personalized();
  bool is_enhanced_discharge_prediction_personalized() const;
  void set_is_enhanced_discharge_prediction_personalized(bool value);

  // optional int64 last_enhanced_discharge_time_updated_elapsed = 53;
  bool has_last_enhanced_discharge_time_updated_elapsed() const;
  void clear_last_enhanced_discharge_time_updated_elapsed();
  ::PROTOBUF_NAMESPACE_ID::int64 last_enhanced_discharge_time_updated_elapsed() const;
  void set_last_enhanced_discharge_time_updated_elapsed(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.PowerManagerServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto > user_activity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > device_idle_whitelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > device_idle_temp_whitelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto > uid_states_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::WakeLockProto > wake_locks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::SuspendBlockerProto > suspend_blockers_;
  ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* constants_;
  ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* active_wake_locks_;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* settings_and_configuration_;
  ::android::os::LooperProto* looper_;
  ::com::android::server::power::WirelessChargerDetectorProto* wireless_charger_detector_;
  ::com::android::server::power::BatterySaverStateMachineProto* battery_saver_state_machine_;
  ::PROTOBUF_NAMESPACE_ID::int32 dirty_;
  int wakefulness_;
  int plug_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 battery_level_;
  bool is_wakefulness_changing_;
  bool is_powered_;
  bool is_stay_on_;
  bool is_proximity_positive_;
  ::PROTOBUF_NAMESPACE_ID::int32 battery_level_when_dream_started_;
  int dock_state_;
  bool is_boot_completed_;
  bool is_system_ready_;
  bool is_hal_auto_suspend_mode_enabled_;
  bool is_hal_auto_interactive_mode_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int64 notify_long_scheduled_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 notify_long_dispatched_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 notify_long_next_check_ms_;
  bool is_request_wait_for_negative_proximity_;
  bool is_sandman_scheduled_;
  bool is_sandman_summoned_;
  bool is_battery_level_low_;
  bool is_light_device_idle_mode_;
  bool is_device_idle_mode_;
  bool is_screen_brightness_boost_in_progress_;
  bool is_display_ready_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_wake_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_sleep_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_user_activity_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_user_activity_time_no_change_lights_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_interactive_power_hint_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_screen_brightness_boost_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 sleep_timeout_ms_;
  bool is_holding_wake_lock_suspend_blocker_;
  bool is_holding_display_suspend_blocker_;
  bool are_uids_changing_;
  bool are_uids_changed_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_off_timeout_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_dim_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 enhanced_discharge_time_elapsed_;
  ::PROTOBUF_NAMESPACE_ID::int32 attentive_timeout_ms_;
  bool is_enhanced_discharge_prediction_personalized_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_enhanced_discharge_time_updated_elapsed_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class SuspendBlockerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.SuspendBlockerProto) */ {
 public:
  SuspendBlockerProto();
  virtual ~SuspendBlockerProto();

  SuspendBlockerProto(const SuspendBlockerProto& from);
  SuspendBlockerProto(SuspendBlockerProto&& from) noexcept
    : SuspendBlockerProto() {
    *this = ::std::move(from);
  }

  inline SuspendBlockerProto& operator=(const SuspendBlockerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendBlockerProto& operator=(SuspendBlockerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SuspendBlockerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuspendBlockerProto* internal_default_instance() {
    return reinterpret_cast<const SuspendBlockerProto*>(
               &_SuspendBlockerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SuspendBlockerProto& a, SuspendBlockerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendBlockerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuspendBlockerProto* New() const final {
    return CreateMaybeMessage<SuspendBlockerProto>(nullptr);
  }

  SuspendBlockerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuspendBlockerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SuspendBlockerProto& from);
  void MergeFrom(const SuspendBlockerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuspendBlockerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.SuspendBlockerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kReferenceCountFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 reference_count = 2;
  bool has_reference_count() const;
  void clear_reference_count();
  ::PROTOBUF_NAMESPACE_ID::int32 reference_count() const;
  void set_reference_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.SuspendBlockerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 reference_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WakeLockProto_WakeLockFlagsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.WakeLockProto.WakeLockFlagsProto) */ {
 public:
  WakeLockProto_WakeLockFlagsProto();
  virtual ~WakeLockProto_WakeLockFlagsProto();

  WakeLockProto_WakeLockFlagsProto(const WakeLockProto_WakeLockFlagsProto& from);
  WakeLockProto_WakeLockFlagsProto(WakeLockProto_WakeLockFlagsProto&& from) noexcept
    : WakeLockProto_WakeLockFlagsProto() {
    *this = ::std::move(from);
  }

  inline WakeLockProto_WakeLockFlagsProto& operator=(const WakeLockProto_WakeLockFlagsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WakeLockProto_WakeLockFlagsProto& operator=(WakeLockProto_WakeLockFlagsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WakeLockProto_WakeLockFlagsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WakeLockProto_WakeLockFlagsProto* internal_default_instance() {
    return reinterpret_cast<const WakeLockProto_WakeLockFlagsProto*>(
               &_WakeLockProto_WakeLockFlagsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WakeLockProto_WakeLockFlagsProto& a, WakeLockProto_WakeLockFlagsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WakeLockProto_WakeLockFlagsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WakeLockProto_WakeLockFlagsProto* New() const final {
    return CreateMaybeMessage<WakeLockProto_WakeLockFlagsProto>(nullptr);
  }

  WakeLockProto_WakeLockFlagsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WakeLockProto_WakeLockFlagsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WakeLockProto_WakeLockFlagsProto& from);
  void MergeFrom(const WakeLockProto_WakeLockFlagsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WakeLockProto_WakeLockFlagsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.WakeLockProto.WakeLockFlagsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsAcquireCausesWakeupFieldNumber = 1,
    kIsOnAfterReleaseFieldNumber = 2,
  };
  // optional bool is_acquire_causes_wakeup = 1;
  bool has_is_acquire_causes_wakeup() const;
  void clear_is_acquire_causes_wakeup();
  bool is_acquire_causes_wakeup() const;
  void set_is_acquire_causes_wakeup(bool value);

  // optional bool is_on_after_release = 2;
  bool has_is_on_after_release() const;
  void clear_is_on_after_release();
  bool is_on_after_release() const;
  void set_is_on_after_release(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.WakeLockProto.WakeLockFlagsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_acquire_causes_wakeup_;
  bool is_on_after_release_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class WakeLockProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.WakeLockProto) */ {
 public:
  WakeLockProto();
  virtual ~WakeLockProto();

  WakeLockProto(const WakeLockProto& from);
  WakeLockProto(WakeLockProto&& from) noexcept
    : WakeLockProto() {
    *this = ::std::move(from);
  }

  inline WakeLockProto& operator=(const WakeLockProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WakeLockProto& operator=(WakeLockProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WakeLockProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WakeLockProto* internal_default_instance() {
    return reinterpret_cast<const WakeLockProto*>(
               &_WakeLockProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WakeLockProto& a, WakeLockProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WakeLockProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WakeLockProto* New() const final {
    return CreateMaybeMessage<WakeLockProto>(nullptr);
  }

  WakeLockProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WakeLockProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WakeLockProto& from);
  void MergeFrom(const WakeLockProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WakeLockProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.WakeLockProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WakeLockProto_WakeLockFlagsProto WakeLockFlagsProto;

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kWorkSourceFieldNumber = 9,
    kAcqMsFieldNumber = 5,
    kIsDisabledFieldNumber = 4,
    kIsNotifiedLongFieldNumber = 6,
    kUidFieldNumber = 7,
    kPidFieldNumber = 8,
    kLockLevelFieldNumber = 1,
  };
  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional .com.android.server.power.WakeLockProto.WakeLockFlagsProto flags = 3;
  bool has_flags() const;
  void clear_flags();
  const ::com::android::server::power::WakeLockProto_WakeLockFlagsProto& flags() const;
  ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* release_flags();
  ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* mutable_flags();
  void set_allocated_flags(::com::android::server::power::WakeLockProto_WakeLockFlagsProto* flags);

  // optional .android.os.WorkSourceProto work_source = 9;
  bool has_work_source() const;
  void clear_work_source();
  const ::android::os::WorkSourceProto& work_source() const;
  ::android::os::WorkSourceProto* release_work_source();
  ::android::os::WorkSourceProto* mutable_work_source();
  void set_allocated_work_source(::android::os::WorkSourceProto* work_source);

  // optional int64 acq_ms = 5;
  bool has_acq_ms() const;
  void clear_acq_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 acq_ms() const;
  void set_acq_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_disabled = 4;
  bool has_is_disabled() const;
  void clear_is_disabled();
  bool is_disabled() const;
  void set_is_disabled(bool value);

  // optional bool is_notified_long = 6;
  bool has_is_notified_long() const;
  void clear_is_notified_long();
  bool is_notified_long() const;
  void set_is_notified_long(bool value);

  // optional int32 uid = 7;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 pid = 8;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.WakeLockLevelEnum lock_level = 1;
  bool has_lock_level() const;
  void clear_lock_level();
  ::android::os::WakeLockLevelEnum lock_level() const;
  void set_lock_level(::android::os::WakeLockLevelEnum value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.WakeLockProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* flags_;
  ::android::os::WorkSourceProto* work_source_;
  ::PROTOBUF_NAMESPACE_ID::int64 acq_ms_;
  bool is_disabled_;
  bool is_notified_long_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  int lock_level_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto) */ {
 public:
  PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto();
  virtual ~PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto();

  PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto(const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& from);
  PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto(PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto&& from) noexcept
    : PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto() {
    *this = ::std::move(from);
  }

  inline PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& operator=(const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& operator=(PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* internal_default_instance() {
    return reinterpret_cast<const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto*>(
               &_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& a, PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* New() const final {
    return CreateMaybeMessage<PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto>(nullptr);
  }

  PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& from);
  void MergeFrom(const PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsStayOnWhilePluggedInAcFieldNumber = 1,
    kIsStayOnWhilePluggedInUsbFieldNumber = 2,
    kIsStayOnWhilePluggedInWirelessFieldNumber = 3,
  };
  // optional bool is_stay_on_while_plugged_in_ac = 1;
  bool has_is_stay_on_while_plugged_in_ac() const;
  void clear_is_stay_on_while_plugged_in_ac();
  bool is_stay_on_while_plugged_in_ac() const;
  void set_is_stay_on_while_plugged_in_ac(bool value);

  // optional bool is_stay_on_while_plugged_in_usb = 2;
  bool has_is_stay_on_while_plugged_in_usb() const;
  void clear_is_stay_on_while_plugged_in_usb();
  bool is_stay_on_while_plugged_in_usb() const;
  void set_is_stay_on_while_plugged_in_usb(bool value);

  // optional bool is_stay_on_while_plugged_in_wireless = 3;
  bool has_is_stay_on_while_plugged_in_wireless() const;
  void clear_is_stay_on_while_plugged_in_wireless();
  bool is_stay_on_while_plugged_in_wireless() const;
  void set_is_stay_on_while_plugged_in_wireless(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_stay_on_while_plugged_in_ac_;
  bool is_stay_on_while_plugged_in_usb_;
  bool is_stay_on_while_plugged_in_wireless_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto) */ {
 public:
  PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto();
  virtual ~PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto();

  PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto(const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& from);
  PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto(PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto&& from) noexcept
    : PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto() {
    *this = ::std::move(from);
  }

  inline PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& operator=(const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& operator=(PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* internal_default_instance() {
    return reinterpret_cast<const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto*>(
               &_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& a, PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* New() const final {
    return CreateMaybeMessage<PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto>(nullptr);
  }

  PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& from);
  void MergeFrom(const PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingDefaultFloatFieldNumber = 6,
    kSettingMinimumFloatFieldNumber = 4,
    kSettingMaximumFloatFieldNumber = 5,
  };
  // optional float setting_default_float = 6;
  bool has_setting_default_float() const;
  void clear_setting_default_float();
  float setting_default_float() const;
  void set_setting_default_float(float value);

  // optional float setting_minimum_float = 4;
  bool has_setting_minimum_float() const;
  void clear_setting_minimum_float();
  float setting_minimum_float() const;
  void set_setting_minimum_float(float value);

  // optional float setting_maximum_float = 5;
  bool has_setting_maximum_float() const;
  void clear_setting_maximum_float();
  float setting_maximum_float() const;
  void set_setting_maximum_float(float value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float setting_default_float_;
  float setting_minimum_float_;
  float setting_maximum_float_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class PowerServiceSettingsAndConfigurationDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto) */ {
 public:
  PowerServiceSettingsAndConfigurationDumpProto();
  virtual ~PowerServiceSettingsAndConfigurationDumpProto();

  PowerServiceSettingsAndConfigurationDumpProto(const PowerServiceSettingsAndConfigurationDumpProto& from);
  PowerServiceSettingsAndConfigurationDumpProto(PowerServiceSettingsAndConfigurationDumpProto&& from) noexcept
    : PowerServiceSettingsAndConfigurationDumpProto() {
    *this = ::std::move(from);
  }

  inline PowerServiceSettingsAndConfigurationDumpProto& operator=(const PowerServiceSettingsAndConfigurationDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerServiceSettingsAndConfigurationDumpProto& operator=(PowerServiceSettingsAndConfigurationDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PowerServiceSettingsAndConfigurationDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerServiceSettingsAndConfigurationDumpProto* internal_default_instance() {
    return reinterpret_cast<const PowerServiceSettingsAndConfigurationDumpProto*>(
               &_PowerServiceSettingsAndConfigurationDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PowerServiceSettingsAndConfigurationDumpProto& a, PowerServiceSettingsAndConfigurationDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerServiceSettingsAndConfigurationDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerServiceSettingsAndConfigurationDumpProto* New() const final {
    return CreateMaybeMessage<PowerServiceSettingsAndConfigurationDumpProto>(nullptr);
  }

  PowerServiceSettingsAndConfigurationDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerServiceSettingsAndConfigurationDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PowerServiceSettingsAndConfigurationDumpProto& from);
  void MergeFrom(const PowerServiceSettingsAndConfigurationDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerServiceSettingsAndConfigurationDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto StayOnWhilePluggedInProto;
  typedef PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto ScreenBrightnessSettingLimitsProto;

  // accessors -------------------------------------------------------

  enum : int {
    kStayOnWhilePluggedInFieldNumber = 26,
    kScreenBrightnessSettingLimitsFieldNumber = 33,
    kIsDecoupleHalAutoSuspendModeFromDisplayConfigFieldNumber = 1,
    kIsDecoupleHalInteractiveModeFromDisplayConfigFieldNumber = 2,
    kIsWakeUpWhenPluggedOrUnpluggedConfigFieldNumber = 3,
    kIsWakeUpWhenPluggedOrUnpluggedInTheaterModeConfigFieldNumber = 4,
    kIsTheaterModeEnabledFieldNumber = 5,
    kIsSuspendWhenScreenOffDueToProximityConfigFieldNumber = 6,
    kAreDreamsSupportedConfigFieldNumber = 7,
    kAreDreamsEnabledByDefaultConfigFieldNumber = 8,
    kAreDreamsActivatedOnSleepByDefaultConfigFieldNumber = 9,
    kAreDreamsActivatedOnDockByDefaultConfigFieldNumber = 10,
    kAreDreamsEnabledOnBatteryConfigFieldNumber = 11,
    kAreDreamsEnabledSettingFieldNumber = 15,
    kDreamsBatteryLevelMinimumWhenPoweredConfigFieldNumber = 12,
    kDreamsBatteryLevelMinimumWhenNotPoweredConfigFieldNumber = 13,
    kDreamsBatteryLevelDrainCutoffConfigFieldNumber = 14,
    kMinimumScreenOffTimeoutConfigMsFieldNumber = 19,
    kAreDreamsActivateOnSleepSettingFieldNumber = 16,
    kAreDreamsActivateOnDockSettingFieldNumber = 17,
    kIsDozeAfterScreenOffConfigFieldNumber = 18,
    kIsMaximumScreenOffTimeoutFromDeviceAdminEnforcedLockedFieldNumber = 25,
    kMaximumScreenDimDurationConfigMsFieldNumber = 20,
    kMaximumScreenDimRatioConfigFieldNumber = 21,
    kScreenOffTimeoutSettingMsFieldNumber = 22,
    kSleepTimeoutSettingMsFieldNumber = 23,
    kMaximumScreenOffTimeoutFromDeviceAdminMsFieldNumber = 24,
    kScreenBrightnessModeSettingFieldNumber = 27,
    kUserActivityTimeoutOverrideFromWindowManagerMsFieldNumber = 29,
    kScreenBrightnessOverrideFromWindowManagerFieldNumber = 28,
    kDozeScreenStateOverrideFromDreamManagerFieldNumber = 31,
    kDozedScreenBrightnessOverrideFromDreamManagerFieldNumber = 32,
    kIsUserInactiveOverrideFromWindowManagerFieldNumber = 30,
    kIsDoubleTapWakeEnabledFieldNumber = 34,
    kIsVrModeEnabledFieldNumber = 35,
    kDrawWakeLockOverrideFromSidekickFieldNumber = 36,
    kAttentiveTimeoutSettingMsFieldNumber = 37,
    kAttentiveTimeoutConfigMsFieldNumber = 38,
    kAttentiveWarningDurationConfigMsFieldNumber = 39,
  };
  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto stay_on_while_plugged_in = 26;
  bool has_stay_on_while_plugged_in() const;
  void clear_stay_on_while_plugged_in();
  const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& stay_on_while_plugged_in() const;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* release_stay_on_while_plugged_in();
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* mutable_stay_on_while_plugged_in();
  void set_allocated_stay_on_while_plugged_in(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* stay_on_while_plugged_in);

  // optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto screen_brightness_setting_limits = 33;
  bool has_screen_brightness_setting_limits() const;
  void clear_screen_brightness_setting_limits();
  const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& screen_brightness_setting_limits() const;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* release_screen_brightness_setting_limits();
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* mutable_screen_brightness_setting_limits();
  void set_allocated_screen_brightness_setting_limits(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* screen_brightness_setting_limits);

  // optional bool is_decouple_hal_auto_suspend_mode_from_display_config = 1;
  bool has_is_decouple_hal_auto_suspend_mode_from_display_config() const;
  void clear_is_decouple_hal_auto_suspend_mode_from_display_config();
  bool is_decouple_hal_auto_suspend_mode_from_display_config() const;
  void set_is_decouple_hal_auto_suspend_mode_from_display_config(bool value);

  // optional bool is_decouple_hal_interactive_mode_from_display_config = 2;
  bool has_is_decouple_hal_interactive_mode_from_display_config() const;
  void clear_is_decouple_hal_interactive_mode_from_display_config();
  bool is_decouple_hal_interactive_mode_from_display_config() const;
  void set_is_decouple_hal_interactive_mode_from_display_config(bool value);

  // optional bool is_wake_up_when_plugged_or_unplugged_config = 3;
  bool has_is_wake_up_when_plugged_or_unplugged_config() const;
  void clear_is_wake_up_when_plugged_or_unplugged_config();
  bool is_wake_up_when_plugged_or_unplugged_config() const;
  void set_is_wake_up_when_plugged_or_unplugged_config(bool value);

  // optional bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config = 4;
  bool has_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config() const;
  void clear_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config();
  bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config() const;
  void set_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config(bool value);

  // optional bool is_theater_mode_enabled = 5;
  bool has_is_theater_mode_enabled() const;
  void clear_is_theater_mode_enabled();
  bool is_theater_mode_enabled() const;
  void set_is_theater_mode_enabled(bool value);

  // optional bool is_suspend_when_screen_off_due_to_proximity_config = 6;
  bool has_is_suspend_when_screen_off_due_to_proximity_config() const;
  void clear_is_suspend_when_screen_off_due_to_proximity_config();
  bool is_suspend_when_screen_off_due_to_proximity_config() const;
  void set_is_suspend_when_screen_off_due_to_proximity_config(bool value);

  // optional bool are_dreams_supported_config = 7;
  bool has_are_dreams_supported_config() const;
  void clear_are_dreams_supported_config();
  bool are_dreams_supported_config() const;
  void set_are_dreams_supported_config(bool value);

  // optional bool are_dreams_enabled_by_default_config = 8;
  bool has_are_dreams_enabled_by_default_config() const;
  void clear_are_dreams_enabled_by_default_config();
  bool are_dreams_enabled_by_default_config() const;
  void set_are_dreams_enabled_by_default_config(bool value);

  // optional bool are_dreams_activated_on_sleep_by_default_config = 9;
  bool has_are_dreams_activated_on_sleep_by_default_config() const;
  void clear_are_dreams_activated_on_sleep_by_default_config();
  bool are_dreams_activated_on_sleep_by_default_config() const;
  void set_are_dreams_activated_on_sleep_by_default_config(bool value);

  // optional bool are_dreams_activated_on_dock_by_default_config = 10;
  bool has_are_dreams_activated_on_dock_by_default_config() const;
  void clear_are_dreams_activated_on_dock_by_default_config();
  bool are_dreams_activated_on_dock_by_default_config() const;
  void set_are_dreams_activated_on_dock_by_default_config(bool value);

  // optional bool are_dreams_enabled_on_battery_config = 11;
  bool has_are_dreams_enabled_on_battery_config() const;
  void clear_are_dreams_enabled_on_battery_config();
  bool are_dreams_enabled_on_battery_config() const;
  void set_are_dreams_enabled_on_battery_config(bool value);

  // optional bool are_dreams_enabled_setting = 15;
  bool has_are_dreams_enabled_setting() const;
  void clear_are_dreams_enabled_setting();
  bool are_dreams_enabled_setting() const;
  void set_are_dreams_enabled_setting(bool value);

  // optional sint32 dreams_battery_level_minimum_when_powered_config = 12;
  bool has_dreams_battery_level_minimum_when_powered_config() const;
  void clear_dreams_battery_level_minimum_when_powered_config();
  ::PROTOBUF_NAMESPACE_ID::int32 dreams_battery_level_minimum_when_powered_config() const;
  void set_dreams_battery_level_minimum_when_powered_config(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 dreams_battery_level_minimum_when_not_powered_config = 13;
  bool has_dreams_battery_level_minimum_when_not_powered_config() const;
  void clear_dreams_battery_level_minimum_when_not_powered_config();
  ::PROTOBUF_NAMESPACE_ID::int32 dreams_battery_level_minimum_when_not_powered_config() const;
  void set_dreams_battery_level_minimum_when_not_powered_config(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 dreams_battery_level_drain_cutoff_config = 14;
  bool has_dreams_battery_level_drain_cutoff_config() const;
  void clear_dreams_battery_level_drain_cutoff_config();
  ::PROTOBUF_NAMESPACE_ID::int32 dreams_battery_level_drain_cutoff_config() const;
  void set_dreams_battery_level_drain_cutoff_config(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 minimum_screen_off_timeout_config_ms = 19;
  bool has_minimum_screen_off_timeout_config_ms() const;
  void clear_minimum_screen_off_timeout_config_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_screen_off_timeout_config_ms() const;
  void set_minimum_screen_off_timeout_config_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool are_dreams_activate_on_sleep_setting = 16;
  bool has_are_dreams_activate_on_sleep_setting() const;
  void clear_are_dreams_activate_on_sleep_setting();
  bool are_dreams_activate_on_sleep_setting() const;
  void set_are_dreams_activate_on_sleep_setting(bool value);

  // optional bool are_dreams_activate_on_dock_setting = 17;
  bool has_are_dreams_activate_on_dock_setting() const;
  void clear_are_dreams_activate_on_dock_setting();
  bool are_dreams_activate_on_dock_setting() const;
  void set_are_dreams_activate_on_dock_setting(bool value);

  // optional bool is_doze_after_screen_off_config = 18;
  bool has_is_doze_after_screen_off_config() const;
  void clear_is_doze_after_screen_off_config();
  bool is_doze_after_screen_off_config() const;
  void set_is_doze_after_screen_off_config(bool value);

  // optional bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked = 25;
  bool has_is_maximum_screen_off_timeout_from_device_admin_enforced_locked() const;
  void clear_is_maximum_screen_off_timeout_from_device_admin_enforced_locked();
  bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked() const;
  void set_is_maximum_screen_off_timeout_from_device_admin_enforced_locked(bool value);

  // optional int32 maximum_screen_dim_duration_config_ms = 20;
  bool has_maximum_screen_dim_duration_config_ms() const;
  void clear_maximum_screen_dim_duration_config_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_screen_dim_duration_config_ms() const;
  void set_maximum_screen_dim_duration_config_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float maximum_screen_dim_ratio_config = 21;
  bool has_maximum_screen_dim_ratio_config() const;
  void clear_maximum_screen_dim_ratio_config();
  float maximum_screen_dim_ratio_config() const;
  void set_maximum_screen_dim_ratio_config(float value);

  // optional int32 screen_off_timeout_setting_ms = 22;
  bool has_screen_off_timeout_setting_ms() const;
  void clear_screen_off_timeout_setting_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 screen_off_timeout_setting_ms() const;
  void set_screen_off_timeout_setting_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 sleep_timeout_setting_ms = 23;
  bool has_sleep_timeout_setting_ms() const;
  void clear_sleep_timeout_setting_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 sleep_timeout_setting_ms() const;
  void set_sleep_timeout_setting_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 maximum_screen_off_timeout_from_device_admin_ms = 24;
  bool has_maximum_screen_off_timeout_from_device_admin_ms() const;
  void clear_maximum_screen_off_timeout_from_device_admin_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_screen_off_timeout_from_device_admin_ms() const;
  void set_maximum_screen_off_timeout_from_device_admin_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.providers.settings.SettingsProto.ScreenBrightnessMode screen_brightness_mode_setting = 27;
  bool has_screen_brightness_mode_setting() const;
  void clear_screen_brightness_mode_setting();
  ::android::providers::settings::SettingsProto_ScreenBrightnessMode screen_brightness_mode_setting() const;
  void set_screen_brightness_mode_setting(::android::providers::settings::SettingsProto_ScreenBrightnessMode value);

  // optional sint64 user_activity_timeout_override_from_window_manager_ms = 29;
  bool has_user_activity_timeout_override_from_window_manager_ms() const;
  void clear_user_activity_timeout_override_from_window_manager_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 user_activity_timeout_override_from_window_manager_ms() const;
  void set_user_activity_timeout_override_from_window_manager_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional sint32 screen_brightness_override_from_window_manager = 28;
  bool has_screen_brightness_override_from_window_manager() const;
  void clear_screen_brightness_override_from_window_manager();
  ::PROTOBUF_NAMESPACE_ID::int32 screen_brightness_override_from_window_manager() const;
  void set_screen_brightness_override_from_window_manager(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.view.DisplayStateEnum doze_screen_state_override_from_dream_manager = 31;
  bool has_doze_screen_state_override_from_dream_manager() const;
  void clear_doze_screen_state_override_from_dream_manager();
  ::android::view::DisplayStateEnum doze_screen_state_override_from_dream_manager() const;
  void set_doze_screen_state_override_from_dream_manager(::android::view::DisplayStateEnum value);

  // optional float dozed_screen_brightness_override_from_dream_manager = 32;
  bool has_dozed_screen_brightness_override_from_dream_manager() const;
  void clear_dozed_screen_brightness_override_from_dream_manager();
  float dozed_screen_brightness_override_from_dream_manager() const;
  void set_dozed_screen_brightness_override_from_dream_manager(float value);

  // optional bool is_user_inactive_override_from_window_manager = 30;
  bool has_is_user_inactive_override_from_window_manager() const;
  void clear_is_user_inactive_override_from_window_manager();
  bool is_user_inactive_override_from_window_manager() const;
  void set_is_user_inactive_override_from_window_manager(bool value);

  // optional bool is_double_tap_wake_enabled = 34;
  bool has_is_double_tap_wake_enabled() const;
  void clear_is_double_tap_wake_enabled();
  bool is_double_tap_wake_enabled() const;
  void set_is_double_tap_wake_enabled(bool value);

  // optional bool is_vr_mode_enabled = 35;
  bool has_is_vr_mode_enabled() const;
  void clear_is_vr_mode_enabled();
  bool is_vr_mode_enabled() const;
  void set_is_vr_mode_enabled(bool value);

  // optional bool draw_wake_lock_override_from_sidekick = 36;
  bool has_draw_wake_lock_override_from_sidekick() const;
  void clear_draw_wake_lock_override_from_sidekick();
  bool draw_wake_lock_override_from_sidekick() const;
  void set_draw_wake_lock_override_from_sidekick(bool value);

  // optional sint32 attentive_timeout_setting_ms = 37;
  bool has_attentive_timeout_setting_ms() const;
  void clear_attentive_timeout_setting_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 attentive_timeout_setting_ms() const;
  void set_attentive_timeout_setting_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 attentive_timeout_config_ms = 38;
  bool has_attentive_timeout_config_ms() const;
  void clear_attentive_timeout_config_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 attentive_timeout_config_ms() const;
  void set_attentive_timeout_config_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 attentive_warning_duration_config_ms = 39;
  bool has_attentive_warning_duration_config_ms() const;
  void clear_attentive_warning_duration_config_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 attentive_warning_duration_config_ms() const;
  void set_attentive_warning_duration_config_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* stay_on_while_plugged_in_;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* screen_brightness_setting_limits_;
  bool is_decouple_hal_auto_suspend_mode_from_display_config_;
  bool is_decouple_hal_interactive_mode_from_display_config_;
  bool is_wake_up_when_plugged_or_unplugged_config_;
  bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_;
  bool is_theater_mode_enabled_;
  bool is_suspend_when_screen_off_due_to_proximity_config_;
  bool are_dreams_supported_config_;
  bool are_dreams_enabled_by_default_config_;
  bool are_dreams_activated_on_sleep_by_default_config_;
  bool are_dreams_activated_on_dock_by_default_config_;
  bool are_dreams_enabled_on_battery_config_;
  bool are_dreams_enabled_setting_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreams_battery_level_minimum_when_powered_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreams_battery_level_minimum_when_not_powered_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 dreams_battery_level_drain_cutoff_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 minimum_screen_off_timeout_config_ms_;
  bool are_dreams_activate_on_sleep_setting_;
  bool are_dreams_activate_on_dock_setting_;
  bool is_doze_after_screen_off_config_;
  bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_screen_dim_duration_config_ms_;
  float maximum_screen_dim_ratio_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_off_timeout_setting_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 sleep_timeout_setting_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_screen_off_timeout_from_device_admin_ms_;
  int screen_brightness_mode_setting_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_activity_timeout_override_from_window_manager_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_brightness_override_from_window_manager_;
  int doze_screen_state_override_from_dream_manager_;
  float dozed_screen_brightness_override_from_dream_manager_;
  bool is_user_inactive_override_from_window_manager_;
  bool is_double_tap_wake_enabled_;
  bool is_vr_mode_enabled_;
  bool draw_wake_lock_override_from_sidekick_;
  ::PROTOBUF_NAMESPACE_ID::int32 attentive_timeout_setting_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 attentive_timeout_config_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 attentive_warning_duration_config_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// -------------------------------------------------------------------

class BatterySaverStateMachineProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.power.BatterySaverStateMachineProto) */ {
 public:
  BatterySaverStateMachineProto();
  virtual ~BatterySaverStateMachineProto();

  BatterySaverStateMachineProto(const BatterySaverStateMachineProto& from);
  BatterySaverStateMachineProto(BatterySaverStateMachineProto&& from) noexcept
    : BatterySaverStateMachineProto() {
    *this = ::std::move(from);
  }

  inline BatterySaverStateMachineProto& operator=(const BatterySaverStateMachineProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatterySaverStateMachineProto& operator=(BatterySaverStateMachineProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BatterySaverStateMachineProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatterySaverStateMachineProto* internal_default_instance() {
    return reinterpret_cast<const BatterySaverStateMachineProto*>(
               &_BatterySaverStateMachineProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BatterySaverStateMachineProto& a, BatterySaverStateMachineProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BatterySaverStateMachineProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatterySaverStateMachineProto* New() const final {
    return CreateMaybeMessage<BatterySaverStateMachineProto>(nullptr);
  }

  BatterySaverStateMachineProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatterySaverStateMachineProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BatterySaverStateMachineProto& from);
  void MergeFrom(const BatterySaverStateMachineProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatterySaverStateMachineProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.power.BatterySaverStateMachineProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef BatterySaverStateMachineProto_StateEnum StateEnum;
  static constexpr StateEnum STATE_UNKNOWN =
    BatterySaverStateMachineProto_StateEnum_STATE_UNKNOWN;
  static constexpr StateEnum STATE_OFF =
    BatterySaverStateMachineProto_StateEnum_STATE_OFF;
  static constexpr StateEnum STATE_MANUAL_ON =
    BatterySaverStateMachineProto_StateEnum_STATE_MANUAL_ON;
  static constexpr StateEnum STATE_AUTOMATIC_ON =
    BatterySaverStateMachineProto_StateEnum_STATE_AUTOMATIC_ON;
  static constexpr StateEnum STATE_OFF_AUTOMATIC_SNOOZED =
    BatterySaverStateMachineProto_StateEnum_STATE_OFF_AUTOMATIC_SNOOZED;
  static constexpr StateEnum STATE_PENDING_STICKY_ON =
    BatterySaverStateMachineProto_StateEnum_STATE_PENDING_STICKY_ON;
  static inline bool StateEnum_IsValid(int value) {
    return BatterySaverStateMachineProto_StateEnum_IsValid(value);
  }
  static constexpr StateEnum StateEnum_MIN =
    BatterySaverStateMachineProto_StateEnum_StateEnum_MIN;
  static constexpr StateEnum StateEnum_MAX =
    BatterySaverStateMachineProto_StateEnum_StateEnum_MAX;
  static constexpr int StateEnum_ARRAYSIZE =
    BatterySaverStateMachineProto_StateEnum_StateEnum_ARRAYSIZE;
  template<typename T>
  static inline const std::string& StateEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StateEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StateEnum_Name.");
    return BatterySaverStateMachineProto_StateEnum_Name(enum_t_value);
  }
  static inline bool StateEnum_Parse(const std::string& name,
      StateEnum* value) {
    return BatterySaverStateMachineProto_StateEnum_Parse(name, value);
  }

  typedef BatterySaverStateMachineProto_AutomaticTriggerEnum AutomaticTriggerEnum;
  static constexpr AutomaticTriggerEnum TRIGGER_PERCENTAGE =
    BatterySaverStateMachineProto_AutomaticTriggerEnum_TRIGGER_PERCENTAGE;
  static constexpr AutomaticTriggerEnum TRIGGER_DYNAMIC =
    BatterySaverStateMachineProto_AutomaticTriggerEnum_TRIGGER_DYNAMIC;
  static inline bool AutomaticTriggerEnum_IsValid(int value) {
    return BatterySaverStateMachineProto_AutomaticTriggerEnum_IsValid(value);
  }
  static constexpr AutomaticTriggerEnum AutomaticTriggerEnum_MIN =
    BatterySaverStateMachineProto_AutomaticTriggerEnum_AutomaticTriggerEnum_MIN;
  static constexpr AutomaticTriggerEnum AutomaticTriggerEnum_MAX =
    BatterySaverStateMachineProto_AutomaticTriggerEnum_AutomaticTriggerEnum_MAX;
  static constexpr int AutomaticTriggerEnum_ARRAYSIZE =
    BatterySaverStateMachineProto_AutomaticTriggerEnum_AutomaticTriggerEnum_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AutomaticTriggerEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutomaticTriggerEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutomaticTriggerEnum_Name.");
    return BatterySaverStateMachineProto_AutomaticTriggerEnum_Name(enum_t_value);
  }
  static inline bool AutomaticTriggerEnum_Parse(const std::string& name,
      AutomaticTriggerEnum* value) {
    return BatterySaverStateMachineProto_AutomaticTriggerEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBootCompletedFieldNumber = 2,
    kSettingsLoadedFieldNumber = 3,
    kBatteryStatusSetFieldNumber = 4,
    kIsPoweredFieldNumber = 6,
    kBatteryLevelFieldNumber = 7,
    kIsBatteryLevelLowFieldNumber = 8,
    kSettingBatterySaverEnabledFieldNumber = 9,
    kSettingBatterySaverEnabledStickyFieldNumber = 10,
    kSettingBatterySaverStickyAutoDisableEnabledFieldNumber = 12,
    kSettingBatterySaverTriggerThresholdFieldNumber = 11,
    kEnabledFieldNumber = 1,
    kIsFullEnabledFieldNumber = 14,
    kIsAdaptiveEnabledFieldNumber = 15,
    kShouldAdvertiseIsEnabledFieldNumber = 16,
    kSettingBatterySaverStickyAutoDisableThresholdFieldNumber = 13,
    kLastAdaptiveBatterySaverChangedExternallyElapsedFieldNumber = 17,
    kStateFieldNumber = 18,
    kSettingAutomaticTriggerFieldNumber = 19,
    kDefaultDynamicDisableThresholdFieldNumber = 20,
    kDynamicDisableThresholdFieldNumber = 21,
    kDynamicBatterySaverEnabledFieldNumber = 22,
  };
  // optional bool boot_completed = 2;
  bool has_boot_completed() const;
  void clear_boot_completed();
  bool boot_completed() const;
  void set_boot_completed(bool value);

  // optional bool settings_loaded = 3;
  bool has_settings_loaded() const;
  void clear_settings_loaded();
  bool settings_loaded() const;
  void set_settings_loaded(bool value);

  // optional bool battery_status_set = 4;
  bool has_battery_status_set() const;
  void clear_battery_status_set();
  bool battery_status_set() const;
  void set_battery_status_set(bool value);

  // optional bool is_powered = 6;
  bool has_is_powered() const;
  void clear_is_powered();
  bool is_powered() const;
  void set_is_powered(bool value);

  // optional int32 battery_level = 7;
  bool has_battery_level() const;
  void clear_battery_level();
  ::PROTOBUF_NAMESPACE_ID::int32 battery_level() const;
  void set_battery_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_battery_level_low = 8;
  bool has_is_battery_level_low() const;
  void clear_is_battery_level_low();
  bool is_battery_level_low() const;
  void set_is_battery_level_low(bool value);

  // optional bool setting_battery_saver_enabled = 9;
  bool has_setting_battery_saver_enabled() const;
  void clear_setting_battery_saver_enabled();
  bool setting_battery_saver_enabled() const;
  void set_setting_battery_saver_enabled(bool value);

  // optional bool setting_battery_saver_enabled_sticky = 10;
  bool has_setting_battery_saver_enabled_sticky() const;
  void clear_setting_battery_saver_enabled_sticky();
  bool setting_battery_saver_enabled_sticky() const;
  void set_setting_battery_saver_enabled_sticky(bool value);

  // optional bool setting_battery_saver_sticky_auto_disable_enabled = 12;
  bool has_setting_battery_saver_sticky_auto_disable_enabled() const;
  void clear_setting_battery_saver_sticky_auto_disable_enabled();
  bool setting_battery_saver_sticky_auto_disable_enabled() const;
  void set_setting_battery_saver_sticky_auto_disable_enabled(bool value);

  // optional int32 setting_battery_saver_trigger_threshold = 11;
  bool has_setting_battery_saver_trigger_threshold() const;
  void clear_setting_battery_saver_trigger_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 setting_battery_saver_trigger_threshold() const;
  void set_setting_battery_saver_trigger_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional bool is_full_enabled = 14;
  bool has_is_full_enabled() const;
  void clear_is_full_enabled();
  bool is_full_enabled() const;
  void set_is_full_enabled(bool value);

  // optional bool is_adaptive_enabled = 15;
  bool has_is_adaptive_enabled() const;
  void clear_is_adaptive_enabled();
  bool is_adaptive_enabled() const;
  void set_is_adaptive_enabled(bool value);

  // optional bool should_advertise_is_enabled = 16;
  bool has_should_advertise_is_enabled() const;
  void clear_should_advertise_is_enabled();
  bool should_advertise_is_enabled() const;
  void set_should_advertise_is_enabled(bool value);

  // optional int32 setting_battery_saver_sticky_auto_disable_threshold = 13;
  bool has_setting_battery_saver_sticky_auto_disable_threshold() const;
  void clear_setting_battery_saver_sticky_auto_disable_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 setting_battery_saver_sticky_auto_disable_threshold() const;
  void set_setting_battery_saver_sticky_auto_disable_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 last_adaptive_battery_saver_changed_externally_elapsed = 17;
  bool has_last_adaptive_battery_saver_changed_externally_elapsed() const;
  void clear_last_adaptive_battery_saver_changed_externally_elapsed();
  ::PROTOBUF_NAMESPACE_ID::int64 last_adaptive_battery_saver_changed_externally_elapsed() const;
  void set_last_adaptive_battery_saver_changed_externally_elapsed(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .com.android.server.power.BatterySaverStateMachineProto.StateEnum state = 18;
  bool has_state() const;
  void clear_state();
  ::com::android::server::power::BatterySaverStateMachineProto_StateEnum state() const;
  void set_state(::com::android::server::power::BatterySaverStateMachineProto_StateEnum value);

  // optional .com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum setting_automatic_trigger = 19;
  bool has_setting_automatic_trigger() const;
  void clear_setting_automatic_trigger();
  ::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum setting_automatic_trigger() const;
  void set_setting_automatic_trigger(::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum value);

  // optional int32 default_dynamic_disable_threshold = 20;
  bool has_default_dynamic_disable_threshold() const;
  void clear_default_dynamic_disable_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 default_dynamic_disable_threshold() const;
  void set_default_dynamic_disable_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 dynamic_disable_threshold = 21;
  bool has_dynamic_disable_threshold() const;
  void clear_dynamic_disable_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 dynamic_disable_threshold() const;
  void set_dynamic_disable_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool dynamic_battery_saver_enabled = 22;
  bool has_dynamic_battery_saver_enabled() const;
  void clear_dynamic_battery_saver_enabled();
  bool dynamic_battery_saver_enabled() const;
  void set_dynamic_battery_saver_enabled(bool value);

  // @@protoc_insertion_point(class_scope:com.android.server.power.BatterySaverStateMachineProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool boot_completed_;
  bool settings_loaded_;
  bool battery_status_set_;
  bool is_powered_;
  ::PROTOBUF_NAMESPACE_ID::int32 battery_level_;
  bool is_battery_level_low_;
  bool setting_battery_saver_enabled_;
  bool setting_battery_saver_enabled_sticky_;
  bool setting_battery_saver_sticky_auto_disable_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 setting_battery_saver_trigger_threshold_;
  bool enabled_;
  bool is_full_enabled_;
  bool is_adaptive_enabled_;
  bool should_advertise_is_enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 setting_battery_saver_sticky_auto_disable_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_adaptive_battery_saver_changed_externally_elapsed_;
  int state_;
  int setting_automatic_trigger_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_dynamic_disable_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynamic_disable_threshold_;
  bool dynamic_battery_saver_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PowerManagerServiceDumpProto_ConstantsProto

// optional bool is_no_cached_wake_locks = 1;
inline bool PowerManagerServiceDumpProto_ConstantsProto::has_is_no_cached_wake_locks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerManagerServiceDumpProto_ConstantsProto::clear_is_no_cached_wake_locks() {
  is_no_cached_wake_locks_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PowerManagerServiceDumpProto_ConstantsProto::is_no_cached_wake_locks() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto.is_no_cached_wake_locks)
  return is_no_cached_wake_locks_;
}
inline void PowerManagerServiceDumpProto_ConstantsProto::set_is_no_cached_wake_locks(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_no_cached_wake_locks_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto.is_no_cached_wake_locks)
}

// -------------------------------------------------------------------

// PowerManagerServiceDumpProto_ActiveWakeLocksProto

// optional bool is_cpu = 1;
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::has_is_cpu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::clear_is_cpu() {
  is_cpu_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::is_cpu() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_cpu)
  return is_cpu_;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::set_is_cpu(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_cpu_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_cpu)
}

// optional bool is_screen_bright = 2;
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::has_is_screen_bright() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::clear_is_screen_bright() {
  is_screen_bright_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::is_screen_bright() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_screen_bright)
  return is_screen_bright_;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::set_is_screen_bright(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_screen_bright_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_screen_bright)
}

// optional bool is_screen_dim = 3;
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::has_is_screen_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::clear_is_screen_dim() {
  is_screen_dim_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::is_screen_dim() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_screen_dim)
  return is_screen_dim_;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::set_is_screen_dim(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_screen_dim_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_screen_dim)
}

// optional bool is_button_bright = 4;
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::has_is_button_bright() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::clear_is_button_bright() {
  is_button_bright_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::is_button_bright() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_button_bright)
  return is_button_bright_;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::set_is_button_bright(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_button_bright_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_button_bright)
}

// optional bool is_proximity_screen_off = 5;
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::has_is_proximity_screen_off() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::clear_is_proximity_screen_off() {
  is_proximity_screen_off_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::is_proximity_screen_off() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_proximity_screen_off)
  return is_proximity_screen_off_;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::set_is_proximity_screen_off(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_proximity_screen_off_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_proximity_screen_off)
}

// optional bool is_stay_awake = 6;
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::has_is_stay_awake() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::clear_is_stay_awake() {
  is_stay_awake_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::is_stay_awake() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_stay_awake)
  return is_stay_awake_;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::set_is_stay_awake(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_stay_awake_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_stay_awake)
}

// optional bool is_doze = 7;
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::has_is_doze() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::clear_is_doze() {
  is_doze_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::is_doze() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_doze)
  return is_doze_;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::set_is_doze(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_doze_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_doze)
}

// optional bool is_draw = 8;
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::has_is_draw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::clear_is_draw() {
  is_draw_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PowerManagerServiceDumpProto_ActiveWakeLocksProto::is_draw() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_draw)
  return is_draw_;
}
inline void PowerManagerServiceDumpProto_ActiveWakeLocksProto::set_is_draw(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_draw_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto.is_draw)
}

// -------------------------------------------------------------------

// PowerManagerServiceDumpProto_UserActivityProto

// optional bool is_screen_bright = 1;
inline bool PowerManagerServiceDumpProto_UserActivityProto::has_is_screen_bright() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::clear_is_screen_bright() {
  is_screen_bright_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PowerManagerServiceDumpProto_UserActivityProto::is_screen_bright() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.is_screen_bright)
  return is_screen_bright_;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::set_is_screen_bright(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_screen_bright_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.is_screen_bright)
}

// optional bool is_screen_dim = 2;
inline bool PowerManagerServiceDumpProto_UserActivityProto::has_is_screen_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::clear_is_screen_dim() {
  is_screen_dim_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PowerManagerServiceDumpProto_UserActivityProto::is_screen_dim() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.is_screen_dim)
  return is_screen_dim_;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::set_is_screen_dim(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_screen_dim_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.is_screen_dim)
}

// optional bool is_screen_dream = 3;
inline bool PowerManagerServiceDumpProto_UserActivityProto::has_is_screen_dream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::clear_is_screen_dream() {
  is_screen_dream_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PowerManagerServiceDumpProto_UserActivityProto::is_screen_dream() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.is_screen_dream)
  return is_screen_dream_;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::set_is_screen_dream(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_screen_dream_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.is_screen_dream)
}

// optional int64 last_user_activity_time_ms = 4;
inline bool PowerManagerServiceDumpProto_UserActivityProto::has_last_user_activity_time_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::clear_last_user_activity_time_ms() {
  last_user_activity_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto_UserActivityProto::last_user_activity_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.last_user_activity_time_ms)
  return last_user_activity_time_ms_;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::set_last_user_activity_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_user_activity_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.last_user_activity_time_ms)
}

// optional int64 last_user_activity_time_no_change_lights_ms = 5;
inline bool PowerManagerServiceDumpProto_UserActivityProto::has_last_user_activity_time_no_change_lights_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::clear_last_user_activity_time_no_change_lights_ms() {
  last_user_activity_time_no_change_lights_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto_UserActivityProto::last_user_activity_time_no_change_lights_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.last_user_activity_time_no_change_lights_ms)
  return last_user_activity_time_no_change_lights_ms_;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::set_last_user_activity_time_no_change_lights_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  last_user_activity_time_no_change_lights_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.last_user_activity_time_no_change_lights_ms)
}

// optional int32 display_group_id = 6;
inline bool PowerManagerServiceDumpProto_UserActivityProto::has_display_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::clear_display_group_id() {
  display_group_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto_UserActivityProto::display_group_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.display_group_id)
  return display_group_id_;
}
inline void PowerManagerServiceDumpProto_UserActivityProto::set_display_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  display_group_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto.display_group_id)
}

// -------------------------------------------------------------------

// PowerManagerServiceDumpProto_UidStateProto

// optional int32 uid = 1;
inline bool PowerManagerServiceDumpProto_UidStateProto::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerManagerServiceDumpProto_UidStateProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto_UidStateProto::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid)
  return uid_;
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid)
}

// optional string uid_string = 2;
inline bool PowerManagerServiceDumpProto_UidStateProto::has_uid_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerManagerServiceDumpProto_UidStateProto::clear_uid_string() {
  uid_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PowerManagerServiceDumpProto_UidStateProto::uid_string() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string)
  return uid_string_.GetNoArena();
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_uid_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string)
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_uid_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uid_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string)
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_uid_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uid_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string)
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_uid_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uid_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string)
}
inline std::string* PowerManagerServiceDumpProto_UidStateProto::mutable_uid_string() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string)
  return uid_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PowerManagerServiceDumpProto_UidStateProto::release_uid_string() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string)
  if (!has_uid_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uid_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_allocated_uid_string(std::string* uid_string) {
  if (uid_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uid_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid_string);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.uid_string)
}

// optional bool is_active = 3;
inline bool PowerManagerServiceDumpProto_UidStateProto::has_is_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerManagerServiceDumpProto_UidStateProto::clear_is_active() {
  is_active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PowerManagerServiceDumpProto_UidStateProto::is_active() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.is_active)
  return is_active_;
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_is_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_active_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.is_active)
}

// optional int32 num_wake_locks = 4;
inline bool PowerManagerServiceDumpProto_UidStateProto::has_num_wake_locks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PowerManagerServiceDumpProto_UidStateProto::clear_num_wake_locks() {
  num_wake_locks_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto_UidStateProto::num_wake_locks() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.num_wake_locks)
  return num_wake_locks_;
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_num_wake_locks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_wake_locks_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.num_wake_locks)
}

// optional .android.app.ProcessStateEnum process_state = 5;
inline bool PowerManagerServiceDumpProto_UidStateProto::has_process_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PowerManagerServiceDumpProto_UidStateProto::clear_process_state() {
  process_state_ = 998;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::app::ProcessStateEnum PowerManagerServiceDumpProto_UidStateProto::process_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.process_state)
  return static_cast< ::android::app::ProcessStateEnum >(process_state_);
}
inline void PowerManagerServiceDumpProto_UidStateProto::set_process_state(::android::app::ProcessStateEnum value) {
  assert(::android::app::ProcessStateEnum_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  process_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.process_state)
}

// -------------------------------------------------------------------

// PowerManagerServiceDumpProto

// optional .com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto constants = 1;
inline bool PowerManagerServiceDumpProto::has_constants() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_constants() {
  if (constants_ != nullptr) constants_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto& PowerManagerServiceDumpProto::constants() const {
  const ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* p = constants_;
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto*>(
      &::com::android::server::power::_PowerManagerServiceDumpProto_ConstantsProto_default_instance_);
}
inline ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* PowerManagerServiceDumpProto::release_constants() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerManagerServiceDumpProto.constants)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* temp = constants_;
  constants_ = nullptr;
  return temp;
}
inline ::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* PowerManagerServiceDumpProto::mutable_constants() {
  _has_bits_[0] |= 0x00000001u;
  if (constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto>(GetArenaNoVirtual());
    constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.constants)
  return constants_;
}
inline void PowerManagerServiceDumpProto::set_allocated_constants(::com::android::server::power::PowerManagerServiceDumpProto_ConstantsProto* constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete constants_;
  }
  if (constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  constants_ = constants;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerManagerServiceDumpProto.constants)
}

// optional int32 dirty = 2;
inline bool PowerManagerServiceDumpProto::has_dirty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_dirty() {
  dirty_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::dirty() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.dirty)
  return dirty_;
}
inline void PowerManagerServiceDumpProto::set_dirty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  dirty_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.dirty)
}

// optional .android.os.PowerManagerInternalProto.Wakefulness wakefulness = 3;
inline bool PowerManagerServiceDumpProto::has_wakefulness() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_wakefulness() {
  wakefulness_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::android::os::PowerManagerInternalProto_Wakefulness PowerManagerServiceDumpProto::wakefulness() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.wakefulness)
  return static_cast< ::android::os::PowerManagerInternalProto_Wakefulness >(wakefulness_);
}
inline void PowerManagerServiceDumpProto::set_wakefulness(::android::os::PowerManagerInternalProto_Wakefulness value) {
  assert(::android::os::PowerManagerInternalProto_Wakefulness_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  wakefulness_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.wakefulness)
}

// optional bool is_wakefulness_changing = 4;
inline bool PowerManagerServiceDumpProto::has_is_wakefulness_changing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_wakefulness_changing() {
  is_wakefulness_changing_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PowerManagerServiceDumpProto::is_wakefulness_changing() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_wakefulness_changing)
  return is_wakefulness_changing_;
}
inline void PowerManagerServiceDumpProto::set_is_wakefulness_changing(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_wakefulness_changing_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_wakefulness_changing)
}

// optional bool is_powered = 5;
inline bool PowerManagerServiceDumpProto::has_is_powered() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_powered() {
  is_powered_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PowerManagerServiceDumpProto::is_powered() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_powered)
  return is_powered_;
}
inline void PowerManagerServiceDumpProto::set_is_powered(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_powered_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_powered)
}

// optional .android.os.BatteryPluggedStateEnum plug_type = 6;
inline bool PowerManagerServiceDumpProto::has_plug_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_plug_type() {
  plug_type_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::os::BatteryPluggedStateEnum PowerManagerServiceDumpProto::plug_type() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.plug_type)
  return static_cast< ::android::os::BatteryPluggedStateEnum >(plug_type_);
}
inline void PowerManagerServiceDumpProto::set_plug_type(::android::os::BatteryPluggedStateEnum value) {
  assert(::android::os::BatteryPluggedStateEnum_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  plug_type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.plug_type)
}

// optional int32 battery_level = 7;
inline bool PowerManagerServiceDumpProto::has_battery_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_battery_level() {
  battery_level_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::battery_level() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.battery_level)
  return battery_level_;
}
inline void PowerManagerServiceDumpProto::set_battery_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  battery_level_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.battery_level)
}

// optional int32 battery_level_when_dream_started = 8;
inline bool PowerManagerServiceDumpProto::has_battery_level_when_dream_started() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_battery_level_when_dream_started() {
  battery_level_when_dream_started_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::battery_level_when_dream_started() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.battery_level_when_dream_started)
  return battery_level_when_dream_started_;
}
inline void PowerManagerServiceDumpProto::set_battery_level_when_dream_started(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  battery_level_when_dream_started_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.battery_level_when_dream_started)
}

// optional .android.content.IntentProto.DockState dock_state = 9;
inline bool PowerManagerServiceDumpProto::has_dock_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_dock_state() {
  dock_state_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::android::content::IntentProto_DockState PowerManagerServiceDumpProto::dock_state() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.dock_state)
  return static_cast< ::android::content::IntentProto_DockState >(dock_state_);
}
inline void PowerManagerServiceDumpProto::set_dock_state(::android::content::IntentProto_DockState value) {
  assert(::android::content::IntentProto_DockState_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  dock_state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.dock_state)
}

// optional bool is_stay_on = 10;
inline bool PowerManagerServiceDumpProto::has_is_stay_on() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_stay_on() {
  is_stay_on_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool PowerManagerServiceDumpProto::is_stay_on() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_stay_on)
  return is_stay_on_;
}
inline void PowerManagerServiceDumpProto::set_is_stay_on(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_stay_on_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_stay_on)
}

// optional bool is_proximity_positive = 11;
inline bool PowerManagerServiceDumpProto::has_is_proximity_positive() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_proximity_positive() {
  is_proximity_positive_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool PowerManagerServiceDumpProto::is_proximity_positive() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_proximity_positive)
  return is_proximity_positive_;
}
inline void PowerManagerServiceDumpProto::set_is_proximity_positive(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_proximity_positive_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_proximity_positive)
}

// optional bool is_boot_completed = 12;
inline bool PowerManagerServiceDumpProto::has_is_boot_completed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_boot_completed() {
  is_boot_completed_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool PowerManagerServiceDumpProto::is_boot_completed() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_boot_completed)
  return is_boot_completed_;
}
inline void PowerManagerServiceDumpProto::set_is_boot_completed(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_boot_completed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_boot_completed)
}

// optional bool is_system_ready = 13;
inline bool PowerManagerServiceDumpProto::has_is_system_ready() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_system_ready() {
  is_system_ready_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool PowerManagerServiceDumpProto::is_system_ready() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_system_ready)
  return is_system_ready_;
}
inline void PowerManagerServiceDumpProto::set_is_system_ready(bool value) {
  _has_bits_[0] |= 0x00020000u;
  is_system_ready_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_system_ready)
}

// optional bool is_hal_auto_suspend_mode_enabled = 14;
inline bool PowerManagerServiceDumpProto::has_is_hal_auto_suspend_mode_enabled() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_hal_auto_suspend_mode_enabled() {
  is_hal_auto_suspend_mode_enabled_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool PowerManagerServiceDumpProto::is_hal_auto_suspend_mode_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_hal_auto_suspend_mode_enabled)
  return is_hal_auto_suspend_mode_enabled_;
}
inline void PowerManagerServiceDumpProto::set_is_hal_auto_suspend_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_hal_auto_suspend_mode_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_hal_auto_suspend_mode_enabled)
}

// optional bool is_hal_auto_interactive_mode_enabled = 15;
inline bool PowerManagerServiceDumpProto::has_is_hal_auto_interactive_mode_enabled() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_hal_auto_interactive_mode_enabled() {
  is_hal_auto_interactive_mode_enabled_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool PowerManagerServiceDumpProto::is_hal_auto_interactive_mode_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_hal_auto_interactive_mode_enabled)
  return is_hal_auto_interactive_mode_enabled_;
}
inline void PowerManagerServiceDumpProto::set_is_hal_auto_interactive_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00080000u;
  is_hal_auto_interactive_mode_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_hal_auto_interactive_mode_enabled)
}

// optional .com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto active_wake_locks = 16;
inline bool PowerManagerServiceDumpProto::has_active_wake_locks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_active_wake_locks() {
  if (active_wake_locks_ != nullptr) active_wake_locks_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto& PowerManagerServiceDumpProto::active_wake_locks() const {
  const ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* p = active_wake_locks_;
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.active_wake_locks)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto*>(
      &::com::android::server::power::_PowerManagerServiceDumpProto_ActiveWakeLocksProto_default_instance_);
}
inline ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* PowerManagerServiceDumpProto::release_active_wake_locks() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerManagerServiceDumpProto.active_wake_locks)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* temp = active_wake_locks_;
  active_wake_locks_ = nullptr;
  return temp;
}
inline ::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* PowerManagerServiceDumpProto::mutable_active_wake_locks() {
  _has_bits_[0] |= 0x00000002u;
  if (active_wake_locks_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto>(GetArenaNoVirtual());
    active_wake_locks_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.active_wake_locks)
  return active_wake_locks_;
}
inline void PowerManagerServiceDumpProto::set_allocated_active_wake_locks(::com::android::server::power::PowerManagerServiceDumpProto_ActiveWakeLocksProto* active_wake_locks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete active_wake_locks_;
  }
  if (active_wake_locks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      active_wake_locks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_wake_locks, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  active_wake_locks_ = active_wake_locks;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerManagerServiceDumpProto.active_wake_locks)
}

// optional int64 notify_long_scheduled_ms = 17;
inline bool PowerManagerServiceDumpProto::has_notify_long_scheduled_ms() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_notify_long_scheduled_ms() {
  notify_long_scheduled_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::notify_long_scheduled_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.notify_long_scheduled_ms)
  return notify_long_scheduled_ms_;
}
inline void PowerManagerServiceDumpProto::set_notify_long_scheduled_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  notify_long_scheduled_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.notify_long_scheduled_ms)
}

// optional int64 notify_long_dispatched_ms = 18;
inline bool PowerManagerServiceDumpProto::has_notify_long_dispatched_ms() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_notify_long_dispatched_ms() {
  notify_long_dispatched_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::notify_long_dispatched_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.notify_long_dispatched_ms)
  return notify_long_dispatched_ms_;
}
inline void PowerManagerServiceDumpProto::set_notify_long_dispatched_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00200000u;
  notify_long_dispatched_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.notify_long_dispatched_ms)
}

// optional int64 notify_long_next_check_ms = 19;
inline bool PowerManagerServiceDumpProto::has_notify_long_next_check_ms() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_notify_long_next_check_ms() {
  notify_long_next_check_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::notify_long_next_check_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.notify_long_next_check_ms)
  return notify_long_next_check_ms_;
}
inline void PowerManagerServiceDumpProto::set_notify_long_next_check_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00400000u;
  notify_long_next_check_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.notify_long_next_check_ms)
}

// repeated .com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto user_activity = 20;
inline int PowerManagerServiceDumpProto::user_activity_size() const {
  return user_activity_.size();
}
inline void PowerManagerServiceDumpProto::clear_user_activity() {
  user_activity_.Clear();
}
inline ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto* PowerManagerServiceDumpProto::mutable_user_activity(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.user_activity)
  return user_activity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto >*
PowerManagerServiceDumpProto::mutable_user_activity() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.power.PowerManagerServiceDumpProto.user_activity)
  return &user_activity_;
}
inline const ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto& PowerManagerServiceDumpProto::user_activity(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.user_activity)
  return user_activity_.Get(index);
}
inline ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto* PowerManagerServiceDumpProto::add_user_activity() {
  // @@protoc_insertion_point(field_add:com.android.server.power.PowerManagerServiceDumpProto.user_activity)
  return user_activity_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UserActivityProto >&
PowerManagerServiceDumpProto::user_activity() const {
  // @@protoc_insertion_point(field_list:com.android.server.power.PowerManagerServiceDumpProto.user_activity)
  return user_activity_;
}

// optional bool is_request_wait_for_negative_proximity = 21;
inline bool PowerManagerServiceDumpProto::has_is_request_wait_for_negative_proximity() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_request_wait_for_negative_proximity() {
  is_request_wait_for_negative_proximity_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool PowerManagerServiceDumpProto::is_request_wait_for_negative_proximity() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_request_wait_for_negative_proximity)
  return is_request_wait_for_negative_proximity_;
}
inline void PowerManagerServiceDumpProto::set_is_request_wait_for_negative_proximity(bool value) {
  _has_bits_[0] |= 0x00800000u;
  is_request_wait_for_negative_proximity_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_request_wait_for_negative_proximity)
}

// optional bool is_sandman_scheduled = 22;
inline bool PowerManagerServiceDumpProto::has_is_sandman_scheduled() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_sandman_scheduled() {
  is_sandman_scheduled_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool PowerManagerServiceDumpProto::is_sandman_scheduled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_sandman_scheduled)
  return is_sandman_scheduled_;
}
inline void PowerManagerServiceDumpProto::set_is_sandman_scheduled(bool value) {
  _has_bits_[0] |= 0x01000000u;
  is_sandman_scheduled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_sandman_scheduled)
}

// optional bool is_sandman_summoned = 23;
inline bool PowerManagerServiceDumpProto::has_is_sandman_summoned() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_sandman_summoned() {
  is_sandman_summoned_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool PowerManagerServiceDumpProto::is_sandman_summoned() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_sandman_summoned)
  return is_sandman_summoned_;
}
inline void PowerManagerServiceDumpProto::set_is_sandman_summoned(bool value) {
  _has_bits_[0] |= 0x02000000u;
  is_sandman_summoned_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_sandman_summoned)
}

// optional bool is_battery_level_low = 24;
inline bool PowerManagerServiceDumpProto::has_is_battery_level_low() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_battery_level_low() {
  is_battery_level_low_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool PowerManagerServiceDumpProto::is_battery_level_low() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_battery_level_low)
  return is_battery_level_low_;
}
inline void PowerManagerServiceDumpProto::set_is_battery_level_low(bool value) {
  _has_bits_[0] |= 0x04000000u;
  is_battery_level_low_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_battery_level_low)
}

// optional bool is_light_device_idle_mode = 25;
inline bool PowerManagerServiceDumpProto::has_is_light_device_idle_mode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_light_device_idle_mode() {
  is_light_device_idle_mode_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool PowerManagerServiceDumpProto::is_light_device_idle_mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_light_device_idle_mode)
  return is_light_device_idle_mode_;
}
inline void PowerManagerServiceDumpProto::set_is_light_device_idle_mode(bool value) {
  _has_bits_[0] |= 0x08000000u;
  is_light_device_idle_mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_light_device_idle_mode)
}

// optional bool is_device_idle_mode = 26;
inline bool PowerManagerServiceDumpProto::has_is_device_idle_mode() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_device_idle_mode() {
  is_device_idle_mode_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool PowerManagerServiceDumpProto::is_device_idle_mode() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_device_idle_mode)
  return is_device_idle_mode_;
}
inline void PowerManagerServiceDumpProto::set_is_device_idle_mode(bool value) {
  _has_bits_[0] |= 0x10000000u;
  is_device_idle_mode_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_device_idle_mode)
}

// repeated int32 device_idle_whitelist = 27;
inline int PowerManagerServiceDumpProto::device_idle_whitelist_size() const {
  return device_idle_whitelist_.size();
}
inline void PowerManagerServiceDumpProto::clear_device_idle_whitelist() {
  device_idle_whitelist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::device_idle_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.device_idle_whitelist)
  return device_idle_whitelist_.Get(index);
}
inline void PowerManagerServiceDumpProto::set_device_idle_whitelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  device_idle_whitelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.device_idle_whitelist)
}
inline void PowerManagerServiceDumpProto::add_device_idle_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  device_idle_whitelist_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.power.PowerManagerServiceDumpProto.device_idle_whitelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PowerManagerServiceDumpProto::device_idle_whitelist() const {
  // @@protoc_insertion_point(field_list:com.android.server.power.PowerManagerServiceDumpProto.device_idle_whitelist)
  return device_idle_whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PowerManagerServiceDumpProto::mutable_device_idle_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.power.PowerManagerServiceDumpProto.device_idle_whitelist)
  return &device_idle_whitelist_;
}

// repeated int32 device_idle_temp_whitelist = 28;
inline int PowerManagerServiceDumpProto::device_idle_temp_whitelist_size() const {
  return device_idle_temp_whitelist_.size();
}
inline void PowerManagerServiceDumpProto::clear_device_idle_temp_whitelist() {
  device_idle_temp_whitelist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::device_idle_temp_whitelist(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.device_idle_temp_whitelist)
  return device_idle_temp_whitelist_.Get(index);
}
inline void PowerManagerServiceDumpProto::set_device_idle_temp_whitelist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  device_idle_temp_whitelist_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.device_idle_temp_whitelist)
}
inline void PowerManagerServiceDumpProto::add_device_idle_temp_whitelist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  device_idle_temp_whitelist_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.power.PowerManagerServiceDumpProto.device_idle_temp_whitelist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PowerManagerServiceDumpProto::device_idle_temp_whitelist() const {
  // @@protoc_insertion_point(field_list:com.android.server.power.PowerManagerServiceDumpProto.device_idle_temp_whitelist)
  return device_idle_temp_whitelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PowerManagerServiceDumpProto::mutable_device_idle_temp_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.power.PowerManagerServiceDumpProto.device_idle_temp_whitelist)
  return &device_idle_temp_whitelist_;
}

// optional int64 last_wake_time_ms = 29;
inline bool PowerManagerServiceDumpProto::has_last_wake_time_ms() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_last_wake_time_ms() {
  last_wake_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::last_wake_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.last_wake_time_ms)
  return last_wake_time_ms_;
}
inline void PowerManagerServiceDumpProto::set_last_wake_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x80000000u;
  last_wake_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.last_wake_time_ms)
}

// optional int64 last_sleep_time_ms = 30;
inline bool PowerManagerServiceDumpProto::has_last_sleep_time_ms() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_last_sleep_time_ms() {
  last_sleep_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::last_sleep_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.last_sleep_time_ms)
  return last_sleep_time_ms_;
}
inline void PowerManagerServiceDumpProto::set_last_sleep_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000001u;
  last_sleep_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.last_sleep_time_ms)
}

// optional int64 last_user_activity_time_ms = 31 [deprecated = true];
inline bool PowerManagerServiceDumpProto::has_last_user_activity_time_ms() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_last_user_activity_time_ms() {
  last_user_activity_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::last_user_activity_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.last_user_activity_time_ms)
  return last_user_activity_time_ms_;
}
inline void PowerManagerServiceDumpProto::set_last_user_activity_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000002u;
  last_user_activity_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.last_user_activity_time_ms)
}

// optional int64 last_user_activity_time_no_change_lights_ms = 32 [deprecated = true];
inline bool PowerManagerServiceDumpProto::has_last_user_activity_time_no_change_lights_ms() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_last_user_activity_time_no_change_lights_ms() {
  last_user_activity_time_no_change_lights_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::last_user_activity_time_no_change_lights_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.last_user_activity_time_no_change_lights_ms)
  return last_user_activity_time_no_change_lights_ms_;
}
inline void PowerManagerServiceDumpProto::set_last_user_activity_time_no_change_lights_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000004u;
  last_user_activity_time_no_change_lights_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.last_user_activity_time_no_change_lights_ms)
}

// optional int64 last_interactive_power_hint_time_ms = 33;
inline bool PowerManagerServiceDumpProto::has_last_interactive_power_hint_time_ms() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_last_interactive_power_hint_time_ms() {
  last_interactive_power_hint_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::last_interactive_power_hint_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.last_interactive_power_hint_time_ms)
  return last_interactive_power_hint_time_ms_;
}
inline void PowerManagerServiceDumpProto::set_last_interactive_power_hint_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000008u;
  last_interactive_power_hint_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.last_interactive_power_hint_time_ms)
}

// optional int64 last_screen_brightness_boost_time_ms = 34;
inline bool PowerManagerServiceDumpProto::has_last_screen_brightness_boost_time_ms() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_last_screen_brightness_boost_time_ms() {
  last_screen_brightness_boost_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::last_screen_brightness_boost_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.last_screen_brightness_boost_time_ms)
  return last_screen_brightness_boost_time_ms_;
}
inline void PowerManagerServiceDumpProto::set_last_screen_brightness_boost_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000010u;
  last_screen_brightness_boost_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.last_screen_brightness_boost_time_ms)
}

// optional bool is_screen_brightness_boost_in_progress = 35;
inline bool PowerManagerServiceDumpProto::has_is_screen_brightness_boost_in_progress() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_screen_brightness_boost_in_progress() {
  is_screen_brightness_boost_in_progress_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool PowerManagerServiceDumpProto::is_screen_brightness_boost_in_progress() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_screen_brightness_boost_in_progress)
  return is_screen_brightness_boost_in_progress_;
}
inline void PowerManagerServiceDumpProto::set_is_screen_brightness_boost_in_progress(bool value) {
  _has_bits_[0] |= 0x20000000u;
  is_screen_brightness_boost_in_progress_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_screen_brightness_boost_in_progress)
}

// optional bool is_display_ready = 36;
inline bool PowerManagerServiceDumpProto::has_is_display_ready() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_display_ready() {
  is_display_ready_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool PowerManagerServiceDumpProto::is_display_ready() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_display_ready)
  return is_display_ready_;
}
inline void PowerManagerServiceDumpProto::set_is_display_ready(bool value) {
  _has_bits_[0] |= 0x40000000u;
  is_display_ready_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_display_ready)
}

// optional bool is_holding_wake_lock_suspend_blocker = 37;
inline bool PowerManagerServiceDumpProto::has_is_holding_wake_lock_suspend_blocker() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_holding_wake_lock_suspend_blocker() {
  is_holding_wake_lock_suspend_blocker_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool PowerManagerServiceDumpProto::is_holding_wake_lock_suspend_blocker() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_holding_wake_lock_suspend_blocker)
  return is_holding_wake_lock_suspend_blocker_;
}
inline void PowerManagerServiceDumpProto::set_is_holding_wake_lock_suspend_blocker(bool value) {
  _has_bits_[1] |= 0x00000040u;
  is_holding_wake_lock_suspend_blocker_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_holding_wake_lock_suspend_blocker)
}

// optional bool is_holding_display_suspend_blocker = 38;
inline bool PowerManagerServiceDumpProto::has_is_holding_display_suspend_blocker() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_holding_display_suspend_blocker() {
  is_holding_display_suspend_blocker_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool PowerManagerServiceDumpProto::is_holding_display_suspend_blocker() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_holding_display_suspend_blocker)
  return is_holding_display_suspend_blocker_;
}
inline void PowerManagerServiceDumpProto::set_is_holding_display_suspend_blocker(bool value) {
  _has_bits_[1] |= 0x00000080u;
  is_holding_display_suspend_blocker_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_holding_display_suspend_blocker)
}

// optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto settings_and_configuration = 39;
inline bool PowerManagerServiceDumpProto::has_settings_and_configuration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_settings_and_configuration() {
  if (settings_and_configuration_ != nullptr) settings_and_configuration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto& PowerManagerServiceDumpProto::settings_and_configuration() const {
  const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* p = settings_and_configuration_;
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.settings_and_configuration)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto*>(
      &::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_default_instance_);
}
inline ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* PowerManagerServiceDumpProto::release_settings_and_configuration() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerManagerServiceDumpProto.settings_and_configuration)
  _has_bits_[0] &= ~0x00000004u;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* temp = settings_and_configuration_;
  settings_and_configuration_ = nullptr;
  return temp;
}
inline ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* PowerManagerServiceDumpProto::mutable_settings_and_configuration() {
  _has_bits_[0] |= 0x00000004u;
  if (settings_and_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto>(GetArenaNoVirtual());
    settings_and_configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.settings_and_configuration)
  return settings_and_configuration_;
}
inline void PowerManagerServiceDumpProto::set_allocated_settings_and_configuration(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto* settings_and_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete settings_and_configuration_;
  }
  if (settings_and_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings_and_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_and_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  settings_and_configuration_ = settings_and_configuration;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerManagerServiceDumpProto.settings_and_configuration)
}

// optional sint32 sleep_timeout_ms = 40;
inline bool PowerManagerServiceDumpProto::has_sleep_timeout_ms() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_sleep_timeout_ms() {
  sleep_timeout_ms_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::sleep_timeout_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.sleep_timeout_ms)
  return sleep_timeout_ms_;
}
inline void PowerManagerServiceDumpProto::set_sleep_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  sleep_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.sleep_timeout_ms)
}

// optional int32 screen_off_timeout_ms = 41;
inline bool PowerManagerServiceDumpProto::has_screen_off_timeout_ms() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_screen_off_timeout_ms() {
  screen_off_timeout_ms_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::screen_off_timeout_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.screen_off_timeout_ms)
  return screen_off_timeout_ms_;
}
inline void PowerManagerServiceDumpProto::set_screen_off_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000400u;
  screen_off_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.screen_off_timeout_ms)
}

// optional int32 screen_dim_duration_ms = 42;
inline bool PowerManagerServiceDumpProto::has_screen_dim_duration_ms() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_screen_dim_duration_ms() {
  screen_dim_duration_ms_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::screen_dim_duration_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.screen_dim_duration_ms)
  return screen_dim_duration_ms_;
}
inline void PowerManagerServiceDumpProto::set_screen_dim_duration_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000800u;
  screen_dim_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.screen_dim_duration_ms)
}

// optional bool are_uids_changing = 43;
inline bool PowerManagerServiceDumpProto::has_are_uids_changing() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_are_uids_changing() {
  are_uids_changing_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool PowerManagerServiceDumpProto::are_uids_changing() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.are_uids_changing)
  return are_uids_changing_;
}
inline void PowerManagerServiceDumpProto::set_are_uids_changing(bool value) {
  _has_bits_[1] |= 0x00000100u;
  are_uids_changing_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.are_uids_changing)
}

// optional bool are_uids_changed = 44;
inline bool PowerManagerServiceDumpProto::has_are_uids_changed() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_are_uids_changed() {
  are_uids_changed_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool PowerManagerServiceDumpProto::are_uids_changed() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.are_uids_changed)
  return are_uids_changed_;
}
inline void PowerManagerServiceDumpProto::set_are_uids_changed(bool value) {
  _has_bits_[1] |= 0x00000200u;
  are_uids_changed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.are_uids_changed)
}

// repeated .com.android.server.power.PowerManagerServiceDumpProto.UidStateProto uid_states = 45;
inline int PowerManagerServiceDumpProto::uid_states_size() const {
  return uid_states_.size();
}
inline void PowerManagerServiceDumpProto::clear_uid_states() {
  uid_states_.Clear();
}
inline ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto* PowerManagerServiceDumpProto::mutable_uid_states(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.uid_states)
  return uid_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto >*
PowerManagerServiceDumpProto::mutable_uid_states() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.power.PowerManagerServiceDumpProto.uid_states)
  return &uid_states_;
}
inline const ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto& PowerManagerServiceDumpProto::uid_states(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.uid_states)
  return uid_states_.Get(index);
}
inline ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto* PowerManagerServiceDumpProto::add_uid_states() {
  // @@protoc_insertion_point(field_add:com.android.server.power.PowerManagerServiceDumpProto.uid_states)
  return uid_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::PowerManagerServiceDumpProto_UidStateProto >&
PowerManagerServiceDumpProto::uid_states() const {
  // @@protoc_insertion_point(field_list:com.android.server.power.PowerManagerServiceDumpProto.uid_states)
  return uid_states_;
}

// optional .android.os.LooperProto looper = 46;
inline bool PowerManagerServiceDumpProto::has_looper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::os::LooperProto& PowerManagerServiceDumpProto::looper() const {
  const ::android::os::LooperProto* p = looper_;
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.looper)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::LooperProto*>(
      &::android::os::_LooperProto_default_instance_);
}
inline ::android::os::LooperProto* PowerManagerServiceDumpProto::release_looper() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerManagerServiceDumpProto.looper)
  _has_bits_[0] &= ~0x00000008u;
  ::android::os::LooperProto* temp = looper_;
  looper_ = nullptr;
  return temp;
}
inline ::android::os::LooperProto* PowerManagerServiceDumpProto::mutable_looper() {
  _has_bits_[0] |= 0x00000008u;
  if (looper_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::LooperProto>(GetArenaNoVirtual());
    looper_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.looper)
  return looper_;
}
inline void PowerManagerServiceDumpProto::set_allocated_looper(::android::os::LooperProto* looper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(looper_);
  }
  if (looper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      looper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, looper, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  looper_ = looper;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerManagerServiceDumpProto.looper)
}

// repeated .com.android.server.power.WakeLockProto wake_locks = 47;
inline int PowerManagerServiceDumpProto::wake_locks_size() const {
  return wake_locks_.size();
}
inline void PowerManagerServiceDumpProto::clear_wake_locks() {
  wake_locks_.Clear();
}
inline ::com::android::server::power::WakeLockProto* PowerManagerServiceDumpProto::mutable_wake_locks(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.wake_locks)
  return wake_locks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::WakeLockProto >*
PowerManagerServiceDumpProto::mutable_wake_locks() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.power.PowerManagerServiceDumpProto.wake_locks)
  return &wake_locks_;
}
inline const ::com::android::server::power::WakeLockProto& PowerManagerServiceDumpProto::wake_locks(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.wake_locks)
  return wake_locks_.Get(index);
}
inline ::com::android::server::power::WakeLockProto* PowerManagerServiceDumpProto::add_wake_locks() {
  // @@protoc_insertion_point(field_add:com.android.server.power.PowerManagerServiceDumpProto.wake_locks)
  return wake_locks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::WakeLockProto >&
PowerManagerServiceDumpProto::wake_locks() const {
  // @@protoc_insertion_point(field_list:com.android.server.power.PowerManagerServiceDumpProto.wake_locks)
  return wake_locks_;
}

// repeated .com.android.server.power.SuspendBlockerProto suspend_blockers = 48;
inline int PowerManagerServiceDumpProto::suspend_blockers_size() const {
  return suspend_blockers_.size();
}
inline void PowerManagerServiceDumpProto::clear_suspend_blockers() {
  suspend_blockers_.Clear();
}
inline ::com::android::server::power::SuspendBlockerProto* PowerManagerServiceDumpProto::mutable_suspend_blockers(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.suspend_blockers)
  return suspend_blockers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::SuspendBlockerProto >*
PowerManagerServiceDumpProto::mutable_suspend_blockers() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.power.PowerManagerServiceDumpProto.suspend_blockers)
  return &suspend_blockers_;
}
inline const ::com::android::server::power::SuspendBlockerProto& PowerManagerServiceDumpProto::suspend_blockers(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.suspend_blockers)
  return suspend_blockers_.Get(index);
}
inline ::com::android::server::power::SuspendBlockerProto* PowerManagerServiceDumpProto::add_suspend_blockers() {
  // @@protoc_insertion_point(field_add:com.android.server.power.PowerManagerServiceDumpProto.suspend_blockers)
  return suspend_blockers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::power::SuspendBlockerProto >&
PowerManagerServiceDumpProto::suspend_blockers() const {
  // @@protoc_insertion_point(field_list:com.android.server.power.PowerManagerServiceDumpProto.suspend_blockers)
  return suspend_blockers_;
}

// optional .com.android.server.power.WirelessChargerDetectorProto wireless_charger_detector = 49;
inline bool PowerManagerServiceDumpProto::has_wireless_charger_detector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::com::android::server::power::WirelessChargerDetectorProto& PowerManagerServiceDumpProto::wireless_charger_detector() const {
  const ::com::android::server::power::WirelessChargerDetectorProto* p = wireless_charger_detector_;
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.wireless_charger_detector)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::power::WirelessChargerDetectorProto*>(
      &::com::android::server::power::_WirelessChargerDetectorProto_default_instance_);
}
inline ::com::android::server::power::WirelessChargerDetectorProto* PowerManagerServiceDumpProto::release_wireless_charger_detector() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerManagerServiceDumpProto.wireless_charger_detector)
  _has_bits_[0] &= ~0x00000010u;
  ::com::android::server::power::WirelessChargerDetectorProto* temp = wireless_charger_detector_;
  wireless_charger_detector_ = nullptr;
  return temp;
}
inline ::com::android::server::power::WirelessChargerDetectorProto* PowerManagerServiceDumpProto::mutable_wireless_charger_detector() {
  _has_bits_[0] |= 0x00000010u;
  if (wireless_charger_detector_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::power::WirelessChargerDetectorProto>(GetArenaNoVirtual());
    wireless_charger_detector_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.wireless_charger_detector)
  return wireless_charger_detector_;
}
inline void PowerManagerServiceDumpProto::set_allocated_wireless_charger_detector(::com::android::server::power::WirelessChargerDetectorProto* wireless_charger_detector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wireless_charger_detector_);
  }
  if (wireless_charger_detector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wireless_charger_detector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wireless_charger_detector, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  wireless_charger_detector_ = wireless_charger_detector;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerManagerServiceDumpProto.wireless_charger_detector)
}

// optional .com.android.server.power.BatterySaverStateMachineProto battery_saver_state_machine = 50;
inline bool PowerManagerServiceDumpProto::has_battery_saver_state_machine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_battery_saver_state_machine() {
  if (battery_saver_state_machine_ != nullptr) battery_saver_state_machine_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::android::server::power::BatterySaverStateMachineProto& PowerManagerServiceDumpProto::battery_saver_state_machine() const {
  const ::com::android::server::power::BatterySaverStateMachineProto* p = battery_saver_state_machine_;
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.battery_saver_state_machine)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::power::BatterySaverStateMachineProto*>(
      &::com::android::server::power::_BatterySaverStateMachineProto_default_instance_);
}
inline ::com::android::server::power::BatterySaverStateMachineProto* PowerManagerServiceDumpProto::release_battery_saver_state_machine() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerManagerServiceDumpProto.battery_saver_state_machine)
  _has_bits_[0] &= ~0x00000020u;
  ::com::android::server::power::BatterySaverStateMachineProto* temp = battery_saver_state_machine_;
  battery_saver_state_machine_ = nullptr;
  return temp;
}
inline ::com::android::server::power::BatterySaverStateMachineProto* PowerManagerServiceDumpProto::mutable_battery_saver_state_machine() {
  _has_bits_[0] |= 0x00000020u;
  if (battery_saver_state_machine_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::power::BatterySaverStateMachineProto>(GetArenaNoVirtual());
    battery_saver_state_machine_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerManagerServiceDumpProto.battery_saver_state_machine)
  return battery_saver_state_machine_;
}
inline void PowerManagerServiceDumpProto::set_allocated_battery_saver_state_machine(::com::android::server::power::BatterySaverStateMachineProto* battery_saver_state_machine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete battery_saver_state_machine_;
  }
  if (battery_saver_state_machine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      battery_saver_state_machine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery_saver_state_machine, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  battery_saver_state_machine_ = battery_saver_state_machine;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerManagerServiceDumpProto.battery_saver_state_machine)
}

// optional sint32 attentive_timeout_ms = 51;
inline bool PowerManagerServiceDumpProto::has_attentive_timeout_ms() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_attentive_timeout_ms() {
  attentive_timeout_ms_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerManagerServiceDumpProto::attentive_timeout_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.attentive_timeout_ms)
  return attentive_timeout_ms_;
}
inline void PowerManagerServiceDumpProto::set_attentive_timeout_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00002000u;
  attentive_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.attentive_timeout_ms)
}

// optional int64 enhanced_discharge_time_elapsed = 52;
inline bool PowerManagerServiceDumpProto::has_enhanced_discharge_time_elapsed() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_enhanced_discharge_time_elapsed() {
  enhanced_discharge_time_elapsed_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::enhanced_discharge_time_elapsed() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.enhanced_discharge_time_elapsed)
  return enhanced_discharge_time_elapsed_;
}
inline void PowerManagerServiceDumpProto::set_enhanced_discharge_time_elapsed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00001000u;
  enhanced_discharge_time_elapsed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.enhanced_discharge_time_elapsed)
}

// optional int64 last_enhanced_discharge_time_updated_elapsed = 53;
inline bool PowerManagerServiceDumpProto::has_last_enhanced_discharge_time_updated_elapsed() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_last_enhanced_discharge_time_updated_elapsed() {
  last_enhanced_discharge_time_updated_elapsed_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerManagerServiceDumpProto::last_enhanced_discharge_time_updated_elapsed() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.last_enhanced_discharge_time_updated_elapsed)
  return last_enhanced_discharge_time_updated_elapsed_;
}
inline void PowerManagerServiceDumpProto::set_last_enhanced_discharge_time_updated_elapsed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00008000u;
  last_enhanced_discharge_time_updated_elapsed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.last_enhanced_discharge_time_updated_elapsed)
}

// optional bool is_enhanced_discharge_prediction_personalized = 54;
inline bool PowerManagerServiceDumpProto::has_is_enhanced_discharge_prediction_personalized() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void PowerManagerServiceDumpProto::clear_is_enhanced_discharge_prediction_personalized() {
  is_enhanced_discharge_prediction_personalized_ = false;
  _has_bits_[1] &= ~0x00004000u;
}
inline bool PowerManagerServiceDumpProto::is_enhanced_discharge_prediction_personalized() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerManagerServiceDumpProto.is_enhanced_discharge_prediction_personalized)
  return is_enhanced_discharge_prediction_personalized_;
}
inline void PowerManagerServiceDumpProto::set_is_enhanced_discharge_prediction_personalized(bool value) {
  _has_bits_[1] |= 0x00004000u;
  is_enhanced_discharge_prediction_personalized_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerManagerServiceDumpProto.is_enhanced_discharge_prediction_personalized)
}

// -------------------------------------------------------------------

// SuspendBlockerProto

// optional string name = 1;
inline bool SuspendBlockerProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuspendBlockerProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SuspendBlockerProto::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.SuspendBlockerProto.name)
  return name_.GetNoArena();
}
inline void SuspendBlockerProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.power.SuspendBlockerProto.name)
}
inline void SuspendBlockerProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.power.SuspendBlockerProto.name)
}
inline void SuspendBlockerProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.power.SuspendBlockerProto.name)
}
inline void SuspendBlockerProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.power.SuspendBlockerProto.name)
}
inline std::string* SuspendBlockerProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.power.SuspendBlockerProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SuspendBlockerProto::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.power.SuspendBlockerProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SuspendBlockerProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.SuspendBlockerProto.name)
}

// optional int32 reference_count = 2;
inline bool SuspendBlockerProto::has_reference_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuspendBlockerProto::clear_reference_count() {
  reference_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SuspendBlockerProto::reference_count() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.SuspendBlockerProto.reference_count)
  return reference_count_;
}
inline void SuspendBlockerProto::set_reference_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  reference_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.SuspendBlockerProto.reference_count)
}

// -------------------------------------------------------------------

// WakeLockProto_WakeLockFlagsProto

// optional bool is_acquire_causes_wakeup = 1;
inline bool WakeLockProto_WakeLockFlagsProto::has_is_acquire_causes_wakeup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WakeLockProto_WakeLockFlagsProto::clear_is_acquire_causes_wakeup() {
  is_acquire_causes_wakeup_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool WakeLockProto_WakeLockFlagsProto::is_acquire_causes_wakeup() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.WakeLockFlagsProto.is_acquire_causes_wakeup)
  return is_acquire_causes_wakeup_;
}
inline void WakeLockProto_WakeLockFlagsProto::set_is_acquire_causes_wakeup(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_acquire_causes_wakeup_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.WakeLockFlagsProto.is_acquire_causes_wakeup)
}

// optional bool is_on_after_release = 2;
inline bool WakeLockProto_WakeLockFlagsProto::has_is_on_after_release() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WakeLockProto_WakeLockFlagsProto::clear_is_on_after_release() {
  is_on_after_release_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool WakeLockProto_WakeLockFlagsProto::is_on_after_release() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.WakeLockFlagsProto.is_on_after_release)
  return is_on_after_release_;
}
inline void WakeLockProto_WakeLockFlagsProto::set_is_on_after_release(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_on_after_release_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.WakeLockFlagsProto.is_on_after_release)
}

// -------------------------------------------------------------------

// WakeLockProto

// optional .android.os.WakeLockLevelEnum lock_level = 1;
inline bool WakeLockProto::has_lock_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WakeLockProto::clear_lock_level() {
  lock_level_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::os::WakeLockLevelEnum WakeLockProto::lock_level() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.lock_level)
  return static_cast< ::android::os::WakeLockLevelEnum >(lock_level_);
}
inline void WakeLockProto::set_lock_level(::android::os::WakeLockLevelEnum value) {
  assert(::android::os::WakeLockLevelEnum_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  lock_level_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.lock_level)
}

// optional string tag = 2;
inline bool WakeLockProto::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WakeLockProto::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WakeLockProto::tag() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.tag)
  return tag_.GetNoArena();
}
inline void WakeLockProto::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.tag)
}
inline void WakeLockProto::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.power.WakeLockProto.tag)
}
inline void WakeLockProto::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.power.WakeLockProto.tag)
}
inline void WakeLockProto::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.power.WakeLockProto.tag)
}
inline std::string* WakeLockProto::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.power.WakeLockProto.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WakeLockProto::release_tag() {
  // @@protoc_insertion_point(field_release:com.android.server.power.WakeLockProto.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WakeLockProto::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.WakeLockProto.tag)
}

// optional .com.android.server.power.WakeLockProto.WakeLockFlagsProto flags = 3;
inline bool WakeLockProto::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WakeLockProto::clear_flags() {
  if (flags_ != nullptr) flags_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::power::WakeLockProto_WakeLockFlagsProto& WakeLockProto::flags() const {
  const ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* p = flags_;
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::power::WakeLockProto_WakeLockFlagsProto*>(
      &::com::android::server::power::_WakeLockProto_WakeLockFlagsProto_default_instance_);
}
inline ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* WakeLockProto::release_flags() {
  // @@protoc_insertion_point(field_release:com.android.server.power.WakeLockProto.flags)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* temp = flags_;
  flags_ = nullptr;
  return temp;
}
inline ::com::android::server::power::WakeLockProto_WakeLockFlagsProto* WakeLockProto::mutable_flags() {
  _has_bits_[0] |= 0x00000002u;
  if (flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::power::WakeLockProto_WakeLockFlagsProto>(GetArenaNoVirtual());
    flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.WakeLockProto.flags)
  return flags_;
}
inline void WakeLockProto::set_allocated_flags(::com::android::server::power::WakeLockProto_WakeLockFlagsProto* flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete flags_;
  }
  if (flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  flags_ = flags;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.WakeLockProto.flags)
}

// optional bool is_disabled = 4;
inline bool WakeLockProto::has_is_disabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WakeLockProto::clear_is_disabled() {
  is_disabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool WakeLockProto::is_disabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.is_disabled)
  return is_disabled_;
}
inline void WakeLockProto::set_is_disabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.is_disabled)
}

// optional int64 acq_ms = 5;
inline bool WakeLockProto::has_acq_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WakeLockProto::clear_acq_ms() {
  acq_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WakeLockProto::acq_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.acq_ms)
  return acq_ms_;
}
inline void WakeLockProto::set_acq_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  acq_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.acq_ms)
}

// optional bool is_notified_long = 6;
inline bool WakeLockProto::has_is_notified_long() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WakeLockProto::clear_is_notified_long() {
  is_notified_long_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool WakeLockProto::is_notified_long() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.is_notified_long)
  return is_notified_long_;
}
inline void WakeLockProto::set_is_notified_long(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_notified_long_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.is_notified_long)
}

// optional int32 uid = 7;
inline bool WakeLockProto::has_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WakeLockProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WakeLockProto::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.uid)
  return uid_;
}
inline void WakeLockProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.uid)
}

// optional int32 pid = 8;
inline bool WakeLockProto::has_pid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WakeLockProto::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WakeLockProto::pid() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.pid)
  return pid_;
}
inline void WakeLockProto::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.WakeLockProto.pid)
}

// optional .android.os.WorkSourceProto work_source = 9;
inline bool WakeLockProto::has_work_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::os::WorkSourceProto& WakeLockProto::work_source() const {
  const ::android::os::WorkSourceProto* p = work_source_;
  // @@protoc_insertion_point(field_get:com.android.server.power.WakeLockProto.work_source)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::WorkSourceProto*>(
      &::android::os::_WorkSourceProto_default_instance_);
}
inline ::android::os::WorkSourceProto* WakeLockProto::release_work_source() {
  // @@protoc_insertion_point(field_release:com.android.server.power.WakeLockProto.work_source)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::WorkSourceProto* temp = work_source_;
  work_source_ = nullptr;
  return temp;
}
inline ::android::os::WorkSourceProto* WakeLockProto::mutable_work_source() {
  _has_bits_[0] |= 0x00000004u;
  if (work_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::WorkSourceProto>(GetArenaNoVirtual());
    work_source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.WakeLockProto.work_source)
  return work_source_;
}
inline void WakeLockProto::set_allocated_work_source(::android::os::WorkSourceProto* work_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_source_);
  }
  if (work_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      work_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  work_source_ = work_source;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.WakeLockProto.work_source)
}

// -------------------------------------------------------------------

// PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto

// optional bool is_stay_on_while_plugged_in_ac = 1;
inline bool PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::has_is_stay_on_while_plugged_in_ac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::clear_is_stay_on_while_plugged_in_ac() {
  is_stay_on_while_plugged_in_ac_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::is_stay_on_while_plugged_in_ac() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto.is_stay_on_while_plugged_in_ac)
  return is_stay_on_while_plugged_in_ac_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::set_is_stay_on_while_plugged_in_ac(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_stay_on_while_plugged_in_ac_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto.is_stay_on_while_plugged_in_ac)
}

// optional bool is_stay_on_while_plugged_in_usb = 2;
inline bool PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::has_is_stay_on_while_plugged_in_usb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::clear_is_stay_on_while_plugged_in_usb() {
  is_stay_on_while_plugged_in_usb_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::is_stay_on_while_plugged_in_usb() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto.is_stay_on_while_plugged_in_usb)
  return is_stay_on_while_plugged_in_usb_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::set_is_stay_on_while_plugged_in_usb(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_stay_on_while_plugged_in_usb_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto.is_stay_on_while_plugged_in_usb)
}

// optional bool is_stay_on_while_plugged_in_wireless = 3;
inline bool PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::has_is_stay_on_while_plugged_in_wireless() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::clear_is_stay_on_while_plugged_in_wireless() {
  is_stay_on_while_plugged_in_wireless_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::is_stay_on_while_plugged_in_wireless() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto.is_stay_on_while_plugged_in_wireless)
  return is_stay_on_while_plugged_in_wireless_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto::set_is_stay_on_while_plugged_in_wireless(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_stay_on_while_plugged_in_wireless_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto.is_stay_on_while_plugged_in_wireless)
}

// -------------------------------------------------------------------

// PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto

// optional float setting_minimum_float = 4;
inline bool PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::has_setting_minimum_float() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::clear_setting_minimum_float() {
  setting_minimum_float_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::setting_minimum_float() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto.setting_minimum_float)
  return setting_minimum_float_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::set_setting_minimum_float(float value) {
  _has_bits_[0] |= 0x00000002u;
  setting_minimum_float_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto.setting_minimum_float)
}

// optional float setting_maximum_float = 5;
inline bool PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::has_setting_maximum_float() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::clear_setting_maximum_float() {
  setting_maximum_float_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::setting_maximum_float() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto.setting_maximum_float)
  return setting_maximum_float_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::set_setting_maximum_float(float value) {
  _has_bits_[0] |= 0x00000004u;
  setting_maximum_float_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto.setting_maximum_float)
}

// optional float setting_default_float = 6;
inline bool PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::has_setting_default_float() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::clear_setting_default_float() {
  setting_default_float_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::setting_default_float() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto.setting_default_float)
  return setting_default_float_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto::set_setting_default_float(float value) {
  _has_bits_[0] |= 0x00000001u;
  setting_default_float_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto.setting_default_float)
}

// -------------------------------------------------------------------

// PowerServiceSettingsAndConfigurationDumpProto

// optional bool is_decouple_hal_auto_suspend_mode_from_display_config = 1;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_decouple_hal_auto_suspend_mode_from_display_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_decouple_hal_auto_suspend_mode_from_display_config() {
  is_decouple_hal_auto_suspend_mode_from_display_config_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_decouple_hal_auto_suspend_mode_from_display_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_decouple_hal_auto_suspend_mode_from_display_config)
  return is_decouple_hal_auto_suspend_mode_from_display_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_decouple_hal_auto_suspend_mode_from_display_config(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_decouple_hal_auto_suspend_mode_from_display_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_decouple_hal_auto_suspend_mode_from_display_config)
}

// optional bool is_decouple_hal_interactive_mode_from_display_config = 2;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_decouple_hal_interactive_mode_from_display_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_decouple_hal_interactive_mode_from_display_config() {
  is_decouple_hal_interactive_mode_from_display_config_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_decouple_hal_interactive_mode_from_display_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_decouple_hal_interactive_mode_from_display_config)
  return is_decouple_hal_interactive_mode_from_display_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_decouple_hal_interactive_mode_from_display_config(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_decouple_hal_interactive_mode_from_display_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_decouple_hal_interactive_mode_from_display_config)
}

// optional bool is_wake_up_when_plugged_or_unplugged_config = 3;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_wake_up_when_plugged_or_unplugged_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_wake_up_when_plugged_or_unplugged_config() {
  is_wake_up_when_plugged_or_unplugged_config_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_wake_up_when_plugged_or_unplugged_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_wake_up_when_plugged_or_unplugged_config)
  return is_wake_up_when_plugged_or_unplugged_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_wake_up_when_plugged_or_unplugged_config(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_wake_up_when_plugged_or_unplugged_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_wake_up_when_plugged_or_unplugged_config)
}

// optional bool is_wake_up_when_plugged_or_unplugged_in_theater_mode_config = 4;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config() {
  is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_wake_up_when_plugged_or_unplugged_in_theater_mode_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_wake_up_when_plugged_or_unplugged_in_theater_mode_config)
  return is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_wake_up_when_plugged_or_unplugged_in_theater_mode_config(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_wake_up_when_plugged_or_unplugged_in_theater_mode_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_wake_up_when_plugged_or_unplugged_in_theater_mode_config)
}

// optional bool is_theater_mode_enabled = 5;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_theater_mode_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_theater_mode_enabled() {
  is_theater_mode_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_theater_mode_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_theater_mode_enabled)
  return is_theater_mode_enabled_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_theater_mode_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_theater_mode_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_theater_mode_enabled)
}

// optional bool is_suspend_when_screen_off_due_to_proximity_config = 6;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_suspend_when_screen_off_due_to_proximity_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_suspend_when_screen_off_due_to_proximity_config() {
  is_suspend_when_screen_off_due_to_proximity_config_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_suspend_when_screen_off_due_to_proximity_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_suspend_when_screen_off_due_to_proximity_config)
  return is_suspend_when_screen_off_due_to_proximity_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_suspend_when_screen_off_due_to_proximity_config(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_suspend_when_screen_off_due_to_proximity_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_suspend_when_screen_off_due_to_proximity_config)
}

// optional bool are_dreams_supported_config = 7;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_are_dreams_supported_config() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_are_dreams_supported_config() {
  are_dreams_supported_config_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::are_dreams_supported_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_supported_config)
  return are_dreams_supported_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_are_dreams_supported_config(bool value) {
  _has_bits_[0] |= 0x00000100u;
  are_dreams_supported_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_supported_config)
}

// optional bool are_dreams_enabled_by_default_config = 8;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_are_dreams_enabled_by_default_config() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_are_dreams_enabled_by_default_config() {
  are_dreams_enabled_by_default_config_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::are_dreams_enabled_by_default_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_enabled_by_default_config)
  return are_dreams_enabled_by_default_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_are_dreams_enabled_by_default_config(bool value) {
  _has_bits_[0] |= 0x00000200u;
  are_dreams_enabled_by_default_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_enabled_by_default_config)
}

// optional bool are_dreams_activated_on_sleep_by_default_config = 9;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_are_dreams_activated_on_sleep_by_default_config() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_are_dreams_activated_on_sleep_by_default_config() {
  are_dreams_activated_on_sleep_by_default_config_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::are_dreams_activated_on_sleep_by_default_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_activated_on_sleep_by_default_config)
  return are_dreams_activated_on_sleep_by_default_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_are_dreams_activated_on_sleep_by_default_config(bool value) {
  _has_bits_[0] |= 0x00000400u;
  are_dreams_activated_on_sleep_by_default_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_activated_on_sleep_by_default_config)
}

// optional bool are_dreams_activated_on_dock_by_default_config = 10;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_are_dreams_activated_on_dock_by_default_config() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_are_dreams_activated_on_dock_by_default_config() {
  are_dreams_activated_on_dock_by_default_config_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::are_dreams_activated_on_dock_by_default_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_activated_on_dock_by_default_config)
  return are_dreams_activated_on_dock_by_default_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_are_dreams_activated_on_dock_by_default_config(bool value) {
  _has_bits_[0] |= 0x00000800u;
  are_dreams_activated_on_dock_by_default_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_activated_on_dock_by_default_config)
}

// optional bool are_dreams_enabled_on_battery_config = 11;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_are_dreams_enabled_on_battery_config() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_are_dreams_enabled_on_battery_config() {
  are_dreams_enabled_on_battery_config_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::are_dreams_enabled_on_battery_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_enabled_on_battery_config)
  return are_dreams_enabled_on_battery_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_are_dreams_enabled_on_battery_config(bool value) {
  _has_bits_[0] |= 0x00001000u;
  are_dreams_enabled_on_battery_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_enabled_on_battery_config)
}

// optional sint32 dreams_battery_level_minimum_when_powered_config = 12;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_dreams_battery_level_minimum_when_powered_config() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_dreams_battery_level_minimum_when_powered_config() {
  dreams_battery_level_minimum_when_powered_config_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::dreams_battery_level_minimum_when_powered_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.dreams_battery_level_minimum_when_powered_config)
  return dreams_battery_level_minimum_when_powered_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_dreams_battery_level_minimum_when_powered_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  dreams_battery_level_minimum_when_powered_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.dreams_battery_level_minimum_when_powered_config)
}

// optional sint32 dreams_battery_level_minimum_when_not_powered_config = 13;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_dreams_battery_level_minimum_when_not_powered_config() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_dreams_battery_level_minimum_when_not_powered_config() {
  dreams_battery_level_minimum_when_not_powered_config_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::dreams_battery_level_minimum_when_not_powered_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.dreams_battery_level_minimum_when_not_powered_config)
  return dreams_battery_level_minimum_when_not_powered_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_dreams_battery_level_minimum_when_not_powered_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  dreams_battery_level_minimum_when_not_powered_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.dreams_battery_level_minimum_when_not_powered_config)
}

// optional sint32 dreams_battery_level_drain_cutoff_config = 14;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_dreams_battery_level_drain_cutoff_config() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_dreams_battery_level_drain_cutoff_config() {
  dreams_battery_level_drain_cutoff_config_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::dreams_battery_level_drain_cutoff_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.dreams_battery_level_drain_cutoff_config)
  return dreams_battery_level_drain_cutoff_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_dreams_battery_level_drain_cutoff_config(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  dreams_battery_level_drain_cutoff_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.dreams_battery_level_drain_cutoff_config)
}

// optional bool are_dreams_enabled_setting = 15;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_are_dreams_enabled_setting() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_are_dreams_enabled_setting() {
  are_dreams_enabled_setting_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::are_dreams_enabled_setting() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_enabled_setting)
  return are_dreams_enabled_setting_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_are_dreams_enabled_setting(bool value) {
  _has_bits_[0] |= 0x00002000u;
  are_dreams_enabled_setting_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_enabled_setting)
}

// optional bool are_dreams_activate_on_sleep_setting = 16;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_are_dreams_activate_on_sleep_setting() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_are_dreams_activate_on_sleep_setting() {
  are_dreams_activate_on_sleep_setting_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::are_dreams_activate_on_sleep_setting() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_activate_on_sleep_setting)
  return are_dreams_activate_on_sleep_setting_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_are_dreams_activate_on_sleep_setting(bool value) {
  _has_bits_[0] |= 0x00040000u;
  are_dreams_activate_on_sleep_setting_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_activate_on_sleep_setting)
}

// optional bool are_dreams_activate_on_dock_setting = 17;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_are_dreams_activate_on_dock_setting() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_are_dreams_activate_on_dock_setting() {
  are_dreams_activate_on_dock_setting_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::are_dreams_activate_on_dock_setting() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_activate_on_dock_setting)
  return are_dreams_activate_on_dock_setting_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_are_dreams_activate_on_dock_setting(bool value) {
  _has_bits_[0] |= 0x00080000u;
  are_dreams_activate_on_dock_setting_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.are_dreams_activate_on_dock_setting)
}

// optional bool is_doze_after_screen_off_config = 18;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_doze_after_screen_off_config() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_doze_after_screen_off_config() {
  is_doze_after_screen_off_config_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_doze_after_screen_off_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_doze_after_screen_off_config)
  return is_doze_after_screen_off_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_doze_after_screen_off_config(bool value) {
  _has_bits_[0] |= 0x00100000u;
  is_doze_after_screen_off_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_doze_after_screen_off_config)
}

// optional int32 minimum_screen_off_timeout_config_ms = 19;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_minimum_screen_off_timeout_config_ms() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_minimum_screen_off_timeout_config_ms() {
  minimum_screen_off_timeout_config_ms_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::minimum_screen_off_timeout_config_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.minimum_screen_off_timeout_config_ms)
  return minimum_screen_off_timeout_config_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_minimum_screen_off_timeout_config_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  minimum_screen_off_timeout_config_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.minimum_screen_off_timeout_config_ms)
}

// optional int32 maximum_screen_dim_duration_config_ms = 20;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_maximum_screen_dim_duration_config_ms() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_maximum_screen_dim_duration_config_ms() {
  maximum_screen_dim_duration_config_ms_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::maximum_screen_dim_duration_config_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.maximum_screen_dim_duration_config_ms)
  return maximum_screen_dim_duration_config_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_maximum_screen_dim_duration_config_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  maximum_screen_dim_duration_config_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.maximum_screen_dim_duration_config_ms)
}

// optional float maximum_screen_dim_ratio_config = 21;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_maximum_screen_dim_ratio_config() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_maximum_screen_dim_ratio_config() {
  maximum_screen_dim_ratio_config_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float PowerServiceSettingsAndConfigurationDumpProto::maximum_screen_dim_ratio_config() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.maximum_screen_dim_ratio_config)
  return maximum_screen_dim_ratio_config_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_maximum_screen_dim_ratio_config(float value) {
  _has_bits_[0] |= 0x00800000u;
  maximum_screen_dim_ratio_config_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.maximum_screen_dim_ratio_config)
}

// optional int32 screen_off_timeout_setting_ms = 22;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_screen_off_timeout_setting_ms() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_screen_off_timeout_setting_ms() {
  screen_off_timeout_setting_ms_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::screen_off_timeout_setting_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_off_timeout_setting_ms)
  return screen_off_timeout_setting_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_screen_off_timeout_setting_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  screen_off_timeout_setting_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_off_timeout_setting_ms)
}

// optional sint32 sleep_timeout_setting_ms = 23;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_sleep_timeout_setting_ms() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_sleep_timeout_setting_ms() {
  sleep_timeout_setting_ms_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::sleep_timeout_setting_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.sleep_timeout_setting_ms)
  return sleep_timeout_setting_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_sleep_timeout_setting_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  sleep_timeout_setting_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.sleep_timeout_setting_ms)
}

// optional int32 maximum_screen_off_timeout_from_device_admin_ms = 24;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_maximum_screen_off_timeout_from_device_admin_ms() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_maximum_screen_off_timeout_from_device_admin_ms() {
  maximum_screen_off_timeout_from_device_admin_ms_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::maximum_screen_off_timeout_from_device_admin_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.maximum_screen_off_timeout_from_device_admin_ms)
  return maximum_screen_off_timeout_from_device_admin_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_maximum_screen_off_timeout_from_device_admin_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  maximum_screen_off_timeout_from_device_admin_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.maximum_screen_off_timeout_from_device_admin_ms)
}

// optional bool is_maximum_screen_off_timeout_from_device_admin_enforced_locked = 25;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_maximum_screen_off_timeout_from_device_admin_enforced_locked() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_maximum_screen_off_timeout_from_device_admin_enforced_locked() {
  is_maximum_screen_off_timeout_from_device_admin_enforced_locked_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_maximum_screen_off_timeout_from_device_admin_enforced_locked() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_maximum_screen_off_timeout_from_device_admin_enforced_locked)
  return is_maximum_screen_off_timeout_from_device_admin_enforced_locked_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_maximum_screen_off_timeout_from_device_admin_enforced_locked(bool value) {
  _has_bits_[0] |= 0x00200000u;
  is_maximum_screen_off_timeout_from_device_admin_enforced_locked_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_maximum_screen_off_timeout_from_device_admin_enforced_locked)
}

// optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto stay_on_while_plugged_in = 26;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_stay_on_while_plugged_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_stay_on_while_plugged_in() {
  if (stay_on_while_plugged_in_ != nullptr) stay_on_while_plugged_in_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto& PowerServiceSettingsAndConfigurationDumpProto::stay_on_while_plugged_in() const {
  const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* p = stay_on_while_plugged_in_;
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.stay_on_while_plugged_in)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto*>(
      &::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto_default_instance_);
}
inline ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* PowerServiceSettingsAndConfigurationDumpProto::release_stay_on_while_plugged_in() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.stay_on_while_plugged_in)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* temp = stay_on_while_plugged_in_;
  stay_on_while_plugged_in_ = nullptr;
  return temp;
}
inline ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* PowerServiceSettingsAndConfigurationDumpProto::mutable_stay_on_while_plugged_in() {
  _has_bits_[0] |= 0x00000001u;
  if (stay_on_while_plugged_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto>(GetArenaNoVirtual());
    stay_on_while_plugged_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.stay_on_while_plugged_in)
  return stay_on_while_plugged_in_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_allocated_stay_on_while_plugged_in(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto* stay_on_while_plugged_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stay_on_while_plugged_in_;
  }
  if (stay_on_while_plugged_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stay_on_while_plugged_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stay_on_while_plugged_in, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stay_on_while_plugged_in_ = stay_on_while_plugged_in;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.stay_on_while_plugged_in)
}

// optional .android.providers.settings.SettingsProto.ScreenBrightnessMode screen_brightness_mode_setting = 27;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_screen_brightness_mode_setting() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_screen_brightness_mode_setting() {
  screen_brightness_mode_setting_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::android::providers::settings::SettingsProto_ScreenBrightnessMode PowerServiceSettingsAndConfigurationDumpProto::screen_brightness_mode_setting() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_mode_setting)
  return static_cast< ::android::providers::settings::SettingsProto_ScreenBrightnessMode >(screen_brightness_mode_setting_);
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_screen_brightness_mode_setting(::android::providers::settings::SettingsProto_ScreenBrightnessMode value) {
  assert(::android::providers::settings::SettingsProto_ScreenBrightnessMode_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  screen_brightness_mode_setting_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_mode_setting)
}

// optional sint32 screen_brightness_override_from_window_manager = 28;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_screen_brightness_override_from_window_manager() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_screen_brightness_override_from_window_manager() {
  screen_brightness_override_from_window_manager_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::screen_brightness_override_from_window_manager() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_override_from_window_manager)
  return screen_brightness_override_from_window_manager_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_screen_brightness_override_from_window_manager(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  screen_brightness_override_from_window_manager_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_override_from_window_manager)
}

// optional sint64 user_activity_timeout_override_from_window_manager_ms = 29;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_user_activity_timeout_override_from_window_manager_ms() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_user_activity_timeout_override_from_window_manager_ms() {
  user_activity_timeout_override_from_window_manager_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PowerServiceSettingsAndConfigurationDumpProto::user_activity_timeout_override_from_window_manager_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.user_activity_timeout_override_from_window_manager_ms)
  return user_activity_timeout_override_from_window_manager_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_user_activity_timeout_override_from_window_manager_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x10000000u;
  user_activity_timeout_override_from_window_manager_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.user_activity_timeout_override_from_window_manager_ms)
}

// optional bool is_user_inactive_override_from_window_manager = 30;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_user_inactive_override_from_window_manager() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_user_inactive_override_from_window_manager() {
  is_user_inactive_override_from_window_manager_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_user_inactive_override_from_window_manager() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_user_inactive_override_from_window_manager)
  return is_user_inactive_override_from_window_manager_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_user_inactive_override_from_window_manager(bool value) {
  _has_bits_[1] |= 0x00000001u;
  is_user_inactive_override_from_window_manager_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_user_inactive_override_from_window_manager)
}

// optional .android.view.DisplayStateEnum doze_screen_state_override_from_dream_manager = 31;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_doze_screen_state_override_from_dream_manager() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_doze_screen_state_override_from_dream_manager() {
  doze_screen_state_override_from_dream_manager_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::android::view::DisplayStateEnum PowerServiceSettingsAndConfigurationDumpProto::doze_screen_state_override_from_dream_manager() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.doze_screen_state_override_from_dream_manager)
  return static_cast< ::android::view::DisplayStateEnum >(doze_screen_state_override_from_dream_manager_);
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_doze_screen_state_override_from_dream_manager(::android::view::DisplayStateEnum value) {
  assert(::android::view::DisplayStateEnum_IsValid(value));
  _has_bits_[0] |= 0x40000000u;
  doze_screen_state_override_from_dream_manager_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.doze_screen_state_override_from_dream_manager)
}

// optional float dozed_screen_brightness_override_from_dream_manager = 32;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_dozed_screen_brightness_override_from_dream_manager() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_dozed_screen_brightness_override_from_dream_manager() {
  dozed_screen_brightness_override_from_dream_manager_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float PowerServiceSettingsAndConfigurationDumpProto::dozed_screen_brightness_override_from_dream_manager() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.dozed_screen_brightness_override_from_dream_manager)
  return dozed_screen_brightness_override_from_dream_manager_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_dozed_screen_brightness_override_from_dream_manager(float value) {
  _has_bits_[0] |= 0x80000000u;
  dozed_screen_brightness_override_from_dream_manager_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.dozed_screen_brightness_override_from_dream_manager)
}

// optional .com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto screen_brightness_setting_limits = 33;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_screen_brightness_setting_limits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_screen_brightness_setting_limits() {
  if (screen_brightness_setting_limits_ != nullptr) screen_brightness_setting_limits_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto& PowerServiceSettingsAndConfigurationDumpProto::screen_brightness_setting_limits() const {
  const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* p = screen_brightness_setting_limits_;
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_setting_limits)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto*>(
      &::com::android::server::power::_PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto_default_instance_);
}
inline ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* PowerServiceSettingsAndConfigurationDumpProto::release_screen_brightness_setting_limits() {
  // @@protoc_insertion_point(field_release:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_setting_limits)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* temp = screen_brightness_setting_limits_;
  screen_brightness_setting_limits_ = nullptr;
  return temp;
}
inline ::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* PowerServiceSettingsAndConfigurationDumpProto::mutable_screen_brightness_setting_limits() {
  _has_bits_[0] |= 0x00000002u;
  if (screen_brightness_setting_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto>(GetArenaNoVirtual());
    screen_brightness_setting_limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_setting_limits)
  return screen_brightness_setting_limits_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_allocated_screen_brightness_setting_limits(::com::android::server::power::PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto* screen_brightness_setting_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screen_brightness_setting_limits_;
  }
  if (screen_brightness_setting_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screen_brightness_setting_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_brightness_setting_limits, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  screen_brightness_setting_limits_ = screen_brightness_setting_limits;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_setting_limits)
}

// optional bool is_double_tap_wake_enabled = 34;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_double_tap_wake_enabled() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_double_tap_wake_enabled() {
  is_double_tap_wake_enabled_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_double_tap_wake_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_double_tap_wake_enabled)
  return is_double_tap_wake_enabled_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_double_tap_wake_enabled(bool value) {
  _has_bits_[1] |= 0x00000002u;
  is_double_tap_wake_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_double_tap_wake_enabled)
}

// optional bool is_vr_mode_enabled = 35;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_is_vr_mode_enabled() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_is_vr_mode_enabled() {
  is_vr_mode_enabled_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::is_vr_mode_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_vr_mode_enabled)
  return is_vr_mode_enabled_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_is_vr_mode_enabled(bool value) {
  _has_bits_[1] |= 0x00000004u;
  is_vr_mode_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.is_vr_mode_enabled)
}

// optional bool draw_wake_lock_override_from_sidekick = 36;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_draw_wake_lock_override_from_sidekick() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_draw_wake_lock_override_from_sidekick() {
  draw_wake_lock_override_from_sidekick_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool PowerServiceSettingsAndConfigurationDumpProto::draw_wake_lock_override_from_sidekick() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.draw_wake_lock_override_from_sidekick)
  return draw_wake_lock_override_from_sidekick_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_draw_wake_lock_override_from_sidekick(bool value) {
  _has_bits_[1] |= 0x00000008u;
  draw_wake_lock_override_from_sidekick_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.draw_wake_lock_override_from_sidekick)
}

// optional sint32 attentive_timeout_setting_ms = 37;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_attentive_timeout_setting_ms() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_attentive_timeout_setting_ms() {
  attentive_timeout_setting_ms_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::attentive_timeout_setting_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.attentive_timeout_setting_ms)
  return attentive_timeout_setting_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_attentive_timeout_setting_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  attentive_timeout_setting_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.attentive_timeout_setting_ms)
}

// optional sint32 attentive_timeout_config_ms = 38;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_attentive_timeout_config_ms() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_attentive_timeout_config_ms() {
  attentive_timeout_config_ms_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::attentive_timeout_config_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.attentive_timeout_config_ms)
  return attentive_timeout_config_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_attentive_timeout_config_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  attentive_timeout_config_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.attentive_timeout_config_ms)
}

// optional sint32 attentive_warning_duration_config_ms = 39;
inline bool PowerServiceSettingsAndConfigurationDumpProto::has_attentive_warning_duration_config_ms() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::clear_attentive_warning_duration_config_ms() {
  attentive_warning_duration_config_ms_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PowerServiceSettingsAndConfigurationDumpProto::attentive_warning_duration_config_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.attentive_warning_duration_config_ms)
  return attentive_warning_duration_config_ms_;
}
inline void PowerServiceSettingsAndConfigurationDumpProto::set_attentive_warning_duration_config_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  attentive_warning_duration_config_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.attentive_warning_duration_config_ms)
}

// -------------------------------------------------------------------

// BatterySaverStateMachineProto

// optional bool enabled = 1;
inline bool BatterySaverStateMachineProto::has_enabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BatterySaverStateMachineProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool BatterySaverStateMachineProto::enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.enabled)
  return enabled_;
}
inline void BatterySaverStateMachineProto::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000400u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.enabled)
}

// optional .com.android.server.power.BatterySaverStateMachineProto.StateEnum state = 18;
inline bool BatterySaverStateMachineProto::has_state() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::com::android::server::power::BatterySaverStateMachineProto_StateEnum BatterySaverStateMachineProto::state() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.state)
  return static_cast< ::com::android::server::power::BatterySaverStateMachineProto_StateEnum >(state_);
}
inline void BatterySaverStateMachineProto::set_state(::com::android::server::power::BatterySaverStateMachineProto_StateEnum value) {
  assert(::com::android::server::power::BatterySaverStateMachineProto_StateEnum_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.state)
}

// optional bool is_full_enabled = 14;
inline bool BatterySaverStateMachineProto::has_is_full_enabled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BatterySaverStateMachineProto::clear_is_full_enabled() {
  is_full_enabled_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool BatterySaverStateMachineProto::is_full_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.is_full_enabled)
  return is_full_enabled_;
}
inline void BatterySaverStateMachineProto::set_is_full_enabled(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_full_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.is_full_enabled)
}

// optional bool is_adaptive_enabled = 15;
inline bool BatterySaverStateMachineProto::has_is_adaptive_enabled() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_is_adaptive_enabled() {
  is_adaptive_enabled_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool BatterySaverStateMachineProto::is_adaptive_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.is_adaptive_enabled)
  return is_adaptive_enabled_;
}
inline void BatterySaverStateMachineProto::set_is_adaptive_enabled(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_adaptive_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.is_adaptive_enabled)
}

// optional bool should_advertise_is_enabled = 16;
inline bool BatterySaverStateMachineProto::has_should_advertise_is_enabled() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_should_advertise_is_enabled() {
  should_advertise_is_enabled_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool BatterySaverStateMachineProto::should_advertise_is_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.should_advertise_is_enabled)
  return should_advertise_is_enabled_;
}
inline void BatterySaverStateMachineProto::set_should_advertise_is_enabled(bool value) {
  _has_bits_[0] |= 0x00002000u;
  should_advertise_is_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.should_advertise_is_enabled)
}

// optional bool boot_completed = 2;
inline bool BatterySaverStateMachineProto::has_boot_completed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatterySaverStateMachineProto::clear_boot_completed() {
  boot_completed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BatterySaverStateMachineProto::boot_completed() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.boot_completed)
  return boot_completed_;
}
inline void BatterySaverStateMachineProto::set_boot_completed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  boot_completed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.boot_completed)
}

// optional bool settings_loaded = 3;
inline bool BatterySaverStateMachineProto::has_settings_loaded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatterySaverStateMachineProto::clear_settings_loaded() {
  settings_loaded_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BatterySaverStateMachineProto::settings_loaded() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.settings_loaded)
  return settings_loaded_;
}
inline void BatterySaverStateMachineProto::set_settings_loaded(bool value) {
  _has_bits_[0] |= 0x00000002u;
  settings_loaded_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.settings_loaded)
}

// optional bool battery_status_set = 4;
inline bool BatterySaverStateMachineProto::has_battery_status_set() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatterySaverStateMachineProto::clear_battery_status_set() {
  battery_status_set_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BatterySaverStateMachineProto::battery_status_set() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.battery_status_set)
  return battery_status_set_;
}
inline void BatterySaverStateMachineProto::set_battery_status_set(bool value) {
  _has_bits_[0] |= 0x00000004u;
  battery_status_set_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.battery_status_set)
}

// optional bool is_powered = 6;
inline bool BatterySaverStateMachineProto::has_is_powered() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatterySaverStateMachineProto::clear_is_powered() {
  is_powered_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool BatterySaverStateMachineProto::is_powered() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.is_powered)
  return is_powered_;
}
inline void BatterySaverStateMachineProto::set_is_powered(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_powered_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.is_powered)
}

// optional int32 battery_level = 7;
inline bool BatterySaverStateMachineProto::has_battery_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatterySaverStateMachineProto::clear_battery_level() {
  battery_level_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatterySaverStateMachineProto::battery_level() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.battery_level)
  return battery_level_;
}
inline void BatterySaverStateMachineProto::set_battery_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  battery_level_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.battery_level)
}

// optional bool is_battery_level_low = 8;
inline bool BatterySaverStateMachineProto::has_is_battery_level_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BatterySaverStateMachineProto::clear_is_battery_level_low() {
  is_battery_level_low_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BatterySaverStateMachineProto::is_battery_level_low() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.is_battery_level_low)
  return is_battery_level_low_;
}
inline void BatterySaverStateMachineProto::set_is_battery_level_low(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_battery_level_low_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.is_battery_level_low)
}

// optional .com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum setting_automatic_trigger = 19;
inline bool BatterySaverStateMachineProto::has_setting_automatic_trigger() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_setting_automatic_trigger() {
  setting_automatic_trigger_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum BatterySaverStateMachineProto::setting_automatic_trigger() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.setting_automatic_trigger)
  return static_cast< ::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum >(setting_automatic_trigger_);
}
inline void BatterySaverStateMachineProto::set_setting_automatic_trigger(::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum value) {
  assert(::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  setting_automatic_trigger_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.setting_automatic_trigger)
}

// optional bool setting_battery_saver_enabled = 9;
inline bool BatterySaverStateMachineProto::has_setting_battery_saver_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BatterySaverStateMachineProto::clear_setting_battery_saver_enabled() {
  setting_battery_saver_enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool BatterySaverStateMachineProto::setting_battery_saver_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_enabled)
  return setting_battery_saver_enabled_;
}
inline void BatterySaverStateMachineProto::set_setting_battery_saver_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  setting_battery_saver_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_enabled)
}

// optional bool setting_battery_saver_enabled_sticky = 10;
inline bool BatterySaverStateMachineProto::has_setting_battery_saver_enabled_sticky() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BatterySaverStateMachineProto::clear_setting_battery_saver_enabled_sticky() {
  setting_battery_saver_enabled_sticky_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool BatterySaverStateMachineProto::setting_battery_saver_enabled_sticky() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_enabled_sticky)
  return setting_battery_saver_enabled_sticky_;
}
inline void BatterySaverStateMachineProto::set_setting_battery_saver_enabled_sticky(bool value) {
  _has_bits_[0] |= 0x00000080u;
  setting_battery_saver_enabled_sticky_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_enabled_sticky)
}

// optional int32 setting_battery_saver_trigger_threshold = 11;
inline bool BatterySaverStateMachineProto::has_setting_battery_saver_trigger_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BatterySaverStateMachineProto::clear_setting_battery_saver_trigger_threshold() {
  setting_battery_saver_trigger_threshold_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatterySaverStateMachineProto::setting_battery_saver_trigger_threshold() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_trigger_threshold)
  return setting_battery_saver_trigger_threshold_;
}
inline void BatterySaverStateMachineProto::set_setting_battery_saver_trigger_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  setting_battery_saver_trigger_threshold_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_trigger_threshold)
}

// optional bool setting_battery_saver_sticky_auto_disable_enabled = 12;
inline bool BatterySaverStateMachineProto::has_setting_battery_saver_sticky_auto_disable_enabled() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BatterySaverStateMachineProto::clear_setting_battery_saver_sticky_auto_disable_enabled() {
  setting_battery_saver_sticky_auto_disable_enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool BatterySaverStateMachineProto::setting_battery_saver_sticky_auto_disable_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_sticky_auto_disable_enabled)
  return setting_battery_saver_sticky_auto_disable_enabled_;
}
inline void BatterySaverStateMachineProto::set_setting_battery_saver_sticky_auto_disable_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  setting_battery_saver_sticky_auto_disable_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_sticky_auto_disable_enabled)
}

// optional int32 setting_battery_saver_sticky_auto_disable_threshold = 13;
inline bool BatterySaverStateMachineProto::has_setting_battery_saver_sticky_auto_disable_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_setting_battery_saver_sticky_auto_disable_threshold() {
  setting_battery_saver_sticky_auto_disable_threshold_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatterySaverStateMachineProto::setting_battery_saver_sticky_auto_disable_threshold() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_sticky_auto_disable_threshold)
  return setting_battery_saver_sticky_auto_disable_threshold_;
}
inline void BatterySaverStateMachineProto::set_setting_battery_saver_sticky_auto_disable_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  setting_battery_saver_sticky_auto_disable_threshold_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.setting_battery_saver_sticky_auto_disable_threshold)
}

// optional int64 last_adaptive_battery_saver_changed_externally_elapsed = 17;
inline bool BatterySaverStateMachineProto::has_last_adaptive_battery_saver_changed_externally_elapsed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_last_adaptive_battery_saver_changed_externally_elapsed() {
  last_adaptive_battery_saver_changed_externally_elapsed_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BatterySaverStateMachineProto::last_adaptive_battery_saver_changed_externally_elapsed() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.last_adaptive_battery_saver_changed_externally_elapsed)
  return last_adaptive_battery_saver_changed_externally_elapsed_;
}
inline void BatterySaverStateMachineProto::set_last_adaptive_battery_saver_changed_externally_elapsed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  last_adaptive_battery_saver_changed_externally_elapsed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.last_adaptive_battery_saver_changed_externally_elapsed)
}

// optional int32 default_dynamic_disable_threshold = 20;
inline bool BatterySaverStateMachineProto::has_default_dynamic_disable_threshold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_default_dynamic_disable_threshold() {
  default_dynamic_disable_threshold_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatterySaverStateMachineProto::default_dynamic_disable_threshold() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.default_dynamic_disable_threshold)
  return default_dynamic_disable_threshold_;
}
inline void BatterySaverStateMachineProto::set_default_dynamic_disable_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  default_dynamic_disable_threshold_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.default_dynamic_disable_threshold)
}

// optional int32 dynamic_disable_threshold = 21;
inline bool BatterySaverStateMachineProto::has_dynamic_disable_threshold() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_dynamic_disable_threshold() {
  dynamic_disable_threshold_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatterySaverStateMachineProto::dynamic_disable_threshold() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.dynamic_disable_threshold)
  return dynamic_disable_threshold_;
}
inline void BatterySaverStateMachineProto::set_dynamic_disable_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  dynamic_disable_threshold_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.dynamic_disable_threshold)
}

// optional bool dynamic_battery_saver_enabled = 22;
inline bool BatterySaverStateMachineProto::has_dynamic_battery_saver_enabled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BatterySaverStateMachineProto::clear_dynamic_battery_saver_enabled() {
  dynamic_battery_saver_enabled_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool BatterySaverStateMachineProto::dynamic_battery_saver_enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.power.BatterySaverStateMachineProto.dynamic_battery_saver_enabled)
  return dynamic_battery_saver_enabled_;
}
inline void BatterySaverStateMachineProto::set_dynamic_battery_saver_enabled(bool value) {
  _has_bits_[0] |= 0x00100000u;
  dynamic_battery_saver_enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.power.BatterySaverStateMachineProto.dynamic_battery_saver_enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace power
}  // namespace server
}  // namespace android
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::android::server::power::BatterySaverStateMachineProto_StateEnum> : ::std::true_type {};
template <> struct is_proto_enum< ::com::android::server::power::BatterySaverStateMachineProto_AutomaticTriggerEnum> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpowermanagerservice_2eproto
