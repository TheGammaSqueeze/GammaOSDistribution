// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/profilerinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace app {
class ProfilerInfoProto;
class ProfilerInfoProtoDefaultTypeInternal;
extern ProfilerInfoProtoDefaultTypeInternal _ProfilerInfoProto_default_instance_;
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::app::ProfilerInfoProto* Arena::CreateMaybeMessage<::android::app::ProfilerInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace app {

// ===================================================================

class ProfilerInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.app.ProfilerInfoProto) */ {
 public:
  ProfilerInfoProto();
  virtual ~ProfilerInfoProto();

  ProfilerInfoProto(const ProfilerInfoProto& from);
  ProfilerInfoProto(ProfilerInfoProto&& from) noexcept
    : ProfilerInfoProto() {
    *this = ::std::move(from);
  }

  inline ProfilerInfoProto& operator=(const ProfilerInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfilerInfoProto& operator=(ProfilerInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProfilerInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfilerInfoProto* internal_default_instance() {
    return reinterpret_cast<const ProfilerInfoProto*>(
               &_ProfilerInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfilerInfoProto& a, ProfilerInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfilerInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfilerInfoProto* New() const final {
    return CreateMaybeMessage<ProfilerInfoProto>(nullptr);
  }

  ProfilerInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfilerInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProfilerInfoProto& from);
  void MergeFrom(const ProfilerInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfilerInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.app.ProfilerInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileFileFieldNumber = 1,
    kAgentFieldNumber = 6,
    kProfileFdFieldNumber = 2,
    kSamplingIntervalFieldNumber = 3,
    kAutoStopProfilerFieldNumber = 4,
    kStreamingOutputFieldNumber = 5,
  };
  // optional string profile_file = 1;
  bool has_profile_file() const;
  void clear_profile_file();
  const std::string& profile_file() const;
  void set_profile_file(const std::string& value);
  void set_profile_file(std::string&& value);
  void set_profile_file(const char* value);
  void set_profile_file(const char* value, size_t size);
  std::string* mutable_profile_file();
  std::string* release_profile_file();
  void set_allocated_profile_file(std::string* profile_file);

  // optional string agent = 6;
  bool has_agent() const;
  void clear_agent();
  const std::string& agent() const;
  void set_agent(const std::string& value);
  void set_agent(std::string&& value);
  void set_agent(const char* value);
  void set_agent(const char* value, size_t size);
  std::string* mutable_agent();
  std::string* release_agent();
  void set_allocated_agent(std::string* agent);

  // optional int32 profile_fd = 2;
  bool has_profile_fd() const;
  void clear_profile_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 profile_fd() const;
  void set_profile_fd(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 sampling_interval = 3;
  bool has_sampling_interval() const;
  void clear_sampling_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 sampling_interval() const;
  void set_sampling_interval(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool auto_stop_profiler = 4;
  bool has_auto_stop_profiler() const;
  void clear_auto_stop_profiler();
  bool auto_stop_profiler() const;
  void set_auto_stop_profiler(bool value);

  // optional bool streaming_output = 5;
  bool has_streaming_output() const;
  void clear_streaming_output();
  bool streaming_output() const;
  void set_streaming_output(bool value);

  // @@protoc_insertion_point(class_scope:android.app.ProfilerInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_;
  ::PROTOBUF_NAMESPACE_ID::int32 profile_fd_;
  ::PROTOBUF_NAMESPACE_ID::int32 sampling_interval_;
  bool auto_stop_profiler_;
  bool streaming_output_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfilerInfoProto

// optional string profile_file = 1;
inline bool ProfilerInfoProto::has_profile_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfilerInfoProto::clear_profile_file() {
  profile_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfilerInfoProto::profile_file() const {
  // @@protoc_insertion_point(field_get:android.app.ProfilerInfoProto.profile_file)
  return profile_file_.GetNoArena();
}
inline void ProfilerInfoProto::set_profile_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  profile_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.app.ProfilerInfoProto.profile_file)
}
inline void ProfilerInfoProto::set_profile_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  profile_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.app.ProfilerInfoProto.profile_file)
}
inline void ProfilerInfoProto::set_profile_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  profile_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.app.ProfilerInfoProto.profile_file)
}
inline void ProfilerInfoProto::set_profile_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  profile_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.app.ProfilerInfoProto.profile_file)
}
inline std::string* ProfilerInfoProto::mutable_profile_file() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.app.ProfilerInfoProto.profile_file)
  return profile_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProfilerInfoProto::release_profile_file() {
  // @@protoc_insertion_point(field_release:android.app.ProfilerInfoProto.profile_file)
  if (!has_profile_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return profile_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProfilerInfoProto::set_allocated_profile_file(std::string* profile_file) {
  if (profile_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_file);
  // @@protoc_insertion_point(field_set_allocated:android.app.ProfilerInfoProto.profile_file)
}

// optional int32 profile_fd = 2;
inline bool ProfilerInfoProto::has_profile_fd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfilerInfoProto::clear_profile_fd() {
  profile_fd_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfilerInfoProto::profile_fd() const {
  // @@protoc_insertion_point(field_get:android.app.ProfilerInfoProto.profile_fd)
  return profile_fd_;
}
inline void ProfilerInfoProto::set_profile_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  profile_fd_ = value;
  // @@protoc_insertion_point(field_set:android.app.ProfilerInfoProto.profile_fd)
}

// optional int32 sampling_interval = 3;
inline bool ProfilerInfoProto::has_sampling_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfilerInfoProto::clear_sampling_interval() {
  sampling_interval_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfilerInfoProto::sampling_interval() const {
  // @@protoc_insertion_point(field_get:android.app.ProfilerInfoProto.sampling_interval)
  return sampling_interval_;
}
inline void ProfilerInfoProto::set_sampling_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  sampling_interval_ = value;
  // @@protoc_insertion_point(field_set:android.app.ProfilerInfoProto.sampling_interval)
}

// optional bool auto_stop_profiler = 4;
inline bool ProfilerInfoProto::has_auto_stop_profiler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfilerInfoProto::clear_auto_stop_profiler() {
  auto_stop_profiler_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ProfilerInfoProto::auto_stop_profiler() const {
  // @@protoc_insertion_point(field_get:android.app.ProfilerInfoProto.auto_stop_profiler)
  return auto_stop_profiler_;
}
inline void ProfilerInfoProto::set_auto_stop_profiler(bool value) {
  _has_bits_[0] |= 0x00000010u;
  auto_stop_profiler_ = value;
  // @@protoc_insertion_point(field_set:android.app.ProfilerInfoProto.auto_stop_profiler)
}

// optional bool streaming_output = 5;
inline bool ProfilerInfoProto::has_streaming_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProfilerInfoProto::clear_streaming_output() {
  streaming_output_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ProfilerInfoProto::streaming_output() const {
  // @@protoc_insertion_point(field_get:android.app.ProfilerInfoProto.streaming_output)
  return streaming_output_;
}
inline void ProfilerInfoProto::set_streaming_output(bool value) {
  _has_bits_[0] |= 0x00000020u;
  streaming_output_ = value;
  // @@protoc_insertion_point(field_set:android.app.ProfilerInfoProto.streaming_output)
}

// optional string agent = 6;
inline bool ProfilerInfoProto::has_agent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfilerInfoProto::clear_agent() {
  agent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProfilerInfoProto::agent() const {
  // @@protoc_insertion_point(field_get:android.app.ProfilerInfoProto.agent)
  return agent_.GetNoArena();
}
inline void ProfilerInfoProto::set_agent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.app.ProfilerInfoProto.agent)
}
inline void ProfilerInfoProto::set_agent(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  agent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.app.ProfilerInfoProto.agent)
}
inline void ProfilerInfoProto::set_agent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.app.ProfilerInfoProto.agent)
}
inline void ProfilerInfoProto::set_agent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.app.ProfilerInfoProto.agent)
}
inline std::string* ProfilerInfoProto::mutable_agent() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.app.ProfilerInfoProto.agent)
  return agent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProfilerInfoProto::release_agent() {
  // @@protoc_insertion_point(field_release:android.app.ProfilerInfoProto.agent)
  if (!has_agent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return agent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProfilerInfoProto::set_allocated_agent(std::string* agent) {
  if (agent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  agent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent);
  // @@protoc_insertion_point(field_set_allocated:android.app.ProfilerInfoProto.agent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace app
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fprofilerinfo_2eproto
