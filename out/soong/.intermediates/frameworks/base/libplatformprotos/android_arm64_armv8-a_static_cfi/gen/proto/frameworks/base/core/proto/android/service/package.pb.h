// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/package.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/content/featureinfo.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace service {
namespace pm {
class PackageProto;
class PackageProtoDefaultTypeInternal;
extern PackageProtoDefaultTypeInternal _PackageProto_default_instance_;
class PackageProto_InstallSourceProto;
class PackageProto_InstallSourceProtoDefaultTypeInternal;
extern PackageProto_InstallSourceProtoDefaultTypeInternal _PackageProto_InstallSourceProto_default_instance_;
class PackageProto_SplitProto;
class PackageProto_SplitProtoDefaultTypeInternal;
extern PackageProto_SplitProtoDefaultTypeInternal _PackageProto_SplitProto_default_instance_;
class PackageProto_StatesProto;
class PackageProto_StatesProtoDefaultTypeInternal;
extern PackageProto_StatesProtoDefaultTypeInternal _PackageProto_StatesProto_default_instance_;
class PackageProto_UserInfoProto;
class PackageProto_UserInfoProtoDefaultTypeInternal;
extern PackageProto_UserInfoProtoDefaultTypeInternal _PackageProto_UserInfoProto_default_instance_;
class PackageProto_UserPermissionsProto;
class PackageProto_UserPermissionsProtoDefaultTypeInternal;
extern PackageProto_UserPermissionsProtoDefaultTypeInternal _PackageProto_UserPermissionsProto_default_instance_;
class PackageServiceDumpProto;
class PackageServiceDumpProtoDefaultTypeInternal;
extern PackageServiceDumpProtoDefaultTypeInternal _PackageServiceDumpProto_default_instance_;
class PackageServiceDumpProto_PackageShortProto;
class PackageServiceDumpProto_PackageShortProtoDefaultTypeInternal;
extern PackageServiceDumpProto_PackageShortProtoDefaultTypeInternal _PackageServiceDumpProto_PackageShortProto_default_instance_;
class PackageServiceDumpProto_SharedLibraryProto;
class PackageServiceDumpProto_SharedLibraryProtoDefaultTypeInternal;
extern PackageServiceDumpProto_SharedLibraryProtoDefaultTypeInternal _PackageServiceDumpProto_SharedLibraryProto_default_instance_;
class PackageServiceDumpProto_SharedUserProto;
class PackageServiceDumpProto_SharedUserProtoDefaultTypeInternal;
extern PackageServiceDumpProto_SharedUserProtoDefaultTypeInternal _PackageServiceDumpProto_SharedUserProto_default_instance_;
}  // namespace pm
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::pm::PackageProto* Arena::CreateMaybeMessage<::android::service::pm::PackageProto>(Arena*);
template<> ::android::service::pm::PackageProto_InstallSourceProto* Arena::CreateMaybeMessage<::android::service::pm::PackageProto_InstallSourceProto>(Arena*);
template<> ::android::service::pm::PackageProto_SplitProto* Arena::CreateMaybeMessage<::android::service::pm::PackageProto_SplitProto>(Arena*);
template<> ::android::service::pm::PackageProto_StatesProto* Arena::CreateMaybeMessage<::android::service::pm::PackageProto_StatesProto>(Arena*);
template<> ::android::service::pm::PackageProto_UserInfoProto* Arena::CreateMaybeMessage<::android::service::pm::PackageProto_UserInfoProto>(Arena*);
template<> ::android::service::pm::PackageProto_UserPermissionsProto* Arena::CreateMaybeMessage<::android::service::pm::PackageProto_UserPermissionsProto>(Arena*);
template<> ::android::service::pm::PackageServiceDumpProto* Arena::CreateMaybeMessage<::android::service::pm::PackageServiceDumpProto>(Arena*);
template<> ::android::service::pm::PackageServiceDumpProto_PackageShortProto* Arena::CreateMaybeMessage<::android::service::pm::PackageServiceDumpProto_PackageShortProto>(Arena*);
template<> ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto* Arena::CreateMaybeMessage<::android::service::pm::PackageServiceDumpProto_SharedLibraryProto>(Arena*);
template<> ::android::service::pm::PackageServiceDumpProto_SharedUserProto* Arena::CreateMaybeMessage<::android::service::pm::PackageServiceDumpProto_SharedUserProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {
namespace pm {

enum PackageProto_UserInfoProto_InstallType : int {
  PackageProto_UserInfoProto_InstallType_NOT_INSTALLED_FOR_USER = 0,
  PackageProto_UserInfoProto_InstallType_FULL_APP_INSTALL = 1,
  PackageProto_UserInfoProto_InstallType_INSTANT_APP_INSTALL = 2
};
bool PackageProto_UserInfoProto_InstallType_IsValid(int value);
constexpr PackageProto_UserInfoProto_InstallType PackageProto_UserInfoProto_InstallType_InstallType_MIN = PackageProto_UserInfoProto_InstallType_NOT_INSTALLED_FOR_USER;
constexpr PackageProto_UserInfoProto_InstallType PackageProto_UserInfoProto_InstallType_InstallType_MAX = PackageProto_UserInfoProto_InstallType_INSTANT_APP_INSTALL;
constexpr int PackageProto_UserInfoProto_InstallType_InstallType_ARRAYSIZE = PackageProto_UserInfoProto_InstallType_InstallType_MAX + 1;

const std::string& PackageProto_UserInfoProto_InstallType_Name(PackageProto_UserInfoProto_InstallType value);
template<typename T>
inline const std::string& PackageProto_UserInfoProto_InstallType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PackageProto_UserInfoProto_InstallType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PackageProto_UserInfoProto_InstallType_Name.");
  return PackageProto_UserInfoProto_InstallType_Name(static_cast<PackageProto_UserInfoProto_InstallType>(enum_t_value));
}
bool PackageProto_UserInfoProto_InstallType_Parse(
    const std::string& name, PackageProto_UserInfoProto_InstallType* value);
enum PackageProto_UserInfoProto_EnabledState : int {
  PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DEFAULT = 0,
  PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_ENABLED = 1,
  PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DISABLED = 2,
  PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DISABLED_USER = 3,
  PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED = 4
};
bool PackageProto_UserInfoProto_EnabledState_IsValid(int value);
constexpr PackageProto_UserInfoProto_EnabledState PackageProto_UserInfoProto_EnabledState_EnabledState_MIN = PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DEFAULT;
constexpr PackageProto_UserInfoProto_EnabledState PackageProto_UserInfoProto_EnabledState_EnabledState_MAX = PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED;
constexpr int PackageProto_UserInfoProto_EnabledState_EnabledState_ARRAYSIZE = PackageProto_UserInfoProto_EnabledState_EnabledState_MAX + 1;

const std::string& PackageProto_UserInfoProto_EnabledState_Name(PackageProto_UserInfoProto_EnabledState value);
template<typename T>
inline const std::string& PackageProto_UserInfoProto_EnabledState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PackageProto_UserInfoProto_EnabledState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PackageProto_UserInfoProto_EnabledState_Name.");
  return PackageProto_UserInfoProto_EnabledState_Name(static_cast<PackageProto_UserInfoProto_EnabledState>(enum_t_value));
}
bool PackageProto_UserInfoProto_EnabledState_Parse(
    const std::string& name, PackageProto_UserInfoProto_EnabledState* value);
// ===================================================================

class PackageServiceDumpProto_PackageShortProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageServiceDumpProto.PackageShortProto) */ {
 public:
  PackageServiceDumpProto_PackageShortProto();
  virtual ~PackageServiceDumpProto_PackageShortProto();

  PackageServiceDumpProto_PackageShortProto(const PackageServiceDumpProto_PackageShortProto& from);
  PackageServiceDumpProto_PackageShortProto(PackageServiceDumpProto_PackageShortProto&& from) noexcept
    : PackageServiceDumpProto_PackageShortProto() {
    *this = ::std::move(from);
  }

  inline PackageServiceDumpProto_PackageShortProto& operator=(const PackageServiceDumpProto_PackageShortProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageServiceDumpProto_PackageShortProto& operator=(PackageServiceDumpProto_PackageShortProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageServiceDumpProto_PackageShortProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageServiceDumpProto_PackageShortProto* internal_default_instance() {
    return reinterpret_cast<const PackageServiceDumpProto_PackageShortProto*>(
               &_PackageServiceDumpProto_PackageShortProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PackageServiceDumpProto_PackageShortProto& a, PackageServiceDumpProto_PackageShortProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageServiceDumpProto_PackageShortProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageServiceDumpProto_PackageShortProto* New() const final {
    return CreateMaybeMessage<PackageServiceDumpProto_PackageShortProto>(nullptr);
  }

  PackageServiceDumpProto_PackageShortProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageServiceDumpProto_PackageShortProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageServiceDumpProto_PackageShortProto& from);
  void MergeFrom(const PackageServiceDumpProto_PackageShortProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageServiceDumpProto_PackageShortProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageServiceDumpProto.PackageShortProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 uid = 2;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageServiceDumpProto.PackageShortProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageServiceDumpProto_SharedLibraryProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageServiceDumpProto.SharedLibraryProto) */ {
 public:
  PackageServiceDumpProto_SharedLibraryProto();
  virtual ~PackageServiceDumpProto_SharedLibraryProto();

  PackageServiceDumpProto_SharedLibraryProto(const PackageServiceDumpProto_SharedLibraryProto& from);
  PackageServiceDumpProto_SharedLibraryProto(PackageServiceDumpProto_SharedLibraryProto&& from) noexcept
    : PackageServiceDumpProto_SharedLibraryProto() {
    *this = ::std::move(from);
  }

  inline PackageServiceDumpProto_SharedLibraryProto& operator=(const PackageServiceDumpProto_SharedLibraryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageServiceDumpProto_SharedLibraryProto& operator=(PackageServiceDumpProto_SharedLibraryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageServiceDumpProto_SharedLibraryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageServiceDumpProto_SharedLibraryProto* internal_default_instance() {
    return reinterpret_cast<const PackageServiceDumpProto_SharedLibraryProto*>(
               &_PackageServiceDumpProto_SharedLibraryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PackageServiceDumpProto_SharedLibraryProto& a, PackageServiceDumpProto_SharedLibraryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageServiceDumpProto_SharedLibraryProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageServiceDumpProto_SharedLibraryProto* New() const final {
    return CreateMaybeMessage<PackageServiceDumpProto_SharedLibraryProto>(nullptr);
  }

  PackageServiceDumpProto_SharedLibraryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageServiceDumpProto_SharedLibraryProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageServiceDumpProto_SharedLibraryProto& from);
  void MergeFrom(const PackageServiceDumpProto_SharedLibraryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageServiceDumpProto_SharedLibraryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageServiceDumpProto.SharedLibraryProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 3,
    kApkFieldNumber = 4,
    kIsJarFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string path = 3;
  bool has_path() const;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // optional string apk = 4;
  bool has_apk() const;
  void clear_apk();
  const std::string& apk() const;
  void set_apk(const std::string& value);
  void set_apk(std::string&& value);
  void set_apk(const char* value);
  void set_apk(const char* value, size_t size);
  std::string* mutable_apk();
  std::string* release_apk();
  void set_allocated_apk(std::string* apk);

  // optional bool is_jar = 2;
  bool has_is_jar() const;
  void clear_is_jar();
  bool is_jar() const;
  void set_is_jar(bool value);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageServiceDumpProto.SharedLibraryProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apk_;
  bool is_jar_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageServiceDumpProto_SharedUserProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageServiceDumpProto.SharedUserProto) */ {
 public:
  PackageServiceDumpProto_SharedUserProto();
  virtual ~PackageServiceDumpProto_SharedUserProto();

  PackageServiceDumpProto_SharedUserProto(const PackageServiceDumpProto_SharedUserProto& from);
  PackageServiceDumpProto_SharedUserProto(PackageServiceDumpProto_SharedUserProto&& from) noexcept
    : PackageServiceDumpProto_SharedUserProto() {
    *this = ::std::move(from);
  }

  inline PackageServiceDumpProto_SharedUserProto& operator=(const PackageServiceDumpProto_SharedUserProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageServiceDumpProto_SharedUserProto& operator=(PackageServiceDumpProto_SharedUserProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageServiceDumpProto_SharedUserProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageServiceDumpProto_SharedUserProto* internal_default_instance() {
    return reinterpret_cast<const PackageServiceDumpProto_SharedUserProto*>(
               &_PackageServiceDumpProto_SharedUserProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PackageServiceDumpProto_SharedUserProto& a, PackageServiceDumpProto_SharedUserProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageServiceDumpProto_SharedUserProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageServiceDumpProto_SharedUserProto* New() const final {
    return CreateMaybeMessage<PackageServiceDumpProto_SharedUserProto>(nullptr);
  }

  PackageServiceDumpProto_SharedUserProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageServiceDumpProto_SharedUserProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageServiceDumpProto_SharedUserProto& from);
  void MergeFrom(const PackageServiceDumpProto_SharedUserProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageServiceDumpProto_SharedUserProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageServiceDumpProto.SharedUserProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageServiceDumpProto.SharedUserProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageServiceDumpProto) */ {
 public:
  PackageServiceDumpProto();
  virtual ~PackageServiceDumpProto();

  PackageServiceDumpProto(const PackageServiceDumpProto& from);
  PackageServiceDumpProto(PackageServiceDumpProto&& from) noexcept
    : PackageServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline PackageServiceDumpProto& operator=(const PackageServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageServiceDumpProto& operator=(PackageServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const PackageServiceDumpProto*>(
               &_PackageServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PackageServiceDumpProto& a, PackageServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageServiceDumpProto* New() const final {
    return CreateMaybeMessage<PackageServiceDumpProto>(nullptr);
  }

  PackageServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageServiceDumpProto& from);
  void MergeFrom(const PackageServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PackageServiceDumpProto_PackageShortProto PackageShortProto;
  typedef PackageServiceDumpProto_SharedLibraryProto SharedLibraryProto;
  typedef PackageServiceDumpProto_SharedUserProto SharedUserProto;

  // accessors -------------------------------------------------------

  enum : int {
    kSharedLibrariesFieldNumber = 3,
    kFeaturesFieldNumber = 4,
    kPackagesFieldNumber = 5,
    kSharedUsersFieldNumber = 6,
    kMessagesFieldNumber = 7,
    kRequiredVerifierPackageFieldNumber = 1,
    kVerifierPackageFieldNumber = 2,
  };
  // repeated .android.service.pm.PackageServiceDumpProto.SharedLibraryProto shared_libraries = 3;
  int shared_libraries_size() const;
  void clear_shared_libraries();
  ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto* mutable_shared_libraries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto >*
      mutable_shared_libraries();
  const ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto& shared_libraries(int index) const;
  ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto* add_shared_libraries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto >&
      shared_libraries() const;

  // repeated .android.content.pm.FeatureInfoProto features = 4;
  int features_size() const;
  void clear_features();
  ::android::content::pm::FeatureInfoProto* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::pm::FeatureInfoProto >*
      mutable_features();
  const ::android::content::pm::FeatureInfoProto& features(int index) const;
  ::android::content::pm::FeatureInfoProto* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::pm::FeatureInfoProto >&
      features() const;

  // repeated .android.service.pm.PackageProto packages = 5;
  int packages_size() const;
  void clear_packages();
  ::android::service::pm::PackageProto* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto >*
      mutable_packages();
  const ::android::service::pm::PackageProto& packages(int index) const;
  ::android::service::pm::PackageProto* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto >&
      packages() const;

  // repeated .android.service.pm.PackageServiceDumpProto.SharedUserProto shared_users = 6;
  int shared_users_size() const;
  void clear_shared_users();
  ::android::service::pm::PackageServiceDumpProto_SharedUserProto* mutable_shared_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedUserProto >*
      mutable_shared_users();
  const ::android::service::pm::PackageServiceDumpProto_SharedUserProto& shared_users(int index) const;
  ::android::service::pm::PackageServiceDumpProto_SharedUserProto* add_shared_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedUserProto >&
      shared_users() const;

  // repeated string messages = 7 [(.android.privacy) = {
  int messages_size() const;
  void clear_messages();
  const std::string& messages(int index) const;
  std::string* mutable_messages(int index);
  void set_messages(int index, const std::string& value);
  void set_messages(int index, std::string&& value);
  void set_messages(int index, const char* value);
  void set_messages(int index, const char* value, size_t size);
  std::string* add_messages();
  void add_messages(const std::string& value);
  void add_messages(std::string&& value);
  void add_messages(const char* value);
  void add_messages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messages();

  // optional .android.service.pm.PackageServiceDumpProto.PackageShortProto required_verifier_package = 1;
  bool has_required_verifier_package() const;
  void clear_required_verifier_package();
  const ::android::service::pm::PackageServiceDumpProto_PackageShortProto& required_verifier_package() const;
  ::android::service::pm::PackageServiceDumpProto_PackageShortProto* release_required_verifier_package();
  ::android::service::pm::PackageServiceDumpProto_PackageShortProto* mutable_required_verifier_package();
  void set_allocated_required_verifier_package(::android::service::pm::PackageServiceDumpProto_PackageShortProto* required_verifier_package);

  // optional .android.service.pm.PackageServiceDumpProto.PackageShortProto verifier_package = 2;
  bool has_verifier_package() const;
  void clear_verifier_package();
  const ::android::service::pm::PackageServiceDumpProto_PackageShortProto& verifier_package() const;
  ::android::service::pm::PackageServiceDumpProto_PackageShortProto* release_verifier_package();
  ::android::service::pm::PackageServiceDumpProto_PackageShortProto* mutable_verifier_package();
  void set_allocated_verifier_package(::android::service::pm::PackageServiceDumpProto_PackageShortProto* verifier_package);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto > shared_libraries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::pm::FeatureInfoProto > features_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto > packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedUserProto > shared_users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messages_;
  ::android::service::pm::PackageServiceDumpProto_PackageShortProto* required_verifier_package_;
  ::android::service::pm::PackageServiceDumpProto_PackageShortProto* verifier_package_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageProto_SplitProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageProto.SplitProto) */ {
 public:
  PackageProto_SplitProto();
  virtual ~PackageProto_SplitProto();

  PackageProto_SplitProto(const PackageProto_SplitProto& from);
  PackageProto_SplitProto(PackageProto_SplitProto&& from) noexcept
    : PackageProto_SplitProto() {
    *this = ::std::move(from);
  }

  inline PackageProto_SplitProto& operator=(const PackageProto_SplitProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageProto_SplitProto& operator=(PackageProto_SplitProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageProto_SplitProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageProto_SplitProto* internal_default_instance() {
    return reinterpret_cast<const PackageProto_SplitProto*>(
               &_PackageProto_SplitProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PackageProto_SplitProto& a, PackageProto_SplitProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageProto_SplitProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageProto_SplitProto* New() const final {
    return CreateMaybeMessage<PackageProto_SplitProto>(nullptr);
  }

  PackageProto_SplitProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageProto_SplitProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageProto_SplitProto& from);
  void MergeFrom(const PackageProto_SplitProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageProto_SplitProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageProto.SplitProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRevisionCodeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 revision_code = 2;
  bool has_revision_code() const;
  void clear_revision_code();
  ::PROTOBUF_NAMESPACE_ID::int32 revision_code() const;
  void set_revision_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageProto.SplitProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 revision_code_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageProto_UserInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageProto.UserInfoProto) */ {
 public:
  PackageProto_UserInfoProto();
  virtual ~PackageProto_UserInfoProto();

  PackageProto_UserInfoProto(const PackageProto_UserInfoProto& from);
  PackageProto_UserInfoProto(PackageProto_UserInfoProto&& from) noexcept
    : PackageProto_UserInfoProto() {
    *this = ::std::move(from);
  }

  inline PackageProto_UserInfoProto& operator=(const PackageProto_UserInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageProto_UserInfoProto& operator=(PackageProto_UserInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageProto_UserInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageProto_UserInfoProto* internal_default_instance() {
    return reinterpret_cast<const PackageProto_UserInfoProto*>(
               &_PackageProto_UserInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PackageProto_UserInfoProto& a, PackageProto_UserInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageProto_UserInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageProto_UserInfoProto* New() const final {
    return CreateMaybeMessage<PackageProto_UserInfoProto>(nullptr);
  }

  PackageProto_UserInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageProto_UserInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageProto_UserInfoProto& from);
  void MergeFrom(const PackageProto_UserInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageProto_UserInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageProto.UserInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PackageProto_UserInfoProto_InstallType InstallType;
  static constexpr InstallType NOT_INSTALLED_FOR_USER =
    PackageProto_UserInfoProto_InstallType_NOT_INSTALLED_FOR_USER;
  static constexpr InstallType FULL_APP_INSTALL =
    PackageProto_UserInfoProto_InstallType_FULL_APP_INSTALL;
  static constexpr InstallType INSTANT_APP_INSTALL =
    PackageProto_UserInfoProto_InstallType_INSTANT_APP_INSTALL;
  static inline bool InstallType_IsValid(int value) {
    return PackageProto_UserInfoProto_InstallType_IsValid(value);
  }
  static constexpr InstallType InstallType_MIN =
    PackageProto_UserInfoProto_InstallType_InstallType_MIN;
  static constexpr InstallType InstallType_MAX =
    PackageProto_UserInfoProto_InstallType_InstallType_MAX;
  static constexpr int InstallType_ARRAYSIZE =
    PackageProto_UserInfoProto_InstallType_InstallType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InstallType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InstallType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InstallType_Name.");
    return PackageProto_UserInfoProto_InstallType_Name(enum_t_value);
  }
  static inline bool InstallType_Parse(const std::string& name,
      InstallType* value) {
    return PackageProto_UserInfoProto_InstallType_Parse(name, value);
  }

  typedef PackageProto_UserInfoProto_EnabledState EnabledState;
  static constexpr EnabledState COMPONENT_ENABLED_STATE_DEFAULT =
    PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DEFAULT;
  static constexpr EnabledState COMPONENT_ENABLED_STATE_ENABLED =
    PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_ENABLED;
  static constexpr EnabledState COMPONENT_ENABLED_STATE_DISABLED =
    PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DISABLED;
  static constexpr EnabledState COMPONENT_ENABLED_STATE_DISABLED_USER =
    PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DISABLED_USER;
  static constexpr EnabledState COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED =
    PackageProto_UserInfoProto_EnabledState_COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED;
  static inline bool EnabledState_IsValid(int value) {
    return PackageProto_UserInfoProto_EnabledState_IsValid(value);
  }
  static constexpr EnabledState EnabledState_MIN =
    PackageProto_UserInfoProto_EnabledState_EnabledState_MIN;
  static constexpr EnabledState EnabledState_MAX =
    PackageProto_UserInfoProto_EnabledState_EnabledState_MAX;
  static constexpr int EnabledState_ARRAYSIZE =
    PackageProto_UserInfoProto_EnabledState_EnabledState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EnabledState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EnabledState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EnabledState_Name.");
    return PackageProto_UserInfoProto_EnabledState_Name(enum_t_value);
  }
  static inline bool EnabledState_Parse(const std::string& name,
      EnabledState* value) {
    return PackageProto_UserInfoProto_EnabledState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSuspendingPackageFieldNumber = 9,
    kLastDisabledAppCallerFieldNumber = 8,
    kIdFieldNumber = 1,
    kInstallTypeFieldNumber = 2,
    kIsHiddenFieldNumber = 3,
    kIsSuspendedFieldNumber = 4,
    kIsStoppedFieldNumber = 5,
    kIsLaunchedFieldNumber = 6,
    kEnabledStateFieldNumber = 7,
    kDistractionFlagsFieldNumber = 10,
  };
  // repeated string suspending_package = 9;
  int suspending_package_size() const;
  void clear_suspending_package();
  const std::string& suspending_package(int index) const;
  std::string* mutable_suspending_package(int index);
  void set_suspending_package(int index, const std::string& value);
  void set_suspending_package(int index, std::string&& value);
  void set_suspending_package(int index, const char* value);
  void set_suspending_package(int index, const char* value, size_t size);
  std::string* add_suspending_package();
  void add_suspending_package(const std::string& value);
  void add_suspending_package(std::string&& value);
  void add_suspending_package(const char* value);
  void add_suspending_package(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& suspending_package() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_suspending_package();

  // optional string last_disabled_app_caller = 8;
  bool has_last_disabled_app_caller() const;
  void clear_last_disabled_app_caller();
  const std::string& last_disabled_app_caller() const;
  void set_last_disabled_app_caller(const std::string& value);
  void set_last_disabled_app_caller(std::string&& value);
  void set_last_disabled_app_caller(const char* value);
  void set_last_disabled_app_caller(const char* value, size_t size);
  std::string* mutable_last_disabled_app_caller();
  std::string* release_last_disabled_app_caller();
  void set_allocated_last_disabled_app_caller(std::string* last_disabled_app_caller);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.service.pm.PackageProto.UserInfoProto.InstallType install_type = 2;
  bool has_install_type() const;
  void clear_install_type();
  ::android::service::pm::PackageProto_UserInfoProto_InstallType install_type() const;
  void set_install_type(::android::service::pm::PackageProto_UserInfoProto_InstallType value);

  // optional bool is_hidden = 3;
  bool has_is_hidden() const;
  void clear_is_hidden();
  bool is_hidden() const;
  void set_is_hidden(bool value);

  // optional bool is_suspended = 4;
  bool has_is_suspended() const;
  void clear_is_suspended();
  bool is_suspended() const;
  void set_is_suspended(bool value);

  // optional bool is_stopped = 5;
  bool has_is_stopped() const;
  void clear_is_stopped();
  bool is_stopped() const;
  void set_is_stopped(bool value);

  // optional bool is_launched = 6;
  bool has_is_launched() const;
  void clear_is_launched();
  bool is_launched() const;
  void set_is_launched(bool value);

  // optional .android.service.pm.PackageProto.UserInfoProto.EnabledState enabled_state = 7;
  bool has_enabled_state() const;
  void clear_enabled_state();
  ::android::service::pm::PackageProto_UserInfoProto_EnabledState enabled_state() const;
  void set_enabled_state(::android::service::pm::PackageProto_UserInfoProto_EnabledState value);

  // optional int32 distraction_flags = 10;
  bool has_distraction_flags() const;
  void clear_distraction_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 distraction_flags() const;
  void set_distraction_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageProto.UserInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> suspending_package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_disabled_app_caller_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int install_type_;
  bool is_hidden_;
  bool is_suspended_;
  bool is_stopped_;
  bool is_launched_;
  int enabled_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 distraction_flags_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageProto_InstallSourceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageProto.InstallSourceProto) */ {
 public:
  PackageProto_InstallSourceProto();
  virtual ~PackageProto_InstallSourceProto();

  PackageProto_InstallSourceProto(const PackageProto_InstallSourceProto& from);
  PackageProto_InstallSourceProto(PackageProto_InstallSourceProto&& from) noexcept
    : PackageProto_InstallSourceProto() {
    *this = ::std::move(from);
  }

  inline PackageProto_InstallSourceProto& operator=(const PackageProto_InstallSourceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageProto_InstallSourceProto& operator=(PackageProto_InstallSourceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageProto_InstallSourceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageProto_InstallSourceProto* internal_default_instance() {
    return reinterpret_cast<const PackageProto_InstallSourceProto*>(
               &_PackageProto_InstallSourceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PackageProto_InstallSourceProto& a, PackageProto_InstallSourceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageProto_InstallSourceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageProto_InstallSourceProto* New() const final {
    return CreateMaybeMessage<PackageProto_InstallSourceProto>(nullptr);
  }

  PackageProto_InstallSourceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageProto_InstallSourceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageProto_InstallSourceProto& from);
  void MergeFrom(const PackageProto_InstallSourceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageProto_InstallSourceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageProto.InstallSourceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitiatingPackageNameFieldNumber = 1,
    kOriginatingPackageNameFieldNumber = 2,
  };
  // optional string initiating_package_name = 1;
  bool has_initiating_package_name() const;
  void clear_initiating_package_name();
  const std::string& initiating_package_name() const;
  void set_initiating_package_name(const std::string& value);
  void set_initiating_package_name(std::string&& value);
  void set_initiating_package_name(const char* value);
  void set_initiating_package_name(const char* value, size_t size);
  std::string* mutable_initiating_package_name();
  std::string* release_initiating_package_name();
  void set_allocated_initiating_package_name(std::string* initiating_package_name);

  // optional string originating_package_name = 2;
  bool has_originating_package_name() const;
  void clear_originating_package_name();
  const std::string& originating_package_name() const;
  void set_originating_package_name(const std::string& value);
  void set_originating_package_name(std::string&& value);
  void set_originating_package_name(const char* value);
  void set_originating_package_name(const char* value, size_t size);
  std::string* mutable_originating_package_name();
  std::string* release_originating_package_name();
  void set_allocated_originating_package_name(std::string* originating_package_name);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageProto.InstallSourceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initiating_package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originating_package_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageProto_StatesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageProto.StatesProto) */ {
 public:
  PackageProto_StatesProto();
  virtual ~PackageProto_StatesProto();

  PackageProto_StatesProto(const PackageProto_StatesProto& from);
  PackageProto_StatesProto(PackageProto_StatesProto&& from) noexcept
    : PackageProto_StatesProto() {
    *this = ::std::move(from);
  }

  inline PackageProto_StatesProto& operator=(const PackageProto_StatesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageProto_StatesProto& operator=(PackageProto_StatesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageProto_StatesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageProto_StatesProto* internal_default_instance() {
    return reinterpret_cast<const PackageProto_StatesProto*>(
               &_PackageProto_StatesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PackageProto_StatesProto& a, PackageProto_StatesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageProto_StatesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageProto_StatesProto* New() const final {
    return CreateMaybeMessage<PackageProto_StatesProto>(nullptr);
  }

  PackageProto_StatesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageProto_StatesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageProto_StatesProto& from);
  void MergeFrom(const PackageProto_StatesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageProto_StatesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageProto.StatesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsLoadingFieldNumber = 2,
  };
  // optional bool is_loading = 2;
  bool has_is_loading() const;
  void clear_is_loading();
  bool is_loading() const;
  void set_is_loading(bool value);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageProto.StatesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_loading_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageProto_UserPermissionsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageProto.UserPermissionsProto) */ {
 public:
  PackageProto_UserPermissionsProto();
  virtual ~PackageProto_UserPermissionsProto();

  PackageProto_UserPermissionsProto(const PackageProto_UserPermissionsProto& from);
  PackageProto_UserPermissionsProto(PackageProto_UserPermissionsProto&& from) noexcept
    : PackageProto_UserPermissionsProto() {
    *this = ::std::move(from);
  }

  inline PackageProto_UserPermissionsProto& operator=(const PackageProto_UserPermissionsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageProto_UserPermissionsProto& operator=(PackageProto_UserPermissionsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageProto_UserPermissionsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageProto_UserPermissionsProto* internal_default_instance() {
    return reinterpret_cast<const PackageProto_UserPermissionsProto*>(
               &_PackageProto_UserPermissionsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PackageProto_UserPermissionsProto& a, PackageProto_UserPermissionsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageProto_UserPermissionsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageProto_UserPermissionsProto* New() const final {
    return CreateMaybeMessage<PackageProto_UserPermissionsProto>(nullptr);
  }

  PackageProto_UserPermissionsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageProto_UserPermissionsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageProto_UserPermissionsProto& from);
  void MergeFrom(const PackageProto_UserPermissionsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageProto_UserPermissionsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageProto.UserPermissionsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrantedPermissionsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string granted_permissions = 2;
  int granted_permissions_size() const;
  void clear_granted_permissions();
  const std::string& granted_permissions(int index) const;
  std::string* mutable_granted_permissions(int index);
  void set_granted_permissions(int index, const std::string& value);
  void set_granted_permissions(int index, std::string&& value);
  void set_granted_permissions(int index, const char* value);
  void set_granted_permissions(int index, const char* value, size_t size);
  std::string* add_granted_permissions();
  void add_granted_permissions(const std::string& value);
  void add_granted_permissions(std::string&& value);
  void add_granted_permissions(const char* value);
  void add_granted_permissions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& granted_permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_granted_permissions();

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageProto.UserPermissionsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> granted_permissions_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.pm.PackageProto) */ {
 public:
  PackageProto();
  virtual ~PackageProto();

  PackageProto(const PackageProto& from);
  PackageProto(PackageProto&& from) noexcept
    : PackageProto() {
    *this = ::std::move(from);
  }

  inline PackageProto& operator=(const PackageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageProto& operator=(PackageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageProto* internal_default_instance() {
    return reinterpret_cast<const PackageProto*>(
               &_PackageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PackageProto& a, PackageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageProto* New() const final {
    return CreateMaybeMessage<PackageProto>(nullptr);
  }

  PackageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageProto& from);
  void MergeFrom(const PackageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.pm.PackageProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PackageProto_SplitProto SplitProto;
  typedef PackageProto_UserInfoProto UserInfoProto;
  typedef PackageProto_InstallSourceProto InstallSourceProto;
  typedef PackageProto_StatesProto StatesProto;
  typedef PackageProto_UserPermissionsProto UserPermissionsProto;

  // accessors -------------------------------------------------------

  enum : int {
    kSplitsFieldNumber = 8,
    kUsersFieldNumber = 9,
    kUserPermissionsFieldNumber = 12,
    kNameFieldNumber = 1,
    kVersionStringFieldNumber = 4,
    kInstallerNameFieldNumber = 7,
    kInstallSourceFieldNumber = 10,
    kStatesFieldNumber = 11,
    kUidFieldNumber = 2,
    kVersionCodeFieldNumber = 3,
    kInstallTimeMsFieldNumber = 5,
    kUpdateTimeMsFieldNumber = 6,
  };
  // repeated .android.service.pm.PackageProto.SplitProto splits = 8;
  int splits_size() const;
  void clear_splits();
  ::android::service::pm::PackageProto_SplitProto* mutable_splits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_SplitProto >*
      mutable_splits();
  const ::android::service::pm::PackageProto_SplitProto& splits(int index) const;
  ::android::service::pm::PackageProto_SplitProto* add_splits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_SplitProto >&
      splits() const;

  // repeated .android.service.pm.PackageProto.UserInfoProto users = 9;
  int users_size() const;
  void clear_users();
  ::android::service::pm::PackageProto_UserInfoProto* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserInfoProto >*
      mutable_users();
  const ::android::service::pm::PackageProto_UserInfoProto& users(int index) const;
  ::android::service::pm::PackageProto_UserInfoProto* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserInfoProto >&
      users() const;

  // repeated .android.service.pm.PackageProto.UserPermissionsProto user_permissions = 12;
  int user_permissions_size() const;
  void clear_user_permissions();
  ::android::service::pm::PackageProto_UserPermissionsProto* mutable_user_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserPermissionsProto >*
      mutable_user_permissions();
  const ::android::service::pm::PackageProto_UserPermissionsProto& user_permissions(int index) const;
  ::android::service::pm::PackageProto_UserPermissionsProto* add_user_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserPermissionsProto >&
      user_permissions() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string version_string = 4;
  bool has_version_string() const;
  void clear_version_string();
  const std::string& version_string() const;
  void set_version_string(const std::string& value);
  void set_version_string(std::string&& value);
  void set_version_string(const char* value);
  void set_version_string(const char* value, size_t size);
  std::string* mutable_version_string();
  std::string* release_version_string();
  void set_allocated_version_string(std::string* version_string);

  // optional string installer_name = 7;
  bool has_installer_name() const;
  void clear_installer_name();
  const std::string& installer_name() const;
  void set_installer_name(const std::string& value);
  void set_installer_name(std::string&& value);
  void set_installer_name(const char* value);
  void set_installer_name(const char* value, size_t size);
  std::string* mutable_installer_name();
  std::string* release_installer_name();
  void set_allocated_installer_name(std::string* installer_name);

  // optional .android.service.pm.PackageProto.InstallSourceProto install_source = 10;
  bool has_install_source() const;
  void clear_install_source();
  const ::android::service::pm::PackageProto_InstallSourceProto& install_source() const;
  ::android::service::pm::PackageProto_InstallSourceProto* release_install_source();
  ::android::service::pm::PackageProto_InstallSourceProto* mutable_install_source();
  void set_allocated_install_source(::android::service::pm::PackageProto_InstallSourceProto* install_source);

  // optional .android.service.pm.PackageProto.StatesProto states = 11;
  bool has_states() const;
  void clear_states();
  const ::android::service::pm::PackageProto_StatesProto& states() const;
  ::android::service::pm::PackageProto_StatesProto* release_states();
  ::android::service::pm::PackageProto_StatesProto* mutable_states();
  void set_allocated_states(::android::service::pm::PackageProto_StatesProto* states);

  // optional int32 uid = 2;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 version_code = 3;
  bool has_version_code() const;
  void clear_version_code();
  ::PROTOBUF_NAMESPACE_ID::int32 version_code() const;
  void set_version_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 install_time_ms = 5;
  bool has_install_time_ms() const;
  void clear_install_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 install_time_ms() const;
  void set_install_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 update_time_ms = 6;
  bool has_update_time_ms() const;
  void clear_update_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 update_time_ms() const;
  void set_update_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.service.pm.PackageProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_SplitProto > splits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserInfoProto > users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserPermissionsProto > user_permissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr installer_name_;
  ::android::service::pm::PackageProto_InstallSourceProto* install_source_;
  ::android::service::pm::PackageProto_StatesProto* states_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 install_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 update_time_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackageServiceDumpProto_PackageShortProto

// optional string name = 1;
inline bool PackageServiceDumpProto_PackageShortProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageServiceDumpProto_PackageShortProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageServiceDumpProto_PackageShortProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.PackageShortProto.name)
  return name_.GetNoArena();
}
inline void PackageServiceDumpProto_PackageShortProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.PackageShortProto.name)
}
inline void PackageServiceDumpProto_PackageShortProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageServiceDumpProto.PackageShortProto.name)
}
inline void PackageServiceDumpProto_PackageShortProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageServiceDumpProto.PackageShortProto.name)
}
inline void PackageServiceDumpProto_PackageShortProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageServiceDumpProto.PackageShortProto.name)
}
inline std::string* PackageServiceDumpProto_PackageShortProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.PackageShortProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageServiceDumpProto_PackageShortProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageServiceDumpProto.PackageShortProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageServiceDumpProto_PackageShortProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageServiceDumpProto.PackageShortProto.name)
}

// optional int32 uid = 2;
inline bool PackageServiceDumpProto_PackageShortProto::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageServiceDumpProto_PackageShortProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageServiceDumpProto_PackageShortProto::uid() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.PackageShortProto.uid)
  return uid_;
}
inline void PackageServiceDumpProto_PackageShortProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.PackageShortProto.uid)
}

// -------------------------------------------------------------------

// PackageServiceDumpProto_SharedLibraryProto

// optional string name = 1;
inline bool PackageServiceDumpProto_SharedLibraryProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageServiceDumpProto_SharedLibraryProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageServiceDumpProto_SharedLibraryProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.name)
  return name_.GetNoArena();
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.name)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.name)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.name)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.name)
}
inline std::string* PackageServiceDumpProto_SharedLibraryProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageServiceDumpProto_SharedLibraryProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.name)
}

// optional bool is_jar = 2;
inline bool PackageServiceDumpProto_SharedLibraryProto::has_is_jar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackageServiceDumpProto_SharedLibraryProto::clear_is_jar() {
  is_jar_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PackageServiceDumpProto_SharedLibraryProto::is_jar() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.is_jar)
  return is_jar_;
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_is_jar(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_jar_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.is_jar)
}

// optional string path = 3;
inline bool PackageServiceDumpProto_SharedLibraryProto::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageServiceDumpProto_SharedLibraryProto::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PackageServiceDumpProto_SharedLibraryProto::path() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.path)
  return path_.GetNoArena();
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.path)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.path)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.path)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.path)
}
inline std::string* PackageServiceDumpProto_SharedLibraryProto::mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageServiceDumpProto_SharedLibraryProto::release_path() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.path)
}

// optional string apk = 4;
inline bool PackageServiceDumpProto_SharedLibraryProto::has_apk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageServiceDumpProto_SharedLibraryProto::clear_apk() {
  apk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PackageServiceDumpProto_SharedLibraryProto::apk() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.apk)
  return apk_.GetNoArena();
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_apk(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  apk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.apk)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_apk(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  apk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.apk)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_apk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  apk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.apk)
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_apk(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  apk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.apk)
}
inline std::string* PackageServiceDumpProto_SharedLibraryProto::mutable_apk() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.apk)
  return apk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageServiceDumpProto_SharedLibraryProto::release_apk() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.apk)
  if (!has_apk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return apk_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageServiceDumpProto_SharedLibraryProto::set_allocated_apk(std::string* apk) {
  if (apk != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  apk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apk);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageServiceDumpProto.SharedLibraryProto.apk)
}

// -------------------------------------------------------------------

// PackageServiceDumpProto_SharedUserProto

// optional int32 uid = 1;
inline bool PackageServiceDumpProto_SharedUserProto::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageServiceDumpProto_SharedUserProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageServiceDumpProto_SharedUserProto::uid() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.SharedUserProto.uid)
  return uid_;
}
inline void PackageServiceDumpProto_SharedUserProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.SharedUserProto.uid)
}

// optional string name = 2;
inline bool PackageServiceDumpProto_SharedUserProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageServiceDumpProto_SharedUserProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageServiceDumpProto_SharedUserProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.SharedUserProto.name)
  return name_.GetNoArena();
}
inline void PackageServiceDumpProto_SharedUserProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.SharedUserProto.name)
}
inline void PackageServiceDumpProto_SharedUserProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageServiceDumpProto.SharedUserProto.name)
}
inline void PackageServiceDumpProto_SharedUserProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageServiceDumpProto.SharedUserProto.name)
}
inline void PackageServiceDumpProto_SharedUserProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageServiceDumpProto.SharedUserProto.name)
}
inline std::string* PackageServiceDumpProto_SharedUserProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.SharedUserProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageServiceDumpProto_SharedUserProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageServiceDumpProto.SharedUserProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageServiceDumpProto_SharedUserProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageServiceDumpProto.SharedUserProto.name)
}

// -------------------------------------------------------------------

// PackageServiceDumpProto

// optional .android.service.pm.PackageServiceDumpProto.PackageShortProto required_verifier_package = 1;
inline bool PackageServiceDumpProto::has_required_verifier_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageServiceDumpProto::clear_required_verifier_package() {
  if (required_verifier_package_ != nullptr) required_verifier_package_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::pm::PackageServiceDumpProto_PackageShortProto& PackageServiceDumpProto::required_verifier_package() const {
  const ::android::service::pm::PackageServiceDumpProto_PackageShortProto* p = required_verifier_package_;
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.required_verifier_package)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::pm::PackageServiceDumpProto_PackageShortProto*>(
      &::android::service::pm::_PackageServiceDumpProto_PackageShortProto_default_instance_);
}
inline ::android::service::pm::PackageServiceDumpProto_PackageShortProto* PackageServiceDumpProto::release_required_verifier_package() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageServiceDumpProto.required_verifier_package)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::pm::PackageServiceDumpProto_PackageShortProto* temp = required_verifier_package_;
  required_verifier_package_ = nullptr;
  return temp;
}
inline ::android::service::pm::PackageServiceDumpProto_PackageShortProto* PackageServiceDumpProto::mutable_required_verifier_package() {
  _has_bits_[0] |= 0x00000001u;
  if (required_verifier_package_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::pm::PackageServiceDumpProto_PackageShortProto>(GetArenaNoVirtual());
    required_verifier_package_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.required_verifier_package)
  return required_verifier_package_;
}
inline void PackageServiceDumpProto::set_allocated_required_verifier_package(::android::service::pm::PackageServiceDumpProto_PackageShortProto* required_verifier_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete required_verifier_package_;
  }
  if (required_verifier_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      required_verifier_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, required_verifier_package, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  required_verifier_package_ = required_verifier_package;
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageServiceDumpProto.required_verifier_package)
}

// optional .android.service.pm.PackageServiceDumpProto.PackageShortProto verifier_package = 2;
inline bool PackageServiceDumpProto::has_verifier_package() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageServiceDumpProto::clear_verifier_package() {
  if (verifier_package_ != nullptr) verifier_package_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::service::pm::PackageServiceDumpProto_PackageShortProto& PackageServiceDumpProto::verifier_package() const {
  const ::android::service::pm::PackageServiceDumpProto_PackageShortProto* p = verifier_package_;
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.verifier_package)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::pm::PackageServiceDumpProto_PackageShortProto*>(
      &::android::service::pm::_PackageServiceDumpProto_PackageShortProto_default_instance_);
}
inline ::android::service::pm::PackageServiceDumpProto_PackageShortProto* PackageServiceDumpProto::release_verifier_package() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageServiceDumpProto.verifier_package)
  _has_bits_[0] &= ~0x00000002u;
  ::android::service::pm::PackageServiceDumpProto_PackageShortProto* temp = verifier_package_;
  verifier_package_ = nullptr;
  return temp;
}
inline ::android::service::pm::PackageServiceDumpProto_PackageShortProto* PackageServiceDumpProto::mutable_verifier_package() {
  _has_bits_[0] |= 0x00000002u;
  if (verifier_package_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::pm::PackageServiceDumpProto_PackageShortProto>(GetArenaNoVirtual());
    verifier_package_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.verifier_package)
  return verifier_package_;
}
inline void PackageServiceDumpProto::set_allocated_verifier_package(::android::service::pm::PackageServiceDumpProto_PackageShortProto* verifier_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete verifier_package_;
  }
  if (verifier_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      verifier_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verifier_package, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  verifier_package_ = verifier_package;
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageServiceDumpProto.verifier_package)
}

// repeated .android.service.pm.PackageServiceDumpProto.SharedLibraryProto shared_libraries = 3;
inline int PackageServiceDumpProto::shared_libraries_size() const {
  return shared_libraries_.size();
}
inline void PackageServiceDumpProto::clear_shared_libraries() {
  shared_libraries_.Clear();
}
inline ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto* PackageServiceDumpProto::mutable_shared_libraries(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.shared_libraries)
  return shared_libraries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto >*
PackageServiceDumpProto::mutable_shared_libraries() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageServiceDumpProto.shared_libraries)
  return &shared_libraries_;
}
inline const ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto& PackageServiceDumpProto::shared_libraries(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.shared_libraries)
  return shared_libraries_.Get(index);
}
inline ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto* PackageServiceDumpProto::add_shared_libraries() {
  // @@protoc_insertion_point(field_add:android.service.pm.PackageServiceDumpProto.shared_libraries)
  return shared_libraries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedLibraryProto >&
PackageServiceDumpProto::shared_libraries() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageServiceDumpProto.shared_libraries)
  return shared_libraries_;
}

// repeated .android.content.pm.FeatureInfoProto features = 4;
inline int PackageServiceDumpProto::features_size() const {
  return features_.size();
}
inline ::android::content::pm::FeatureInfoProto* PackageServiceDumpProto::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::pm::FeatureInfoProto >*
PackageServiceDumpProto::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageServiceDumpProto.features)
  return &features_;
}
inline const ::android::content::pm::FeatureInfoProto& PackageServiceDumpProto::features(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.features)
  return features_.Get(index);
}
inline ::android::content::pm::FeatureInfoProto* PackageServiceDumpProto::add_features() {
  // @@protoc_insertion_point(field_add:android.service.pm.PackageServiceDumpProto.features)
  return features_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::pm::FeatureInfoProto >&
PackageServiceDumpProto::features() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageServiceDumpProto.features)
  return features_;
}

// repeated .android.service.pm.PackageProto packages = 5;
inline int PackageServiceDumpProto::packages_size() const {
  return packages_.size();
}
inline void PackageServiceDumpProto::clear_packages() {
  packages_.Clear();
}
inline ::android::service::pm::PackageProto* PackageServiceDumpProto::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto >*
PackageServiceDumpProto::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageServiceDumpProto.packages)
  return &packages_;
}
inline const ::android::service::pm::PackageProto& PackageServiceDumpProto::packages(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.packages)
  return packages_.Get(index);
}
inline ::android::service::pm::PackageProto* PackageServiceDumpProto::add_packages() {
  // @@protoc_insertion_point(field_add:android.service.pm.PackageServiceDumpProto.packages)
  return packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto >&
PackageServiceDumpProto::packages() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageServiceDumpProto.packages)
  return packages_;
}

// repeated .android.service.pm.PackageServiceDumpProto.SharedUserProto shared_users = 6;
inline int PackageServiceDumpProto::shared_users_size() const {
  return shared_users_.size();
}
inline void PackageServiceDumpProto::clear_shared_users() {
  shared_users_.Clear();
}
inline ::android::service::pm::PackageServiceDumpProto_SharedUserProto* PackageServiceDumpProto::mutable_shared_users(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.shared_users)
  return shared_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedUserProto >*
PackageServiceDumpProto::mutable_shared_users() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageServiceDumpProto.shared_users)
  return &shared_users_;
}
inline const ::android::service::pm::PackageServiceDumpProto_SharedUserProto& PackageServiceDumpProto::shared_users(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.shared_users)
  return shared_users_.Get(index);
}
inline ::android::service::pm::PackageServiceDumpProto_SharedUserProto* PackageServiceDumpProto::add_shared_users() {
  // @@protoc_insertion_point(field_add:android.service.pm.PackageServiceDumpProto.shared_users)
  return shared_users_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageServiceDumpProto_SharedUserProto >&
PackageServiceDumpProto::shared_users() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageServiceDumpProto.shared_users)
  return shared_users_;
}

// repeated string messages = 7 [(.android.privacy) = {
inline int PackageServiceDumpProto::messages_size() const {
  return messages_.size();
}
inline void PackageServiceDumpProto::clear_messages() {
  messages_.Clear();
}
inline const std::string& PackageServiceDumpProto::messages(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageServiceDumpProto.messages)
  return messages_.Get(index);
}
inline std::string* PackageServiceDumpProto::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageServiceDumpProto.messages)
  return messages_.Mutable(index);
}
inline void PackageServiceDumpProto::set_messages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.messages)
  messages_.Mutable(index)->assign(value);
}
inline void PackageServiceDumpProto::set_messages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.pm.PackageServiceDumpProto.messages)
  messages_.Mutable(index)->assign(std::move(value));
}
inline void PackageServiceDumpProto::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageServiceDumpProto.messages)
}
inline void PackageServiceDumpProto::set_messages(int index, const char* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageServiceDumpProto.messages)
}
inline std::string* PackageServiceDumpProto::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:android.service.pm.PackageServiceDumpProto.messages)
  return messages_.Add();
}
inline void PackageServiceDumpProto::add_messages(const std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.pm.PackageServiceDumpProto.messages)
}
inline void PackageServiceDumpProto::add_messages(std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.pm.PackageServiceDumpProto.messages)
}
inline void PackageServiceDumpProto::add_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.pm.PackageServiceDumpProto.messages)
}
inline void PackageServiceDumpProto::add_messages(const char* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.pm.PackageServiceDumpProto.messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PackageServiceDumpProto::messages() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageServiceDumpProto.messages)
  return messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PackageServiceDumpProto::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageServiceDumpProto.messages)
  return &messages_;
}

// -------------------------------------------------------------------

// PackageProto_SplitProto

// optional string name = 1;
inline bool PackageProto_SplitProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageProto_SplitProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageProto_SplitProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.SplitProto.name)
  return name_.GetNoArena();
}
inline void PackageProto_SplitProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.SplitProto.name)
}
inline void PackageProto_SplitProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageProto.SplitProto.name)
}
inline void PackageProto_SplitProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.SplitProto.name)
}
inline void PackageProto_SplitProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.SplitProto.name)
}
inline std::string* PackageProto_SplitProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.SplitProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageProto_SplitProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.SplitProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageProto_SplitProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.SplitProto.name)
}

// optional int32 revision_code = 2;
inline bool PackageProto_SplitProto::has_revision_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageProto_SplitProto::clear_revision_code() {
  revision_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageProto_SplitProto::revision_code() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.SplitProto.revision_code)
  return revision_code_;
}
inline void PackageProto_SplitProto::set_revision_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  revision_code_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.SplitProto.revision_code)
}

// -------------------------------------------------------------------

// PackageProto_UserInfoProto

// optional int32 id = 1;
inline bool PackageProto_UserInfoProto::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageProto_UserInfoProto::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageProto_UserInfoProto::id() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.id)
  return id_;
}
inline void PackageProto_UserInfoProto::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.id)
}

// optional .android.service.pm.PackageProto.UserInfoProto.InstallType install_type = 2;
inline bool PackageProto_UserInfoProto::has_install_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageProto_UserInfoProto::clear_install_type() {
  install_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::service::pm::PackageProto_UserInfoProto_InstallType PackageProto_UserInfoProto::install_type() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.install_type)
  return static_cast< ::android::service::pm::PackageProto_UserInfoProto_InstallType >(install_type_);
}
inline void PackageProto_UserInfoProto::set_install_type(::android::service::pm::PackageProto_UserInfoProto_InstallType value) {
  assert(::android::service::pm::PackageProto_UserInfoProto_InstallType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  install_type_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.install_type)
}

// optional bool is_hidden = 3;
inline bool PackageProto_UserInfoProto::has_is_hidden() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackageProto_UserInfoProto::clear_is_hidden() {
  is_hidden_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PackageProto_UserInfoProto::is_hidden() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.is_hidden)
  return is_hidden_;
}
inline void PackageProto_UserInfoProto::set_is_hidden(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_hidden_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.is_hidden)
}

// optional bool is_suspended = 4;
inline bool PackageProto_UserInfoProto::has_is_suspended() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackageProto_UserInfoProto::clear_is_suspended() {
  is_suspended_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PackageProto_UserInfoProto::is_suspended() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.is_suspended)
  return is_suspended_;
}
inline void PackageProto_UserInfoProto::set_is_suspended(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_suspended_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.is_suspended)
}

// optional bool is_stopped = 5;
inline bool PackageProto_UserInfoProto::has_is_stopped() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PackageProto_UserInfoProto::clear_is_stopped() {
  is_stopped_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PackageProto_UserInfoProto::is_stopped() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.is_stopped)
  return is_stopped_;
}
inline void PackageProto_UserInfoProto::set_is_stopped(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_stopped_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.is_stopped)
}

// optional bool is_launched = 6;
inline bool PackageProto_UserInfoProto::has_is_launched() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PackageProto_UserInfoProto::clear_is_launched() {
  is_launched_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PackageProto_UserInfoProto::is_launched() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.is_launched)
  return is_launched_;
}
inline void PackageProto_UserInfoProto::set_is_launched(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_launched_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.is_launched)
}

// optional .android.service.pm.PackageProto.UserInfoProto.EnabledState enabled_state = 7;
inline bool PackageProto_UserInfoProto::has_enabled_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PackageProto_UserInfoProto::clear_enabled_state() {
  enabled_state_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::android::service::pm::PackageProto_UserInfoProto_EnabledState PackageProto_UserInfoProto::enabled_state() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.enabled_state)
  return static_cast< ::android::service::pm::PackageProto_UserInfoProto_EnabledState >(enabled_state_);
}
inline void PackageProto_UserInfoProto::set_enabled_state(::android::service::pm::PackageProto_UserInfoProto_EnabledState value) {
  assert(::android::service::pm::PackageProto_UserInfoProto_EnabledState_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  enabled_state_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.enabled_state)
}

// optional string last_disabled_app_caller = 8;
inline bool PackageProto_UserInfoProto::has_last_disabled_app_caller() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageProto_UserInfoProto::clear_last_disabled_app_caller() {
  last_disabled_app_caller_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageProto_UserInfoProto::last_disabled_app_caller() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.last_disabled_app_caller)
  return last_disabled_app_caller_.GetNoArena();
}
inline void PackageProto_UserInfoProto::set_last_disabled_app_caller(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_disabled_app_caller_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.last_disabled_app_caller)
}
inline void PackageProto_UserInfoProto::set_last_disabled_app_caller(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  last_disabled_app_caller_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageProto.UserInfoProto.last_disabled_app_caller)
}
inline void PackageProto_UserInfoProto::set_last_disabled_app_caller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  last_disabled_app_caller_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.UserInfoProto.last_disabled_app_caller)
}
inline void PackageProto_UserInfoProto::set_last_disabled_app_caller(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  last_disabled_app_caller_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.UserInfoProto.last_disabled_app_caller)
}
inline std::string* PackageProto_UserInfoProto::mutable_last_disabled_app_caller() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.UserInfoProto.last_disabled_app_caller)
  return last_disabled_app_caller_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageProto_UserInfoProto::release_last_disabled_app_caller() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.UserInfoProto.last_disabled_app_caller)
  if (!has_last_disabled_app_caller()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return last_disabled_app_caller_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageProto_UserInfoProto::set_allocated_last_disabled_app_caller(std::string* last_disabled_app_caller) {
  if (last_disabled_app_caller != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_disabled_app_caller_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_disabled_app_caller);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.UserInfoProto.last_disabled_app_caller)
}

// repeated string suspending_package = 9;
inline int PackageProto_UserInfoProto::suspending_package_size() const {
  return suspending_package_.size();
}
inline void PackageProto_UserInfoProto::clear_suspending_package() {
  suspending_package_.Clear();
}
inline const std::string& PackageProto_UserInfoProto::suspending_package(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.suspending_package)
  return suspending_package_.Get(index);
}
inline std::string* PackageProto_UserInfoProto::mutable_suspending_package(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.UserInfoProto.suspending_package)
  return suspending_package_.Mutable(index);
}
inline void PackageProto_UserInfoProto::set_suspending_package(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.suspending_package)
  suspending_package_.Mutable(index)->assign(value);
}
inline void PackageProto_UserInfoProto::set_suspending_package(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.suspending_package)
  suspending_package_.Mutable(index)->assign(std::move(value));
}
inline void PackageProto_UserInfoProto::set_suspending_package(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  suspending_package_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.UserInfoProto.suspending_package)
}
inline void PackageProto_UserInfoProto::set_suspending_package(int index, const char* value, size_t size) {
  suspending_package_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.UserInfoProto.suspending_package)
}
inline std::string* PackageProto_UserInfoProto::add_suspending_package() {
  // @@protoc_insertion_point(field_add_mutable:android.service.pm.PackageProto.UserInfoProto.suspending_package)
  return suspending_package_.Add();
}
inline void PackageProto_UserInfoProto::add_suspending_package(const std::string& value) {
  suspending_package_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.pm.PackageProto.UserInfoProto.suspending_package)
}
inline void PackageProto_UserInfoProto::add_suspending_package(std::string&& value) {
  suspending_package_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.pm.PackageProto.UserInfoProto.suspending_package)
}
inline void PackageProto_UserInfoProto::add_suspending_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  suspending_package_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.pm.PackageProto.UserInfoProto.suspending_package)
}
inline void PackageProto_UserInfoProto::add_suspending_package(const char* value, size_t size) {
  suspending_package_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.pm.PackageProto.UserInfoProto.suspending_package)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PackageProto_UserInfoProto::suspending_package() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageProto.UserInfoProto.suspending_package)
  return suspending_package_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PackageProto_UserInfoProto::mutable_suspending_package() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageProto.UserInfoProto.suspending_package)
  return &suspending_package_;
}

// optional int32 distraction_flags = 10;
inline bool PackageProto_UserInfoProto::has_distraction_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PackageProto_UserInfoProto::clear_distraction_flags() {
  distraction_flags_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageProto_UserInfoProto::distraction_flags() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserInfoProto.distraction_flags)
  return distraction_flags_;
}
inline void PackageProto_UserInfoProto::set_distraction_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  distraction_flags_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserInfoProto.distraction_flags)
}

// -------------------------------------------------------------------

// PackageProto_InstallSourceProto

// optional string initiating_package_name = 1;
inline bool PackageProto_InstallSourceProto::has_initiating_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageProto_InstallSourceProto::clear_initiating_package_name() {
  initiating_package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageProto_InstallSourceProto::initiating_package_name() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.InstallSourceProto.initiating_package_name)
  return initiating_package_name_.GetNoArena();
}
inline void PackageProto_InstallSourceProto::set_initiating_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  initiating_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.InstallSourceProto.initiating_package_name)
}
inline void PackageProto_InstallSourceProto::set_initiating_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  initiating_package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageProto.InstallSourceProto.initiating_package_name)
}
inline void PackageProto_InstallSourceProto::set_initiating_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  initiating_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.InstallSourceProto.initiating_package_name)
}
inline void PackageProto_InstallSourceProto::set_initiating_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  initiating_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.InstallSourceProto.initiating_package_name)
}
inline std::string* PackageProto_InstallSourceProto::mutable_initiating_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.InstallSourceProto.initiating_package_name)
  return initiating_package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageProto_InstallSourceProto::release_initiating_package_name() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.InstallSourceProto.initiating_package_name)
  if (!has_initiating_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return initiating_package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageProto_InstallSourceProto::set_allocated_initiating_package_name(std::string* initiating_package_name) {
  if (initiating_package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  initiating_package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), initiating_package_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.InstallSourceProto.initiating_package_name)
}

// optional string originating_package_name = 2;
inline bool PackageProto_InstallSourceProto::has_originating_package_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageProto_InstallSourceProto::clear_originating_package_name() {
  originating_package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PackageProto_InstallSourceProto::originating_package_name() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.InstallSourceProto.originating_package_name)
  return originating_package_name_.GetNoArena();
}
inline void PackageProto_InstallSourceProto::set_originating_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  originating_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.InstallSourceProto.originating_package_name)
}
inline void PackageProto_InstallSourceProto::set_originating_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  originating_package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageProto.InstallSourceProto.originating_package_name)
}
inline void PackageProto_InstallSourceProto::set_originating_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  originating_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.InstallSourceProto.originating_package_name)
}
inline void PackageProto_InstallSourceProto::set_originating_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  originating_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.InstallSourceProto.originating_package_name)
}
inline std::string* PackageProto_InstallSourceProto::mutable_originating_package_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.InstallSourceProto.originating_package_name)
  return originating_package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageProto_InstallSourceProto::release_originating_package_name() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.InstallSourceProto.originating_package_name)
  if (!has_originating_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return originating_package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageProto_InstallSourceProto::set_allocated_originating_package_name(std::string* originating_package_name) {
  if (originating_package_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  originating_package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originating_package_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.InstallSourceProto.originating_package_name)
}

// -------------------------------------------------------------------

// PackageProto_StatesProto

// optional bool is_loading = 2;
inline bool PackageProto_StatesProto::has_is_loading() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageProto_StatesProto::clear_is_loading() {
  is_loading_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool PackageProto_StatesProto::is_loading() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.StatesProto.is_loading)
  return is_loading_;
}
inline void PackageProto_StatesProto::set_is_loading(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_loading_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.StatesProto.is_loading)
}

// -------------------------------------------------------------------

// PackageProto_UserPermissionsProto

// optional int32 id = 1;
inline bool PackageProto_UserPermissionsProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageProto_UserPermissionsProto::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageProto_UserPermissionsProto::id() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserPermissionsProto.id)
  return id_;
}
inline void PackageProto_UserPermissionsProto::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserPermissionsProto.id)
}

// repeated string granted_permissions = 2;
inline int PackageProto_UserPermissionsProto::granted_permissions_size() const {
  return granted_permissions_.size();
}
inline void PackageProto_UserPermissionsProto::clear_granted_permissions() {
  granted_permissions_.Clear();
}
inline const std::string& PackageProto_UserPermissionsProto::granted_permissions(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
  return granted_permissions_.Get(index);
}
inline std::string* PackageProto_UserPermissionsProto::mutable_granted_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
  return granted_permissions_.Mutable(index);
}
inline void PackageProto_UserPermissionsProto::set_granted_permissions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
  granted_permissions_.Mutable(index)->assign(value);
}
inline void PackageProto_UserPermissionsProto::set_granted_permissions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
  granted_permissions_.Mutable(index)->assign(std::move(value));
}
inline void PackageProto_UserPermissionsProto::set_granted_permissions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  granted_permissions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
}
inline void PackageProto_UserPermissionsProto::set_granted_permissions(int index, const char* value, size_t size) {
  granted_permissions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
}
inline std::string* PackageProto_UserPermissionsProto::add_granted_permissions() {
  // @@protoc_insertion_point(field_add_mutable:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
  return granted_permissions_.Add();
}
inline void PackageProto_UserPermissionsProto::add_granted_permissions(const std::string& value) {
  granted_permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
}
inline void PackageProto_UserPermissionsProto::add_granted_permissions(std::string&& value) {
  granted_permissions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
}
inline void PackageProto_UserPermissionsProto::add_granted_permissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  granted_permissions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
}
inline void PackageProto_UserPermissionsProto::add_granted_permissions(const char* value, size_t size) {
  granted_permissions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PackageProto_UserPermissionsProto::granted_permissions() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
  return granted_permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PackageProto_UserPermissionsProto::mutable_granted_permissions() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageProto.UserPermissionsProto.granted_permissions)
  return &granted_permissions_;
}

// -------------------------------------------------------------------

// PackageProto

// optional string name = 1;
inline bool PackageProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.name)
  return name_.GetNoArena();
}
inline void PackageProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.name)
}
inline void PackageProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageProto.name)
}
inline void PackageProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.name)
}
inline void PackageProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.name)
}
inline std::string* PackageProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.name)
}

// optional int32 uid = 2;
inline bool PackageProto::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PackageProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageProto::uid() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.uid)
  return uid_;
}
inline void PackageProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.uid)
}

// optional int32 version_code = 3;
inline bool PackageProto::has_version_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PackageProto::clear_version_code() {
  version_code_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PackageProto::version_code() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.version_code)
  return version_code_;
}
inline void PackageProto::set_version_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  version_code_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.version_code)
}

// optional string version_string = 4;
inline bool PackageProto::has_version_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageProto::clear_version_string() {
  version_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PackageProto::version_string() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.version_string)
  return version_string_.GetNoArena();
}
inline void PackageProto::set_version_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.version_string)
}
inline void PackageProto::set_version_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  version_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageProto.version_string)
}
inline void PackageProto::set_version_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  version_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.version_string)
}
inline void PackageProto::set_version_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  version_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.version_string)
}
inline std::string* PackageProto::mutable_version_string() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.version_string)
  return version_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageProto::release_version_string() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.version_string)
  if (!has_version_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return version_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageProto::set_allocated_version_string(std::string* version_string) {
  if (version_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_string);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.version_string)
}

// optional int64 install_time_ms = 5;
inline bool PackageProto::has_install_time_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PackageProto::clear_install_time_ms() {
  install_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackageProto::install_time_ms() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.install_time_ms)
  return install_time_ms_;
}
inline void PackageProto::set_install_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  install_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.install_time_ms)
}

// optional int64 update_time_ms = 6;
inline bool PackageProto::has_update_time_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PackageProto::clear_update_time_ms() {
  update_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PackageProto::update_time_ms() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.update_time_ms)
  return update_time_ms_;
}
inline void PackageProto::set_update_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  update_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.update_time_ms)
}

// optional string installer_name = 7;
inline bool PackageProto::has_installer_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageProto::clear_installer_name() {
  installer_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PackageProto::installer_name() const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.installer_name)
  return installer_name_.GetNoArena();
}
inline void PackageProto::set_installer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  installer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.pm.PackageProto.installer_name)
}
inline void PackageProto::set_installer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  installer_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.pm.PackageProto.installer_name)
}
inline void PackageProto::set_installer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  installer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.pm.PackageProto.installer_name)
}
inline void PackageProto::set_installer_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  installer_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.pm.PackageProto.installer_name)
}
inline std::string* PackageProto::mutable_installer_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.installer_name)
  return installer_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageProto::release_installer_name() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.installer_name)
  if (!has_installer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return installer_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageProto::set_allocated_installer_name(std::string* installer_name) {
  if (installer_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  installer_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), installer_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.installer_name)
}

// repeated .android.service.pm.PackageProto.SplitProto splits = 8;
inline int PackageProto::splits_size() const {
  return splits_.size();
}
inline void PackageProto::clear_splits() {
  splits_.Clear();
}
inline ::android::service::pm::PackageProto_SplitProto* PackageProto::mutable_splits(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.splits)
  return splits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_SplitProto >*
PackageProto::mutable_splits() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageProto.splits)
  return &splits_;
}
inline const ::android::service::pm::PackageProto_SplitProto& PackageProto::splits(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.splits)
  return splits_.Get(index);
}
inline ::android::service::pm::PackageProto_SplitProto* PackageProto::add_splits() {
  // @@protoc_insertion_point(field_add:android.service.pm.PackageProto.splits)
  return splits_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_SplitProto >&
PackageProto::splits() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageProto.splits)
  return splits_;
}

// repeated .android.service.pm.PackageProto.UserInfoProto users = 9;
inline int PackageProto::users_size() const {
  return users_.size();
}
inline void PackageProto::clear_users() {
  users_.Clear();
}
inline ::android::service::pm::PackageProto_UserInfoProto* PackageProto::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserInfoProto >*
PackageProto::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageProto.users)
  return &users_;
}
inline const ::android::service::pm::PackageProto_UserInfoProto& PackageProto::users(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.users)
  return users_.Get(index);
}
inline ::android::service::pm::PackageProto_UserInfoProto* PackageProto::add_users() {
  // @@protoc_insertion_point(field_add:android.service.pm.PackageProto.users)
  return users_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserInfoProto >&
PackageProto::users() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageProto.users)
  return users_;
}

// optional .android.service.pm.PackageProto.InstallSourceProto install_source = 10;
inline bool PackageProto::has_install_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackageProto::clear_install_source() {
  if (install_source_ != nullptr) install_source_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::service::pm::PackageProto_InstallSourceProto& PackageProto::install_source() const {
  const ::android::service::pm::PackageProto_InstallSourceProto* p = install_source_;
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.install_source)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::pm::PackageProto_InstallSourceProto*>(
      &::android::service::pm::_PackageProto_InstallSourceProto_default_instance_);
}
inline ::android::service::pm::PackageProto_InstallSourceProto* PackageProto::release_install_source() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.install_source)
  _has_bits_[0] &= ~0x00000008u;
  ::android::service::pm::PackageProto_InstallSourceProto* temp = install_source_;
  install_source_ = nullptr;
  return temp;
}
inline ::android::service::pm::PackageProto_InstallSourceProto* PackageProto::mutable_install_source() {
  _has_bits_[0] |= 0x00000008u;
  if (install_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::pm::PackageProto_InstallSourceProto>(GetArenaNoVirtual());
    install_source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.install_source)
  return install_source_;
}
inline void PackageProto::set_allocated_install_source(::android::service::pm::PackageProto_InstallSourceProto* install_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete install_source_;
  }
  if (install_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      install_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  install_source_ = install_source;
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.install_source)
}

// optional .android.service.pm.PackageProto.StatesProto states = 11;
inline bool PackageProto::has_states() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackageProto::clear_states() {
  if (states_ != nullptr) states_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::service::pm::PackageProto_StatesProto& PackageProto::states() const {
  const ::android::service::pm::PackageProto_StatesProto* p = states_;
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.states)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::pm::PackageProto_StatesProto*>(
      &::android::service::pm::_PackageProto_StatesProto_default_instance_);
}
inline ::android::service::pm::PackageProto_StatesProto* PackageProto::release_states() {
  // @@protoc_insertion_point(field_release:android.service.pm.PackageProto.states)
  _has_bits_[0] &= ~0x00000010u;
  ::android::service::pm::PackageProto_StatesProto* temp = states_;
  states_ = nullptr;
  return temp;
}
inline ::android::service::pm::PackageProto_StatesProto* PackageProto::mutable_states() {
  _has_bits_[0] |= 0x00000010u;
  if (states_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::pm::PackageProto_StatesProto>(GetArenaNoVirtual());
    states_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.states)
  return states_;
}
inline void PackageProto::set_allocated_states(::android::service::pm::PackageProto_StatesProto* states) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete states_;
  }
  if (states) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      states = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, states, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  states_ = states;
  // @@protoc_insertion_point(field_set_allocated:android.service.pm.PackageProto.states)
}

// repeated .android.service.pm.PackageProto.UserPermissionsProto user_permissions = 12;
inline int PackageProto::user_permissions_size() const {
  return user_permissions_.size();
}
inline void PackageProto::clear_user_permissions() {
  user_permissions_.Clear();
}
inline ::android::service::pm::PackageProto_UserPermissionsProto* PackageProto::mutable_user_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.pm.PackageProto.user_permissions)
  return user_permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserPermissionsProto >*
PackageProto::mutable_user_permissions() {
  // @@protoc_insertion_point(field_mutable_list:android.service.pm.PackageProto.user_permissions)
  return &user_permissions_;
}
inline const ::android::service::pm::PackageProto_UserPermissionsProto& PackageProto::user_permissions(int index) const {
  // @@protoc_insertion_point(field_get:android.service.pm.PackageProto.user_permissions)
  return user_permissions_.Get(index);
}
inline ::android::service::pm::PackageProto_UserPermissionsProto* PackageProto::add_user_permissions() {
  // @@protoc_insertion_point(field_add:android.service.pm.PackageProto.user_permissions)
  return user_permissions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::pm::PackageProto_UserPermissionsProto >&
PackageProto::user_permissions() const {
  // @@protoc_insertion_point(field_list:android.service.pm.PackageProto.user_permissions)
  return user_permissions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pm
}  // namespace service
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::service::pm::PackageProto_UserInfoProto_InstallType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::pm::PackageProto_UserInfoProto_EnabledState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fpackage_2eproto
