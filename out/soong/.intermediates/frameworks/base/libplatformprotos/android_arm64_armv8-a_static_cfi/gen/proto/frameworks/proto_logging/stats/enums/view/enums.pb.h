// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/view/enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fview_2fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fview_2fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fview_2fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fview_2fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace view {

enum DisplayStateEnum : int {
  DISPLAY_STATE_UNKNOWN = 0,
  DISPLAY_STATE_OFF = 1,
  DISPLAY_STATE_ON = 2,
  DISPLAY_STATE_DOZE = 3,
  DISPLAY_STATE_DOZE_SUSPEND = 4,
  DISPLAY_STATE_VR = 5,
  DISPLAY_STATE_ON_SUSPEND = 6
};
bool DisplayStateEnum_IsValid(int value);
constexpr DisplayStateEnum DisplayStateEnum_MIN = DISPLAY_STATE_UNKNOWN;
constexpr DisplayStateEnum DisplayStateEnum_MAX = DISPLAY_STATE_ON_SUSPEND;
constexpr int DisplayStateEnum_ARRAYSIZE = DisplayStateEnum_MAX + 1;

const std::string& DisplayStateEnum_Name(DisplayStateEnum value);
template<typename T>
inline const std::string& DisplayStateEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DisplayStateEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DisplayStateEnum_Name.");
  return DisplayStateEnum_Name(static_cast<DisplayStateEnum>(enum_t_value));
}
bool DisplayStateEnum_Parse(
    const std::string& name, DisplayStateEnum* value);
enum TransitionTypeEnum : int {
  TRANSIT_NONE = 0,
  TRANSIT_UNSET = -1,
  TRANSIT_ACTIVITY_OPEN = 6,
  TRANSIT_ACTIVITY_CLOSE = 7,
  TRANSIT_TASK_OPEN = 8,
  TRANSIT_TASK_CLOSE = 9,
  TRANSIT_TASK_TO_FRONT = 10,
  TRANSIT_TASK_TO_BACK = 11,
  TRANSIT_WALLPAPER_CLOSE = 12,
  TRANSIT_WALLPAPER_OPEN = 13,
  TRANSIT_WALLPAPER_INTRA_OPEN = 14,
  TRANSIT_WALLPAPER_INTRA_CLOSE = 15,
  TRANSIT_TASK_OPEN_BEHIND = 16,
  TRANSIT_TASK_IN_PLACE = 17,
  TRANSIT_ACTIVITY_RELAUNCH = 18,
  TRANSIT_DOCK_TASK_FROM_RECENTS PROTOBUF_DEPRECATED = 19,
  TRANSIT_KEYGUARD_GOING_AWAY = 20,
  TRANSIT_KEYGUARD_GOING_AWAY_ON_WALLPAPER = 21,
  TRANSIT_KEYGUARD_OCCLUDE = 22,
  TRANSIT_KEYGUARD_UNOCCLUDE = 23,
  TRANSIT_TRANSLUCENT_ACTIVITY_OPEN = 24,
  TRANSIT_TRANSLUCENT_ACTIVITY_CLOSE = 25,
  TRANSIT_CRASHING_ACTIVITY_CLOSE = 26
};
bool TransitionTypeEnum_IsValid(int value);
constexpr TransitionTypeEnum TransitionTypeEnum_MIN = TRANSIT_UNSET;
constexpr TransitionTypeEnum TransitionTypeEnum_MAX = TRANSIT_CRASHING_ACTIVITY_CLOSE;
constexpr int TransitionTypeEnum_ARRAYSIZE = TransitionTypeEnum_MAX + 1;

const std::string& TransitionTypeEnum_Name(TransitionTypeEnum value);
template<typename T>
inline const std::string& TransitionTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransitionTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransitionTypeEnum_Name.");
  return TransitionTypeEnum_Name(static_cast<TransitionTypeEnum>(enum_t_value));
}
bool TransitionTypeEnum_Parse(
    const std::string& name, TransitionTypeEnum* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace view
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::view::DisplayStateEnum> : ::std::true_type {};
template <> struct is_proto_enum< ::android::view::TransitionTypeEnum> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fview_2fenums_2eproto
