// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/message/mediametrics_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace stats {
namespace mediametrics_message {
class AudioPolicyData;
class AudioPolicyDataDefaultTypeInternal;
extern AudioPolicyDataDefaultTypeInternal _AudioPolicyData_default_instance_;
class AudioRecordData;
class AudioRecordDataDefaultTypeInternal;
extern AudioRecordDataDefaultTypeInternal _AudioRecordData_default_instance_;
class AudioThreadData;
class AudioThreadDataDefaultTypeInternal;
extern AudioThreadDataDefaultTypeInternal _AudioThreadData_default_instance_;
class AudioTrackData;
class AudioTrackDataDefaultTypeInternal;
extern AudioTrackDataDefaultTypeInternal _AudioTrackData_default_instance_;
class CodecData;
class CodecDataDefaultTypeInternal;
extern CodecDataDefaultTypeInternal _CodecData_default_instance_;
class ExtractorData;
class ExtractorDataDefaultTypeInternal;
extern ExtractorDataDefaultTypeInternal _ExtractorData_default_instance_;
class NuPlayerData;
class NuPlayerDataDefaultTypeInternal;
extern NuPlayerDataDefaultTypeInternal _NuPlayerData_default_instance_;
class RecorderData;
class RecorderDataDefaultTypeInternal;
extern RecorderDataDefaultTypeInternal _RecorderData_default_instance_;
}  // namespace mediametrics_message
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::stats::mediametrics_message::AudioPolicyData* Arena::CreateMaybeMessage<::android::stats::mediametrics_message::AudioPolicyData>(Arena*);
template<> ::android::stats::mediametrics_message::AudioRecordData* Arena::CreateMaybeMessage<::android::stats::mediametrics_message::AudioRecordData>(Arena*);
template<> ::android::stats::mediametrics_message::AudioThreadData* Arena::CreateMaybeMessage<::android::stats::mediametrics_message::AudioThreadData>(Arena*);
template<> ::android::stats::mediametrics_message::AudioTrackData* Arena::CreateMaybeMessage<::android::stats::mediametrics_message::AudioTrackData>(Arena*);
template<> ::android::stats::mediametrics_message::CodecData* Arena::CreateMaybeMessage<::android::stats::mediametrics_message::CodecData>(Arena*);
template<> ::android::stats::mediametrics_message::ExtractorData* Arena::CreateMaybeMessage<::android::stats::mediametrics_message::ExtractorData>(Arena*);
template<> ::android::stats::mediametrics_message::NuPlayerData* Arena::CreateMaybeMessage<::android::stats::mediametrics_message::NuPlayerData>(Arena*);
template<> ::android::stats::mediametrics_message::RecorderData* Arena::CreateMaybeMessage<::android::stats::mediametrics_message::RecorderData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace stats {
namespace mediametrics_message {

enum ExtractorData_EntryPoint : int {
  ExtractorData_EntryPoint_UNSET = 0,
  ExtractorData_EntryPoint_SDK = 1,
  ExtractorData_EntryPoint_NDK_WITH_JVM = 2,
  ExtractorData_EntryPoint_NDK_NO_JVM = 3,
  ExtractorData_EntryPoint_OTHER = 4
};
bool ExtractorData_EntryPoint_IsValid(int value);
constexpr ExtractorData_EntryPoint ExtractorData_EntryPoint_EntryPoint_MIN = ExtractorData_EntryPoint_UNSET;
constexpr ExtractorData_EntryPoint ExtractorData_EntryPoint_EntryPoint_MAX = ExtractorData_EntryPoint_OTHER;
constexpr int ExtractorData_EntryPoint_EntryPoint_ARRAYSIZE = ExtractorData_EntryPoint_EntryPoint_MAX + 1;

const std::string& ExtractorData_EntryPoint_Name(ExtractorData_EntryPoint value);
template<typename T>
inline const std::string& ExtractorData_EntryPoint_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExtractorData_EntryPoint>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExtractorData_EntryPoint_Name.");
  return ExtractorData_EntryPoint_Name(static_cast<ExtractorData_EntryPoint>(enum_t_value));
}
bool ExtractorData_EntryPoint_Parse(
    const std::string& name, ExtractorData_EntryPoint* value);
// ===================================================================

class AudioPolicyData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.mediametrics_message.AudioPolicyData) */ {
 public:
  AudioPolicyData();
  virtual ~AudioPolicyData();

  AudioPolicyData(const AudioPolicyData& from);
  AudioPolicyData(AudioPolicyData&& from) noexcept
    : AudioPolicyData() {
    *this = ::std::move(from);
  }

  inline AudioPolicyData& operator=(const AudioPolicyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioPolicyData& operator=(AudioPolicyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioPolicyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioPolicyData* internal_default_instance() {
    return reinterpret_cast<const AudioPolicyData*>(
               &_AudioPolicyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioPolicyData& a, AudioPolicyData& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioPolicyData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioPolicyData* New() const final {
    return CreateMaybeMessage<AudioPolicyData>(nullptr);
  }

  AudioPolicyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioPolicyData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioPolicyData& from);
  void MergeFrom(const AudioPolicyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioPolicyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.mediametrics_message.AudioPolicyData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestSourceFieldNumber = 2,
    kRequestPackageFieldNumber = 3,
    kRequestDeviceFieldNumber = 5,
    kActiveSourceFieldNumber = 6,
    kActivePackageFieldNumber = 7,
    kActiveDeviceFieldNumber = 9,
    kStatusFieldNumber = 1,
    kRequestSessionFieldNumber = 4,
    kActiveSessionFieldNumber = 8,
  };
  // optional string request_source = 2;
  bool has_request_source() const;
  void clear_request_source();
  const std::string& request_source() const;
  void set_request_source(const std::string& value);
  void set_request_source(std::string&& value);
  void set_request_source(const char* value);
  void set_request_source(const char* value, size_t size);
  std::string* mutable_request_source();
  std::string* release_request_source();
  void set_allocated_request_source(std::string* request_source);

  // optional string request_package = 3;
  bool has_request_package() const;
  void clear_request_package();
  const std::string& request_package() const;
  void set_request_package(const std::string& value);
  void set_request_package(std::string&& value);
  void set_request_package(const char* value);
  void set_request_package(const char* value, size_t size);
  std::string* mutable_request_package();
  std::string* release_request_package();
  void set_allocated_request_package(std::string* request_package);

  // optional string request_device = 5;
  bool has_request_device() const;
  void clear_request_device();
  const std::string& request_device() const;
  void set_request_device(const std::string& value);
  void set_request_device(std::string&& value);
  void set_request_device(const char* value);
  void set_request_device(const char* value, size_t size);
  std::string* mutable_request_device();
  std::string* release_request_device();
  void set_allocated_request_device(std::string* request_device);

  // optional string active_source = 6;
  bool has_active_source() const;
  void clear_active_source();
  const std::string& active_source() const;
  void set_active_source(const std::string& value);
  void set_active_source(std::string&& value);
  void set_active_source(const char* value);
  void set_active_source(const char* value, size_t size);
  std::string* mutable_active_source();
  std::string* release_active_source();
  void set_allocated_active_source(std::string* active_source);

  // optional string active_package = 7;
  bool has_active_package() const;
  void clear_active_package();
  const std::string& active_package() const;
  void set_active_package(const std::string& value);
  void set_active_package(std::string&& value);
  void set_active_package(const char* value);
  void set_active_package(const char* value, size_t size);
  std::string* mutable_active_package();
  std::string* release_active_package();
  void set_allocated_active_package(std::string* active_package);

  // optional string active_device = 9;
  bool has_active_device() const;
  void clear_active_device();
  const std::string& active_device() const;
  void set_active_device(const std::string& value);
  void set_active_device(std::string&& value);
  void set_active_device(const char* value);
  void set_active_device(const char* value, size_t size);
  std::string* mutable_active_device();
  std::string* release_active_device();
  void set_allocated_active_device(std::string* active_device);

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 request_session = 4;
  bool has_request_session() const;
  void clear_request_session();
  ::PROTOBUF_NAMESPACE_ID::int32 request_session() const;
  void set_request_session(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 active_session = 8;
  bool has_active_session() const;
  void clear_active_session();
  ::PROTOBUF_NAMESPACE_ID::int32 active_session() const;
  void set_active_session(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.stats.mediametrics_message.AudioPolicyData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_device_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_session_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_session_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AudioRecordData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.mediametrics_message.AudioRecordData) */ {
 public:
  AudioRecordData();
  virtual ~AudioRecordData();

  AudioRecordData(const AudioRecordData& from);
  AudioRecordData(AudioRecordData&& from) noexcept
    : AudioRecordData() {
    *this = ::std::move(from);
  }

  inline AudioRecordData& operator=(const AudioRecordData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioRecordData& operator=(AudioRecordData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioRecordData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioRecordData* internal_default_instance() {
    return reinterpret_cast<const AudioRecordData*>(
               &_AudioRecordData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioRecordData& a, AudioRecordData& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioRecordData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioRecordData* New() const final {
    return CreateMaybeMessage<AudioRecordData>(nullptr);
  }

  AudioRecordData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioRecordData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioRecordData& from);
  void MergeFrom(const AudioRecordData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioRecordData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.mediametrics_message.AudioRecordData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodingFieldNumber = 1,
    kSourceFieldNumber = 2,
    kErrorFunctionFieldNumber = 10,
    kAttributesFieldNumber = 13,
    kLatencyFieldNumber = 3,
    kSamplerateFieldNumber = 4,
    kCreatedMillisFieldNumber = 6,
    kChannelsFieldNumber = 5,
    kCountFieldNumber = 8,
    kDurationMillisFieldNumber = 7,
    kErrorCodeFieldNumber = 9,
    kPortIdFieldNumber = 11,
    kChannelMaskFieldNumber = 14,
    kStartCountFieldNumber = 15,
    kFrameCountFieldNumber = 12,
  };
  // optional string encoding = 1;
  bool has_encoding() const;
  void clear_encoding();
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);

  // optional string source = 2;
  bool has_source() const;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);

  // optional string error_function = 10;
  bool has_error_function() const;
  void clear_error_function();
  const std::string& error_function() const;
  void set_error_function(const std::string& value);
  void set_error_function(std::string&& value);
  void set_error_function(const char* value);
  void set_error_function(const char* value, size_t size);
  std::string* mutable_error_function();
  std::string* release_error_function();
  void set_allocated_error_function(std::string* error_function);

  // optional string attributes = 13;
  bool has_attributes() const;
  void clear_attributes();
  const std::string& attributes() const;
  void set_attributes(const std::string& value);
  void set_attributes(std::string&& value);
  void set_attributes(const char* value);
  void set_attributes(const char* value, size_t size);
  std::string* mutable_attributes();
  std::string* release_attributes();
  void set_allocated_attributes(std::string* attributes);

  // optional int32 latency = 3;
  bool has_latency() const;
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::int32 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 samplerate = 4;
  bool has_samplerate() const;
  void clear_samplerate();
  ::PROTOBUF_NAMESPACE_ID::int32 samplerate() const;
  void set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 created_millis = 6;
  bool has_created_millis() const;
  void clear_created_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 created_millis() const;
  void set_created_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 channels = 5;
  bool has_channels() const;
  void clear_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 channels() const;
  void set_channels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 count = 8;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 duration_millis = 7;
  bool has_duration_millis() const;
  void clear_duration_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis() const;
  void set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 error_code = 9;
  bool has_error_code() const;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 port_id = 11;
  bool has_port_id() const;
  void clear_port_id();
  ::PROTOBUF_NAMESPACE_ID::int32 port_id() const;
  void set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 channel_mask = 14;
  bool has_channel_mask() const;
  void clear_channel_mask();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_mask() const;
  void set_channel_mask(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 start_count = 15;
  bool has_start_count() const;
  void clear_start_count();
  ::PROTOBUF_NAMESPACE_ID::int64 start_count() const;
  void set_start_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 frame_count = 12;
  bool has_frame_count() const;
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.stats.mediametrics_message.AudioRecordData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_function_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributes_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_;
  ::PROTOBUF_NAMESPACE_ID::int32 samplerate_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_mask_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AudioThreadData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.mediametrics_message.AudioThreadData) */ {
 public:
  AudioThreadData();
  virtual ~AudioThreadData();

  AudioThreadData(const AudioThreadData& from);
  AudioThreadData(AudioThreadData&& from) noexcept
    : AudioThreadData() {
    *this = ::std::move(from);
  }

  inline AudioThreadData& operator=(const AudioThreadData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioThreadData& operator=(AudioThreadData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioThreadData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioThreadData* internal_default_instance() {
    return reinterpret_cast<const AudioThreadData*>(
               &_AudioThreadData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioThreadData& a, AudioThreadData& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioThreadData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioThreadData* New() const final {
    return CreateMaybeMessage<AudioThreadData>(nullptr);
  }

  AudioThreadData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioThreadData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioThreadData& from);
  void MergeFrom(const AudioThreadData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioThreadData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.mediametrics_message.AudioThreadData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kWorkMillisHistFieldNumber = 4,
    kLatencyMillisHistFieldNumber = 5,
    kWarmupMillisHistFieldNumber = 6,
    kEncodingFieldNumber = 15,
    kOutputDeviceFieldNumber = 17,
    kInputDeviceFieldNumber = 18,
    kFramecountFieldNumber = 2,
    kSamplerateFieldNumber = 3,
    kUnderrunsFieldNumber = 7,
    kOverrunsFieldNumber = 8,
    kActiveMillisFieldNumber = 9,
    kDurationMillisFieldNumber = 10,
    kIdFieldNumber = 11,
    kPortIdFieldNumber = 12,
    kChannelMaskFieldNumber = 14,
    kSampleRateFieldNumber = 13,
    kFrameCountFieldNumber = 16,
    kIoJitterMeanMillisFieldNumber = 19,
    kIoJitterStddevMillisFieldNumber = 20,
    kProcessTimeMeanMillisFieldNumber = 21,
    kProcessTimeStddevMillisFieldNumber = 22,
    kTimestampJitterMeanMillisFieldNumber = 23,
    kTimestampJitterStddevMillisFieldNumber = 24,
    kLatencyMeanMillisFieldNumber = 25,
    kLatencyStddevMillisFieldNumber = 26,
  };
  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // optional string work_millis_hist = 4;
  bool has_work_millis_hist() const;
  void clear_work_millis_hist();
  const std::string& work_millis_hist() const;
  void set_work_millis_hist(const std::string& value);
  void set_work_millis_hist(std::string&& value);
  void set_work_millis_hist(const char* value);
  void set_work_millis_hist(const char* value, size_t size);
  std::string* mutable_work_millis_hist();
  std::string* release_work_millis_hist();
  void set_allocated_work_millis_hist(std::string* work_millis_hist);

  // optional string latency_millis_hist = 5;
  bool has_latency_millis_hist() const;
  void clear_latency_millis_hist();
  const std::string& latency_millis_hist() const;
  void set_latency_millis_hist(const std::string& value);
  void set_latency_millis_hist(std::string&& value);
  void set_latency_millis_hist(const char* value);
  void set_latency_millis_hist(const char* value, size_t size);
  std::string* mutable_latency_millis_hist();
  std::string* release_latency_millis_hist();
  void set_allocated_latency_millis_hist(std::string* latency_millis_hist);

  // optional string warmup_millis_hist = 6;
  bool has_warmup_millis_hist() const;
  void clear_warmup_millis_hist();
  const std::string& warmup_millis_hist() const;
  void set_warmup_millis_hist(const std::string& value);
  void set_warmup_millis_hist(std::string&& value);
  void set_warmup_millis_hist(const char* value);
  void set_warmup_millis_hist(const char* value, size_t size);
  std::string* mutable_warmup_millis_hist();
  std::string* release_warmup_millis_hist();
  void set_allocated_warmup_millis_hist(std::string* warmup_millis_hist);

  // optional string encoding = 15;
  bool has_encoding() const;
  void clear_encoding();
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);

  // optional string output_device = 17;
  bool has_output_device() const;
  void clear_output_device();
  const std::string& output_device() const;
  void set_output_device(const std::string& value);
  void set_output_device(std::string&& value);
  void set_output_device(const char* value);
  void set_output_device(const char* value, size_t size);
  std::string* mutable_output_device();
  std::string* release_output_device();
  void set_allocated_output_device(std::string* output_device);

  // optional string input_device = 18;
  bool has_input_device() const;
  void clear_input_device();
  const std::string& input_device() const;
  void set_input_device(const std::string& value);
  void set_input_device(std::string&& value);
  void set_input_device(const char* value);
  void set_input_device(const char* value, size_t size);
  std::string* mutable_input_device();
  std::string* release_input_device();
  void set_allocated_input_device(std::string* input_device);

  // optional int32 framecount = 2;
  bool has_framecount() const;
  void clear_framecount();
  ::PROTOBUF_NAMESPACE_ID::int32 framecount() const;
  void set_framecount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 samplerate = 3;
  bool has_samplerate() const;
  void clear_samplerate();
  ::PROTOBUF_NAMESPACE_ID::int32 samplerate() const;
  void set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 underruns = 7;
  bool has_underruns() const;
  void clear_underruns();
  ::PROTOBUF_NAMESPACE_ID::int64 underruns() const;
  void set_underruns(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 overruns = 8;
  bool has_overruns() const;
  void clear_overruns();
  ::PROTOBUF_NAMESPACE_ID::int64 overruns() const;
  void set_overruns(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 active_millis = 9;
  bool has_active_millis() const;
  void clear_active_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 active_millis() const;
  void set_active_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 duration_millis = 10;
  bool has_duration_millis() const;
  void clear_duration_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis() const;
  void set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 id = 11;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 port_id = 12;
  bool has_port_id() const;
  void clear_port_id();
  ::PROTOBUF_NAMESPACE_ID::int32 port_id() const;
  void set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 channel_mask = 14;
  bool has_channel_mask() const;
  void clear_channel_mask();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_mask() const;
  void set_channel_mask(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 sample_rate = 13;
  bool has_sample_rate() const;
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 frame_count = 16;
  bool has_frame_count() const;
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double io_jitter_mean_millis = 19;
  bool has_io_jitter_mean_millis() const;
  void clear_io_jitter_mean_millis();
  double io_jitter_mean_millis() const;
  void set_io_jitter_mean_millis(double value);

  // optional double io_jitter_stddev_millis = 20;
  bool has_io_jitter_stddev_millis() const;
  void clear_io_jitter_stddev_millis();
  double io_jitter_stddev_millis() const;
  void set_io_jitter_stddev_millis(double value);

  // optional double process_time_mean_millis = 21;
  bool has_process_time_mean_millis() const;
  void clear_process_time_mean_millis();
  double process_time_mean_millis() const;
  void set_process_time_mean_millis(double value);

  // optional double process_time_stddev_millis = 22;
  bool has_process_time_stddev_millis() const;
  void clear_process_time_stddev_millis();
  double process_time_stddev_millis() const;
  void set_process_time_stddev_millis(double value);

  // optional double timestamp_jitter_mean_millis = 23;
  bool has_timestamp_jitter_mean_millis() const;
  void clear_timestamp_jitter_mean_millis();
  double timestamp_jitter_mean_millis() const;
  void set_timestamp_jitter_mean_millis(double value);

  // optional double timestamp_jitter_stddev_millis = 24;
  bool has_timestamp_jitter_stddev_millis() const;
  void clear_timestamp_jitter_stddev_millis();
  double timestamp_jitter_stddev_millis() const;
  void set_timestamp_jitter_stddev_millis(double value);

  // optional double latency_mean_millis = 25;
  bool has_latency_mean_millis() const;
  void clear_latency_mean_millis();
  double latency_mean_millis() const;
  void set_latency_mean_millis(double value);

  // optional double latency_stddev_millis = 26;
  bool has_latency_stddev_millis() const;
  void clear_latency_stddev_millis();
  double latency_stddev_millis() const;
  void set_latency_stddev_millis(double value);

  // @@protoc_insertion_point(class_scope:android.stats.mediametrics_message.AudioThreadData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr work_millis_hist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latency_millis_hist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warmup_millis_hist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_device_;
  ::PROTOBUF_NAMESPACE_ID::int32 framecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 samplerate_;
  ::PROTOBUF_NAMESPACE_ID::int64 underruns_;
  ::PROTOBUF_NAMESPACE_ID::int64 overruns_;
  ::PROTOBUF_NAMESPACE_ID::int64 active_millis_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_mask_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count_;
  double io_jitter_mean_millis_;
  double io_jitter_stddev_millis_;
  double process_time_mean_millis_;
  double process_time_stddev_millis_;
  double timestamp_jitter_mean_millis_;
  double timestamp_jitter_stddev_millis_;
  double latency_mean_millis_;
  double latency_stddev_millis_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AudioTrackData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.mediametrics_message.AudioTrackData) */ {
 public:
  AudioTrackData();
  virtual ~AudioTrackData();

  AudioTrackData(const AudioTrackData& from);
  AudioTrackData(AudioTrackData&& from) noexcept
    : AudioTrackData() {
    *this = ::std::move(from);
  }

  inline AudioTrackData& operator=(const AudioTrackData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioTrackData& operator=(AudioTrackData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioTrackData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioTrackData* internal_default_instance() {
    return reinterpret_cast<const AudioTrackData*>(
               &_AudioTrackData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AudioTrackData& a, AudioTrackData& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioTrackData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioTrackData* New() const final {
    return CreateMaybeMessage<AudioTrackData>(nullptr);
  }

  AudioTrackData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioTrackData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioTrackData& from);
  void MergeFrom(const AudioTrackData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioTrackData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.mediametrics_message.AudioTrackData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamTypeFieldNumber = 1,
    kContentTypeFieldNumber = 2,
    kTrackUsageFieldNumber = 3,
    kEncodingFieldNumber = 9,
    kAttributesFieldNumber = 11,
    kChannelMaskFieldNumber = 5,
    kSampleRateFieldNumber = 4,
    kUnderrunFramesFieldNumber = 6,
    kStartupGlitchFieldNumber = 7,
    kPortIdFieldNumber = 8,
    kFrameCountFieldNumber = 10,
  };
  // optional string stream_type = 1;
  bool has_stream_type() const;
  void clear_stream_type();
  const std::string& stream_type() const;
  void set_stream_type(const std::string& value);
  void set_stream_type(std::string&& value);
  void set_stream_type(const char* value);
  void set_stream_type(const char* value, size_t size);
  std::string* mutable_stream_type();
  std::string* release_stream_type();
  void set_allocated_stream_type(std::string* stream_type);

  // optional string content_type = 2;
  bool has_content_type() const;
  void clear_content_type();
  const std::string& content_type() const;
  void set_content_type(const std::string& value);
  void set_content_type(std::string&& value);
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  std::string* mutable_content_type();
  std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);

  // optional string track_usage = 3;
  bool has_track_usage() const;
  void clear_track_usage();
  const std::string& track_usage() const;
  void set_track_usage(const std::string& value);
  void set_track_usage(std::string&& value);
  void set_track_usage(const char* value);
  void set_track_usage(const char* value, size_t size);
  std::string* mutable_track_usage();
  std::string* release_track_usage();
  void set_allocated_track_usage(std::string* track_usage);

  // optional string encoding = 9;
  bool has_encoding() const;
  void clear_encoding();
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);

  // optional string attributes = 11;
  bool has_attributes() const;
  void clear_attributes();
  const std::string& attributes() const;
  void set_attributes(const std::string& value);
  void set_attributes(std::string&& value);
  void set_attributes(const char* value);
  void set_attributes(const char* value, size_t size);
  std::string* mutable_attributes();
  std::string* release_attributes();
  void set_allocated_attributes(std::string* attributes);

  // optional int64 channel_mask = 5;
  bool has_channel_mask() const;
  void clear_channel_mask();
  ::PROTOBUF_NAMESPACE_ID::int64 channel_mask() const;
  void set_channel_mask(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 sample_rate = 4;
  bool has_sample_rate() const;
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 underrun_frames = 6;
  bool has_underrun_frames() const;
  void clear_underrun_frames();
  ::PROTOBUF_NAMESPACE_ID::int32 underrun_frames() const;
  void set_underrun_frames(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 startup_glitch = 7;
  bool has_startup_glitch() const;
  void clear_startup_glitch();
  ::PROTOBUF_NAMESPACE_ID::int32 startup_glitch() const;
  void set_startup_glitch(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 port_id = 8;
  bool has_port_id() const;
  void clear_port_id();
  ::PROTOBUF_NAMESPACE_ID::int32 port_id() const;
  void set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 frame_count = 10;
  bool has_frame_count() const;
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.stats.mediametrics_message.AudioTrackData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_usage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributes_;
  ::PROTOBUF_NAMESPACE_ID::int64 channel_mask_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 underrun_frames_;
  ::PROTOBUF_NAMESPACE_ID::int32 startup_glitch_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class CodecData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.mediametrics_message.CodecData) */ {
 public:
  CodecData();
  virtual ~CodecData();

  CodecData(const CodecData& from);
  CodecData(CodecData&& from) noexcept
    : CodecData() {
    *this = ::std::move(from);
  }

  inline CodecData& operator=(const CodecData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CodecData& operator=(CodecData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CodecData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodecData* internal_default_instance() {
    return reinterpret_cast<const CodecData*>(
               &_CodecData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CodecData& a, CodecData& b) {
    a.Swap(&b);
  }
  inline void Swap(CodecData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CodecData* New() const final {
    return CreateMaybeMessage<CodecData>(nullptr);
  }

  CodecData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CodecData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CodecData& from);
  void MergeFrom(const CodecData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CodecData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.mediametrics_message.CodecData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
    kMimeFieldNumber = 2,
    kModeFieldNumber = 3,
    kErrorStateFieldNumber = 15,
    kBitrateModeFieldNumber = 23,
    kLogSessionIdFieldNumber = 26,
    kEncoderFieldNumber = 4,
    kSecureFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kRotationFieldNumber = 8,
    kCryptoFieldNumber = 9,
    kProfileFieldNumber = 10,
    kLevelFieldNumber = 11,
    kMaxWidthFieldNumber = 12,
    kMaxHeightFieldNumber = 13,
    kLatencyMaxFieldNumber = 16,
    kLatencyMinFieldNumber = 17,
    kErrorCodeFieldNumber = 14,
    kQueueInputBufferErrorFieldNumber = 21,
    kLatencyAvgFieldNumber = 18,
    kLatencyCountFieldNumber = 19,
    kLatencyUnknownFieldNumber = 20,
    kQueueSecureInputBufferErrorFieldNumber = 22,
    kBitrateFieldNumber = 24,
    kLifetimeMillisFieldNumber = 25,
    kChannelCountFieldNumber = 27,
    kSampleRateFieldNumber = 28,
    kVideoEncodeBytesFieldNumber = 29,
    kVideoEncodeFramesFieldNumber = 30,
    kVideoInputBytesFieldNumber = 31,
    kVideoInputFramesFieldNumber = 32,
    kVideoEncodeDurationUsFieldNumber = 33,
    kFrameRateFieldNumber = 35,
    kCaptureRateFieldNumber = 36,
    kColorFormatFieldNumber = 34,
    kPriorityFieldNumber = 38,
    kOperatingRateFieldNumber = 37,
    kVideoQpIMinFieldNumber = 39,
    kVideoQpIMaxFieldNumber = 40,
    kVideoQpPMinFieldNumber = 41,
    kVideoQpPMaxFieldNumber = 42,
    kVideoQpBMinFieldNumber = 43,
    kVideoQpBMaxFieldNumber = 44,
    kOriginalBitrateFieldNumber = 45,
    kShapingEnhancedFieldNumber = 46,
    kOriginalVideoQpIMinFieldNumber = 47,
    kOriginalVideoQpIMaxFieldNumber = 48,
    kOriginalVideoQpPMinFieldNumber = 49,
    kOriginalVideoQpPMaxFieldNumber = 50,
    kOriginalVideoQpBMinFieldNumber = 51,
    kOriginalVideoQpBMaxFieldNumber = 52,
  };
  // optional string codec = 1;
  bool has_codec() const;
  void clear_codec();
  const std::string& codec() const;
  void set_codec(const std::string& value);
  void set_codec(std::string&& value);
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  std::string* mutable_codec();
  std::string* release_codec();
  void set_allocated_codec(std::string* codec);

  // optional string mime = 2;
  bool has_mime() const;
  void clear_mime();
  const std::string& mime() const;
  void set_mime(const std::string& value);
  void set_mime(std::string&& value);
  void set_mime(const char* value);
  void set_mime(const char* value, size_t size);
  std::string* mutable_mime();
  std::string* release_mime();
  void set_allocated_mime(std::string* mime);

  // optional string mode = 3;
  bool has_mode() const;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);

  // optional string error_state = 15;
  bool has_error_state() const;
  void clear_error_state();
  const std::string& error_state() const;
  void set_error_state(const std::string& value);
  void set_error_state(std::string&& value);
  void set_error_state(const char* value);
  void set_error_state(const char* value, size_t size);
  std::string* mutable_error_state();
  std::string* release_error_state();
  void set_allocated_error_state(std::string* error_state);

  // optional string bitrate_mode = 23;
  bool has_bitrate_mode() const;
  void clear_bitrate_mode();
  const std::string& bitrate_mode() const;
  void set_bitrate_mode(const std::string& value);
  void set_bitrate_mode(std::string&& value);
  void set_bitrate_mode(const char* value);
  void set_bitrate_mode(const char* value, size_t size);
  std::string* mutable_bitrate_mode();
  std::string* release_bitrate_mode();
  void set_allocated_bitrate_mode(std::string* bitrate_mode);

  // optional string log_session_id = 26;
  bool has_log_session_id() const;
  void clear_log_session_id();
  const std::string& log_session_id() const;
  void set_log_session_id(const std::string& value);
  void set_log_session_id(std::string&& value);
  void set_log_session_id(const char* value);
  void set_log_session_id(const char* value, size_t size);
  std::string* mutable_log_session_id();
  std::string* release_log_session_id();
  void set_allocated_log_session_id(std::string* log_session_id);

  // optional int32 encoder = 4;
  bool has_encoder() const;
  void clear_encoder();
  ::PROTOBUF_NAMESPACE_ID::int32 encoder() const;
  void set_encoder(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 secure = 5;
  bool has_secure() const;
  void clear_secure();
  ::PROTOBUF_NAMESPACE_ID::int32 secure() const;
  void set_secure(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 width = 6;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 7;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 rotation = 8;
  bool has_rotation() const;
  void clear_rotation();
  ::PROTOBUF_NAMESPACE_ID::int32 rotation() const;
  void set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 crypto = 9;
  bool has_crypto() const;
  void clear_crypto();
  ::PROTOBUF_NAMESPACE_ID::int32 crypto() const;
  void set_crypto(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 profile = 10;
  bool has_profile() const;
  void clear_profile();
  ::PROTOBUF_NAMESPACE_ID::int32 profile() const;
  void set_profile(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 level = 11;
  bool has_level() const;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_width = 12;
  bool has_max_width() const;
  void clear_max_width();
  ::PROTOBUF_NAMESPACE_ID::int32 max_width() const;
  void set_max_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_height = 13;
  bool has_max_height() const;
  void clear_max_height();
  ::PROTOBUF_NAMESPACE_ID::int32 max_height() const;
  void set_max_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 latency_max = 16;
  bool has_latency_max() const;
  void clear_latency_max();
  ::PROTOBUF_NAMESPACE_ID::int64 latency_max() const;
  void set_latency_max(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 latency_min = 17;
  bool has_latency_min() const;
  void clear_latency_min();
  ::PROTOBUF_NAMESPACE_ID::int64 latency_min() const;
  void set_latency_min(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 error_code = 14;
  bool has_error_code() const;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 queue_input_buffer_error = 21;
  bool has_queue_input_buffer_error() const;
  void clear_queue_input_buffer_error();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_input_buffer_error() const;
  void set_queue_input_buffer_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 latency_avg = 18;
  bool has_latency_avg() const;
  void clear_latency_avg();
  ::PROTOBUF_NAMESPACE_ID::int64 latency_avg() const;
  void set_latency_avg(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 latency_count = 19;
  bool has_latency_count() const;
  void clear_latency_count();
  ::PROTOBUF_NAMESPACE_ID::int64 latency_count() const;
  void set_latency_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 latency_unknown = 20;
  bool has_latency_unknown() const;
  void clear_latency_unknown();
  ::PROTOBUF_NAMESPACE_ID::int64 latency_unknown() const;
  void set_latency_unknown(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 queue_secure_input_buffer_error = 22;
  bool has_queue_secure_input_buffer_error() const;
  void clear_queue_secure_input_buffer_error();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_secure_input_buffer_error() const;
  void set_queue_secure_input_buffer_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 bitrate = 24;
  bool has_bitrate() const;
  void clear_bitrate();
  ::PROTOBUF_NAMESPACE_ID::int32 bitrate() const;
  void set_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 lifetime_millis = 25;
  bool has_lifetime_millis() const;
  void clear_lifetime_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetime_millis() const;
  void set_lifetime_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 channel_count = 27;
  bool has_channel_count() const;
  void clear_channel_count();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_count() const;
  void set_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 sample_rate = 28;
  bool has_sample_rate() const;
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 video_encode_bytes = 29;
  bool has_video_encode_bytes() const;
  void clear_video_encode_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 video_encode_bytes() const;
  void set_video_encode_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 video_encode_frames = 30;
  bool has_video_encode_frames() const;
  void clear_video_encode_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 video_encode_frames() const;
  void set_video_encode_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 video_input_bytes = 31;
  bool has_video_input_bytes() const;
  void clear_video_input_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 video_input_bytes() const;
  void set_video_input_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 video_input_frames = 32;
  bool has_video_input_frames() const;
  void clear_video_input_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 video_input_frames() const;
  void set_video_input_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 video_encode_duration_us = 33;
  bool has_video_encode_duration_us() const;
  void clear_video_encode_duration_us();
  ::PROTOBUF_NAMESPACE_ID::int64 video_encode_duration_us() const;
  void set_video_encode_duration_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double frame_rate = 35;
  bool has_frame_rate() const;
  void clear_frame_rate();
  double frame_rate() const;
  void set_frame_rate(double value);

  // optional double capture_rate = 36;
  bool has_capture_rate() const;
  void clear_capture_rate();
  double capture_rate() const;
  void set_capture_rate(double value);

  // optional int32 color_format = 34;
  bool has_color_format() const;
  void clear_color_format();
  ::PROTOBUF_NAMESPACE_ID::int32 color_format() const;
  void set_color_format(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 priority = 38;
  bool has_priority() const;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double operating_rate = 37;
  bool has_operating_rate() const;
  void clear_operating_rate();
  double operating_rate() const;
  void set_operating_rate(double value);

  // optional int32 video_qp_i_min = 39;
  bool has_video_qp_i_min() const;
  void clear_video_qp_i_min();
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_i_min() const;
  void set_video_qp_i_min(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_qp_i_max = 40;
  bool has_video_qp_i_max() const;
  void clear_video_qp_i_max();
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_i_max() const;
  void set_video_qp_i_max(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_qp_p_min = 41;
  bool has_video_qp_p_min() const;
  void clear_video_qp_p_min();
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_p_min() const;
  void set_video_qp_p_min(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_qp_p_max = 42;
  bool has_video_qp_p_max() const;
  void clear_video_qp_p_max();
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_p_max() const;
  void set_video_qp_p_max(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_qp_b_min = 43;
  bool has_video_qp_b_min() const;
  void clear_video_qp_b_min();
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_b_min() const;
  void set_video_qp_b_min(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_qp_b_max = 44;
  bool has_video_qp_b_max() const;
  void clear_video_qp_b_max();
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_b_max() const;
  void set_video_qp_b_max(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 original_bitrate = 45;
  bool has_original_bitrate() const;
  void clear_original_bitrate();
  ::PROTOBUF_NAMESPACE_ID::int32 original_bitrate() const;
  void set_original_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 shaping_enhanced = 46;
  bool has_shaping_enhanced() const;
  void clear_shaping_enhanced();
  ::PROTOBUF_NAMESPACE_ID::int32 shaping_enhanced() const;
  void set_shaping_enhanced(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 original_video_qp_i_min = 47;
  bool has_original_video_qp_i_min() const;
  void clear_original_video_qp_i_min();
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_i_min() const;
  void set_original_video_qp_i_min(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 original_video_qp_i_max = 48;
  bool has_original_video_qp_i_max() const;
  void clear_original_video_qp_i_max();
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_i_max() const;
  void set_original_video_qp_i_max(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 original_video_qp_p_min = 49;
  bool has_original_video_qp_p_min() const;
  void clear_original_video_qp_p_min();
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_p_min() const;
  void set_original_video_qp_p_min(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 original_video_qp_p_max = 50;
  bool has_original_video_qp_p_max() const;
  void clear_original_video_qp_p_max();
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_p_max() const;
  void set_original_video_qp_p_max(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 original_video_qp_b_min = 51;
  bool has_original_video_qp_b_min() const;
  void clear_original_video_qp_b_min();
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_b_min() const;
  void set_original_video_qp_b_min(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 original_video_qp_b_max = 52;
  bool has_original_video_qp_b_max() const;
  void clear_original_video_qp_b_max();
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_b_max() const;
  void set_original_video_qp_b_max(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.stats.mediametrics_message.CodecData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitrate_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 encoder_;
  ::PROTOBUF_NAMESPACE_ID::int32 secure_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 crypto_;
  ::PROTOBUF_NAMESPACE_ID::int32 profile_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_height_;
  ::PROTOBUF_NAMESPACE_ID::int64 latency_max_;
  ::PROTOBUF_NAMESPACE_ID::int64 latency_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_input_buffer_error_;
  ::PROTOBUF_NAMESPACE_ID::int64 latency_avg_;
  ::PROTOBUF_NAMESPACE_ID::int64 latency_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 latency_unknown_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_secure_input_buffer_error_;
  ::PROTOBUF_NAMESPACE_ID::int32 bitrate_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetime_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::int64 video_encode_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 video_encode_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 video_input_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 video_input_frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 video_encode_duration_us_;
  double frame_rate_;
  double capture_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_format_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  double operating_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_i_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_i_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_p_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_p_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_b_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_qp_b_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_bitrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 shaping_enhanced_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_i_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_i_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_p_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_p_max_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_b_min_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_video_qp_b_max_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ExtractorData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.mediametrics_message.ExtractorData) */ {
 public:
  ExtractorData();
  virtual ~ExtractorData();

  ExtractorData(const ExtractorData& from);
  ExtractorData(ExtractorData&& from) noexcept
    : ExtractorData() {
    *this = ::std::move(from);
  }

  inline ExtractorData& operator=(const ExtractorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractorData& operator=(ExtractorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ExtractorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtractorData* internal_default_instance() {
    return reinterpret_cast<const ExtractorData*>(
               &_ExtractorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ExtractorData& a, ExtractorData& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractorData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtractorData* New() const final {
    return CreateMaybeMessage<ExtractorData>(nullptr);
  }

  ExtractorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtractorData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ExtractorData& from);
  void MergeFrom(const ExtractorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtractorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.mediametrics_message.ExtractorData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ExtractorData_EntryPoint EntryPoint;
  static constexpr EntryPoint UNSET =
    ExtractorData_EntryPoint_UNSET;
  static constexpr EntryPoint SDK =
    ExtractorData_EntryPoint_SDK;
  static constexpr EntryPoint NDK_WITH_JVM =
    ExtractorData_EntryPoint_NDK_WITH_JVM;
  static constexpr EntryPoint NDK_NO_JVM =
    ExtractorData_EntryPoint_NDK_NO_JVM;
  static constexpr EntryPoint OTHER =
    ExtractorData_EntryPoint_OTHER;
  static inline bool EntryPoint_IsValid(int value) {
    return ExtractorData_EntryPoint_IsValid(value);
  }
  static constexpr EntryPoint EntryPoint_MIN =
    ExtractorData_EntryPoint_EntryPoint_MIN;
  static constexpr EntryPoint EntryPoint_MAX =
    ExtractorData_EntryPoint_EntryPoint_MAX;
  static constexpr int EntryPoint_ARRAYSIZE =
    ExtractorData_EntryPoint_EntryPoint_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EntryPoint_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EntryPoint>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EntryPoint_Name.");
    return ExtractorData_EntryPoint_Name(enum_t_value);
  }
  static inline bool EntryPoint_Parse(const std::string& name,
      EntryPoint* value) {
    return ExtractorData_EntryPoint_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 1,
    kMimeFieldNumber = 2,
    kLogSessionIdFieldNumber = 5,
    kTracksFieldNumber = 3,
    kEntryPointFieldNumber = 4,
  };
  // optional string format = 1;
  bool has_format() const;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);

  // optional string mime = 2;
  bool has_mime() const;
  void clear_mime();
  const std::string& mime() const;
  void set_mime(const std::string& value);
  void set_mime(std::string&& value);
  void set_mime(const char* value);
  void set_mime(const char* value, size_t size);
  std::string* mutable_mime();
  std::string* release_mime();
  void set_allocated_mime(std::string* mime);

  // optional string log_session_id = 5;
  bool has_log_session_id() const;
  void clear_log_session_id();
  const std::string& log_session_id() const;
  void set_log_session_id(const std::string& value);
  void set_log_session_id(std::string&& value);
  void set_log_session_id(const char* value);
  void set_log_session_id(const char* value, size_t size);
  std::string* mutable_log_session_id();
  std::string* release_log_session_id();
  void set_allocated_log_session_id(std::string* log_session_id);

  // optional int32 tracks = 3;
  bool has_tracks() const;
  void clear_tracks();
  ::PROTOBUF_NAMESPACE_ID::int32 tracks() const;
  void set_tracks(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.stats.mediametrics_message.ExtractorData.EntryPoint entry_point = 4 [default = UNSET];
  bool has_entry_point() const;
  void clear_entry_point();
  ::android::stats::mediametrics_message::ExtractorData_EntryPoint entry_point() const;
  void set_entry_point(::android::stats::mediametrics_message::ExtractorData_EntryPoint value);

  // @@protoc_insertion_point(class_scope:android.stats.mediametrics_message.ExtractorData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tracks_;
  int entry_point_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class NuPlayerData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.mediametrics_message.NuPlayerData) */ {
 public:
  NuPlayerData();
  virtual ~NuPlayerData();

  NuPlayerData(const NuPlayerData& from);
  NuPlayerData(NuPlayerData&& from) noexcept
    : NuPlayerData() {
    *this = ::std::move(from);
  }

  inline NuPlayerData& operator=(const NuPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NuPlayerData& operator=(NuPlayerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NuPlayerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NuPlayerData* internal_default_instance() {
    return reinterpret_cast<const NuPlayerData*>(
               &_NuPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NuPlayerData& a, NuPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(NuPlayerData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NuPlayerData* New() const final {
    return CreateMaybeMessage<NuPlayerData>(nullptr);
  }

  NuPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NuPlayerData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NuPlayerData& from);
  void MergeFrom(const NuPlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NuPlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.mediametrics_message.NuPlayerData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhichPlayerFieldNumber = 1,
    kVideoMimeFieldNumber = 2,
    kVideoCodecFieldNumber = 3,
    kAudioMimeFieldNumber = 9,
    kAudioCodecFieldNumber = 10,
    kErrorStateFieldNumber = 15,
    kDataSourceTypeFieldNumber = 16,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kFramesFieldNumber = 6,
    kFramesDroppedFieldNumber = 7,
    kFramerateFieldNumber = 8,
    kDurationMillisFieldNumber = 11,
    kPlayingMillisFieldNumber = 12,
    kErrorFieldNumber = 13,
    kErrorCodeFieldNumber = 14,
    kRebufferingMillisFieldNumber = 17,
    kRebuffersFieldNumber = 18,
    kRebufferAtExitFieldNumber = 19,
    kFramesDroppedStartupFieldNumber = 20,
  };
  // optional string whichPlayer = 1;
  bool has_whichplayer() const;
  void clear_whichplayer();
  const std::string& whichplayer() const;
  void set_whichplayer(const std::string& value);
  void set_whichplayer(std::string&& value);
  void set_whichplayer(const char* value);
  void set_whichplayer(const char* value, size_t size);
  std::string* mutable_whichplayer();
  std::string* release_whichplayer();
  void set_allocated_whichplayer(std::string* whichplayer);

  // optional string video_mime = 2;
  bool has_video_mime() const;
  void clear_video_mime();
  const std::string& video_mime() const;
  void set_video_mime(const std::string& value);
  void set_video_mime(std::string&& value);
  void set_video_mime(const char* value);
  void set_video_mime(const char* value, size_t size);
  std::string* mutable_video_mime();
  std::string* release_video_mime();
  void set_allocated_video_mime(std::string* video_mime);

  // optional string video_codec = 3;
  bool has_video_codec() const;
  void clear_video_codec();
  const std::string& video_codec() const;
  void set_video_codec(const std::string& value);
  void set_video_codec(std::string&& value);
  void set_video_codec(const char* value);
  void set_video_codec(const char* value, size_t size);
  std::string* mutable_video_codec();
  std::string* release_video_codec();
  void set_allocated_video_codec(std::string* video_codec);

  // optional string audio_mime = 9;
  bool has_audio_mime() const;
  void clear_audio_mime();
  const std::string& audio_mime() const;
  void set_audio_mime(const std::string& value);
  void set_audio_mime(std::string&& value);
  void set_audio_mime(const char* value);
  void set_audio_mime(const char* value, size_t size);
  std::string* mutable_audio_mime();
  std::string* release_audio_mime();
  void set_allocated_audio_mime(std::string* audio_mime);

  // optional string audio_codec = 10;
  bool has_audio_codec() const;
  void clear_audio_codec();
  const std::string& audio_codec() const;
  void set_audio_codec(const std::string& value);
  void set_audio_codec(std::string&& value);
  void set_audio_codec(const char* value);
  void set_audio_codec(const char* value, size_t size);
  std::string* mutable_audio_codec();
  std::string* release_audio_codec();
  void set_allocated_audio_codec(std::string* audio_codec);

  // optional string error_state = 15;
  bool has_error_state() const;
  void clear_error_state();
  const std::string& error_state() const;
  void set_error_state(const std::string& value);
  void set_error_state(std::string&& value);
  void set_error_state(const char* value);
  void set_error_state(const char* value, size_t size);
  std::string* mutable_error_state();
  std::string* release_error_state();
  void set_allocated_error_state(std::string* error_state);

  // optional string data_source_type = 16;
  bool has_data_source_type() const;
  void clear_data_source_type();
  const std::string& data_source_type() const;
  void set_data_source_type(const std::string& value);
  void set_data_source_type(std::string&& value);
  void set_data_source_type(const char* value);
  void set_data_source_type(const char* value, size_t size);
  std::string* mutable_data_source_type();
  std::string* release_data_source_type();
  void set_allocated_data_source_type(std::string* data_source_type);

  // optional int32 width = 4;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 5;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 frames = 6;
  bool has_frames() const;
  void clear_frames();
  ::PROTOBUF_NAMESPACE_ID::int64 frames() const;
  void set_frames(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 frames_dropped = 7;
  bool has_frames_dropped() const;
  void clear_frames_dropped();
  ::PROTOBUF_NAMESPACE_ID::int64 frames_dropped() const;
  void set_frames_dropped(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double framerate = 8;
  bool has_framerate() const;
  void clear_framerate();
  double framerate() const;
  void set_framerate(double value);

  // optional int64 duration_millis = 11;
  bool has_duration_millis() const;
  void clear_duration_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis() const;
  void set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 playing_millis = 12;
  bool has_playing_millis() const;
  void clear_playing_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 playing_millis() const;
  void set_playing_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 error = 13;
  bool has_error() const;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 error_code = 14;
  bool has_error_code() const;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 rebuffering_millis = 17;
  bool has_rebuffering_millis() const;
  void clear_rebuffering_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 rebuffering_millis() const;
  void set_rebuffering_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 rebuffers = 18;
  bool has_rebuffers() const;
  void clear_rebuffers();
  ::PROTOBUF_NAMESPACE_ID::int32 rebuffers() const;
  void set_rebuffers(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 rebuffer_at_exit = 19;
  bool has_rebuffer_at_exit() const;
  void clear_rebuffer_at_exit();
  ::PROTOBUF_NAMESPACE_ID::int32 rebuffer_at_exit() const;
  void set_rebuffer_at_exit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 frames_dropped_startup = 20;
  bool has_frames_dropped_startup() const;
  void clear_frames_dropped_startup();
  ::PROTOBUF_NAMESPACE_ID::int64 frames_dropped_startup() const;
  void set_frames_dropped_startup(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.stats.mediametrics_message.NuPlayerData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr whichplayer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_mime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_codec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_mime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_codec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_source_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 frames_;
  ::PROTOBUF_NAMESPACE_ID::int64 frames_dropped_;
  double framerate_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis_;
  ::PROTOBUF_NAMESPACE_ID::int64 playing_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 rebuffering_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 rebuffers_;
  ::PROTOBUF_NAMESPACE_ID::int32 rebuffer_at_exit_;
  ::PROTOBUF_NAMESPACE_ID::int64 frames_dropped_startup_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RecorderData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.stats.mediametrics_message.RecorderData) */ {
 public:
  RecorderData();
  virtual ~RecorderData();

  RecorderData(const RecorderData& from);
  RecorderData(RecorderData&& from) noexcept
    : RecorderData() {
    *this = ::std::move(from);
  }

  inline RecorderData& operator=(const RecorderData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecorderData& operator=(RecorderData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RecorderData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecorderData* internal_default_instance() {
    return reinterpret_cast<const RecorderData*>(
               &_RecorderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RecorderData& a, RecorderData& b) {
    a.Swap(&b);
  }
  inline void Swap(RecorderData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecorderData* New() const final {
    return CreateMaybeMessage<RecorderData>(nullptr);
  }

  RecorderData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecorderData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RecorderData& from);
  void MergeFrom(const RecorderData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecorderData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.stats.mediametrics_message.RecorderData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioMimeFieldNumber = 1,
    kVideoMimeFieldNumber = 2,
    kLogSessionIdFieldNumber = 22,
    kVideoProfileFieldNumber = 3,
    kVideoLevelFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
    kRotationFieldNumber = 7,
    kFramerateFieldNumber = 8,
    kCaptureFpsEnableFieldNumber = 10,
    kDurationMillisFieldNumber = 11,
    kCaptureFpsFieldNumber = 9,
    kPausedCountFieldNumber = 13,
    kPausedMillisFieldNumber = 12,
    kAudioBitrateFieldNumber = 14,
    kAudioChannelsFieldNumber = 15,
    kAudioSamplerateFieldNumber = 16,
    kMovieTimescaleFieldNumber = 17,
    kAudioTimescaleFieldNumber = 18,
    kVideoTimescaleFieldNumber = 19,
    kVideoBitrateFieldNumber = 20,
    kIframeIntervalFieldNumber = 21,
  };
  // optional string audio_mime = 1;
  bool has_audio_mime() const;
  void clear_audio_mime();
  const std::string& audio_mime() const;
  void set_audio_mime(const std::string& value);
  void set_audio_mime(std::string&& value);
  void set_audio_mime(const char* value);
  void set_audio_mime(const char* value, size_t size);
  std::string* mutable_audio_mime();
  std::string* release_audio_mime();
  void set_allocated_audio_mime(std::string* audio_mime);

  // optional string video_mime = 2;
  bool has_video_mime() const;
  void clear_video_mime();
  const std::string& video_mime() const;
  void set_video_mime(const std::string& value);
  void set_video_mime(std::string&& value);
  void set_video_mime(const char* value);
  void set_video_mime(const char* value, size_t size);
  std::string* mutable_video_mime();
  std::string* release_video_mime();
  void set_allocated_video_mime(std::string* video_mime);

  // optional string log_session_id = 22;
  bool has_log_session_id() const;
  void clear_log_session_id();
  const std::string& log_session_id() const;
  void set_log_session_id(const std::string& value);
  void set_log_session_id(std::string&& value);
  void set_log_session_id(const char* value);
  void set_log_session_id(const char* value, size_t size);
  std::string* mutable_log_session_id();
  std::string* release_log_session_id();
  void set_allocated_log_session_id(std::string* log_session_id);

  // optional int32 video_profile = 3;
  bool has_video_profile() const;
  void clear_video_profile();
  ::PROTOBUF_NAMESPACE_ID::int32 video_profile() const;
  void set_video_profile(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_level = 4;
  bool has_video_level() const;
  void clear_video_level();
  ::PROTOBUF_NAMESPACE_ID::int32 video_level() const;
  void set_video_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 width = 5;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 6;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 rotation = 7;
  bool has_rotation() const;
  void clear_rotation();
  ::PROTOBUF_NAMESPACE_ID::int32 rotation() const;
  void set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 framerate = 8;
  bool has_framerate() const;
  void clear_framerate();
  ::PROTOBUF_NAMESPACE_ID::int32 framerate() const;
  void set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double capture_fps_enable = 10;
  bool has_capture_fps_enable() const;
  void clear_capture_fps_enable();
  double capture_fps_enable() const;
  void set_capture_fps_enable(double value);

  // optional int64 duration_millis = 11;
  bool has_duration_millis() const;
  void clear_duration_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis() const;
  void set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 capture_fps = 9;
  bool has_capture_fps() const;
  void clear_capture_fps();
  ::PROTOBUF_NAMESPACE_ID::int32 capture_fps() const;
  void set_capture_fps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 paused_count = 13;
  bool has_paused_count() const;
  void clear_paused_count();
  ::PROTOBUF_NAMESPACE_ID::int32 paused_count() const;
  void set_paused_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 paused_millis = 12;
  bool has_paused_millis() const;
  void clear_paused_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 paused_millis() const;
  void set_paused_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 audio_bitrate = 14;
  bool has_audio_bitrate() const;
  void clear_audio_bitrate();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_bitrate() const;
  void set_audio_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 audio_channels = 15;
  bool has_audio_channels() const;
  void clear_audio_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_channels() const;
  void set_audio_channels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 audio_samplerate = 16;
  bool has_audio_samplerate() const;
  void clear_audio_samplerate();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_samplerate() const;
  void set_audio_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 movie_timescale = 17;
  bool has_movie_timescale() const;
  void clear_movie_timescale();
  ::PROTOBUF_NAMESPACE_ID::int32 movie_timescale() const;
  void set_movie_timescale(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 audio_timescale = 18;
  bool has_audio_timescale() const;
  void clear_audio_timescale();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_timescale() const;
  void set_audio_timescale(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_timescale = 19;
  bool has_video_timescale() const;
  void clear_video_timescale();
  ::PROTOBUF_NAMESPACE_ID::int32 video_timescale() const;
  void set_video_timescale(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 video_bitrate = 20;
  bool has_video_bitrate() const;
  void clear_video_bitrate();
  ::PROTOBUF_NAMESPACE_ID::int32 video_bitrate() const;
  void set_video_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 iframe_interval = 21;
  bool has_iframe_interval() const;
  void clear_iframe_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 iframe_interval() const;
  void set_iframe_interval(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.stats.mediametrics_message.RecorderData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_mime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_mime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_profile_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 framerate_;
  double capture_fps_enable_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 capture_fps_;
  ::PROTOBUF_NAMESPACE_ID::int32 paused_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 paused_millis_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_bitrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_samplerate_;
  ::PROTOBUF_NAMESPACE_ID::int32 movie_timescale_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_timescale_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_timescale_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_bitrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 iframe_interval_;
  friend struct ::TableStruct_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioPolicyData

// optional int32 status = 1;
inline bool AudioPolicyData::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AudioPolicyData::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioPolicyData::status() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.status)
  return status_;
}
inline void AudioPolicyData::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  status_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.status)
}

// optional string request_source = 2;
inline bool AudioPolicyData::has_request_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioPolicyData::clear_request_source() {
  request_source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioPolicyData::request_source() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.request_source)
  return request_source_.GetNoArena();
}
inline void AudioPolicyData::set_request_source(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.request_source)
}
inline void AudioPolicyData::set_request_source(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioPolicyData.request_source)
}
inline void AudioPolicyData::set_request_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioPolicyData.request_source)
}
inline void AudioPolicyData::set_request_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioPolicyData.request_source)
}
inline std::string* AudioPolicyData::mutable_request_source() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioPolicyData.request_source)
  return request_source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioPolicyData::release_request_source() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioPolicyData.request_source)
  if (!has_request_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPolicyData::set_allocated_request_source(std::string* request_source) {
  if (request_source != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_source);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioPolicyData.request_source)
}

// optional string request_package = 3;
inline bool AudioPolicyData::has_request_package() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioPolicyData::clear_request_package() {
  request_package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AudioPolicyData::request_package() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.request_package)
  return request_package_.GetNoArena();
}
inline void AudioPolicyData::set_request_package(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  request_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.request_package)
}
inline void AudioPolicyData::set_request_package(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  request_package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioPolicyData.request_package)
}
inline void AudioPolicyData::set_request_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  request_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioPolicyData.request_package)
}
inline void AudioPolicyData::set_request_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  request_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioPolicyData.request_package)
}
inline std::string* AudioPolicyData::mutable_request_package() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioPolicyData.request_package)
  return request_package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioPolicyData::release_request_package() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioPolicyData.request_package)
  if (!has_request_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return request_package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPolicyData::set_allocated_request_package(std::string* request_package) {
  if (request_package != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_package);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioPolicyData.request_package)
}

// optional int32 request_session = 4;
inline bool AudioPolicyData::has_request_session() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AudioPolicyData::clear_request_session() {
  request_session_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioPolicyData::request_session() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.request_session)
  return request_session_;
}
inline void AudioPolicyData::set_request_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  request_session_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.request_session)
}

// optional string request_device = 5;
inline bool AudioPolicyData::has_request_device() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioPolicyData::clear_request_device() {
  request_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AudioPolicyData::request_device() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.request_device)
  return request_device_.GetNoArena();
}
inline void AudioPolicyData::set_request_device(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  request_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.request_device)
}
inline void AudioPolicyData::set_request_device(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  request_device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioPolicyData.request_device)
}
inline void AudioPolicyData::set_request_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  request_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioPolicyData.request_device)
}
inline void AudioPolicyData::set_request_device(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  request_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioPolicyData.request_device)
}
inline std::string* AudioPolicyData::mutable_request_device() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioPolicyData.request_device)
  return request_device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioPolicyData::release_request_device() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioPolicyData.request_device)
  if (!has_request_device()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return request_device_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPolicyData::set_allocated_request_device(std::string* request_device) {
  if (request_device != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  request_device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_device);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioPolicyData.request_device)
}

// optional string active_source = 6;
inline bool AudioPolicyData::has_active_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioPolicyData::clear_active_source() {
  active_source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AudioPolicyData::active_source() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.active_source)
  return active_source_.GetNoArena();
}
inline void AudioPolicyData::set_active_source(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  active_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.active_source)
}
inline void AudioPolicyData::set_active_source(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  active_source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioPolicyData.active_source)
}
inline void AudioPolicyData::set_active_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  active_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioPolicyData.active_source)
}
inline void AudioPolicyData::set_active_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  active_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioPolicyData.active_source)
}
inline std::string* AudioPolicyData::mutable_active_source() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioPolicyData.active_source)
  return active_source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioPolicyData::release_active_source() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioPolicyData.active_source)
  if (!has_active_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return active_source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPolicyData::set_allocated_active_source(std::string* active_source) {
  if (active_source != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  active_source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_source);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioPolicyData.active_source)
}

// optional string active_package = 7;
inline bool AudioPolicyData::has_active_package() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioPolicyData::clear_active_package() {
  active_package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AudioPolicyData::active_package() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.active_package)
  return active_package_.GetNoArena();
}
inline void AudioPolicyData::set_active_package(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  active_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.active_package)
}
inline void AudioPolicyData::set_active_package(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  active_package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioPolicyData.active_package)
}
inline void AudioPolicyData::set_active_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  active_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioPolicyData.active_package)
}
inline void AudioPolicyData::set_active_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  active_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioPolicyData.active_package)
}
inline std::string* AudioPolicyData::mutable_active_package() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioPolicyData.active_package)
  return active_package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioPolicyData::release_active_package() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioPolicyData.active_package)
  if (!has_active_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return active_package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPolicyData::set_allocated_active_package(std::string* active_package) {
  if (active_package != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  active_package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_package);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioPolicyData.active_package)
}

// optional int32 active_session = 8;
inline bool AudioPolicyData::has_active_session() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AudioPolicyData::clear_active_session() {
  active_session_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioPolicyData::active_session() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.active_session)
  return active_session_;
}
inline void AudioPolicyData::set_active_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  active_session_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.active_session)
}

// optional string active_device = 9;
inline bool AudioPolicyData::has_active_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioPolicyData::clear_active_device() {
  active_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AudioPolicyData::active_device() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioPolicyData.active_device)
  return active_device_.GetNoArena();
}
inline void AudioPolicyData::set_active_device(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  active_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioPolicyData.active_device)
}
inline void AudioPolicyData::set_active_device(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  active_device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioPolicyData.active_device)
}
inline void AudioPolicyData::set_active_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  active_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioPolicyData.active_device)
}
inline void AudioPolicyData::set_active_device(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  active_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioPolicyData.active_device)
}
inline std::string* AudioPolicyData::mutable_active_device() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioPolicyData.active_device)
  return active_device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioPolicyData::release_active_device() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioPolicyData.active_device)
  if (!has_active_device()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return active_device_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioPolicyData::set_allocated_active_device(std::string* active_device) {
  if (active_device != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  active_device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_device);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioPolicyData.active_device)
}

// -------------------------------------------------------------------

// AudioRecordData

// optional string encoding = 1;
inline bool AudioRecordData::has_encoding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioRecordData::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioRecordData::encoding() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.encoding)
  return encoding_.GetNoArena();
}
inline void AudioRecordData::set_encoding(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.encoding)
}
inline void AudioRecordData::set_encoding(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encoding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioRecordData.encoding)
}
inline void AudioRecordData::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioRecordData.encoding)
}
inline void AudioRecordData::set_encoding(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioRecordData.encoding)
}
inline std::string* AudioRecordData::mutable_encoding() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioRecordData.encoding)
  return encoding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioRecordData::release_encoding() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioRecordData.encoding)
  if (!has_encoding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encoding_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioRecordData::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encoding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioRecordData.encoding)
}

// optional string source = 2;
inline bool AudioRecordData::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioRecordData::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AudioRecordData::source() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.source)
  return source_.GetNoArena();
}
inline void AudioRecordData::set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.source)
}
inline void AudioRecordData::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioRecordData.source)
}
inline void AudioRecordData::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioRecordData.source)
}
inline void AudioRecordData::set_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioRecordData.source)
}
inline std::string* AudioRecordData::mutable_source() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioRecordData.source)
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioRecordData::release_source() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioRecordData.source)
  if (!has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioRecordData::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioRecordData.source)
}

// optional int32 latency = 3;
inline bool AudioRecordData::has_latency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioRecordData::clear_latency() {
  latency_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioRecordData::latency() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.latency)
  return latency_;
}
inline void AudioRecordData::set_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  latency_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.latency)
}

// optional int32 samplerate = 4;
inline bool AudioRecordData::has_samplerate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioRecordData::clear_samplerate() {
  samplerate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioRecordData::samplerate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.samplerate)
  return samplerate_;
}
inline void AudioRecordData::set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  samplerate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.samplerate)
}

// optional int32 channels = 5;
inline bool AudioRecordData::has_channels() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AudioRecordData::clear_channels() {
  channels_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioRecordData::channels() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.channels)
  return channels_;
}
inline void AudioRecordData::set_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  channels_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.channels)
}

// optional int64 created_millis = 6;
inline bool AudioRecordData::has_created_millis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AudioRecordData::clear_created_millis() {
  created_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioRecordData::created_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.created_millis)
  return created_millis_;
}
inline void AudioRecordData::set_created_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  created_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.created_millis)
}

// optional int64 duration_millis = 7;
inline bool AudioRecordData::has_duration_millis() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AudioRecordData::clear_duration_millis() {
  duration_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioRecordData::duration_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.duration_millis)
  return duration_millis_;
}
inline void AudioRecordData::set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  duration_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.duration_millis)
}

// optional int32 count = 8;
inline bool AudioRecordData::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AudioRecordData::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioRecordData::count() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.count)
  return count_;
}
inline void AudioRecordData::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  count_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.count)
}

// optional int32 error_code = 9;
inline bool AudioRecordData::has_error_code() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AudioRecordData::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioRecordData::error_code() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.error_code)
  return error_code_;
}
inline void AudioRecordData::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.error_code)
}

// optional string error_function = 10;
inline bool AudioRecordData::has_error_function() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioRecordData::clear_error_function() {
  error_function_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AudioRecordData::error_function() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.error_function)
  return error_function_.GetNoArena();
}
inline void AudioRecordData::set_error_function(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  error_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.error_function)
}
inline void AudioRecordData::set_error_function(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  error_function_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioRecordData.error_function)
}
inline void AudioRecordData::set_error_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  error_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioRecordData.error_function)
}
inline void AudioRecordData::set_error_function(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  error_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioRecordData.error_function)
}
inline std::string* AudioRecordData::mutable_error_function() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioRecordData.error_function)
  return error_function_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioRecordData::release_error_function() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioRecordData.error_function)
  if (!has_error_function()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return error_function_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioRecordData::set_allocated_error_function(std::string* error_function) {
  if (error_function != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_function_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_function);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioRecordData.error_function)
}

// optional int32 port_id = 11;
inline bool AudioRecordData::has_port_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AudioRecordData::clear_port_id() {
  port_id_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioRecordData::port_id() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.port_id)
  return port_id_;
}
inline void AudioRecordData::set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  port_id_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.port_id)
}

// optional int32 frame_count = 12;
inline bool AudioRecordData::has_frame_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AudioRecordData::clear_frame_count() {
  frame_count_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioRecordData::frame_count() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.frame_count)
  return frame_count_;
}
inline void AudioRecordData::set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  frame_count_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.frame_count)
}

// optional string attributes = 13;
inline bool AudioRecordData::has_attributes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioRecordData::clear_attributes() {
  attributes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AudioRecordData::attributes() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.attributes)
  return attributes_.GetNoArena();
}
inline void AudioRecordData::set_attributes(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  attributes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.attributes)
}
inline void AudioRecordData::set_attributes(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  attributes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioRecordData.attributes)
}
inline void AudioRecordData::set_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  attributes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioRecordData.attributes)
}
inline void AudioRecordData::set_attributes(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  attributes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioRecordData.attributes)
}
inline std::string* AudioRecordData::mutable_attributes() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioRecordData.attributes)
  return attributes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioRecordData::release_attributes() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioRecordData.attributes)
  if (!has_attributes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return attributes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioRecordData::set_allocated_attributes(std::string* attributes) {
  if (attributes != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  attributes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attributes);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioRecordData.attributes)
}

// optional int64 channel_mask = 14;
inline bool AudioRecordData::has_channel_mask() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AudioRecordData::clear_channel_mask() {
  channel_mask_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioRecordData::channel_mask() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.channel_mask)
  return channel_mask_;
}
inline void AudioRecordData::set_channel_mask(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  channel_mask_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.channel_mask)
}

// optional int64 start_count = 15;
inline bool AudioRecordData::has_start_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AudioRecordData::clear_start_count() {
  start_count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioRecordData::start_count() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioRecordData.start_count)
  return start_count_;
}
inline void AudioRecordData::set_start_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  start_count_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioRecordData.start_count)
}

// -------------------------------------------------------------------

// AudioThreadData

// optional string type = 1;
inline bool AudioThreadData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioThreadData::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioThreadData::type() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.type)
  return type_.GetNoArena();
}
inline void AudioThreadData::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.type)
}
inline void AudioThreadData::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioThreadData.type)
}
inline void AudioThreadData::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioThreadData.type)
}
inline void AudioThreadData::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioThreadData.type)
}
inline std::string* AudioThreadData::mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioThreadData.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioThreadData::release_type() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioThreadData.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioThreadData::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioThreadData.type)
}

// optional int32 framecount = 2;
inline bool AudioThreadData::has_framecount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AudioThreadData::clear_framecount() {
  framecount_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioThreadData::framecount() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.framecount)
  return framecount_;
}
inline void AudioThreadData::set_framecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  framecount_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.framecount)
}

// optional int32 samplerate = 3;
inline bool AudioThreadData::has_samplerate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AudioThreadData::clear_samplerate() {
  samplerate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioThreadData::samplerate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.samplerate)
  return samplerate_;
}
inline void AudioThreadData::set_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  samplerate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.samplerate)
}

// optional string work_millis_hist = 4;
inline bool AudioThreadData::has_work_millis_hist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioThreadData::clear_work_millis_hist() {
  work_millis_hist_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AudioThreadData::work_millis_hist() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.work_millis_hist)
  return work_millis_hist_.GetNoArena();
}
inline void AudioThreadData::set_work_millis_hist(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  work_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.work_millis_hist)
}
inline void AudioThreadData::set_work_millis_hist(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  work_millis_hist_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioThreadData.work_millis_hist)
}
inline void AudioThreadData::set_work_millis_hist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  work_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioThreadData.work_millis_hist)
}
inline void AudioThreadData::set_work_millis_hist(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  work_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioThreadData.work_millis_hist)
}
inline std::string* AudioThreadData::mutable_work_millis_hist() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioThreadData.work_millis_hist)
  return work_millis_hist_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioThreadData::release_work_millis_hist() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioThreadData.work_millis_hist)
  if (!has_work_millis_hist()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return work_millis_hist_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioThreadData::set_allocated_work_millis_hist(std::string* work_millis_hist) {
  if (work_millis_hist != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  work_millis_hist_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), work_millis_hist);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioThreadData.work_millis_hist)
}

// optional string latency_millis_hist = 5;
inline bool AudioThreadData::has_latency_millis_hist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioThreadData::clear_latency_millis_hist() {
  latency_millis_hist_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AudioThreadData::latency_millis_hist() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.latency_millis_hist)
  return latency_millis_hist_.GetNoArena();
}
inline void AudioThreadData::set_latency_millis_hist(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  latency_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.latency_millis_hist)
}
inline void AudioThreadData::set_latency_millis_hist(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  latency_millis_hist_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioThreadData.latency_millis_hist)
}
inline void AudioThreadData::set_latency_millis_hist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  latency_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioThreadData.latency_millis_hist)
}
inline void AudioThreadData::set_latency_millis_hist(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  latency_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioThreadData.latency_millis_hist)
}
inline std::string* AudioThreadData::mutable_latency_millis_hist() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioThreadData.latency_millis_hist)
  return latency_millis_hist_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioThreadData::release_latency_millis_hist() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioThreadData.latency_millis_hist)
  if (!has_latency_millis_hist()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return latency_millis_hist_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioThreadData::set_allocated_latency_millis_hist(std::string* latency_millis_hist) {
  if (latency_millis_hist != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  latency_millis_hist_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latency_millis_hist);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioThreadData.latency_millis_hist)
}

// optional string warmup_millis_hist = 6;
inline bool AudioThreadData::has_warmup_millis_hist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioThreadData::clear_warmup_millis_hist() {
  warmup_millis_hist_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AudioThreadData::warmup_millis_hist() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.warmup_millis_hist)
  return warmup_millis_hist_.GetNoArena();
}
inline void AudioThreadData::set_warmup_millis_hist(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  warmup_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.warmup_millis_hist)
}
inline void AudioThreadData::set_warmup_millis_hist(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  warmup_millis_hist_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioThreadData.warmup_millis_hist)
}
inline void AudioThreadData::set_warmup_millis_hist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  warmup_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioThreadData.warmup_millis_hist)
}
inline void AudioThreadData::set_warmup_millis_hist(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  warmup_millis_hist_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioThreadData.warmup_millis_hist)
}
inline std::string* AudioThreadData::mutable_warmup_millis_hist() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioThreadData.warmup_millis_hist)
  return warmup_millis_hist_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioThreadData::release_warmup_millis_hist() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioThreadData.warmup_millis_hist)
  if (!has_warmup_millis_hist()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return warmup_millis_hist_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioThreadData::set_allocated_warmup_millis_hist(std::string* warmup_millis_hist) {
  if (warmup_millis_hist != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  warmup_millis_hist_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warmup_millis_hist);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioThreadData.warmup_millis_hist)
}

// optional int64 underruns = 7;
inline bool AudioThreadData::has_underruns() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AudioThreadData::clear_underruns() {
  underruns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioThreadData::underruns() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.underruns)
  return underruns_;
}
inline void AudioThreadData::set_underruns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  underruns_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.underruns)
}

// optional int64 overruns = 8;
inline bool AudioThreadData::has_overruns() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AudioThreadData::clear_overruns() {
  overruns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioThreadData::overruns() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.overruns)
  return overruns_;
}
inline void AudioThreadData::set_overruns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  overruns_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.overruns)
}

// optional int64 active_millis = 9;
inline bool AudioThreadData::has_active_millis() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AudioThreadData::clear_active_millis() {
  active_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioThreadData::active_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.active_millis)
  return active_millis_;
}
inline void AudioThreadData::set_active_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  active_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.active_millis)
}

// optional int64 duration_millis = 10;
inline bool AudioThreadData::has_duration_millis() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AudioThreadData::clear_duration_millis() {
  duration_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioThreadData::duration_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.duration_millis)
  return duration_millis_;
}
inline void AudioThreadData::set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  duration_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.duration_millis)
}

// optional int32 id = 11;
inline bool AudioThreadData::has_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AudioThreadData::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioThreadData::id() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.id)
  return id_;
}
inline void AudioThreadData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.id)
}

// optional int32 port_id = 12;
inline bool AudioThreadData::has_port_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AudioThreadData::clear_port_id() {
  port_id_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioThreadData::port_id() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.port_id)
  return port_id_;
}
inline void AudioThreadData::set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  port_id_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.port_id)
}

// optional int32 sample_rate = 13;
inline bool AudioThreadData::has_sample_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AudioThreadData::clear_sample_rate() {
  sample_rate_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioThreadData::sample_rate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.sample_rate)
  return sample_rate_;
}
inline void AudioThreadData::set_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.sample_rate)
}

// optional int64 channel_mask = 14;
inline bool AudioThreadData::has_channel_mask() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AudioThreadData::clear_channel_mask() {
  channel_mask_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioThreadData::channel_mask() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.channel_mask)
  return channel_mask_;
}
inline void AudioThreadData::set_channel_mask(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  channel_mask_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.channel_mask)
}

// optional string encoding = 15;
inline bool AudioThreadData::has_encoding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioThreadData::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AudioThreadData::encoding() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.encoding)
  return encoding_.GetNoArena();
}
inline void AudioThreadData::set_encoding(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.encoding)
}
inline void AudioThreadData::set_encoding(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  encoding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioThreadData.encoding)
}
inline void AudioThreadData::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioThreadData.encoding)
}
inline void AudioThreadData::set_encoding(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioThreadData.encoding)
}
inline std::string* AudioThreadData::mutable_encoding() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioThreadData.encoding)
  return encoding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioThreadData::release_encoding() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioThreadData.encoding)
  if (!has_encoding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return encoding_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioThreadData::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  encoding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioThreadData.encoding)
}

// optional int32 frame_count = 16;
inline bool AudioThreadData::has_frame_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AudioThreadData::clear_frame_count() {
  frame_count_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioThreadData::frame_count() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.frame_count)
  return frame_count_;
}
inline void AudioThreadData::set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  frame_count_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.frame_count)
}

// optional string output_device = 17;
inline bool AudioThreadData::has_output_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioThreadData::clear_output_device() {
  output_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AudioThreadData::output_device() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.output_device)
  return output_device_.GetNoArena();
}
inline void AudioThreadData::set_output_device(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  output_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.output_device)
}
inline void AudioThreadData::set_output_device(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  output_device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioThreadData.output_device)
}
inline void AudioThreadData::set_output_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  output_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioThreadData.output_device)
}
inline void AudioThreadData::set_output_device(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  output_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioThreadData.output_device)
}
inline std::string* AudioThreadData::mutable_output_device() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioThreadData.output_device)
  return output_device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioThreadData::release_output_device() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioThreadData.output_device)
  if (!has_output_device()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return output_device_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioThreadData::set_allocated_output_device(std::string* output_device) {
  if (output_device != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  output_device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_device);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioThreadData.output_device)
}

// optional string input_device = 18;
inline bool AudioThreadData::has_input_device() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AudioThreadData::clear_input_device() {
  input_device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AudioThreadData::input_device() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.input_device)
  return input_device_.GetNoArena();
}
inline void AudioThreadData::set_input_device(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  input_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.input_device)
}
inline void AudioThreadData::set_input_device(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  input_device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioThreadData.input_device)
}
inline void AudioThreadData::set_input_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  input_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioThreadData.input_device)
}
inline void AudioThreadData::set_input_device(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  input_device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioThreadData.input_device)
}
inline std::string* AudioThreadData::mutable_input_device() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioThreadData.input_device)
  return input_device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioThreadData::release_input_device() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioThreadData.input_device)
  if (!has_input_device()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return input_device_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioThreadData::set_allocated_input_device(std::string* input_device) {
  if (input_device != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  input_device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_device);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioThreadData.input_device)
}

// optional double io_jitter_mean_millis = 19;
inline bool AudioThreadData::has_io_jitter_mean_millis() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AudioThreadData::clear_io_jitter_mean_millis() {
  io_jitter_mean_millis_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double AudioThreadData::io_jitter_mean_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.io_jitter_mean_millis)
  return io_jitter_mean_millis_;
}
inline void AudioThreadData::set_io_jitter_mean_millis(double value) {
  _has_bits_[0] |= 0x00040000u;
  io_jitter_mean_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.io_jitter_mean_millis)
}

// optional double io_jitter_stddev_millis = 20;
inline bool AudioThreadData::has_io_jitter_stddev_millis() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AudioThreadData::clear_io_jitter_stddev_millis() {
  io_jitter_stddev_millis_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double AudioThreadData::io_jitter_stddev_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.io_jitter_stddev_millis)
  return io_jitter_stddev_millis_;
}
inline void AudioThreadData::set_io_jitter_stddev_millis(double value) {
  _has_bits_[0] |= 0x00080000u;
  io_jitter_stddev_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.io_jitter_stddev_millis)
}

// optional double process_time_mean_millis = 21;
inline bool AudioThreadData::has_process_time_mean_millis() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AudioThreadData::clear_process_time_mean_millis() {
  process_time_mean_millis_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double AudioThreadData::process_time_mean_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.process_time_mean_millis)
  return process_time_mean_millis_;
}
inline void AudioThreadData::set_process_time_mean_millis(double value) {
  _has_bits_[0] |= 0x00100000u;
  process_time_mean_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.process_time_mean_millis)
}

// optional double process_time_stddev_millis = 22;
inline bool AudioThreadData::has_process_time_stddev_millis() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AudioThreadData::clear_process_time_stddev_millis() {
  process_time_stddev_millis_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double AudioThreadData::process_time_stddev_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.process_time_stddev_millis)
  return process_time_stddev_millis_;
}
inline void AudioThreadData::set_process_time_stddev_millis(double value) {
  _has_bits_[0] |= 0x00200000u;
  process_time_stddev_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.process_time_stddev_millis)
}

// optional double timestamp_jitter_mean_millis = 23;
inline bool AudioThreadData::has_timestamp_jitter_mean_millis() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void AudioThreadData::clear_timestamp_jitter_mean_millis() {
  timestamp_jitter_mean_millis_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double AudioThreadData::timestamp_jitter_mean_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.timestamp_jitter_mean_millis)
  return timestamp_jitter_mean_millis_;
}
inline void AudioThreadData::set_timestamp_jitter_mean_millis(double value) {
  _has_bits_[0] |= 0x00400000u;
  timestamp_jitter_mean_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.timestamp_jitter_mean_millis)
}

// optional double timestamp_jitter_stddev_millis = 24;
inline bool AudioThreadData::has_timestamp_jitter_stddev_millis() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void AudioThreadData::clear_timestamp_jitter_stddev_millis() {
  timestamp_jitter_stddev_millis_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double AudioThreadData::timestamp_jitter_stddev_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.timestamp_jitter_stddev_millis)
  return timestamp_jitter_stddev_millis_;
}
inline void AudioThreadData::set_timestamp_jitter_stddev_millis(double value) {
  _has_bits_[0] |= 0x00800000u;
  timestamp_jitter_stddev_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.timestamp_jitter_stddev_millis)
}

// optional double latency_mean_millis = 25;
inline bool AudioThreadData::has_latency_mean_millis() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void AudioThreadData::clear_latency_mean_millis() {
  latency_mean_millis_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double AudioThreadData::latency_mean_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.latency_mean_millis)
  return latency_mean_millis_;
}
inline void AudioThreadData::set_latency_mean_millis(double value) {
  _has_bits_[0] |= 0x01000000u;
  latency_mean_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.latency_mean_millis)
}

// optional double latency_stddev_millis = 26;
inline bool AudioThreadData::has_latency_stddev_millis() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void AudioThreadData::clear_latency_stddev_millis() {
  latency_stddev_millis_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double AudioThreadData::latency_stddev_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioThreadData.latency_stddev_millis)
  return latency_stddev_millis_;
}
inline void AudioThreadData::set_latency_stddev_millis(double value) {
  _has_bits_[0] |= 0x02000000u;
  latency_stddev_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioThreadData.latency_stddev_millis)
}

// -------------------------------------------------------------------

// AudioTrackData

// optional string stream_type = 1;
inline bool AudioTrackData::has_stream_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioTrackData::clear_stream_type() {
  stream_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AudioTrackData::stream_type() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.stream_type)
  return stream_type_.GetNoArena();
}
inline void AudioTrackData::set_stream_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stream_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.stream_type)
}
inline void AudioTrackData::set_stream_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stream_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioTrackData.stream_type)
}
inline void AudioTrackData::set_stream_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stream_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioTrackData.stream_type)
}
inline void AudioTrackData::set_stream_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stream_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioTrackData.stream_type)
}
inline std::string* AudioTrackData::mutable_stream_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioTrackData.stream_type)
  return stream_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioTrackData::release_stream_type() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioTrackData.stream_type)
  if (!has_stream_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stream_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioTrackData::set_allocated_stream_type(std::string* stream_type) {
  if (stream_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stream_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_type);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioTrackData.stream_type)
}

// optional string content_type = 2;
inline bool AudioTrackData::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioTrackData::clear_content_type() {
  content_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AudioTrackData::content_type() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.content_type)
  return content_type_.GetNoArena();
}
inline void AudioTrackData::set_content_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.content_type)
}
inline void AudioTrackData::set_content_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  content_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioTrackData.content_type)
}
inline void AudioTrackData::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  content_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioTrackData.content_type)
}
inline void AudioTrackData::set_content_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  content_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioTrackData.content_type)
}
inline std::string* AudioTrackData::mutable_content_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioTrackData.content_type)
  return content_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioTrackData::release_content_type() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioTrackData.content_type)
  if (!has_content_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return content_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioTrackData::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioTrackData.content_type)
}

// optional string track_usage = 3;
inline bool AudioTrackData::has_track_usage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioTrackData::clear_track_usage() {
  track_usage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AudioTrackData::track_usage() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.track_usage)
  return track_usage_.GetNoArena();
}
inline void AudioTrackData::set_track_usage(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  track_usage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.track_usage)
}
inline void AudioTrackData::set_track_usage(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  track_usage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioTrackData.track_usage)
}
inline void AudioTrackData::set_track_usage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  track_usage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioTrackData.track_usage)
}
inline void AudioTrackData::set_track_usage(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  track_usage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioTrackData.track_usage)
}
inline std::string* AudioTrackData::mutable_track_usage() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioTrackData.track_usage)
  return track_usage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioTrackData::release_track_usage() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioTrackData.track_usage)
  if (!has_track_usage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return track_usage_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioTrackData::set_allocated_track_usage(std::string* track_usage) {
  if (track_usage != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  track_usage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_usage);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioTrackData.track_usage)
}

// optional int32 sample_rate = 4;
inline bool AudioTrackData::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AudioTrackData::clear_sample_rate() {
  sample_rate_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioTrackData::sample_rate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.sample_rate)
  return sample_rate_;
}
inline void AudioTrackData::set_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.sample_rate)
}

// optional int64 channel_mask = 5;
inline bool AudioTrackData::has_channel_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioTrackData::clear_channel_mask() {
  channel_mask_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AudioTrackData::channel_mask() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.channel_mask)
  return channel_mask_;
}
inline void AudioTrackData::set_channel_mask(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  channel_mask_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.channel_mask)
}

// optional int32 underrun_frames = 6;
inline bool AudioTrackData::has_underrun_frames() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AudioTrackData::clear_underrun_frames() {
  underrun_frames_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioTrackData::underrun_frames() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.underrun_frames)
  return underrun_frames_;
}
inline void AudioTrackData::set_underrun_frames(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  underrun_frames_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.underrun_frames)
}

// optional int32 startup_glitch = 7;
inline bool AudioTrackData::has_startup_glitch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AudioTrackData::clear_startup_glitch() {
  startup_glitch_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioTrackData::startup_glitch() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.startup_glitch)
  return startup_glitch_;
}
inline void AudioTrackData::set_startup_glitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  startup_glitch_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.startup_glitch)
}

// optional int32 port_id = 8;
inline bool AudioTrackData::has_port_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AudioTrackData::clear_port_id() {
  port_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioTrackData::port_id() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.port_id)
  return port_id_;
}
inline void AudioTrackData::set_port_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  port_id_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.port_id)
}

// optional string encoding = 9;
inline bool AudioTrackData::has_encoding() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioTrackData::clear_encoding() {
  encoding_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AudioTrackData::encoding() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.encoding)
  return encoding_.GetNoArena();
}
inline void AudioTrackData::set_encoding(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.encoding)
}
inline void AudioTrackData::set_encoding(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  encoding_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioTrackData.encoding)
}
inline void AudioTrackData::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioTrackData.encoding)
}
inline void AudioTrackData::set_encoding(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  encoding_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioTrackData.encoding)
}
inline std::string* AudioTrackData::mutable_encoding() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioTrackData.encoding)
  return encoding_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioTrackData::release_encoding() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioTrackData.encoding)
  if (!has_encoding()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return encoding_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioTrackData::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  encoding_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioTrackData.encoding)
}

// optional int32 frame_count = 10;
inline bool AudioTrackData::has_frame_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AudioTrackData::clear_frame_count() {
  frame_count_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioTrackData::frame_count() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.frame_count)
  return frame_count_;
}
inline void AudioTrackData::set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  frame_count_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.frame_count)
}

// optional string attributes = 11;
inline bool AudioTrackData::has_attributes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioTrackData::clear_attributes() {
  attributes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AudioTrackData::attributes() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.AudioTrackData.attributes)
  return attributes_.GetNoArena();
}
inline void AudioTrackData::set_attributes(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  attributes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.AudioTrackData.attributes)
}
inline void AudioTrackData::set_attributes(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  attributes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.AudioTrackData.attributes)
}
inline void AudioTrackData::set_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  attributes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.AudioTrackData.attributes)
}
inline void AudioTrackData::set_attributes(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  attributes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.AudioTrackData.attributes)
}
inline std::string* AudioTrackData::mutable_attributes() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.AudioTrackData.attributes)
  return attributes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AudioTrackData::release_attributes() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.AudioTrackData.attributes)
  if (!has_attributes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return attributes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AudioTrackData::set_allocated_attributes(std::string* attributes) {
  if (attributes != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  attributes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attributes);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.AudioTrackData.attributes)
}

// -------------------------------------------------------------------

// CodecData

// optional string codec = 1;
inline bool CodecData::has_codec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CodecData::clear_codec() {
  codec_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CodecData::codec() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.codec)
  return codec_.GetNoArena();
}
inline void CodecData::set_codec(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.codec)
}
inline void CodecData::set_codec(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  codec_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.CodecData.codec)
}
inline void CodecData::set_codec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.CodecData.codec)
}
inline void CodecData::set_codec(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.CodecData.codec)
}
inline std::string* CodecData::mutable_codec() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.CodecData.codec)
  return codec_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CodecData::release_codec() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.CodecData.codec)
  if (!has_codec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return codec_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CodecData::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  codec_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.CodecData.codec)
}

// optional string mime = 2;
inline bool CodecData::has_mime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CodecData::clear_mime() {
  mime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CodecData::mime() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.mime)
  return mime_.GetNoArena();
}
inline void CodecData::set_mime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.mime)
}
inline void CodecData::set_mime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.CodecData.mime)
}
inline void CodecData::set_mime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.CodecData.mime)
}
inline void CodecData::set_mime(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.CodecData.mime)
}
inline std::string* CodecData::mutable_mime() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.CodecData.mime)
  return mime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CodecData::release_mime() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.CodecData.mime)
  if (!has_mime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mime_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CodecData::set_allocated_mime(std::string* mime) {
  if (mime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.CodecData.mime)
}

// optional string mode = 3;
inline bool CodecData::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CodecData::clear_mode() {
  mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CodecData::mode() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.mode)
  return mode_.GetNoArena();
}
inline void CodecData::set_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.mode)
}
inline void CodecData::set_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  mode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.CodecData.mode)
}
inline void CodecData::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.CodecData.mode)
}
inline void CodecData::set_mode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.CodecData.mode)
}
inline std::string* CodecData::mutable_mode() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.CodecData.mode)
  return mode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CodecData::release_mode() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.CodecData.mode)
  if (!has_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return mode_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CodecData::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.CodecData.mode)
}

// optional int32 encoder = 4;
inline bool CodecData::has_encoder() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CodecData::clear_encoder() {
  encoder_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::encoder() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.encoder)
  return encoder_;
}
inline void CodecData::set_encoder(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  encoder_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.encoder)
}

// optional int32 secure = 5;
inline bool CodecData::has_secure() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CodecData::clear_secure() {
  secure_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::secure() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.secure)
  return secure_;
}
inline void CodecData::set_secure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  secure_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.secure)
}

// optional int32 width = 6;
inline bool CodecData::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CodecData::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::width() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.width)
  return width_;
}
inline void CodecData::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  width_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.width)
}

// optional int32 height = 7;
inline bool CodecData::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CodecData::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::height() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.height)
  return height_;
}
inline void CodecData::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.height)
}

// optional int32 rotation = 8;
inline bool CodecData::has_rotation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CodecData::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::rotation() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.rotation)
  return rotation_;
}
inline void CodecData::set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  rotation_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.rotation)
}

// optional int32 crypto = 9;
inline bool CodecData::has_crypto() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CodecData::clear_crypto() {
  crypto_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::crypto() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.crypto)
  return crypto_;
}
inline void CodecData::set_crypto(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  crypto_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.crypto)
}

// optional int32 profile = 10;
inline bool CodecData::has_profile() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CodecData::clear_profile() {
  profile_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::profile() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.profile)
  return profile_;
}
inline void CodecData::set_profile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  profile_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.profile)
}

// optional int32 level = 11;
inline bool CodecData::has_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CodecData::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::level() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.level)
  return level_;
}
inline void CodecData::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  level_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.level)
}

// optional int32 max_width = 12;
inline bool CodecData::has_max_width() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CodecData::clear_max_width() {
  max_width_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::max_width() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.max_width)
  return max_width_;
}
inline void CodecData::set_max_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  max_width_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.max_width)
}

// optional int32 max_height = 13;
inline bool CodecData::has_max_height() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CodecData::clear_max_height() {
  max_height_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::max_height() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.max_height)
  return max_height_;
}
inline void CodecData::set_max_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  max_height_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.max_height)
}

// optional int32 error_code = 14;
inline bool CodecData::has_error_code() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CodecData::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::error_code() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.error_code)
  return error_code_;
}
inline void CodecData::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.error_code)
}

// optional string error_state = 15;
inline bool CodecData::has_error_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CodecData::clear_error_state() {
  error_state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CodecData::error_state() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.error_state)
  return error_state_.GetNoArena();
}
inline void CodecData::set_error_state(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  error_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.error_state)
}
inline void CodecData::set_error_state(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  error_state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.CodecData.error_state)
}
inline void CodecData::set_error_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  error_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.CodecData.error_state)
}
inline void CodecData::set_error_state(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  error_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.CodecData.error_state)
}
inline std::string* CodecData::mutable_error_state() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.CodecData.error_state)
  return error_state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CodecData::release_error_state() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.CodecData.error_state)
  if (!has_error_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return error_state_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CodecData::set_allocated_error_state(std::string* error_state) {
  if (error_state != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  error_state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_state);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.CodecData.error_state)
}

// optional int64 latency_max = 16;
inline bool CodecData::has_latency_max() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CodecData::clear_latency_max() {
  latency_max_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::latency_max() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.latency_max)
  return latency_max_;
}
inline void CodecData::set_latency_max(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  latency_max_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.latency_max)
}

// optional int64 latency_min = 17;
inline bool CodecData::has_latency_min() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CodecData::clear_latency_min() {
  latency_min_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::latency_min() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.latency_min)
  return latency_min_;
}
inline void CodecData::set_latency_min(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  latency_min_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.latency_min)
}

// optional int64 latency_avg = 18;
inline bool CodecData::has_latency_avg() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CodecData::clear_latency_avg() {
  latency_avg_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::latency_avg() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.latency_avg)
  return latency_avg_;
}
inline void CodecData::set_latency_avg(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  latency_avg_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.latency_avg)
}

// optional int64 latency_count = 19;
inline bool CodecData::has_latency_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CodecData::clear_latency_count() {
  latency_count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::latency_count() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.latency_count)
  return latency_count_;
}
inline void CodecData::set_latency_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00200000u;
  latency_count_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.latency_count)
}

// optional int64 latency_unknown = 20;
inline bool CodecData::has_latency_unknown() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CodecData::clear_latency_unknown() {
  latency_unknown_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::latency_unknown() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.latency_unknown)
  return latency_unknown_;
}
inline void CodecData::set_latency_unknown(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00400000u;
  latency_unknown_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.latency_unknown)
}

// optional int32 queue_input_buffer_error = 21;
inline bool CodecData::has_queue_input_buffer_error() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CodecData::clear_queue_input_buffer_error() {
  queue_input_buffer_error_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::queue_input_buffer_error() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.queue_input_buffer_error)
  return queue_input_buffer_error_;
}
inline void CodecData::set_queue_input_buffer_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  queue_input_buffer_error_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.queue_input_buffer_error)
}

// optional int32 queue_secure_input_buffer_error = 22;
inline bool CodecData::has_queue_secure_input_buffer_error() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CodecData::clear_queue_secure_input_buffer_error() {
  queue_secure_input_buffer_error_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::queue_secure_input_buffer_error() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.queue_secure_input_buffer_error)
  return queue_secure_input_buffer_error_;
}
inline void CodecData::set_queue_secure_input_buffer_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  queue_secure_input_buffer_error_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.queue_secure_input_buffer_error)
}

// optional string bitrate_mode = 23;
inline bool CodecData::has_bitrate_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CodecData::clear_bitrate_mode() {
  bitrate_mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CodecData::bitrate_mode() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.bitrate_mode)
  return bitrate_mode_.GetNoArena();
}
inline void CodecData::set_bitrate_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bitrate_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.bitrate_mode)
}
inline void CodecData::set_bitrate_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  bitrate_mode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.CodecData.bitrate_mode)
}
inline void CodecData::set_bitrate_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  bitrate_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.CodecData.bitrate_mode)
}
inline void CodecData::set_bitrate_mode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  bitrate_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.CodecData.bitrate_mode)
}
inline std::string* CodecData::mutable_bitrate_mode() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.CodecData.bitrate_mode)
  return bitrate_mode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CodecData::release_bitrate_mode() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.CodecData.bitrate_mode)
  if (!has_bitrate_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return bitrate_mode_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CodecData::set_allocated_bitrate_mode(std::string* bitrate_mode) {
  if (bitrate_mode != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bitrate_mode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitrate_mode);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.CodecData.bitrate_mode)
}

// optional int32 bitrate = 24;
inline bool CodecData::has_bitrate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CodecData::clear_bitrate() {
  bitrate_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::bitrate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.bitrate)
  return bitrate_;
}
inline void CodecData::set_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.bitrate)
}

// optional int64 lifetime_millis = 25;
inline bool CodecData::has_lifetime_millis() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CodecData::clear_lifetime_millis() {
  lifetime_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::lifetime_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.lifetime_millis)
  return lifetime_millis_;
}
inline void CodecData::set_lifetime_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x02000000u;
  lifetime_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.lifetime_millis)
}

// optional string log_session_id = 26;
inline bool CodecData::has_log_session_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CodecData::clear_log_session_id() {
  log_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CodecData::log_session_id() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.log_session_id)
  return log_session_id_.GetNoArena();
}
inline void CodecData::set_log_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.log_session_id)
}
inline void CodecData::set_log_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  log_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.CodecData.log_session_id)
}
inline void CodecData::set_log_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.CodecData.log_session_id)
}
inline void CodecData::set_log_session_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.CodecData.log_session_id)
}
inline std::string* CodecData::mutable_log_session_id() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.CodecData.log_session_id)
  return log_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CodecData::release_log_session_id() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.CodecData.log_session_id)
  if (!has_log_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return log_session_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CodecData::set_allocated_log_session_id(std::string* log_session_id) {
  if (log_session_id != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  log_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_session_id);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.CodecData.log_session_id)
}

// optional int32 channel_count = 27;
inline bool CodecData::has_channel_count() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CodecData::clear_channel_count() {
  channel_count_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::channel_count() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.channel_count)
  return channel_count_;
}
inline void CodecData::set_channel_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  channel_count_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.channel_count)
}

// optional int32 sample_rate = 28;
inline bool CodecData::has_sample_rate() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CodecData::clear_sample_rate() {
  sample_rate_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::sample_rate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.sample_rate)
  return sample_rate_;
}
inline void CodecData::set_sample_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.sample_rate)
}

// optional int64 video_encode_bytes = 29;
inline bool CodecData::has_video_encode_bytes() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CodecData::clear_video_encode_bytes() {
  video_encode_bytes_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::video_encode_bytes() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_encode_bytes)
  return video_encode_bytes_;
}
inline void CodecData::set_video_encode_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x10000000u;
  video_encode_bytes_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_encode_bytes)
}

// optional int64 video_encode_frames = 30;
inline bool CodecData::has_video_encode_frames() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CodecData::clear_video_encode_frames() {
  video_encode_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::video_encode_frames() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_encode_frames)
  return video_encode_frames_;
}
inline void CodecData::set_video_encode_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x20000000u;
  video_encode_frames_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_encode_frames)
}

// optional int64 video_input_bytes = 31;
inline bool CodecData::has_video_input_bytes() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CodecData::clear_video_input_bytes() {
  video_input_bytes_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::video_input_bytes() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_input_bytes)
  return video_input_bytes_;
}
inline void CodecData::set_video_input_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x40000000u;
  video_input_bytes_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_input_bytes)
}

// optional int64 video_input_frames = 32;
inline bool CodecData::has_video_input_frames() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CodecData::clear_video_input_frames() {
  video_input_frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::video_input_frames() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_input_frames)
  return video_input_frames_;
}
inline void CodecData::set_video_input_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x80000000u;
  video_input_frames_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_input_frames)
}

// optional int64 video_encode_duration_us = 33;
inline bool CodecData::has_video_encode_duration_us() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CodecData::clear_video_encode_duration_us() {
  video_encode_duration_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CodecData::video_encode_duration_us() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_encode_duration_us)
  return video_encode_duration_us_;
}
inline void CodecData::set_video_encode_duration_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[1] |= 0x00000001u;
  video_encode_duration_us_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_encode_duration_us)
}

// optional int32 color_format = 34;
inline bool CodecData::has_color_format() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CodecData::clear_color_format() {
  color_format_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::color_format() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.color_format)
  return color_format_;
}
inline void CodecData::set_color_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  color_format_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.color_format)
}

// optional double frame_rate = 35;
inline bool CodecData::has_frame_rate() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CodecData::clear_frame_rate() {
  frame_rate_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline double CodecData::frame_rate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.frame_rate)
  return frame_rate_;
}
inline void CodecData::set_frame_rate(double value) {
  _has_bits_[1] |= 0x00000002u;
  frame_rate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.frame_rate)
}

// optional double capture_rate = 36;
inline bool CodecData::has_capture_rate() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CodecData::clear_capture_rate() {
  capture_rate_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline double CodecData::capture_rate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.capture_rate)
  return capture_rate_;
}
inline void CodecData::set_capture_rate(double value) {
  _has_bits_[1] |= 0x00000004u;
  capture_rate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.capture_rate)
}

// optional double operating_rate = 37;
inline bool CodecData::has_operating_rate() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CodecData::clear_operating_rate() {
  operating_rate_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline double CodecData::operating_rate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.operating_rate)
  return operating_rate_;
}
inline void CodecData::set_operating_rate(double value) {
  _has_bits_[1] |= 0x00000020u;
  operating_rate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.operating_rate)
}

// optional int32 priority = 38;
inline bool CodecData::has_priority() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CodecData::clear_priority() {
  priority_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::priority() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.priority)
  return priority_;
}
inline void CodecData::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.priority)
}

// optional int32 video_qp_i_min = 39;
inline bool CodecData::has_video_qp_i_min() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CodecData::clear_video_qp_i_min() {
  video_qp_i_min_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::video_qp_i_min() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_qp_i_min)
  return video_qp_i_min_;
}
inline void CodecData::set_video_qp_i_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  video_qp_i_min_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_qp_i_min)
}

// optional int32 video_qp_i_max = 40;
inline bool CodecData::has_video_qp_i_max() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CodecData::clear_video_qp_i_max() {
  video_qp_i_max_ = 0;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::video_qp_i_max() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_qp_i_max)
  return video_qp_i_max_;
}
inline void CodecData::set_video_qp_i_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000080u;
  video_qp_i_max_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_qp_i_max)
}

// optional int32 video_qp_p_min = 41;
inline bool CodecData::has_video_qp_p_min() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CodecData::clear_video_qp_p_min() {
  video_qp_p_min_ = 0;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::video_qp_p_min() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_qp_p_min)
  return video_qp_p_min_;
}
inline void CodecData::set_video_qp_p_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000100u;
  video_qp_p_min_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_qp_p_min)
}

// optional int32 video_qp_p_max = 42;
inline bool CodecData::has_video_qp_p_max() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CodecData::clear_video_qp_p_max() {
  video_qp_p_max_ = 0;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::video_qp_p_max() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_qp_p_max)
  return video_qp_p_max_;
}
inline void CodecData::set_video_qp_p_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000200u;
  video_qp_p_max_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_qp_p_max)
}

// optional int32 video_qp_b_min = 43;
inline bool CodecData::has_video_qp_b_min() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CodecData::clear_video_qp_b_min() {
  video_qp_b_min_ = 0;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::video_qp_b_min() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_qp_b_min)
  return video_qp_b_min_;
}
inline void CodecData::set_video_qp_b_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000400u;
  video_qp_b_min_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_qp_b_min)
}

// optional int32 video_qp_b_max = 44;
inline bool CodecData::has_video_qp_b_max() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CodecData::clear_video_qp_b_max() {
  video_qp_b_max_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::video_qp_b_max() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.video_qp_b_max)
  return video_qp_b_max_;
}
inline void CodecData::set_video_qp_b_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000800u;
  video_qp_b_max_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.video_qp_b_max)
}

// optional int32 original_bitrate = 45;
inline bool CodecData::has_original_bitrate() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CodecData::clear_original_bitrate() {
  original_bitrate_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::original_bitrate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.original_bitrate)
  return original_bitrate_;
}
inline void CodecData::set_original_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00001000u;
  original_bitrate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.original_bitrate)
}

// optional int32 shaping_enhanced = 46;
inline bool CodecData::has_shaping_enhanced() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CodecData::clear_shaping_enhanced() {
  shaping_enhanced_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::shaping_enhanced() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.shaping_enhanced)
  return shaping_enhanced_;
}
inline void CodecData::set_shaping_enhanced(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00002000u;
  shaping_enhanced_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.shaping_enhanced)
}

// optional int32 original_video_qp_i_min = 47;
inline bool CodecData::has_original_video_qp_i_min() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CodecData::clear_original_video_qp_i_min() {
  original_video_qp_i_min_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::original_video_qp_i_min() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.original_video_qp_i_min)
  return original_video_qp_i_min_;
}
inline void CodecData::set_original_video_qp_i_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00004000u;
  original_video_qp_i_min_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.original_video_qp_i_min)
}

// optional int32 original_video_qp_i_max = 48;
inline bool CodecData::has_original_video_qp_i_max() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CodecData::clear_original_video_qp_i_max() {
  original_video_qp_i_max_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::original_video_qp_i_max() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.original_video_qp_i_max)
  return original_video_qp_i_max_;
}
inline void CodecData::set_original_video_qp_i_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00008000u;
  original_video_qp_i_max_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.original_video_qp_i_max)
}

// optional int32 original_video_qp_p_min = 49;
inline bool CodecData::has_original_video_qp_p_min() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CodecData::clear_original_video_qp_p_min() {
  original_video_qp_p_min_ = 0;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::original_video_qp_p_min() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.original_video_qp_p_min)
  return original_video_qp_p_min_;
}
inline void CodecData::set_original_video_qp_p_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00010000u;
  original_video_qp_p_min_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.original_video_qp_p_min)
}

// optional int32 original_video_qp_p_max = 50;
inline bool CodecData::has_original_video_qp_p_max() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CodecData::clear_original_video_qp_p_max() {
  original_video_qp_p_max_ = 0;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::original_video_qp_p_max() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.original_video_qp_p_max)
  return original_video_qp_p_max_;
}
inline void CodecData::set_original_video_qp_p_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00020000u;
  original_video_qp_p_max_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.original_video_qp_p_max)
}

// optional int32 original_video_qp_b_min = 51;
inline bool CodecData::has_original_video_qp_b_min() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CodecData::clear_original_video_qp_b_min() {
  original_video_qp_b_min_ = 0;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::original_video_qp_b_min() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.original_video_qp_b_min)
  return original_video_qp_b_min_;
}
inline void CodecData::set_original_video_qp_b_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00040000u;
  original_video_qp_b_min_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.original_video_qp_b_min)
}

// optional int32 original_video_qp_b_max = 52;
inline bool CodecData::has_original_video_qp_b_max() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CodecData::clear_original_video_qp_b_max() {
  original_video_qp_b_max_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CodecData::original_video_qp_b_max() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.CodecData.original_video_qp_b_max)
  return original_video_qp_b_max_;
}
inline void CodecData::set_original_video_qp_b_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00080000u;
  original_video_qp_b_max_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.CodecData.original_video_qp_b_max)
}

// -------------------------------------------------------------------

// ExtractorData

// optional string format = 1;
inline bool ExtractorData::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtractorData::clear_format() {
  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtractorData::format() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.ExtractorData.format)
  return format_.GetNoArena();
}
inline void ExtractorData::set_format(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.ExtractorData.format)
}
inline void ExtractorData::set_format(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.ExtractorData.format)
}
inline void ExtractorData::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.ExtractorData.format)
}
inline void ExtractorData::set_format(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.ExtractorData.format)
}
inline std::string* ExtractorData::mutable_format() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.ExtractorData.format)
  return format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtractorData::release_format() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.ExtractorData.format)
  if (!has_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return format_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtractorData::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.ExtractorData.format)
}

// optional string mime = 2;
inline bool ExtractorData::has_mime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtractorData::clear_mime() {
  mime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExtractorData::mime() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.ExtractorData.mime)
  return mime_.GetNoArena();
}
inline void ExtractorData::set_mime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.ExtractorData.mime)
}
inline void ExtractorData::set_mime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.ExtractorData.mime)
}
inline void ExtractorData::set_mime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.ExtractorData.mime)
}
inline void ExtractorData::set_mime(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.ExtractorData.mime)
}
inline std::string* ExtractorData::mutable_mime() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.ExtractorData.mime)
  return mime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtractorData::release_mime() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.ExtractorData.mime)
  if (!has_mime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mime_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtractorData::set_allocated_mime(std::string* mime) {
  if (mime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.ExtractorData.mime)
}

// optional int32 tracks = 3;
inline bool ExtractorData::has_tracks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtractorData::clear_tracks() {
  tracks_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtractorData::tracks() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.ExtractorData.tracks)
  return tracks_;
}
inline void ExtractorData::set_tracks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  tracks_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.ExtractorData.tracks)
}

// optional .android.stats.mediametrics_message.ExtractorData.EntryPoint entry_point = 4 [default = UNSET];
inline bool ExtractorData::has_entry_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtractorData::clear_entry_point() {
  entry_point_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::stats::mediametrics_message::ExtractorData_EntryPoint ExtractorData::entry_point() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.ExtractorData.entry_point)
  return static_cast< ::android::stats::mediametrics_message::ExtractorData_EntryPoint >(entry_point_);
}
inline void ExtractorData::set_entry_point(::android::stats::mediametrics_message::ExtractorData_EntryPoint value) {
  assert(::android::stats::mediametrics_message::ExtractorData_EntryPoint_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  entry_point_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.ExtractorData.entry_point)
}

// optional string log_session_id = 5;
inline bool ExtractorData::has_log_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtractorData::clear_log_session_id() {
  log_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ExtractorData::log_session_id() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.ExtractorData.log_session_id)
  return log_session_id_.GetNoArena();
}
inline void ExtractorData::set_log_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.ExtractorData.log_session_id)
}
inline void ExtractorData::set_log_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  log_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.ExtractorData.log_session_id)
}
inline void ExtractorData::set_log_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.ExtractorData.log_session_id)
}
inline void ExtractorData::set_log_session_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.ExtractorData.log_session_id)
}
inline std::string* ExtractorData::mutable_log_session_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.ExtractorData.log_session_id)
  return log_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtractorData::release_log_session_id() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.ExtractorData.log_session_id)
  if (!has_log_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return log_session_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtractorData::set_allocated_log_session_id(std::string* log_session_id) {
  if (log_session_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  log_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_session_id);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.ExtractorData.log_session_id)
}

// -------------------------------------------------------------------

// NuPlayerData

// optional string whichPlayer = 1;
inline bool NuPlayerData::has_whichplayer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NuPlayerData::clear_whichplayer() {
  whichplayer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NuPlayerData::whichplayer() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.whichPlayer)
  return whichplayer_.GetNoArena();
}
inline void NuPlayerData::set_whichplayer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  whichplayer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.whichPlayer)
}
inline void NuPlayerData::set_whichplayer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  whichplayer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.NuPlayerData.whichPlayer)
}
inline void NuPlayerData::set_whichplayer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  whichplayer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.NuPlayerData.whichPlayer)
}
inline void NuPlayerData::set_whichplayer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  whichplayer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.NuPlayerData.whichPlayer)
}
inline std::string* NuPlayerData::mutable_whichplayer() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.NuPlayerData.whichPlayer)
  return whichplayer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NuPlayerData::release_whichplayer() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.NuPlayerData.whichPlayer)
  if (!has_whichplayer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return whichplayer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NuPlayerData::set_allocated_whichplayer(std::string* whichplayer) {
  if (whichplayer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  whichplayer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), whichplayer);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.NuPlayerData.whichPlayer)
}

// optional string video_mime = 2;
inline bool NuPlayerData::has_video_mime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NuPlayerData::clear_video_mime() {
  video_mime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NuPlayerData::video_mime() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.video_mime)
  return video_mime_.GetNoArena();
}
inline void NuPlayerData::set_video_mime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  video_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.video_mime)
}
inline void NuPlayerData::set_video_mime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  video_mime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.NuPlayerData.video_mime)
}
inline void NuPlayerData::set_video_mime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  video_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.NuPlayerData.video_mime)
}
inline void NuPlayerData::set_video_mime(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  video_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.NuPlayerData.video_mime)
}
inline std::string* NuPlayerData::mutable_video_mime() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.NuPlayerData.video_mime)
  return video_mime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NuPlayerData::release_video_mime() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.NuPlayerData.video_mime)
  if (!has_video_mime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return video_mime_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NuPlayerData::set_allocated_video_mime(std::string* video_mime) {
  if (video_mime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  video_mime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_mime);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.NuPlayerData.video_mime)
}

// optional string video_codec = 3;
inline bool NuPlayerData::has_video_codec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NuPlayerData::clear_video_codec() {
  video_codec_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NuPlayerData::video_codec() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.video_codec)
  return video_codec_.GetNoArena();
}
inline void NuPlayerData::set_video_codec(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  video_codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.video_codec)
}
inline void NuPlayerData::set_video_codec(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  video_codec_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.NuPlayerData.video_codec)
}
inline void NuPlayerData::set_video_codec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  video_codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.NuPlayerData.video_codec)
}
inline void NuPlayerData::set_video_codec(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  video_codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.NuPlayerData.video_codec)
}
inline std::string* NuPlayerData::mutable_video_codec() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.NuPlayerData.video_codec)
  return video_codec_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NuPlayerData::release_video_codec() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.NuPlayerData.video_codec)
  if (!has_video_codec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return video_codec_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NuPlayerData::set_allocated_video_codec(std::string* video_codec) {
  if (video_codec != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  video_codec_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_codec);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.NuPlayerData.video_codec)
}

// optional int32 width = 4;
inline bool NuPlayerData::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NuPlayerData::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NuPlayerData::width() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.width)
  return width_;
}
inline void NuPlayerData::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  width_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.width)
}

// optional int32 height = 5;
inline bool NuPlayerData::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NuPlayerData::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NuPlayerData::height() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.height)
  return height_;
}
inline void NuPlayerData::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  height_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.height)
}

// optional int64 frames = 6;
inline bool NuPlayerData::has_frames() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NuPlayerData::clear_frames() {
  frames_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NuPlayerData::frames() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.frames)
  return frames_;
}
inline void NuPlayerData::set_frames(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  frames_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.frames)
}

// optional int64 frames_dropped = 7;
inline bool NuPlayerData::has_frames_dropped() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NuPlayerData::clear_frames_dropped() {
  frames_dropped_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NuPlayerData::frames_dropped() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.frames_dropped)
  return frames_dropped_;
}
inline void NuPlayerData::set_frames_dropped(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  frames_dropped_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.frames_dropped)
}

// optional double framerate = 8;
inline bool NuPlayerData::has_framerate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NuPlayerData::clear_framerate() {
  framerate_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double NuPlayerData::framerate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.framerate)
  return framerate_;
}
inline void NuPlayerData::set_framerate(double value) {
  _has_bits_[0] |= 0x00000800u;
  framerate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.framerate)
}

// optional string audio_mime = 9;
inline bool NuPlayerData::has_audio_mime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NuPlayerData::clear_audio_mime() {
  audio_mime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NuPlayerData::audio_mime() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.audio_mime)
  return audio_mime_.GetNoArena();
}
inline void NuPlayerData::set_audio_mime(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  audio_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.audio_mime)
}
inline void NuPlayerData::set_audio_mime(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  audio_mime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.NuPlayerData.audio_mime)
}
inline void NuPlayerData::set_audio_mime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  audio_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.NuPlayerData.audio_mime)
}
inline void NuPlayerData::set_audio_mime(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  audio_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.NuPlayerData.audio_mime)
}
inline std::string* NuPlayerData::mutable_audio_mime() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.NuPlayerData.audio_mime)
  return audio_mime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NuPlayerData::release_audio_mime() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.NuPlayerData.audio_mime)
  if (!has_audio_mime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return audio_mime_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NuPlayerData::set_allocated_audio_mime(std::string* audio_mime) {
  if (audio_mime != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  audio_mime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_mime);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.NuPlayerData.audio_mime)
}

// optional string audio_codec = 10;
inline bool NuPlayerData::has_audio_codec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NuPlayerData::clear_audio_codec() {
  audio_codec_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NuPlayerData::audio_codec() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.audio_codec)
  return audio_codec_.GetNoArena();
}
inline void NuPlayerData::set_audio_codec(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  audio_codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.audio_codec)
}
inline void NuPlayerData::set_audio_codec(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  audio_codec_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.NuPlayerData.audio_codec)
}
inline void NuPlayerData::set_audio_codec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  audio_codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.NuPlayerData.audio_codec)
}
inline void NuPlayerData::set_audio_codec(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  audio_codec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.NuPlayerData.audio_codec)
}
inline std::string* NuPlayerData::mutable_audio_codec() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.NuPlayerData.audio_codec)
  return audio_codec_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NuPlayerData::release_audio_codec() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.NuPlayerData.audio_codec)
  if (!has_audio_codec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return audio_codec_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NuPlayerData::set_allocated_audio_codec(std::string* audio_codec) {
  if (audio_codec != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  audio_codec_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_codec);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.NuPlayerData.audio_codec)
}

// optional int64 duration_millis = 11;
inline bool NuPlayerData::has_duration_millis() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NuPlayerData::clear_duration_millis() {
  duration_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NuPlayerData::duration_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.duration_millis)
  return duration_millis_;
}
inline void NuPlayerData::set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  duration_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.duration_millis)
}

// optional int64 playing_millis = 12;
inline bool NuPlayerData::has_playing_millis() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NuPlayerData::clear_playing_millis() {
  playing_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NuPlayerData::playing_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.playing_millis)
  return playing_millis_;
}
inline void NuPlayerData::set_playing_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  playing_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.playing_millis)
}

// optional int32 error = 13;
inline bool NuPlayerData::has_error() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NuPlayerData::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NuPlayerData::error() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.error)
  return error_;
}
inline void NuPlayerData::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  error_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.error)
}

// optional int32 error_code = 14;
inline bool NuPlayerData::has_error_code() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NuPlayerData::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NuPlayerData::error_code() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.error_code)
  return error_code_;
}
inline void NuPlayerData::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.error_code)
}

// optional string error_state = 15;
inline bool NuPlayerData::has_error_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NuPlayerData::clear_error_state() {
  error_state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NuPlayerData::error_state() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.error_state)
  return error_state_.GetNoArena();
}
inline void NuPlayerData::set_error_state(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  error_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.error_state)
}
inline void NuPlayerData::set_error_state(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  error_state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.NuPlayerData.error_state)
}
inline void NuPlayerData::set_error_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  error_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.NuPlayerData.error_state)
}
inline void NuPlayerData::set_error_state(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  error_state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.NuPlayerData.error_state)
}
inline std::string* NuPlayerData::mutable_error_state() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.NuPlayerData.error_state)
  return error_state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NuPlayerData::release_error_state() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.NuPlayerData.error_state)
  if (!has_error_state()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return error_state_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NuPlayerData::set_allocated_error_state(std::string* error_state) {
  if (error_state != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  error_state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_state);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.NuPlayerData.error_state)
}

// optional string data_source_type = 16;
inline bool NuPlayerData::has_data_source_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NuPlayerData::clear_data_source_type() {
  data_source_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& NuPlayerData::data_source_type() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.data_source_type)
  return data_source_type_.GetNoArena();
}
inline void NuPlayerData::set_data_source_type(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  data_source_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.data_source_type)
}
inline void NuPlayerData::set_data_source_type(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  data_source_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.NuPlayerData.data_source_type)
}
inline void NuPlayerData::set_data_source_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  data_source_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.NuPlayerData.data_source_type)
}
inline void NuPlayerData::set_data_source_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  data_source_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.NuPlayerData.data_source_type)
}
inline std::string* NuPlayerData::mutable_data_source_type() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.NuPlayerData.data_source_type)
  return data_source_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NuPlayerData::release_data_source_type() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.NuPlayerData.data_source_type)
  if (!has_data_source_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return data_source_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NuPlayerData::set_allocated_data_source_type(std::string* data_source_type) {
  if (data_source_type != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  data_source_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_source_type);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.NuPlayerData.data_source_type)
}

// optional int64 rebuffering_millis = 17;
inline bool NuPlayerData::has_rebuffering_millis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NuPlayerData::clear_rebuffering_millis() {
  rebuffering_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NuPlayerData::rebuffering_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.rebuffering_millis)
  return rebuffering_millis_;
}
inline void NuPlayerData::set_rebuffering_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  rebuffering_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.rebuffering_millis)
}

// optional int32 rebuffers = 18;
inline bool NuPlayerData::has_rebuffers() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NuPlayerData::clear_rebuffers() {
  rebuffers_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NuPlayerData::rebuffers() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.rebuffers)
  return rebuffers_;
}
inline void NuPlayerData::set_rebuffers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  rebuffers_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.rebuffers)
}

// optional int32 rebuffer_at_exit = 19;
inline bool NuPlayerData::has_rebuffer_at_exit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NuPlayerData::clear_rebuffer_at_exit() {
  rebuffer_at_exit_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NuPlayerData::rebuffer_at_exit() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.rebuffer_at_exit)
  return rebuffer_at_exit_;
}
inline void NuPlayerData::set_rebuffer_at_exit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  rebuffer_at_exit_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.rebuffer_at_exit)
}

// optional int64 frames_dropped_startup = 20;
inline bool NuPlayerData::has_frames_dropped_startup() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NuPlayerData::clear_frames_dropped_startup() {
  frames_dropped_startup_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NuPlayerData::frames_dropped_startup() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.NuPlayerData.frames_dropped_startup)
  return frames_dropped_startup_;
}
inline void NuPlayerData::set_frames_dropped_startup(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  frames_dropped_startup_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.NuPlayerData.frames_dropped_startup)
}

// -------------------------------------------------------------------

// RecorderData

// optional string audio_mime = 1;
inline bool RecorderData::has_audio_mime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecorderData::clear_audio_mime() {
  audio_mime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecorderData::audio_mime() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.audio_mime)
  return audio_mime_.GetNoArena();
}
inline void RecorderData::set_audio_mime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  audio_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.audio_mime)
}
inline void RecorderData::set_audio_mime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  audio_mime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.RecorderData.audio_mime)
}
inline void RecorderData::set_audio_mime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  audio_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.RecorderData.audio_mime)
}
inline void RecorderData::set_audio_mime(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  audio_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.RecorderData.audio_mime)
}
inline std::string* RecorderData::mutable_audio_mime() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.RecorderData.audio_mime)
  return audio_mime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecorderData::release_audio_mime() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.RecorderData.audio_mime)
  if (!has_audio_mime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return audio_mime_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecorderData::set_allocated_audio_mime(std::string* audio_mime) {
  if (audio_mime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  audio_mime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_mime);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.RecorderData.audio_mime)
}

// optional string video_mime = 2;
inline bool RecorderData::has_video_mime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecorderData::clear_video_mime() {
  video_mime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RecorderData::video_mime() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.video_mime)
  return video_mime_.GetNoArena();
}
inline void RecorderData::set_video_mime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  video_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.video_mime)
}
inline void RecorderData::set_video_mime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  video_mime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.RecorderData.video_mime)
}
inline void RecorderData::set_video_mime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  video_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.RecorderData.video_mime)
}
inline void RecorderData::set_video_mime(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  video_mime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.RecorderData.video_mime)
}
inline std::string* RecorderData::mutable_video_mime() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.RecorderData.video_mime)
  return video_mime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecorderData::release_video_mime() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.RecorderData.video_mime)
  if (!has_video_mime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return video_mime_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecorderData::set_allocated_video_mime(std::string* video_mime) {
  if (video_mime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  video_mime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video_mime);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.RecorderData.video_mime)
}

// optional int32 video_profile = 3;
inline bool RecorderData::has_video_profile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecorderData::clear_video_profile() {
  video_profile_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::video_profile() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.video_profile)
  return video_profile_;
}
inline void RecorderData::set_video_profile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  video_profile_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.video_profile)
}

// optional int32 video_level = 4;
inline bool RecorderData::has_video_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecorderData::clear_video_level() {
  video_level_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::video_level() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.video_level)
  return video_level_;
}
inline void RecorderData::set_video_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  video_level_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.video_level)
}

// optional int32 width = 5;
inline bool RecorderData::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecorderData::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::width() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.width)
  return width_;
}
inline void RecorderData::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  width_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.width)
}

// optional int32 height = 6;
inline bool RecorderData::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecorderData::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::height() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.height)
  return height_;
}
inline void RecorderData::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  height_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.height)
}

// optional int32 rotation = 7;
inline bool RecorderData::has_rotation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecorderData::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::rotation() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.rotation)
  return rotation_;
}
inline void RecorderData::set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  rotation_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.rotation)
}

// optional int32 framerate = 8;
inline bool RecorderData::has_framerate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecorderData::clear_framerate() {
  framerate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::framerate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.framerate)
  return framerate_;
}
inline void RecorderData::set_framerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  framerate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.framerate)
}

// optional int32 capture_fps = 9;
inline bool RecorderData::has_capture_fps() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecorderData::clear_capture_fps() {
  capture_fps_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::capture_fps() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.capture_fps)
  return capture_fps_;
}
inline void RecorderData::set_capture_fps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  capture_fps_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.capture_fps)
}

// optional double capture_fps_enable = 10;
inline bool RecorderData::has_capture_fps_enable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecorderData::clear_capture_fps_enable() {
  capture_fps_enable_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double RecorderData::capture_fps_enable() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.capture_fps_enable)
  return capture_fps_enable_;
}
inline void RecorderData::set_capture_fps_enable(double value) {
  _has_bits_[0] |= 0x00000200u;
  capture_fps_enable_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.capture_fps_enable)
}

// optional int64 duration_millis = 11;
inline bool RecorderData::has_duration_millis() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecorderData::clear_duration_millis() {
  duration_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecorderData::duration_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.duration_millis)
  return duration_millis_;
}
inline void RecorderData::set_duration_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  duration_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.duration_millis)
}

// optional int64 paused_millis = 12;
inline bool RecorderData::has_paused_millis() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RecorderData::clear_paused_millis() {
  paused_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecorderData::paused_millis() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.paused_millis)
  return paused_millis_;
}
inline void RecorderData::set_paused_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  paused_millis_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.paused_millis)
}

// optional int32 paused_count = 13;
inline bool RecorderData::has_paused_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecorderData::clear_paused_count() {
  paused_count_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::paused_count() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.paused_count)
  return paused_count_;
}
inline void RecorderData::set_paused_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  paused_count_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.paused_count)
}

// optional int32 audio_bitrate = 14;
inline bool RecorderData::has_audio_bitrate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RecorderData::clear_audio_bitrate() {
  audio_bitrate_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::audio_bitrate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.audio_bitrate)
  return audio_bitrate_;
}
inline void RecorderData::set_audio_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  audio_bitrate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.audio_bitrate)
}

// optional int32 audio_channels = 15;
inline bool RecorderData::has_audio_channels() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RecorderData::clear_audio_channels() {
  audio_channels_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::audio_channels() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.audio_channels)
  return audio_channels_;
}
inline void RecorderData::set_audio_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  audio_channels_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.audio_channels)
}

// optional int32 audio_samplerate = 16;
inline bool RecorderData::has_audio_samplerate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RecorderData::clear_audio_samplerate() {
  audio_samplerate_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::audio_samplerate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.audio_samplerate)
  return audio_samplerate_;
}
inline void RecorderData::set_audio_samplerate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  audio_samplerate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.audio_samplerate)
}

// optional int32 movie_timescale = 17;
inline bool RecorderData::has_movie_timescale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RecorderData::clear_movie_timescale() {
  movie_timescale_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::movie_timescale() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.movie_timescale)
  return movie_timescale_;
}
inline void RecorderData::set_movie_timescale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  movie_timescale_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.movie_timescale)
}

// optional int32 audio_timescale = 18;
inline bool RecorderData::has_audio_timescale() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RecorderData::clear_audio_timescale() {
  audio_timescale_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::audio_timescale() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.audio_timescale)
  return audio_timescale_;
}
inline void RecorderData::set_audio_timescale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  audio_timescale_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.audio_timescale)
}

// optional int32 video_timescale = 19;
inline bool RecorderData::has_video_timescale() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RecorderData::clear_video_timescale() {
  video_timescale_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::video_timescale() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.video_timescale)
  return video_timescale_;
}
inline void RecorderData::set_video_timescale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  video_timescale_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.video_timescale)
}

// optional int32 video_bitrate = 20;
inline bool RecorderData::has_video_bitrate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RecorderData::clear_video_bitrate() {
  video_bitrate_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::video_bitrate() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.video_bitrate)
  return video_bitrate_;
}
inline void RecorderData::set_video_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  video_bitrate_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.video_bitrate)
}

// optional int32 iframe_interval = 21;
inline bool RecorderData::has_iframe_interval() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RecorderData::clear_iframe_interval() {
  iframe_interval_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecorderData::iframe_interval() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.iframe_interval)
  return iframe_interval_;
}
inline void RecorderData::set_iframe_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  iframe_interval_ = value;
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.iframe_interval)
}

// optional string log_session_id = 22;
inline bool RecorderData::has_log_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecorderData::clear_log_session_id() {
  log_session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RecorderData::log_session_id() const {
  // @@protoc_insertion_point(field_get:android.stats.mediametrics_message.RecorderData.log_session_id)
  return log_session_id_.GetNoArena();
}
inline void RecorderData::set_log_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.stats.mediametrics_message.RecorderData.log_session_id)
}
inline void RecorderData::set_log_session_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  log_session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.stats.mediametrics_message.RecorderData.log_session_id)
}
inline void RecorderData::set_log_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.stats.mediametrics_message.RecorderData.log_session_id)
}
inline void RecorderData::set_log_session_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  log_session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.stats.mediametrics_message.RecorderData.log_session_id)
}
inline std::string* RecorderData::mutable_log_session_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.stats.mediametrics_message.RecorderData.log_session_id)
  return log_session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecorderData::release_log_session_id() {
  // @@protoc_insertion_point(field_release:android.stats.mediametrics_message.RecorderData.log_session_id)
  if (!has_log_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return log_session_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecorderData::set_allocated_log_session_id(std::string* log_session_id) {
  if (log_session_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  log_session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_session_id);
  // @@protoc_insertion_point(field_set_allocated:android.stats.mediametrics_message.RecorderData.log_session_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mediametrics_message
}  // namespace stats
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::stats::mediametrics_message::ExtractorData_EntryPoint> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fmessage_2fmediametrics_5fmessage_2eproto
