// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/storage/storage_enums.proto

#include "frameworks/proto_logging/stats/enums/stats/storage/storage_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace storage {
}  // namespace storage
}  // namespace stats
}  // namespace android
namespace android {
namespace stats {
namespace storage {
bool ExternalStorageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ExternalStorageType_strings[4] = {};

static const char ExternalStorageType_names[] =
  "OTHER"
  "SD_CARD"
  "UNKNOWN"
  "USB";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExternalStorageType_entries[] = {
  { {ExternalStorageType_names + 0, 5}, 3 },
  { {ExternalStorageType_names + 5, 7}, 1 },
  { {ExternalStorageType_names + 12, 7}, 0 },
  { {ExternalStorageType_names + 19, 3}, 2 },
};

static const int ExternalStorageType_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> SD_CARD
  3, // 2 -> USB
  0, // 3 -> OTHER
};

const std::string& ExternalStorageType_Name(
    ExternalStorageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExternalStorageType_entries,
          ExternalStorageType_entries_by_number,
          4, ExternalStorageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExternalStorageType_entries,
      ExternalStorageType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ExternalStorageType_strings[idx].get();
}
bool ExternalStorageType_Parse(
    const std::string& name, ExternalStorageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExternalStorageType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ExternalStorageType>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace storage
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
