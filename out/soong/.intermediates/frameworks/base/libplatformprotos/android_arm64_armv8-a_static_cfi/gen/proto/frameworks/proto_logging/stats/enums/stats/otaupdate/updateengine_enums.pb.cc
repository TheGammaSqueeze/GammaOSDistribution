// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/otaupdate/updateengine_enums.proto

#include "frameworks/proto_logging/stats/enums/stats/otaupdate/updateengine_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace otaupdate {
}  // namespace otaupdate
}  // namespace stats
}  // namespace android
namespace android {
namespace stats {
namespace otaupdate {
bool PayloadType_IsValid(int value) {
  switch (value) {
    case 10000:
    case 10001:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PayloadType_strings[2] = {};

static const char PayloadType_names[] =
  "DELTA"
  "FULL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PayloadType_entries[] = {
  { {PayloadType_names + 0, 5}, 10001 },
  { {PayloadType_names + 5, 4}, 10000 },
};

static const int PayloadType_entries_by_number[] = {
  1, // 10000 -> FULL
  0, // 10001 -> DELTA
};

const std::string& PayloadType_Name(
    PayloadType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PayloadType_entries,
          PayloadType_entries_by_number,
          2, PayloadType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PayloadType_entries,
      PayloadType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PayloadType_strings[idx].get();
}
bool PayloadType_Parse(
    const std::string& name, PayloadType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PayloadType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PayloadType>(int_value);
  }
  return success;
}
bool AttemptResult_IsValid(int value) {
  switch (value) {
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AttemptResult_strings[13] = {};

static const char AttemptResult_names[] =
  "ABNORMAL_TERMINATION"
  "INTERNAL_ERROR"
  "METADATA_MALFORMED"
  "METADATA_VERIFICATION_FAILED"
  "OPERATION_EXECUTION_ERROR"
  "OPERATION_MALFORMED"
  "PAYLOAD_DOWNLOAD_ERROR"
  "PAYLOAD_VERIFICATION_FAILED"
  "POSTINSTALL_FAILED"
  "UPDATE_CANCELED"
  "UPDATE_SUCCEEDED"
  "UPDATE_SUCCEEDED_NOT_ACTIVE"
  "VERIFICATION_FAILED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AttemptResult_entries[] = {
  { {AttemptResult_names + 0, 20}, 10010 },
  { {AttemptResult_names + 20, 14}, 10001 },
  { {AttemptResult_names + 34, 18}, 10003 },
  { {AttemptResult_names + 52, 28}, 10006 },
  { {AttemptResult_names + 80, 25}, 10005 },
  { {AttemptResult_names + 105, 19}, 10004 },
  { {AttemptResult_names + 124, 22}, 10002 },
  { {AttemptResult_names + 146, 27}, 10007 },
  { {AttemptResult_names + 173, 18}, 10009 },
  { {AttemptResult_names + 191, 15}, 10011 },
  { {AttemptResult_names + 206, 16}, 10000 },
  { {AttemptResult_names + 222, 27}, 10012 },
  { {AttemptResult_names + 249, 19}, 10008 },
};

static const int AttemptResult_entries_by_number[] = {
  10, // 10000 -> UPDATE_SUCCEEDED
  1, // 10001 -> INTERNAL_ERROR
  6, // 10002 -> PAYLOAD_DOWNLOAD_ERROR
  2, // 10003 -> METADATA_MALFORMED
  5, // 10004 -> OPERATION_MALFORMED
  4, // 10005 -> OPERATION_EXECUTION_ERROR
  3, // 10006 -> METADATA_VERIFICATION_FAILED
  7, // 10007 -> PAYLOAD_VERIFICATION_FAILED
  12, // 10008 -> VERIFICATION_FAILED
  8, // 10009 -> POSTINSTALL_FAILED
  0, // 10010 -> ABNORMAL_TERMINATION
  9, // 10011 -> UPDATE_CANCELED
  11, // 10012 -> UPDATE_SUCCEEDED_NOT_ACTIVE
};

const std::string& AttemptResult_Name(
    AttemptResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AttemptResult_entries,
          AttemptResult_entries_by_number,
          13, AttemptResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AttemptResult_entries,
      AttemptResult_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AttemptResult_strings[idx].get();
}
bool AttemptResult_Parse(
    const std::string& name, AttemptResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AttemptResult_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<AttemptResult>(int_value);
  }
  return success;
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 10000:
    case 10001:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10017:
    case 10018:
    case 10020:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10025:
    case 10026:
    case 10027:
    case 10028:
    case 10029:
    case 10032:
    case 10033:
    case 10038:
    case 10039:
    case 10044:
    case 10045:
    case 10047:
    case 10048:
    case 10051:
    case 10052:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ErrorCode_strings[36] = {};

static const char ErrorCode_names[] =
  "DOWNLOAD_INVALID_METADATA_MAGIC_STRING"
  "DOWNLOAD_INVALID_METADATA_SIGNATURE"
  "DOWNLOAD_INVALID_METADATA_SIZE"
  "DOWNLOAD_MANIFEST_PARSE_ERROR"
  "DOWNLOAD_METADATA_SIGNATURE_ERROR"
  "DOWNLOAD_METADATA_SIGNATURE_MISMATCH"
  "DOWNLOAD_METADATA_SIGNATURE_MISSING_ERROR"
  "DOWNLOAD_METADATA_SIGNATURE_VERIFICATION_ERROR"
  "DOWNLOAD_NEW_PARTITION_INFO_ERROR"
  "DOWNLOAD_OPERATION_EXECUTION_ERROR"
  "DOWNLOAD_OPERATION_HASH_MISMATCH"
  "DOWNLOAD_OPERATION_HASH_MISSING_ERROR"
  "DOWNLOAD_OPERATION_HASH_VERIFICATION_ERROR"
  "DOWNLOAD_PAYLOAD_PUB_KEY_VERIFICATION_ERROR"
  "DOWNLOAD_PAYLOAD_VERIFICATION_ERROR"
  "DOWNLOAD_SIGNATURE_MISSING_IN_MANIFEST"
  "DOWNLOAD_STATE_INITIALIZATION_ERROR"
  "DOWNLOAD_TRANSFER_ERROR"
  "DOWNLOAD_WRITE_ERROR"
  "ERROR"
  "FILESYSTEM_COPIER_ERROR"
  "FILESYSTEM_VERIFIER_ERROR"
  "INSTALL_DEVICE_OPEN_ERROR"
  "KERNEL_DEVICE_OPEN_ERROR"
  "NEW_ROOTFS_VERIFICATION_ERROR"
  "PAYLOAD_HASH_MISMATCH_ERROR"
  "PAYLOAD_MISMATCHED_TYPE_ERROR"
  "PAYLOAD_SIZE_MISMATCH_ERROR"
  "PAYLOAD_TIMESTAMP_ERROR"
  "POST_INSTALL_RUNNER_ERROR"
  "SIGNED_DELTA_PAYLOAD_EXPECTED_ERROR"
  "SUCCESS"
  "UNSUPPORTED_MAJOR_PAYLOAD_VERSION"
  "UNSUPPORTED_MINOR_PAYLOAD_VERSION"
  "UPDATED_BUT_NOT_ACTIVE"
  "USER_CANCELED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ErrorCode_entries[] = {
  { {ErrorCode_names + 0, 38}, 10021 },
  { {ErrorCode_names + 38, 35}, 10033 },
  { {ErrorCode_names + 73, 30}, 10032 },
  { {ErrorCode_names + 103, 29}, 10023 },
  { {ErrorCode_names + 132, 33}, 10024 },
  { {ErrorCode_names + 165, 36}, 10026 },
  { {ErrorCode_names + 201, 41}, 10039 },
  { {ErrorCode_names + 242, 46}, 10025 },
  { {ErrorCode_names + 288, 33}, 10013 },
  { {ErrorCode_names + 321, 34}, 10028 },
  { {ErrorCode_names + 355, 32}, 10029 },
  { {ErrorCode_names + 387, 37}, 10038 },
  { {ErrorCode_names + 424, 42}, 10027 },
  { {ErrorCode_names + 466, 43}, 10018 },
  { {ErrorCode_names + 509, 35}, 10012 },
  { {ErrorCode_names + 544, 38}, 10022 },
  { {ErrorCode_names + 582, 35}, 10020 },
  { {ErrorCode_names + 617, 23}, 10009 },
  { {ErrorCode_names + 640, 20}, 10014 },
  { {ErrorCode_names + 660, 5}, 10001 },
  { {ErrorCode_names + 665, 23}, 10004 },
  { {ErrorCode_names + 688, 25}, 10047 },
  { {ErrorCode_names + 713, 25}, 10007 },
  { {ErrorCode_names + 738, 24}, 10008 },
  { {ErrorCode_names + 762, 29}, 10015 },
  { {ErrorCode_names + 791, 27}, 10010 },
  { {ErrorCode_names + 818, 29}, 10006 },
  { {ErrorCode_names + 847, 27}, 10011 },
  { {ErrorCode_names + 874, 23}, 10051 },
  { {ErrorCode_names + 897, 25}, 10005 },
  { {ErrorCode_names + 922, 35}, 10017 },
  { {ErrorCode_names + 957, 7}, 10000 },
  { {ErrorCode_names + 964, 33}, 10044 },
  { {ErrorCode_names + 997, 33}, 10045 },
  { {ErrorCode_names + 1030, 22}, 10052 },
  { {ErrorCode_names + 1052, 13}, 10048 },
};

static const int ErrorCode_entries_by_number[] = {
  31, // 10000 -> SUCCESS
  19, // 10001 -> ERROR
  20, // 10004 -> FILESYSTEM_COPIER_ERROR
  29, // 10005 -> POST_INSTALL_RUNNER_ERROR
  26, // 10006 -> PAYLOAD_MISMATCHED_TYPE_ERROR
  22, // 10007 -> INSTALL_DEVICE_OPEN_ERROR
  23, // 10008 -> KERNEL_DEVICE_OPEN_ERROR
  17, // 10009 -> DOWNLOAD_TRANSFER_ERROR
  25, // 10010 -> PAYLOAD_HASH_MISMATCH_ERROR
  27, // 10011 -> PAYLOAD_SIZE_MISMATCH_ERROR
  14, // 10012 -> DOWNLOAD_PAYLOAD_VERIFICATION_ERROR
  8, // 10013 -> DOWNLOAD_NEW_PARTITION_INFO_ERROR
  18, // 10014 -> DOWNLOAD_WRITE_ERROR
  24, // 10015 -> NEW_ROOTFS_VERIFICATION_ERROR
  30, // 10017 -> SIGNED_DELTA_PAYLOAD_EXPECTED_ERROR
  13, // 10018 -> DOWNLOAD_PAYLOAD_PUB_KEY_VERIFICATION_ERROR
  16, // 10020 -> DOWNLOAD_STATE_INITIALIZATION_ERROR
  0, // 10021 -> DOWNLOAD_INVALID_METADATA_MAGIC_STRING
  15, // 10022 -> DOWNLOAD_SIGNATURE_MISSING_IN_MANIFEST
  3, // 10023 -> DOWNLOAD_MANIFEST_PARSE_ERROR
  4, // 10024 -> DOWNLOAD_METADATA_SIGNATURE_ERROR
  7, // 10025 -> DOWNLOAD_METADATA_SIGNATURE_VERIFICATION_ERROR
  5, // 10026 -> DOWNLOAD_METADATA_SIGNATURE_MISMATCH
  12, // 10027 -> DOWNLOAD_OPERATION_HASH_VERIFICATION_ERROR
  9, // 10028 -> DOWNLOAD_OPERATION_EXECUTION_ERROR
  10, // 10029 -> DOWNLOAD_OPERATION_HASH_MISMATCH
  2, // 10032 -> DOWNLOAD_INVALID_METADATA_SIZE
  1, // 10033 -> DOWNLOAD_INVALID_METADATA_SIGNATURE
  11, // 10038 -> DOWNLOAD_OPERATION_HASH_MISSING_ERROR
  6, // 10039 -> DOWNLOAD_METADATA_SIGNATURE_MISSING_ERROR
  32, // 10044 -> UNSUPPORTED_MAJOR_PAYLOAD_VERSION
  33, // 10045 -> UNSUPPORTED_MINOR_PAYLOAD_VERSION
  21, // 10047 -> FILESYSTEM_VERIFIER_ERROR
  35, // 10048 -> USER_CANCELED
  28, // 10051 -> PAYLOAD_TIMESTAMP_ERROR
  34, // 10052 -> UPDATED_BUT_NOT_ACTIVE
};

const std::string& ErrorCode_Name(
    ErrorCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ErrorCode_entries,
          ErrorCode_entries_by_number,
          36, ErrorCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ErrorCode_entries,
      ErrorCode_entries_by_number,
      36, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ErrorCode_strings[idx].get();
}
bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ErrorCode_entries, 36, name, &int_value);
  if (success) {
    *value = static_cast<ErrorCode>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace otaupdate
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
