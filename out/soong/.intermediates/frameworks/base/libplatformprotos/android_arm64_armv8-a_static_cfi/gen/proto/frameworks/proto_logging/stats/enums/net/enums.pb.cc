// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/net/enums.proto

#include "frameworks/proto_logging/stats/enums/net/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace net {
}  // namespace net
}  // namespace android
namespace android {
namespace net {
bool Transport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Transport_strings[7] = {};

static const char Transport_names[] =
  "TRANSPORT_BLUETOOTH"
  "TRANSPORT_CELLULAR"
  "TRANSPORT_ETHERNET"
  "TRANSPORT_LOWPAN"
  "TRANSPORT_VPN"
  "TRANSPORT_WIFI"
  "TRANSPORT_WIFI_AWARE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Transport_entries[] = {
  { {Transport_names + 0, 19}, 2 },
  { {Transport_names + 19, 18}, 0 },
  { {Transport_names + 37, 18}, 3 },
  { {Transport_names + 55, 16}, 6 },
  { {Transport_names + 71, 13}, 4 },
  { {Transport_names + 84, 14}, 1 },
  { {Transport_names + 98, 20}, 5 },
};

static const int Transport_entries_by_number[] = {
  1, // 0 -> TRANSPORT_CELLULAR
  5, // 1 -> TRANSPORT_WIFI
  0, // 2 -> TRANSPORT_BLUETOOTH
  2, // 3 -> TRANSPORT_ETHERNET
  4, // 4 -> TRANSPORT_VPN
  6, // 5 -> TRANSPORT_WIFI_AWARE
  3, // 6 -> TRANSPORT_LOWPAN
};

const std::string& Transport_Name(
    Transport value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Transport_entries,
          Transport_entries_by_number,
          7, Transport_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Transport_entries,
      Transport_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Transport_strings[idx].get();
}
bool Transport_Parse(
    const std::string& name, Transport* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Transport_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<Transport>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
