// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/battery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
#include "frameworks/proto_logging/stats/enums/os/enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace service {
namespace battery {
class BatteryServiceDumpProto;
class BatteryServiceDumpProtoDefaultTypeInternal;
extern BatteryServiceDumpProtoDefaultTypeInternal _BatteryServiceDumpProto_default_instance_;
}  // namespace battery
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::battery::BatteryServiceDumpProto* Arena::CreateMaybeMessage<::android::service::battery::BatteryServiceDumpProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {
namespace battery {

// ===================================================================

class BatteryServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.battery.BatteryServiceDumpProto) */ {
 public:
  BatteryServiceDumpProto();
  virtual ~BatteryServiceDumpProto();

  BatteryServiceDumpProto(const BatteryServiceDumpProto& from);
  BatteryServiceDumpProto(BatteryServiceDumpProto&& from) noexcept
    : BatteryServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline BatteryServiceDumpProto& operator=(const BatteryServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryServiceDumpProto& operator=(BatteryServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BatteryServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const BatteryServiceDumpProto*>(
               &_BatteryServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryServiceDumpProto& a, BatteryServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatteryServiceDumpProto* New() const final {
    return CreateMaybeMessage<BatteryServiceDumpProto>(nullptr);
  }

  BatteryServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatteryServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BatteryServiceDumpProto& from);
  void MergeFrom(const BatteryServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatteryServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.battery.BatteryServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTechnologyFieldNumber = 13,
    kPluggedFieldNumber = 2,
    kMaxChargingCurrentFieldNumber = 3,
    kMaxChargingVoltageFieldNumber = 4,
    kAreUpdatesStoppedFieldNumber = 1,
    kIsPresentFieldNumber = 8,
    kChargeCounterFieldNumber = 5,
    kStatusFieldNumber = 6,
    kHealthFieldNumber = 7,
    kLevelFieldNumber = 9,
    kScaleFieldNumber = 10,
    kVoltageFieldNumber = 11,
    kTemperatureFieldNumber = 12,
  };
  // optional string technology = 13;
  bool has_technology() const;
  void clear_technology();
  const std::string& technology() const;
  void set_technology(const std::string& value);
  void set_technology(std::string&& value);
  void set_technology(const char* value);
  void set_technology(const char* value, size_t size);
  std::string* mutable_technology();
  std::string* release_technology();
  void set_allocated_technology(std::string* technology);

  // optional .android.os.BatteryPluggedStateEnum plugged = 2;
  bool has_plugged() const;
  void clear_plugged();
  ::android::os::BatteryPluggedStateEnum plugged() const;
  void set_plugged(::android::os::BatteryPluggedStateEnum value);

  // optional int32 max_charging_current = 3;
  bool has_max_charging_current() const;
  void clear_max_charging_current();
  ::PROTOBUF_NAMESPACE_ID::int32 max_charging_current() const;
  void set_max_charging_current(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 max_charging_voltage = 4;
  bool has_max_charging_voltage() const;
  void clear_max_charging_voltage();
  ::PROTOBUF_NAMESPACE_ID::int32 max_charging_voltage() const;
  void set_max_charging_voltage(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool are_updates_stopped = 1;
  bool has_are_updates_stopped() const;
  void clear_are_updates_stopped();
  bool are_updates_stopped() const;
  void set_are_updates_stopped(bool value);

  // optional bool is_present = 8;
  bool has_is_present() const;
  void clear_is_present();
  bool is_present() const;
  void set_is_present(bool value);

  // optional int32 charge_counter = 5;
  bool has_charge_counter() const;
  void clear_charge_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 charge_counter() const;
  void set_charge_counter(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.BatteryStatusEnum status = 6;
  bool has_status() const;
  void clear_status();
  ::android::os::BatteryStatusEnum status() const;
  void set_status(::android::os::BatteryStatusEnum value);

  // optional .android.os.BatteryHealthEnum health = 7;
  bool has_health() const;
  void clear_health();
  ::android::os::BatteryHealthEnum health() const;
  void set_health(::android::os::BatteryHealthEnum value);

  // optional int32 level = 9;
  bool has_level() const;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 scale = 10;
  bool has_scale() const;
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 voltage = 11;
  bool has_voltage() const;
  void clear_voltage();
  ::PROTOBUF_NAMESPACE_ID::int32 voltage() const;
  void set_voltage(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 temperature = 12;
  bool has_temperature() const;
  void clear_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 temperature() const;
  void set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.battery.BatteryServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr technology_;
  int plugged_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_charging_current_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_charging_voltage_;
  bool are_updates_stopped_;
  bool is_present_;
  ::PROTOBUF_NAMESPACE_ID::int32 charge_counter_;
  int status_;
  int health_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 voltage_;
  ::PROTOBUF_NAMESPACE_ID::int32 temperature_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryServiceDumpProto

// optional bool are_updates_stopped = 1;
inline bool BatteryServiceDumpProto::has_are_updates_stopped() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatteryServiceDumpProto::clear_are_updates_stopped() {
  are_updates_stopped_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool BatteryServiceDumpProto::are_updates_stopped() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.are_updates_stopped)
  return are_updates_stopped_;
}
inline void BatteryServiceDumpProto::set_are_updates_stopped(bool value) {
  _has_bits_[0] |= 0x00000010u;
  are_updates_stopped_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.are_updates_stopped)
}

// optional .android.os.BatteryPluggedStateEnum plugged = 2;
inline bool BatteryServiceDumpProto::has_plugged() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatteryServiceDumpProto::clear_plugged() {
  plugged_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::BatteryPluggedStateEnum BatteryServiceDumpProto::plugged() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.plugged)
  return static_cast< ::android::os::BatteryPluggedStateEnum >(plugged_);
}
inline void BatteryServiceDumpProto::set_plugged(::android::os::BatteryPluggedStateEnum value) {
  assert(::android::os::BatteryPluggedStateEnum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  plugged_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.plugged)
}

// optional int32 max_charging_current = 3;
inline bool BatteryServiceDumpProto::has_max_charging_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatteryServiceDumpProto::clear_max_charging_current() {
  max_charging_current_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryServiceDumpProto::max_charging_current() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.max_charging_current)
  return max_charging_current_;
}
inline void BatteryServiceDumpProto::set_max_charging_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_charging_current_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.max_charging_current)
}

// optional int32 max_charging_voltage = 4;
inline bool BatteryServiceDumpProto::has_max_charging_voltage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatteryServiceDumpProto::clear_max_charging_voltage() {
  max_charging_voltage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryServiceDumpProto::max_charging_voltage() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.max_charging_voltage)
  return max_charging_voltage_;
}
inline void BatteryServiceDumpProto::set_max_charging_voltage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_charging_voltage_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.max_charging_voltage)
}

// optional int32 charge_counter = 5;
inline bool BatteryServiceDumpProto::has_charge_counter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BatteryServiceDumpProto::clear_charge_counter() {
  charge_counter_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryServiceDumpProto::charge_counter() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.charge_counter)
  return charge_counter_;
}
inline void BatteryServiceDumpProto::set_charge_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  charge_counter_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.charge_counter)
}

// optional .android.os.BatteryStatusEnum status = 6;
inline bool BatteryServiceDumpProto::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BatteryServiceDumpProto::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::android::os::BatteryStatusEnum BatteryServiceDumpProto::status() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.status)
  return static_cast< ::android::os::BatteryStatusEnum >(status_);
}
inline void BatteryServiceDumpProto::set_status(::android::os::BatteryStatusEnum value) {
  assert(::android::os::BatteryStatusEnum_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  status_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.status)
}

// optional .android.os.BatteryHealthEnum health = 7;
inline bool BatteryServiceDumpProto::has_health() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BatteryServiceDumpProto::clear_health() {
  health_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::os::BatteryHealthEnum BatteryServiceDumpProto::health() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.health)
  return static_cast< ::android::os::BatteryHealthEnum >(health_);
}
inline void BatteryServiceDumpProto::set_health(::android::os::BatteryHealthEnum value) {
  assert(::android::os::BatteryHealthEnum_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  health_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.health)
}

// optional bool is_present = 8;
inline bool BatteryServiceDumpProto::has_is_present() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BatteryServiceDumpProto::clear_is_present() {
  is_present_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BatteryServiceDumpProto::is_present() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.is_present)
  return is_present_;
}
inline void BatteryServiceDumpProto::set_is_present(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_present_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.is_present)
}

// optional int32 level = 9;
inline bool BatteryServiceDumpProto::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BatteryServiceDumpProto::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryServiceDumpProto::level() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.level)
  return level_;
}
inline void BatteryServiceDumpProto::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  level_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.level)
}

// optional int32 scale = 10;
inline bool BatteryServiceDumpProto::has_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BatteryServiceDumpProto::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryServiceDumpProto::scale() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.scale)
  return scale_;
}
inline void BatteryServiceDumpProto::set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  scale_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.scale)
}

// optional int32 voltage = 11;
inline bool BatteryServiceDumpProto::has_voltage() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BatteryServiceDumpProto::clear_voltage() {
  voltage_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryServiceDumpProto::voltage() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.voltage)
  return voltage_;
}
inline void BatteryServiceDumpProto::set_voltage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  voltage_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.voltage)
}

// optional int32 temperature = 12;
inline bool BatteryServiceDumpProto::has_temperature() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BatteryServiceDumpProto::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryServiceDumpProto::temperature() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.temperature)
  return temperature_;
}
inline void BatteryServiceDumpProto::set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  temperature_ = value;
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.temperature)
}

// optional string technology = 13;
inline bool BatteryServiceDumpProto::has_technology() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatteryServiceDumpProto::clear_technology() {
  technology_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BatteryServiceDumpProto::technology() const {
  // @@protoc_insertion_point(field_get:android.service.battery.BatteryServiceDumpProto.technology)
  return technology_.GetNoArena();
}
inline void BatteryServiceDumpProto::set_technology(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  technology_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.battery.BatteryServiceDumpProto.technology)
}
inline void BatteryServiceDumpProto::set_technology(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  technology_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.battery.BatteryServiceDumpProto.technology)
}
inline void BatteryServiceDumpProto::set_technology(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  technology_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.battery.BatteryServiceDumpProto.technology)
}
inline void BatteryServiceDumpProto::set_technology(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  technology_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.battery.BatteryServiceDumpProto.technology)
}
inline std::string* BatteryServiceDumpProto::mutable_technology() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.battery.BatteryServiceDumpProto.technology)
  return technology_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BatteryServiceDumpProto::release_technology() {
  // @@protoc_insertion_point(field_release:android.service.battery.BatteryServiceDumpProto.technology)
  if (!has_technology()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return technology_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BatteryServiceDumpProto::set_allocated_technology(std::string* technology) {
  if (technology != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  technology_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), technology);
  // @@protoc_insertion_point(field_set_allocated:android.service.battery.BatteryServiceDumpProto.technology)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace battery
}  // namespace service
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fbattery_2eproto
