// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/media/audioattributes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace media {
class AudioAttributesProto;
class AudioAttributesProtoDefaultTypeInternal;
extern AudioAttributesProtoDefaultTypeInternal _AudioAttributesProto_default_instance_;
}  // namespace media
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::media::AudioAttributesProto* Arena::CreateMaybeMessage<::android::media::AudioAttributesProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace media {

enum ContentType : int {
  CONTENT_TYPE_UNKNOWN = 0,
  SPEECH = 1,
  MUSIC = 2,
  MOVIE = 3,
  SONIFICATION = 4
};
bool ContentType_IsValid(int value);
constexpr ContentType ContentType_MIN = CONTENT_TYPE_UNKNOWN;
constexpr ContentType ContentType_MAX = SONIFICATION;
constexpr int ContentType_ARRAYSIZE = ContentType_MAX + 1;

const std::string& ContentType_Name(ContentType value);
template<typename T>
inline const std::string& ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentType_Name.");
  return ContentType_Name(static_cast<ContentType>(enum_t_value));
}
bool ContentType_Parse(
    const std::string& name, ContentType* value);
enum Usage : int {
  USAGE_UNKNOWN = 0,
  MEDIA = 1,
  VOICE_COMMUNICATION = 2,
  VOICE_COMMUNICATION_SIGNALLING = 3,
  ALARM = 4,
  NOTIFICATION = 5,
  NOTIFICATION_RINGTONE = 6,
  NOTIFICATION_COMMUNICATION_REQUEST = 7,
  NOTIFICATION_COMMUNICATION_INSTANT = 8,
  NOTIFICATION_COMMUNICATION_DELAYED = 9,
  NOTIFICATION_EVENT = 10,
  ASSISTANCE_ACCESSIBILITY = 11,
  ASSISTANCE_NAVIGATION_GUIDANCE = 12,
  ASSISTANCE_SONIFICATION = 13,
  GAME = 14,
  VIRTUAL_SOURCE = 15,
  ASSISTANT = 16
};
bool Usage_IsValid(int value);
constexpr Usage Usage_MIN = USAGE_UNKNOWN;
constexpr Usage Usage_MAX = ASSISTANT;
constexpr int Usage_ARRAYSIZE = Usage_MAX + 1;

const std::string& Usage_Name(Usage value);
template<typename T>
inline const std::string& Usage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Usage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Usage_Name.");
  return Usage_Name(static_cast<Usage>(enum_t_value));
}
bool Usage_Parse(
    const std::string& name, Usage* value);
// ===================================================================

class AudioAttributesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.media.AudioAttributesProto) */ {
 public:
  AudioAttributesProto();
  virtual ~AudioAttributesProto();

  AudioAttributesProto(const AudioAttributesProto& from);
  AudioAttributesProto(AudioAttributesProto&& from) noexcept
    : AudioAttributesProto() {
    *this = ::std::move(from);
  }

  inline AudioAttributesProto& operator=(const AudioAttributesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioAttributesProto& operator=(AudioAttributesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AudioAttributesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioAttributesProto* internal_default_instance() {
    return reinterpret_cast<const AudioAttributesProto*>(
               &_AudioAttributesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioAttributesProto& a, AudioAttributesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioAttributesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioAttributesProto* New() const final {
    return CreateMaybeMessage<AudioAttributesProto>(nullptr);
  }

  AudioAttributesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioAttributesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AudioAttributesProto& from);
  void MergeFrom(const AudioAttributesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioAttributesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.media.AudioAttributesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kUsageFieldNumber = 1,
    kContentTypeFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // repeated string tags = 4 [(.android.privacy) = {
  int tags_size() const;
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();

  // optional .android.media.Usage usage = 1;
  bool has_usage() const;
  void clear_usage();
  ::android::media::Usage usage() const;
  void set_usage(::android::media::Usage value);

  // optional .android.media.ContentType content_type = 2;
  bool has_content_type() const;
  void clear_content_type();
  ::android::media::ContentType content_type() const;
  void set_content_type(::android::media::ContentType value);

  // optional int32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.media.AudioAttributesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  int usage_;
  int content_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioAttributesProto

// optional .android.media.Usage usage = 1;
inline bool AudioAttributesProto::has_usage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioAttributesProto::clear_usage() {
  usage_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::media::Usage AudioAttributesProto::usage() const {
  // @@protoc_insertion_point(field_get:android.media.AudioAttributesProto.usage)
  return static_cast< ::android::media::Usage >(usage_);
}
inline void AudioAttributesProto::set_usage(::android::media::Usage value) {
  assert(::android::media::Usage_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  usage_ = value;
  // @@protoc_insertion_point(field_set:android.media.AudioAttributesProto.usage)
}

// optional .android.media.ContentType content_type = 2;
inline bool AudioAttributesProto::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioAttributesProto::clear_content_type() {
  content_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::media::ContentType AudioAttributesProto::content_type() const {
  // @@protoc_insertion_point(field_get:android.media.AudioAttributesProto.content_type)
  return static_cast< ::android::media::ContentType >(content_type_);
}
inline void AudioAttributesProto::set_content_type(::android::media::ContentType value) {
  assert(::android::media::ContentType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  content_type_ = value;
  // @@protoc_insertion_point(field_set:android.media.AudioAttributesProto.content_type)
}

// optional int32 flags = 3;
inline bool AudioAttributesProto::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioAttributesProto::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioAttributesProto::flags() const {
  // @@protoc_insertion_point(field_get:android.media.AudioAttributesProto.flags)
  return flags_;
}
inline void AudioAttributesProto::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:android.media.AudioAttributesProto.flags)
}

// repeated string tags = 4 [(.android.privacy) = {
inline int AudioAttributesProto::tags_size() const {
  return tags_.size();
}
inline void AudioAttributesProto::clear_tags() {
  tags_.Clear();
}
inline const std::string& AudioAttributesProto::tags(int index) const {
  // @@protoc_insertion_point(field_get:android.media.AudioAttributesProto.tags)
  return tags_.Get(index);
}
inline std::string* AudioAttributesProto::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:android.media.AudioAttributesProto.tags)
  return tags_.Mutable(index);
}
inline void AudioAttributesProto::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.media.AudioAttributesProto.tags)
  tags_.Mutable(index)->assign(value);
}
inline void AudioAttributesProto::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.media.AudioAttributesProto.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void AudioAttributesProto::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.media.AudioAttributesProto.tags)
}
inline void AudioAttributesProto::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.media.AudioAttributesProto.tags)
}
inline std::string* AudioAttributesProto::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:android.media.AudioAttributesProto.tags)
  return tags_.Add();
}
inline void AudioAttributesProto::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.media.AudioAttributesProto.tags)
}
inline void AudioAttributesProto::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.media.AudioAttributesProto.tags)
}
inline void AudioAttributesProto::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.media.AudioAttributesProto.tags)
}
inline void AudioAttributesProto::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.media.AudioAttributesProto.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AudioAttributesProto::tags() const {
  // @@protoc_insertion_point(field_list:android.media.AudioAttributesProto.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AudioAttributesProto::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:android.media.AudioAttributesProto.tags)
  return &tags_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace media
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::media::ContentType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::media::Usage> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fmedia_2faudioattributes_2eproto
