// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/notificationhistory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace notification {
class NotificationHistoryProto;
class NotificationHistoryProtoDefaultTypeInternal;
extern NotificationHistoryProtoDefaultTypeInternal _NotificationHistoryProto_default_instance_;
class NotificationHistoryProto_Notification;
class NotificationHistoryProto_NotificationDefaultTypeInternal;
extern NotificationHistoryProto_NotificationDefaultTypeInternal _NotificationHistoryProto_Notification_default_instance_;
class NotificationHistoryProto_Notification_Icon;
class NotificationHistoryProto_Notification_IconDefaultTypeInternal;
extern NotificationHistoryProto_Notification_IconDefaultTypeInternal _NotificationHistoryProto_Notification_Icon_default_instance_;
class NotificationHistoryProto_StringPool;
class NotificationHistoryProto_StringPoolDefaultTypeInternal;
extern NotificationHistoryProto_StringPoolDefaultTypeInternal _NotificationHistoryProto_StringPool_default_instance_;
}  // namespace notification
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::notification::NotificationHistoryProto* Arena::CreateMaybeMessage<::com::android::server::notification::NotificationHistoryProto>(Arena*);
template<> ::com::android::server::notification::NotificationHistoryProto_Notification* Arena::CreateMaybeMessage<::com::android::server::notification::NotificationHistoryProto_Notification>(Arena*);
template<> ::com::android::server::notification::NotificationHistoryProto_Notification_Icon* Arena::CreateMaybeMessage<::com::android::server::notification::NotificationHistoryProto_Notification_Icon>(Arena*);
template<> ::com::android::server::notification::NotificationHistoryProto_StringPool* Arena::CreateMaybeMessage<::com::android::server::notification::NotificationHistoryProto_StringPool>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace notification {

enum NotificationHistoryProto_Notification_ImageTypeEnum : int {
  NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_UNKNOWN = 0,
  NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_BITMAP = 1,
  NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_RESOURCE = 2,
  NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_DATA = 3,
  NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_URI = 4,
  NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_ADAPTIVE_BITMAP = 5
};
bool NotificationHistoryProto_Notification_ImageTypeEnum_IsValid(int value);
constexpr NotificationHistoryProto_Notification_ImageTypeEnum NotificationHistoryProto_Notification_ImageTypeEnum_ImageTypeEnum_MIN = NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_UNKNOWN;
constexpr NotificationHistoryProto_Notification_ImageTypeEnum NotificationHistoryProto_Notification_ImageTypeEnum_ImageTypeEnum_MAX = NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_ADAPTIVE_BITMAP;
constexpr int NotificationHistoryProto_Notification_ImageTypeEnum_ImageTypeEnum_ARRAYSIZE = NotificationHistoryProto_Notification_ImageTypeEnum_ImageTypeEnum_MAX + 1;

const std::string& NotificationHistoryProto_Notification_ImageTypeEnum_Name(NotificationHistoryProto_Notification_ImageTypeEnum value);
template<typename T>
inline const std::string& NotificationHistoryProto_Notification_ImageTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationHistoryProto_Notification_ImageTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationHistoryProto_Notification_ImageTypeEnum_Name.");
  return NotificationHistoryProto_Notification_ImageTypeEnum_Name(static_cast<NotificationHistoryProto_Notification_ImageTypeEnum>(enum_t_value));
}
bool NotificationHistoryProto_Notification_ImageTypeEnum_Parse(
    const std::string& name, NotificationHistoryProto_Notification_ImageTypeEnum* value);
// ===================================================================

class NotificationHistoryProto_StringPool :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.notification.NotificationHistoryProto.StringPool) */ {
 public:
  NotificationHistoryProto_StringPool();
  virtual ~NotificationHistoryProto_StringPool();

  NotificationHistoryProto_StringPool(const NotificationHistoryProto_StringPool& from);
  NotificationHistoryProto_StringPool(NotificationHistoryProto_StringPool&& from) noexcept
    : NotificationHistoryProto_StringPool() {
    *this = ::std::move(from);
  }

  inline NotificationHistoryProto_StringPool& operator=(const NotificationHistoryProto_StringPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationHistoryProto_StringPool& operator=(NotificationHistoryProto_StringPool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationHistoryProto_StringPool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationHistoryProto_StringPool* internal_default_instance() {
    return reinterpret_cast<const NotificationHistoryProto_StringPool*>(
               &_NotificationHistoryProto_StringPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationHistoryProto_StringPool& a, NotificationHistoryProto_StringPool& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationHistoryProto_StringPool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationHistoryProto_StringPool* New() const final {
    return CreateMaybeMessage<NotificationHistoryProto_StringPool>(nullptr);
  }

  NotificationHistoryProto_StringPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationHistoryProto_StringPool>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationHistoryProto_StringPool& from);
  void MergeFrom(const NotificationHistoryProto_StringPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationHistoryProto_StringPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.notification.NotificationHistoryProto.StringPool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringsFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // repeated string strings = 2;
  int strings_size() const;
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();

  // optional int32 size = 1;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.notification.NotificationHistoryProto.StringPool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto;
};
// -------------------------------------------------------------------

class NotificationHistoryProto_Notification_Icon :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.notification.NotificationHistoryProto.Notification.Icon) */ {
 public:
  NotificationHistoryProto_Notification_Icon();
  virtual ~NotificationHistoryProto_Notification_Icon();

  NotificationHistoryProto_Notification_Icon(const NotificationHistoryProto_Notification_Icon& from);
  NotificationHistoryProto_Notification_Icon(NotificationHistoryProto_Notification_Icon&& from) noexcept
    : NotificationHistoryProto_Notification_Icon() {
    *this = ::std::move(from);
  }

  inline NotificationHistoryProto_Notification_Icon& operator=(const NotificationHistoryProto_Notification_Icon& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationHistoryProto_Notification_Icon& operator=(NotificationHistoryProto_Notification_Icon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationHistoryProto_Notification_Icon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationHistoryProto_Notification_Icon* internal_default_instance() {
    return reinterpret_cast<const NotificationHistoryProto_Notification_Icon*>(
               &_NotificationHistoryProto_Notification_Icon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotificationHistoryProto_Notification_Icon& a, NotificationHistoryProto_Notification_Icon& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationHistoryProto_Notification_Icon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationHistoryProto_Notification_Icon* New() const final {
    return CreateMaybeMessage<NotificationHistoryProto_Notification_Icon>(nullptr);
  }

  NotificationHistoryProto_Notification_Icon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationHistoryProto_Notification_Icon>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationHistoryProto_Notification_Icon& from);
  void MergeFrom(const NotificationHistoryProto_Notification_Icon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationHistoryProto_Notification_Icon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.notification.NotificationHistoryProto.Notification.Icon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageBitmapFilenameFieldNumber = 2,
    kImageResourceIdPackageFieldNumber = 4,
    kImageDataFieldNumber = 5,
    kImageUriFieldNumber = 8,
    kImageTypeFieldNumber = 1,
    kImageResourceIdFieldNumber = 3,
    kImageDataLengthFieldNumber = 6,
    kImageDataOffsetFieldNumber = 7,
  };
  // optional string image_bitmap_filename = 2;
  bool has_image_bitmap_filename() const;
  void clear_image_bitmap_filename();
  const std::string& image_bitmap_filename() const;
  void set_image_bitmap_filename(const std::string& value);
  void set_image_bitmap_filename(std::string&& value);
  void set_image_bitmap_filename(const char* value);
  void set_image_bitmap_filename(const char* value, size_t size);
  std::string* mutable_image_bitmap_filename();
  std::string* release_image_bitmap_filename();
  void set_allocated_image_bitmap_filename(std::string* image_bitmap_filename);

  // optional string image_resource_id_package = 4;
  bool has_image_resource_id_package() const;
  void clear_image_resource_id_package();
  const std::string& image_resource_id_package() const;
  void set_image_resource_id_package(const std::string& value);
  void set_image_resource_id_package(std::string&& value);
  void set_image_resource_id_package(const char* value);
  void set_image_resource_id_package(const char* value, size_t size);
  std::string* mutable_image_resource_id_package();
  std::string* release_image_resource_id_package();
  void set_allocated_image_resource_id_package(std::string* image_resource_id_package);

  // optional bytes image_data = 5;
  bool has_image_data() const;
  void clear_image_data();
  const std::string& image_data() const;
  void set_image_data(const std::string& value);
  void set_image_data(std::string&& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  std::string* mutable_image_data();
  std::string* release_image_data();
  void set_allocated_image_data(std::string* image_data);

  // optional string image_uri = 8;
  bool has_image_uri() const;
  void clear_image_uri();
  const std::string& image_uri() const;
  void set_image_uri(const std::string& value);
  void set_image_uri(std::string&& value);
  void set_image_uri(const char* value);
  void set_image_uri(const char* value, size_t size);
  std::string* mutable_image_uri();
  std::string* release_image_uri();
  void set_allocated_image_uri(std::string* image_uri);

  // optional .com.android.server.notification.NotificationHistoryProto.Notification.ImageTypeEnum image_type = 1;
  bool has_image_type() const;
  void clear_image_type();
  ::com::android::server::notification::NotificationHistoryProto_Notification_ImageTypeEnum image_type() const;
  void set_image_type(::com::android::server::notification::NotificationHistoryProto_Notification_ImageTypeEnum value);

  // optional int32 image_resource_id = 3;
  bool has_image_resource_id() const;
  void clear_image_resource_id();
  ::PROTOBUF_NAMESPACE_ID::int32 image_resource_id() const;
  void set_image_resource_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 image_data_length = 6;
  bool has_image_data_length() const;
  void clear_image_data_length();
  ::PROTOBUF_NAMESPACE_ID::int32 image_data_length() const;
  void set_image_data_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 image_data_offset = 7;
  bool has_image_data_offset() const;
  void clear_image_data_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 image_data_offset() const;
  void set_image_data_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.notification.NotificationHistoryProto.Notification.Icon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_bitmap_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_resource_id_package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_uri_;
  int image_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_resource_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_data_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_data_offset_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto;
};
// -------------------------------------------------------------------

class NotificationHistoryProto_Notification :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.notification.NotificationHistoryProto.Notification) */ {
 public:
  NotificationHistoryProto_Notification();
  virtual ~NotificationHistoryProto_Notification();

  NotificationHistoryProto_Notification(const NotificationHistoryProto_Notification& from);
  NotificationHistoryProto_Notification(NotificationHistoryProto_Notification&& from) noexcept
    : NotificationHistoryProto_Notification() {
    *this = ::std::move(from);
  }

  inline NotificationHistoryProto_Notification& operator=(const NotificationHistoryProto_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationHistoryProto_Notification& operator=(NotificationHistoryProto_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationHistoryProto_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationHistoryProto_Notification* internal_default_instance() {
    return reinterpret_cast<const NotificationHistoryProto_Notification*>(
               &_NotificationHistoryProto_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NotificationHistoryProto_Notification& a, NotificationHistoryProto_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationHistoryProto_Notification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationHistoryProto_Notification* New() const final {
    return CreateMaybeMessage<NotificationHistoryProto_Notification>(nullptr);
  }

  NotificationHistoryProto_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationHistoryProto_Notification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationHistoryProto_Notification& from);
  void MergeFrom(const NotificationHistoryProto_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationHistoryProto_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.notification.NotificationHistoryProto.Notification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NotificationHistoryProto_Notification_Icon Icon;

  typedef NotificationHistoryProto_Notification_ImageTypeEnum ImageTypeEnum;
  static constexpr ImageTypeEnum TYPE_UNKNOWN =
    NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_UNKNOWN;
  static constexpr ImageTypeEnum TYPE_BITMAP =
    NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_BITMAP;
  static constexpr ImageTypeEnum TYPE_RESOURCE =
    NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_RESOURCE;
  static constexpr ImageTypeEnum TYPE_DATA =
    NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_DATA;
  static constexpr ImageTypeEnum TYPE_URI =
    NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_URI;
  static constexpr ImageTypeEnum TYPE_ADAPTIVE_BITMAP =
    NotificationHistoryProto_Notification_ImageTypeEnum_TYPE_ADAPTIVE_BITMAP;
  static inline bool ImageTypeEnum_IsValid(int value) {
    return NotificationHistoryProto_Notification_ImageTypeEnum_IsValid(value);
  }
  static constexpr ImageTypeEnum ImageTypeEnum_MIN =
    NotificationHistoryProto_Notification_ImageTypeEnum_ImageTypeEnum_MIN;
  static constexpr ImageTypeEnum ImageTypeEnum_MAX =
    NotificationHistoryProto_Notification_ImageTypeEnum_ImageTypeEnum_MAX;
  static constexpr int ImageTypeEnum_ARRAYSIZE =
    NotificationHistoryProto_Notification_ImageTypeEnum_ImageTypeEnum_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ImageTypeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ImageTypeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ImageTypeEnum_Name.");
    return NotificationHistoryProto_Notification_ImageTypeEnum_Name(enum_t_value);
  }
  static inline bool ImageTypeEnum_Parse(const std::string& name,
      ImageTypeEnum* value) {
    return NotificationHistoryProto_Notification_ImageTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
    kChannelNameFieldNumber = 3,
    kChannelIdFieldNumber = 5,
    kTitleFieldNumber = 10,
    kTextFieldNumber = 11,
    kConversationIdFieldNumber = 13,
    kIconFieldNumber = 12,
    kPackageIndexFieldNumber = 2,
    kChannelNameIndexFieldNumber = 4,
    kChannelIdIndexFieldNumber = 6,
    kUidFieldNumber = 7,
    kPostedTimeMsFieldNumber = 9,
    kUserIdFieldNumber = 8,
    kConversationIdIndexFieldNumber = 14,
  };
  // optional string package = 1;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional string channel_name = 3 [(.android.privacy) = {
  bool has_channel_name() const;
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);

  // optional string channel_id = 5;
  bool has_channel_id() const;
  void clear_channel_id();
  const std::string& channel_id() const;
  void set_channel_id(const std::string& value);
  void set_channel_id(std::string&& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  std::string* mutable_channel_id();
  std::string* release_channel_id();
  void set_allocated_channel_id(std::string* channel_id);

  // optional string title = 10 [(.android.privacy) = {
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string text = 11 [(.android.privacy) = {
  bool has_text() const;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // optional string conversation_id = 13;
  bool has_conversation_id() const;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  void set_conversation_id(const std::string& value);
  void set_conversation_id(std::string&& value);
  void set_conversation_id(const char* value);
  void set_conversation_id(const char* value, size_t size);
  std::string* mutable_conversation_id();
  std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);

  // optional .com.android.server.notification.NotificationHistoryProto.Notification.Icon icon = 12;
  bool has_icon() const;
  void clear_icon();
  const ::com::android::server::notification::NotificationHistoryProto_Notification_Icon& icon() const;
  ::com::android::server::notification::NotificationHistoryProto_Notification_Icon* release_icon();
  ::com::android::server::notification::NotificationHistoryProto_Notification_Icon* mutable_icon();
  void set_allocated_icon(::com::android::server::notification::NotificationHistoryProto_Notification_Icon* icon);

  // optional int32 package_index = 2;
  bool has_package_index() const;
  void clear_package_index();
  ::PROTOBUF_NAMESPACE_ID::int32 package_index() const;
  void set_package_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 channel_name_index = 4;
  bool has_channel_name_index() const;
  void clear_channel_name_index();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_name_index() const;
  void set_channel_name_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 channel_id_index = 6;
  bool has_channel_id_index() const;
  void clear_channel_id_index();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id_index() const;
  void set_channel_id_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 uid = 7;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 posted_time_ms = 9;
  bool has_posted_time_ms() const;
  void clear_posted_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 posted_time_ms() const;
  void set_posted_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 user_id = 8;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 conversation_id_index = 14;
  bool has_conversation_id_index() const;
  void clear_conversation_id_index();
  ::PROTOBUF_NAMESPACE_ID::int32 conversation_id_index() const;
  void set_conversation_id_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.notification.NotificationHistoryProto.Notification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
  ::com::android::server::notification::NotificationHistoryProto_Notification_Icon* icon_;
  ::PROTOBUF_NAMESPACE_ID::int32 package_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_name_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 posted_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 conversation_id_index_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto;
};
// -------------------------------------------------------------------

class NotificationHistoryProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.notification.NotificationHistoryProto) */ {
 public:
  NotificationHistoryProto();
  virtual ~NotificationHistoryProto();

  NotificationHistoryProto(const NotificationHistoryProto& from);
  NotificationHistoryProto(NotificationHistoryProto&& from) noexcept
    : NotificationHistoryProto() {
    *this = ::std::move(from);
  }

  inline NotificationHistoryProto& operator=(const NotificationHistoryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationHistoryProto& operator=(NotificationHistoryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationHistoryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationHistoryProto* internal_default_instance() {
    return reinterpret_cast<const NotificationHistoryProto*>(
               &_NotificationHistoryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NotificationHistoryProto& a, NotificationHistoryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationHistoryProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationHistoryProto* New() const final {
    return CreateMaybeMessage<NotificationHistoryProto>(nullptr);
  }

  NotificationHistoryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationHistoryProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationHistoryProto& from);
  void MergeFrom(const NotificationHistoryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationHistoryProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.notification.NotificationHistoryProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NotificationHistoryProto_StringPool StringPool;
  typedef NotificationHistoryProto_Notification Notification;

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationFieldNumber = 3,
    kStringPoolFieldNumber = 1,
    kMajorVersionFieldNumber = 2,
  };
  // repeated .com.android.server.notification.NotificationHistoryProto.Notification notification = 3;
  int notification_size() const;
  void clear_notification();
  ::com::android::server::notification::NotificationHistoryProto_Notification* mutable_notification(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::notification::NotificationHistoryProto_Notification >*
      mutable_notification();
  const ::com::android::server::notification::NotificationHistoryProto_Notification& notification(int index) const;
  ::com::android::server::notification::NotificationHistoryProto_Notification* add_notification();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::notification::NotificationHistoryProto_Notification >&
      notification() const;

  // optional .com.android.server.notification.NotificationHistoryProto.StringPool string_pool = 1;
  bool has_string_pool() const;
  void clear_string_pool();
  const ::com::android::server::notification::NotificationHistoryProto_StringPool& string_pool() const;
  ::com::android::server::notification::NotificationHistoryProto_StringPool* release_string_pool();
  ::com::android::server::notification::NotificationHistoryProto_StringPool* mutable_string_pool();
  void set_allocated_string_pool(::com::android::server::notification::NotificationHistoryProto_StringPool* string_pool);

  // optional int32 major_version = 2;
  bool has_major_version() const;
  void clear_major_version();
  ::PROTOBUF_NAMESPACE_ID::int32 major_version() const;
  void set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.notification.NotificationHistoryProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::notification::NotificationHistoryProto_Notification > notification_;
  ::com::android::server::notification::NotificationHistoryProto_StringPool* string_pool_;
  ::PROTOBUF_NAMESPACE_ID::int32 major_version_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationHistoryProto_StringPool

// optional int32 size = 1;
inline bool NotificationHistoryProto_StringPool::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationHistoryProto_StringPool::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_StringPool::size() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.StringPool.size)
  return size_;
}
inline void NotificationHistoryProto_StringPool::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.StringPool.size)
}

// repeated string strings = 2;
inline int NotificationHistoryProto_StringPool::strings_size() const {
  return strings_.size();
}
inline void NotificationHistoryProto_StringPool::clear_strings() {
  strings_.Clear();
}
inline const std::string& NotificationHistoryProto_StringPool::strings(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
  return strings_.Get(index);
}
inline std::string* NotificationHistoryProto_StringPool::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
  return strings_.Mutable(index);
}
inline void NotificationHistoryProto_StringPool::set_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
  strings_.Mutable(index)->assign(value);
}
inline void NotificationHistoryProto_StringPool::set_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
inline void NotificationHistoryProto_StringPool::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
}
inline void NotificationHistoryProto_StringPool::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
}
inline std::string* NotificationHistoryProto_StringPool::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
  return strings_.Add();
}
inline void NotificationHistoryProto_StringPool::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
}
inline void NotificationHistoryProto_StringPool::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
}
inline void NotificationHistoryProto_StringPool::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
}
inline void NotificationHistoryProto_StringPool::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NotificationHistoryProto_StringPool::strings() const {
  // @@protoc_insertion_point(field_list:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NotificationHistoryProto_StringPool::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.notification.NotificationHistoryProto.StringPool.strings)
  return &strings_;
}

// -------------------------------------------------------------------

// NotificationHistoryProto_Notification_Icon

// optional .com.android.server.notification.NotificationHistoryProto.Notification.ImageTypeEnum image_type = 1;
inline bool NotificationHistoryProto_Notification_Icon::has_image_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationHistoryProto_Notification_Icon::clear_image_type() {
  image_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::com::android::server::notification::NotificationHistoryProto_Notification_ImageTypeEnum NotificationHistoryProto_Notification_Icon::image_type() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_type)
  return static_cast< ::com::android::server::notification::NotificationHistoryProto_Notification_ImageTypeEnum >(image_type_);
}
inline void NotificationHistoryProto_Notification_Icon::set_image_type(::com::android::server::notification::NotificationHistoryProto_Notification_ImageTypeEnum value) {
  assert(::com::android::server::notification::NotificationHistoryProto_Notification_ImageTypeEnum_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  image_type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_type)
}

// optional string image_bitmap_filename = 2;
inline bool NotificationHistoryProto_Notification_Icon::has_image_bitmap_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationHistoryProto_Notification_Icon::clear_image_bitmap_filename() {
  image_bitmap_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationHistoryProto_Notification_Icon::image_bitmap_filename() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_bitmap_filename)
  return image_bitmap_filename_.GetNoArena();
}
inline void NotificationHistoryProto_Notification_Icon::set_image_bitmap_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_bitmap_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_bitmap_filename)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_bitmap_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_bitmap_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_bitmap_filename)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_bitmap_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_bitmap_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_bitmap_filename)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_bitmap_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_bitmap_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_bitmap_filename)
}
inline std::string* NotificationHistoryProto_Notification_Icon::mutable_image_bitmap_filename() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_bitmap_filename)
  return image_bitmap_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification_Icon::release_image_bitmap_filename() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_bitmap_filename)
  if (!has_image_bitmap_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_bitmap_filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification_Icon::set_allocated_image_bitmap_filename(std::string* image_bitmap_filename) {
  if (image_bitmap_filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_bitmap_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_bitmap_filename);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_bitmap_filename)
}

// optional int32 image_resource_id = 3;
inline bool NotificationHistoryProto_Notification_Icon::has_image_resource_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotificationHistoryProto_Notification_Icon::clear_image_resource_id() {
  image_resource_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification_Icon::image_resource_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id)
  return image_resource_id_;
}
inline void NotificationHistoryProto_Notification_Icon::set_image_resource_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  image_resource_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id)
}

// optional string image_resource_id_package = 4;
inline bool NotificationHistoryProto_Notification_Icon::has_image_resource_id_package() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationHistoryProto_Notification_Icon::clear_image_resource_id_package() {
  image_resource_id_package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationHistoryProto_Notification_Icon::image_resource_id_package() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id_package)
  return image_resource_id_package_.GetNoArena();
}
inline void NotificationHistoryProto_Notification_Icon::set_image_resource_id_package(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  image_resource_id_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id_package)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_resource_id_package(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  image_resource_id_package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id_package)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_resource_id_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  image_resource_id_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id_package)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_resource_id_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  image_resource_id_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id_package)
}
inline std::string* NotificationHistoryProto_Notification_Icon::mutable_image_resource_id_package() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id_package)
  return image_resource_id_package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification_Icon::release_image_resource_id_package() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id_package)
  if (!has_image_resource_id_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return image_resource_id_package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification_Icon::set_allocated_image_resource_id_package(std::string* image_resource_id_package) {
  if (image_resource_id_package != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  image_resource_id_package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_resource_id_package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_resource_id_package)
}

// optional bytes image_data = 5;
inline bool NotificationHistoryProto_Notification_Icon::has_image_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationHistoryProto_Notification_Icon::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NotificationHistoryProto_Notification_Icon::image_data() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data)
  return image_data_.GetNoArena();
}
inline void NotificationHistoryProto_Notification_Icon::set_image_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_data(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  image_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  image_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data)
}
inline std::string* NotificationHistoryProto_Notification_Icon::mutable_image_data() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data)
  return image_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification_Icon::release_image_data() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data)
  if (!has_image_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return image_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification_Icon::set_allocated_image_data(std::string* image_data) {
  if (image_data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  image_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data)
}

// optional int32 image_data_length = 6;
inline bool NotificationHistoryProto_Notification_Icon::has_image_data_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotificationHistoryProto_Notification_Icon::clear_image_data_length() {
  image_data_length_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification_Icon::image_data_length() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data_length)
  return image_data_length_;
}
inline void NotificationHistoryProto_Notification_Icon::set_image_data_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  image_data_length_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data_length)
}

// optional int32 image_data_offset = 7;
inline bool NotificationHistoryProto_Notification_Icon::has_image_data_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotificationHistoryProto_Notification_Icon::clear_image_data_offset() {
  image_data_offset_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification_Icon::image_data_offset() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data_offset)
  return image_data_offset_;
}
inline void NotificationHistoryProto_Notification_Icon::set_image_data_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  image_data_offset_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_data_offset)
}

// optional string image_uri = 8;
inline bool NotificationHistoryProto_Notification_Icon::has_image_uri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationHistoryProto_Notification_Icon::clear_image_uri() {
  image_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NotificationHistoryProto_Notification_Icon::image_uri() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_uri)
  return image_uri_.GetNoArena();
}
inline void NotificationHistoryProto_Notification_Icon::set_image_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  image_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_uri)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  image_uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_uri)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  image_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_uri)
}
inline void NotificationHistoryProto_Notification_Icon::set_image_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  image_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_uri)
}
inline std::string* NotificationHistoryProto_Notification_Icon::mutable_image_uri() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_uri)
  return image_uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification_Icon::release_image_uri() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_uri)
  if (!has_image_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return image_uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification_Icon::set_allocated_image_uri(std::string* image_uri) {
  if (image_uri != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  image_uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_uri);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.Icon.image_uri)
}

// -------------------------------------------------------------------

// NotificationHistoryProto_Notification

// optional string package = 1;
inline bool NotificationHistoryProto_Notification::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationHistoryProto_Notification::package() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.package)
  return package_.GetNoArena();
}
inline void NotificationHistoryProto_Notification::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.package)
}
inline void NotificationHistoryProto_Notification::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.package)
}
inline void NotificationHistoryProto_Notification::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.package)
}
inline void NotificationHistoryProto_Notification::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.package)
}
inline std::string* NotificationHistoryProto_Notification::mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification::release_package() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.package)
}

// optional int32 package_index = 2;
inline bool NotificationHistoryProto_Notification::has_package_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_package_index() {
  package_index_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification::package_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.package_index)
  return package_index_;
}
inline void NotificationHistoryProto_Notification::set_package_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  package_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.package_index)
}

// optional string channel_name = 3 [(.android.privacy) = {
inline bool NotificationHistoryProto_Notification::has_channel_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationHistoryProto_Notification::channel_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.channel_name)
  return channel_name_.GetNoArena();
}
inline void NotificationHistoryProto_Notification::set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.channel_name)
}
inline void NotificationHistoryProto_Notification::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.channel_name)
}
inline void NotificationHistoryProto_Notification::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.channel_name)
}
inline void NotificationHistoryProto_Notification::set_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.channel_name)
}
inline std::string* NotificationHistoryProto_Notification::mutable_channel_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.channel_name)
  return channel_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification::release_channel_name() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.channel_name)
  if (!has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return channel_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.channel_name)
}

// optional int32 channel_name_index = 4;
inline bool NotificationHistoryProto_Notification::has_channel_name_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_channel_name_index() {
  channel_name_index_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification::channel_name_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.channel_name_index)
  return channel_name_index_;
}
inline void NotificationHistoryProto_Notification::set_channel_name_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  channel_name_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.channel_name_index)
}

// optional string channel_id = 5;
inline bool NotificationHistoryProto_Notification::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NotificationHistoryProto_Notification::channel_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.channel_id)
  return channel_id_.GetNoArena();
}
inline void NotificationHistoryProto_Notification::set_channel_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.channel_id)
}
inline void NotificationHistoryProto_Notification::set_channel_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  channel_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.channel_id)
}
inline void NotificationHistoryProto_Notification::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.channel_id)
}
inline void NotificationHistoryProto_Notification::set_channel_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.channel_id)
}
inline std::string* NotificationHistoryProto_Notification::mutable_channel_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.channel_id)
  return channel_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification::release_channel_id() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.channel_id)
  if (!has_channel_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return channel_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification::set_allocated_channel_id(std::string* channel_id) {
  if (channel_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  channel_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.channel_id)
}

// optional int32 channel_id_index = 6;
inline bool NotificationHistoryProto_Notification::has_channel_id_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_channel_id_index() {
  channel_id_index_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification::channel_id_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.channel_id_index)
  return channel_id_index_;
}
inline void NotificationHistoryProto_Notification::set_channel_id_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  channel_id_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.channel_id_index)
}

// optional int32 uid = 7;
inline bool NotificationHistoryProto_Notification::has_uid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification::uid() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.uid)
  return uid_;
}
inline void NotificationHistoryProto_Notification::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.uid)
}

// optional int32 user_id = 8;
inline bool NotificationHistoryProto_Notification::has_user_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.user_id)
  return user_id_;
}
inline void NotificationHistoryProto_Notification::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.user_id)
}

// optional int64 posted_time_ms = 9;
inline bool NotificationHistoryProto_Notification::has_posted_time_ms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_posted_time_ms() {
  posted_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationHistoryProto_Notification::posted_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.posted_time_ms)
  return posted_time_ms_;
}
inline void NotificationHistoryProto_Notification::set_posted_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  posted_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.posted_time_ms)
}

// optional string title = 10 [(.android.privacy) = {
inline bool NotificationHistoryProto_Notification::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NotificationHistoryProto_Notification::title() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.title)
  return title_.GetNoArena();
}
inline void NotificationHistoryProto_Notification::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.title)
}
inline void NotificationHistoryProto_Notification::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.title)
}
inline void NotificationHistoryProto_Notification::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.title)
}
inline void NotificationHistoryProto_Notification::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.title)
}
inline std::string* NotificationHistoryProto_Notification::mutable_title() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification::release_title() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.title)
}

// optional string text = 11 [(.android.privacy) = {
inline bool NotificationHistoryProto_Notification::has_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NotificationHistoryProto_Notification::text() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.text)
  return text_.GetNoArena();
}
inline void NotificationHistoryProto_Notification::set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.text)
}
inline void NotificationHistoryProto_Notification::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.text)
}
inline void NotificationHistoryProto_Notification::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.text)
}
inline void NotificationHistoryProto_Notification::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.text)
}
inline std::string* NotificationHistoryProto_Notification::mutable_text() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.text)
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification::release_text() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.text)
}

// optional .com.android.server.notification.NotificationHistoryProto.Notification.Icon icon = 12;
inline bool NotificationHistoryProto_Notification::has_icon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_icon() {
  if (icon_ != nullptr) icon_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::android::server::notification::NotificationHistoryProto_Notification_Icon& NotificationHistoryProto_Notification::icon() const {
  const ::com::android::server::notification::NotificationHistoryProto_Notification_Icon* p = icon_;
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.icon)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::notification::NotificationHistoryProto_Notification_Icon*>(
      &::com::android::server::notification::_NotificationHistoryProto_Notification_Icon_default_instance_);
}
inline ::com::android::server::notification::NotificationHistoryProto_Notification_Icon* NotificationHistoryProto_Notification::release_icon() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.icon)
  _has_bits_[0] &= ~0x00000040u;
  ::com::android::server::notification::NotificationHistoryProto_Notification_Icon* temp = icon_;
  icon_ = nullptr;
  return temp;
}
inline ::com::android::server::notification::NotificationHistoryProto_Notification_Icon* NotificationHistoryProto_Notification::mutable_icon() {
  _has_bits_[0] |= 0x00000040u;
  if (icon_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::notification::NotificationHistoryProto_Notification_Icon>(GetArenaNoVirtual());
    icon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.icon)
  return icon_;
}
inline void NotificationHistoryProto_Notification::set_allocated_icon(::com::android::server::notification::NotificationHistoryProto_Notification_Icon* icon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete icon_;
  }
  if (icon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      icon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  icon_ = icon;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.icon)
}

// optional string conversation_id = 13;
inline bool NotificationHistoryProto_Notification::has_conversation_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_conversation_id() {
  conversation_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NotificationHistoryProto_Notification::conversation_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id)
  return conversation_id_.GetNoArena();
}
inline void NotificationHistoryProto_Notification::set_conversation_id(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  conversation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id)
}
inline void NotificationHistoryProto_Notification::set_conversation_id(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  conversation_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id)
}
inline void NotificationHistoryProto_Notification::set_conversation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  conversation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id)
}
inline void NotificationHistoryProto_Notification::set_conversation_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  conversation_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id)
}
inline std::string* NotificationHistoryProto_Notification::mutable_conversation_id() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id)
  return conversation_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationHistoryProto_Notification::release_conversation_id() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id)
  if (!has_conversation_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return conversation_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationHistoryProto_Notification::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  conversation_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_id);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id)
}

// optional int32 conversation_id_index = 14;
inline bool NotificationHistoryProto_Notification::has_conversation_id_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NotificationHistoryProto_Notification::clear_conversation_id_index() {
  conversation_id_index_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto_Notification::conversation_id_index() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id_index)
  return conversation_id_index_;
}
inline void NotificationHistoryProto_Notification::set_conversation_id_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  conversation_id_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.Notification.conversation_id_index)
}

// -------------------------------------------------------------------

// NotificationHistoryProto

// optional .com.android.server.notification.NotificationHistoryProto.StringPool string_pool = 1;
inline bool NotificationHistoryProto::has_string_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationHistoryProto::clear_string_pool() {
  if (string_pool_ != nullptr) string_pool_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::notification::NotificationHistoryProto_StringPool& NotificationHistoryProto::string_pool() const {
  const ::com::android::server::notification::NotificationHistoryProto_StringPool* p = string_pool_;
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.string_pool)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::notification::NotificationHistoryProto_StringPool*>(
      &::com::android::server::notification::_NotificationHistoryProto_StringPool_default_instance_);
}
inline ::com::android::server::notification::NotificationHistoryProto_StringPool* NotificationHistoryProto::release_string_pool() {
  // @@protoc_insertion_point(field_release:com.android.server.notification.NotificationHistoryProto.string_pool)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::notification::NotificationHistoryProto_StringPool* temp = string_pool_;
  string_pool_ = nullptr;
  return temp;
}
inline ::com::android::server::notification::NotificationHistoryProto_StringPool* NotificationHistoryProto::mutable_string_pool() {
  _has_bits_[0] |= 0x00000001u;
  if (string_pool_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::notification::NotificationHistoryProto_StringPool>(GetArenaNoVirtual());
    string_pool_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.string_pool)
  return string_pool_;
}
inline void NotificationHistoryProto::set_allocated_string_pool(::com::android::server::notification::NotificationHistoryProto_StringPool* string_pool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete string_pool_;
  }
  if (string_pool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      string_pool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_pool, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_pool_ = string_pool;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.notification.NotificationHistoryProto.string_pool)
}

// optional int32 major_version = 2;
inline bool NotificationHistoryProto::has_major_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationHistoryProto::clear_major_version() {
  major_version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationHistoryProto::major_version() const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.major_version)
  return major_version_;
}
inline void NotificationHistoryProto::set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  major_version_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.notification.NotificationHistoryProto.major_version)
}

// repeated .com.android.server.notification.NotificationHistoryProto.Notification notification = 3;
inline int NotificationHistoryProto::notification_size() const {
  return notification_.size();
}
inline void NotificationHistoryProto::clear_notification() {
  notification_.Clear();
}
inline ::com::android::server::notification::NotificationHistoryProto_Notification* NotificationHistoryProto::mutable_notification(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.notification.NotificationHistoryProto.notification)
  return notification_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::notification::NotificationHistoryProto_Notification >*
NotificationHistoryProto::mutable_notification() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.notification.NotificationHistoryProto.notification)
  return &notification_;
}
inline const ::com::android::server::notification::NotificationHistoryProto_Notification& NotificationHistoryProto::notification(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.notification.NotificationHistoryProto.notification)
  return notification_.Get(index);
}
inline ::com::android::server::notification::NotificationHistoryProto_Notification* NotificationHistoryProto::add_notification() {
  // @@protoc_insertion_point(field_add:com.android.server.notification.NotificationHistoryProto.notification)
  return notification_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::notification::NotificationHistoryProto_Notification >&
NotificationHistoryProto::notification() const {
  // @@protoc_insertion_point(field_list:com.android.server.notification.NotificationHistoryProto.notification)
  return notification_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace notification
}  // namespace server
}  // namespace android
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::android::server::notification::NotificationHistoryProto_Notification_ImageTypeEnum> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fnotificationhistory_2eproto
