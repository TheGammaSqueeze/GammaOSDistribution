// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/kernelwake.proto

#include "frameworks/base/core/proto/android/os/kernelwake.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KernelWakeSourcesProto_WakeupSource_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto;
namespace android {
namespace os {
class KernelWakeSourcesProto_WakeupSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KernelWakeSourcesProto_WakeupSource> _instance;
} _KernelWakeSourcesProto_WakeupSource_default_instance_;
class KernelWakeSourcesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KernelWakeSourcesProto> _instance;
} _KernelWakeSourcesProto_default_instance_;
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_KernelWakeSourcesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_KernelWakeSourcesProto_default_instance_;
    new (ptr) ::android::os::KernelWakeSourcesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::KernelWakeSourcesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KernelWakeSourcesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_KernelWakeSourcesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto}, {
      &scc_info_KernelWakeSourcesProto_WakeupSource_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto.base,}};

static void InitDefaultsscc_info_KernelWakeSourcesProto_WakeupSource_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_KernelWakeSourcesProto_WakeupSource_default_instance_;
    new (ptr) ::android::os::KernelWakeSourcesProto_WakeupSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::KernelWakeSourcesProto_WakeupSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KernelWakeSourcesProto_WakeupSource_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KernelWakeSourcesProto_WakeupSource_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto}, {}};

namespace android {
namespace os {

// ===================================================================

void KernelWakeSourcesProto_WakeupSource::InitAsDefaultInstance() {
}
class KernelWakeSourcesProto_WakeupSource::_Internal {
 public:
  using HasBits = decltype(std::declval<KernelWakeSourcesProto_WakeupSource>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wakeup_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expire_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_active_since(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_change(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prevent_suspend_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

KernelWakeSourcesProto_WakeupSource::KernelWakeSourcesProto_WakeupSource()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.KernelWakeSourcesProto.WakeupSource)
}
KernelWakeSourcesProto_WakeupSource::KernelWakeSourcesProto_WakeupSource(const KernelWakeSourcesProto_WakeupSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&active_count_, &from.active_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&prevent_suspend_time_) -
    reinterpret_cast<char*>(&active_count_)) + sizeof(prevent_suspend_time_));
  // @@protoc_insertion_point(copy_constructor:android.os.KernelWakeSourcesProto.WakeupSource)
}

void KernelWakeSourcesProto_WakeupSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KernelWakeSourcesProto_WakeupSource_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prevent_suspend_time_) -
      reinterpret_cast<char*>(&active_count_)) + sizeof(prevent_suspend_time_));
}

KernelWakeSourcesProto_WakeupSource::~KernelWakeSourcesProto_WakeupSource() {
  // @@protoc_insertion_point(destructor:android.os.KernelWakeSourcesProto.WakeupSource)
  SharedDtor();
}

void KernelWakeSourcesProto_WakeupSource::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KernelWakeSourcesProto_WakeupSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KernelWakeSourcesProto_WakeupSource& KernelWakeSourcesProto_WakeupSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KernelWakeSourcesProto_WakeupSource_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto.base);
  return *internal_default_instance();
}


void KernelWakeSourcesProto_WakeupSource::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.KernelWakeSourcesProto.WakeupSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&active_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_time_) -
        reinterpret_cast<char*>(&active_count_)) + sizeof(max_time_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&last_change_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prevent_suspend_time_) -
        reinterpret_cast<char*>(&last_change_)) + sizeof(prevent_suspend_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KernelWakeSourcesProto_WakeupSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 active_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_active_count(&has_bits);
          active_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_event_count(&has_bits);
          event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wakeup_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wakeup_count(&has_bits);
          wakeup_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 expire_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_expire_count(&has_bits);
          expire_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 active_since = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_active_since(&has_bits);
          active_since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_total_time(&has_bits);
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_time(&has_bits);
          max_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_change = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_last_change(&has_bits);
          last_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 prevent_suspend_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_prevent_suspend_time(&has_bits);
          prevent_suspend_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KernelWakeSourcesProto_WakeupSource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.KernelWakeSourcesProto.WakeupSource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 active_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_active_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_event_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wakeup_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_wakeup_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wakeup_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 expire_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_expire_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 active_since = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_active_since(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_since_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_total_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_max_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_change = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_last_change(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 prevent_suspend_time = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_prevent_suspend_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prevent_suspend_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.KernelWakeSourcesProto.WakeupSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.KernelWakeSourcesProto.WakeupSource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KernelWakeSourcesProto_WakeupSource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.KernelWakeSourcesProto.WakeupSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 active_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->active_count(), output);
  }

  // optional int32 event_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->event_count(), output);
  }

  // optional int32 wakeup_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->wakeup_count(), output);
  }

  // optional int32 expire_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->expire_count(), output);
  }

  // optional int64 active_since = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->active_since(), output);
  }

  // optional int64 total_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->total_time(), output);
  }

  // optional int64 max_time = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->max_time(), output);
  }

  // optional int64 last_change = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->last_change(), output);
  }

  // optional int64 prevent_suspend_time = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->prevent_suspend_time(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.KernelWakeSourcesProto.WakeupSource)
}

size_t KernelWakeSourcesProto_WakeupSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.KernelWakeSourcesProto.WakeupSource)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 active_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->active_count());
    }

    // optional int32 event_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->event_count());
    }

    // optional int32 wakeup_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->wakeup_count());
    }

    // optional int32 expire_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->expire_count());
    }

    // optional int64 active_since = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->active_since());
    }

    // optional int64 total_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_time());
    }

    // optional int64 max_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_time());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 last_change = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_change());
    }

    // optional int64 prevent_suspend_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->prevent_suspend_time());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KernelWakeSourcesProto_WakeupSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KernelWakeSourcesProto_WakeupSource*>(
      &from));
}

void KernelWakeSourcesProto_WakeupSource::MergeFrom(const KernelWakeSourcesProto_WakeupSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.KernelWakeSourcesProto.WakeupSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      active_count_ = from.active_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_count_ = from.event_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      wakeup_count_ = from.wakeup_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      expire_count_ = from.expire_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      active_since_ = from.active_since_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_time_ = from.total_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_time_ = from.max_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      last_change_ = from.last_change_;
    }
    if (cached_has_bits & 0x00000200u) {
      prevent_suspend_time_ = from.prevent_suspend_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KernelWakeSourcesProto_WakeupSource::CopyFrom(const KernelWakeSourcesProto_WakeupSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.KernelWakeSourcesProto.WakeupSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelWakeSourcesProto_WakeupSource::IsInitialized() const {
  return true;
}

void KernelWakeSourcesProto_WakeupSource::InternalSwap(KernelWakeSourcesProto_WakeupSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_count_, other->active_count_);
  swap(event_count_, other->event_count_);
  swap(wakeup_count_, other->wakeup_count_);
  swap(expire_count_, other->expire_count_);
  swap(active_since_, other->active_since_);
  swap(total_time_, other->total_time_);
  swap(max_time_, other->max_time_);
  swap(last_change_, other->last_change_);
  swap(prevent_suspend_time_, other->prevent_suspend_time_);
}

std::string KernelWakeSourcesProto_WakeupSource::GetTypeName() const {
  return "android.os.KernelWakeSourcesProto.WakeupSource";
}


// ===================================================================

void KernelWakeSourcesProto::InitAsDefaultInstance() {
}
class KernelWakeSourcesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<KernelWakeSourcesProto>()._has_bits_);
};

KernelWakeSourcesProto::KernelWakeSourcesProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.KernelWakeSourcesProto)
}
KernelWakeSourcesProto::KernelWakeSourcesProto(const KernelWakeSourcesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      wakeup_sources_(from.wakeup_sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.os.KernelWakeSourcesProto)
}

void KernelWakeSourcesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KernelWakeSourcesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto.base);
}

KernelWakeSourcesProto::~KernelWakeSourcesProto() {
  // @@protoc_insertion_point(destructor:android.os.KernelWakeSourcesProto)
  SharedDtor();
}

void KernelWakeSourcesProto::SharedDtor() {
}

void KernelWakeSourcesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KernelWakeSourcesProto& KernelWakeSourcesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KernelWakeSourcesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto.base);
  return *internal_default_instance();
}


void KernelWakeSourcesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.KernelWakeSourcesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wakeup_sources_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KernelWakeSourcesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.os.KernelWakeSourcesProto.WakeupSource wakeup_sources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_wakeup_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KernelWakeSourcesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.KernelWakeSourcesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.os.KernelWakeSourcesProto.WakeupSource wakeup_sources = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wakeup_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.KernelWakeSourcesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.KernelWakeSourcesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KernelWakeSourcesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.KernelWakeSourcesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.os.KernelWakeSourcesProto.WakeupSource wakeup_sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wakeup_sources_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->wakeup_sources(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.KernelWakeSourcesProto)
}

size_t KernelWakeSourcesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.KernelWakeSourcesProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.KernelWakeSourcesProto.WakeupSource wakeup_sources = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->wakeup_sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wakeup_sources(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KernelWakeSourcesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KernelWakeSourcesProto*>(
      &from));
}

void KernelWakeSourcesProto::MergeFrom(const KernelWakeSourcesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.KernelWakeSourcesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wakeup_sources_.MergeFrom(from.wakeup_sources_);
}

void KernelWakeSourcesProto::CopyFrom(const KernelWakeSourcesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.KernelWakeSourcesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelWakeSourcesProto::IsInitialized() const {
  return true;
}

void KernelWakeSourcesProto::InternalSwap(KernelWakeSourcesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&wakeup_sources_)->InternalSwap(CastToBase(&other->wakeup_sources_));
}

std::string KernelWakeSourcesProto::GetTypeName() const {
  return "android.os.KernelWakeSourcesProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::KernelWakeSourcesProto_WakeupSource* Arena::CreateMaybeMessage< ::android::os::KernelWakeSourcesProto_WakeupSource >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::KernelWakeSourcesProto_WakeupSource >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::KernelWakeSourcesProto* Arena::CreateMaybeMessage< ::android::os::KernelWakeSourcesProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::KernelWakeSourcesProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
