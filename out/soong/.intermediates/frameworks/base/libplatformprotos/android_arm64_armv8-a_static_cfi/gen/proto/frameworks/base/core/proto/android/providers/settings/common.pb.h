// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/providers/settings/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace providers {
namespace settings {
class SettingProto;
class SettingProtoDefaultTypeInternal;
extern SettingProtoDefaultTypeInternal _SettingProto_default_instance_;
class SettingsOperationProto;
class SettingsOperationProtoDefaultTypeInternal;
extern SettingsOperationProtoDefaultTypeInternal _SettingsOperationProto_default_instance_;
}  // namespace settings
}  // namespace providers
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::providers::settings::SettingProto* Arena::CreateMaybeMessage<::android::providers::settings::SettingProto>(Arena*);
template<> ::android::providers::settings::SettingsOperationProto* Arena::CreateMaybeMessage<::android::providers::settings::SettingsOperationProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace providers {
namespace settings {

// ===================================================================

class SettingProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SettingProto) */ {
 public:
  SettingProto();
  virtual ~SettingProto();

  SettingProto(const SettingProto& from);
  SettingProto(SettingProto&& from) noexcept
    : SettingProto() {
    *this = ::std::move(from);
  }

  inline SettingProto& operator=(const SettingProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingProto& operator=(SettingProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SettingProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingProto* internal_default_instance() {
    return reinterpret_cast<const SettingProto*>(
               &_SettingProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SettingProto& a, SettingProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettingProto* New() const final {
    return CreateMaybeMessage<SettingProto>(nullptr);
  }

  SettingProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettingProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SettingProto& from);
  void MergeFrom(const SettingProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SettingProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SettingProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kPkgFieldNumber = 3,
    kValueFieldNumber = 4,
    kDefaultValueFieldNumber = 5,
    kDefaultFromSystemFieldNumber = 6,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string pkg = 3;
  bool has_pkg() const;
  void clear_pkg();
  const std::string& pkg() const;
  void set_pkg(const std::string& value);
  void set_pkg(std::string&& value);
  void set_pkg(const char* value);
  void set_pkg(const char* value, size_t size);
  std::string* mutable_pkg();
  std::string* release_pkg();
  void set_allocated_pkg(std::string* pkg);

  // optional string value = 4;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // optional string default_value = 5;
  bool has_default_value() const;
  void clear_default_value();
  const std::string& default_value() const;
  void set_default_value(const std::string& value);
  void set_default_value(std::string&& value);
  void set_default_value(const char* value);
  void set_default_value(const char* value, size_t size);
  std::string* mutable_default_value();
  std::string* release_default_value();
  void set_allocated_default_value(std::string* default_value);

  // optional bool default_from_system = 6;
  bool has_default_from_system() const;
  void clear_default_from_system();
  bool default_from_system() const;
  void set_default_from_system(bool value);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SettingProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pkg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_value_;
  bool default_from_system_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class SettingsOperationProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SettingsOperationProto) */ {
 public:
  SettingsOperationProto();
  virtual ~SettingsOperationProto();

  SettingsOperationProto(const SettingsOperationProto& from);
  SettingsOperationProto(SettingsOperationProto&& from) noexcept
    : SettingsOperationProto() {
    *this = ::std::move(from);
  }

  inline SettingsOperationProto& operator=(const SettingsOperationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettingsOperationProto& operator=(SettingsOperationProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SettingsOperationProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettingsOperationProto* internal_default_instance() {
    return reinterpret_cast<const SettingsOperationProto*>(
               &_SettingsOperationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SettingsOperationProto& a, SettingsOperationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SettingsOperationProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettingsOperationProto* New() const final {
    return CreateMaybeMessage<SettingsOperationProto>(nullptr);
  }

  SettingsOperationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettingsOperationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SettingsOperationProto& from);
  void MergeFrom(const SettingsOperationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SettingsOperationProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SettingsOperationProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 2,
    kSettingFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // optional string operation = 2;
  bool has_operation() const;
  void clear_operation();
  const std::string& operation() const;
  void set_operation(const std::string& value);
  void set_operation(std::string&& value);
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  std::string* mutable_operation();
  std::string* release_operation();
  void set_allocated_operation(std::string* operation);

  // optional string setting = 3;
  bool has_setting() const;
  void clear_setting();
  const std::string& setting() const;
  void set_setting(const std::string& value);
  void set_setting(std::string&& value);
  void set_setting(const char* value);
  void set_setting(const char* value, size_t size);
  std::string* mutable_setting();
  std::string* release_setting();
  void set_allocated_setting(std::string* setting);

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SettingsOperationProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setting_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SettingProto

// optional string id = 1;
inline bool SettingProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SettingProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SettingProto::id() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingProto.id)
  return id_.GetNoArena();
}
inline void SettingProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingProto.id)
}
inline void SettingProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.providers.settings.SettingProto.id)
}
inline void SettingProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.providers.settings.SettingProto.id)
}
inline void SettingProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.providers.settings.SettingProto.id)
}
inline std::string* SettingProto::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SettingProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingProto::release_id() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SettingProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SettingProto.id)
}

// optional string name = 2;
inline bool SettingProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SettingProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SettingProto::name() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingProto.name)
  return name_.GetNoArena();
}
inline void SettingProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingProto.name)
}
inline void SettingProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.providers.settings.SettingProto.name)
}
inline void SettingProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.providers.settings.SettingProto.name)
}
inline void SettingProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.providers.settings.SettingProto.name)
}
inline std::string* SettingProto::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SettingProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingProto::release_name() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SettingProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SettingProto.name)
}

// optional string pkg = 3;
inline bool SettingProto::has_pkg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SettingProto::clear_pkg() {
  pkg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SettingProto::pkg() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingProto.pkg)
  return pkg_.GetNoArena();
}
inline void SettingProto::set_pkg(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingProto.pkg)
}
inline void SettingProto::set_pkg(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pkg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.providers.settings.SettingProto.pkg)
}
inline void SettingProto::set_pkg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.providers.settings.SettingProto.pkg)
}
inline void SettingProto::set_pkg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.providers.settings.SettingProto.pkg)
}
inline std::string* SettingProto::mutable_pkg() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SettingProto.pkg)
  return pkg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingProto::release_pkg() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SettingProto.pkg)
  if (!has_pkg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pkg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingProto::set_allocated_pkg(std::string* pkg) {
  if (pkg != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pkg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pkg);
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SettingProto.pkg)
}

// optional string value = 4;
inline bool SettingProto::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SettingProto::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SettingProto::value() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingProto.value)
  return value_.GetNoArena();
}
inline void SettingProto::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingProto.value)
}
inline void SettingProto::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.providers.settings.SettingProto.value)
}
inline void SettingProto::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.providers.settings.SettingProto.value)
}
inline void SettingProto::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.providers.settings.SettingProto.value)
}
inline std::string* SettingProto::mutable_value() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SettingProto.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingProto::release_value() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SettingProto.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingProto::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SettingProto.value)
}

// optional string default_value = 5;
inline bool SettingProto::has_default_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SettingProto::clear_default_value() {
  default_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SettingProto::default_value() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingProto.default_value)
  return default_value_.GetNoArena();
}
inline void SettingProto::set_default_value(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  default_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingProto.default_value)
}
inline void SettingProto::set_default_value(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  default_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.providers.settings.SettingProto.default_value)
}
inline void SettingProto::set_default_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  default_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.providers.settings.SettingProto.default_value)
}
inline void SettingProto::set_default_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  default_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.providers.settings.SettingProto.default_value)
}
inline std::string* SettingProto::mutable_default_value() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SettingProto.default_value)
  return default_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingProto::release_default_value() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SettingProto.default_value)
  if (!has_default_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return default_value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingProto::set_allocated_default_value(std::string* default_value) {
  if (default_value != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  default_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_value);
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SettingProto.default_value)
}

// optional bool default_from_system = 6;
inline bool SettingProto::has_default_from_system() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SettingProto::clear_default_from_system() {
  default_from_system_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SettingProto::default_from_system() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingProto.default_from_system)
  return default_from_system_;
}
inline void SettingProto::set_default_from_system(bool value) {
  _has_bits_[0] |= 0x00000020u;
  default_from_system_ = value;
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingProto.default_from_system)
}

// -------------------------------------------------------------------

// SettingsOperationProto

// optional int64 timestamp = 1;
inline bool SettingsOperationProto::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SettingsOperationProto::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SettingsOperationProto::timestamp() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingsOperationProto.timestamp)
  return timestamp_;
}
inline void SettingsOperationProto::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingsOperationProto.timestamp)
}

// optional string operation = 2;
inline bool SettingsOperationProto::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SettingsOperationProto::clear_operation() {
  operation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SettingsOperationProto::operation() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingsOperationProto.operation)
  return operation_.GetNoArena();
}
inline void SettingsOperationProto::set_operation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingsOperationProto.operation)
}
inline void SettingsOperationProto::set_operation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  operation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.providers.settings.SettingsOperationProto.operation)
}
inline void SettingsOperationProto::set_operation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  operation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.providers.settings.SettingsOperationProto.operation)
}
inline void SettingsOperationProto::set_operation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  operation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.providers.settings.SettingsOperationProto.operation)
}
inline std::string* SettingsOperationProto::mutable_operation() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SettingsOperationProto.operation)
  return operation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingsOperationProto::release_operation() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SettingsOperationProto.operation)
  if (!has_operation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return operation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingsOperationProto::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  operation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation);
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SettingsOperationProto.operation)
}

// optional string setting = 3;
inline bool SettingsOperationProto::has_setting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SettingsOperationProto::clear_setting() {
  setting_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SettingsOperationProto::setting() const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SettingsOperationProto.setting)
  return setting_.GetNoArena();
}
inline void SettingsOperationProto::set_setting(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  setting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.providers.settings.SettingsOperationProto.setting)
}
inline void SettingsOperationProto::set_setting(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  setting_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.providers.settings.SettingsOperationProto.setting)
}
inline void SettingsOperationProto::set_setting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  setting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.providers.settings.SettingsOperationProto.setting)
}
inline void SettingsOperationProto::set_setting(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  setting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.providers.settings.SettingsOperationProto.setting)
}
inline std::string* SettingsOperationProto::mutable_setting() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SettingsOperationProto.setting)
  return setting_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettingsOperationProto::release_setting() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SettingsOperationProto.setting)
  if (!has_setting()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return setting_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettingsOperationProto::set_allocated_setting(std::string* setting) {
  if (setting != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  setting_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setting);
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SettingsOperationProto.setting)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace settings
}  // namespace providers
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto
