// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/internal/binder_latency.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace internal {
namespace os {
class ApiStats;
class ApiStatsDefaultTypeInternal;
extern ApiStatsDefaultTypeInternal _ApiStats_default_instance_;
class Dims;
class DimsDefaultTypeInternal;
extern DimsDefaultTypeInternal _Dims_default_instance_;
class RepeatedApiStats;
class RepeatedApiStatsDefaultTypeInternal;
extern RepeatedApiStatsDefaultTypeInternal _RepeatedApiStats_default_instance_;
}  // namespace os
}  // namespace internal
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::internal::os::ApiStats* Arena::CreateMaybeMessage<::com::android::internal::os::ApiStats>(Arena*);
template<> ::com::android::internal::os::Dims* Arena::CreateMaybeMessage<::com::android::internal::os::Dims>(Arena*);
template<> ::com::android::internal::os::RepeatedApiStats* Arena::CreateMaybeMessage<::com::android::internal::os::RepeatedApiStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace internal {
namespace os {

enum Dims_ProcessSource : int {
  Dims_ProcessSource_UNKNOWN_PROCESS_SOURCE = 0,
  Dims_ProcessSource_SYSTEM_SERVER = 1,
  Dims_ProcessSource_TELEPHONY = 2,
  Dims_ProcessSource_BLUETOOTH = 3
};
bool Dims_ProcessSource_IsValid(int value);
constexpr Dims_ProcessSource Dims_ProcessSource_ProcessSource_MIN = Dims_ProcessSource_UNKNOWN_PROCESS_SOURCE;
constexpr Dims_ProcessSource Dims_ProcessSource_ProcessSource_MAX = Dims_ProcessSource_BLUETOOTH;
constexpr int Dims_ProcessSource_ProcessSource_ARRAYSIZE = Dims_ProcessSource_ProcessSource_MAX + 1;

const std::string& Dims_ProcessSource_Name(Dims_ProcessSource value);
template<typename T>
inline const std::string& Dims_ProcessSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dims_ProcessSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dims_ProcessSource_Name.");
  return Dims_ProcessSource_Name(static_cast<Dims_ProcessSource>(enum_t_value));
}
bool Dims_ProcessSource_Parse(
    const std::string& name, Dims_ProcessSource* value);
enum Dims_ServiceClassName : int {
  Dims_ServiceClassName_UNKNOWN_CLASS = 0
};
bool Dims_ServiceClassName_IsValid(int value);
constexpr Dims_ServiceClassName Dims_ServiceClassName_ServiceClassName_MIN = Dims_ServiceClassName_UNKNOWN_CLASS;
constexpr Dims_ServiceClassName Dims_ServiceClassName_ServiceClassName_MAX = Dims_ServiceClassName_UNKNOWN_CLASS;
constexpr int Dims_ServiceClassName_ServiceClassName_ARRAYSIZE = Dims_ServiceClassName_ServiceClassName_MAX + 1;

const std::string& Dims_ServiceClassName_Name(Dims_ServiceClassName value);
template<typename T>
inline const std::string& Dims_ServiceClassName_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dims_ServiceClassName>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dims_ServiceClassName_Name.");
  return Dims_ServiceClassName_Name(static_cast<Dims_ServiceClassName>(enum_t_value));
}
bool Dims_ServiceClassName_Parse(
    const std::string& name, Dims_ServiceClassName* value);
enum Dims_ServiceMethodName : int {
  Dims_ServiceMethodName_UNKNOWN_METHOD = 0
};
bool Dims_ServiceMethodName_IsValid(int value);
constexpr Dims_ServiceMethodName Dims_ServiceMethodName_ServiceMethodName_MIN = Dims_ServiceMethodName_UNKNOWN_METHOD;
constexpr Dims_ServiceMethodName Dims_ServiceMethodName_ServiceMethodName_MAX = Dims_ServiceMethodName_UNKNOWN_METHOD;
constexpr int Dims_ServiceMethodName_ServiceMethodName_ARRAYSIZE = Dims_ServiceMethodName_ServiceMethodName_MAX + 1;

const std::string& Dims_ServiceMethodName_Name(Dims_ServiceMethodName value);
template<typename T>
inline const std::string& Dims_ServiceMethodName_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dims_ServiceMethodName>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dims_ServiceMethodName_Name.");
  return Dims_ServiceMethodName_Name(static_cast<Dims_ServiceMethodName>(enum_t_value));
}
bool Dims_ServiceMethodName_Parse(
    const std::string& name, Dims_ServiceMethodName* value);
// ===================================================================

class RepeatedApiStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.internal.os.RepeatedApiStats) */ {
 public:
  RepeatedApiStats();
  virtual ~RepeatedApiStats();

  RepeatedApiStats(const RepeatedApiStats& from);
  RepeatedApiStats(RepeatedApiStats&& from) noexcept
    : RepeatedApiStats() {
    *this = ::std::move(from);
  }

  inline RepeatedApiStats& operator=(const RepeatedApiStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedApiStats& operator=(RepeatedApiStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RepeatedApiStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedApiStats* internal_default_instance() {
    return reinterpret_cast<const RepeatedApiStats*>(
               &_RepeatedApiStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RepeatedApiStats& a, RepeatedApiStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedApiStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedApiStats* New() const final {
    return CreateMaybeMessage<RepeatedApiStats>(nullptr);
  }

  RepeatedApiStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedApiStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RepeatedApiStats& from);
  void MergeFrom(const RepeatedApiStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RepeatedApiStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.internal.os.RepeatedApiStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiStatsFieldNumber = 1,
  };
  // repeated .com.android.internal.os.ApiStats api_stats = 1;
  int api_stats_size() const;
  void clear_api_stats();
  ::com::android::internal::os::ApiStats* mutable_api_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::internal::os::ApiStats >*
      mutable_api_stats();
  const ::com::android::internal::os::ApiStats& api_stats(int index) const;
  ::com::android::internal::os::ApiStats* add_api_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::internal::os::ApiStats >&
      api_stats() const;

  // @@protoc_insertion_point(class_scope:com.android.internal.os.RepeatedApiStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::internal::os::ApiStats > api_stats_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto;
};
// -------------------------------------------------------------------

class Dims :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.internal.os.Dims) */ {
 public:
  Dims();
  virtual ~Dims();

  Dims(const Dims& from);
  Dims(Dims&& from) noexcept
    : Dims() {
    *this = ::std::move(from);
  }

  inline Dims& operator=(const Dims& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dims& operator=(Dims&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dims& default_instance();

  enum ServiceClassCase {
    kServiceClassNameAsEnum = 2,
    kServiceClassName = 3,
    SERVICE_CLASS_NOT_SET = 0,
  };

  enum ServiceMethodCase {
    kServiceMethodNameAsEnum = 4,
    kServiceMethodName = 5,
    SERVICE_METHOD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dims* internal_default_instance() {
    return reinterpret_cast<const Dims*>(
               &_Dims_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Dims& a, Dims& b) {
    a.Swap(&b);
  }
  inline void Swap(Dims* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dims* New() const final {
    return CreateMaybeMessage<Dims>(nullptr);
  }

  Dims* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dims>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Dims& from);
  void MergeFrom(const Dims& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dims* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.internal.os.Dims";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Dims_ProcessSource ProcessSource;
  static constexpr ProcessSource UNKNOWN_PROCESS_SOURCE =
    Dims_ProcessSource_UNKNOWN_PROCESS_SOURCE;
  static constexpr ProcessSource SYSTEM_SERVER =
    Dims_ProcessSource_SYSTEM_SERVER;
  static constexpr ProcessSource TELEPHONY =
    Dims_ProcessSource_TELEPHONY;
  static constexpr ProcessSource BLUETOOTH =
    Dims_ProcessSource_BLUETOOTH;
  static inline bool ProcessSource_IsValid(int value) {
    return Dims_ProcessSource_IsValid(value);
  }
  static constexpr ProcessSource ProcessSource_MIN =
    Dims_ProcessSource_ProcessSource_MIN;
  static constexpr ProcessSource ProcessSource_MAX =
    Dims_ProcessSource_ProcessSource_MAX;
  static constexpr int ProcessSource_ARRAYSIZE =
    Dims_ProcessSource_ProcessSource_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProcessSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessSource_Name.");
    return Dims_ProcessSource_Name(enum_t_value);
  }
  static inline bool ProcessSource_Parse(const std::string& name,
      ProcessSource* value) {
    return Dims_ProcessSource_Parse(name, value);
  }

  typedef Dims_ServiceClassName ServiceClassName;
  static constexpr ServiceClassName UNKNOWN_CLASS =
    Dims_ServiceClassName_UNKNOWN_CLASS;
  static inline bool ServiceClassName_IsValid(int value) {
    return Dims_ServiceClassName_IsValid(value);
  }
  static constexpr ServiceClassName ServiceClassName_MIN =
    Dims_ServiceClassName_ServiceClassName_MIN;
  static constexpr ServiceClassName ServiceClassName_MAX =
    Dims_ServiceClassName_ServiceClassName_MAX;
  static constexpr int ServiceClassName_ARRAYSIZE =
    Dims_ServiceClassName_ServiceClassName_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ServiceClassName_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceClassName>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceClassName_Name.");
    return Dims_ServiceClassName_Name(enum_t_value);
  }
  static inline bool ServiceClassName_Parse(const std::string& name,
      ServiceClassName* value) {
    return Dims_ServiceClassName_Parse(name, value);
  }

  typedef Dims_ServiceMethodName ServiceMethodName;
  static constexpr ServiceMethodName UNKNOWN_METHOD =
    Dims_ServiceMethodName_UNKNOWN_METHOD;
  static inline bool ServiceMethodName_IsValid(int value) {
    return Dims_ServiceMethodName_IsValid(value);
  }
  static constexpr ServiceMethodName ServiceMethodName_MIN =
    Dims_ServiceMethodName_ServiceMethodName_MIN;
  static constexpr ServiceMethodName ServiceMethodName_MAX =
    Dims_ServiceMethodName_ServiceMethodName_MAX;
  static constexpr int ServiceMethodName_ARRAYSIZE =
    Dims_ServiceMethodName_ServiceMethodName_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ServiceMethodName_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServiceMethodName>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServiceMethodName_Name.");
    return Dims_ServiceMethodName_Name(enum_t_value);
  }
  static inline bool ServiceMethodName_Parse(const std::string& name,
      ServiceMethodName* value) {
    return Dims_ServiceMethodName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProcessSourceFieldNumber = 1,
    kServiceClassNameAsEnumFieldNumber = 2,
    kServiceClassNameFieldNumber = 3,
    kServiceMethodNameAsEnumFieldNumber = 4,
    kServiceMethodNameFieldNumber = 5,
  };
  // optional .com.android.internal.os.Dims.ProcessSource process_source = 1;
  bool has_process_source() const;
  void clear_process_source();
  ::com::android::internal::os::Dims_ProcessSource process_source() const;
  void set_process_source(::com::android::internal::os::Dims_ProcessSource value);

  // optional .com.android.internal.os.Dims.ServiceClassName service_class_name_as_enum = 2;
  bool has_service_class_name_as_enum() const;
  void clear_service_class_name_as_enum();
  ::com::android::internal::os::Dims_ServiceClassName service_class_name_as_enum() const;
  void set_service_class_name_as_enum(::com::android::internal::os::Dims_ServiceClassName value);

  // optional string service_class_name = 3;
  bool has_service_class_name() const;
  void clear_service_class_name();
  const std::string& service_class_name() const;
  void set_service_class_name(const std::string& value);
  void set_service_class_name(std::string&& value);
  void set_service_class_name(const char* value);
  void set_service_class_name(const char* value, size_t size);
  std::string* mutable_service_class_name();
  std::string* release_service_class_name();
  void set_allocated_service_class_name(std::string* service_class_name);

  // optional .com.android.internal.os.Dims.ServiceMethodName service_method_name_as_enum = 4;
  bool has_service_method_name_as_enum() const;
  void clear_service_method_name_as_enum();
  ::com::android::internal::os::Dims_ServiceMethodName service_method_name_as_enum() const;
  void set_service_method_name_as_enum(::com::android::internal::os::Dims_ServiceMethodName value);

  // optional string service_method_name = 5;
  bool has_service_method_name() const;
  void clear_service_method_name();
  const std::string& service_method_name() const;
  void set_service_method_name(const std::string& value);
  void set_service_method_name(std::string&& value);
  void set_service_method_name(const char* value);
  void set_service_method_name(const char* value, size_t size);
  std::string* mutable_service_method_name();
  std::string* release_service_method_name();
  void set_allocated_service_method_name(std::string* service_method_name);

  void clear_service_class();
  ServiceClassCase service_class_case() const;
  void clear_service_method();
  ServiceMethodCase service_method_case() const;
  // @@protoc_insertion_point(class_scope:com.android.internal.os.Dims)
 private:
  class _Internal;
  void set_has_service_class_name_as_enum();
  void set_has_service_class_name();
  void set_has_service_method_name_as_enum();
  void set_has_service_method_name();

  inline bool has_service_class() const;
  inline void clear_has_service_class();

  inline bool has_service_method() const;
  inline void clear_has_service_method();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int process_source_;
  union ServiceClassUnion {
    ServiceClassUnion() {}
    int service_class_name_as_enum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_class_name_;
  } service_class_;
  union ServiceMethodUnion {
    ServiceMethodUnion() {}
    int service_method_name_as_enum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_method_name_;
  } service_method_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto;
};
// -------------------------------------------------------------------

class ApiStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.internal.os.ApiStats) */ {
 public:
  ApiStats();
  virtual ~ApiStats();

  ApiStats(const ApiStats& from);
  ApiStats(ApiStats&& from) noexcept
    : ApiStats() {
    *this = ::std::move(from);
  }

  inline ApiStats& operator=(const ApiStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiStats& operator=(ApiStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ApiStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApiStats* internal_default_instance() {
    return reinterpret_cast<const ApiStats*>(
               &_ApiStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ApiStats& a, ApiStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApiStats* New() const final {
    return CreateMaybeMessage<ApiStats>(nullptr);
  }

  ApiStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApiStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ApiStats& from);
  void MergeFrom(const ApiStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApiStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.internal.os.ApiStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 3,
    kDimsFieldNumber = 1,
    kFirstBucketIndexFieldNumber = 2,
    kBucketCountFieldNumber = 4,
    kFirstBucketSizeFieldNumber = 5,
    kScaleFactorFieldNumber = 6,
  };
  // repeated int32 buckets = 3;
  int buckets_size() const;
  void clear_buckets();
  ::PROTOBUF_NAMESPACE_ID::int32 buckets(int index) const;
  void set_buckets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buckets(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buckets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buckets();

  // optional .com.android.internal.os.Dims dims = 1;
  bool has_dims() const;
  void clear_dims();
  const ::com::android::internal::os::Dims& dims() const;
  ::com::android::internal::os::Dims* release_dims();
  ::com::android::internal::os::Dims* mutable_dims();
  void set_allocated_dims(::com::android::internal::os::Dims* dims);

  // optional int32 first_bucket_index = 2;
  bool has_first_bucket_index() const;
  void clear_first_bucket_index();
  ::PROTOBUF_NAMESPACE_ID::int32 first_bucket_index() const;
  void set_first_bucket_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 bucket_count = 4;
  bool has_bucket_count() const;
  void clear_bucket_count();
  ::PROTOBUF_NAMESPACE_ID::int32 bucket_count() const;
  void set_bucket_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 first_bucket_size = 5;
  bool has_first_bucket_size() const;
  void clear_first_bucket_size();
  ::PROTOBUF_NAMESPACE_ID::int32 first_bucket_size() const;
  void set_first_bucket_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float scale_factor = 6;
  bool has_scale_factor() const;
  void clear_scale_factor();
  float scale_factor() const;
  void set_scale_factor(float value);

  // @@protoc_insertion_point(class_scope:com.android.internal.os.ApiStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buckets_;
  ::com::android::internal::os::Dims* dims_;
  ::PROTOBUF_NAMESPACE_ID::int32 first_bucket_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 bucket_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 first_bucket_size_;
  float scale_factor_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RepeatedApiStats

// repeated .com.android.internal.os.ApiStats api_stats = 1;
inline int RepeatedApiStats::api_stats_size() const {
  return api_stats_.size();
}
inline void RepeatedApiStats::clear_api_stats() {
  api_stats_.Clear();
}
inline ::com::android::internal::os::ApiStats* RepeatedApiStats::mutable_api_stats(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.internal.os.RepeatedApiStats.api_stats)
  return api_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::internal::os::ApiStats >*
RepeatedApiStats::mutable_api_stats() {
  // @@protoc_insertion_point(field_mutable_list:com.android.internal.os.RepeatedApiStats.api_stats)
  return &api_stats_;
}
inline const ::com::android::internal::os::ApiStats& RepeatedApiStats::api_stats(int index) const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.RepeatedApiStats.api_stats)
  return api_stats_.Get(index);
}
inline ::com::android::internal::os::ApiStats* RepeatedApiStats::add_api_stats() {
  // @@protoc_insertion_point(field_add:com.android.internal.os.RepeatedApiStats.api_stats)
  return api_stats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::internal::os::ApiStats >&
RepeatedApiStats::api_stats() const {
  // @@protoc_insertion_point(field_list:com.android.internal.os.RepeatedApiStats.api_stats)
  return api_stats_;
}

// -------------------------------------------------------------------

// Dims

// optional .com.android.internal.os.Dims.ProcessSource process_source = 1;
inline bool Dims::has_process_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dims::clear_process_source() {
  process_source_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::com::android::internal::os::Dims_ProcessSource Dims::process_source() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.Dims.process_source)
  return static_cast< ::com::android::internal::os::Dims_ProcessSource >(process_source_);
}
inline void Dims::set_process_source(::com::android::internal::os::Dims_ProcessSource value) {
  assert(::com::android::internal::os::Dims_ProcessSource_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  process_source_ = value;
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.process_source)
}

// optional .com.android.internal.os.Dims.ServiceClassName service_class_name_as_enum = 2;
inline bool Dims::has_service_class_name_as_enum() const {
  return service_class_case() == kServiceClassNameAsEnum;
}
inline void Dims::set_has_service_class_name_as_enum() {
  _oneof_case_[0] = kServiceClassNameAsEnum;
}
inline void Dims::clear_service_class_name_as_enum() {
  if (has_service_class_name_as_enum()) {
    service_class_.service_class_name_as_enum_ = 0;
    clear_has_service_class();
  }
}
inline ::com::android::internal::os::Dims_ServiceClassName Dims::service_class_name_as_enum() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.Dims.service_class_name_as_enum)
  if (has_service_class_name_as_enum()) {
    return static_cast< ::com::android::internal::os::Dims_ServiceClassName >(service_class_.service_class_name_as_enum_);
  }
  return static_cast< ::com::android::internal::os::Dims_ServiceClassName >(0);
}
inline void Dims::set_service_class_name_as_enum(::com::android::internal::os::Dims_ServiceClassName value) {
  assert(::com::android::internal::os::Dims_ServiceClassName_IsValid(value));
  if (!has_service_class_name_as_enum()) {
    clear_service_class();
    set_has_service_class_name_as_enum();
  }
  service_class_.service_class_name_as_enum_ = value;
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.service_class_name_as_enum)
}

// optional string service_class_name = 3;
inline bool Dims::has_service_class_name() const {
  return service_class_case() == kServiceClassName;
}
inline void Dims::set_has_service_class_name() {
  _oneof_case_[0] = kServiceClassName;
}
inline void Dims::clear_service_class_name() {
  if (has_service_class_name()) {
    service_class_.service_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_service_class();
  }
}
inline const std::string& Dims::service_class_name() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.Dims.service_class_name)
  if (has_service_class_name()) {
    return service_class_.service_class_name_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Dims::set_service_class_name(const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.service_class_name)
  if (!has_service_class_name()) {
    clear_service_class();
    set_has_service_class_name();
    service_class_.service_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  service_class_.service_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.service_class_name)
}
inline void Dims::set_service_class_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.service_class_name)
  if (!has_service_class_name()) {
    clear_service_class();
    set_has_service_class_name();
    service_class_.service_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  service_class_.service_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.internal.os.Dims.service_class_name)
}
inline void Dims::set_service_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_service_class_name()) {
    clear_service_class();
    set_has_service_class_name();
    service_class_.service_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  service_class_.service_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.internal.os.Dims.service_class_name)
}
inline void Dims::set_service_class_name(const char* value, size_t size) {
  if (!has_service_class_name()) {
    clear_service_class();
    set_has_service_class_name();
    service_class_.service_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  service_class_.service_class_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.internal.os.Dims.service_class_name)
}
inline std::string* Dims::mutable_service_class_name() {
  if (!has_service_class_name()) {
    clear_service_class();
    set_has_service_class_name();
    service_class_.service_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:com.android.internal.os.Dims.service_class_name)
  return service_class_.service_class_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dims::release_service_class_name() {
  // @@protoc_insertion_point(field_release:com.android.internal.os.Dims.service_class_name)
  if (has_service_class_name()) {
    clear_has_service_class();
    return service_class_.service_class_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Dims::set_allocated_service_class_name(std::string* service_class_name) {
  if (has_service_class()) {
    clear_service_class();
  }
  if (service_class_name != nullptr) {
    set_has_service_class_name();
    service_class_.service_class_name_.UnsafeSetDefault(service_class_name);
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.internal.os.Dims.service_class_name)
}

// optional .com.android.internal.os.Dims.ServiceMethodName service_method_name_as_enum = 4;
inline bool Dims::has_service_method_name_as_enum() const {
  return service_method_case() == kServiceMethodNameAsEnum;
}
inline void Dims::set_has_service_method_name_as_enum() {
  _oneof_case_[1] = kServiceMethodNameAsEnum;
}
inline void Dims::clear_service_method_name_as_enum() {
  if (has_service_method_name_as_enum()) {
    service_method_.service_method_name_as_enum_ = 0;
    clear_has_service_method();
  }
}
inline ::com::android::internal::os::Dims_ServiceMethodName Dims::service_method_name_as_enum() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.Dims.service_method_name_as_enum)
  if (has_service_method_name_as_enum()) {
    return static_cast< ::com::android::internal::os::Dims_ServiceMethodName >(service_method_.service_method_name_as_enum_);
  }
  return static_cast< ::com::android::internal::os::Dims_ServiceMethodName >(0);
}
inline void Dims::set_service_method_name_as_enum(::com::android::internal::os::Dims_ServiceMethodName value) {
  assert(::com::android::internal::os::Dims_ServiceMethodName_IsValid(value));
  if (!has_service_method_name_as_enum()) {
    clear_service_method();
    set_has_service_method_name_as_enum();
  }
  service_method_.service_method_name_as_enum_ = value;
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.service_method_name_as_enum)
}

// optional string service_method_name = 5;
inline bool Dims::has_service_method_name() const {
  return service_method_case() == kServiceMethodName;
}
inline void Dims::set_has_service_method_name() {
  _oneof_case_[1] = kServiceMethodName;
}
inline void Dims::clear_service_method_name() {
  if (has_service_method_name()) {
    service_method_.service_method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_service_method();
  }
}
inline const std::string& Dims::service_method_name() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.Dims.service_method_name)
  if (has_service_method_name()) {
    return service_method_.service_method_name_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Dims::set_service_method_name(const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.service_method_name)
  if (!has_service_method_name()) {
    clear_service_method();
    set_has_service_method_name();
    service_method_.service_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  service_method_.service_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.service_method_name)
}
inline void Dims::set_service_method_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.internal.os.Dims.service_method_name)
  if (!has_service_method_name()) {
    clear_service_method();
    set_has_service_method_name();
    service_method_.service_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  service_method_.service_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.internal.os.Dims.service_method_name)
}
inline void Dims::set_service_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_service_method_name()) {
    clear_service_method();
    set_has_service_method_name();
    service_method_.service_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  service_method_.service_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.internal.os.Dims.service_method_name)
}
inline void Dims::set_service_method_name(const char* value, size_t size) {
  if (!has_service_method_name()) {
    clear_service_method();
    set_has_service_method_name();
    service_method_.service_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  service_method_.service_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.internal.os.Dims.service_method_name)
}
inline std::string* Dims::mutable_service_method_name() {
  if (!has_service_method_name()) {
    clear_service_method();
    set_has_service_method_name();
    service_method_.service_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:com.android.internal.os.Dims.service_method_name)
  return service_method_.service_method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dims::release_service_method_name() {
  // @@protoc_insertion_point(field_release:com.android.internal.os.Dims.service_method_name)
  if (has_service_method_name()) {
    clear_has_service_method();
    return service_method_.service_method_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Dims::set_allocated_service_method_name(std::string* service_method_name) {
  if (has_service_method()) {
    clear_service_method();
  }
  if (service_method_name != nullptr) {
    set_has_service_method_name();
    service_method_.service_method_name_.UnsafeSetDefault(service_method_name);
  }
  // @@protoc_insertion_point(field_set_allocated:com.android.internal.os.Dims.service_method_name)
}

inline bool Dims::has_service_class() const {
  return service_class_case() != SERVICE_CLASS_NOT_SET;
}
inline void Dims::clear_has_service_class() {
  _oneof_case_[0] = SERVICE_CLASS_NOT_SET;
}
inline bool Dims::has_service_method() const {
  return service_method_case() != SERVICE_METHOD_NOT_SET;
}
inline void Dims::clear_has_service_method() {
  _oneof_case_[1] = SERVICE_METHOD_NOT_SET;
}
inline Dims::ServiceClassCase Dims::service_class_case() const {
  return Dims::ServiceClassCase(_oneof_case_[0]);
}
inline Dims::ServiceMethodCase Dims::service_method_case() const {
  return Dims::ServiceMethodCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// ApiStats

// optional .com.android.internal.os.Dims dims = 1;
inline bool ApiStats::has_dims() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApiStats::clear_dims() {
  if (dims_ != nullptr) dims_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::internal::os::Dims& ApiStats::dims() const {
  const ::com::android::internal::os::Dims* p = dims_;
  // @@protoc_insertion_point(field_get:com.android.internal.os.ApiStats.dims)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::internal::os::Dims*>(
      &::com::android::internal::os::_Dims_default_instance_);
}
inline ::com::android::internal::os::Dims* ApiStats::release_dims() {
  // @@protoc_insertion_point(field_release:com.android.internal.os.ApiStats.dims)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::internal::os::Dims* temp = dims_;
  dims_ = nullptr;
  return temp;
}
inline ::com::android::internal::os::Dims* ApiStats::mutable_dims() {
  _has_bits_[0] |= 0x00000001u;
  if (dims_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::internal::os::Dims>(GetArenaNoVirtual());
    dims_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.internal.os.ApiStats.dims)
  return dims_;
}
inline void ApiStats::set_allocated_dims(::com::android::internal::os::Dims* dims) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dims_;
  }
  if (dims) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dims = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dims, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dims_ = dims;
  // @@protoc_insertion_point(field_set_allocated:com.android.internal.os.ApiStats.dims)
}

// optional int32 first_bucket_index = 2;
inline bool ApiStats::has_first_bucket_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApiStats::clear_first_bucket_index() {
  first_bucket_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApiStats::first_bucket_index() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.ApiStats.first_bucket_index)
  return first_bucket_index_;
}
inline void ApiStats::set_first_bucket_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  first_bucket_index_ = value;
  // @@protoc_insertion_point(field_set:com.android.internal.os.ApiStats.first_bucket_index)
}

// repeated int32 buckets = 3;
inline int ApiStats::buckets_size() const {
  return buckets_.size();
}
inline void ApiStats::clear_buckets() {
  buckets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApiStats::buckets(int index) const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.ApiStats.buckets)
  return buckets_.Get(index);
}
inline void ApiStats::set_buckets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buckets_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.internal.os.ApiStats.buckets)
}
inline void ApiStats::add_buckets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buckets_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.internal.os.ApiStats.buckets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ApiStats::buckets() const {
  // @@protoc_insertion_point(field_list:com.android.internal.os.ApiStats.buckets)
  return buckets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ApiStats::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:com.android.internal.os.ApiStats.buckets)
  return &buckets_;
}

// optional int32 bucket_count = 4;
inline bool ApiStats::has_bucket_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApiStats::clear_bucket_count() {
  bucket_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApiStats::bucket_count() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.ApiStats.bucket_count)
  return bucket_count_;
}
inline void ApiStats::set_bucket_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  bucket_count_ = value;
  // @@protoc_insertion_point(field_set:com.android.internal.os.ApiStats.bucket_count)
}

// optional int32 first_bucket_size = 5;
inline bool ApiStats::has_first_bucket_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApiStats::clear_first_bucket_size() {
  first_bucket_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApiStats::first_bucket_size() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.ApiStats.first_bucket_size)
  return first_bucket_size_;
}
inline void ApiStats::set_first_bucket_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  first_bucket_size_ = value;
  // @@protoc_insertion_point(field_set:com.android.internal.os.ApiStats.first_bucket_size)
}

// optional float scale_factor = 6;
inline bool ApiStats::has_scale_factor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApiStats::clear_scale_factor() {
  scale_factor_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ApiStats::scale_factor() const {
  // @@protoc_insertion_point(field_get:com.android.internal.os.ApiStats.scale_factor)
  return scale_factor_;
}
inline void ApiStats::set_scale_factor(float value) {
  _has_bits_[0] |= 0x00000010u;
  scale_factor_ = value;
  // @@protoc_insertion_point(field_set:com.android.internal.os.ApiStats.scale_factor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace internal
}  // namespace android
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::android::internal::os::Dims_ProcessSource> : ::std::true_type {};
template <> struct is_proto_enum< ::com::android::internal::os::Dims_ServiceClassName> : ::std::true_type {};
template <> struct is_proto_enum< ::com::android::internal::os::Dims_ServiceMethodName> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fbinder_5flatency_2eproto
