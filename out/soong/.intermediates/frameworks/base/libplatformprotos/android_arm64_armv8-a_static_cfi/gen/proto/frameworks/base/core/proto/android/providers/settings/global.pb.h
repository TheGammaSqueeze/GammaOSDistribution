// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/providers/settings/global.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/providers/settings/common.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[67]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace providers {
namespace settings {
class GlobalSettingsProto;
class GlobalSettingsProtoDefaultTypeInternal;
extern GlobalSettingsProtoDefaultTypeInternal _GlobalSettingsProto_default_instance_;
class GlobalSettingsProto_AirplaneMode;
class GlobalSettingsProto_AirplaneModeDefaultTypeInternal;
extern GlobalSettingsProto_AirplaneModeDefaultTypeInternal _GlobalSettingsProto_AirplaneMode_default_instance_;
class GlobalSettingsProto_Anomaly;
class GlobalSettingsProto_AnomalyDefaultTypeInternal;
extern GlobalSettingsProto_AnomalyDefaultTypeInternal _GlobalSettingsProto_Anomaly_default_instance_;
class GlobalSettingsProto_ApnDb;
class GlobalSettingsProto_ApnDbDefaultTypeInternal;
extern GlobalSettingsProto_ApnDbDefaultTypeInternal _GlobalSettingsProto_ApnDb_default_instance_;
class GlobalSettingsProto_App;
class GlobalSettingsProto_AppDefaultTypeInternal;
extern GlobalSettingsProto_AppDefaultTypeInternal _GlobalSettingsProto_App_default_instance_;
class GlobalSettingsProto_Autofill;
class GlobalSettingsProto_AutofillDefaultTypeInternal;
extern GlobalSettingsProto_AutofillDefaultTypeInternal _GlobalSettingsProto_Autofill_default_instance_;
class GlobalSettingsProto_Backup;
class GlobalSettingsProto_BackupDefaultTypeInternal;
extern GlobalSettingsProto_BackupDefaultTypeInternal _GlobalSettingsProto_Backup_default_instance_;
class GlobalSettingsProto_Battery;
class GlobalSettingsProto_BatteryDefaultTypeInternal;
extern GlobalSettingsProto_BatteryDefaultTypeInternal _GlobalSettingsProto_Battery_default_instance_;
class GlobalSettingsProto_BleScan;
class GlobalSettingsProto_BleScanDefaultTypeInternal;
extern GlobalSettingsProto_BleScanDefaultTypeInternal _GlobalSettingsProto_BleScan_default_instance_;
class GlobalSettingsProto_Bluetooth;
class GlobalSettingsProto_BluetoothDefaultTypeInternal;
extern GlobalSettingsProto_BluetoothDefaultTypeInternal _GlobalSettingsProto_Bluetooth_default_instance_;
class GlobalSettingsProto_CaptivePortal;
class GlobalSettingsProto_CaptivePortalDefaultTypeInternal;
extern GlobalSettingsProto_CaptivePortalDefaultTypeInternal _GlobalSettingsProto_CaptivePortal_default_instance_;
class GlobalSettingsProto_Carrier;
class GlobalSettingsProto_CarrierDefaultTypeInternal;
extern GlobalSettingsProto_CarrierDefaultTypeInternal _GlobalSettingsProto_Carrier_default_instance_;
class GlobalSettingsProto_Cdma;
class GlobalSettingsProto_CdmaDefaultTypeInternal;
extern GlobalSettingsProto_CdmaDefaultTypeInternal _GlobalSettingsProto_Cdma_default_instance_;
class GlobalSettingsProto_CertPin;
class GlobalSettingsProto_CertPinDefaultTypeInternal;
extern GlobalSettingsProto_CertPinDefaultTypeInternal _GlobalSettingsProto_CertPin_default_instance_;
class GlobalSettingsProto_Connectivity;
class GlobalSettingsProto_ConnectivityDefaultTypeInternal;
extern GlobalSettingsProto_ConnectivityDefaultTypeInternal _GlobalSettingsProto_Connectivity_default_instance_;
class GlobalSettingsProto_Data;
class GlobalSettingsProto_DataDefaultTypeInternal;
extern GlobalSettingsProto_DataDefaultTypeInternal _GlobalSettingsProto_Data_default_instance_;
class GlobalSettingsProto_Database;
class GlobalSettingsProto_DatabaseDefaultTypeInternal;
extern GlobalSettingsProto_DatabaseDefaultTypeInternal _GlobalSettingsProto_Database_default_instance_;
class GlobalSettingsProto_DateTime;
class GlobalSettingsProto_DateTimeDefaultTypeInternal;
extern GlobalSettingsProto_DateTimeDefaultTypeInternal _GlobalSettingsProto_DateTime_default_instance_;
class GlobalSettingsProto_Debug;
class GlobalSettingsProto_DebugDefaultTypeInternal;
extern GlobalSettingsProto_DebugDefaultTypeInternal _GlobalSettingsProto_Debug_default_instance_;
class GlobalSettingsProto_Default;
class GlobalSettingsProto_DefaultDefaultTypeInternal;
extern GlobalSettingsProto_DefaultDefaultTypeInternal _GlobalSettingsProto_Default_default_instance_;
class GlobalSettingsProto_Development;
class GlobalSettingsProto_DevelopmentDefaultTypeInternal;
extern GlobalSettingsProto_DevelopmentDefaultTypeInternal _GlobalSettingsProto_Development_default_instance_;
class GlobalSettingsProto_Device;
class GlobalSettingsProto_DeviceDefaultTypeInternal;
extern GlobalSettingsProto_DeviceDefaultTypeInternal _GlobalSettingsProto_Device_default_instance_;
class GlobalSettingsProto_Display;
class GlobalSettingsProto_DisplayDefaultTypeInternal;
extern GlobalSettingsProto_DisplayDefaultTypeInternal _GlobalSettingsProto_Display_default_instance_;
class GlobalSettingsProto_DnsResolver;
class GlobalSettingsProto_DnsResolverDefaultTypeInternal;
extern GlobalSettingsProto_DnsResolverDefaultTypeInternal _GlobalSettingsProto_DnsResolver_default_instance_;
class GlobalSettingsProto_Download;
class GlobalSettingsProto_DownloadDefaultTypeInternal;
extern GlobalSettingsProto_DownloadDefaultTypeInternal _GlobalSettingsProto_Download_default_instance_;
class GlobalSettingsProto_Dropbox;
class GlobalSettingsProto_DropboxDefaultTypeInternal;
extern GlobalSettingsProto_DropboxDefaultTypeInternal _GlobalSettingsProto_Dropbox_default_instance_;
class GlobalSettingsProto_DynamicPowerSavings;
class GlobalSettingsProto_DynamicPowerSavingsDefaultTypeInternal;
extern GlobalSettingsProto_DynamicPowerSavingsDefaultTypeInternal _GlobalSettingsProto_DynamicPowerSavings_default_instance_;
class GlobalSettingsProto_Emergency;
class GlobalSettingsProto_EmergencyDefaultTypeInternal;
extern GlobalSettingsProto_EmergencyDefaultTypeInternal _GlobalSettingsProto_Emergency_default_instance_;
class GlobalSettingsProto_Enable;
class GlobalSettingsProto_EnableDefaultTypeInternal;
extern GlobalSettingsProto_EnableDefaultTypeInternal _GlobalSettingsProto_Enable_default_instance_;
class GlobalSettingsProto_Euicc;
class GlobalSettingsProto_EuiccDefaultTypeInternal;
extern GlobalSettingsProto_EuiccDefaultTypeInternal _GlobalSettingsProto_Euicc_default_instance_;
class GlobalSettingsProto_GlobalHttpProxy;
class GlobalSettingsProto_GlobalHttpProxyDefaultTypeInternal;
extern GlobalSettingsProto_GlobalHttpProxyDefaultTypeInternal _GlobalSettingsProto_GlobalHttpProxy_default_instance_;
class GlobalSettingsProto_Gpu;
class GlobalSettingsProto_GpuDefaultTypeInternal;
extern GlobalSettingsProto_GpuDefaultTypeInternal _GlobalSettingsProto_Gpu_default_instance_;
class GlobalSettingsProto_Hdmi;
class GlobalSettingsProto_HdmiDefaultTypeInternal;
extern GlobalSettingsProto_HdmiDefaultTypeInternal _GlobalSettingsProto_Hdmi_default_instance_;
class GlobalSettingsProto_InetCondition;
class GlobalSettingsProto_InetConditionDefaultTypeInternal;
extern GlobalSettingsProto_InetConditionDefaultTypeInternal _GlobalSettingsProto_InetCondition_default_instance_;
class GlobalSettingsProto_InstantApp;
class GlobalSettingsProto_InstantAppDefaultTypeInternal;
extern GlobalSettingsProto_InstantAppDefaultTypeInternal _GlobalSettingsProto_InstantApp_default_instance_;
class GlobalSettingsProto_IntentFirewall;
class GlobalSettingsProto_IntentFirewallDefaultTypeInternal;
extern GlobalSettingsProto_IntentFirewallDefaultTypeInternal _GlobalSettingsProto_IntentFirewall_default_instance_;
class GlobalSettingsProto_LangId;
class GlobalSettingsProto_LangIdDefaultTypeInternal;
extern GlobalSettingsProto_LangIdDefaultTypeInternal _GlobalSettingsProto_LangId_default_instance_;
class GlobalSettingsProto_Location;
class GlobalSettingsProto_LocationDefaultTypeInternal;
extern GlobalSettingsProto_LocationDefaultTypeInternal _GlobalSettingsProto_Location_default_instance_;
class GlobalSettingsProto_LowPowerMode;
class GlobalSettingsProto_LowPowerModeDefaultTypeInternal;
extern GlobalSettingsProto_LowPowerModeDefaultTypeInternal _GlobalSettingsProto_LowPowerMode_default_instance_;
class GlobalSettingsProto_Mhl;
class GlobalSettingsProto_MhlDefaultTypeInternal;
extern GlobalSettingsProto_MhlDefaultTypeInternal _GlobalSettingsProto_Mhl_default_instance_;
class GlobalSettingsProto_MobileData;
class GlobalSettingsProto_MobileDataDefaultTypeInternal;
extern GlobalSettingsProto_MobileDataDefaultTypeInternal _GlobalSettingsProto_MobileData_default_instance_;
class GlobalSettingsProto_MultiSim;
class GlobalSettingsProto_MultiSimDefaultTypeInternal;
extern GlobalSettingsProto_MultiSimDefaultTypeInternal _GlobalSettingsProto_MultiSim_default_instance_;
class GlobalSettingsProto_Netstats;
class GlobalSettingsProto_NetstatsDefaultTypeInternal;
extern GlobalSettingsProto_NetstatsDefaultTypeInternal _GlobalSettingsProto_Netstats_default_instance_;
class GlobalSettingsProto_Network;
class GlobalSettingsProto_NetworkDefaultTypeInternal;
extern GlobalSettingsProto_NetworkDefaultTypeInternal _GlobalSettingsProto_Network_default_instance_;
class GlobalSettingsProto_NitzUpdate;
class GlobalSettingsProto_NitzUpdateDefaultTypeInternal;
extern GlobalSettingsProto_NitzUpdateDefaultTypeInternal _GlobalSettingsProto_NitzUpdate_default_instance_;
class GlobalSettingsProto_Notification;
class GlobalSettingsProto_NotificationDefaultTypeInternal;
extern GlobalSettingsProto_NotificationDefaultTypeInternal _GlobalSettingsProto_Notification_default_instance_;
class GlobalSettingsProto_Ntp;
class GlobalSettingsProto_NtpDefaultTypeInternal;
extern GlobalSettingsProto_NtpDefaultTypeInternal _GlobalSettingsProto_Ntp_default_instance_;
class GlobalSettingsProto_PackageVerifier;
class GlobalSettingsProto_PackageVerifierDefaultTypeInternal;
extern GlobalSettingsProto_PackageVerifierDefaultTypeInternal _GlobalSettingsProto_PackageVerifier_default_instance_;
class GlobalSettingsProto_PdpWatchdog;
class GlobalSettingsProto_PdpWatchdogDefaultTypeInternal;
extern GlobalSettingsProto_PdpWatchdogDefaultTypeInternal _GlobalSettingsProto_PdpWatchdog_default_instance_;
class GlobalSettingsProto_PrepaidSetup;
class GlobalSettingsProto_PrepaidSetupDefaultTypeInternal;
extern GlobalSettingsProto_PrepaidSetupDefaultTypeInternal _GlobalSettingsProto_PrepaidSetup_default_instance_;
class GlobalSettingsProto_Private;
class GlobalSettingsProto_PrivateDefaultTypeInternal;
extern GlobalSettingsProto_PrivateDefaultTypeInternal _GlobalSettingsProto_Private_default_instance_;
class GlobalSettingsProto_Selinux;
class GlobalSettingsProto_SelinuxDefaultTypeInternal;
extern GlobalSettingsProto_SelinuxDefaultTypeInternal _GlobalSettingsProto_Selinux_default_instance_;
class GlobalSettingsProto_SmartSelection;
class GlobalSettingsProto_SmartSelectionDefaultTypeInternal;
extern GlobalSettingsProto_SmartSelectionDefaultTypeInternal _GlobalSettingsProto_SmartSelection_default_instance_;
class GlobalSettingsProto_Sms;
class GlobalSettingsProto_SmsDefaultTypeInternal;
extern GlobalSettingsProto_SmsDefaultTypeInternal _GlobalSettingsProto_Sms_default_instance_;
class GlobalSettingsProto_SoundTrigger;
class GlobalSettingsProto_SoundTriggerDefaultTypeInternal;
extern GlobalSettingsProto_SoundTriggerDefaultTypeInternal _GlobalSettingsProto_SoundTrigger_default_instance_;
class GlobalSettingsProto_Sounds;
class GlobalSettingsProto_SoundsDefaultTypeInternal;
extern GlobalSettingsProto_SoundsDefaultTypeInternal _GlobalSettingsProto_Sounds_default_instance_;
class GlobalSettingsProto_Storage;
class GlobalSettingsProto_StorageDefaultTypeInternal;
extern GlobalSettingsProto_StorageDefaultTypeInternal _GlobalSettingsProto_Storage_default_instance_;
class GlobalSettingsProto_Sync;
class GlobalSettingsProto_SyncDefaultTypeInternal;
extern GlobalSettingsProto_SyncDefaultTypeInternal _GlobalSettingsProto_Sync_default_instance_;
class GlobalSettingsProto_Sys;
class GlobalSettingsProto_SysDefaultTypeInternal;
extern GlobalSettingsProto_SysDefaultTypeInternal _GlobalSettingsProto_Sys_default_instance_;
class GlobalSettingsProto_TemperatureWarning;
class GlobalSettingsProto_TemperatureWarningDefaultTypeInternal;
extern GlobalSettingsProto_TemperatureWarningDefaultTypeInternal _GlobalSettingsProto_TemperatureWarning_default_instance_;
class GlobalSettingsProto_Tether;
class GlobalSettingsProto_TetherDefaultTypeInternal;
extern GlobalSettingsProto_TetherDefaultTypeInternal _GlobalSettingsProto_Tether_default_instance_;
class GlobalSettingsProto_Tzinfo;
class GlobalSettingsProto_TzinfoDefaultTypeInternal;
extern GlobalSettingsProto_TzinfoDefaultTypeInternal _GlobalSettingsProto_Tzinfo_default_instance_;
class GlobalSettingsProto_UserAbsentSmallBattery;
class GlobalSettingsProto_UserAbsentSmallBatteryDefaultTypeInternal;
extern GlobalSettingsProto_UserAbsentSmallBatteryDefaultTypeInternal _GlobalSettingsProto_UserAbsentSmallBattery_default_instance_;
class GlobalSettingsProto_Webview;
class GlobalSettingsProto_WebviewDefaultTypeInternal;
extern GlobalSettingsProto_WebviewDefaultTypeInternal _GlobalSettingsProto_Webview_default_instance_;
class GlobalSettingsProto_Wfc;
class GlobalSettingsProto_WfcDefaultTypeInternal;
extern GlobalSettingsProto_WfcDefaultTypeInternal _GlobalSettingsProto_Wfc_default_instance_;
class GlobalSettingsProto_Wifi;
class GlobalSettingsProto_WifiDefaultTypeInternal;
extern GlobalSettingsProto_WifiDefaultTypeInternal _GlobalSettingsProto_Wifi_default_instance_;
class GlobalSettingsProto_Zen;
class GlobalSettingsProto_ZenDefaultTypeInternal;
extern GlobalSettingsProto_ZenDefaultTypeInternal _GlobalSettingsProto_Zen_default_instance_;
}  // namespace settings
}  // namespace providers
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::providers::settings::GlobalSettingsProto* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_AirplaneMode* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_AirplaneMode>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Anomaly* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Anomaly>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_ApnDb* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_ApnDb>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_App* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_App>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Autofill* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Autofill>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Backup* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Backup>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Battery* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Battery>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_BleScan* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_BleScan>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Bluetooth* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Bluetooth>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_CaptivePortal* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_CaptivePortal>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Carrier* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Carrier>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Cdma* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Cdma>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_CertPin* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_CertPin>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Connectivity* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Connectivity>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Data* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Data>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Database* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Database>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_DateTime* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_DateTime>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Debug* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Debug>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Default* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Default>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Development* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Development>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Device* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Device>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Display* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Display>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_DnsResolver* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_DnsResolver>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Download* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Download>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Dropbox* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Dropbox>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Emergency* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Emergency>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Enable* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Enable>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Euicc* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Euicc>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Gpu* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Gpu>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Hdmi* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Hdmi>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_InetCondition* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_InetCondition>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_InstantApp* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_InstantApp>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_IntentFirewall* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_IntentFirewall>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_LangId* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_LangId>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Location* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Location>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_LowPowerMode* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_LowPowerMode>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Mhl* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Mhl>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_MobileData* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_MobileData>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_MultiSim* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_MultiSim>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Netstats* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Netstats>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Network* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Network>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_NitzUpdate* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_NitzUpdate>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Notification* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Notification>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Ntp* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Ntp>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_PackageVerifier* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_PackageVerifier>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_PdpWatchdog>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_PrepaidSetup>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Private* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Private>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Selinux* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Selinux>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_SmartSelection* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_SmartSelection>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Sms* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Sms>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_SoundTrigger* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_SoundTrigger>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Sounds* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Sounds>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Storage* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Storage>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Sync* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Sync>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Sys* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Sys>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_TemperatureWarning>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Tether* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Tether>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Tzinfo* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Tzinfo>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Webview* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Webview>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Wfc* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Wfc>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Wifi* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Wifi>(Arena*);
template<> ::android::providers::settings::GlobalSettingsProto_Zen* Arena::CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Zen>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace providers {
namespace settings {

// ===================================================================

class GlobalSettingsProto_AirplaneMode :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.AirplaneMode) */ {
 public:
  GlobalSettingsProto_AirplaneMode();
  virtual ~GlobalSettingsProto_AirplaneMode();

  GlobalSettingsProto_AirplaneMode(const GlobalSettingsProto_AirplaneMode& from);
  GlobalSettingsProto_AirplaneMode(GlobalSettingsProto_AirplaneMode&& from) noexcept
    : GlobalSettingsProto_AirplaneMode() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_AirplaneMode& operator=(const GlobalSettingsProto_AirplaneMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_AirplaneMode& operator=(GlobalSettingsProto_AirplaneMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_AirplaneMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_AirplaneMode* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_AirplaneMode*>(
               &_GlobalSettingsProto_AirplaneMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GlobalSettingsProto_AirplaneMode& a, GlobalSettingsProto_AirplaneMode& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_AirplaneMode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_AirplaneMode* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_AirplaneMode>(nullptr);
  }

  GlobalSettingsProto_AirplaneMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_AirplaneMode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_AirplaneMode& from);
  void MergeFrom(const GlobalSettingsProto_AirplaneMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_AirplaneMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.AirplaneMode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnFieldNumber = 1,
    kRadiosFieldNumber = 2,
    kToggleableRadiosFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
  bool has_on() const;
  void clear_on();
  const ::android::providers::settings::SettingProto& on() const;
  ::android::providers::settings::SettingProto* release_on();
  ::android::providers::settings::SettingProto* mutable_on();
  void set_allocated_on(::android::providers::settings::SettingProto* on);

  // optional .android.providers.settings.SettingProto radios = 2 [(.android.privacy) = {
  bool has_radios() const;
  void clear_radios();
  const ::android::providers::settings::SettingProto& radios() const;
  ::android::providers::settings::SettingProto* release_radios();
  ::android::providers::settings::SettingProto* mutable_radios();
  void set_allocated_radios(::android::providers::settings::SettingProto* radios);

  // optional .android.providers.settings.SettingProto toggleable_radios = 3 [(.android.privacy) = {
  bool has_toggleable_radios() const;
  void clear_toggleable_radios();
  const ::android::providers::settings::SettingProto& toggleable_radios() const;
  ::android::providers::settings::SettingProto* release_toggleable_radios();
  ::android::providers::settings::SettingProto* mutable_toggleable_radios();
  void set_allocated_toggleable_radios(::android::providers::settings::SettingProto* toggleable_radios);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.AirplaneMode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* on_;
  ::android::providers::settings::SettingProto* radios_;
  ::android::providers::settings::SettingProto* toggleable_radios_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Anomaly :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Anomaly) */ {
 public:
  GlobalSettingsProto_Anomaly();
  virtual ~GlobalSettingsProto_Anomaly();

  GlobalSettingsProto_Anomaly(const GlobalSettingsProto_Anomaly& from);
  GlobalSettingsProto_Anomaly(GlobalSettingsProto_Anomaly&& from) noexcept
    : GlobalSettingsProto_Anomaly() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Anomaly& operator=(const GlobalSettingsProto_Anomaly& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Anomaly& operator=(GlobalSettingsProto_Anomaly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Anomaly& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Anomaly* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Anomaly*>(
               &_GlobalSettingsProto_Anomaly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GlobalSettingsProto_Anomaly& a, GlobalSettingsProto_Anomaly& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Anomaly* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Anomaly* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Anomaly>(nullptr);
  }

  GlobalSettingsProto_Anomaly* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Anomaly>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Anomaly& from);
  void MergeFrom(const GlobalSettingsProto_Anomaly& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Anomaly* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Anomaly";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionConstantsFieldNumber = 1,
    kConfigVersionFieldNumber = 2,
    kConfigFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto detection_constants = 1;
  bool has_detection_constants() const;
  void clear_detection_constants();
  const ::android::providers::settings::SettingProto& detection_constants() const;
  ::android::providers::settings::SettingProto* release_detection_constants();
  ::android::providers::settings::SettingProto* mutable_detection_constants();
  void set_allocated_detection_constants(::android::providers::settings::SettingProto* detection_constants);

  // optional .android.providers.settings.SettingProto config_version = 2 [(.android.privacy) = {
  bool has_config_version() const;
  void clear_config_version();
  const ::android::providers::settings::SettingProto& config_version() const;
  ::android::providers::settings::SettingProto* release_config_version();
  ::android::providers::settings::SettingProto* mutable_config_version();
  void set_allocated_config_version(::android::providers::settings::SettingProto* config_version);

  // optional .android.providers.settings.SettingProto config = 3;
  bool has_config() const;
  void clear_config();
  const ::android::providers::settings::SettingProto& config() const;
  ::android::providers::settings::SettingProto* release_config();
  ::android::providers::settings::SettingProto* mutable_config();
  void set_allocated_config(::android::providers::settings::SettingProto* config);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Anomaly)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* detection_constants_;
  ::android::providers::settings::SettingProto* config_version_;
  ::android::providers::settings::SettingProto* config_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_ApnDb :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.ApnDb) */ {
 public:
  GlobalSettingsProto_ApnDb();
  virtual ~GlobalSettingsProto_ApnDb();

  GlobalSettingsProto_ApnDb(const GlobalSettingsProto_ApnDb& from);
  GlobalSettingsProto_ApnDb(GlobalSettingsProto_ApnDb&& from) noexcept
    : GlobalSettingsProto_ApnDb() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_ApnDb& operator=(const GlobalSettingsProto_ApnDb& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_ApnDb& operator=(GlobalSettingsProto_ApnDb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_ApnDb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_ApnDb* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_ApnDb*>(
               &_GlobalSettingsProto_ApnDb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobalSettingsProto_ApnDb& a, GlobalSettingsProto_ApnDb& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_ApnDb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_ApnDb* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_ApnDb>(nullptr);
  }

  GlobalSettingsProto_ApnDb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_ApnDb>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_ApnDb& from);
  void MergeFrom(const GlobalSettingsProto_ApnDb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_ApnDb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.ApnDb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateContentUrlFieldNumber = 1,
    kUpdateMetadataUrlFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  bool has_update_content_url() const;
  void clear_update_content_url();
  const ::android::providers::settings::SettingProto& update_content_url() const;
  ::android::providers::settings::SettingProto* release_update_content_url();
  ::android::providers::settings::SettingProto* mutable_update_content_url();
  void set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url);

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  bool has_update_metadata_url() const;
  void clear_update_metadata_url();
  const ::android::providers::settings::SettingProto& update_metadata_url() const;
  ::android::providers::settings::SettingProto* release_update_metadata_url();
  ::android::providers::settings::SettingProto* mutable_update_metadata_url();
  void set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.ApnDb)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* update_content_url_;
  ::android::providers::settings::SettingProto* update_metadata_url_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_App :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.App) */ {
 public:
  GlobalSettingsProto_App();
  virtual ~GlobalSettingsProto_App();

  GlobalSettingsProto_App(const GlobalSettingsProto_App& from);
  GlobalSettingsProto_App(GlobalSettingsProto_App&& from) noexcept
    : GlobalSettingsProto_App() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_App& operator=(const GlobalSettingsProto_App& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_App& operator=(GlobalSettingsProto_App&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_App& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_App* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_App*>(
               &_GlobalSettingsProto_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GlobalSettingsProto_App& a, GlobalSettingsProto_App& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_App* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_App* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_App>(nullptr);
  }

  GlobalSettingsProto_App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_App>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_App& from);
  void MergeFrom(const GlobalSettingsProto_App& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_App* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.App";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStandbyEnabledFieldNumber = 2,
    kAutoRestrictionEnabledFieldNumber = 3,
    kForcedAppStandbyEnabledFieldNumber = 4,
    kForcedAppStandbyForSmallBatteryEnabledFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto standby_enabled = 2 [(.android.privacy) = {
  bool has_standby_enabled() const;
  void clear_standby_enabled();
  const ::android::providers::settings::SettingProto& standby_enabled() const;
  ::android::providers::settings::SettingProto* release_standby_enabled();
  ::android::providers::settings::SettingProto* mutable_standby_enabled();
  void set_allocated_standby_enabled(::android::providers::settings::SettingProto* standby_enabled);

  // optional .android.providers.settings.SettingProto auto_restriction_enabled = 3 [(.android.privacy) = {
  bool has_auto_restriction_enabled() const;
  void clear_auto_restriction_enabled();
  const ::android::providers::settings::SettingProto& auto_restriction_enabled() const;
  ::android::providers::settings::SettingProto* release_auto_restriction_enabled();
  ::android::providers::settings::SettingProto* mutable_auto_restriction_enabled();
  void set_allocated_auto_restriction_enabled(::android::providers::settings::SettingProto* auto_restriction_enabled);

  // optional .android.providers.settings.SettingProto forced_app_standby_enabled = 4 [(.android.privacy) = {
  bool has_forced_app_standby_enabled() const;
  void clear_forced_app_standby_enabled();
  const ::android::providers::settings::SettingProto& forced_app_standby_enabled() const;
  ::android::providers::settings::SettingProto* release_forced_app_standby_enabled();
  ::android::providers::settings::SettingProto* mutable_forced_app_standby_enabled();
  void set_allocated_forced_app_standby_enabled(::android::providers::settings::SettingProto* forced_app_standby_enabled);

  // optional .android.providers.settings.SettingProto forced_app_standby_for_small_battery_enabled = 5 [(.android.privacy) = {
  bool has_forced_app_standby_for_small_battery_enabled() const;
  void clear_forced_app_standby_for_small_battery_enabled();
  const ::android::providers::settings::SettingProto& forced_app_standby_for_small_battery_enabled() const;
  ::android::providers::settings::SettingProto* release_forced_app_standby_for_small_battery_enabled();
  ::android::providers::settings::SettingProto* mutable_forced_app_standby_for_small_battery_enabled();
  void set_allocated_forced_app_standby_for_small_battery_enabled(::android::providers::settings::SettingProto* forced_app_standby_for_small_battery_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.App)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* standby_enabled_;
  ::android::providers::settings::SettingProto* auto_restriction_enabled_;
  ::android::providers::settings::SettingProto* forced_app_standby_enabled_;
  ::android::providers::settings::SettingProto* forced_app_standby_for_small_battery_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Autofill :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Autofill) */ {
 public:
  GlobalSettingsProto_Autofill();
  virtual ~GlobalSettingsProto_Autofill();

  GlobalSettingsProto_Autofill(const GlobalSettingsProto_Autofill& from);
  GlobalSettingsProto_Autofill(GlobalSettingsProto_Autofill&& from) noexcept
    : GlobalSettingsProto_Autofill() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Autofill& operator=(const GlobalSettingsProto_Autofill& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Autofill& operator=(GlobalSettingsProto_Autofill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Autofill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Autofill* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Autofill*>(
               &_GlobalSettingsProto_Autofill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GlobalSettingsProto_Autofill& a, GlobalSettingsProto_Autofill& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Autofill* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Autofill* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Autofill>(nullptr);
  }

  GlobalSettingsProto_Autofill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Autofill>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Autofill& from);
  void MergeFrom(const GlobalSettingsProto_Autofill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Autofill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Autofill";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompatModeAllowedPackagesFieldNumber = 1,
    kLoggingLevelFieldNumber = 2,
    kMaxPartitionsSizeFieldNumber = 3,
    kMaxVisibleDatasetsFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto compat_mode_allowed_packages = 1 [(.android.privacy) = {
  bool has_compat_mode_allowed_packages() const;
  void clear_compat_mode_allowed_packages();
  const ::android::providers::settings::SettingProto& compat_mode_allowed_packages() const;
  ::android::providers::settings::SettingProto* release_compat_mode_allowed_packages();
  ::android::providers::settings::SettingProto* mutable_compat_mode_allowed_packages();
  void set_allocated_compat_mode_allowed_packages(::android::providers::settings::SettingProto* compat_mode_allowed_packages);

  // optional .android.providers.settings.SettingProto logging_level = 2 [(.android.privacy) = {
  bool has_logging_level() const;
  void clear_logging_level();
  const ::android::providers::settings::SettingProto& logging_level() const;
  ::android::providers::settings::SettingProto* release_logging_level();
  ::android::providers::settings::SettingProto* mutable_logging_level();
  void set_allocated_logging_level(::android::providers::settings::SettingProto* logging_level);

  // optional .android.providers.settings.SettingProto max_partitions_size = 3 [(.android.privacy) = {
  bool has_max_partitions_size() const;
  void clear_max_partitions_size();
  const ::android::providers::settings::SettingProto& max_partitions_size() const;
  ::android::providers::settings::SettingProto* release_max_partitions_size();
  ::android::providers::settings::SettingProto* mutable_max_partitions_size();
  void set_allocated_max_partitions_size(::android::providers::settings::SettingProto* max_partitions_size);

  // optional .android.providers.settings.SettingProto max_visible_datasets = 4 [(.android.privacy) = {
  bool has_max_visible_datasets() const;
  void clear_max_visible_datasets();
  const ::android::providers::settings::SettingProto& max_visible_datasets() const;
  ::android::providers::settings::SettingProto* release_max_visible_datasets();
  ::android::providers::settings::SettingProto* mutable_max_visible_datasets();
  void set_allocated_max_visible_datasets(::android::providers::settings::SettingProto* max_visible_datasets);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Autofill)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* compat_mode_allowed_packages_;
  ::android::providers::settings::SettingProto* logging_level_;
  ::android::providers::settings::SettingProto* max_partitions_size_;
  ::android::providers::settings::SettingProto* max_visible_datasets_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Backup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Backup) */ {
 public:
  GlobalSettingsProto_Backup();
  virtual ~GlobalSettingsProto_Backup();

  GlobalSettingsProto_Backup(const GlobalSettingsProto_Backup& from);
  GlobalSettingsProto_Backup(GlobalSettingsProto_Backup&& from) noexcept
    : GlobalSettingsProto_Backup() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Backup& operator=(const GlobalSettingsProto_Backup& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Backup& operator=(GlobalSettingsProto_Backup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Backup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Backup* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Backup*>(
               &_GlobalSettingsProto_Backup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GlobalSettingsProto_Backup& a, GlobalSettingsProto_Backup& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Backup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Backup* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Backup>(nullptr);
  }

  GlobalSettingsProto_Backup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Backup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Backup& from);
  void MergeFrom(const GlobalSettingsProto_Backup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Backup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Backup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackupAgentTimeoutParametersFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto backup_agent_timeout_parameters = 1;
  bool has_backup_agent_timeout_parameters() const;
  void clear_backup_agent_timeout_parameters();
  const ::android::providers::settings::SettingProto& backup_agent_timeout_parameters() const;
  ::android::providers::settings::SettingProto* release_backup_agent_timeout_parameters();
  ::android::providers::settings::SettingProto* mutable_backup_agent_timeout_parameters();
  void set_allocated_backup_agent_timeout_parameters(::android::providers::settings::SettingProto* backup_agent_timeout_parameters);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Backup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* backup_agent_timeout_parameters_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Battery :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Battery) */ {
 public:
  GlobalSettingsProto_Battery();
  virtual ~GlobalSettingsProto_Battery();

  GlobalSettingsProto_Battery(const GlobalSettingsProto_Battery& from);
  GlobalSettingsProto_Battery(GlobalSettingsProto_Battery&& from) noexcept
    : GlobalSettingsProto_Battery() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Battery& operator=(const GlobalSettingsProto_Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Battery& operator=(GlobalSettingsProto_Battery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Battery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Battery* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Battery*>(
               &_GlobalSettingsProto_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GlobalSettingsProto_Battery& a, GlobalSettingsProto_Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Battery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Battery* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Battery>(nullptr);
  }

  GlobalSettingsProto_Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Battery>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Battery& from);
  void MergeFrom(const GlobalSettingsProto_Battery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Battery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Battery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDischargeDurationThresholdFieldNumber = 1,
    kDischargeThresholdFieldNumber = 2,
    kSaverConstantsFieldNumber = 3,
    kSaverDeviceSpecificConstantsFieldNumber = 4,
    kStatsConstantsFieldNumber = 5,
    kTipConstantsFieldNumber = 6,
  };
  // optional .android.providers.settings.SettingProto discharge_duration_threshold = 1 [(.android.privacy) = {
  bool has_discharge_duration_threshold() const;
  void clear_discharge_duration_threshold();
  const ::android::providers::settings::SettingProto& discharge_duration_threshold() const;
  ::android::providers::settings::SettingProto* release_discharge_duration_threshold();
  ::android::providers::settings::SettingProto* mutable_discharge_duration_threshold();
  void set_allocated_discharge_duration_threshold(::android::providers::settings::SettingProto* discharge_duration_threshold);

  // optional .android.providers.settings.SettingProto discharge_threshold = 2 [(.android.privacy) = {
  bool has_discharge_threshold() const;
  void clear_discharge_threshold();
  const ::android::providers::settings::SettingProto& discharge_threshold() const;
  ::android::providers::settings::SettingProto* release_discharge_threshold();
  ::android::providers::settings::SettingProto* mutable_discharge_threshold();
  void set_allocated_discharge_threshold(::android::providers::settings::SettingProto* discharge_threshold);

  // optional .android.providers.settings.SettingProto saver_constants = 3;
  bool has_saver_constants() const;
  void clear_saver_constants();
  const ::android::providers::settings::SettingProto& saver_constants() const;
  ::android::providers::settings::SettingProto* release_saver_constants();
  ::android::providers::settings::SettingProto* mutable_saver_constants();
  void set_allocated_saver_constants(::android::providers::settings::SettingProto* saver_constants);

  // optional .android.providers.settings.SettingProto saver_device_specific_constants = 4;
  bool has_saver_device_specific_constants() const;
  void clear_saver_device_specific_constants();
  const ::android::providers::settings::SettingProto& saver_device_specific_constants() const;
  ::android::providers::settings::SettingProto* release_saver_device_specific_constants();
  ::android::providers::settings::SettingProto* mutable_saver_device_specific_constants();
  void set_allocated_saver_device_specific_constants(::android::providers::settings::SettingProto* saver_device_specific_constants);

  // optional .android.providers.settings.SettingProto stats_constants = 5;
  bool has_stats_constants() const;
  void clear_stats_constants();
  const ::android::providers::settings::SettingProto& stats_constants() const;
  ::android::providers::settings::SettingProto* release_stats_constants();
  ::android::providers::settings::SettingProto* mutable_stats_constants();
  void set_allocated_stats_constants(::android::providers::settings::SettingProto* stats_constants);

  // optional .android.providers.settings.SettingProto tip_constants = 6;
  bool has_tip_constants() const;
  void clear_tip_constants();
  const ::android::providers::settings::SettingProto& tip_constants() const;
  ::android::providers::settings::SettingProto* release_tip_constants();
  ::android::providers::settings::SettingProto* mutable_tip_constants();
  void set_allocated_tip_constants(::android::providers::settings::SettingProto* tip_constants);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Battery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* discharge_duration_threshold_;
  ::android::providers::settings::SettingProto* discharge_threshold_;
  ::android::providers::settings::SettingProto* saver_constants_;
  ::android::providers::settings::SettingProto* saver_device_specific_constants_;
  ::android::providers::settings::SettingProto* stats_constants_;
  ::android::providers::settings::SettingProto* tip_constants_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_BleScan :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.BleScan) */ {
 public:
  GlobalSettingsProto_BleScan();
  virtual ~GlobalSettingsProto_BleScan();

  GlobalSettingsProto_BleScan(const GlobalSettingsProto_BleScan& from);
  GlobalSettingsProto_BleScan(GlobalSettingsProto_BleScan&& from) noexcept
    : GlobalSettingsProto_BleScan() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_BleScan& operator=(const GlobalSettingsProto_BleScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_BleScan& operator=(GlobalSettingsProto_BleScan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_BleScan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_BleScan* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_BleScan*>(
               &_GlobalSettingsProto_BleScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GlobalSettingsProto_BleScan& a, GlobalSettingsProto_BleScan& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_BleScan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_BleScan* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_BleScan>(nullptr);
  }

  GlobalSettingsProto_BleScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_BleScan>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_BleScan& from);
  void MergeFrom(const GlobalSettingsProto_BleScan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_BleScan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.BleScan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlwaysAvailableFieldNumber = 1,
    kLowPowerWindowMsFieldNumber = 2,
    kBalancedWindowMsFieldNumber = 3,
    kLowLatencyWindowMsFieldNumber = 4,
    kLowPowerIntervalMsFieldNumber = 5,
    kBalancedIntervalMsFieldNumber = 6,
    kLowLatencyIntervalMsFieldNumber = 7,
    kBackgroundModeFieldNumber = 8,
  };
  // optional .android.providers.settings.SettingProto always_available = 1 [(.android.privacy) = {
  bool has_always_available() const;
  void clear_always_available();
  const ::android::providers::settings::SettingProto& always_available() const;
  ::android::providers::settings::SettingProto* release_always_available();
  ::android::providers::settings::SettingProto* mutable_always_available();
  void set_allocated_always_available(::android::providers::settings::SettingProto* always_available);

  // optional .android.providers.settings.SettingProto low_power_window_ms = 2 [(.android.privacy) = {
  bool has_low_power_window_ms() const;
  void clear_low_power_window_ms();
  const ::android::providers::settings::SettingProto& low_power_window_ms() const;
  ::android::providers::settings::SettingProto* release_low_power_window_ms();
  ::android::providers::settings::SettingProto* mutable_low_power_window_ms();
  void set_allocated_low_power_window_ms(::android::providers::settings::SettingProto* low_power_window_ms);

  // optional .android.providers.settings.SettingProto balanced_window_ms = 3 [(.android.privacy) = {
  bool has_balanced_window_ms() const;
  void clear_balanced_window_ms();
  const ::android::providers::settings::SettingProto& balanced_window_ms() const;
  ::android::providers::settings::SettingProto* release_balanced_window_ms();
  ::android::providers::settings::SettingProto* mutable_balanced_window_ms();
  void set_allocated_balanced_window_ms(::android::providers::settings::SettingProto* balanced_window_ms);

  // optional .android.providers.settings.SettingProto low_latency_window_ms = 4 [(.android.privacy) = {
  bool has_low_latency_window_ms() const;
  void clear_low_latency_window_ms();
  const ::android::providers::settings::SettingProto& low_latency_window_ms() const;
  ::android::providers::settings::SettingProto* release_low_latency_window_ms();
  ::android::providers::settings::SettingProto* mutable_low_latency_window_ms();
  void set_allocated_low_latency_window_ms(::android::providers::settings::SettingProto* low_latency_window_ms);

  // optional .android.providers.settings.SettingProto low_power_interval_ms = 5 [(.android.privacy) = {
  bool has_low_power_interval_ms() const;
  void clear_low_power_interval_ms();
  const ::android::providers::settings::SettingProto& low_power_interval_ms() const;
  ::android::providers::settings::SettingProto* release_low_power_interval_ms();
  ::android::providers::settings::SettingProto* mutable_low_power_interval_ms();
  void set_allocated_low_power_interval_ms(::android::providers::settings::SettingProto* low_power_interval_ms);

  // optional .android.providers.settings.SettingProto balanced_interval_ms = 6 [(.android.privacy) = {
  bool has_balanced_interval_ms() const;
  void clear_balanced_interval_ms();
  const ::android::providers::settings::SettingProto& balanced_interval_ms() const;
  ::android::providers::settings::SettingProto* release_balanced_interval_ms();
  ::android::providers::settings::SettingProto* mutable_balanced_interval_ms();
  void set_allocated_balanced_interval_ms(::android::providers::settings::SettingProto* balanced_interval_ms);

  // optional .android.providers.settings.SettingProto low_latency_interval_ms = 7 [(.android.privacy) = {
  bool has_low_latency_interval_ms() const;
  void clear_low_latency_interval_ms();
  const ::android::providers::settings::SettingProto& low_latency_interval_ms() const;
  ::android::providers::settings::SettingProto* release_low_latency_interval_ms();
  ::android::providers::settings::SettingProto* mutable_low_latency_interval_ms();
  void set_allocated_low_latency_interval_ms(::android::providers::settings::SettingProto* low_latency_interval_ms);

  // optional .android.providers.settings.SettingProto background_mode = 8 [(.android.privacy) = {
  bool has_background_mode() const;
  void clear_background_mode();
  const ::android::providers::settings::SettingProto& background_mode() const;
  ::android::providers::settings::SettingProto* release_background_mode();
  ::android::providers::settings::SettingProto* mutable_background_mode();
  void set_allocated_background_mode(::android::providers::settings::SettingProto* background_mode);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.BleScan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* always_available_;
  ::android::providers::settings::SettingProto* low_power_window_ms_;
  ::android::providers::settings::SettingProto* balanced_window_ms_;
  ::android::providers::settings::SettingProto* low_latency_window_ms_;
  ::android::providers::settings::SettingProto* low_power_interval_ms_;
  ::android::providers::settings::SettingProto* balanced_interval_ms_;
  ::android::providers::settings::SettingProto* low_latency_interval_ms_;
  ::android::providers::settings::SettingProto* background_mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Bluetooth :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Bluetooth) */ {
 public:
  GlobalSettingsProto_Bluetooth();
  virtual ~GlobalSettingsProto_Bluetooth();

  GlobalSettingsProto_Bluetooth(const GlobalSettingsProto_Bluetooth& from);
  GlobalSettingsProto_Bluetooth(GlobalSettingsProto_Bluetooth&& from) noexcept
    : GlobalSettingsProto_Bluetooth() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Bluetooth& operator=(const GlobalSettingsProto_Bluetooth& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Bluetooth& operator=(GlobalSettingsProto_Bluetooth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Bluetooth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Bluetooth* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Bluetooth*>(
               &_GlobalSettingsProto_Bluetooth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GlobalSettingsProto_Bluetooth& a, GlobalSettingsProto_Bluetooth& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Bluetooth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Bluetooth* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Bluetooth>(nullptr);
  }

  GlobalSettingsProto_Bluetooth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Bluetooth>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Bluetooth& from);
  void MergeFrom(const GlobalSettingsProto_Bluetooth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Bluetooth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Bluetooth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadsetPrioritiesFieldNumber = 5,
    kA2DpSinkPrioritiesFieldNumber = 6,
    kA2DpSrcPrioritiesFieldNumber = 7,
    kA2DpSupportsOptionalCodecsFieldNumber = 8,
    kA2DpOptionalCodecsEnabledFieldNumber = 9,
    kInputDevicePrioritiesFieldNumber = 10,
    kMapPrioritiesFieldNumber = 11,
    kMapClientPrioritiesFieldNumber = 12,
    kPbapClientPrioritiesFieldNumber = 13,
    kSapPrioritiesFieldNumber = 14,
    kPanPrioritiesFieldNumber = 15,
    kHearingAidPrioritiesFieldNumber = 16,
    kClassOfDeviceFieldNumber = 1,
    kDisabledProfilesFieldNumber = 2,
    kInteroperabilityListFieldNumber = 3,
    kOnFieldNumber = 4,
  };
  // repeated .android.providers.settings.SettingProto headset_priorities = 5;
  int headset_priorities_size() const;
  void clear_headset_priorities();
  ::android::providers::settings::SettingProto* mutable_headset_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_headset_priorities();
  const ::android::providers::settings::SettingProto& headset_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_headset_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      headset_priorities() const;

  // repeated .android.providers.settings.SettingProto a2dp_sink_priorities = 6;
  int a2dp_sink_priorities_size() const;
  void clear_a2dp_sink_priorities();
  ::android::providers::settings::SettingProto* mutable_a2dp_sink_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_a2dp_sink_priorities();
  const ::android::providers::settings::SettingProto& a2dp_sink_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_a2dp_sink_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      a2dp_sink_priorities() const;

  // repeated .android.providers.settings.SettingProto a2dp_src_priorities = 7;
  int a2dp_src_priorities_size() const;
  void clear_a2dp_src_priorities();
  ::android::providers::settings::SettingProto* mutable_a2dp_src_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_a2dp_src_priorities();
  const ::android::providers::settings::SettingProto& a2dp_src_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_a2dp_src_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      a2dp_src_priorities() const;

  // repeated .android.providers.settings.SettingProto a2dp_supports_optional_codecs = 8;
  int a2dp_supports_optional_codecs_size() const;
  void clear_a2dp_supports_optional_codecs();
  ::android::providers::settings::SettingProto* mutable_a2dp_supports_optional_codecs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_a2dp_supports_optional_codecs();
  const ::android::providers::settings::SettingProto& a2dp_supports_optional_codecs(int index) const;
  ::android::providers::settings::SettingProto* add_a2dp_supports_optional_codecs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      a2dp_supports_optional_codecs() const;

  // repeated .android.providers.settings.SettingProto a2dp_optional_codecs_enabled = 9;
  int a2dp_optional_codecs_enabled_size() const;
  void clear_a2dp_optional_codecs_enabled();
  ::android::providers::settings::SettingProto* mutable_a2dp_optional_codecs_enabled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_a2dp_optional_codecs_enabled();
  const ::android::providers::settings::SettingProto& a2dp_optional_codecs_enabled(int index) const;
  ::android::providers::settings::SettingProto* add_a2dp_optional_codecs_enabled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      a2dp_optional_codecs_enabled() const;

  // repeated .android.providers.settings.SettingProto input_device_priorities = 10;
  int input_device_priorities_size() const;
  void clear_input_device_priorities();
  ::android::providers::settings::SettingProto* mutable_input_device_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_input_device_priorities();
  const ::android::providers::settings::SettingProto& input_device_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_input_device_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      input_device_priorities() const;

  // repeated .android.providers.settings.SettingProto map_priorities = 11;
  int map_priorities_size() const;
  void clear_map_priorities();
  ::android::providers::settings::SettingProto* mutable_map_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_map_priorities();
  const ::android::providers::settings::SettingProto& map_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_map_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      map_priorities() const;

  // repeated .android.providers.settings.SettingProto map_client_priorities = 12;
  int map_client_priorities_size() const;
  void clear_map_client_priorities();
  ::android::providers::settings::SettingProto* mutable_map_client_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_map_client_priorities();
  const ::android::providers::settings::SettingProto& map_client_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_map_client_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      map_client_priorities() const;

  // repeated .android.providers.settings.SettingProto pbap_client_priorities = 13;
  int pbap_client_priorities_size() const;
  void clear_pbap_client_priorities();
  ::android::providers::settings::SettingProto* mutable_pbap_client_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_pbap_client_priorities();
  const ::android::providers::settings::SettingProto& pbap_client_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_pbap_client_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      pbap_client_priorities() const;

  // repeated .android.providers.settings.SettingProto sap_priorities = 14;
  int sap_priorities_size() const;
  void clear_sap_priorities();
  ::android::providers::settings::SettingProto* mutable_sap_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_sap_priorities();
  const ::android::providers::settings::SettingProto& sap_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_sap_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      sap_priorities() const;

  // repeated .android.providers.settings.SettingProto pan_priorities = 15;
  int pan_priorities_size() const;
  void clear_pan_priorities();
  ::android::providers::settings::SettingProto* mutable_pan_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_pan_priorities();
  const ::android::providers::settings::SettingProto& pan_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_pan_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      pan_priorities() const;

  // repeated .android.providers.settings.SettingProto hearing_aid_priorities = 16;
  int hearing_aid_priorities_size() const;
  void clear_hearing_aid_priorities();
  ::android::providers::settings::SettingProto* mutable_hearing_aid_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_hearing_aid_priorities();
  const ::android::providers::settings::SettingProto& hearing_aid_priorities(int index) const;
  ::android::providers::settings::SettingProto* add_hearing_aid_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      hearing_aid_priorities() const;

  // optional .android.providers.settings.SettingProto class_of_device = 1 [(.android.privacy) = {
  bool has_class_of_device() const;
  void clear_class_of_device();
  const ::android::providers::settings::SettingProto& class_of_device() const;
  ::android::providers::settings::SettingProto* release_class_of_device();
  ::android::providers::settings::SettingProto* mutable_class_of_device();
  void set_allocated_class_of_device(::android::providers::settings::SettingProto* class_of_device);

  // optional .android.providers.settings.SettingProto disabled_profiles = 2;
  bool has_disabled_profiles() const;
  void clear_disabled_profiles();
  const ::android::providers::settings::SettingProto& disabled_profiles() const;
  ::android::providers::settings::SettingProto* release_disabled_profiles();
  ::android::providers::settings::SettingProto* mutable_disabled_profiles();
  void set_allocated_disabled_profiles(::android::providers::settings::SettingProto* disabled_profiles);

  // optional .android.providers.settings.SettingProto interoperability_list = 3;
  bool has_interoperability_list() const;
  void clear_interoperability_list();
  const ::android::providers::settings::SettingProto& interoperability_list() const;
  ::android::providers::settings::SettingProto* release_interoperability_list();
  ::android::providers::settings::SettingProto* mutable_interoperability_list();
  void set_allocated_interoperability_list(::android::providers::settings::SettingProto* interoperability_list);

  // optional .android.providers.settings.SettingProto on = 4 [(.android.privacy) = {
  bool has_on() const;
  void clear_on();
  const ::android::providers::settings::SettingProto& on() const;
  ::android::providers::settings::SettingProto* release_on();
  ::android::providers::settings::SettingProto* mutable_on();
  void set_allocated_on(::android::providers::settings::SettingProto* on);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Bluetooth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > headset_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > a2dp_sink_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > a2dp_src_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > a2dp_supports_optional_codecs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > a2dp_optional_codecs_enabled_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > input_device_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > map_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > map_client_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > pbap_client_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > sap_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > pan_priorities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > hearing_aid_priorities_;
  ::android::providers::settings::SettingProto* class_of_device_;
  ::android::providers::settings::SettingProto* disabled_profiles_;
  ::android::providers::settings::SettingProto* interoperability_list_;
  ::android::providers::settings::SettingProto* on_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_CaptivePortal :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.CaptivePortal) */ {
 public:
  GlobalSettingsProto_CaptivePortal();
  virtual ~GlobalSettingsProto_CaptivePortal();

  GlobalSettingsProto_CaptivePortal(const GlobalSettingsProto_CaptivePortal& from);
  GlobalSettingsProto_CaptivePortal(GlobalSettingsProto_CaptivePortal&& from) noexcept
    : GlobalSettingsProto_CaptivePortal() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_CaptivePortal& operator=(const GlobalSettingsProto_CaptivePortal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_CaptivePortal& operator=(GlobalSettingsProto_CaptivePortal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_CaptivePortal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_CaptivePortal* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_CaptivePortal*>(
               &_GlobalSettingsProto_CaptivePortal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GlobalSettingsProto_CaptivePortal& a, GlobalSettingsProto_CaptivePortal& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_CaptivePortal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_CaptivePortal* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_CaptivePortal>(nullptr);
  }

  GlobalSettingsProto_CaptivePortal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_CaptivePortal>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_CaptivePortal& from);
  void MergeFrom(const GlobalSettingsProto_CaptivePortal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_CaptivePortal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.CaptivePortal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kDetectionEnabledFieldNumber = 2,
    kServerFieldNumber = 3,
    kHttpsUrlFieldNumber = 4,
    kHttpUrlFieldNumber = 5,
    kFallbackUrlFieldNumber = 6,
    kOtherFallbackUrlsFieldNumber = 7,
    kUseHttpsFieldNumber = 8,
    kUserAgentFieldNumber = 9,
  };
  // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
  bool has_mode() const;
  void clear_mode();
  const ::android::providers::settings::SettingProto& mode() const;
  ::android::providers::settings::SettingProto* release_mode();
  ::android::providers::settings::SettingProto* mutable_mode();
  void set_allocated_mode(::android::providers::settings::SettingProto* mode);

  // optional .android.providers.settings.SettingProto detection_enabled = 2 [(.android.privacy) = {
  bool has_detection_enabled() const;
  void clear_detection_enabled();
  const ::android::providers::settings::SettingProto& detection_enabled() const;
  ::android::providers::settings::SettingProto* release_detection_enabled();
  ::android::providers::settings::SettingProto* mutable_detection_enabled();
  void set_allocated_detection_enabled(::android::providers::settings::SettingProto* detection_enabled);

  // optional .android.providers.settings.SettingProto server = 3;
  bool has_server() const;
  void clear_server();
  const ::android::providers::settings::SettingProto& server() const;
  ::android::providers::settings::SettingProto* release_server();
  ::android::providers::settings::SettingProto* mutable_server();
  void set_allocated_server(::android::providers::settings::SettingProto* server);

  // optional .android.providers.settings.SettingProto https_url = 4;
  bool has_https_url() const;
  void clear_https_url();
  const ::android::providers::settings::SettingProto& https_url() const;
  ::android::providers::settings::SettingProto* release_https_url();
  ::android::providers::settings::SettingProto* mutable_https_url();
  void set_allocated_https_url(::android::providers::settings::SettingProto* https_url);

  // optional .android.providers.settings.SettingProto http_url = 5;
  bool has_http_url() const;
  void clear_http_url();
  const ::android::providers::settings::SettingProto& http_url() const;
  ::android::providers::settings::SettingProto* release_http_url();
  ::android::providers::settings::SettingProto* mutable_http_url();
  void set_allocated_http_url(::android::providers::settings::SettingProto* http_url);

  // optional .android.providers.settings.SettingProto fallback_url = 6;
  bool has_fallback_url() const;
  void clear_fallback_url();
  const ::android::providers::settings::SettingProto& fallback_url() const;
  ::android::providers::settings::SettingProto* release_fallback_url();
  ::android::providers::settings::SettingProto* mutable_fallback_url();
  void set_allocated_fallback_url(::android::providers::settings::SettingProto* fallback_url);

  // optional .android.providers.settings.SettingProto other_fallback_urls = 7;
  bool has_other_fallback_urls() const;
  void clear_other_fallback_urls();
  const ::android::providers::settings::SettingProto& other_fallback_urls() const;
  ::android::providers::settings::SettingProto* release_other_fallback_urls();
  ::android::providers::settings::SettingProto* mutable_other_fallback_urls();
  void set_allocated_other_fallback_urls(::android::providers::settings::SettingProto* other_fallback_urls);

  // optional .android.providers.settings.SettingProto use_https = 8 [(.android.privacy) = {
  bool has_use_https() const;
  void clear_use_https();
  const ::android::providers::settings::SettingProto& use_https() const;
  ::android::providers::settings::SettingProto* release_use_https();
  ::android::providers::settings::SettingProto* mutable_use_https();
  void set_allocated_use_https(::android::providers::settings::SettingProto* use_https);

  // optional .android.providers.settings.SettingProto user_agent = 9;
  bool has_user_agent() const;
  void clear_user_agent();
  const ::android::providers::settings::SettingProto& user_agent() const;
  ::android::providers::settings::SettingProto* release_user_agent();
  ::android::providers::settings::SettingProto* mutable_user_agent();
  void set_allocated_user_agent(::android::providers::settings::SettingProto* user_agent);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.CaptivePortal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* mode_;
  ::android::providers::settings::SettingProto* detection_enabled_;
  ::android::providers::settings::SettingProto* server_;
  ::android::providers::settings::SettingProto* https_url_;
  ::android::providers::settings::SettingProto* http_url_;
  ::android::providers::settings::SettingProto* fallback_url_;
  ::android::providers::settings::SettingProto* other_fallback_urls_;
  ::android::providers::settings::SettingProto* use_https_;
  ::android::providers::settings::SettingProto* user_agent_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Carrier :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Carrier) */ {
 public:
  GlobalSettingsProto_Carrier();
  virtual ~GlobalSettingsProto_Carrier();

  GlobalSettingsProto_Carrier(const GlobalSettingsProto_Carrier& from);
  GlobalSettingsProto_Carrier(GlobalSettingsProto_Carrier&& from) noexcept
    : GlobalSettingsProto_Carrier() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Carrier& operator=(const GlobalSettingsProto_Carrier& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Carrier& operator=(GlobalSettingsProto_Carrier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Carrier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Carrier* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Carrier*>(
               &_GlobalSettingsProto_Carrier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GlobalSettingsProto_Carrier& a, GlobalSettingsProto_Carrier& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Carrier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Carrier* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Carrier>(nullptr);
  }

  GlobalSettingsProto_Carrier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Carrier>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Carrier& from);
  void MergeFrom(const GlobalSettingsProto_Carrier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Carrier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Carrier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppWhitelistFieldNumber = 1,
    kAppNamesFieldNumber = 2,
    kInstallCarrierAppNotificationPersistentFieldNumber = 3,
    kInstallCarrierAppNotificationSleepMillisFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto app_whitelist = 1 [(.android.privacy) = {
  bool has_app_whitelist() const;
  void clear_app_whitelist();
  const ::android::providers::settings::SettingProto& app_whitelist() const;
  ::android::providers::settings::SettingProto* release_app_whitelist();
  ::android::providers::settings::SettingProto* mutable_app_whitelist();
  void set_allocated_app_whitelist(::android::providers::settings::SettingProto* app_whitelist);

  // optional .android.providers.settings.SettingProto app_names = 2 [(.android.privacy) = {
  bool has_app_names() const;
  void clear_app_names();
  const ::android::providers::settings::SettingProto& app_names() const;
  ::android::providers::settings::SettingProto* release_app_names();
  ::android::providers::settings::SettingProto* mutable_app_names();
  void set_allocated_app_names(::android::providers::settings::SettingProto* app_names);

  // optional .android.providers.settings.SettingProto install_carrier_app_notification_persistent = 3 [(.android.privacy) = {
  bool has_install_carrier_app_notification_persistent() const;
  void clear_install_carrier_app_notification_persistent();
  const ::android::providers::settings::SettingProto& install_carrier_app_notification_persistent() const;
  ::android::providers::settings::SettingProto* release_install_carrier_app_notification_persistent();
  ::android::providers::settings::SettingProto* mutable_install_carrier_app_notification_persistent();
  void set_allocated_install_carrier_app_notification_persistent(::android::providers::settings::SettingProto* install_carrier_app_notification_persistent);

  // optional .android.providers.settings.SettingProto install_carrier_app_notification_sleep_millis = 4 [(.android.privacy) = {
  bool has_install_carrier_app_notification_sleep_millis() const;
  void clear_install_carrier_app_notification_sleep_millis();
  const ::android::providers::settings::SettingProto& install_carrier_app_notification_sleep_millis() const;
  ::android::providers::settings::SettingProto* release_install_carrier_app_notification_sleep_millis();
  ::android::providers::settings::SettingProto* mutable_install_carrier_app_notification_sleep_millis();
  void set_allocated_install_carrier_app_notification_sleep_millis(::android::providers::settings::SettingProto* install_carrier_app_notification_sleep_millis);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Carrier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* app_whitelist_;
  ::android::providers::settings::SettingProto* app_names_;
  ::android::providers::settings::SettingProto* install_carrier_app_notification_persistent_;
  ::android::providers::settings::SettingProto* install_carrier_app_notification_sleep_millis_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Cdma :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Cdma) */ {
 public:
  GlobalSettingsProto_Cdma();
  virtual ~GlobalSettingsProto_Cdma();

  GlobalSettingsProto_Cdma(const GlobalSettingsProto_Cdma& from);
  GlobalSettingsProto_Cdma(GlobalSettingsProto_Cdma&& from) noexcept
    : GlobalSettingsProto_Cdma() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Cdma& operator=(const GlobalSettingsProto_Cdma& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Cdma& operator=(GlobalSettingsProto_Cdma&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Cdma& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Cdma* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Cdma*>(
               &_GlobalSettingsProto_Cdma_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GlobalSettingsProto_Cdma& a, GlobalSettingsProto_Cdma& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Cdma* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Cdma* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Cdma>(nullptr);
  }

  GlobalSettingsProto_Cdma* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Cdma>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Cdma& from);
  void MergeFrom(const GlobalSettingsProto_Cdma& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Cdma* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Cdma";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellBroadcastSmsFieldNumber = 1,
    kRoamingModeFieldNumber = 2,
    kSubscriptionModeFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto cell_broadcast_sms = 1 [(.android.privacy) = {
  bool has_cell_broadcast_sms() const;
  void clear_cell_broadcast_sms();
  const ::android::providers::settings::SettingProto& cell_broadcast_sms() const;
  ::android::providers::settings::SettingProto* release_cell_broadcast_sms();
  ::android::providers::settings::SettingProto* mutable_cell_broadcast_sms();
  void set_allocated_cell_broadcast_sms(::android::providers::settings::SettingProto* cell_broadcast_sms);

  // optional .android.providers.settings.SettingProto roaming_mode = 2 [(.android.privacy) = {
  bool has_roaming_mode() const;
  void clear_roaming_mode();
  const ::android::providers::settings::SettingProto& roaming_mode() const;
  ::android::providers::settings::SettingProto* release_roaming_mode();
  ::android::providers::settings::SettingProto* mutable_roaming_mode();
  void set_allocated_roaming_mode(::android::providers::settings::SettingProto* roaming_mode);

  // optional .android.providers.settings.SettingProto subscription_mode = 3 [(.android.privacy) = {
  bool has_subscription_mode() const;
  void clear_subscription_mode();
  const ::android::providers::settings::SettingProto& subscription_mode() const;
  ::android::providers::settings::SettingProto* release_subscription_mode();
  ::android::providers::settings::SettingProto* mutable_subscription_mode();
  void set_allocated_subscription_mode(::android::providers::settings::SettingProto* subscription_mode);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Cdma)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* cell_broadcast_sms_;
  ::android::providers::settings::SettingProto* roaming_mode_;
  ::android::providers::settings::SettingProto* subscription_mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_CertPin :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.CertPin) */ {
 public:
  GlobalSettingsProto_CertPin();
  virtual ~GlobalSettingsProto_CertPin();

  GlobalSettingsProto_CertPin(const GlobalSettingsProto_CertPin& from);
  GlobalSettingsProto_CertPin(GlobalSettingsProto_CertPin&& from) noexcept
    : GlobalSettingsProto_CertPin() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_CertPin& operator=(const GlobalSettingsProto_CertPin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_CertPin& operator=(GlobalSettingsProto_CertPin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_CertPin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_CertPin* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_CertPin*>(
               &_GlobalSettingsProto_CertPin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GlobalSettingsProto_CertPin& a, GlobalSettingsProto_CertPin& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_CertPin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_CertPin* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_CertPin>(nullptr);
  }

  GlobalSettingsProto_CertPin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_CertPin>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_CertPin& from);
  void MergeFrom(const GlobalSettingsProto_CertPin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_CertPin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.CertPin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateContentUrlFieldNumber = 1,
    kUpdateMetadataUrlFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  bool has_update_content_url() const;
  void clear_update_content_url();
  const ::android::providers::settings::SettingProto& update_content_url() const;
  ::android::providers::settings::SettingProto* release_update_content_url();
  ::android::providers::settings::SettingProto* mutable_update_content_url();
  void set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url);

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  bool has_update_metadata_url() const;
  void clear_update_metadata_url();
  const ::android::providers::settings::SettingProto& update_metadata_url() const;
  ::android::providers::settings::SettingProto* release_update_metadata_url();
  ::android::providers::settings::SettingProto* mutable_update_metadata_url();
  void set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.CertPin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* update_content_url_;
  ::android::providers::settings::SettingProto* update_metadata_url_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Connectivity :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Connectivity) */ {
 public:
  GlobalSettingsProto_Connectivity();
  virtual ~GlobalSettingsProto_Connectivity();

  GlobalSettingsProto_Connectivity(const GlobalSettingsProto_Connectivity& from);
  GlobalSettingsProto_Connectivity(GlobalSettingsProto_Connectivity&& from) noexcept
    : GlobalSettingsProto_Connectivity() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Connectivity& operator=(const GlobalSettingsProto_Connectivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Connectivity& operator=(GlobalSettingsProto_Connectivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Connectivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Connectivity* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Connectivity*>(
               &_GlobalSettingsProto_Connectivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GlobalSettingsProto_Connectivity& a, GlobalSettingsProto_Connectivity& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Connectivity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Connectivity* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Connectivity>(nullptr);
  }

  GlobalSettingsProto_Connectivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Connectivity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Connectivity& from);
  void MergeFrom(const GlobalSettingsProto_Connectivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Connectivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Connectivity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsBufferSizeFieldNumber = 1,
    kChangeDelayFieldNumber = 2,
    kSamplingIntervalInSecondsFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto metrics_buffer_size = 1 [(.android.privacy) = {
  bool has_metrics_buffer_size() const;
  void clear_metrics_buffer_size();
  const ::android::providers::settings::SettingProto& metrics_buffer_size() const;
  ::android::providers::settings::SettingProto* release_metrics_buffer_size();
  ::android::providers::settings::SettingProto* mutable_metrics_buffer_size();
  void set_allocated_metrics_buffer_size(::android::providers::settings::SettingProto* metrics_buffer_size);

  // optional .android.providers.settings.SettingProto change_delay = 2 [(.android.privacy) = {
  bool has_change_delay() const;
  void clear_change_delay();
  const ::android::providers::settings::SettingProto& change_delay() const;
  ::android::providers::settings::SettingProto* release_change_delay();
  ::android::providers::settings::SettingProto* mutable_change_delay();
  void set_allocated_change_delay(::android::providers::settings::SettingProto* change_delay);

  // optional .android.providers.settings.SettingProto sampling_interval_in_seconds = 3 [(.android.privacy) = {
  bool has_sampling_interval_in_seconds() const;
  void clear_sampling_interval_in_seconds();
  const ::android::providers::settings::SettingProto& sampling_interval_in_seconds() const;
  ::android::providers::settings::SettingProto* release_sampling_interval_in_seconds();
  ::android::providers::settings::SettingProto* mutable_sampling_interval_in_seconds();
  void set_allocated_sampling_interval_in_seconds(::android::providers::settings::SettingProto* sampling_interval_in_seconds);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Connectivity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* metrics_buffer_size_;
  ::android::providers::settings::SettingProto* change_delay_;
  ::android::providers::settings::SettingProto* sampling_interval_in_seconds_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Data :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Data) */ {
 public:
  GlobalSettingsProto_Data();
  virtual ~GlobalSettingsProto_Data();

  GlobalSettingsProto_Data(const GlobalSettingsProto_Data& from);
  GlobalSettingsProto_Data(GlobalSettingsProto_Data&& from) noexcept
    : GlobalSettingsProto_Data() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Data& operator=(const GlobalSettingsProto_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Data& operator=(GlobalSettingsProto_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Data* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Data*>(
               &_GlobalSettingsProto_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GlobalSettingsProto_Data& a, GlobalSettingsProto_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Data* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Data>(nullptr);
  }

  GlobalSettingsProto_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Data& from);
  void MergeFrom(const GlobalSettingsProto_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityTimeoutMobileFieldNumber = 1,
    kActivityTimeoutWifiFieldNumber = 2,
    kRoamingFieldNumber = 3,
    kStallAlarmNonAggressiveDelayInMsFieldNumber = 4,
    kStallAlarmAggressiveDelayInMsFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto activity_timeout_mobile = 1 [(.android.privacy) = {
  bool has_activity_timeout_mobile() const;
  void clear_activity_timeout_mobile();
  const ::android::providers::settings::SettingProto& activity_timeout_mobile() const;
  ::android::providers::settings::SettingProto* release_activity_timeout_mobile();
  ::android::providers::settings::SettingProto* mutable_activity_timeout_mobile();
  void set_allocated_activity_timeout_mobile(::android::providers::settings::SettingProto* activity_timeout_mobile);

  // optional .android.providers.settings.SettingProto activity_timeout_wifi = 2 [(.android.privacy) = {
  bool has_activity_timeout_wifi() const;
  void clear_activity_timeout_wifi();
  const ::android::providers::settings::SettingProto& activity_timeout_wifi() const;
  ::android::providers::settings::SettingProto* release_activity_timeout_wifi();
  ::android::providers::settings::SettingProto* mutable_activity_timeout_wifi();
  void set_allocated_activity_timeout_wifi(::android::providers::settings::SettingProto* activity_timeout_wifi);

  // optional .android.providers.settings.SettingProto roaming = 3 [(.android.privacy) = {
  bool has_roaming() const;
  void clear_roaming();
  const ::android::providers::settings::SettingProto& roaming() const;
  ::android::providers::settings::SettingProto* release_roaming();
  ::android::providers::settings::SettingProto* mutable_roaming();
  void set_allocated_roaming(::android::providers::settings::SettingProto* roaming);

  // optional .android.providers.settings.SettingProto stall_alarm_non_aggressive_delay_in_ms = 4 [(.android.privacy) = {
  bool has_stall_alarm_non_aggressive_delay_in_ms() const;
  void clear_stall_alarm_non_aggressive_delay_in_ms();
  const ::android::providers::settings::SettingProto& stall_alarm_non_aggressive_delay_in_ms() const;
  ::android::providers::settings::SettingProto* release_stall_alarm_non_aggressive_delay_in_ms();
  ::android::providers::settings::SettingProto* mutable_stall_alarm_non_aggressive_delay_in_ms();
  void set_allocated_stall_alarm_non_aggressive_delay_in_ms(::android::providers::settings::SettingProto* stall_alarm_non_aggressive_delay_in_ms);

  // optional .android.providers.settings.SettingProto stall_alarm_aggressive_delay_in_ms = 5 [(.android.privacy) = {
  bool has_stall_alarm_aggressive_delay_in_ms() const;
  void clear_stall_alarm_aggressive_delay_in_ms();
  const ::android::providers::settings::SettingProto& stall_alarm_aggressive_delay_in_ms() const;
  ::android::providers::settings::SettingProto* release_stall_alarm_aggressive_delay_in_ms();
  ::android::providers::settings::SettingProto* mutable_stall_alarm_aggressive_delay_in_ms();
  void set_allocated_stall_alarm_aggressive_delay_in_ms(::android::providers::settings::SettingProto* stall_alarm_aggressive_delay_in_ms);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* activity_timeout_mobile_;
  ::android::providers::settings::SettingProto* activity_timeout_wifi_;
  ::android::providers::settings::SettingProto* roaming_;
  ::android::providers::settings::SettingProto* stall_alarm_non_aggressive_delay_in_ms_;
  ::android::providers::settings::SettingProto* stall_alarm_aggressive_delay_in_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Database :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Database) */ {
 public:
  GlobalSettingsProto_Database();
  virtual ~GlobalSettingsProto_Database();

  GlobalSettingsProto_Database(const GlobalSettingsProto_Database& from);
  GlobalSettingsProto_Database(GlobalSettingsProto_Database&& from) noexcept
    : GlobalSettingsProto_Database() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Database& operator=(const GlobalSettingsProto_Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Database& operator=(GlobalSettingsProto_Database&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Database& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Database* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Database*>(
               &_GlobalSettingsProto_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GlobalSettingsProto_Database& a, GlobalSettingsProto_Database& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Database* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Database* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Database>(nullptr);
  }

  GlobalSettingsProto_Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Database>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Database& from);
  void MergeFrom(const GlobalSettingsProto_Database& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Database* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Database";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDowngradeReasonFieldNumber = 1,
    kCreationBuildidFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto downgrade_reason = 1;
  bool has_downgrade_reason() const;
  void clear_downgrade_reason();
  const ::android::providers::settings::SettingProto& downgrade_reason() const;
  ::android::providers::settings::SettingProto* release_downgrade_reason();
  ::android::providers::settings::SettingProto* mutable_downgrade_reason();
  void set_allocated_downgrade_reason(::android::providers::settings::SettingProto* downgrade_reason);

  // optional .android.providers.settings.SettingProto creation_buildid = 2 [(.android.privacy) = {
  bool has_creation_buildid() const;
  void clear_creation_buildid();
  const ::android::providers::settings::SettingProto& creation_buildid() const;
  ::android::providers::settings::SettingProto* release_creation_buildid();
  ::android::providers::settings::SettingProto* mutable_creation_buildid();
  void set_allocated_creation_buildid(::android::providers::settings::SettingProto* creation_buildid);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Database)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* downgrade_reason_;
  ::android::providers::settings::SettingProto* creation_buildid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_DateTime :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.DateTime) */ {
 public:
  GlobalSettingsProto_DateTime();
  virtual ~GlobalSettingsProto_DateTime();

  GlobalSettingsProto_DateTime(const GlobalSettingsProto_DateTime& from);
  GlobalSettingsProto_DateTime(GlobalSettingsProto_DateTime&& from) noexcept
    : GlobalSettingsProto_DateTime() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_DateTime& operator=(const GlobalSettingsProto_DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_DateTime& operator=(GlobalSettingsProto_DateTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_DateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_DateTime* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_DateTime*>(
               &_GlobalSettingsProto_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GlobalSettingsProto_DateTime& a, GlobalSettingsProto_DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_DateTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_DateTime* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_DateTime>(nullptr);
  }

  GlobalSettingsProto_DateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_DateTime>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_DateTime& from);
  void MergeFrom(const GlobalSettingsProto_DateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_DateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.DateTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoTimeFieldNumber = 1,
    kAutoTimeZoneFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto auto_time = 1 [(.android.privacy) = {
  bool has_auto_time() const;
  void clear_auto_time();
  const ::android::providers::settings::SettingProto& auto_time() const;
  ::android::providers::settings::SettingProto* release_auto_time();
  ::android::providers::settings::SettingProto* mutable_auto_time();
  void set_allocated_auto_time(::android::providers::settings::SettingProto* auto_time);

  // optional .android.providers.settings.SettingProto auto_time_zone = 2 [(.android.privacy) = {
  bool has_auto_time_zone() const;
  void clear_auto_time_zone();
  const ::android::providers::settings::SettingProto& auto_time_zone() const;
  ::android::providers::settings::SettingProto* release_auto_time_zone();
  ::android::providers::settings::SettingProto* mutable_auto_time_zone();
  void set_allocated_auto_time_zone(::android::providers::settings::SettingProto* auto_time_zone);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.DateTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* auto_time_;
  ::android::providers::settings::SettingProto* auto_time_zone_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Debug :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Debug) */ {
 public:
  GlobalSettingsProto_Debug();
  virtual ~GlobalSettingsProto_Debug();

  GlobalSettingsProto_Debug(const GlobalSettingsProto_Debug& from);
  GlobalSettingsProto_Debug(GlobalSettingsProto_Debug&& from) noexcept
    : GlobalSettingsProto_Debug() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Debug& operator=(const GlobalSettingsProto_Debug& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Debug& operator=(GlobalSettingsProto_Debug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Debug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Debug* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Debug*>(
               &_GlobalSettingsProto_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GlobalSettingsProto_Debug& a, GlobalSettingsProto_Debug& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Debug* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Debug* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Debug>(nullptr);
  }

  GlobalSettingsProto_Debug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Debug>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Debug& from);
  void MergeFrom(const GlobalSettingsProto_Debug& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Debug* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Debug";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppFieldNumber = 1,
    kViewAttributesFieldNumber = 2,
    kViewAttributesApplicationPackageFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto app = 1;
  bool has_app() const;
  void clear_app();
  const ::android::providers::settings::SettingProto& app() const;
  ::android::providers::settings::SettingProto* release_app();
  ::android::providers::settings::SettingProto* mutable_app();
  void set_allocated_app(::android::providers::settings::SettingProto* app);

  // optional .android.providers.settings.SettingProto view_attributes = 2 [(.android.privacy) = {
  bool has_view_attributes() const;
  void clear_view_attributes();
  const ::android::providers::settings::SettingProto& view_attributes() const;
  ::android::providers::settings::SettingProto* release_view_attributes();
  ::android::providers::settings::SettingProto* mutable_view_attributes();
  void set_allocated_view_attributes(::android::providers::settings::SettingProto* view_attributes);

  // optional .android.providers.settings.SettingProto view_attributes_application_package = 3 [(.android.privacy) = {
  bool has_view_attributes_application_package() const;
  void clear_view_attributes_application_package();
  const ::android::providers::settings::SettingProto& view_attributes_application_package() const;
  ::android::providers::settings::SettingProto* release_view_attributes_application_package();
  ::android::providers::settings::SettingProto* mutable_view_attributes_application_package();
  void set_allocated_view_attributes_application_package(::android::providers::settings::SettingProto* view_attributes_application_package);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Debug)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* app_;
  ::android::providers::settings::SettingProto* view_attributes_;
  ::android::providers::settings::SettingProto* view_attributes_application_package_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Default :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Default) */ {
 public:
  GlobalSettingsProto_Default();
  virtual ~GlobalSettingsProto_Default();

  GlobalSettingsProto_Default(const GlobalSettingsProto_Default& from);
  GlobalSettingsProto_Default(GlobalSettingsProto_Default&& from) noexcept
    : GlobalSettingsProto_Default() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Default& operator=(const GlobalSettingsProto_Default& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Default& operator=(GlobalSettingsProto_Default&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Default& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Default* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Default*>(
               &_GlobalSettingsProto_Default_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GlobalSettingsProto_Default& a, GlobalSettingsProto_Default& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Default* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Default* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Default>(nullptr);
  }

  GlobalSettingsProto_Default* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Default>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Default& from);
  void MergeFrom(const GlobalSettingsProto_Default& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Default* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Default";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstallLocationFieldNumber = 1,
    kDnsServerFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto install_location = 1 [(.android.privacy) = {
  bool has_install_location() const;
  void clear_install_location();
  const ::android::providers::settings::SettingProto& install_location() const;
  ::android::providers::settings::SettingProto* release_install_location();
  ::android::providers::settings::SettingProto* mutable_install_location();
  void set_allocated_install_location(::android::providers::settings::SettingProto* install_location);

  // optional .android.providers.settings.SettingProto dns_server = 2;
  bool has_dns_server() const;
  void clear_dns_server();
  const ::android::providers::settings::SettingProto& dns_server() const;
  ::android::providers::settings::SettingProto* release_dns_server();
  ::android::providers::settings::SettingProto* mutable_dns_server();
  void set_allocated_dns_server(::android::providers::settings::SettingProto* dns_server);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Default)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* install_location_;
  ::android::providers::settings::SettingProto* dns_server_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Development :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Development) */ {
 public:
  GlobalSettingsProto_Development();
  virtual ~GlobalSettingsProto_Development();

  GlobalSettingsProto_Development(const GlobalSettingsProto_Development& from);
  GlobalSettingsProto_Development(GlobalSettingsProto_Development&& from) noexcept
    : GlobalSettingsProto_Development() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Development& operator=(const GlobalSettingsProto_Development& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Development& operator=(GlobalSettingsProto_Development&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Development& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Development* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Development*>(
               &_GlobalSettingsProto_Development_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GlobalSettingsProto_Development& a, GlobalSettingsProto_Development& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Development* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Development* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Development>(nullptr);
  }

  GlobalSettingsProto_Development* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Development>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Development& from);
  void MergeFrom(const GlobalSettingsProto_Development& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Development* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Development";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsEnabledFieldNumber = 1,
    kForceResizableActivitiesFieldNumber = 2,
    kEnableFreeformWindowsSupportFieldNumber = 3,
    kForceRtlFieldNumber = 4,
    kEmulateDisplayCutoutFieldNumber = 5,
    kForceDesktopModeOnExternalDisplaysFieldNumber = 6,
    kEnableSizecompatFreeformFieldNumber = 7,
    kEnableNonResizableMultiWindowFieldNumber = 8,
    kDisableWindowBlursFieldNumber = 9,
  };
  // optional .android.providers.settings.SettingProto settings_enabled = 1 [(.android.privacy) = {
  bool has_settings_enabled() const;
  void clear_settings_enabled();
  const ::android::providers::settings::SettingProto& settings_enabled() const;
  ::android::providers::settings::SettingProto* release_settings_enabled();
  ::android::providers::settings::SettingProto* mutable_settings_enabled();
  void set_allocated_settings_enabled(::android::providers::settings::SettingProto* settings_enabled);

  // optional .android.providers.settings.SettingProto force_resizable_activities = 2 [(.android.privacy) = {
  bool has_force_resizable_activities() const;
  void clear_force_resizable_activities();
  const ::android::providers::settings::SettingProto& force_resizable_activities() const;
  ::android::providers::settings::SettingProto* release_force_resizable_activities();
  ::android::providers::settings::SettingProto* mutable_force_resizable_activities();
  void set_allocated_force_resizable_activities(::android::providers::settings::SettingProto* force_resizable_activities);

  // optional .android.providers.settings.SettingProto enable_freeform_windows_support = 3 [(.android.privacy) = {
  bool has_enable_freeform_windows_support() const;
  void clear_enable_freeform_windows_support();
  const ::android::providers::settings::SettingProto& enable_freeform_windows_support() const;
  ::android::providers::settings::SettingProto* release_enable_freeform_windows_support();
  ::android::providers::settings::SettingProto* mutable_enable_freeform_windows_support();
  void set_allocated_enable_freeform_windows_support(::android::providers::settings::SettingProto* enable_freeform_windows_support);

  // optional .android.providers.settings.SettingProto force_rtl = 4 [(.android.privacy) = {
  bool has_force_rtl() const;
  void clear_force_rtl();
  const ::android::providers::settings::SettingProto& force_rtl() const;
  ::android::providers::settings::SettingProto* release_force_rtl();
  ::android::providers::settings::SettingProto* mutable_force_rtl();
  void set_allocated_force_rtl(::android::providers::settings::SettingProto* force_rtl);

  // optional .android.providers.settings.SettingProto emulate_display_cutout = 5 [(.android.privacy) = {
  bool has_emulate_display_cutout() const;
  void clear_emulate_display_cutout();
  const ::android::providers::settings::SettingProto& emulate_display_cutout() const;
  ::android::providers::settings::SettingProto* release_emulate_display_cutout();
  ::android::providers::settings::SettingProto* mutable_emulate_display_cutout();
  void set_allocated_emulate_display_cutout(::android::providers::settings::SettingProto* emulate_display_cutout);

  // optional .android.providers.settings.SettingProto force_desktop_mode_on_external_displays = 6 [(.android.privacy) = {
  bool has_force_desktop_mode_on_external_displays() const;
  void clear_force_desktop_mode_on_external_displays();
  const ::android::providers::settings::SettingProto& force_desktop_mode_on_external_displays() const;
  ::android::providers::settings::SettingProto* release_force_desktop_mode_on_external_displays();
  ::android::providers::settings::SettingProto* mutable_force_desktop_mode_on_external_displays();
  void set_allocated_force_desktop_mode_on_external_displays(::android::providers::settings::SettingProto* force_desktop_mode_on_external_displays);

  // optional .android.providers.settings.SettingProto enable_sizecompat_freeform = 7 [deprecated = true, (.android.privacy) = {
  PROTOBUF_DEPRECATED bool has_enable_sizecompat_freeform() const;
  PROTOBUF_DEPRECATED void clear_enable_sizecompat_freeform();
  PROTOBUF_DEPRECATED const ::android::providers::settings::SettingProto& enable_sizecompat_freeform() const;
  PROTOBUF_DEPRECATED ::android::providers::settings::SettingProto* release_enable_sizecompat_freeform();
  PROTOBUF_DEPRECATED ::android::providers::settings::SettingProto* mutable_enable_sizecompat_freeform();
  PROTOBUF_DEPRECATED void set_allocated_enable_sizecompat_freeform(::android::providers::settings::SettingProto* enable_sizecompat_freeform);

  // optional .android.providers.settings.SettingProto enable_non_resizable_multi_window = 8 [(.android.privacy) = {
  bool has_enable_non_resizable_multi_window() const;
  void clear_enable_non_resizable_multi_window();
  const ::android::providers::settings::SettingProto& enable_non_resizable_multi_window() const;
  ::android::providers::settings::SettingProto* release_enable_non_resizable_multi_window();
  ::android::providers::settings::SettingProto* mutable_enable_non_resizable_multi_window();
  void set_allocated_enable_non_resizable_multi_window(::android::providers::settings::SettingProto* enable_non_resizable_multi_window);

  // optional .android.providers.settings.SettingProto disable_window_blurs = 9 [(.android.privacy) = {
  bool has_disable_window_blurs() const;
  void clear_disable_window_blurs();
  const ::android::providers::settings::SettingProto& disable_window_blurs() const;
  ::android::providers::settings::SettingProto* release_disable_window_blurs();
  ::android::providers::settings::SettingProto* mutable_disable_window_blurs();
  void set_allocated_disable_window_blurs(::android::providers::settings::SettingProto* disable_window_blurs);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Development)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* settings_enabled_;
  ::android::providers::settings::SettingProto* force_resizable_activities_;
  ::android::providers::settings::SettingProto* enable_freeform_windows_support_;
  ::android::providers::settings::SettingProto* force_rtl_;
  ::android::providers::settings::SettingProto* emulate_display_cutout_;
  ::android::providers::settings::SettingProto* force_desktop_mode_on_external_displays_;
  ::android::providers::settings::SettingProto* enable_sizecompat_freeform_;
  ::android::providers::settings::SettingProto* enable_non_resizable_multi_window_;
  ::android::providers::settings::SettingProto* disable_window_blurs_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Device :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Device) */ {
 public:
  GlobalSettingsProto_Device();
  virtual ~GlobalSettingsProto_Device();

  GlobalSettingsProto_Device(const GlobalSettingsProto_Device& from);
  GlobalSettingsProto_Device(GlobalSettingsProto_Device&& from) noexcept
    : GlobalSettingsProto_Device() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Device& operator=(const GlobalSettingsProto_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Device& operator=(GlobalSettingsProto_Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Device* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Device*>(
               &_GlobalSettingsProto_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GlobalSettingsProto_Device& a, GlobalSettingsProto_Device& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Device* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Device* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Device>(nullptr);
  }

  GlobalSettingsProto_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Device>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Device& from);
  void MergeFrom(const GlobalSettingsProto_Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Device";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProvisionedFieldNumber = 2,
    kProvisioningMobileDataEnabledFieldNumber = 3,
    kPolicyConstantsFieldNumber = 5,
    kDemoModeFieldNumber = 6,
  };
  // optional .android.providers.settings.SettingProto name = 1;
  bool has_name() const;
  void clear_name();
  const ::android::providers::settings::SettingProto& name() const;
  ::android::providers::settings::SettingProto* release_name();
  ::android::providers::settings::SettingProto* mutable_name();
  void set_allocated_name(::android::providers::settings::SettingProto* name);

  // optional .android.providers.settings.SettingProto provisioned = 2 [(.android.privacy) = {
  bool has_provisioned() const;
  void clear_provisioned();
  const ::android::providers::settings::SettingProto& provisioned() const;
  ::android::providers::settings::SettingProto* release_provisioned();
  ::android::providers::settings::SettingProto* mutable_provisioned();
  void set_allocated_provisioned(::android::providers::settings::SettingProto* provisioned);

  // optional .android.providers.settings.SettingProto provisioning_mobile_data_enabled = 3 [(.android.privacy) = {
  bool has_provisioning_mobile_data_enabled() const;
  void clear_provisioning_mobile_data_enabled();
  const ::android::providers::settings::SettingProto& provisioning_mobile_data_enabled() const;
  ::android::providers::settings::SettingProto* release_provisioning_mobile_data_enabled();
  ::android::providers::settings::SettingProto* mutable_provisioning_mobile_data_enabled();
  void set_allocated_provisioning_mobile_data_enabled(::android::providers::settings::SettingProto* provisioning_mobile_data_enabled);

  // optional .android.providers.settings.SettingProto policy_constants = 5;
  bool has_policy_constants() const;
  void clear_policy_constants();
  const ::android::providers::settings::SettingProto& policy_constants() const;
  ::android::providers::settings::SettingProto* release_policy_constants();
  ::android::providers::settings::SettingProto* mutable_policy_constants();
  void set_allocated_policy_constants(::android::providers::settings::SettingProto* policy_constants);

  // optional .android.providers.settings.SettingProto demo_mode = 6 [(.android.privacy) = {
  bool has_demo_mode() const;
  void clear_demo_mode();
  const ::android::providers::settings::SettingProto& demo_mode() const;
  ::android::providers::settings::SettingProto* release_demo_mode();
  ::android::providers::settings::SettingProto* mutable_demo_mode();
  void set_allocated_demo_mode(::android::providers::settings::SettingProto* demo_mode);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Device)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* name_;
  ::android::providers::settings::SettingProto* provisioned_;
  ::android::providers::settings::SettingProto* provisioning_mobile_data_enabled_;
  ::android::providers::settings::SettingProto* policy_constants_;
  ::android::providers::settings::SettingProto* demo_mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Display :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Display) */ {
 public:
  GlobalSettingsProto_Display();
  virtual ~GlobalSettingsProto_Display();

  GlobalSettingsProto_Display(const GlobalSettingsProto_Display& from);
  GlobalSettingsProto_Display(GlobalSettingsProto_Display&& from) noexcept
    : GlobalSettingsProto_Display() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Display& operator=(const GlobalSettingsProto_Display& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Display& operator=(GlobalSettingsProto_Display&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Display& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Display* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Display*>(
               &_GlobalSettingsProto_Display_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GlobalSettingsProto_Display& a, GlobalSettingsProto_Display& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Display* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Display* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Display>(nullptr);
  }

  GlobalSettingsProto_Display* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Display>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Display& from);
  void MergeFrom(const GlobalSettingsProto_Display& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Display* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Display";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeForcedFieldNumber = 1,
    kScalingForceFieldNumber = 2,
    kPanelLpmFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto size_forced = 1 [(.android.privacy) = {
  bool has_size_forced() const;
  void clear_size_forced();
  const ::android::providers::settings::SettingProto& size_forced() const;
  ::android::providers::settings::SettingProto* release_size_forced();
  ::android::providers::settings::SettingProto* mutable_size_forced();
  void set_allocated_size_forced(::android::providers::settings::SettingProto* size_forced);

  // optional .android.providers.settings.SettingProto scaling_force = 2 [(.android.privacy) = {
  bool has_scaling_force() const;
  void clear_scaling_force();
  const ::android::providers::settings::SettingProto& scaling_force() const;
  ::android::providers::settings::SettingProto* release_scaling_force();
  ::android::providers::settings::SettingProto* mutable_scaling_force();
  void set_allocated_scaling_force(::android::providers::settings::SettingProto* scaling_force);

  // optional .android.providers.settings.SettingProto panel_lpm = 3 [(.android.privacy) = {
  bool has_panel_lpm() const;
  void clear_panel_lpm();
  const ::android::providers::settings::SettingProto& panel_lpm() const;
  ::android::providers::settings::SettingProto* release_panel_lpm();
  ::android::providers::settings::SettingProto* mutable_panel_lpm();
  void set_allocated_panel_lpm(::android::providers::settings::SettingProto* panel_lpm);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Display)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* size_forced_;
  ::android::providers::settings::SettingProto* scaling_force_;
  ::android::providers::settings::SettingProto* panel_lpm_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_DnsResolver :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.DnsResolver) */ {
 public:
  GlobalSettingsProto_DnsResolver();
  virtual ~GlobalSettingsProto_DnsResolver();

  GlobalSettingsProto_DnsResolver(const GlobalSettingsProto_DnsResolver& from);
  GlobalSettingsProto_DnsResolver(GlobalSettingsProto_DnsResolver&& from) noexcept
    : GlobalSettingsProto_DnsResolver() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_DnsResolver& operator=(const GlobalSettingsProto_DnsResolver& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_DnsResolver& operator=(GlobalSettingsProto_DnsResolver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_DnsResolver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_DnsResolver* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_DnsResolver*>(
               &_GlobalSettingsProto_DnsResolver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GlobalSettingsProto_DnsResolver& a, GlobalSettingsProto_DnsResolver& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_DnsResolver* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_DnsResolver* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_DnsResolver>(nullptr);
  }

  GlobalSettingsProto_DnsResolver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_DnsResolver>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_DnsResolver& from);
  void MergeFrom(const GlobalSettingsProto_DnsResolver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_DnsResolver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.DnsResolver";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleValiditySecondsFieldNumber = 1,
    kSuccessThresholdPercentFieldNumber = 2,
    kMinSamplesFieldNumber = 3,
    kMaxSamplesFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto sample_validity_seconds = 1 [(.android.privacy) = {
  bool has_sample_validity_seconds() const;
  void clear_sample_validity_seconds();
  const ::android::providers::settings::SettingProto& sample_validity_seconds() const;
  ::android::providers::settings::SettingProto* release_sample_validity_seconds();
  ::android::providers::settings::SettingProto* mutable_sample_validity_seconds();
  void set_allocated_sample_validity_seconds(::android::providers::settings::SettingProto* sample_validity_seconds);

  // optional .android.providers.settings.SettingProto success_threshold_percent = 2 [(.android.privacy) = {
  bool has_success_threshold_percent() const;
  void clear_success_threshold_percent();
  const ::android::providers::settings::SettingProto& success_threshold_percent() const;
  ::android::providers::settings::SettingProto* release_success_threshold_percent();
  ::android::providers::settings::SettingProto* mutable_success_threshold_percent();
  void set_allocated_success_threshold_percent(::android::providers::settings::SettingProto* success_threshold_percent);

  // optional .android.providers.settings.SettingProto min_samples = 3 [(.android.privacy) = {
  bool has_min_samples() const;
  void clear_min_samples();
  const ::android::providers::settings::SettingProto& min_samples() const;
  ::android::providers::settings::SettingProto* release_min_samples();
  ::android::providers::settings::SettingProto* mutable_min_samples();
  void set_allocated_min_samples(::android::providers::settings::SettingProto* min_samples);

  // optional .android.providers.settings.SettingProto max_samples = 4 [(.android.privacy) = {
  bool has_max_samples() const;
  void clear_max_samples();
  const ::android::providers::settings::SettingProto& max_samples() const;
  ::android::providers::settings::SettingProto* release_max_samples();
  ::android::providers::settings::SettingProto* mutable_max_samples();
  void set_allocated_max_samples(::android::providers::settings::SettingProto* max_samples);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.DnsResolver)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* sample_validity_seconds_;
  ::android::providers::settings::SettingProto* success_threshold_percent_;
  ::android::providers::settings::SettingProto* min_samples_;
  ::android::providers::settings::SettingProto* max_samples_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Download :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Download) */ {
 public:
  GlobalSettingsProto_Download();
  virtual ~GlobalSettingsProto_Download();

  GlobalSettingsProto_Download(const GlobalSettingsProto_Download& from);
  GlobalSettingsProto_Download(GlobalSettingsProto_Download&& from) noexcept
    : GlobalSettingsProto_Download() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Download& operator=(const GlobalSettingsProto_Download& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Download& operator=(GlobalSettingsProto_Download&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Download& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Download* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Download*>(
               &_GlobalSettingsProto_Download_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GlobalSettingsProto_Download& a, GlobalSettingsProto_Download& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Download* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Download* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Download>(nullptr);
  }

  GlobalSettingsProto_Download* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Download>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Download& from);
  void MergeFrom(const GlobalSettingsProto_Download& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Download* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Download";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBytesOverMobileFieldNumber = 1,
    kRecommendedMaxBytesOverMobileFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto max_bytes_over_mobile = 1 [(.android.privacy) = {
  bool has_max_bytes_over_mobile() const;
  void clear_max_bytes_over_mobile();
  const ::android::providers::settings::SettingProto& max_bytes_over_mobile() const;
  ::android::providers::settings::SettingProto* release_max_bytes_over_mobile();
  ::android::providers::settings::SettingProto* mutable_max_bytes_over_mobile();
  void set_allocated_max_bytes_over_mobile(::android::providers::settings::SettingProto* max_bytes_over_mobile);

  // optional .android.providers.settings.SettingProto recommended_max_bytes_over_mobile = 2 [(.android.privacy) = {
  bool has_recommended_max_bytes_over_mobile() const;
  void clear_recommended_max_bytes_over_mobile();
  const ::android::providers::settings::SettingProto& recommended_max_bytes_over_mobile() const;
  ::android::providers::settings::SettingProto* release_recommended_max_bytes_over_mobile();
  ::android::providers::settings::SettingProto* mutable_recommended_max_bytes_over_mobile();
  void set_allocated_recommended_max_bytes_over_mobile(::android::providers::settings::SettingProto* recommended_max_bytes_over_mobile);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Download)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* max_bytes_over_mobile_;
  ::android::providers::settings::SettingProto* recommended_max_bytes_over_mobile_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Dropbox :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Dropbox) */ {
 public:
  GlobalSettingsProto_Dropbox();
  virtual ~GlobalSettingsProto_Dropbox();

  GlobalSettingsProto_Dropbox(const GlobalSettingsProto_Dropbox& from);
  GlobalSettingsProto_Dropbox(GlobalSettingsProto_Dropbox&& from) noexcept
    : GlobalSettingsProto_Dropbox() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Dropbox& operator=(const GlobalSettingsProto_Dropbox& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Dropbox& operator=(GlobalSettingsProto_Dropbox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Dropbox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Dropbox* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Dropbox*>(
               &_GlobalSettingsProto_Dropbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GlobalSettingsProto_Dropbox& a, GlobalSettingsProto_Dropbox& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Dropbox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Dropbox* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Dropbox>(nullptr);
  }

  GlobalSettingsProto_Dropbox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Dropbox>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Dropbox& from);
  void MergeFrom(const GlobalSettingsProto_Dropbox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Dropbox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Dropbox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 6,
    kAgeSecondsFieldNumber = 1,
    kMaxFilesFieldNumber = 2,
    kQuotaKbFieldNumber = 3,
    kQuotaPercentFieldNumber = 4,
    kReservePercentFieldNumber = 5,
  };
  // repeated .android.providers.settings.SettingProto settings = 6;
  int settings_size() const;
  void clear_settings();
  ::android::providers::settings::SettingProto* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_settings();
  const ::android::providers::settings::SettingProto& settings(int index) const;
  ::android::providers::settings::SettingProto* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      settings() const;

  // optional .android.providers.settings.SettingProto age_seconds = 1 [(.android.privacy) = {
  bool has_age_seconds() const;
  void clear_age_seconds();
  const ::android::providers::settings::SettingProto& age_seconds() const;
  ::android::providers::settings::SettingProto* release_age_seconds();
  ::android::providers::settings::SettingProto* mutable_age_seconds();
  void set_allocated_age_seconds(::android::providers::settings::SettingProto* age_seconds);

  // optional .android.providers.settings.SettingProto max_files = 2 [(.android.privacy) = {
  bool has_max_files() const;
  void clear_max_files();
  const ::android::providers::settings::SettingProto& max_files() const;
  ::android::providers::settings::SettingProto* release_max_files();
  ::android::providers::settings::SettingProto* mutable_max_files();
  void set_allocated_max_files(::android::providers::settings::SettingProto* max_files);

  // optional .android.providers.settings.SettingProto quota_kb = 3 [(.android.privacy) = {
  bool has_quota_kb() const;
  void clear_quota_kb();
  const ::android::providers::settings::SettingProto& quota_kb() const;
  ::android::providers::settings::SettingProto* release_quota_kb();
  ::android::providers::settings::SettingProto* mutable_quota_kb();
  void set_allocated_quota_kb(::android::providers::settings::SettingProto* quota_kb);

  // optional .android.providers.settings.SettingProto quota_percent = 4 [(.android.privacy) = {
  bool has_quota_percent() const;
  void clear_quota_percent();
  const ::android::providers::settings::SettingProto& quota_percent() const;
  ::android::providers::settings::SettingProto* release_quota_percent();
  ::android::providers::settings::SettingProto* mutable_quota_percent();
  void set_allocated_quota_percent(::android::providers::settings::SettingProto* quota_percent);

  // optional .android.providers.settings.SettingProto reserve_percent = 5 [(.android.privacy) = {
  bool has_reserve_percent() const;
  void clear_reserve_percent();
  const ::android::providers::settings::SettingProto& reserve_percent() const;
  ::android::providers::settings::SettingProto* release_reserve_percent();
  ::android::providers::settings::SettingProto* mutable_reserve_percent();
  void set_allocated_reserve_percent(::android::providers::settings::SettingProto* reserve_percent);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Dropbox)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > settings_;
  ::android::providers::settings::SettingProto* age_seconds_;
  ::android::providers::settings::SettingProto* max_files_;
  ::android::providers::settings::SettingProto* quota_kb_;
  ::android::providers::settings::SettingProto* quota_percent_;
  ::android::providers::settings::SettingProto* reserve_percent_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_DynamicPowerSavings :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings) */ {
 public:
  GlobalSettingsProto_DynamicPowerSavings();
  virtual ~GlobalSettingsProto_DynamicPowerSavings();

  GlobalSettingsProto_DynamicPowerSavings(const GlobalSettingsProto_DynamicPowerSavings& from);
  GlobalSettingsProto_DynamicPowerSavings(GlobalSettingsProto_DynamicPowerSavings&& from) noexcept
    : GlobalSettingsProto_DynamicPowerSavings() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_DynamicPowerSavings& operator=(const GlobalSettingsProto_DynamicPowerSavings& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_DynamicPowerSavings& operator=(GlobalSettingsProto_DynamicPowerSavings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_DynamicPowerSavings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_DynamicPowerSavings* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_DynamicPowerSavings*>(
               &_GlobalSettingsProto_DynamicPowerSavings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GlobalSettingsProto_DynamicPowerSavings& a, GlobalSettingsProto_DynamicPowerSavings& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_DynamicPowerSavings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_DynamicPowerSavings* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_DynamicPowerSavings>(nullptr);
  }

  GlobalSettingsProto_DynamicPowerSavings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_DynamicPowerSavings>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_DynamicPowerSavings& from);
  void MergeFrom(const GlobalSettingsProto_DynamicPowerSavings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_DynamicPowerSavings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.DynamicPowerSavings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisableThresholdFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto disable_threshold = 1 [(.android.privacy) = {
  bool has_disable_threshold() const;
  void clear_disable_threshold();
  const ::android::providers::settings::SettingProto& disable_threshold() const;
  ::android::providers::settings::SettingProto* release_disable_threshold();
  ::android::providers::settings::SettingProto* mutable_disable_threshold();
  void set_allocated_disable_threshold(::android::providers::settings::SettingProto* disable_threshold);

  // optional .android.providers.settings.SettingProto enabled = 2 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* disable_threshold_;
  ::android::providers::settings::SettingProto* enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Emergency :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Emergency) */ {
 public:
  GlobalSettingsProto_Emergency();
  virtual ~GlobalSettingsProto_Emergency();

  GlobalSettingsProto_Emergency(const GlobalSettingsProto_Emergency& from);
  GlobalSettingsProto_Emergency(GlobalSettingsProto_Emergency&& from) noexcept
    : GlobalSettingsProto_Emergency() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Emergency& operator=(const GlobalSettingsProto_Emergency& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Emergency& operator=(GlobalSettingsProto_Emergency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Emergency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Emergency* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Emergency*>(
               &_GlobalSettingsProto_Emergency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GlobalSettingsProto_Emergency& a, GlobalSettingsProto_Emergency& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Emergency* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Emergency* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Emergency>(nullptr);
  }

  GlobalSettingsProto_Emergency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Emergency>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Emergency& from);
  void MergeFrom(const GlobalSettingsProto_Emergency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Emergency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Emergency";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToneFieldNumber = 1,
    kAffordanceNeededFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto tone = 1 [(.android.privacy) = {
  bool has_tone() const;
  void clear_tone();
  const ::android::providers::settings::SettingProto& tone() const;
  ::android::providers::settings::SettingProto* release_tone();
  ::android::providers::settings::SettingProto* mutable_tone();
  void set_allocated_tone(::android::providers::settings::SettingProto* tone);

  // optional .android.providers.settings.SettingProto affordance_needed = 2 [(.android.privacy) = {
  bool has_affordance_needed() const;
  void clear_affordance_needed();
  const ::android::providers::settings::SettingProto& affordance_needed() const;
  ::android::providers::settings::SettingProto* release_affordance_needed();
  ::android::providers::settings::SettingProto* mutable_affordance_needed();
  void set_allocated_affordance_needed(::android::providers::settings::SettingProto* affordance_needed);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Emergency)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* tone_;
  ::android::providers::settings::SettingProto* affordance_needed_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Enable :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Enable) */ {
 public:
  GlobalSettingsProto_Enable();
  virtual ~GlobalSettingsProto_Enable();

  GlobalSettingsProto_Enable(const GlobalSettingsProto_Enable& from);
  GlobalSettingsProto_Enable(GlobalSettingsProto_Enable&& from) noexcept
    : GlobalSettingsProto_Enable() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Enable& operator=(const GlobalSettingsProto_Enable& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Enable& operator=(GlobalSettingsProto_Enable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Enable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Enable* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Enable*>(
               &_GlobalSettingsProto_Enable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GlobalSettingsProto_Enable& a, GlobalSettingsProto_Enable& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Enable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Enable* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Enable>(nullptr);
  }

  GlobalSettingsProto_Enable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Enable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Enable& from);
  void MergeFrom(const GlobalSettingsProto_Enable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Enable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Enable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessibilityGlobalGestureEnabledFieldNumber = 1,
    kGpuDebugLayersFieldNumber = 2,
    kEphemeralFeatureFieldNumber = 3,
    kCellularOnBootFieldNumber = 4,
    kDiskstatsLoggingFieldNumber = 5,
    kCacheQuotaCalculationFieldNumber = 6,
    kDeletionHelperNoThresholdToggleFieldNumber = 7,
    kGnssRawMeasFullTrackingFieldNumber = 8,
  };
  // optional .android.providers.settings.SettingProto accessibility_global_gesture_enabled = 1 [(.android.privacy) = {
  bool has_accessibility_global_gesture_enabled() const;
  void clear_accessibility_global_gesture_enabled();
  const ::android::providers::settings::SettingProto& accessibility_global_gesture_enabled() const;
  ::android::providers::settings::SettingProto* release_accessibility_global_gesture_enabled();
  ::android::providers::settings::SettingProto* mutable_accessibility_global_gesture_enabled();
  void set_allocated_accessibility_global_gesture_enabled(::android::providers::settings::SettingProto* accessibility_global_gesture_enabled);

  // optional .android.providers.settings.SettingProto gpu_debug_layers = 2 [(.android.privacy) = {
  bool has_gpu_debug_layers() const;
  void clear_gpu_debug_layers();
  const ::android::providers::settings::SettingProto& gpu_debug_layers() const;
  ::android::providers::settings::SettingProto* release_gpu_debug_layers();
  ::android::providers::settings::SettingProto* mutable_gpu_debug_layers();
  void set_allocated_gpu_debug_layers(::android::providers::settings::SettingProto* gpu_debug_layers);

  // optional .android.providers.settings.SettingProto ephemeral_feature = 3 [(.android.privacy) = {
  bool has_ephemeral_feature() const;
  void clear_ephemeral_feature();
  const ::android::providers::settings::SettingProto& ephemeral_feature() const;
  ::android::providers::settings::SettingProto* release_ephemeral_feature();
  ::android::providers::settings::SettingProto* mutable_ephemeral_feature();
  void set_allocated_ephemeral_feature(::android::providers::settings::SettingProto* ephemeral_feature);

  // optional .android.providers.settings.SettingProto cellular_on_boot = 4 [(.android.privacy) = {
  bool has_cellular_on_boot() const;
  void clear_cellular_on_boot();
  const ::android::providers::settings::SettingProto& cellular_on_boot() const;
  ::android::providers::settings::SettingProto* release_cellular_on_boot();
  ::android::providers::settings::SettingProto* mutable_cellular_on_boot();
  void set_allocated_cellular_on_boot(::android::providers::settings::SettingProto* cellular_on_boot);

  // optional .android.providers.settings.SettingProto diskstats_logging = 5 [(.android.privacy) = {
  bool has_diskstats_logging() const;
  void clear_diskstats_logging();
  const ::android::providers::settings::SettingProto& diskstats_logging() const;
  ::android::providers::settings::SettingProto* release_diskstats_logging();
  ::android::providers::settings::SettingProto* mutable_diskstats_logging();
  void set_allocated_diskstats_logging(::android::providers::settings::SettingProto* diskstats_logging);

  // optional .android.providers.settings.SettingProto cache_quota_calculation = 6 [(.android.privacy) = {
  bool has_cache_quota_calculation() const;
  void clear_cache_quota_calculation();
  const ::android::providers::settings::SettingProto& cache_quota_calculation() const;
  ::android::providers::settings::SettingProto* release_cache_quota_calculation();
  ::android::providers::settings::SettingProto* mutable_cache_quota_calculation();
  void set_allocated_cache_quota_calculation(::android::providers::settings::SettingProto* cache_quota_calculation);

  // optional .android.providers.settings.SettingProto deletion_helper_no_threshold_toggle = 7 [(.android.privacy) = {
  bool has_deletion_helper_no_threshold_toggle() const;
  void clear_deletion_helper_no_threshold_toggle();
  const ::android::providers::settings::SettingProto& deletion_helper_no_threshold_toggle() const;
  ::android::providers::settings::SettingProto* release_deletion_helper_no_threshold_toggle();
  ::android::providers::settings::SettingProto* mutable_deletion_helper_no_threshold_toggle();
  void set_allocated_deletion_helper_no_threshold_toggle(::android::providers::settings::SettingProto* deletion_helper_no_threshold_toggle);

  // optional .android.providers.settings.SettingProto gnss_raw_meas_full_tracking = 8 [(.android.privacy) = {
  bool has_gnss_raw_meas_full_tracking() const;
  void clear_gnss_raw_meas_full_tracking();
  const ::android::providers::settings::SettingProto& gnss_raw_meas_full_tracking() const;
  ::android::providers::settings::SettingProto* release_gnss_raw_meas_full_tracking();
  ::android::providers::settings::SettingProto* mutable_gnss_raw_meas_full_tracking();
  void set_allocated_gnss_raw_meas_full_tracking(::android::providers::settings::SettingProto* gnss_raw_meas_full_tracking);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Enable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* accessibility_global_gesture_enabled_;
  ::android::providers::settings::SettingProto* gpu_debug_layers_;
  ::android::providers::settings::SettingProto* ephemeral_feature_;
  ::android::providers::settings::SettingProto* cellular_on_boot_;
  ::android::providers::settings::SettingProto* diskstats_logging_;
  ::android::providers::settings::SettingProto* cache_quota_calculation_;
  ::android::providers::settings::SettingProto* deletion_helper_no_threshold_toggle_;
  ::android::providers::settings::SettingProto* gnss_raw_meas_full_tracking_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Euicc :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Euicc) */ {
 public:
  GlobalSettingsProto_Euicc();
  virtual ~GlobalSettingsProto_Euicc();

  GlobalSettingsProto_Euicc(const GlobalSettingsProto_Euicc& from);
  GlobalSettingsProto_Euicc(GlobalSettingsProto_Euicc&& from) noexcept
    : GlobalSettingsProto_Euicc() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Euicc& operator=(const GlobalSettingsProto_Euicc& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Euicc& operator=(GlobalSettingsProto_Euicc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Euicc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Euicc* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Euicc*>(
               &_GlobalSettingsProto_Euicc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GlobalSettingsProto_Euicc& a, GlobalSettingsProto_Euicc& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Euicc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Euicc* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Euicc>(nullptr);
  }

  GlobalSettingsProto_Euicc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Euicc>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Euicc& from);
  void MergeFrom(const GlobalSettingsProto_Euicc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Euicc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Euicc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProvisionedFieldNumber = 1,
    kFactoryResetTimeoutMillisFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto provisioned = 1 [(.android.privacy) = {
  bool has_provisioned() const;
  void clear_provisioned();
  const ::android::providers::settings::SettingProto& provisioned() const;
  ::android::providers::settings::SettingProto* release_provisioned();
  ::android::providers::settings::SettingProto* mutable_provisioned();
  void set_allocated_provisioned(::android::providers::settings::SettingProto* provisioned);

  // optional .android.providers.settings.SettingProto factory_reset_timeout_millis = 2 [(.android.privacy) = {
  bool has_factory_reset_timeout_millis() const;
  void clear_factory_reset_timeout_millis();
  const ::android::providers::settings::SettingProto& factory_reset_timeout_millis() const;
  ::android::providers::settings::SettingProto* release_factory_reset_timeout_millis();
  ::android::providers::settings::SettingProto* mutable_factory_reset_timeout_millis();
  void set_allocated_factory_reset_timeout_millis(::android::providers::settings::SettingProto* factory_reset_timeout_millis);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Euicc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* provisioned_;
  ::android::providers::settings::SettingProto* factory_reset_timeout_millis_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_GlobalHttpProxy :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy) */ {
 public:
  GlobalSettingsProto_GlobalHttpProxy();
  virtual ~GlobalSettingsProto_GlobalHttpProxy();

  GlobalSettingsProto_GlobalHttpProxy(const GlobalSettingsProto_GlobalHttpProxy& from);
  GlobalSettingsProto_GlobalHttpProxy(GlobalSettingsProto_GlobalHttpProxy&& from) noexcept
    : GlobalSettingsProto_GlobalHttpProxy() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_GlobalHttpProxy& operator=(const GlobalSettingsProto_GlobalHttpProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_GlobalHttpProxy& operator=(GlobalSettingsProto_GlobalHttpProxy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_GlobalHttpProxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_GlobalHttpProxy* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_GlobalHttpProxy*>(
               &_GlobalSettingsProto_GlobalHttpProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GlobalSettingsProto_GlobalHttpProxy& a, GlobalSettingsProto_GlobalHttpProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_GlobalHttpProxy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_GlobalHttpProxy* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_GlobalHttpProxy>(nullptr);
  }

  GlobalSettingsProto_GlobalHttpProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_GlobalHttpProxy>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_GlobalHttpProxy& from);
  void MergeFrom(const GlobalSettingsProto_GlobalHttpProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_GlobalHttpProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.GlobalHttpProxy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kPortFieldNumber = 2,
    kExclusionListFieldNumber = 3,
    kPacFieldNumber = 4,
    kSettingUiEnabledFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto host = 1;
  bool has_host() const;
  void clear_host();
  const ::android::providers::settings::SettingProto& host() const;
  ::android::providers::settings::SettingProto* release_host();
  ::android::providers::settings::SettingProto* mutable_host();
  void set_allocated_host(::android::providers::settings::SettingProto* host);

  // optional .android.providers.settings.SettingProto port = 2;
  bool has_port() const;
  void clear_port();
  const ::android::providers::settings::SettingProto& port() const;
  ::android::providers::settings::SettingProto* release_port();
  ::android::providers::settings::SettingProto* mutable_port();
  void set_allocated_port(::android::providers::settings::SettingProto* port);

  // optional .android.providers.settings.SettingProto exclusion_list = 3;
  bool has_exclusion_list() const;
  void clear_exclusion_list();
  const ::android::providers::settings::SettingProto& exclusion_list() const;
  ::android::providers::settings::SettingProto* release_exclusion_list();
  ::android::providers::settings::SettingProto* mutable_exclusion_list();
  void set_allocated_exclusion_list(::android::providers::settings::SettingProto* exclusion_list);

  // optional .android.providers.settings.SettingProto pac = 4;
  bool has_pac() const;
  void clear_pac();
  const ::android::providers::settings::SettingProto& pac() const;
  ::android::providers::settings::SettingProto* release_pac();
  ::android::providers::settings::SettingProto* mutable_pac();
  void set_allocated_pac(::android::providers::settings::SettingProto* pac);

  // optional .android.providers.settings.SettingProto setting_ui_enabled = 5 [(.android.privacy) = {
  bool has_setting_ui_enabled() const;
  void clear_setting_ui_enabled();
  const ::android::providers::settings::SettingProto& setting_ui_enabled() const;
  ::android::providers::settings::SettingProto* release_setting_ui_enabled();
  ::android::providers::settings::SettingProto* mutable_setting_ui_enabled();
  void set_allocated_setting_ui_enabled(::android::providers::settings::SettingProto* setting_ui_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* host_;
  ::android::providers::settings::SettingProto* port_;
  ::android::providers::settings::SettingProto* exclusion_list_;
  ::android::providers::settings::SettingProto* pac_;
  ::android::providers::settings::SettingProto* setting_ui_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Gpu :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Gpu) */ {
 public:
  GlobalSettingsProto_Gpu();
  virtual ~GlobalSettingsProto_Gpu();

  GlobalSettingsProto_Gpu(const GlobalSettingsProto_Gpu& from);
  GlobalSettingsProto_Gpu(GlobalSettingsProto_Gpu&& from) noexcept
    : GlobalSettingsProto_Gpu() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Gpu& operator=(const GlobalSettingsProto_Gpu& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Gpu& operator=(GlobalSettingsProto_Gpu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Gpu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Gpu* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Gpu*>(
               &_GlobalSettingsProto_Gpu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GlobalSettingsProto_Gpu& a, GlobalSettingsProto_Gpu& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Gpu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Gpu* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Gpu>(nullptr);
  }

  GlobalSettingsProto_Gpu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Gpu>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Gpu& from);
  void MergeFrom(const GlobalSettingsProto_Gpu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Gpu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Gpu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugAppFieldNumber = 1,
    kDebugLayersFieldNumber = 2,
    kAngleGlDriverAllAngleFieldNumber = 3,
    kAngleGlDriverSelectionPkgsFieldNumber = 4,
    kAngleGlDriverSelectionValuesFieldNumber = 5,
    kDebugLayerAppFieldNumber = 6,
    kDebugLayersGlesFieldNumber = 7,
    kUpdatableDriverAllAppsFieldNumber = 8,
    kUpdatableDriverProductionOptInAppsFieldNumber = 9,
    kUpdatableDriverProductionOptOutAppsFieldNumber = 10,
    kUpdatableDriverProductionDenylistFieldNumber = 11,
    kUpdatableDriverProductionAllowlistFieldNumber = 12,
    kAngleAllowlistFieldNumber = 13,
    kUpdatableDriverProductionDenylistsFieldNumber = 14,
    kShowAngleInUseDialogFieldNumber = 15,
    kUpdatableDriverSphalLibrariesFieldNumber = 16,
    kAngleDebugPackageFieldNumber = 17,
    kUpdatableDriverPrereleaseOptInAppsFieldNumber = 18,
    kAngleEglFeaturesFieldNumber = 19,
  };
  // optional .android.providers.settings.SettingProto debug_app = 1;
  bool has_debug_app() const;
  void clear_debug_app();
  const ::android::providers::settings::SettingProto& debug_app() const;
  ::android::providers::settings::SettingProto* release_debug_app();
  ::android::providers::settings::SettingProto* mutable_debug_app();
  void set_allocated_debug_app(::android::providers::settings::SettingProto* debug_app);

  // optional .android.providers.settings.SettingProto debug_layers = 2 [(.android.privacy) = {
  bool has_debug_layers() const;
  void clear_debug_layers();
  const ::android::providers::settings::SettingProto& debug_layers() const;
  ::android::providers::settings::SettingProto* release_debug_layers();
  ::android::providers::settings::SettingProto* mutable_debug_layers();
  void set_allocated_debug_layers(::android::providers::settings::SettingProto* debug_layers);

  // optional .android.providers.settings.SettingProto angle_gl_driver_all_angle = 3;
  bool has_angle_gl_driver_all_angle() const;
  void clear_angle_gl_driver_all_angle();
  const ::android::providers::settings::SettingProto& angle_gl_driver_all_angle() const;
  ::android::providers::settings::SettingProto* release_angle_gl_driver_all_angle();
  ::android::providers::settings::SettingProto* mutable_angle_gl_driver_all_angle();
  void set_allocated_angle_gl_driver_all_angle(::android::providers::settings::SettingProto* angle_gl_driver_all_angle);

  // optional .android.providers.settings.SettingProto angle_gl_driver_selection_pkgs = 4;
  bool has_angle_gl_driver_selection_pkgs() const;
  void clear_angle_gl_driver_selection_pkgs();
  const ::android::providers::settings::SettingProto& angle_gl_driver_selection_pkgs() const;
  ::android::providers::settings::SettingProto* release_angle_gl_driver_selection_pkgs();
  ::android::providers::settings::SettingProto* mutable_angle_gl_driver_selection_pkgs();
  void set_allocated_angle_gl_driver_selection_pkgs(::android::providers::settings::SettingProto* angle_gl_driver_selection_pkgs);

  // optional .android.providers.settings.SettingProto angle_gl_driver_selection_values = 5;
  bool has_angle_gl_driver_selection_values() const;
  void clear_angle_gl_driver_selection_values();
  const ::android::providers::settings::SettingProto& angle_gl_driver_selection_values() const;
  ::android::providers::settings::SettingProto* release_angle_gl_driver_selection_values();
  ::android::providers::settings::SettingProto* mutable_angle_gl_driver_selection_values();
  void set_allocated_angle_gl_driver_selection_values(::android::providers::settings::SettingProto* angle_gl_driver_selection_values);

  // optional .android.providers.settings.SettingProto debug_layer_app = 6;
  bool has_debug_layer_app() const;
  void clear_debug_layer_app();
  const ::android::providers::settings::SettingProto& debug_layer_app() const;
  ::android::providers::settings::SettingProto* release_debug_layer_app();
  ::android::providers::settings::SettingProto* mutable_debug_layer_app();
  void set_allocated_debug_layer_app(::android::providers::settings::SettingProto* debug_layer_app);

  // optional .android.providers.settings.SettingProto debug_layers_gles = 7;
  bool has_debug_layers_gles() const;
  void clear_debug_layers_gles();
  const ::android::providers::settings::SettingProto& debug_layers_gles() const;
  ::android::providers::settings::SettingProto* release_debug_layers_gles();
  ::android::providers::settings::SettingProto* mutable_debug_layers_gles();
  void set_allocated_debug_layers_gles(::android::providers::settings::SettingProto* debug_layers_gles);

  // optional .android.providers.settings.SettingProto updatable_driver_all_apps = 8;
  bool has_updatable_driver_all_apps() const;
  void clear_updatable_driver_all_apps();
  const ::android::providers::settings::SettingProto& updatable_driver_all_apps() const;
  ::android::providers::settings::SettingProto* release_updatable_driver_all_apps();
  ::android::providers::settings::SettingProto* mutable_updatable_driver_all_apps();
  void set_allocated_updatable_driver_all_apps(::android::providers::settings::SettingProto* updatable_driver_all_apps);

  // optional .android.providers.settings.SettingProto updatable_driver_production_opt_in_apps = 9;
  bool has_updatable_driver_production_opt_in_apps() const;
  void clear_updatable_driver_production_opt_in_apps();
  const ::android::providers::settings::SettingProto& updatable_driver_production_opt_in_apps() const;
  ::android::providers::settings::SettingProto* release_updatable_driver_production_opt_in_apps();
  ::android::providers::settings::SettingProto* mutable_updatable_driver_production_opt_in_apps();
  void set_allocated_updatable_driver_production_opt_in_apps(::android::providers::settings::SettingProto* updatable_driver_production_opt_in_apps);

  // optional .android.providers.settings.SettingProto updatable_driver_production_opt_out_apps = 10;
  bool has_updatable_driver_production_opt_out_apps() const;
  void clear_updatable_driver_production_opt_out_apps();
  const ::android::providers::settings::SettingProto& updatable_driver_production_opt_out_apps() const;
  ::android::providers::settings::SettingProto* release_updatable_driver_production_opt_out_apps();
  ::android::providers::settings::SettingProto* mutable_updatable_driver_production_opt_out_apps();
  void set_allocated_updatable_driver_production_opt_out_apps(::android::providers::settings::SettingProto* updatable_driver_production_opt_out_apps);

  // optional .android.providers.settings.SettingProto updatable_driver_production_denylist = 11;
  bool has_updatable_driver_production_denylist() const;
  void clear_updatable_driver_production_denylist();
  const ::android::providers::settings::SettingProto& updatable_driver_production_denylist() const;
  ::android::providers::settings::SettingProto* release_updatable_driver_production_denylist();
  ::android::providers::settings::SettingProto* mutable_updatable_driver_production_denylist();
  void set_allocated_updatable_driver_production_denylist(::android::providers::settings::SettingProto* updatable_driver_production_denylist);

  // optional .android.providers.settings.SettingProto updatable_driver_production_allowlist = 12;
  bool has_updatable_driver_production_allowlist() const;
  void clear_updatable_driver_production_allowlist();
  const ::android::providers::settings::SettingProto& updatable_driver_production_allowlist() const;
  ::android::providers::settings::SettingProto* release_updatable_driver_production_allowlist();
  ::android::providers::settings::SettingProto* mutable_updatable_driver_production_allowlist();
  void set_allocated_updatable_driver_production_allowlist(::android::providers::settings::SettingProto* updatable_driver_production_allowlist);

  // optional .android.providers.settings.SettingProto angle_allowlist = 13;
  bool has_angle_allowlist() const;
  void clear_angle_allowlist();
  const ::android::providers::settings::SettingProto& angle_allowlist() const;
  ::android::providers::settings::SettingProto* release_angle_allowlist();
  ::android::providers::settings::SettingProto* mutable_angle_allowlist();
  void set_allocated_angle_allowlist(::android::providers::settings::SettingProto* angle_allowlist);

  // optional .android.providers.settings.SettingProto updatable_driver_production_denylists = 14;
  bool has_updatable_driver_production_denylists() const;
  void clear_updatable_driver_production_denylists();
  const ::android::providers::settings::SettingProto& updatable_driver_production_denylists() const;
  ::android::providers::settings::SettingProto* release_updatable_driver_production_denylists();
  ::android::providers::settings::SettingProto* mutable_updatable_driver_production_denylists();
  void set_allocated_updatable_driver_production_denylists(::android::providers::settings::SettingProto* updatable_driver_production_denylists);

  // optional .android.providers.settings.SettingProto show_angle_in_use_dialog = 15;
  bool has_show_angle_in_use_dialog() const;
  void clear_show_angle_in_use_dialog();
  const ::android::providers::settings::SettingProto& show_angle_in_use_dialog() const;
  ::android::providers::settings::SettingProto* release_show_angle_in_use_dialog();
  ::android::providers::settings::SettingProto* mutable_show_angle_in_use_dialog();
  void set_allocated_show_angle_in_use_dialog(::android::providers::settings::SettingProto* show_angle_in_use_dialog);

  // optional .android.providers.settings.SettingProto updatable_driver_sphal_libraries = 16;
  bool has_updatable_driver_sphal_libraries() const;
  void clear_updatable_driver_sphal_libraries();
  const ::android::providers::settings::SettingProto& updatable_driver_sphal_libraries() const;
  ::android::providers::settings::SettingProto* release_updatable_driver_sphal_libraries();
  ::android::providers::settings::SettingProto* mutable_updatable_driver_sphal_libraries();
  void set_allocated_updatable_driver_sphal_libraries(::android::providers::settings::SettingProto* updatable_driver_sphal_libraries);

  // optional .android.providers.settings.SettingProto angle_debug_package = 17;
  bool has_angle_debug_package() const;
  void clear_angle_debug_package();
  const ::android::providers::settings::SettingProto& angle_debug_package() const;
  ::android::providers::settings::SettingProto* release_angle_debug_package();
  ::android::providers::settings::SettingProto* mutable_angle_debug_package();
  void set_allocated_angle_debug_package(::android::providers::settings::SettingProto* angle_debug_package);

  // optional .android.providers.settings.SettingProto updatable_driver_prerelease_opt_in_apps = 18;
  bool has_updatable_driver_prerelease_opt_in_apps() const;
  void clear_updatable_driver_prerelease_opt_in_apps();
  const ::android::providers::settings::SettingProto& updatable_driver_prerelease_opt_in_apps() const;
  ::android::providers::settings::SettingProto* release_updatable_driver_prerelease_opt_in_apps();
  ::android::providers::settings::SettingProto* mutable_updatable_driver_prerelease_opt_in_apps();
  void set_allocated_updatable_driver_prerelease_opt_in_apps(::android::providers::settings::SettingProto* updatable_driver_prerelease_opt_in_apps);

  // optional .android.providers.settings.SettingProto angle_egl_features = 19;
  bool has_angle_egl_features() const;
  void clear_angle_egl_features();
  const ::android::providers::settings::SettingProto& angle_egl_features() const;
  ::android::providers::settings::SettingProto* release_angle_egl_features();
  ::android::providers::settings::SettingProto* mutable_angle_egl_features();
  void set_allocated_angle_egl_features(::android::providers::settings::SettingProto* angle_egl_features);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Gpu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* debug_app_;
  ::android::providers::settings::SettingProto* debug_layers_;
  ::android::providers::settings::SettingProto* angle_gl_driver_all_angle_;
  ::android::providers::settings::SettingProto* angle_gl_driver_selection_pkgs_;
  ::android::providers::settings::SettingProto* angle_gl_driver_selection_values_;
  ::android::providers::settings::SettingProto* debug_layer_app_;
  ::android::providers::settings::SettingProto* debug_layers_gles_;
  ::android::providers::settings::SettingProto* updatable_driver_all_apps_;
  ::android::providers::settings::SettingProto* updatable_driver_production_opt_in_apps_;
  ::android::providers::settings::SettingProto* updatable_driver_production_opt_out_apps_;
  ::android::providers::settings::SettingProto* updatable_driver_production_denylist_;
  ::android::providers::settings::SettingProto* updatable_driver_production_allowlist_;
  ::android::providers::settings::SettingProto* angle_allowlist_;
  ::android::providers::settings::SettingProto* updatable_driver_production_denylists_;
  ::android::providers::settings::SettingProto* show_angle_in_use_dialog_;
  ::android::providers::settings::SettingProto* updatable_driver_sphal_libraries_;
  ::android::providers::settings::SettingProto* angle_debug_package_;
  ::android::providers::settings::SettingProto* updatable_driver_prerelease_opt_in_apps_;
  ::android::providers::settings::SettingProto* angle_egl_features_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Hdmi :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Hdmi) */ {
 public:
  GlobalSettingsProto_Hdmi();
  virtual ~GlobalSettingsProto_Hdmi();

  GlobalSettingsProto_Hdmi(const GlobalSettingsProto_Hdmi& from);
  GlobalSettingsProto_Hdmi(GlobalSettingsProto_Hdmi&& from) noexcept
    : GlobalSettingsProto_Hdmi() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Hdmi& operator=(const GlobalSettingsProto_Hdmi& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Hdmi& operator=(GlobalSettingsProto_Hdmi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Hdmi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Hdmi* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Hdmi*>(
               &_GlobalSettingsProto_Hdmi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GlobalSettingsProto_Hdmi& a, GlobalSettingsProto_Hdmi& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Hdmi* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Hdmi* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Hdmi>(nullptr);
  }

  GlobalSettingsProto_Hdmi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Hdmi>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Hdmi& from);
  void MergeFrom(const GlobalSettingsProto_Hdmi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Hdmi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Hdmi";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlEnabledFieldNumber = 1,
    kSystemAudioControlEnabledFieldNumber = 2,
    kControlAutoWakeupEnabledFieldNumber = 3,
    kControlAutoDeviceOffEnabledFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto control_enabled = 1 [(.android.privacy) = {
  bool has_control_enabled() const;
  void clear_control_enabled();
  const ::android::providers::settings::SettingProto& control_enabled() const;
  ::android::providers::settings::SettingProto* release_control_enabled();
  ::android::providers::settings::SettingProto* mutable_control_enabled();
  void set_allocated_control_enabled(::android::providers::settings::SettingProto* control_enabled);

  // optional .android.providers.settings.SettingProto system_audio_control_enabled = 2 [(.android.privacy) = {
  bool has_system_audio_control_enabled() const;
  void clear_system_audio_control_enabled();
  const ::android::providers::settings::SettingProto& system_audio_control_enabled() const;
  ::android::providers::settings::SettingProto* release_system_audio_control_enabled();
  ::android::providers::settings::SettingProto* mutable_system_audio_control_enabled();
  void set_allocated_system_audio_control_enabled(::android::providers::settings::SettingProto* system_audio_control_enabled);

  // optional .android.providers.settings.SettingProto control_auto_wakeup_enabled = 3 [(.android.privacy) = {
  bool has_control_auto_wakeup_enabled() const;
  void clear_control_auto_wakeup_enabled();
  const ::android::providers::settings::SettingProto& control_auto_wakeup_enabled() const;
  ::android::providers::settings::SettingProto* release_control_auto_wakeup_enabled();
  ::android::providers::settings::SettingProto* mutable_control_auto_wakeup_enabled();
  void set_allocated_control_auto_wakeup_enabled(::android::providers::settings::SettingProto* control_auto_wakeup_enabled);

  // optional .android.providers.settings.SettingProto control_auto_device_off_enabled = 4 [(.android.privacy) = {
  bool has_control_auto_device_off_enabled() const;
  void clear_control_auto_device_off_enabled();
  const ::android::providers::settings::SettingProto& control_auto_device_off_enabled() const;
  ::android::providers::settings::SettingProto* release_control_auto_device_off_enabled();
  ::android::providers::settings::SettingProto* mutable_control_auto_device_off_enabled();
  void set_allocated_control_auto_device_off_enabled(::android::providers::settings::SettingProto* control_auto_device_off_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Hdmi)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* control_enabled_;
  ::android::providers::settings::SettingProto* system_audio_control_enabled_;
  ::android::providers::settings::SettingProto* control_auto_wakeup_enabled_;
  ::android::providers::settings::SettingProto* control_auto_device_off_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_InetCondition :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.InetCondition) */ {
 public:
  GlobalSettingsProto_InetCondition();
  virtual ~GlobalSettingsProto_InetCondition();

  GlobalSettingsProto_InetCondition(const GlobalSettingsProto_InetCondition& from);
  GlobalSettingsProto_InetCondition(GlobalSettingsProto_InetCondition&& from) noexcept
    : GlobalSettingsProto_InetCondition() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_InetCondition& operator=(const GlobalSettingsProto_InetCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_InetCondition& operator=(GlobalSettingsProto_InetCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_InetCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_InetCondition* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_InetCondition*>(
               &_GlobalSettingsProto_InetCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GlobalSettingsProto_InetCondition& a, GlobalSettingsProto_InetCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_InetCondition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_InetCondition* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_InetCondition>(nullptr);
  }

  GlobalSettingsProto_InetCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_InetCondition>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_InetCondition& from);
  void MergeFrom(const GlobalSettingsProto_InetCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_InetCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.InetCondition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebounceUpDelayFieldNumber = 1,
    kDebounceDownDelayFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto debounce_up_delay = 1 [(.android.privacy) = {
  bool has_debounce_up_delay() const;
  void clear_debounce_up_delay();
  const ::android::providers::settings::SettingProto& debounce_up_delay() const;
  ::android::providers::settings::SettingProto* release_debounce_up_delay();
  ::android::providers::settings::SettingProto* mutable_debounce_up_delay();
  void set_allocated_debounce_up_delay(::android::providers::settings::SettingProto* debounce_up_delay);

  // optional .android.providers.settings.SettingProto debounce_down_delay = 2 [(.android.privacy) = {
  bool has_debounce_down_delay() const;
  void clear_debounce_down_delay();
  const ::android::providers::settings::SettingProto& debounce_down_delay() const;
  ::android::providers::settings::SettingProto* release_debounce_down_delay();
  ::android::providers::settings::SettingProto* mutable_debounce_down_delay();
  void set_allocated_debounce_down_delay(::android::providers::settings::SettingProto* debounce_down_delay);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.InetCondition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* debounce_up_delay_;
  ::android::providers::settings::SettingProto* debounce_down_delay_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_InstantApp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.InstantApp) */ {
 public:
  GlobalSettingsProto_InstantApp();
  virtual ~GlobalSettingsProto_InstantApp();

  GlobalSettingsProto_InstantApp(const GlobalSettingsProto_InstantApp& from);
  GlobalSettingsProto_InstantApp(GlobalSettingsProto_InstantApp&& from) noexcept
    : GlobalSettingsProto_InstantApp() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_InstantApp& operator=(const GlobalSettingsProto_InstantApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_InstantApp& operator=(GlobalSettingsProto_InstantApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_InstantApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_InstantApp* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_InstantApp*>(
               &_GlobalSettingsProto_InstantApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GlobalSettingsProto_InstantApp& a, GlobalSettingsProto_InstantApp& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_InstantApp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_InstantApp* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_InstantApp>(nullptr);
  }

  GlobalSettingsProto_InstantApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_InstantApp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_InstantApp& from);
  void MergeFrom(const GlobalSettingsProto_InstantApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_InstantApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.InstantApp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDexoptEnabledFieldNumber = 1,
    kEphemeralCookieMaxSizeBytesFieldNumber = 2,
    kInstalledMinCachePeriodFieldNumber = 3,
    kInstalledMaxCachePeriodFieldNumber = 4,
    kUninstalledMinCachePeriodFieldNumber = 5,
    kUninstalledMaxCachePeriodFieldNumber = 6,
  };
  // optional .android.providers.settings.SettingProto dexopt_enabled = 1 [(.android.privacy) = {
  bool has_dexopt_enabled() const;
  void clear_dexopt_enabled();
  const ::android::providers::settings::SettingProto& dexopt_enabled() const;
  ::android::providers::settings::SettingProto* release_dexopt_enabled();
  ::android::providers::settings::SettingProto* mutable_dexopt_enabled();
  void set_allocated_dexopt_enabled(::android::providers::settings::SettingProto* dexopt_enabled);

  // optional .android.providers.settings.SettingProto ephemeral_cookie_max_size_bytes = 2 [(.android.privacy) = {
  bool has_ephemeral_cookie_max_size_bytes() const;
  void clear_ephemeral_cookie_max_size_bytes();
  const ::android::providers::settings::SettingProto& ephemeral_cookie_max_size_bytes() const;
  ::android::providers::settings::SettingProto* release_ephemeral_cookie_max_size_bytes();
  ::android::providers::settings::SettingProto* mutable_ephemeral_cookie_max_size_bytes();
  void set_allocated_ephemeral_cookie_max_size_bytes(::android::providers::settings::SettingProto* ephemeral_cookie_max_size_bytes);

  // optional .android.providers.settings.SettingProto installed_min_cache_period = 3 [(.android.privacy) = {
  bool has_installed_min_cache_period() const;
  void clear_installed_min_cache_period();
  const ::android::providers::settings::SettingProto& installed_min_cache_period() const;
  ::android::providers::settings::SettingProto* release_installed_min_cache_period();
  ::android::providers::settings::SettingProto* mutable_installed_min_cache_period();
  void set_allocated_installed_min_cache_period(::android::providers::settings::SettingProto* installed_min_cache_period);

  // optional .android.providers.settings.SettingProto installed_max_cache_period = 4 [(.android.privacy) = {
  bool has_installed_max_cache_period() const;
  void clear_installed_max_cache_period();
  const ::android::providers::settings::SettingProto& installed_max_cache_period() const;
  ::android::providers::settings::SettingProto* release_installed_max_cache_period();
  ::android::providers::settings::SettingProto* mutable_installed_max_cache_period();
  void set_allocated_installed_max_cache_period(::android::providers::settings::SettingProto* installed_max_cache_period);

  // optional .android.providers.settings.SettingProto uninstalled_min_cache_period = 5 [(.android.privacy) = {
  bool has_uninstalled_min_cache_period() const;
  void clear_uninstalled_min_cache_period();
  const ::android::providers::settings::SettingProto& uninstalled_min_cache_period() const;
  ::android::providers::settings::SettingProto* release_uninstalled_min_cache_period();
  ::android::providers::settings::SettingProto* mutable_uninstalled_min_cache_period();
  void set_allocated_uninstalled_min_cache_period(::android::providers::settings::SettingProto* uninstalled_min_cache_period);

  // optional .android.providers.settings.SettingProto uninstalled_max_cache_period = 6 [(.android.privacy) = {
  bool has_uninstalled_max_cache_period() const;
  void clear_uninstalled_max_cache_period();
  const ::android::providers::settings::SettingProto& uninstalled_max_cache_period() const;
  ::android::providers::settings::SettingProto* release_uninstalled_max_cache_period();
  ::android::providers::settings::SettingProto* mutable_uninstalled_max_cache_period();
  void set_allocated_uninstalled_max_cache_period(::android::providers::settings::SettingProto* uninstalled_max_cache_period);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.InstantApp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* dexopt_enabled_;
  ::android::providers::settings::SettingProto* ephemeral_cookie_max_size_bytes_;
  ::android::providers::settings::SettingProto* installed_min_cache_period_;
  ::android::providers::settings::SettingProto* installed_max_cache_period_;
  ::android::providers::settings::SettingProto* uninstalled_min_cache_period_;
  ::android::providers::settings::SettingProto* uninstalled_max_cache_period_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_IntentFirewall :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.IntentFirewall) */ {
 public:
  GlobalSettingsProto_IntentFirewall();
  virtual ~GlobalSettingsProto_IntentFirewall();

  GlobalSettingsProto_IntentFirewall(const GlobalSettingsProto_IntentFirewall& from);
  GlobalSettingsProto_IntentFirewall(GlobalSettingsProto_IntentFirewall&& from) noexcept
    : GlobalSettingsProto_IntentFirewall() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_IntentFirewall& operator=(const GlobalSettingsProto_IntentFirewall& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_IntentFirewall& operator=(GlobalSettingsProto_IntentFirewall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_IntentFirewall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_IntentFirewall* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_IntentFirewall*>(
               &_GlobalSettingsProto_IntentFirewall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GlobalSettingsProto_IntentFirewall& a, GlobalSettingsProto_IntentFirewall& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_IntentFirewall* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_IntentFirewall* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_IntentFirewall>(nullptr);
  }

  GlobalSettingsProto_IntentFirewall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_IntentFirewall>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_IntentFirewall& from);
  void MergeFrom(const GlobalSettingsProto_IntentFirewall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_IntentFirewall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.IntentFirewall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateContentUrlFieldNumber = 1,
    kUpdateMetadataUrlFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  bool has_update_content_url() const;
  void clear_update_content_url();
  const ::android::providers::settings::SettingProto& update_content_url() const;
  ::android::providers::settings::SettingProto* release_update_content_url();
  ::android::providers::settings::SettingProto* mutable_update_content_url();
  void set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url);

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  bool has_update_metadata_url() const;
  void clear_update_metadata_url();
  const ::android::providers::settings::SettingProto& update_metadata_url() const;
  ::android::providers::settings::SettingProto* release_update_metadata_url();
  ::android::providers::settings::SettingProto* mutable_update_metadata_url();
  void set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.IntentFirewall)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* update_content_url_;
  ::android::providers::settings::SettingProto* update_metadata_url_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_LangId :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.LangId) */ {
 public:
  GlobalSettingsProto_LangId();
  virtual ~GlobalSettingsProto_LangId();

  GlobalSettingsProto_LangId(const GlobalSettingsProto_LangId& from);
  GlobalSettingsProto_LangId(GlobalSettingsProto_LangId&& from) noexcept
    : GlobalSettingsProto_LangId() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_LangId& operator=(const GlobalSettingsProto_LangId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_LangId& operator=(GlobalSettingsProto_LangId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_LangId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_LangId* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_LangId*>(
               &_GlobalSettingsProto_LangId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GlobalSettingsProto_LangId& a, GlobalSettingsProto_LangId& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_LangId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_LangId* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_LangId>(nullptr);
  }

  GlobalSettingsProto_LangId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_LangId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_LangId& from);
  void MergeFrom(const GlobalSettingsProto_LangId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_LangId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.LangId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateContentUrlFieldNumber = 1,
    kUpdateMetadataUrlFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  bool has_update_content_url() const;
  void clear_update_content_url();
  const ::android::providers::settings::SettingProto& update_content_url() const;
  ::android::providers::settings::SettingProto* release_update_content_url();
  ::android::providers::settings::SettingProto* mutable_update_content_url();
  void set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url);

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  bool has_update_metadata_url() const;
  void clear_update_metadata_url();
  const ::android::providers::settings::SettingProto& update_metadata_url() const;
  ::android::providers::settings::SettingProto* release_update_metadata_url();
  ::android::providers::settings::SettingProto* mutable_update_metadata_url();
  void set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.LangId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* update_content_url_;
  ::android::providers::settings::SettingProto* update_metadata_url_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Location :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Location) */ {
 public:
  GlobalSettingsProto_Location();
  virtual ~GlobalSettingsProto_Location();

  GlobalSettingsProto_Location(const GlobalSettingsProto_Location& from);
  GlobalSettingsProto_Location(GlobalSettingsProto_Location&& from) noexcept
    : GlobalSettingsProto_Location() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Location& operator=(const GlobalSettingsProto_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Location& operator=(GlobalSettingsProto_Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Location* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Location*>(
               &_GlobalSettingsProto_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GlobalSettingsProto_Location& a, GlobalSettingsProto_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Location* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Location* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Location>(nullptr);
  }

  GlobalSettingsProto_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Location>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Location& from);
  void MergeFrom(const GlobalSettingsProto_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Location";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundThrottleIntervalMsFieldNumber = 1,
    kBackgroundThrottleProximityAlertIntervalMsFieldNumber = 2,
    kBackgroundThrottlePackageWhitelistFieldNumber = 3,
    kSettingsLinkToPermissionsEnabledFieldNumber = 4,
    kGlobalKillSwitchFieldNumber = 5,
    kGnssSatelliteBlocklistFieldNumber = 6,
    kGnssHalLocationRequestDurationMillisFieldNumber = 7,
    kIgnoreSettingsPackageWhitelistFieldNumber = 8,
  };
  // optional .android.providers.settings.SettingProto background_throttle_interval_ms = 1 [(.android.privacy) = {
  bool has_background_throttle_interval_ms() const;
  void clear_background_throttle_interval_ms();
  const ::android::providers::settings::SettingProto& background_throttle_interval_ms() const;
  ::android::providers::settings::SettingProto* release_background_throttle_interval_ms();
  ::android::providers::settings::SettingProto* mutable_background_throttle_interval_ms();
  void set_allocated_background_throttle_interval_ms(::android::providers::settings::SettingProto* background_throttle_interval_ms);

  // optional .android.providers.settings.SettingProto background_throttle_proximity_alert_interval_ms = 2 [(.android.privacy) = {
  bool has_background_throttle_proximity_alert_interval_ms() const;
  void clear_background_throttle_proximity_alert_interval_ms();
  const ::android::providers::settings::SettingProto& background_throttle_proximity_alert_interval_ms() const;
  ::android::providers::settings::SettingProto* release_background_throttle_proximity_alert_interval_ms();
  ::android::providers::settings::SettingProto* mutable_background_throttle_proximity_alert_interval_ms();
  void set_allocated_background_throttle_proximity_alert_interval_ms(::android::providers::settings::SettingProto* background_throttle_proximity_alert_interval_ms);

  // optional .android.providers.settings.SettingProto background_throttle_package_whitelist = 3 [(.android.privacy) = {
  bool has_background_throttle_package_whitelist() const;
  void clear_background_throttle_package_whitelist();
  const ::android::providers::settings::SettingProto& background_throttle_package_whitelist() const;
  ::android::providers::settings::SettingProto* release_background_throttle_package_whitelist();
  ::android::providers::settings::SettingProto* mutable_background_throttle_package_whitelist();
  void set_allocated_background_throttle_package_whitelist(::android::providers::settings::SettingProto* background_throttle_package_whitelist);

  // optional .android.providers.settings.SettingProto settings_link_to_permissions_enabled = 4 [(.android.privacy) = {
  bool has_settings_link_to_permissions_enabled() const;
  void clear_settings_link_to_permissions_enabled();
  const ::android::providers::settings::SettingProto& settings_link_to_permissions_enabled() const;
  ::android::providers::settings::SettingProto* release_settings_link_to_permissions_enabled();
  ::android::providers::settings::SettingProto* mutable_settings_link_to_permissions_enabled();
  void set_allocated_settings_link_to_permissions_enabled(::android::providers::settings::SettingProto* settings_link_to_permissions_enabled);

  // optional .android.providers.settings.SettingProto global_kill_switch = 5 [(.android.privacy) = {
  bool has_global_kill_switch() const;
  void clear_global_kill_switch();
  const ::android::providers::settings::SettingProto& global_kill_switch() const;
  ::android::providers::settings::SettingProto* release_global_kill_switch();
  ::android::providers::settings::SettingProto* mutable_global_kill_switch();
  void set_allocated_global_kill_switch(::android::providers::settings::SettingProto* global_kill_switch);

  // optional .android.providers.settings.SettingProto gnss_satellite_blocklist = 6 [(.android.privacy) = {
  bool has_gnss_satellite_blocklist() const;
  void clear_gnss_satellite_blocklist();
  const ::android::providers::settings::SettingProto& gnss_satellite_blocklist() const;
  ::android::providers::settings::SettingProto* release_gnss_satellite_blocklist();
  ::android::providers::settings::SettingProto* mutable_gnss_satellite_blocklist();
  void set_allocated_gnss_satellite_blocklist(::android::providers::settings::SettingProto* gnss_satellite_blocklist);

  // optional .android.providers.settings.SettingProto gnss_hal_location_request_duration_millis = 7 [(.android.privacy) = {
  bool has_gnss_hal_location_request_duration_millis() const;
  void clear_gnss_hal_location_request_duration_millis();
  const ::android::providers::settings::SettingProto& gnss_hal_location_request_duration_millis() const;
  ::android::providers::settings::SettingProto* release_gnss_hal_location_request_duration_millis();
  ::android::providers::settings::SettingProto* mutable_gnss_hal_location_request_duration_millis();
  void set_allocated_gnss_hal_location_request_duration_millis(::android::providers::settings::SettingProto* gnss_hal_location_request_duration_millis);

  // optional .android.providers.settings.SettingProto ignore_settings_package_whitelist = 8 [(.android.privacy) = {
  bool has_ignore_settings_package_whitelist() const;
  void clear_ignore_settings_package_whitelist();
  const ::android::providers::settings::SettingProto& ignore_settings_package_whitelist() const;
  ::android::providers::settings::SettingProto* release_ignore_settings_package_whitelist();
  ::android::providers::settings::SettingProto* mutable_ignore_settings_package_whitelist();
  void set_allocated_ignore_settings_package_whitelist(::android::providers::settings::SettingProto* ignore_settings_package_whitelist);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Location)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* background_throttle_interval_ms_;
  ::android::providers::settings::SettingProto* background_throttle_proximity_alert_interval_ms_;
  ::android::providers::settings::SettingProto* background_throttle_package_whitelist_;
  ::android::providers::settings::SettingProto* settings_link_to_permissions_enabled_;
  ::android::providers::settings::SettingProto* global_kill_switch_;
  ::android::providers::settings::SettingProto* gnss_satellite_blocklist_;
  ::android::providers::settings::SettingProto* gnss_hal_location_request_duration_millis_;
  ::android::providers::settings::SettingProto* ignore_settings_package_whitelist_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_LowPowerMode :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.LowPowerMode) */ {
 public:
  GlobalSettingsProto_LowPowerMode();
  virtual ~GlobalSettingsProto_LowPowerMode();

  GlobalSettingsProto_LowPowerMode(const GlobalSettingsProto_LowPowerMode& from);
  GlobalSettingsProto_LowPowerMode(GlobalSettingsProto_LowPowerMode&& from) noexcept
    : GlobalSettingsProto_LowPowerMode() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_LowPowerMode& operator=(const GlobalSettingsProto_LowPowerMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_LowPowerMode& operator=(GlobalSettingsProto_LowPowerMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_LowPowerMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_LowPowerMode* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_LowPowerMode*>(
               &_GlobalSettingsProto_LowPowerMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GlobalSettingsProto_LowPowerMode& a, GlobalSettingsProto_LowPowerMode& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_LowPowerMode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_LowPowerMode* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_LowPowerMode>(nullptr);
  }

  GlobalSettingsProto_LowPowerMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_LowPowerMode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_LowPowerMode& from);
  void MergeFrom(const GlobalSettingsProto_LowPowerMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_LowPowerMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.LowPowerMode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kTriggerLevelFieldNumber = 2,
    kTriggerLevelMaxFieldNumber = 3,
    kAutomaticPowerSaverModeFieldNumber = 4,
    kStickyEnabledFieldNumber = 5,
    kStickyAutoDisableEnabledFieldNumber = 6,
    kStickyAutoDisableLevelFieldNumber = 7,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto trigger_level = 2 [(.android.privacy) = {
  bool has_trigger_level() const;
  void clear_trigger_level();
  const ::android::providers::settings::SettingProto& trigger_level() const;
  ::android::providers::settings::SettingProto* release_trigger_level();
  ::android::providers::settings::SettingProto* mutable_trigger_level();
  void set_allocated_trigger_level(::android::providers::settings::SettingProto* trigger_level);

  // optional .android.providers.settings.SettingProto trigger_level_max = 3 [(.android.privacy) = {
  bool has_trigger_level_max() const;
  void clear_trigger_level_max();
  const ::android::providers::settings::SettingProto& trigger_level_max() const;
  ::android::providers::settings::SettingProto* release_trigger_level_max();
  ::android::providers::settings::SettingProto* mutable_trigger_level_max();
  void set_allocated_trigger_level_max(::android::providers::settings::SettingProto* trigger_level_max);

  // optional .android.providers.settings.SettingProto automatic_power_saver_mode = 4 [(.android.privacy) = {
  bool has_automatic_power_saver_mode() const;
  void clear_automatic_power_saver_mode();
  const ::android::providers::settings::SettingProto& automatic_power_saver_mode() const;
  ::android::providers::settings::SettingProto* release_automatic_power_saver_mode();
  ::android::providers::settings::SettingProto* mutable_automatic_power_saver_mode();
  void set_allocated_automatic_power_saver_mode(::android::providers::settings::SettingProto* automatic_power_saver_mode);

  // optional .android.providers.settings.SettingProto sticky_enabled = 5;
  bool has_sticky_enabled() const;
  void clear_sticky_enabled();
  const ::android::providers::settings::SettingProto& sticky_enabled() const;
  ::android::providers::settings::SettingProto* release_sticky_enabled();
  ::android::providers::settings::SettingProto* mutable_sticky_enabled();
  void set_allocated_sticky_enabled(::android::providers::settings::SettingProto* sticky_enabled);

  // optional .android.providers.settings.SettingProto sticky_auto_disable_enabled = 6;
  bool has_sticky_auto_disable_enabled() const;
  void clear_sticky_auto_disable_enabled();
  const ::android::providers::settings::SettingProto& sticky_auto_disable_enabled() const;
  ::android::providers::settings::SettingProto* release_sticky_auto_disable_enabled();
  ::android::providers::settings::SettingProto* mutable_sticky_auto_disable_enabled();
  void set_allocated_sticky_auto_disable_enabled(::android::providers::settings::SettingProto* sticky_auto_disable_enabled);

  // optional .android.providers.settings.SettingProto sticky_auto_disable_level = 7;
  bool has_sticky_auto_disable_level() const;
  void clear_sticky_auto_disable_level();
  const ::android::providers::settings::SettingProto& sticky_auto_disable_level() const;
  ::android::providers::settings::SettingProto* release_sticky_auto_disable_level();
  ::android::providers::settings::SettingProto* mutable_sticky_auto_disable_level();
  void set_allocated_sticky_auto_disable_level(::android::providers::settings::SettingProto* sticky_auto_disable_level);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.LowPowerMode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* trigger_level_;
  ::android::providers::settings::SettingProto* trigger_level_max_;
  ::android::providers::settings::SettingProto* automatic_power_saver_mode_;
  ::android::providers::settings::SettingProto* sticky_enabled_;
  ::android::providers::settings::SettingProto* sticky_auto_disable_enabled_;
  ::android::providers::settings::SettingProto* sticky_auto_disable_level_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Mhl :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Mhl) */ {
 public:
  GlobalSettingsProto_Mhl();
  virtual ~GlobalSettingsProto_Mhl();

  GlobalSettingsProto_Mhl(const GlobalSettingsProto_Mhl& from);
  GlobalSettingsProto_Mhl(GlobalSettingsProto_Mhl&& from) noexcept
    : GlobalSettingsProto_Mhl() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Mhl& operator=(const GlobalSettingsProto_Mhl& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Mhl& operator=(GlobalSettingsProto_Mhl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Mhl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Mhl* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Mhl*>(
               &_GlobalSettingsProto_Mhl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GlobalSettingsProto_Mhl& a, GlobalSettingsProto_Mhl& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Mhl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Mhl* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Mhl>(nullptr);
  }

  GlobalSettingsProto_Mhl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Mhl>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Mhl& from);
  void MergeFrom(const GlobalSettingsProto_Mhl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Mhl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Mhl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputSwitchingEnabledFieldNumber = 1,
    kPowerChargeEnabledFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto input_switching_enabled = 1 [(.android.privacy) = {
  bool has_input_switching_enabled() const;
  void clear_input_switching_enabled();
  const ::android::providers::settings::SettingProto& input_switching_enabled() const;
  ::android::providers::settings::SettingProto* release_input_switching_enabled();
  ::android::providers::settings::SettingProto* mutable_input_switching_enabled();
  void set_allocated_input_switching_enabled(::android::providers::settings::SettingProto* input_switching_enabled);

  // optional .android.providers.settings.SettingProto power_charge_enabled = 2 [(.android.privacy) = {
  bool has_power_charge_enabled() const;
  void clear_power_charge_enabled();
  const ::android::providers::settings::SettingProto& power_charge_enabled() const;
  ::android::providers::settings::SettingProto* release_power_charge_enabled();
  ::android::providers::settings::SettingProto* mutable_power_charge_enabled();
  void set_allocated_power_charge_enabled(::android::providers::settings::SettingProto* power_charge_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Mhl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* input_switching_enabled_;
  ::android::providers::settings::SettingProto* power_charge_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_MobileData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.MobileData) */ {
 public:
  GlobalSettingsProto_MobileData();
  virtual ~GlobalSettingsProto_MobileData();

  GlobalSettingsProto_MobileData(const GlobalSettingsProto_MobileData& from);
  GlobalSettingsProto_MobileData(GlobalSettingsProto_MobileData&& from) noexcept
    : GlobalSettingsProto_MobileData() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_MobileData& operator=(const GlobalSettingsProto_MobileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_MobileData& operator=(GlobalSettingsProto_MobileData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_MobileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_MobileData* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_MobileData*>(
               &_GlobalSettingsProto_MobileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GlobalSettingsProto_MobileData& a, GlobalSettingsProto_MobileData& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_MobileData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_MobileData* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_MobileData>(nullptr);
  }

  GlobalSettingsProto_MobileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_MobileData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_MobileData& from);
  void MergeFrom(const GlobalSettingsProto_MobileData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_MobileData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.MobileData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedFieldNumber = 1,
    kAlwaysOnFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto allowed = 1 [(.android.privacy) = {
  bool has_allowed() const;
  void clear_allowed();
  const ::android::providers::settings::SettingProto& allowed() const;
  ::android::providers::settings::SettingProto* release_allowed();
  ::android::providers::settings::SettingProto* mutable_allowed();
  void set_allocated_allowed(::android::providers::settings::SettingProto* allowed);

  // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
  bool has_always_on() const;
  void clear_always_on();
  const ::android::providers::settings::SettingProto& always_on() const;
  ::android::providers::settings::SettingProto* release_always_on();
  ::android::providers::settings::SettingProto* mutable_always_on();
  void set_allocated_always_on(::android::providers::settings::SettingProto* always_on);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.MobileData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* allowed_;
  ::android::providers::settings::SettingProto* always_on_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_MultiSim :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.MultiSim) */ {
 public:
  GlobalSettingsProto_MultiSim();
  virtual ~GlobalSettingsProto_MultiSim();

  GlobalSettingsProto_MultiSim(const GlobalSettingsProto_MultiSim& from);
  GlobalSettingsProto_MultiSim(GlobalSettingsProto_MultiSim&& from) noexcept
    : GlobalSettingsProto_MultiSim() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_MultiSim& operator=(const GlobalSettingsProto_MultiSim& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_MultiSim& operator=(GlobalSettingsProto_MultiSim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_MultiSim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_MultiSim* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_MultiSim*>(
               &_GlobalSettingsProto_MultiSim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GlobalSettingsProto_MultiSim& a, GlobalSettingsProto_MultiSim& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_MultiSim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_MultiSim* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_MultiSim>(nullptr);
  }

  GlobalSettingsProto_MultiSim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_MultiSim>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_MultiSim& from);
  void MergeFrom(const GlobalSettingsProto_MultiSim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_MultiSim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.MultiSim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoiceCallSubscriptionFieldNumber = 1,
    kVoicePromptFieldNumber = 2,
    kDataCallSubscriptionFieldNumber = 3,
    kSmsSubscriptionFieldNumber = 4,
    kSmsPromptFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto voice_call_subscription = 1 [(.android.privacy) = {
  bool has_voice_call_subscription() const;
  void clear_voice_call_subscription();
  const ::android::providers::settings::SettingProto& voice_call_subscription() const;
  ::android::providers::settings::SettingProto* release_voice_call_subscription();
  ::android::providers::settings::SettingProto* mutable_voice_call_subscription();
  void set_allocated_voice_call_subscription(::android::providers::settings::SettingProto* voice_call_subscription);

  // optional .android.providers.settings.SettingProto voice_prompt = 2 [(.android.privacy) = {
  bool has_voice_prompt() const;
  void clear_voice_prompt();
  const ::android::providers::settings::SettingProto& voice_prompt() const;
  ::android::providers::settings::SettingProto* release_voice_prompt();
  ::android::providers::settings::SettingProto* mutable_voice_prompt();
  void set_allocated_voice_prompt(::android::providers::settings::SettingProto* voice_prompt);

  // optional .android.providers.settings.SettingProto data_call_subscription = 3 [(.android.privacy) = {
  bool has_data_call_subscription() const;
  void clear_data_call_subscription();
  const ::android::providers::settings::SettingProto& data_call_subscription() const;
  ::android::providers::settings::SettingProto* release_data_call_subscription();
  ::android::providers::settings::SettingProto* mutable_data_call_subscription();
  void set_allocated_data_call_subscription(::android::providers::settings::SettingProto* data_call_subscription);

  // optional .android.providers.settings.SettingProto sms_subscription = 4 [(.android.privacy) = {
  bool has_sms_subscription() const;
  void clear_sms_subscription();
  const ::android::providers::settings::SettingProto& sms_subscription() const;
  ::android::providers::settings::SettingProto* release_sms_subscription();
  ::android::providers::settings::SettingProto* mutable_sms_subscription();
  void set_allocated_sms_subscription(::android::providers::settings::SettingProto* sms_subscription);

  // optional .android.providers.settings.SettingProto sms_prompt = 5 [(.android.privacy) = {
  bool has_sms_prompt() const;
  void clear_sms_prompt();
  const ::android::providers::settings::SettingProto& sms_prompt() const;
  ::android::providers::settings::SettingProto* release_sms_prompt();
  ::android::providers::settings::SettingProto* mutable_sms_prompt();
  void set_allocated_sms_prompt(::android::providers::settings::SettingProto* sms_prompt);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.MultiSim)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* voice_call_subscription_;
  ::android::providers::settings::SettingProto* voice_prompt_;
  ::android::providers::settings::SettingProto* data_call_subscription_;
  ::android::providers::settings::SettingProto* sms_subscription_;
  ::android::providers::settings::SettingProto* sms_prompt_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Netstats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Netstats) */ {
 public:
  GlobalSettingsProto_Netstats();
  virtual ~GlobalSettingsProto_Netstats();

  GlobalSettingsProto_Netstats(const GlobalSettingsProto_Netstats& from);
  GlobalSettingsProto_Netstats(GlobalSettingsProto_Netstats&& from) noexcept
    : GlobalSettingsProto_Netstats() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Netstats& operator=(const GlobalSettingsProto_Netstats& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Netstats& operator=(GlobalSettingsProto_Netstats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Netstats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Netstats* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Netstats*>(
               &_GlobalSettingsProto_Netstats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GlobalSettingsProto_Netstats& a, GlobalSettingsProto_Netstats& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Netstats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Netstats* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Netstats>(nullptr);
  }

  GlobalSettingsProto_Netstats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Netstats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Netstats& from);
  void MergeFrom(const GlobalSettingsProto_Netstats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Netstats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Netstats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kPollIntervalFieldNumber = 2,
    kTimeCacheMaxAgeFieldNumber = 3,
    kGlobalAlertBytesFieldNumber = 4,
    kSampleEnabledFieldNumber = 5,
    kAugmentEnabledFieldNumber = 6,
    kDevBucketDurationFieldNumber = 7,
    kDevPersistBytesFieldNumber = 8,
    kDevRotateAgeFieldNumber = 9,
    kDevDeleteAgeFieldNumber = 10,
    kUidBucketDurationFieldNumber = 11,
    kUidPersistBytesFieldNumber = 12,
    kUidRotateAgeFieldNumber = 13,
    kUidDeleteAgeFieldNumber = 14,
    kUidTagBucketDurationFieldNumber = 15,
    kUidTagPersistBytesFieldNumber = 16,
    kUidTagRotateAgeFieldNumber = 17,
    kUidTagDeleteAgeFieldNumber = 18,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto poll_interval = 2 [(.android.privacy) = {
  bool has_poll_interval() const;
  void clear_poll_interval();
  const ::android::providers::settings::SettingProto& poll_interval() const;
  ::android::providers::settings::SettingProto* release_poll_interval();
  ::android::providers::settings::SettingProto* mutable_poll_interval();
  void set_allocated_poll_interval(::android::providers::settings::SettingProto* poll_interval);

  // optional .android.providers.settings.SettingProto time_cache_max_age = 3 [(.android.privacy) = {
  bool has_time_cache_max_age() const;
  void clear_time_cache_max_age();
  const ::android::providers::settings::SettingProto& time_cache_max_age() const;
  ::android::providers::settings::SettingProto* release_time_cache_max_age();
  ::android::providers::settings::SettingProto* mutable_time_cache_max_age();
  void set_allocated_time_cache_max_age(::android::providers::settings::SettingProto* time_cache_max_age);

  // optional .android.providers.settings.SettingProto global_alert_bytes = 4 [(.android.privacy) = {
  bool has_global_alert_bytes() const;
  void clear_global_alert_bytes();
  const ::android::providers::settings::SettingProto& global_alert_bytes() const;
  ::android::providers::settings::SettingProto* release_global_alert_bytes();
  ::android::providers::settings::SettingProto* mutable_global_alert_bytes();
  void set_allocated_global_alert_bytes(::android::providers::settings::SettingProto* global_alert_bytes);

  // optional .android.providers.settings.SettingProto sample_enabled = 5 [(.android.privacy) = {
  bool has_sample_enabled() const;
  void clear_sample_enabled();
  const ::android::providers::settings::SettingProto& sample_enabled() const;
  ::android::providers::settings::SettingProto* release_sample_enabled();
  ::android::providers::settings::SettingProto* mutable_sample_enabled();
  void set_allocated_sample_enabled(::android::providers::settings::SettingProto* sample_enabled);

  // optional .android.providers.settings.SettingProto augment_enabled = 6 [(.android.privacy) = {
  bool has_augment_enabled() const;
  void clear_augment_enabled();
  const ::android::providers::settings::SettingProto& augment_enabled() const;
  ::android::providers::settings::SettingProto* release_augment_enabled();
  ::android::providers::settings::SettingProto* mutable_augment_enabled();
  void set_allocated_augment_enabled(::android::providers::settings::SettingProto* augment_enabled);

  // optional .android.providers.settings.SettingProto dev_bucket_duration = 7 [(.android.privacy) = {
  bool has_dev_bucket_duration() const;
  void clear_dev_bucket_duration();
  const ::android::providers::settings::SettingProto& dev_bucket_duration() const;
  ::android::providers::settings::SettingProto* release_dev_bucket_duration();
  ::android::providers::settings::SettingProto* mutable_dev_bucket_duration();
  void set_allocated_dev_bucket_duration(::android::providers::settings::SettingProto* dev_bucket_duration);

  // optional .android.providers.settings.SettingProto dev_persist_bytes = 8 [(.android.privacy) = {
  bool has_dev_persist_bytes() const;
  void clear_dev_persist_bytes();
  const ::android::providers::settings::SettingProto& dev_persist_bytes() const;
  ::android::providers::settings::SettingProto* release_dev_persist_bytes();
  ::android::providers::settings::SettingProto* mutable_dev_persist_bytes();
  void set_allocated_dev_persist_bytes(::android::providers::settings::SettingProto* dev_persist_bytes);

  // optional .android.providers.settings.SettingProto dev_rotate_age = 9 [(.android.privacy) = {
  bool has_dev_rotate_age() const;
  void clear_dev_rotate_age();
  const ::android::providers::settings::SettingProto& dev_rotate_age() const;
  ::android::providers::settings::SettingProto* release_dev_rotate_age();
  ::android::providers::settings::SettingProto* mutable_dev_rotate_age();
  void set_allocated_dev_rotate_age(::android::providers::settings::SettingProto* dev_rotate_age);

  // optional .android.providers.settings.SettingProto dev_delete_age = 10 [(.android.privacy) = {
  bool has_dev_delete_age() const;
  void clear_dev_delete_age();
  const ::android::providers::settings::SettingProto& dev_delete_age() const;
  ::android::providers::settings::SettingProto* release_dev_delete_age();
  ::android::providers::settings::SettingProto* mutable_dev_delete_age();
  void set_allocated_dev_delete_age(::android::providers::settings::SettingProto* dev_delete_age);

  // optional .android.providers.settings.SettingProto uid_bucket_duration = 11 [(.android.privacy) = {
  bool has_uid_bucket_duration() const;
  void clear_uid_bucket_duration();
  const ::android::providers::settings::SettingProto& uid_bucket_duration() const;
  ::android::providers::settings::SettingProto* release_uid_bucket_duration();
  ::android::providers::settings::SettingProto* mutable_uid_bucket_duration();
  void set_allocated_uid_bucket_duration(::android::providers::settings::SettingProto* uid_bucket_duration);

  // optional .android.providers.settings.SettingProto uid_persist_bytes = 12 [(.android.privacy) = {
  bool has_uid_persist_bytes() const;
  void clear_uid_persist_bytes();
  const ::android::providers::settings::SettingProto& uid_persist_bytes() const;
  ::android::providers::settings::SettingProto* release_uid_persist_bytes();
  ::android::providers::settings::SettingProto* mutable_uid_persist_bytes();
  void set_allocated_uid_persist_bytes(::android::providers::settings::SettingProto* uid_persist_bytes);

  // optional .android.providers.settings.SettingProto uid_rotate_age = 13 [(.android.privacy) = {
  bool has_uid_rotate_age() const;
  void clear_uid_rotate_age();
  const ::android::providers::settings::SettingProto& uid_rotate_age() const;
  ::android::providers::settings::SettingProto* release_uid_rotate_age();
  ::android::providers::settings::SettingProto* mutable_uid_rotate_age();
  void set_allocated_uid_rotate_age(::android::providers::settings::SettingProto* uid_rotate_age);

  // optional .android.providers.settings.SettingProto uid_delete_age = 14 [(.android.privacy) = {
  bool has_uid_delete_age() const;
  void clear_uid_delete_age();
  const ::android::providers::settings::SettingProto& uid_delete_age() const;
  ::android::providers::settings::SettingProto* release_uid_delete_age();
  ::android::providers::settings::SettingProto* mutable_uid_delete_age();
  void set_allocated_uid_delete_age(::android::providers::settings::SettingProto* uid_delete_age);

  // optional .android.providers.settings.SettingProto uid_tag_bucket_duration = 15 [(.android.privacy) = {
  bool has_uid_tag_bucket_duration() const;
  void clear_uid_tag_bucket_duration();
  const ::android::providers::settings::SettingProto& uid_tag_bucket_duration() const;
  ::android::providers::settings::SettingProto* release_uid_tag_bucket_duration();
  ::android::providers::settings::SettingProto* mutable_uid_tag_bucket_duration();
  void set_allocated_uid_tag_bucket_duration(::android::providers::settings::SettingProto* uid_tag_bucket_duration);

  // optional .android.providers.settings.SettingProto uid_tag_persist_bytes = 16 [(.android.privacy) = {
  bool has_uid_tag_persist_bytes() const;
  void clear_uid_tag_persist_bytes();
  const ::android::providers::settings::SettingProto& uid_tag_persist_bytes() const;
  ::android::providers::settings::SettingProto* release_uid_tag_persist_bytes();
  ::android::providers::settings::SettingProto* mutable_uid_tag_persist_bytes();
  void set_allocated_uid_tag_persist_bytes(::android::providers::settings::SettingProto* uid_tag_persist_bytes);

  // optional .android.providers.settings.SettingProto uid_tag_rotate_age = 17 [(.android.privacy) = {
  bool has_uid_tag_rotate_age() const;
  void clear_uid_tag_rotate_age();
  const ::android::providers::settings::SettingProto& uid_tag_rotate_age() const;
  ::android::providers::settings::SettingProto* release_uid_tag_rotate_age();
  ::android::providers::settings::SettingProto* mutable_uid_tag_rotate_age();
  void set_allocated_uid_tag_rotate_age(::android::providers::settings::SettingProto* uid_tag_rotate_age);

  // optional .android.providers.settings.SettingProto uid_tag_delete_age = 18 [(.android.privacy) = {
  bool has_uid_tag_delete_age() const;
  void clear_uid_tag_delete_age();
  const ::android::providers::settings::SettingProto& uid_tag_delete_age() const;
  ::android::providers::settings::SettingProto* release_uid_tag_delete_age();
  ::android::providers::settings::SettingProto* mutable_uid_tag_delete_age();
  void set_allocated_uid_tag_delete_age(::android::providers::settings::SettingProto* uid_tag_delete_age);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Netstats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* poll_interval_;
  ::android::providers::settings::SettingProto* time_cache_max_age_;
  ::android::providers::settings::SettingProto* global_alert_bytes_;
  ::android::providers::settings::SettingProto* sample_enabled_;
  ::android::providers::settings::SettingProto* augment_enabled_;
  ::android::providers::settings::SettingProto* dev_bucket_duration_;
  ::android::providers::settings::SettingProto* dev_persist_bytes_;
  ::android::providers::settings::SettingProto* dev_rotate_age_;
  ::android::providers::settings::SettingProto* dev_delete_age_;
  ::android::providers::settings::SettingProto* uid_bucket_duration_;
  ::android::providers::settings::SettingProto* uid_persist_bytes_;
  ::android::providers::settings::SettingProto* uid_rotate_age_;
  ::android::providers::settings::SettingProto* uid_delete_age_;
  ::android::providers::settings::SettingProto* uid_tag_bucket_duration_;
  ::android::providers::settings::SettingProto* uid_tag_persist_bytes_;
  ::android::providers::settings::SettingProto* uid_tag_rotate_age_;
  ::android::providers::settings::SettingProto* uid_tag_delete_age_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Network :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Network) */ {
 public:
  GlobalSettingsProto_Network();
  virtual ~GlobalSettingsProto_Network();

  GlobalSettingsProto_Network(const GlobalSettingsProto_Network& from);
  GlobalSettingsProto_Network(GlobalSettingsProto_Network&& from) noexcept
    : GlobalSettingsProto_Network() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Network& operator=(const GlobalSettingsProto_Network& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Network& operator=(GlobalSettingsProto_Network&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Network& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Network* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Network*>(
               &_GlobalSettingsProto_Network_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GlobalSettingsProto_Network& a, GlobalSettingsProto_Network& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Network* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Network* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Network>(nullptr);
  }

  GlobalSettingsProto_Network* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Network>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Network& from);
  void MergeFrom(const GlobalSettingsProto_Network& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Network* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Network";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferenceFieldNumber = 1,
    kPreferredNetworkModeFieldNumber = 2,
    kScorerAppFieldNumber = 3,
    kSwitchNotificationDailyLimitFieldNumber = 4,
    kSwitchNotificationRateLimitMillisFieldNumber = 5,
    kAvoidBadWifiFieldNumber = 6,
    kMeteredMultipathPreferenceFieldNumber = 7,
    kWatchlistLastReportTimeFieldNumber = 8,
    kScoringUiEnabledFieldNumber = 9,
    kRecommendationsEnabledFieldNumber = 10,
    kRecommendationsPackageFieldNumber = 11,
    kRecommendationRequestTimeoutMsFieldNumber = 12,
    kWatchlistEnabledFieldNumber = 13,
    kScoringProvisionedFieldNumber = 14,
    kAccessTimeoutMsFieldNumber = 15,
    kRecommendedNetworkEvaluatorCacheExpiryMsFieldNumber = 16,
  };
  // optional .android.providers.settings.SettingProto preference = 1;
  bool has_preference() const;
  void clear_preference();
  const ::android::providers::settings::SettingProto& preference() const;
  ::android::providers::settings::SettingProto* release_preference();
  ::android::providers::settings::SettingProto* mutable_preference();
  void set_allocated_preference(::android::providers::settings::SettingProto* preference);

  // optional .android.providers.settings.SettingProto preferred_network_mode = 2 [(.android.privacy) = {
  bool has_preferred_network_mode() const;
  void clear_preferred_network_mode();
  const ::android::providers::settings::SettingProto& preferred_network_mode() const;
  ::android::providers::settings::SettingProto* release_preferred_network_mode();
  ::android::providers::settings::SettingProto* mutable_preferred_network_mode();
  void set_allocated_preferred_network_mode(::android::providers::settings::SettingProto* preferred_network_mode);

  // optional .android.providers.settings.SettingProto scorer_app = 3 [(.android.privacy) = {
  bool has_scorer_app() const;
  void clear_scorer_app();
  const ::android::providers::settings::SettingProto& scorer_app() const;
  ::android::providers::settings::SettingProto* release_scorer_app();
  ::android::providers::settings::SettingProto* mutable_scorer_app();
  void set_allocated_scorer_app(::android::providers::settings::SettingProto* scorer_app);

  // optional .android.providers.settings.SettingProto switch_notification_daily_limit = 4 [(.android.privacy) = {
  bool has_switch_notification_daily_limit() const;
  void clear_switch_notification_daily_limit();
  const ::android::providers::settings::SettingProto& switch_notification_daily_limit() const;
  ::android::providers::settings::SettingProto* release_switch_notification_daily_limit();
  ::android::providers::settings::SettingProto* mutable_switch_notification_daily_limit();
  void set_allocated_switch_notification_daily_limit(::android::providers::settings::SettingProto* switch_notification_daily_limit);

  // optional .android.providers.settings.SettingProto switch_notification_rate_limit_millis = 5 [(.android.privacy) = {
  bool has_switch_notification_rate_limit_millis() const;
  void clear_switch_notification_rate_limit_millis();
  const ::android::providers::settings::SettingProto& switch_notification_rate_limit_millis() const;
  ::android::providers::settings::SettingProto* release_switch_notification_rate_limit_millis();
  ::android::providers::settings::SettingProto* mutable_switch_notification_rate_limit_millis();
  void set_allocated_switch_notification_rate_limit_millis(::android::providers::settings::SettingProto* switch_notification_rate_limit_millis);

  // optional .android.providers.settings.SettingProto avoid_bad_wifi = 6 [(.android.privacy) = {
  bool has_avoid_bad_wifi() const;
  void clear_avoid_bad_wifi();
  const ::android::providers::settings::SettingProto& avoid_bad_wifi() const;
  ::android::providers::settings::SettingProto* release_avoid_bad_wifi();
  ::android::providers::settings::SettingProto* mutable_avoid_bad_wifi();
  void set_allocated_avoid_bad_wifi(::android::providers::settings::SettingProto* avoid_bad_wifi);

  // optional .android.providers.settings.SettingProto metered_multipath_preference = 7 [(.android.privacy) = {
  bool has_metered_multipath_preference() const;
  void clear_metered_multipath_preference();
  const ::android::providers::settings::SettingProto& metered_multipath_preference() const;
  ::android::providers::settings::SettingProto* release_metered_multipath_preference();
  ::android::providers::settings::SettingProto* mutable_metered_multipath_preference();
  void set_allocated_metered_multipath_preference(::android::providers::settings::SettingProto* metered_multipath_preference);

  // optional .android.providers.settings.SettingProto watchlist_last_report_time = 8 [(.android.privacy) = {
  bool has_watchlist_last_report_time() const;
  void clear_watchlist_last_report_time();
  const ::android::providers::settings::SettingProto& watchlist_last_report_time() const;
  ::android::providers::settings::SettingProto* release_watchlist_last_report_time();
  ::android::providers::settings::SettingProto* mutable_watchlist_last_report_time();
  void set_allocated_watchlist_last_report_time(::android::providers::settings::SettingProto* watchlist_last_report_time);

  // optional .android.providers.settings.SettingProto scoring_ui_enabled = 9 [(.android.privacy) = {
  bool has_scoring_ui_enabled() const;
  void clear_scoring_ui_enabled();
  const ::android::providers::settings::SettingProto& scoring_ui_enabled() const;
  ::android::providers::settings::SettingProto* release_scoring_ui_enabled();
  ::android::providers::settings::SettingProto* mutable_scoring_ui_enabled();
  void set_allocated_scoring_ui_enabled(::android::providers::settings::SettingProto* scoring_ui_enabled);

  // optional .android.providers.settings.SettingProto recommendations_enabled = 10 [(.android.privacy) = {
  bool has_recommendations_enabled() const;
  void clear_recommendations_enabled();
  const ::android::providers::settings::SettingProto& recommendations_enabled() const;
  ::android::providers::settings::SettingProto* release_recommendations_enabled();
  ::android::providers::settings::SettingProto* mutable_recommendations_enabled();
  void set_allocated_recommendations_enabled(::android::providers::settings::SettingProto* recommendations_enabled);

  // optional .android.providers.settings.SettingProto recommendations_package = 11 [(.android.privacy) = {
  bool has_recommendations_package() const;
  void clear_recommendations_package();
  const ::android::providers::settings::SettingProto& recommendations_package() const;
  ::android::providers::settings::SettingProto* release_recommendations_package();
  ::android::providers::settings::SettingProto* mutable_recommendations_package();
  void set_allocated_recommendations_package(::android::providers::settings::SettingProto* recommendations_package);

  // optional .android.providers.settings.SettingProto recommendation_request_timeout_ms = 12 [(.android.privacy) = {
  bool has_recommendation_request_timeout_ms() const;
  void clear_recommendation_request_timeout_ms();
  const ::android::providers::settings::SettingProto& recommendation_request_timeout_ms() const;
  ::android::providers::settings::SettingProto* release_recommendation_request_timeout_ms();
  ::android::providers::settings::SettingProto* mutable_recommendation_request_timeout_ms();
  void set_allocated_recommendation_request_timeout_ms(::android::providers::settings::SettingProto* recommendation_request_timeout_ms);

  // optional .android.providers.settings.SettingProto watchlist_enabled = 13 [(.android.privacy) = {
  bool has_watchlist_enabled() const;
  void clear_watchlist_enabled();
  const ::android::providers::settings::SettingProto& watchlist_enabled() const;
  ::android::providers::settings::SettingProto* release_watchlist_enabled();
  ::android::providers::settings::SettingProto* mutable_watchlist_enabled();
  void set_allocated_watchlist_enabled(::android::providers::settings::SettingProto* watchlist_enabled);

  // optional .android.providers.settings.SettingProto scoring_provisioned = 14 [(.android.privacy) = {
  bool has_scoring_provisioned() const;
  void clear_scoring_provisioned();
  const ::android::providers::settings::SettingProto& scoring_provisioned() const;
  ::android::providers::settings::SettingProto* release_scoring_provisioned();
  ::android::providers::settings::SettingProto* mutable_scoring_provisioned();
  void set_allocated_scoring_provisioned(::android::providers::settings::SettingProto* scoring_provisioned);

  // optional .android.providers.settings.SettingProto access_timeout_ms = 15 [(.android.privacy) = {
  bool has_access_timeout_ms() const;
  void clear_access_timeout_ms();
  const ::android::providers::settings::SettingProto& access_timeout_ms() const;
  ::android::providers::settings::SettingProto* release_access_timeout_ms();
  ::android::providers::settings::SettingProto* mutable_access_timeout_ms();
  void set_allocated_access_timeout_ms(::android::providers::settings::SettingProto* access_timeout_ms);

  // optional .android.providers.settings.SettingProto recommended_network_evaluator_cache_expiry_ms = 16 [(.android.privacy) = {
  bool has_recommended_network_evaluator_cache_expiry_ms() const;
  void clear_recommended_network_evaluator_cache_expiry_ms();
  const ::android::providers::settings::SettingProto& recommended_network_evaluator_cache_expiry_ms() const;
  ::android::providers::settings::SettingProto* release_recommended_network_evaluator_cache_expiry_ms();
  ::android::providers::settings::SettingProto* mutable_recommended_network_evaluator_cache_expiry_ms();
  void set_allocated_recommended_network_evaluator_cache_expiry_ms(::android::providers::settings::SettingProto* recommended_network_evaluator_cache_expiry_ms);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Network)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* preference_;
  ::android::providers::settings::SettingProto* preferred_network_mode_;
  ::android::providers::settings::SettingProto* scorer_app_;
  ::android::providers::settings::SettingProto* switch_notification_daily_limit_;
  ::android::providers::settings::SettingProto* switch_notification_rate_limit_millis_;
  ::android::providers::settings::SettingProto* avoid_bad_wifi_;
  ::android::providers::settings::SettingProto* metered_multipath_preference_;
  ::android::providers::settings::SettingProto* watchlist_last_report_time_;
  ::android::providers::settings::SettingProto* scoring_ui_enabled_;
  ::android::providers::settings::SettingProto* recommendations_enabled_;
  ::android::providers::settings::SettingProto* recommendations_package_;
  ::android::providers::settings::SettingProto* recommendation_request_timeout_ms_;
  ::android::providers::settings::SettingProto* watchlist_enabled_;
  ::android::providers::settings::SettingProto* scoring_provisioned_;
  ::android::providers::settings::SettingProto* access_timeout_ms_;
  ::android::providers::settings::SettingProto* recommended_network_evaluator_cache_expiry_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_NitzUpdate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.NitzUpdate) */ {
 public:
  GlobalSettingsProto_NitzUpdate();
  virtual ~GlobalSettingsProto_NitzUpdate();

  GlobalSettingsProto_NitzUpdate(const GlobalSettingsProto_NitzUpdate& from);
  GlobalSettingsProto_NitzUpdate(GlobalSettingsProto_NitzUpdate&& from) noexcept
    : GlobalSettingsProto_NitzUpdate() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_NitzUpdate& operator=(const GlobalSettingsProto_NitzUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_NitzUpdate& operator=(GlobalSettingsProto_NitzUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_NitzUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_NitzUpdate* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_NitzUpdate*>(
               &_GlobalSettingsProto_NitzUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GlobalSettingsProto_NitzUpdate& a, GlobalSettingsProto_NitzUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_NitzUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_NitzUpdate* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_NitzUpdate>(nullptr);
  }

  GlobalSettingsProto_NitzUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_NitzUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_NitzUpdate& from);
  void MergeFrom(const GlobalSettingsProto_NitzUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_NitzUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.NitzUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiffFieldNumber = 1,
    kSpacingFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto diff = 1 [(.android.privacy) = {
  bool has_diff() const;
  void clear_diff();
  const ::android::providers::settings::SettingProto& diff() const;
  ::android::providers::settings::SettingProto* release_diff();
  ::android::providers::settings::SettingProto* mutable_diff();
  void set_allocated_diff(::android::providers::settings::SettingProto* diff);

  // optional .android.providers.settings.SettingProto spacing = 2 [(.android.privacy) = {
  bool has_spacing() const;
  void clear_spacing();
  const ::android::providers::settings::SettingProto& spacing() const;
  ::android::providers::settings::SettingProto* release_spacing();
  ::android::providers::settings::SettingProto* mutable_spacing();
  void set_allocated_spacing(::android::providers::settings::SettingProto* spacing);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.NitzUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* diff_;
  ::android::providers::settings::SettingProto* spacing_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Notification :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Notification) */ {
 public:
  GlobalSettingsProto_Notification();
  virtual ~GlobalSettingsProto_Notification();

  GlobalSettingsProto_Notification(const GlobalSettingsProto_Notification& from);
  GlobalSettingsProto_Notification(GlobalSettingsProto_Notification&& from) noexcept
    : GlobalSettingsProto_Notification() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Notification& operator=(const GlobalSettingsProto_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Notification& operator=(GlobalSettingsProto_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Notification* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Notification*>(
               &_GlobalSettingsProto_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GlobalSettingsProto_Notification& a, GlobalSettingsProto_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Notification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Notification* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Notification>(nullptr);
  }

  GlobalSettingsProto_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Notification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Notification& from);
  void MergeFrom(const GlobalSettingsProto_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Notification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxNotificationEnqueueRateFieldNumber = 1,
    kShowNotificationChannelWarningsFieldNumber = 2,
    kSnoozeOptionsFieldNumber = 3,
    kSmartRepliesInNotificationsFlagsFieldNumber = 4,
    kSmartSuggestionsInNotificationsFlagsFieldNumber = 5,
    kBubblesFieldNumber = 6,
  };
  // optional .android.providers.settings.SettingProto max_notification_enqueue_rate = 1 [(.android.privacy) = {
  bool has_max_notification_enqueue_rate() const;
  void clear_max_notification_enqueue_rate();
  const ::android::providers::settings::SettingProto& max_notification_enqueue_rate() const;
  ::android::providers::settings::SettingProto* release_max_notification_enqueue_rate();
  ::android::providers::settings::SettingProto* mutable_max_notification_enqueue_rate();
  void set_allocated_max_notification_enqueue_rate(::android::providers::settings::SettingProto* max_notification_enqueue_rate);

  // optional .android.providers.settings.SettingProto show_notification_channel_warnings = 2 [(.android.privacy) = {
  bool has_show_notification_channel_warnings() const;
  void clear_show_notification_channel_warnings();
  const ::android::providers::settings::SettingProto& show_notification_channel_warnings() const;
  ::android::providers::settings::SettingProto* release_show_notification_channel_warnings();
  ::android::providers::settings::SettingProto* mutable_show_notification_channel_warnings();
  void set_allocated_show_notification_channel_warnings(::android::providers::settings::SettingProto* show_notification_channel_warnings);

  // optional .android.providers.settings.SettingProto snooze_options = 3 [(.android.privacy) = {
  bool has_snooze_options() const;
  void clear_snooze_options();
  const ::android::providers::settings::SettingProto& snooze_options() const;
  ::android::providers::settings::SettingProto* release_snooze_options();
  ::android::providers::settings::SettingProto* mutable_snooze_options();
  void set_allocated_snooze_options(::android::providers::settings::SettingProto* snooze_options);

  // optional .android.providers.settings.SettingProto smart_replies_in_notifications_flags = 4 [(.android.privacy) = {
  bool has_smart_replies_in_notifications_flags() const;
  void clear_smart_replies_in_notifications_flags();
  const ::android::providers::settings::SettingProto& smart_replies_in_notifications_flags() const;
  ::android::providers::settings::SettingProto* release_smart_replies_in_notifications_flags();
  ::android::providers::settings::SettingProto* mutable_smart_replies_in_notifications_flags();
  void set_allocated_smart_replies_in_notifications_flags(::android::providers::settings::SettingProto* smart_replies_in_notifications_flags);

  // optional .android.providers.settings.SettingProto smart_suggestions_in_notifications_flags = 5 [(.android.privacy) = {
  bool has_smart_suggestions_in_notifications_flags() const;
  void clear_smart_suggestions_in_notifications_flags();
  const ::android::providers::settings::SettingProto& smart_suggestions_in_notifications_flags() const;
  ::android::providers::settings::SettingProto* release_smart_suggestions_in_notifications_flags();
  ::android::providers::settings::SettingProto* mutable_smart_suggestions_in_notifications_flags();
  void set_allocated_smart_suggestions_in_notifications_flags(::android::providers::settings::SettingProto* smart_suggestions_in_notifications_flags);

  // optional .android.providers.settings.SettingProto bubbles = 6 [(.android.privacy) = {
  bool has_bubbles() const;
  void clear_bubbles();
  const ::android::providers::settings::SettingProto& bubbles() const;
  ::android::providers::settings::SettingProto* release_bubbles();
  ::android::providers::settings::SettingProto* mutable_bubbles();
  void set_allocated_bubbles(::android::providers::settings::SettingProto* bubbles);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Notification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* max_notification_enqueue_rate_;
  ::android::providers::settings::SettingProto* show_notification_channel_warnings_;
  ::android::providers::settings::SettingProto* snooze_options_;
  ::android::providers::settings::SettingProto* smart_replies_in_notifications_flags_;
  ::android::providers::settings::SettingProto* smart_suggestions_in_notifications_flags_;
  ::android::providers::settings::SettingProto* bubbles_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Ntp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Ntp) */ {
 public:
  GlobalSettingsProto_Ntp();
  virtual ~GlobalSettingsProto_Ntp();

  GlobalSettingsProto_Ntp(const GlobalSettingsProto_Ntp& from);
  GlobalSettingsProto_Ntp(GlobalSettingsProto_Ntp&& from) noexcept
    : GlobalSettingsProto_Ntp() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Ntp& operator=(const GlobalSettingsProto_Ntp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Ntp& operator=(GlobalSettingsProto_Ntp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Ntp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Ntp* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Ntp*>(
               &_GlobalSettingsProto_Ntp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GlobalSettingsProto_Ntp& a, GlobalSettingsProto_Ntp& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Ntp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Ntp* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Ntp>(nullptr);
  }

  GlobalSettingsProto_Ntp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Ntp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Ntp& from);
  void MergeFrom(const GlobalSettingsProto_Ntp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Ntp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Ntp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 1,
    kTimeoutMsFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto server = 1;
  bool has_server() const;
  void clear_server();
  const ::android::providers::settings::SettingProto& server() const;
  ::android::providers::settings::SettingProto* release_server();
  ::android::providers::settings::SettingProto* mutable_server();
  void set_allocated_server(::android::providers::settings::SettingProto* server);

  // optional .android.providers.settings.SettingProto timeout_ms = 2 [(.android.privacy) = {
  bool has_timeout_ms() const;
  void clear_timeout_ms();
  const ::android::providers::settings::SettingProto& timeout_ms() const;
  ::android::providers::settings::SettingProto* release_timeout_ms();
  ::android::providers::settings::SettingProto* mutable_timeout_ms();
  void set_allocated_timeout_ms(::android::providers::settings::SettingProto* timeout_ms);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Ntp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* server_;
  ::android::providers::settings::SettingProto* timeout_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_UserAbsentSmallBattery :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery) */ {
 public:
  GlobalSettingsProto_UserAbsentSmallBattery();
  virtual ~GlobalSettingsProto_UserAbsentSmallBattery();

  GlobalSettingsProto_UserAbsentSmallBattery(const GlobalSettingsProto_UserAbsentSmallBattery& from);
  GlobalSettingsProto_UserAbsentSmallBattery(GlobalSettingsProto_UserAbsentSmallBattery&& from) noexcept
    : GlobalSettingsProto_UserAbsentSmallBattery() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_UserAbsentSmallBattery& operator=(const GlobalSettingsProto_UserAbsentSmallBattery& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_UserAbsentSmallBattery& operator=(GlobalSettingsProto_UserAbsentSmallBattery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_UserAbsentSmallBattery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_UserAbsentSmallBattery* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_UserAbsentSmallBattery*>(
               &_GlobalSettingsProto_UserAbsentSmallBattery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GlobalSettingsProto_UserAbsentSmallBattery& a, GlobalSettingsProto_UserAbsentSmallBattery& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_UserAbsentSmallBattery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_UserAbsentSmallBattery* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_UserAbsentSmallBattery>(nullptr);
  }

  GlobalSettingsProto_UserAbsentSmallBattery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_UserAbsentSmallBattery>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_UserAbsentSmallBattery& from);
  void MergeFrom(const GlobalSettingsProto_UserAbsentSmallBattery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_UserAbsentSmallBattery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiosOffEnabledFieldNumber = 1,
    kTouchOffEnabledFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto radios_off_enabled = 1 [(.android.privacy) = {
  bool has_radios_off_enabled() const;
  void clear_radios_off_enabled();
  const ::android::providers::settings::SettingProto& radios_off_enabled() const;
  ::android::providers::settings::SettingProto* release_radios_off_enabled();
  ::android::providers::settings::SettingProto* mutable_radios_off_enabled();
  void set_allocated_radios_off_enabled(::android::providers::settings::SettingProto* radios_off_enabled);

  // optional .android.providers.settings.SettingProto touch_off_enabled = 2 [(.android.privacy) = {
  bool has_touch_off_enabled() const;
  void clear_touch_off_enabled();
  const ::android::providers::settings::SettingProto& touch_off_enabled() const;
  ::android::providers::settings::SettingProto* release_touch_off_enabled();
  ::android::providers::settings::SettingProto* mutable_touch_off_enabled();
  void set_allocated_touch_off_enabled(::android::providers::settings::SettingProto* touch_off_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* radios_off_enabled_;
  ::android::providers::settings::SettingProto* touch_off_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_PackageVerifier :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.PackageVerifier) */ {
 public:
  GlobalSettingsProto_PackageVerifier();
  virtual ~GlobalSettingsProto_PackageVerifier();

  GlobalSettingsProto_PackageVerifier(const GlobalSettingsProto_PackageVerifier& from);
  GlobalSettingsProto_PackageVerifier(GlobalSettingsProto_PackageVerifier&& from) noexcept
    : GlobalSettingsProto_PackageVerifier() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_PackageVerifier& operator=(const GlobalSettingsProto_PackageVerifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_PackageVerifier& operator=(GlobalSettingsProto_PackageVerifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_PackageVerifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_PackageVerifier* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_PackageVerifier*>(
               &_GlobalSettingsProto_PackageVerifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GlobalSettingsProto_PackageVerifier& a, GlobalSettingsProto_PackageVerifier& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_PackageVerifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_PackageVerifier* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_PackageVerifier>(nullptr);
  }

  GlobalSettingsProto_PackageVerifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_PackageVerifier>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_PackageVerifier& from);
  void MergeFrom(const GlobalSettingsProto_PackageVerifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_PackageVerifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.PackageVerifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kTimeoutFieldNumber = 2,
    kDefaultResponseFieldNumber = 3,
    kSettingVisibleFieldNumber = 4,
    kIncludeAdbFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto timeout = 2 [(.android.privacy) = {
  bool has_timeout() const;
  void clear_timeout();
  const ::android::providers::settings::SettingProto& timeout() const;
  ::android::providers::settings::SettingProto* release_timeout();
  ::android::providers::settings::SettingProto* mutable_timeout();
  void set_allocated_timeout(::android::providers::settings::SettingProto* timeout);

  // optional .android.providers.settings.SettingProto default_response = 3;
  bool has_default_response() const;
  void clear_default_response();
  const ::android::providers::settings::SettingProto& default_response() const;
  ::android::providers::settings::SettingProto* release_default_response();
  ::android::providers::settings::SettingProto* mutable_default_response();
  void set_allocated_default_response(::android::providers::settings::SettingProto* default_response);

  // optional .android.providers.settings.SettingProto setting_visible = 4 [(.android.privacy) = {
  bool has_setting_visible() const;
  void clear_setting_visible();
  const ::android::providers::settings::SettingProto& setting_visible() const;
  ::android::providers::settings::SettingProto* release_setting_visible();
  ::android::providers::settings::SettingProto* mutable_setting_visible();
  void set_allocated_setting_visible(::android::providers::settings::SettingProto* setting_visible);

  // optional .android.providers.settings.SettingProto include_adb = 5 [(.android.privacy) = {
  bool has_include_adb() const;
  void clear_include_adb();
  const ::android::providers::settings::SettingProto& include_adb() const;
  ::android::providers::settings::SettingProto* release_include_adb();
  ::android::providers::settings::SettingProto* mutable_include_adb();
  void set_allocated_include_adb(::android::providers::settings::SettingProto* include_adb);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.PackageVerifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* timeout_;
  ::android::providers::settings::SettingProto* default_response_;
  ::android::providers::settings::SettingProto* setting_visible_;
  ::android::providers::settings::SettingProto* include_adb_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_PdpWatchdog :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.PdpWatchdog) */ {
 public:
  GlobalSettingsProto_PdpWatchdog();
  virtual ~GlobalSettingsProto_PdpWatchdog();

  GlobalSettingsProto_PdpWatchdog(const GlobalSettingsProto_PdpWatchdog& from);
  GlobalSettingsProto_PdpWatchdog(GlobalSettingsProto_PdpWatchdog&& from) noexcept
    : GlobalSettingsProto_PdpWatchdog() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_PdpWatchdog& operator=(const GlobalSettingsProto_PdpWatchdog& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_PdpWatchdog& operator=(GlobalSettingsProto_PdpWatchdog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_PdpWatchdog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_PdpWatchdog* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_PdpWatchdog*>(
               &_GlobalSettingsProto_PdpWatchdog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GlobalSettingsProto_PdpWatchdog& a, GlobalSettingsProto_PdpWatchdog& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_PdpWatchdog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_PdpWatchdog* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_PdpWatchdog>(nullptr);
  }

  GlobalSettingsProto_PdpWatchdog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_PdpWatchdog>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_PdpWatchdog& from);
  void MergeFrom(const GlobalSettingsProto_PdpWatchdog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_PdpWatchdog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.PdpWatchdog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPollIntervalMsFieldNumber = 1,
    kLongPollIntervalMsFieldNumber = 2,
    kErrorPollIntervalMsFieldNumber = 3,
    kTriggerPacketCountFieldNumber = 4,
    kErrorPollCountFieldNumber = 5,
    kMaxPdpResetFailCountFieldNumber = 6,
  };
  // optional .android.providers.settings.SettingProto poll_interval_ms = 1 [(.android.privacy) = {
  bool has_poll_interval_ms() const;
  void clear_poll_interval_ms();
  const ::android::providers::settings::SettingProto& poll_interval_ms() const;
  ::android::providers::settings::SettingProto* release_poll_interval_ms();
  ::android::providers::settings::SettingProto* mutable_poll_interval_ms();
  void set_allocated_poll_interval_ms(::android::providers::settings::SettingProto* poll_interval_ms);

  // optional .android.providers.settings.SettingProto long_poll_interval_ms = 2 [(.android.privacy) = {
  bool has_long_poll_interval_ms() const;
  void clear_long_poll_interval_ms();
  const ::android::providers::settings::SettingProto& long_poll_interval_ms() const;
  ::android::providers::settings::SettingProto* release_long_poll_interval_ms();
  ::android::providers::settings::SettingProto* mutable_long_poll_interval_ms();
  void set_allocated_long_poll_interval_ms(::android::providers::settings::SettingProto* long_poll_interval_ms);

  // optional .android.providers.settings.SettingProto error_poll_interval_ms = 3 [(.android.privacy) = {
  bool has_error_poll_interval_ms() const;
  void clear_error_poll_interval_ms();
  const ::android::providers::settings::SettingProto& error_poll_interval_ms() const;
  ::android::providers::settings::SettingProto* release_error_poll_interval_ms();
  ::android::providers::settings::SettingProto* mutable_error_poll_interval_ms();
  void set_allocated_error_poll_interval_ms(::android::providers::settings::SettingProto* error_poll_interval_ms);

  // optional .android.providers.settings.SettingProto trigger_packet_count = 4 [(.android.privacy) = {
  bool has_trigger_packet_count() const;
  void clear_trigger_packet_count();
  const ::android::providers::settings::SettingProto& trigger_packet_count() const;
  ::android::providers::settings::SettingProto* release_trigger_packet_count();
  ::android::providers::settings::SettingProto* mutable_trigger_packet_count();
  void set_allocated_trigger_packet_count(::android::providers::settings::SettingProto* trigger_packet_count);

  // optional .android.providers.settings.SettingProto error_poll_count = 5 [(.android.privacy) = {
  bool has_error_poll_count() const;
  void clear_error_poll_count();
  const ::android::providers::settings::SettingProto& error_poll_count() const;
  ::android::providers::settings::SettingProto* release_error_poll_count();
  ::android::providers::settings::SettingProto* mutable_error_poll_count();
  void set_allocated_error_poll_count(::android::providers::settings::SettingProto* error_poll_count);

  // optional .android.providers.settings.SettingProto max_pdp_reset_fail_count = 6 [(.android.privacy) = {
  bool has_max_pdp_reset_fail_count() const;
  void clear_max_pdp_reset_fail_count();
  const ::android::providers::settings::SettingProto& max_pdp_reset_fail_count() const;
  ::android::providers::settings::SettingProto* release_max_pdp_reset_fail_count();
  ::android::providers::settings::SettingProto* mutable_max_pdp_reset_fail_count();
  void set_allocated_max_pdp_reset_fail_count(::android::providers::settings::SettingProto* max_pdp_reset_fail_count);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* poll_interval_ms_;
  ::android::providers::settings::SettingProto* long_poll_interval_ms_;
  ::android::providers::settings::SettingProto* error_poll_interval_ms_;
  ::android::providers::settings::SettingProto* trigger_packet_count_;
  ::android::providers::settings::SettingProto* error_poll_count_;
  ::android::providers::settings::SettingProto* max_pdp_reset_fail_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_PrepaidSetup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.PrepaidSetup) */ {
 public:
  GlobalSettingsProto_PrepaidSetup();
  virtual ~GlobalSettingsProto_PrepaidSetup();

  GlobalSettingsProto_PrepaidSetup(const GlobalSettingsProto_PrepaidSetup& from);
  GlobalSettingsProto_PrepaidSetup(GlobalSettingsProto_PrepaidSetup&& from) noexcept
    : GlobalSettingsProto_PrepaidSetup() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_PrepaidSetup& operator=(const GlobalSettingsProto_PrepaidSetup& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_PrepaidSetup& operator=(GlobalSettingsProto_PrepaidSetup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_PrepaidSetup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_PrepaidSetup* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_PrepaidSetup*>(
               &_GlobalSettingsProto_PrepaidSetup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GlobalSettingsProto_PrepaidSetup& a, GlobalSettingsProto_PrepaidSetup& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_PrepaidSetup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_PrepaidSetup* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_PrepaidSetup>(nullptr);
  }

  GlobalSettingsProto_PrepaidSetup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_PrepaidSetup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_PrepaidSetup& from);
  void MergeFrom(const GlobalSettingsProto_PrepaidSetup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_PrepaidSetup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.PrepaidSetup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataServiceUrlFieldNumber = 1,
    kDetectionTargetUrlFieldNumber = 2,
    kDetectionRedirHostFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto data_service_url = 1;
  bool has_data_service_url() const;
  void clear_data_service_url();
  const ::android::providers::settings::SettingProto& data_service_url() const;
  ::android::providers::settings::SettingProto* release_data_service_url();
  ::android::providers::settings::SettingProto* mutable_data_service_url();
  void set_allocated_data_service_url(::android::providers::settings::SettingProto* data_service_url);

  // optional .android.providers.settings.SettingProto detection_target_url = 2;
  bool has_detection_target_url() const;
  void clear_detection_target_url();
  const ::android::providers::settings::SettingProto& detection_target_url() const;
  ::android::providers::settings::SettingProto* release_detection_target_url();
  ::android::providers::settings::SettingProto* mutable_detection_target_url();
  void set_allocated_detection_target_url(::android::providers::settings::SettingProto* detection_target_url);

  // optional .android.providers.settings.SettingProto detection_redir_host = 3;
  bool has_detection_redir_host() const;
  void clear_detection_redir_host();
  const ::android::providers::settings::SettingProto& detection_redir_host() const;
  ::android::providers::settings::SettingProto* release_detection_redir_host();
  ::android::providers::settings::SettingProto* mutable_detection_redir_host();
  void set_allocated_detection_redir_host(::android::providers::settings::SettingProto* detection_redir_host);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* data_service_url_;
  ::android::providers::settings::SettingProto* detection_target_url_;
  ::android::providers::settings::SettingProto* detection_redir_host_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Private :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Private) */ {
 public:
  GlobalSettingsProto_Private();
  virtual ~GlobalSettingsProto_Private();

  GlobalSettingsProto_Private(const GlobalSettingsProto_Private& from);
  GlobalSettingsProto_Private(GlobalSettingsProto_Private&& from) noexcept
    : GlobalSettingsProto_Private() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Private& operator=(const GlobalSettingsProto_Private& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Private& operator=(GlobalSettingsProto_Private&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Private& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Private* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Private*>(
               &_GlobalSettingsProto_Private_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GlobalSettingsProto_Private& a, GlobalSettingsProto_Private& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Private* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Private* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Private>(nullptr);
  }

  GlobalSettingsProto_Private* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Private>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Private& from);
  void MergeFrom(const GlobalSettingsProto_Private& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Private* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Private";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDnsModeFieldNumber = 1,
    kDnsSpecifierFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto dns_mode = 1 [(.android.privacy) = {
  bool has_dns_mode() const;
  void clear_dns_mode();
  const ::android::providers::settings::SettingProto& dns_mode() const;
  ::android::providers::settings::SettingProto* release_dns_mode();
  ::android::providers::settings::SettingProto* mutable_dns_mode();
  void set_allocated_dns_mode(::android::providers::settings::SettingProto* dns_mode);

  // optional .android.providers.settings.SettingProto dns_specifier = 2 [(.android.privacy) = {
  bool has_dns_specifier() const;
  void clear_dns_specifier();
  const ::android::providers::settings::SettingProto& dns_specifier() const;
  ::android::providers::settings::SettingProto* release_dns_specifier();
  ::android::providers::settings::SettingProto* mutable_dns_specifier();
  void set_allocated_dns_specifier(::android::providers::settings::SettingProto* dns_specifier);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Private)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* dns_mode_;
  ::android::providers::settings::SettingProto* dns_specifier_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Selinux :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Selinux) */ {
 public:
  GlobalSettingsProto_Selinux();
  virtual ~GlobalSettingsProto_Selinux();

  GlobalSettingsProto_Selinux(const GlobalSettingsProto_Selinux& from);
  GlobalSettingsProto_Selinux(GlobalSettingsProto_Selinux&& from) noexcept
    : GlobalSettingsProto_Selinux() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Selinux& operator=(const GlobalSettingsProto_Selinux& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Selinux& operator=(GlobalSettingsProto_Selinux&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Selinux& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Selinux* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Selinux*>(
               &_GlobalSettingsProto_Selinux_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GlobalSettingsProto_Selinux& a, GlobalSettingsProto_Selinux& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Selinux* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Selinux* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Selinux>(nullptr);
  }

  GlobalSettingsProto_Selinux* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Selinux>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Selinux& from);
  void MergeFrom(const GlobalSettingsProto_Selinux& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Selinux* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Selinux";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateContentUrlFieldNumber = 1,
    kUpdateMetadataUrlFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  bool has_update_content_url() const;
  void clear_update_content_url();
  const ::android::providers::settings::SettingProto& update_content_url() const;
  ::android::providers::settings::SettingProto* release_update_content_url();
  ::android::providers::settings::SettingProto* mutable_update_content_url();
  void set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url);

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  bool has_update_metadata_url() const;
  void clear_update_metadata_url();
  const ::android::providers::settings::SettingProto& update_metadata_url() const;
  ::android::providers::settings::SettingProto* release_update_metadata_url();
  ::android::providers::settings::SettingProto* mutable_update_metadata_url();
  void set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url);

  // optional .android.providers.settings.SettingProto status = 3 [(.android.privacy) = {
  bool has_status() const;
  void clear_status();
  const ::android::providers::settings::SettingProto& status() const;
  ::android::providers::settings::SettingProto* release_status();
  ::android::providers::settings::SettingProto* mutable_status();
  void set_allocated_status(::android::providers::settings::SettingProto* status);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Selinux)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* update_content_url_;
  ::android::providers::settings::SettingProto* update_metadata_url_;
  ::android::providers::settings::SettingProto* status_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_SmartSelection :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.SmartSelection) */ {
 public:
  GlobalSettingsProto_SmartSelection();
  virtual ~GlobalSettingsProto_SmartSelection();

  GlobalSettingsProto_SmartSelection(const GlobalSettingsProto_SmartSelection& from);
  GlobalSettingsProto_SmartSelection(GlobalSettingsProto_SmartSelection&& from) noexcept
    : GlobalSettingsProto_SmartSelection() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_SmartSelection& operator=(const GlobalSettingsProto_SmartSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_SmartSelection& operator=(GlobalSettingsProto_SmartSelection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_SmartSelection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_SmartSelection* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_SmartSelection*>(
               &_GlobalSettingsProto_SmartSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GlobalSettingsProto_SmartSelection& a, GlobalSettingsProto_SmartSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_SmartSelection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_SmartSelection* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_SmartSelection>(nullptr);
  }

  GlobalSettingsProto_SmartSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_SmartSelection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_SmartSelection& from);
  void MergeFrom(const GlobalSettingsProto_SmartSelection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_SmartSelection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.SmartSelection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateContentUrlFieldNumber = 1,
    kUpdateMetadataUrlFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  bool has_update_content_url() const;
  void clear_update_content_url();
  const ::android::providers::settings::SettingProto& update_content_url() const;
  ::android::providers::settings::SettingProto* release_update_content_url();
  ::android::providers::settings::SettingProto* mutable_update_content_url();
  void set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url);

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  bool has_update_metadata_url() const;
  void clear_update_metadata_url();
  const ::android::providers::settings::SettingProto& update_metadata_url() const;
  ::android::providers::settings::SettingProto* release_update_metadata_url();
  ::android::providers::settings::SettingProto* mutable_update_metadata_url();
  void set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.SmartSelection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* update_content_url_;
  ::android::providers::settings::SettingProto* update_metadata_url_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Sms :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Sms) */ {
 public:
  GlobalSettingsProto_Sms();
  virtual ~GlobalSettingsProto_Sms();

  GlobalSettingsProto_Sms(const GlobalSettingsProto_Sms& from);
  GlobalSettingsProto_Sms(GlobalSettingsProto_Sms&& from) noexcept
    : GlobalSettingsProto_Sms() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Sms& operator=(const GlobalSettingsProto_Sms& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Sms& operator=(GlobalSettingsProto_Sms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Sms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Sms* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Sms*>(
               &_GlobalSettingsProto_Sms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GlobalSettingsProto_Sms& a, GlobalSettingsProto_Sms& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Sms* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Sms* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Sms>(nullptr);
  }

  GlobalSettingsProto_Sms* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Sms>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Sms& from);
  void MergeFrom(const GlobalSettingsProto_Sms& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Sms* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Sms";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutgoingCheckIntervalMsFieldNumber = 1,
    kOutgoingCheckMaxCountFieldNumber = 2,
    kShortCodeConfirmationFieldNumber = 3,
    kShortCodeRuleFieldNumber = 4,
    kShortCodesUpdateContentUrlFieldNumber = 5,
    kShortCodesUpdateMetadataUrlFieldNumber = 6,
    kAccessRestrictionEnabledFieldNumber = 7,
  };
  // optional .android.providers.settings.SettingProto outgoing_check_interval_ms = 1 [(.android.privacy) = {
  bool has_outgoing_check_interval_ms() const;
  void clear_outgoing_check_interval_ms();
  const ::android::providers::settings::SettingProto& outgoing_check_interval_ms() const;
  ::android::providers::settings::SettingProto* release_outgoing_check_interval_ms();
  ::android::providers::settings::SettingProto* mutable_outgoing_check_interval_ms();
  void set_allocated_outgoing_check_interval_ms(::android::providers::settings::SettingProto* outgoing_check_interval_ms);

  // optional .android.providers.settings.SettingProto outgoing_check_max_count = 2 [(.android.privacy) = {
  bool has_outgoing_check_max_count() const;
  void clear_outgoing_check_max_count();
  const ::android::providers::settings::SettingProto& outgoing_check_max_count() const;
  ::android::providers::settings::SettingProto* release_outgoing_check_max_count();
  ::android::providers::settings::SettingProto* mutable_outgoing_check_max_count();
  void set_allocated_outgoing_check_max_count(::android::providers::settings::SettingProto* outgoing_check_max_count);

  // optional .android.providers.settings.SettingProto short_code_confirmation = 3 [(.android.privacy) = {
  bool has_short_code_confirmation() const;
  void clear_short_code_confirmation();
  const ::android::providers::settings::SettingProto& short_code_confirmation() const;
  ::android::providers::settings::SettingProto* release_short_code_confirmation();
  ::android::providers::settings::SettingProto* mutable_short_code_confirmation();
  void set_allocated_short_code_confirmation(::android::providers::settings::SettingProto* short_code_confirmation);

  // optional .android.providers.settings.SettingProto short_code_rule = 4 [(.android.privacy) = {
  bool has_short_code_rule() const;
  void clear_short_code_rule();
  const ::android::providers::settings::SettingProto& short_code_rule() const;
  ::android::providers::settings::SettingProto* release_short_code_rule();
  ::android::providers::settings::SettingProto* mutable_short_code_rule();
  void set_allocated_short_code_rule(::android::providers::settings::SettingProto* short_code_rule);

  // optional .android.providers.settings.SettingProto short_codes_update_content_url = 5;
  bool has_short_codes_update_content_url() const;
  void clear_short_codes_update_content_url();
  const ::android::providers::settings::SettingProto& short_codes_update_content_url() const;
  ::android::providers::settings::SettingProto* release_short_codes_update_content_url();
  ::android::providers::settings::SettingProto* mutable_short_codes_update_content_url();
  void set_allocated_short_codes_update_content_url(::android::providers::settings::SettingProto* short_codes_update_content_url);

  // optional .android.providers.settings.SettingProto short_codes_update_metadata_url = 6;
  bool has_short_codes_update_metadata_url() const;
  void clear_short_codes_update_metadata_url();
  const ::android::providers::settings::SettingProto& short_codes_update_metadata_url() const;
  ::android::providers::settings::SettingProto* release_short_codes_update_metadata_url();
  ::android::providers::settings::SettingProto* mutable_short_codes_update_metadata_url();
  void set_allocated_short_codes_update_metadata_url(::android::providers::settings::SettingProto* short_codes_update_metadata_url);

  // optional .android.providers.settings.SettingProto access_restriction_enabled = 7 [(.android.privacy) = {
  bool has_access_restriction_enabled() const;
  void clear_access_restriction_enabled();
  const ::android::providers::settings::SettingProto& access_restriction_enabled() const;
  ::android::providers::settings::SettingProto* release_access_restriction_enabled();
  ::android::providers::settings::SettingProto* mutable_access_restriction_enabled();
  void set_allocated_access_restriction_enabled(::android::providers::settings::SettingProto* access_restriction_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Sms)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* outgoing_check_interval_ms_;
  ::android::providers::settings::SettingProto* outgoing_check_max_count_;
  ::android::providers::settings::SettingProto* short_code_confirmation_;
  ::android::providers::settings::SettingProto* short_code_rule_;
  ::android::providers::settings::SettingProto* short_codes_update_content_url_;
  ::android::providers::settings::SettingProto* short_codes_update_metadata_url_;
  ::android::providers::settings::SettingProto* access_restriction_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Sounds :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Sounds) */ {
 public:
  GlobalSettingsProto_Sounds();
  virtual ~GlobalSettingsProto_Sounds();

  GlobalSettingsProto_Sounds(const GlobalSettingsProto_Sounds& from);
  GlobalSettingsProto_Sounds(GlobalSettingsProto_Sounds&& from) noexcept
    : GlobalSettingsProto_Sounds() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Sounds& operator=(const GlobalSettingsProto_Sounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Sounds& operator=(GlobalSettingsProto_Sounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Sounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Sounds* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Sounds*>(
               &_GlobalSettingsProto_Sounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GlobalSettingsProto_Sounds& a, GlobalSettingsProto_Sounds& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Sounds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Sounds* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Sounds>(nullptr);
  }

  GlobalSettingsProto_Sounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Sounds>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Sounds& from);
  void MergeFrom(const GlobalSettingsProto_Sounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Sounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Sounds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarDockFieldNumber = 1,
    kCarUndockFieldNumber = 2,
    kChargingStartedFieldNumber = 4,
    kDeskDockFieldNumber = 5,
    kDeskUndockFieldNumber = 6,
    kDockSoundsEnabledFieldNumber = 7,
    kDockSoundsEnabledWhenAccessibilityFieldNumber = 8,
    kLockFieldNumber = 9,
    kLowBatteryFieldNumber = 10,
    kLowBatterySoundTimeoutFieldNumber = 11,
    kLowBatterySoundsEnabledFieldNumber = 12,
    kTrustedFieldNumber = 13,
    kUnlockFieldNumber = 14,
    kWirelessChargingStartedFieldNumber = 15,
  };
  // optional .android.providers.settings.SettingProto car_dock = 1;
  bool has_car_dock() const;
  void clear_car_dock();
  const ::android::providers::settings::SettingProto& car_dock() const;
  ::android::providers::settings::SettingProto* release_car_dock();
  ::android::providers::settings::SettingProto* mutable_car_dock();
  void set_allocated_car_dock(::android::providers::settings::SettingProto* car_dock);

  // optional .android.providers.settings.SettingProto car_undock = 2;
  bool has_car_undock() const;
  void clear_car_undock();
  const ::android::providers::settings::SettingProto& car_undock() const;
  ::android::providers::settings::SettingProto* release_car_undock();
  ::android::providers::settings::SettingProto* mutable_car_undock();
  void set_allocated_car_undock(::android::providers::settings::SettingProto* car_undock);

  // optional .android.providers.settings.SettingProto charging_started = 4;
  bool has_charging_started() const;
  void clear_charging_started();
  const ::android::providers::settings::SettingProto& charging_started() const;
  ::android::providers::settings::SettingProto* release_charging_started();
  ::android::providers::settings::SettingProto* mutable_charging_started();
  void set_allocated_charging_started(::android::providers::settings::SettingProto* charging_started);

  // optional .android.providers.settings.SettingProto desk_dock = 5;
  bool has_desk_dock() const;
  void clear_desk_dock();
  const ::android::providers::settings::SettingProto& desk_dock() const;
  ::android::providers::settings::SettingProto* release_desk_dock();
  ::android::providers::settings::SettingProto* mutable_desk_dock();
  void set_allocated_desk_dock(::android::providers::settings::SettingProto* desk_dock);

  // optional .android.providers.settings.SettingProto desk_undock = 6;
  bool has_desk_undock() const;
  void clear_desk_undock();
  const ::android::providers::settings::SettingProto& desk_undock() const;
  ::android::providers::settings::SettingProto* release_desk_undock();
  ::android::providers::settings::SettingProto* mutable_desk_undock();
  void set_allocated_desk_undock(::android::providers::settings::SettingProto* desk_undock);

  // optional .android.providers.settings.SettingProto dock_sounds_enabled = 7 [(.android.privacy) = {
  bool has_dock_sounds_enabled() const;
  void clear_dock_sounds_enabled();
  const ::android::providers::settings::SettingProto& dock_sounds_enabled() const;
  ::android::providers::settings::SettingProto* release_dock_sounds_enabled();
  ::android::providers::settings::SettingProto* mutable_dock_sounds_enabled();
  void set_allocated_dock_sounds_enabled(::android::providers::settings::SettingProto* dock_sounds_enabled);

  // optional .android.providers.settings.SettingProto dock_sounds_enabled_when_accessibility = 8 [(.android.privacy) = {
  bool has_dock_sounds_enabled_when_accessibility() const;
  void clear_dock_sounds_enabled_when_accessibility();
  const ::android::providers::settings::SettingProto& dock_sounds_enabled_when_accessibility() const;
  ::android::providers::settings::SettingProto* release_dock_sounds_enabled_when_accessibility();
  ::android::providers::settings::SettingProto* mutable_dock_sounds_enabled_when_accessibility();
  void set_allocated_dock_sounds_enabled_when_accessibility(::android::providers::settings::SettingProto* dock_sounds_enabled_when_accessibility);

  // optional .android.providers.settings.SettingProto lock = 9;
  bool has_lock() const;
  void clear_lock();
  const ::android::providers::settings::SettingProto& lock() const;
  ::android::providers::settings::SettingProto* release_lock();
  ::android::providers::settings::SettingProto* mutable_lock();
  void set_allocated_lock(::android::providers::settings::SettingProto* lock);

  // optional .android.providers.settings.SettingProto low_battery = 10;
  bool has_low_battery() const;
  void clear_low_battery();
  const ::android::providers::settings::SettingProto& low_battery() const;
  ::android::providers::settings::SettingProto* release_low_battery();
  ::android::providers::settings::SettingProto* mutable_low_battery();
  void set_allocated_low_battery(::android::providers::settings::SettingProto* low_battery);

  // optional .android.providers.settings.SettingProto low_battery_sound_timeout = 11 [(.android.privacy) = {
  bool has_low_battery_sound_timeout() const;
  void clear_low_battery_sound_timeout();
  const ::android::providers::settings::SettingProto& low_battery_sound_timeout() const;
  ::android::providers::settings::SettingProto* release_low_battery_sound_timeout();
  ::android::providers::settings::SettingProto* mutable_low_battery_sound_timeout();
  void set_allocated_low_battery_sound_timeout(::android::providers::settings::SettingProto* low_battery_sound_timeout);

  // optional .android.providers.settings.SettingProto low_battery_sounds_enabled = 12 [(.android.privacy) = {
  bool has_low_battery_sounds_enabled() const;
  void clear_low_battery_sounds_enabled();
  const ::android::providers::settings::SettingProto& low_battery_sounds_enabled() const;
  ::android::providers::settings::SettingProto* release_low_battery_sounds_enabled();
  ::android::providers::settings::SettingProto* mutable_low_battery_sounds_enabled();
  void set_allocated_low_battery_sounds_enabled(::android::providers::settings::SettingProto* low_battery_sounds_enabled);

  // optional .android.providers.settings.SettingProto trusted = 13;
  bool has_trusted() const;
  void clear_trusted();
  const ::android::providers::settings::SettingProto& trusted() const;
  ::android::providers::settings::SettingProto* release_trusted();
  ::android::providers::settings::SettingProto* mutable_trusted();
  void set_allocated_trusted(::android::providers::settings::SettingProto* trusted);

  // optional .android.providers.settings.SettingProto unlock = 14;
  bool has_unlock() const;
  void clear_unlock();
  const ::android::providers::settings::SettingProto& unlock() const;
  ::android::providers::settings::SettingProto* release_unlock();
  ::android::providers::settings::SettingProto* mutable_unlock();
  void set_allocated_unlock(::android::providers::settings::SettingProto* unlock);

  // optional .android.providers.settings.SettingProto wireless_charging_started = 15;
  bool has_wireless_charging_started() const;
  void clear_wireless_charging_started();
  const ::android::providers::settings::SettingProto& wireless_charging_started() const;
  ::android::providers::settings::SettingProto* release_wireless_charging_started();
  ::android::providers::settings::SettingProto* mutable_wireless_charging_started();
  void set_allocated_wireless_charging_started(::android::providers::settings::SettingProto* wireless_charging_started);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Sounds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* car_dock_;
  ::android::providers::settings::SettingProto* car_undock_;
  ::android::providers::settings::SettingProto* charging_started_;
  ::android::providers::settings::SettingProto* desk_dock_;
  ::android::providers::settings::SettingProto* desk_undock_;
  ::android::providers::settings::SettingProto* dock_sounds_enabled_;
  ::android::providers::settings::SettingProto* dock_sounds_enabled_when_accessibility_;
  ::android::providers::settings::SettingProto* lock_;
  ::android::providers::settings::SettingProto* low_battery_;
  ::android::providers::settings::SettingProto* low_battery_sound_timeout_;
  ::android::providers::settings::SettingProto* low_battery_sounds_enabled_;
  ::android::providers::settings::SettingProto* trusted_;
  ::android::providers::settings::SettingProto* unlock_;
  ::android::providers::settings::SettingProto* wireless_charging_started_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_SoundTrigger :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.SoundTrigger) */ {
 public:
  GlobalSettingsProto_SoundTrigger();
  virtual ~GlobalSettingsProto_SoundTrigger();

  GlobalSettingsProto_SoundTrigger(const GlobalSettingsProto_SoundTrigger& from);
  GlobalSettingsProto_SoundTrigger(GlobalSettingsProto_SoundTrigger&& from) noexcept
    : GlobalSettingsProto_SoundTrigger() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_SoundTrigger& operator=(const GlobalSettingsProto_SoundTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_SoundTrigger& operator=(GlobalSettingsProto_SoundTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_SoundTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_SoundTrigger* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_SoundTrigger*>(
               &_GlobalSettingsProto_SoundTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GlobalSettingsProto_SoundTrigger& a, GlobalSettingsProto_SoundTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_SoundTrigger* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_SoundTrigger* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_SoundTrigger>(nullptr);
  }

  GlobalSettingsProto_SoundTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_SoundTrigger>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_SoundTrigger& from);
  void MergeFrom(const GlobalSettingsProto_SoundTrigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_SoundTrigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.SoundTrigger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxSoundTriggerDetectionServiceOpsPerDayFieldNumber = 1,
    kDetectionServiceOpTimeoutMsFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto max_sound_trigger_detection_service_ops_per_day = 1 [(.android.privacy) = {
  bool has_max_sound_trigger_detection_service_ops_per_day() const;
  void clear_max_sound_trigger_detection_service_ops_per_day();
  const ::android::providers::settings::SettingProto& max_sound_trigger_detection_service_ops_per_day() const;
  ::android::providers::settings::SettingProto* release_max_sound_trigger_detection_service_ops_per_day();
  ::android::providers::settings::SettingProto* mutable_max_sound_trigger_detection_service_ops_per_day();
  void set_allocated_max_sound_trigger_detection_service_ops_per_day(::android::providers::settings::SettingProto* max_sound_trigger_detection_service_ops_per_day);

  // optional .android.providers.settings.SettingProto detection_service_op_timeout_ms = 2 [(.android.privacy) = {
  bool has_detection_service_op_timeout_ms() const;
  void clear_detection_service_op_timeout_ms();
  const ::android::providers::settings::SettingProto& detection_service_op_timeout_ms() const;
  ::android::providers::settings::SettingProto* release_detection_service_op_timeout_ms();
  ::android::providers::settings::SettingProto* mutable_detection_service_op_timeout_ms();
  void set_allocated_detection_service_op_timeout_ms(::android::providers::settings::SettingProto* detection_service_op_timeout_ms);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.SoundTrigger)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* max_sound_trigger_detection_service_ops_per_day_;
  ::android::providers::settings::SettingProto* detection_service_op_timeout_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Storage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Storage) */ {
 public:
  GlobalSettingsProto_Storage();
  virtual ~GlobalSettingsProto_Storage();

  GlobalSettingsProto_Storage(const GlobalSettingsProto_Storage& from);
  GlobalSettingsProto_Storage(GlobalSettingsProto_Storage&& from) noexcept
    : GlobalSettingsProto_Storage() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Storage& operator=(const GlobalSettingsProto_Storage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Storage& operator=(GlobalSettingsProto_Storage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Storage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Storage* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Storage*>(
               &_GlobalSettingsProto_Storage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GlobalSettingsProto_Storage& a, GlobalSettingsProto_Storage& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Storage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Storage* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Storage>(nullptr);
  }

  GlobalSettingsProto_Storage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Storage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Storage& from);
  void MergeFrom(const GlobalSettingsProto_Storage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Storage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Storage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBenchmarkIntervalFieldNumber = 1,
    kSettingsClobberThresholdFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto benchmark_interval = 1 [(.android.privacy) = {
  bool has_benchmark_interval() const;
  void clear_benchmark_interval();
  const ::android::providers::settings::SettingProto& benchmark_interval() const;
  ::android::providers::settings::SettingProto* release_benchmark_interval();
  ::android::providers::settings::SettingProto* mutable_benchmark_interval();
  void set_allocated_benchmark_interval(::android::providers::settings::SettingProto* benchmark_interval);

  // optional .android.providers.settings.SettingProto settings_clobber_threshold = 2 [(.android.privacy) = {
  bool has_settings_clobber_threshold() const;
  void clear_settings_clobber_threshold();
  const ::android::providers::settings::SettingProto& settings_clobber_threshold() const;
  ::android::providers::settings::SettingProto* release_settings_clobber_threshold();
  ::android::providers::settings::SettingProto* mutable_settings_clobber_threshold();
  void set_allocated_settings_clobber_threshold(::android::providers::settings::SettingProto* settings_clobber_threshold);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Storage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* benchmark_interval_;
  ::android::providers::settings::SettingProto* settings_clobber_threshold_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Sync :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Sync) */ {
 public:
  GlobalSettingsProto_Sync();
  virtual ~GlobalSettingsProto_Sync();

  GlobalSettingsProto_Sync(const GlobalSettingsProto_Sync& from);
  GlobalSettingsProto_Sync(GlobalSettingsProto_Sync&& from) noexcept
    : GlobalSettingsProto_Sync() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Sync& operator=(const GlobalSettingsProto_Sync& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Sync& operator=(GlobalSettingsProto_Sync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Sync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Sync* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Sync*>(
               &_GlobalSettingsProto_Sync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GlobalSettingsProto_Sync& a, GlobalSettingsProto_Sync& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Sync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Sync* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Sync>(nullptr);
  }

  GlobalSettingsProto_Sync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Sync>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Sync& from);
  void MergeFrom(const GlobalSettingsProto_Sync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Sync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Sync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxRetryDelayInSecondsFieldNumber = 1,
    kManagerConstantsFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto max_retry_delay_in_seconds = 1 [(.android.privacy) = {
  bool has_max_retry_delay_in_seconds() const;
  void clear_max_retry_delay_in_seconds();
  const ::android::providers::settings::SettingProto& max_retry_delay_in_seconds() const;
  ::android::providers::settings::SettingProto* release_max_retry_delay_in_seconds();
  ::android::providers::settings::SettingProto* mutable_max_retry_delay_in_seconds();
  void set_allocated_max_retry_delay_in_seconds(::android::providers::settings::SettingProto* max_retry_delay_in_seconds);

  // optional .android.providers.settings.SettingProto manager_constants = 2;
  bool has_manager_constants() const;
  void clear_manager_constants();
  const ::android::providers::settings::SettingProto& manager_constants() const;
  ::android::providers::settings::SettingProto* release_manager_constants();
  ::android::providers::settings::SettingProto* mutable_manager_constants();
  void set_allocated_manager_constants(::android::providers::settings::SettingProto* manager_constants);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Sync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* max_retry_delay_in_seconds_;
  ::android::providers::settings::SettingProto* manager_constants_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Sys :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Sys) */ {
 public:
  GlobalSettingsProto_Sys();
  virtual ~GlobalSettingsProto_Sys();

  GlobalSettingsProto_Sys(const GlobalSettingsProto_Sys& from);
  GlobalSettingsProto_Sys(GlobalSettingsProto_Sys&& from) noexcept
    : GlobalSettingsProto_Sys() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Sys& operator=(const GlobalSettingsProto_Sys& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Sys& operator=(GlobalSettingsProto_Sys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Sys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Sys* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Sys*>(
               &_GlobalSettingsProto_Sys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GlobalSettingsProto_Sys& a, GlobalSettingsProto_Sys& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Sys* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Sys* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Sys>(nullptr);
  }

  GlobalSettingsProto_Sys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Sys>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Sys& from);
  void MergeFrom(const GlobalSettingsProto_Sys& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Sys* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Sys";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreeStorageLogIntervalMinsFieldNumber = 1,
    kStorageThresholdPercentageFieldNumber = 2,
    kStorageThresholdMaxBytesFieldNumber = 3,
    kStorageFullThresholdBytesFieldNumber = 4,
    kStorageCachePercentageFieldNumber = 5,
    kStorageCacheMaxBytesFieldNumber = 6,
    kUidcpupowerFieldNumber = 8,
  };
  // optional .android.providers.settings.SettingProto free_storage_log_interval_mins = 1 [(.android.privacy) = {
  bool has_free_storage_log_interval_mins() const;
  void clear_free_storage_log_interval_mins();
  const ::android::providers::settings::SettingProto& free_storage_log_interval_mins() const;
  ::android::providers::settings::SettingProto* release_free_storage_log_interval_mins();
  ::android::providers::settings::SettingProto* mutable_free_storage_log_interval_mins();
  void set_allocated_free_storage_log_interval_mins(::android::providers::settings::SettingProto* free_storage_log_interval_mins);

  // optional .android.providers.settings.SettingProto storage_threshold_percentage = 2 [(.android.privacy) = {
  bool has_storage_threshold_percentage() const;
  void clear_storage_threshold_percentage();
  const ::android::providers::settings::SettingProto& storage_threshold_percentage() const;
  ::android::providers::settings::SettingProto* release_storage_threshold_percentage();
  ::android::providers::settings::SettingProto* mutable_storage_threshold_percentage();
  void set_allocated_storage_threshold_percentage(::android::providers::settings::SettingProto* storage_threshold_percentage);

  // optional .android.providers.settings.SettingProto storage_threshold_max_bytes = 3 [(.android.privacy) = {
  bool has_storage_threshold_max_bytes() const;
  void clear_storage_threshold_max_bytes();
  const ::android::providers::settings::SettingProto& storage_threshold_max_bytes() const;
  ::android::providers::settings::SettingProto* release_storage_threshold_max_bytes();
  ::android::providers::settings::SettingProto* mutable_storage_threshold_max_bytes();
  void set_allocated_storage_threshold_max_bytes(::android::providers::settings::SettingProto* storage_threshold_max_bytes);

  // optional .android.providers.settings.SettingProto storage_full_threshold_bytes = 4 [(.android.privacy) = {
  bool has_storage_full_threshold_bytes() const;
  void clear_storage_full_threshold_bytes();
  const ::android::providers::settings::SettingProto& storage_full_threshold_bytes() const;
  ::android::providers::settings::SettingProto* release_storage_full_threshold_bytes();
  ::android::providers::settings::SettingProto* mutable_storage_full_threshold_bytes();
  void set_allocated_storage_full_threshold_bytes(::android::providers::settings::SettingProto* storage_full_threshold_bytes);

  // optional .android.providers.settings.SettingProto storage_cache_percentage = 5 [(.android.privacy) = {
  bool has_storage_cache_percentage() const;
  void clear_storage_cache_percentage();
  const ::android::providers::settings::SettingProto& storage_cache_percentage() const;
  ::android::providers::settings::SettingProto* release_storage_cache_percentage();
  ::android::providers::settings::SettingProto* mutable_storage_cache_percentage();
  void set_allocated_storage_cache_percentage(::android::providers::settings::SettingProto* storage_cache_percentage);

  // optional .android.providers.settings.SettingProto storage_cache_max_bytes = 6 [(.android.privacy) = {
  bool has_storage_cache_max_bytes() const;
  void clear_storage_cache_max_bytes();
  const ::android::providers::settings::SettingProto& storage_cache_max_bytes() const;
  ::android::providers::settings::SettingProto* release_storage_cache_max_bytes();
  ::android::providers::settings::SettingProto* mutable_storage_cache_max_bytes();
  void set_allocated_storage_cache_max_bytes(::android::providers::settings::SettingProto* storage_cache_max_bytes);

  // optional .android.providers.settings.SettingProto uidcpupower = 8 [(.android.privacy) = {
  bool has_uidcpupower() const;
  void clear_uidcpupower();
  const ::android::providers::settings::SettingProto& uidcpupower() const;
  ::android::providers::settings::SettingProto* release_uidcpupower();
  ::android::providers::settings::SettingProto* mutable_uidcpupower();
  void set_allocated_uidcpupower(::android::providers::settings::SettingProto* uidcpupower);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Sys)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* free_storage_log_interval_mins_;
  ::android::providers::settings::SettingProto* storage_threshold_percentage_;
  ::android::providers::settings::SettingProto* storage_threshold_max_bytes_;
  ::android::providers::settings::SettingProto* storage_full_threshold_bytes_;
  ::android::providers::settings::SettingProto* storage_cache_percentage_;
  ::android::providers::settings::SettingProto* storage_cache_max_bytes_;
  ::android::providers::settings::SettingProto* uidcpupower_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_TemperatureWarning :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.TemperatureWarning) */ {
 public:
  GlobalSettingsProto_TemperatureWarning();
  virtual ~GlobalSettingsProto_TemperatureWarning();

  GlobalSettingsProto_TemperatureWarning(const GlobalSettingsProto_TemperatureWarning& from);
  GlobalSettingsProto_TemperatureWarning(GlobalSettingsProto_TemperatureWarning&& from) noexcept
    : GlobalSettingsProto_TemperatureWarning() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_TemperatureWarning& operator=(const GlobalSettingsProto_TemperatureWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_TemperatureWarning& operator=(GlobalSettingsProto_TemperatureWarning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_TemperatureWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_TemperatureWarning* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_TemperatureWarning*>(
               &_GlobalSettingsProto_TemperatureWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GlobalSettingsProto_TemperatureWarning& a, GlobalSettingsProto_TemperatureWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_TemperatureWarning* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_TemperatureWarning* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_TemperatureWarning>(nullptr);
  }

  GlobalSettingsProto_TemperatureWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_TemperatureWarning>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_TemperatureWarning& from);
  void MergeFrom(const GlobalSettingsProto_TemperatureWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_TemperatureWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.TemperatureWarning";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowTemperatureWarningFieldNumber = 1,
    kWarningTemperatureLevelFieldNumber = 2,
    kShowUsbTemperatureAlarmFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto show_temperature_warning = 1 [(.android.privacy) = {
  bool has_show_temperature_warning() const;
  void clear_show_temperature_warning();
  const ::android::providers::settings::SettingProto& show_temperature_warning() const;
  ::android::providers::settings::SettingProto* release_show_temperature_warning();
  ::android::providers::settings::SettingProto* mutable_show_temperature_warning();
  void set_allocated_show_temperature_warning(::android::providers::settings::SettingProto* show_temperature_warning);

  // optional .android.providers.settings.SettingProto warning_temperature_level = 2 [(.android.privacy) = {
  bool has_warning_temperature_level() const;
  void clear_warning_temperature_level();
  const ::android::providers::settings::SettingProto& warning_temperature_level() const;
  ::android::providers::settings::SettingProto* release_warning_temperature_level();
  ::android::providers::settings::SettingProto* mutable_warning_temperature_level();
  void set_allocated_warning_temperature_level(::android::providers::settings::SettingProto* warning_temperature_level);

  // optional .android.providers.settings.SettingProto show_usb_temperature_alarm = 3 [(.android.privacy) = {
  bool has_show_usb_temperature_alarm() const;
  void clear_show_usb_temperature_alarm();
  const ::android::providers::settings::SettingProto& show_usb_temperature_alarm() const;
  ::android::providers::settings::SettingProto* release_show_usb_temperature_alarm();
  ::android::providers::settings::SettingProto* mutable_show_usb_temperature_alarm();
  void set_allocated_show_usb_temperature_alarm(::android::providers::settings::SettingProto* show_usb_temperature_alarm);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* show_temperature_warning_;
  ::android::providers::settings::SettingProto* warning_temperature_level_;
  ::android::providers::settings::SettingProto* show_usb_temperature_alarm_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Tether :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Tether) */ {
 public:
  GlobalSettingsProto_Tether();
  virtual ~GlobalSettingsProto_Tether();

  GlobalSettingsProto_Tether(const GlobalSettingsProto_Tether& from);
  GlobalSettingsProto_Tether(GlobalSettingsProto_Tether&& from) noexcept
    : GlobalSettingsProto_Tether() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Tether& operator=(const GlobalSettingsProto_Tether& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Tether& operator=(GlobalSettingsProto_Tether&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Tether& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Tether* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Tether*>(
               &_GlobalSettingsProto_Tether_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GlobalSettingsProto_Tether& a, GlobalSettingsProto_Tether& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Tether* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Tether* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Tether>(nullptr);
  }

  GlobalSettingsProto_Tether* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Tether>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Tether& from);
  void MergeFrom(const GlobalSettingsProto_Tether& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Tether* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Tether";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedFieldNumber = 1,
    kDunRequiredFieldNumber = 2,
    kDunApnFieldNumber = 3,
    kOffloadDisabledFieldNumber = 4,
    kTimeoutEnabledFieldNumber = 112,
  };
  // optional .android.providers.settings.SettingProto supported = 1 [(.android.privacy) = {
  bool has_supported() const;
  void clear_supported();
  const ::android::providers::settings::SettingProto& supported() const;
  ::android::providers::settings::SettingProto* release_supported();
  ::android::providers::settings::SettingProto* mutable_supported();
  void set_allocated_supported(::android::providers::settings::SettingProto* supported);

  // optional .android.providers.settings.SettingProto dun_required = 2 [(.android.privacy) = {
  bool has_dun_required() const;
  void clear_dun_required();
  const ::android::providers::settings::SettingProto& dun_required() const;
  ::android::providers::settings::SettingProto* release_dun_required();
  ::android::providers::settings::SettingProto* mutable_dun_required();
  void set_allocated_dun_required(::android::providers::settings::SettingProto* dun_required);

  // optional .android.providers.settings.SettingProto dun_apn = 3;
  bool has_dun_apn() const;
  void clear_dun_apn();
  const ::android::providers::settings::SettingProto& dun_apn() const;
  ::android::providers::settings::SettingProto* release_dun_apn();
  ::android::providers::settings::SettingProto* mutable_dun_apn();
  void set_allocated_dun_apn(::android::providers::settings::SettingProto* dun_apn);

  // optional .android.providers.settings.SettingProto offload_disabled = 4 [(.android.privacy) = {
  bool has_offload_disabled() const;
  void clear_offload_disabled();
  const ::android::providers::settings::SettingProto& offload_disabled() const;
  ::android::providers::settings::SettingProto* release_offload_disabled();
  ::android::providers::settings::SettingProto* mutable_offload_disabled();
  void set_allocated_offload_disabled(::android::providers::settings::SettingProto* offload_disabled);

  // optional .android.providers.settings.SettingProto timeout_enabled = 112 [(.android.privacy) = {
  bool has_timeout_enabled() const;
  void clear_timeout_enabled();
  const ::android::providers::settings::SettingProto& timeout_enabled() const;
  ::android::providers::settings::SettingProto* release_timeout_enabled();
  ::android::providers::settings::SettingProto* mutable_timeout_enabled();
  void set_allocated_timeout_enabled(::android::providers::settings::SettingProto* timeout_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Tether)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* supported_;
  ::android::providers::settings::SettingProto* dun_required_;
  ::android::providers::settings::SettingProto* dun_apn_;
  ::android::providers::settings::SettingProto* offload_disabled_;
  ::android::providers::settings::SettingProto* timeout_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Tzinfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Tzinfo) */ {
 public:
  GlobalSettingsProto_Tzinfo();
  virtual ~GlobalSettingsProto_Tzinfo();

  GlobalSettingsProto_Tzinfo(const GlobalSettingsProto_Tzinfo& from);
  GlobalSettingsProto_Tzinfo(GlobalSettingsProto_Tzinfo&& from) noexcept
    : GlobalSettingsProto_Tzinfo() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Tzinfo& operator=(const GlobalSettingsProto_Tzinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Tzinfo& operator=(GlobalSettingsProto_Tzinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Tzinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Tzinfo* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Tzinfo*>(
               &_GlobalSettingsProto_Tzinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GlobalSettingsProto_Tzinfo& a, GlobalSettingsProto_Tzinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Tzinfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Tzinfo* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Tzinfo>(nullptr);
  }

  GlobalSettingsProto_Tzinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Tzinfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Tzinfo& from);
  void MergeFrom(const GlobalSettingsProto_Tzinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Tzinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Tzinfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateContentUrlFieldNumber = 1,
    kUpdateMetadataUrlFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  bool has_update_content_url() const;
  void clear_update_content_url();
  const ::android::providers::settings::SettingProto& update_content_url() const;
  ::android::providers::settings::SettingProto* release_update_content_url();
  ::android::providers::settings::SettingProto* mutable_update_content_url();
  void set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url);

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  bool has_update_metadata_url() const;
  void clear_update_metadata_url();
  const ::android::providers::settings::SettingProto& update_metadata_url() const;
  ::android::providers::settings::SettingProto* release_update_metadata_url();
  ::android::providers::settings::SettingProto* mutable_update_metadata_url();
  void set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Tzinfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* update_content_url_;
  ::android::providers::settings::SettingProto* update_metadata_url_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Webview :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Webview) */ {
 public:
  GlobalSettingsProto_Webview();
  virtual ~GlobalSettingsProto_Webview();

  GlobalSettingsProto_Webview(const GlobalSettingsProto_Webview& from);
  GlobalSettingsProto_Webview(GlobalSettingsProto_Webview&& from) noexcept
    : GlobalSettingsProto_Webview() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Webview& operator=(const GlobalSettingsProto_Webview& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Webview& operator=(GlobalSettingsProto_Webview&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Webview& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Webview* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Webview*>(
               &_GlobalSettingsProto_Webview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GlobalSettingsProto_Webview& a, GlobalSettingsProto_Webview& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Webview* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Webview* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Webview>(nullptr);
  }

  GlobalSettingsProto_Webview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Webview>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Webview& from);
  void MergeFrom(const GlobalSettingsProto_Webview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Webview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Webview";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataReductionProxyKeyFieldNumber = 1,
    kFallbackLogicEnabledFieldNumber = 2,
    kProviderFieldNumber = 3,
    kMultiprocessFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto data_reduction_proxy_key = 1;
  bool has_data_reduction_proxy_key() const;
  void clear_data_reduction_proxy_key();
  const ::android::providers::settings::SettingProto& data_reduction_proxy_key() const;
  ::android::providers::settings::SettingProto* release_data_reduction_proxy_key();
  ::android::providers::settings::SettingProto* mutable_data_reduction_proxy_key();
  void set_allocated_data_reduction_proxy_key(::android::providers::settings::SettingProto* data_reduction_proxy_key);

  // optional .android.providers.settings.SettingProto fallback_logic_enabled = 2 [(.android.privacy) = {
  bool has_fallback_logic_enabled() const;
  void clear_fallback_logic_enabled();
  const ::android::providers::settings::SettingProto& fallback_logic_enabled() const;
  ::android::providers::settings::SettingProto* release_fallback_logic_enabled();
  ::android::providers::settings::SettingProto* mutable_fallback_logic_enabled();
  void set_allocated_fallback_logic_enabled(::android::providers::settings::SettingProto* fallback_logic_enabled);

  // optional .android.providers.settings.SettingProto provider = 3 [(.android.privacy) = {
  bool has_provider() const;
  void clear_provider();
  const ::android::providers::settings::SettingProto& provider() const;
  ::android::providers::settings::SettingProto* release_provider();
  ::android::providers::settings::SettingProto* mutable_provider();
  void set_allocated_provider(::android::providers::settings::SettingProto* provider);

  // optional .android.providers.settings.SettingProto multiprocess = 4 [(.android.privacy) = {
  bool has_multiprocess() const;
  void clear_multiprocess();
  const ::android::providers::settings::SettingProto& multiprocess() const;
  ::android::providers::settings::SettingProto* release_multiprocess();
  ::android::providers::settings::SettingProto* mutable_multiprocess();
  void set_allocated_multiprocess(::android::providers::settings::SettingProto* multiprocess);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Webview)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* data_reduction_proxy_key_;
  ::android::providers::settings::SettingProto* fallback_logic_enabled_;
  ::android::providers::settings::SettingProto* provider_;
  ::android::providers::settings::SettingProto* multiprocess_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Wfc :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Wfc) */ {
 public:
  GlobalSettingsProto_Wfc();
  virtual ~GlobalSettingsProto_Wfc();

  GlobalSettingsProto_Wfc(const GlobalSettingsProto_Wfc& from);
  GlobalSettingsProto_Wfc(GlobalSettingsProto_Wfc&& from) noexcept
    : GlobalSettingsProto_Wfc() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Wfc& operator=(const GlobalSettingsProto_Wfc& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Wfc& operator=(GlobalSettingsProto_Wfc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Wfc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Wfc* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Wfc*>(
               &_GlobalSettingsProto_Wfc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GlobalSettingsProto_Wfc& a, GlobalSettingsProto_Wfc& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Wfc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Wfc* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Wfc>(nullptr);
  }

  GlobalSettingsProto_Wfc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Wfc>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Wfc& from);
  void MergeFrom(const GlobalSettingsProto_Wfc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Wfc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Wfc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImsEnabledFieldNumber = 1,
    kImsModeFieldNumber = 2,
    kImsRoamingModeFieldNumber = 3,
    kImsRoamingEnabledFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto ims_enabled = 1 [(.android.privacy) = {
  bool has_ims_enabled() const;
  void clear_ims_enabled();
  const ::android::providers::settings::SettingProto& ims_enabled() const;
  ::android::providers::settings::SettingProto* release_ims_enabled();
  ::android::providers::settings::SettingProto* mutable_ims_enabled();
  void set_allocated_ims_enabled(::android::providers::settings::SettingProto* ims_enabled);

  // optional .android.providers.settings.SettingProto ims_mode = 2 [(.android.privacy) = {
  bool has_ims_mode() const;
  void clear_ims_mode();
  const ::android::providers::settings::SettingProto& ims_mode() const;
  ::android::providers::settings::SettingProto* release_ims_mode();
  ::android::providers::settings::SettingProto* mutable_ims_mode();
  void set_allocated_ims_mode(::android::providers::settings::SettingProto* ims_mode);

  // optional .android.providers.settings.SettingProto ims_roaming_mode = 3 [(.android.privacy) = {
  bool has_ims_roaming_mode() const;
  void clear_ims_roaming_mode();
  const ::android::providers::settings::SettingProto& ims_roaming_mode() const;
  ::android::providers::settings::SettingProto* release_ims_roaming_mode();
  ::android::providers::settings::SettingProto* mutable_ims_roaming_mode();
  void set_allocated_ims_roaming_mode(::android::providers::settings::SettingProto* ims_roaming_mode);

  // optional .android.providers.settings.SettingProto ims_roaming_enabled = 4 [(.android.privacy) = {
  bool has_ims_roaming_enabled() const;
  void clear_ims_roaming_enabled();
  const ::android::providers::settings::SettingProto& ims_roaming_enabled() const;
  ::android::providers::settings::SettingProto* release_ims_roaming_enabled();
  ::android::providers::settings::SettingProto* mutable_ims_roaming_enabled();
  void set_allocated_ims_roaming_enabled(::android::providers::settings::SettingProto* ims_roaming_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Wfc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* ims_enabled_;
  ::android::providers::settings::SettingProto* ims_mode_;
  ::android::providers::settings::SettingProto* ims_roaming_mode_;
  ::android::providers::settings::SettingProto* ims_roaming_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Wifi :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Wifi) */ {
 public:
  GlobalSettingsProto_Wifi();
  virtual ~GlobalSettingsProto_Wifi();

  GlobalSettingsProto_Wifi(const GlobalSettingsProto_Wifi& from);
  GlobalSettingsProto_Wifi(GlobalSettingsProto_Wifi&& from) noexcept
    : GlobalSettingsProto_Wifi() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Wifi& operator=(const GlobalSettingsProto_Wifi& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Wifi& operator=(GlobalSettingsProto_Wifi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Wifi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Wifi* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Wifi*>(
               &_GlobalSettingsProto_Wifi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GlobalSettingsProto_Wifi& a, GlobalSettingsProto_Wifi& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Wifi* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Wifi* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Wifi>(nullptr);
  }

  GlobalSettingsProto_Wifi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Wifi>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Wifi& from);
  void MergeFrom(const GlobalSettingsProto_Wifi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Wifi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Wifi";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSleepPolicyFieldNumber = 1,
    kBadgingThresholdsFieldNumber = 2,
    kDisplayOnFieldNumber = 3,
    kDisplayCertificationOnFieldNumber = 4,
    kDisplayWpsConfigFieldNumber = 5,
    kNetworksAvailableNotificationOnFieldNumber = 6,
    kNetworksAvailableRepeatDelayFieldNumber = 8,
    kCountryCodeFieldNumber = 9,
    kFrameworkScanIntervalMsFieldNumber = 10,
    kIdleMsFieldNumber = 11,
    kNumOpenNetworksKeptFieldNumber = 12,
    kOnFieldNumber = 13,
    kScanAlwaysAvailableFieldNumber = 14,
    kWakeupEnabledFieldNumber = 15,
    kSavedStateFieldNumber = 16,
    kSupplicantScanIntervalMsFieldNumber = 17,
    kEnhancedAutoJoinFieldNumber = 18,
    kNetworkShowRssiFieldNumber = 19,
    kScanIntervalWhenP2PConnectedMsFieldNumber = 20,
    kWatchdogOnFieldNumber = 21,
    kWatchdogPoorNetworkTestEnabledFieldNumber = 22,
    kSuspendOptimizationsEnabledFieldNumber = 23,
    kVerboseLoggingEnabledFieldNumber = 24,
    kMaxDhcpRetryCountFieldNumber = 26,
    kMobileDataTransitionWakelockTimeoutMsFieldNumber = 27,
    kDeviceOwnerConfigsLockdownFieldNumber = 28,
    kFrequencyBandFieldNumber = 29,
    kP2PDeviceNameFieldNumber = 30,
    kEphemeralOutOfRangeTimeoutMsFieldNumber = 32,
    kOnWhenProxyDisconnectedFieldNumber = 33,
    kBounceDelayOverrideMsFieldNumber = 34,
  };
  // optional .android.providers.settings.SettingProto sleep_policy = 1 [(.android.privacy) = {
  bool has_sleep_policy() const;
  void clear_sleep_policy();
  const ::android::providers::settings::SettingProto& sleep_policy() const;
  ::android::providers::settings::SettingProto* release_sleep_policy();
  ::android::providers::settings::SettingProto* mutable_sleep_policy();
  void set_allocated_sleep_policy(::android::providers::settings::SettingProto* sleep_policy);

  // optional .android.providers.settings.SettingProto badging_thresholds = 2 [(.android.privacy) = {
  bool has_badging_thresholds() const;
  void clear_badging_thresholds();
  const ::android::providers::settings::SettingProto& badging_thresholds() const;
  ::android::providers::settings::SettingProto* release_badging_thresholds();
  ::android::providers::settings::SettingProto* mutable_badging_thresholds();
  void set_allocated_badging_thresholds(::android::providers::settings::SettingProto* badging_thresholds);

  // optional .android.providers.settings.SettingProto display_on = 3 [(.android.privacy) = {
  bool has_display_on() const;
  void clear_display_on();
  const ::android::providers::settings::SettingProto& display_on() const;
  ::android::providers::settings::SettingProto* release_display_on();
  ::android::providers::settings::SettingProto* mutable_display_on();
  void set_allocated_display_on(::android::providers::settings::SettingProto* display_on);

  // optional .android.providers.settings.SettingProto display_certification_on = 4 [(.android.privacy) = {
  bool has_display_certification_on() const;
  void clear_display_certification_on();
  const ::android::providers::settings::SettingProto& display_certification_on() const;
  ::android::providers::settings::SettingProto* release_display_certification_on();
  ::android::providers::settings::SettingProto* mutable_display_certification_on();
  void set_allocated_display_certification_on(::android::providers::settings::SettingProto* display_certification_on);

  // optional .android.providers.settings.SettingProto display_wps_config = 5 [(.android.privacy) = {
  bool has_display_wps_config() const;
  void clear_display_wps_config();
  const ::android::providers::settings::SettingProto& display_wps_config() const;
  ::android::providers::settings::SettingProto* release_display_wps_config();
  ::android::providers::settings::SettingProto* mutable_display_wps_config();
  void set_allocated_display_wps_config(::android::providers::settings::SettingProto* display_wps_config);

  // optional .android.providers.settings.SettingProto networks_available_notification_on = 6 [(.android.privacy) = {
  bool has_networks_available_notification_on() const;
  void clear_networks_available_notification_on();
  const ::android::providers::settings::SettingProto& networks_available_notification_on() const;
  ::android::providers::settings::SettingProto* release_networks_available_notification_on();
  ::android::providers::settings::SettingProto* mutable_networks_available_notification_on();
  void set_allocated_networks_available_notification_on(::android::providers::settings::SettingProto* networks_available_notification_on);

  // optional .android.providers.settings.SettingProto networks_available_repeat_delay = 8 [(.android.privacy) = {
  bool has_networks_available_repeat_delay() const;
  void clear_networks_available_repeat_delay();
  const ::android::providers::settings::SettingProto& networks_available_repeat_delay() const;
  ::android::providers::settings::SettingProto* release_networks_available_repeat_delay();
  ::android::providers::settings::SettingProto* mutable_networks_available_repeat_delay();
  void set_allocated_networks_available_repeat_delay(::android::providers::settings::SettingProto* networks_available_repeat_delay);

  // optional .android.providers.settings.SettingProto country_code = 9;
  bool has_country_code() const;
  void clear_country_code();
  const ::android::providers::settings::SettingProto& country_code() const;
  ::android::providers::settings::SettingProto* release_country_code();
  ::android::providers::settings::SettingProto* mutable_country_code();
  void set_allocated_country_code(::android::providers::settings::SettingProto* country_code);

  // optional .android.providers.settings.SettingProto framework_scan_interval_ms = 10 [(.android.privacy) = {
  bool has_framework_scan_interval_ms() const;
  void clear_framework_scan_interval_ms();
  const ::android::providers::settings::SettingProto& framework_scan_interval_ms() const;
  ::android::providers::settings::SettingProto* release_framework_scan_interval_ms();
  ::android::providers::settings::SettingProto* mutable_framework_scan_interval_ms();
  void set_allocated_framework_scan_interval_ms(::android::providers::settings::SettingProto* framework_scan_interval_ms);

  // optional .android.providers.settings.SettingProto idle_ms = 11 [(.android.privacy) = {
  bool has_idle_ms() const;
  void clear_idle_ms();
  const ::android::providers::settings::SettingProto& idle_ms() const;
  ::android::providers::settings::SettingProto* release_idle_ms();
  ::android::providers::settings::SettingProto* mutable_idle_ms();
  void set_allocated_idle_ms(::android::providers::settings::SettingProto* idle_ms);

  // optional .android.providers.settings.SettingProto num_open_networks_kept = 12 [(.android.privacy) = {
  bool has_num_open_networks_kept() const;
  void clear_num_open_networks_kept();
  const ::android::providers::settings::SettingProto& num_open_networks_kept() const;
  ::android::providers::settings::SettingProto* release_num_open_networks_kept();
  ::android::providers::settings::SettingProto* mutable_num_open_networks_kept();
  void set_allocated_num_open_networks_kept(::android::providers::settings::SettingProto* num_open_networks_kept);

  // optional .android.providers.settings.SettingProto on = 13 [(.android.privacy) = {
  bool has_on() const;
  void clear_on();
  const ::android::providers::settings::SettingProto& on() const;
  ::android::providers::settings::SettingProto* release_on();
  ::android::providers::settings::SettingProto* mutable_on();
  void set_allocated_on(::android::providers::settings::SettingProto* on);

  // optional .android.providers.settings.SettingProto scan_always_available = 14 [(.android.privacy) = {
  bool has_scan_always_available() const;
  void clear_scan_always_available();
  const ::android::providers::settings::SettingProto& scan_always_available() const;
  ::android::providers::settings::SettingProto* release_scan_always_available();
  ::android::providers::settings::SettingProto* mutable_scan_always_available();
  void set_allocated_scan_always_available(::android::providers::settings::SettingProto* scan_always_available);

  // optional .android.providers.settings.SettingProto wakeup_enabled = 15 [(.android.privacy) = {
  bool has_wakeup_enabled() const;
  void clear_wakeup_enabled();
  const ::android::providers::settings::SettingProto& wakeup_enabled() const;
  ::android::providers::settings::SettingProto* release_wakeup_enabled();
  ::android::providers::settings::SettingProto* mutable_wakeup_enabled();
  void set_allocated_wakeup_enabled(::android::providers::settings::SettingProto* wakeup_enabled);

  // optional .android.providers.settings.SettingProto saved_state = 16 [(.android.privacy) = {
  bool has_saved_state() const;
  void clear_saved_state();
  const ::android::providers::settings::SettingProto& saved_state() const;
  ::android::providers::settings::SettingProto* release_saved_state();
  ::android::providers::settings::SettingProto* mutable_saved_state();
  void set_allocated_saved_state(::android::providers::settings::SettingProto* saved_state);

  // optional .android.providers.settings.SettingProto supplicant_scan_interval_ms = 17 [(.android.privacy) = {
  bool has_supplicant_scan_interval_ms() const;
  void clear_supplicant_scan_interval_ms();
  const ::android::providers::settings::SettingProto& supplicant_scan_interval_ms() const;
  ::android::providers::settings::SettingProto* release_supplicant_scan_interval_ms();
  ::android::providers::settings::SettingProto* mutable_supplicant_scan_interval_ms();
  void set_allocated_supplicant_scan_interval_ms(::android::providers::settings::SettingProto* supplicant_scan_interval_ms);

  // optional .android.providers.settings.SettingProto enhanced_auto_join = 18 [(.android.privacy) = {
  bool has_enhanced_auto_join() const;
  void clear_enhanced_auto_join();
  const ::android::providers::settings::SettingProto& enhanced_auto_join() const;
  ::android::providers::settings::SettingProto* release_enhanced_auto_join();
  ::android::providers::settings::SettingProto* mutable_enhanced_auto_join();
  void set_allocated_enhanced_auto_join(::android::providers::settings::SettingProto* enhanced_auto_join);

  // optional .android.providers.settings.SettingProto network_show_rssi = 19 [(.android.privacy) = {
  bool has_network_show_rssi() const;
  void clear_network_show_rssi();
  const ::android::providers::settings::SettingProto& network_show_rssi() const;
  ::android::providers::settings::SettingProto* release_network_show_rssi();
  ::android::providers::settings::SettingProto* mutable_network_show_rssi();
  void set_allocated_network_show_rssi(::android::providers::settings::SettingProto* network_show_rssi);

  // optional .android.providers.settings.SettingProto scan_interval_when_p2p_connected_ms = 20 [(.android.privacy) = {
  bool has_scan_interval_when_p2p_connected_ms() const;
  void clear_scan_interval_when_p2p_connected_ms();
  const ::android::providers::settings::SettingProto& scan_interval_when_p2p_connected_ms() const;
  ::android::providers::settings::SettingProto* release_scan_interval_when_p2p_connected_ms();
  ::android::providers::settings::SettingProto* mutable_scan_interval_when_p2p_connected_ms();
  void set_allocated_scan_interval_when_p2p_connected_ms(::android::providers::settings::SettingProto* scan_interval_when_p2p_connected_ms);

  // optional .android.providers.settings.SettingProto watchdog_on = 21 [(.android.privacy) = {
  bool has_watchdog_on() const;
  void clear_watchdog_on();
  const ::android::providers::settings::SettingProto& watchdog_on() const;
  ::android::providers::settings::SettingProto* release_watchdog_on();
  ::android::providers::settings::SettingProto* mutable_watchdog_on();
  void set_allocated_watchdog_on(::android::providers::settings::SettingProto* watchdog_on);

  // optional .android.providers.settings.SettingProto watchdog_poor_network_test_enabled = 22 [(.android.privacy) = {
  bool has_watchdog_poor_network_test_enabled() const;
  void clear_watchdog_poor_network_test_enabled();
  const ::android::providers::settings::SettingProto& watchdog_poor_network_test_enabled() const;
  ::android::providers::settings::SettingProto* release_watchdog_poor_network_test_enabled();
  ::android::providers::settings::SettingProto* mutable_watchdog_poor_network_test_enabled();
  void set_allocated_watchdog_poor_network_test_enabled(::android::providers::settings::SettingProto* watchdog_poor_network_test_enabled);

  // optional .android.providers.settings.SettingProto suspend_optimizations_enabled = 23 [(.android.privacy) = {
  bool has_suspend_optimizations_enabled() const;
  void clear_suspend_optimizations_enabled();
  const ::android::providers::settings::SettingProto& suspend_optimizations_enabled() const;
  ::android::providers::settings::SettingProto* release_suspend_optimizations_enabled();
  ::android::providers::settings::SettingProto* mutable_suspend_optimizations_enabled();
  void set_allocated_suspend_optimizations_enabled(::android::providers::settings::SettingProto* suspend_optimizations_enabled);

  // optional .android.providers.settings.SettingProto verbose_logging_enabled = 24 [(.android.privacy) = {
  bool has_verbose_logging_enabled() const;
  void clear_verbose_logging_enabled();
  const ::android::providers::settings::SettingProto& verbose_logging_enabled() const;
  ::android::providers::settings::SettingProto* release_verbose_logging_enabled();
  ::android::providers::settings::SettingProto* mutable_verbose_logging_enabled();
  void set_allocated_verbose_logging_enabled(::android::providers::settings::SettingProto* verbose_logging_enabled);

  // optional .android.providers.settings.SettingProto max_dhcp_retry_count = 26 [(.android.privacy) = {
  bool has_max_dhcp_retry_count() const;
  void clear_max_dhcp_retry_count();
  const ::android::providers::settings::SettingProto& max_dhcp_retry_count() const;
  ::android::providers::settings::SettingProto* release_max_dhcp_retry_count();
  ::android::providers::settings::SettingProto* mutable_max_dhcp_retry_count();
  void set_allocated_max_dhcp_retry_count(::android::providers::settings::SettingProto* max_dhcp_retry_count);

  // optional .android.providers.settings.SettingProto mobile_data_transition_wakelock_timeout_ms = 27 [(.android.privacy) = {
  bool has_mobile_data_transition_wakelock_timeout_ms() const;
  void clear_mobile_data_transition_wakelock_timeout_ms();
  const ::android::providers::settings::SettingProto& mobile_data_transition_wakelock_timeout_ms() const;
  ::android::providers::settings::SettingProto* release_mobile_data_transition_wakelock_timeout_ms();
  ::android::providers::settings::SettingProto* mutable_mobile_data_transition_wakelock_timeout_ms();
  void set_allocated_mobile_data_transition_wakelock_timeout_ms(::android::providers::settings::SettingProto* mobile_data_transition_wakelock_timeout_ms);

  // optional .android.providers.settings.SettingProto device_owner_configs_lockdown = 28 [(.android.privacy) = {
  bool has_device_owner_configs_lockdown() const;
  void clear_device_owner_configs_lockdown();
  const ::android::providers::settings::SettingProto& device_owner_configs_lockdown() const;
  ::android::providers::settings::SettingProto* release_device_owner_configs_lockdown();
  ::android::providers::settings::SettingProto* mutable_device_owner_configs_lockdown();
  void set_allocated_device_owner_configs_lockdown(::android::providers::settings::SettingProto* device_owner_configs_lockdown);

  // optional .android.providers.settings.SettingProto frequency_band = 29 [(.android.privacy) = {
  bool has_frequency_band() const;
  void clear_frequency_band();
  const ::android::providers::settings::SettingProto& frequency_band() const;
  ::android::providers::settings::SettingProto* release_frequency_band();
  ::android::providers::settings::SettingProto* mutable_frequency_band();
  void set_allocated_frequency_band(::android::providers::settings::SettingProto* frequency_band);

  // optional .android.providers.settings.SettingProto p2p_device_name = 30;
  bool has_p2p_device_name() const;
  void clear_p2p_device_name();
  const ::android::providers::settings::SettingProto& p2p_device_name() const;
  ::android::providers::settings::SettingProto* release_p2p_device_name();
  ::android::providers::settings::SettingProto* mutable_p2p_device_name();
  void set_allocated_p2p_device_name(::android::providers::settings::SettingProto* p2p_device_name);

  // optional .android.providers.settings.SettingProto ephemeral_out_of_range_timeout_ms = 32 [(.android.privacy) = {
  bool has_ephemeral_out_of_range_timeout_ms() const;
  void clear_ephemeral_out_of_range_timeout_ms();
  const ::android::providers::settings::SettingProto& ephemeral_out_of_range_timeout_ms() const;
  ::android::providers::settings::SettingProto* release_ephemeral_out_of_range_timeout_ms();
  ::android::providers::settings::SettingProto* mutable_ephemeral_out_of_range_timeout_ms();
  void set_allocated_ephemeral_out_of_range_timeout_ms(::android::providers::settings::SettingProto* ephemeral_out_of_range_timeout_ms);

  // optional .android.providers.settings.SettingProto on_when_proxy_disconnected = 33 [(.android.privacy) = {
  bool has_on_when_proxy_disconnected() const;
  void clear_on_when_proxy_disconnected();
  const ::android::providers::settings::SettingProto& on_when_proxy_disconnected() const;
  ::android::providers::settings::SettingProto* release_on_when_proxy_disconnected();
  ::android::providers::settings::SettingProto* mutable_on_when_proxy_disconnected();
  void set_allocated_on_when_proxy_disconnected(::android::providers::settings::SettingProto* on_when_proxy_disconnected);

  // optional .android.providers.settings.SettingProto bounce_delay_override_ms = 34 [(.android.privacy) = {
  bool has_bounce_delay_override_ms() const;
  void clear_bounce_delay_override_ms();
  const ::android::providers::settings::SettingProto& bounce_delay_override_ms() const;
  ::android::providers::settings::SettingProto* release_bounce_delay_override_ms();
  ::android::providers::settings::SettingProto* mutable_bounce_delay_override_ms();
  void set_allocated_bounce_delay_override_ms(::android::providers::settings::SettingProto* bounce_delay_override_ms);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Wifi)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* sleep_policy_;
  ::android::providers::settings::SettingProto* badging_thresholds_;
  ::android::providers::settings::SettingProto* display_on_;
  ::android::providers::settings::SettingProto* display_certification_on_;
  ::android::providers::settings::SettingProto* display_wps_config_;
  ::android::providers::settings::SettingProto* networks_available_notification_on_;
  ::android::providers::settings::SettingProto* networks_available_repeat_delay_;
  ::android::providers::settings::SettingProto* country_code_;
  ::android::providers::settings::SettingProto* framework_scan_interval_ms_;
  ::android::providers::settings::SettingProto* idle_ms_;
  ::android::providers::settings::SettingProto* num_open_networks_kept_;
  ::android::providers::settings::SettingProto* on_;
  ::android::providers::settings::SettingProto* scan_always_available_;
  ::android::providers::settings::SettingProto* wakeup_enabled_;
  ::android::providers::settings::SettingProto* saved_state_;
  ::android::providers::settings::SettingProto* supplicant_scan_interval_ms_;
  ::android::providers::settings::SettingProto* enhanced_auto_join_;
  ::android::providers::settings::SettingProto* network_show_rssi_;
  ::android::providers::settings::SettingProto* scan_interval_when_p2p_connected_ms_;
  ::android::providers::settings::SettingProto* watchdog_on_;
  ::android::providers::settings::SettingProto* watchdog_poor_network_test_enabled_;
  ::android::providers::settings::SettingProto* suspend_optimizations_enabled_;
  ::android::providers::settings::SettingProto* verbose_logging_enabled_;
  ::android::providers::settings::SettingProto* max_dhcp_retry_count_;
  ::android::providers::settings::SettingProto* mobile_data_transition_wakelock_timeout_ms_;
  ::android::providers::settings::SettingProto* device_owner_configs_lockdown_;
  ::android::providers::settings::SettingProto* frequency_band_;
  ::android::providers::settings::SettingProto* p2p_device_name_;
  ::android::providers::settings::SettingProto* ephemeral_out_of_range_timeout_ms_;
  ::android::providers::settings::SettingProto* on_when_proxy_disconnected_;
  ::android::providers::settings::SettingProto* bounce_delay_override_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto_Zen :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto.Zen) */ {
 public:
  GlobalSettingsProto_Zen();
  virtual ~GlobalSettingsProto_Zen();

  GlobalSettingsProto_Zen(const GlobalSettingsProto_Zen& from);
  GlobalSettingsProto_Zen(GlobalSettingsProto_Zen&& from) noexcept
    : GlobalSettingsProto_Zen() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto_Zen& operator=(const GlobalSettingsProto_Zen& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto_Zen& operator=(GlobalSettingsProto_Zen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto_Zen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto_Zen* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto_Zen*>(
               &_GlobalSettingsProto_Zen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GlobalSettingsProto_Zen& a, GlobalSettingsProto_Zen& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto_Zen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto_Zen* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto_Zen>(nullptr);
  }

  GlobalSettingsProto_Zen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto_Zen>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto_Zen& from);
  void MergeFrom(const GlobalSettingsProto_Zen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto_Zen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto.Zen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kModeRingerLevelFieldNumber = 2,
    kModeConfigEtagFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
  bool has_mode() const;
  void clear_mode();
  const ::android::providers::settings::SettingProto& mode() const;
  ::android::providers::settings::SettingProto* release_mode();
  ::android::providers::settings::SettingProto* mutable_mode();
  void set_allocated_mode(::android::providers::settings::SettingProto* mode);

  // optional .android.providers.settings.SettingProto mode_ringer_level = 2 [(.android.privacy) = {
  bool has_mode_ringer_level() const;
  void clear_mode_ringer_level();
  const ::android::providers::settings::SettingProto& mode_ringer_level() const;
  ::android::providers::settings::SettingProto* release_mode_ringer_level();
  ::android::providers::settings::SettingProto* mutable_mode_ringer_level();
  void set_allocated_mode_ringer_level(::android::providers::settings::SettingProto* mode_ringer_level);

  // optional .android.providers.settings.SettingProto mode_config_etag = 3;
  bool has_mode_config_etag() const;
  void clear_mode_config_etag();
  const ::android::providers::settings::SettingProto& mode_config_etag() const;
  ::android::providers::settings::SettingProto* release_mode_config_etag();
  ::android::providers::settings::SettingProto* mutable_mode_config_etag();
  void set_allocated_mode_config_etag(::android::providers::settings::SettingProto* mode_config_etag);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto.Zen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* mode_;
  ::android::providers::settings::SettingProto* mode_ringer_level_;
  ::android::providers::settings::SettingProto* mode_config_etag_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// -------------------------------------------------------------------

class GlobalSettingsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.GlobalSettingsProto) */ {
 public:
  GlobalSettingsProto();
  virtual ~GlobalSettingsProto();

  GlobalSettingsProto(const GlobalSettingsProto& from);
  GlobalSettingsProto(GlobalSettingsProto&& from) noexcept
    : GlobalSettingsProto() {
    *this = ::std::move(from);
  }

  inline GlobalSettingsProto& operator=(const GlobalSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalSettingsProto& operator=(GlobalSettingsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GlobalSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSettingsProto* internal_default_instance() {
    return reinterpret_cast<const GlobalSettingsProto*>(
               &_GlobalSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GlobalSettingsProto& a, GlobalSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalSettingsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalSettingsProto* New() const final {
    return CreateMaybeMessage<GlobalSettingsProto>(nullptr);
  }

  GlobalSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GlobalSettingsProto& from);
  void MergeFrom(const GlobalSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GlobalSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.GlobalSettingsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GlobalSettingsProto_AirplaneMode AirplaneMode;
  typedef GlobalSettingsProto_Anomaly Anomaly;
  typedef GlobalSettingsProto_ApnDb ApnDb;
  typedef GlobalSettingsProto_App App;
  typedef GlobalSettingsProto_Autofill Autofill;
  typedef GlobalSettingsProto_Backup Backup;
  typedef GlobalSettingsProto_Battery Battery;
  typedef GlobalSettingsProto_BleScan BleScan;
  typedef GlobalSettingsProto_Bluetooth Bluetooth;
  typedef GlobalSettingsProto_CaptivePortal CaptivePortal;
  typedef GlobalSettingsProto_Carrier Carrier;
  typedef GlobalSettingsProto_Cdma Cdma;
  typedef GlobalSettingsProto_CertPin CertPin;
  typedef GlobalSettingsProto_Connectivity Connectivity;
  typedef GlobalSettingsProto_Data Data;
  typedef GlobalSettingsProto_Database Database;
  typedef GlobalSettingsProto_DateTime DateTime;
  typedef GlobalSettingsProto_Debug Debug;
  typedef GlobalSettingsProto_Default Default;
  typedef GlobalSettingsProto_Development Development;
  typedef GlobalSettingsProto_Device Device;
  typedef GlobalSettingsProto_Display Display;
  typedef GlobalSettingsProto_DnsResolver DnsResolver;
  typedef GlobalSettingsProto_Download Download;
  typedef GlobalSettingsProto_Dropbox Dropbox;
  typedef GlobalSettingsProto_DynamicPowerSavings DynamicPowerSavings;
  typedef GlobalSettingsProto_Emergency Emergency;
  typedef GlobalSettingsProto_Enable Enable;
  typedef GlobalSettingsProto_Euicc Euicc;
  typedef GlobalSettingsProto_GlobalHttpProxy GlobalHttpProxy;
  typedef GlobalSettingsProto_Gpu Gpu;
  typedef GlobalSettingsProto_Hdmi Hdmi;
  typedef GlobalSettingsProto_InetCondition InetCondition;
  typedef GlobalSettingsProto_InstantApp InstantApp;
  typedef GlobalSettingsProto_IntentFirewall IntentFirewall;
  typedef GlobalSettingsProto_LangId LangId;
  typedef GlobalSettingsProto_Location Location;
  typedef GlobalSettingsProto_LowPowerMode LowPowerMode;
  typedef GlobalSettingsProto_Mhl Mhl;
  typedef GlobalSettingsProto_MobileData MobileData;
  typedef GlobalSettingsProto_MultiSim MultiSim;
  typedef GlobalSettingsProto_Netstats Netstats;
  typedef GlobalSettingsProto_Network Network;
  typedef GlobalSettingsProto_NitzUpdate NitzUpdate;
  typedef GlobalSettingsProto_Notification Notification;
  typedef GlobalSettingsProto_Ntp Ntp;
  typedef GlobalSettingsProto_UserAbsentSmallBattery UserAbsentSmallBattery;
  typedef GlobalSettingsProto_PackageVerifier PackageVerifier;
  typedef GlobalSettingsProto_PdpWatchdog PdpWatchdog;
  typedef GlobalSettingsProto_PrepaidSetup PrepaidSetup;
  typedef GlobalSettingsProto_Private Private;
  typedef GlobalSettingsProto_Selinux Selinux;
  typedef GlobalSettingsProto_SmartSelection SmartSelection;
  typedef GlobalSettingsProto_Sms Sms;
  typedef GlobalSettingsProto_Sounds Sounds;
  typedef GlobalSettingsProto_SoundTrigger SoundTrigger;
  typedef GlobalSettingsProto_Storage Storage;
  typedef GlobalSettingsProto_Sync Sync;
  typedef GlobalSettingsProto_Sys Sys;
  typedef GlobalSettingsProto_TemperatureWarning TemperatureWarning;
  typedef GlobalSettingsProto_Tether Tether;
  typedef GlobalSettingsProto_Tzinfo Tzinfo;
  typedef GlobalSettingsProto_Webview Webview;
  typedef GlobalSettingsProto_Wfc Wfc;
  typedef GlobalSettingsProto_Wifi Wifi;
  typedef GlobalSettingsProto_Zen Zen;

  // accessors -------------------------------------------------------

  enum : int {
    kHistoricalOperationsFieldNumber = 1,
    kErrorLogcatLinesFieldNumber = 51,
    kMaxErrorBytesFieldNumber = 151,
    kActivityManagerConstantsFieldNumber = 2,
    kAdbEnabledFieldNumber = 3,
    kAddUsersWhenLockedFieldNumber = 4,
    kAirplaneModeFieldNumber = 5,
    kAllowUserSwitchingWhenSystemUserLockedFieldNumber = 7,
    kAlwaysOnDisplayConstantsFieldNumber = 8,
    kAlwaysFinishActivitiesFieldNumber = 9,
    kAnimatorDurationScaleFieldNumber = 10,
    kAnomalyFieldNumber = 11,
    kApnDbFieldNumber = 12,
    kAppFieldNumber = 13,
    kAssistedGpsEnabledFieldNumber = 14,
    kAudioSafeVolumeStateFieldNumber = 15,
    kDateTimeFieldNumber = 16,
    kBatteryFieldNumber = 19,
    kBleScanFieldNumber = 20,
    kBluetoothFieldNumber = 21,
    kBootCountFieldNumber = 22,
    kBugreportInPowerMenuFieldNumber = 23,
    kCallAutoRetryFieldNumber = 24,
    kCaptivePortalFieldNumber = 25,
    kCarrierFieldNumber = 26,
    kCdmaFieldNumber = 27,
    kCellOnFieldNumber = 28,
    kCertPinFieldNumber = 29,
    kChainedBatteryAttributionEnabledFieldNumber = 30,
    kCompatibilityModeFieldNumber = 31,
    kConnectivityFieldNumber = 32,
    kContactMetadataSyncEnabledFieldNumber = 33,
    kContactsDatabaseWalEnabledFieldNumber = 34,
    kDataFieldNumber = 35,
    kDatabaseFieldNumber = 36,
    kDebugFieldNumber = 37,
    kDefaultFieldNumber = 38,
    kDevelopmentFieldNumber = 39,
    kDeviceFieldNumber = 40,
    kDiskFreeChangeReportingThresholdFieldNumber = 41,
    kDisplayFieldNumber = 42,
    kDnsResolverFieldNumber = 43,
    kDockAudioMediaEnabledFieldNumber = 44,
    kDownloadFieldNumber = 45,
    kDropboxFieldNumber = 46,
    kEmergencyFieldNumber = 47,
    kEnableFieldNumber = 48,
    kEncodedSurroundOutputFieldNumber = 49,
    kEnhanced4GModeEnabledFieldNumber = 50,
    kEuiccFieldNumber = 52,
    kFancyImeAnimationsFieldNumber = 53,
    kForceAllowOnExternalFieldNumber = 54,
    kFpsDivisorFieldNumber = 55,
    kFstrimMandatoryIntervalFieldNumber = 56,
    kGlobalHttpProxyFieldNumber = 57,
    kGprsRegisterCheckPeriodMsFieldNumber = 58,
    kGpuFieldNumber = 59,
    kHdmiFieldNumber = 60,
    kHeadsUpNotificationsEnabledFieldNumber = 61,
    kHiddenApiBlacklistExemptionsFieldNumber = 62,
    kInetConditionFieldNumber = 63,
    kInstantAppFieldNumber = 64,
    kIntentFirewallFieldNumber = 65,
    kKeepProfileInBackgroundFieldNumber = 67,
    kLangIdFieldNumber = 68,
    kLocationFieldNumber = 69,
    kLowPowerModeFieldNumber = 70,
    kLteServiceForcedFieldNumber = 71,
    kMdcInitialMaxRetryFieldNumber = 72,
    kMhlFieldNumber = 73,
    kMobileDataFieldNumber = 74,
    kModeRingerFieldNumber = 75,
    kMultiSimFieldNumber = 76,
    kNetstatsFieldNumber = 77,
    kNetworkFieldNumber = 78,
    kNewContactAggregatorFieldNumber = 79,
    kNightDisplayForcedAutoModeAvailableFieldNumber = 80,
    kNitzUpdateFieldNumber = 81,
    kNotificationFieldNumber = 82,
    kNsdOnFieldNumber = 83,
    kNtpFieldNumber = 84,
    kUserAbsentSmallBatteryFieldNumber = 85,
    kOtaDisableAutomaticUpdateFieldNumber = 86,
    kOverlayDisplayDevicesFieldNumber = 87,
    kOverrideSettingsProviderRestoreAnyVersionFieldNumber = 88,
    kPacChangeDelayFieldNumber = 89,
    kPackageVerifierFieldNumber = 90,
    kPdpWatchdogFieldNumber = 91,
    kPolicyControlFieldNumber = 92,
    kPowerManagerConstantsFieldNumber = 93,
    kPrepaidSetupFieldNumber = 95,
    kPrivateFieldNumber = 96,
    kProvisioningApnAlarmDelayInMsFieldNumber = 97,
    kReadExternalStorageEnforcedDefaultFieldNumber = 98,
    kRequirePasswordToDecryptFieldNumber = 99,
    kSafeBootDisallowedFieldNumber = 100,
    kSelinuxFieldNumber = 101,
    kSendActionAppErrorFieldNumber = 102,
    kSetInstallLocationFieldNumber = 103,
    kShortcutManagerConstantsFieldNumber = 104,
    kShowFirstCrashDialogFieldNumber = 105,
    kShowRestartInCrashDialogFieldNumber = 106,
    kShowMuteInCrashDialogFieldNumber = 107,
    kSmartSelectionFieldNumber = 108,
    kSmsFieldNumber = 109,
    kSoundsFieldNumber = 110,
    kSoundTriggerFieldNumber = 111,
    kSpeedLabelCacheEvictionAgeMsFieldNumber = 112,
    kSqliteCompatibilityWalFlagsFieldNumber = 113,
    kStayOnWhilePluggedInFieldNumber = 114,
    kStorageFieldNumber = 115,
    kSyncFieldNumber = 116,
    kSysFieldNumber = 117,
    kTcpDefaultInitRwndFieldNumber = 118,
    kTemperatureWarningFieldNumber = 119,
    kTetherFieldNumber = 120,
    kTextClassifierConstantsFieldNumber = 121,
    kTheaterModeOnFieldNumber = 122,
    kTimeOnlyModeConstantsFieldNumber = 123,
    kTransitionAnimationScaleFieldNumber = 124,
    kTzinfoFieldNumber = 125,
    kUnusedStaticSharedLibMinCachePeriodMsFieldNumber = 126,
    kUsbMassStorageEnabledFieldNumber = 127,
    kUseGoogleMailFieldNumber = 128,
    kUseOpenWifiPackageFieldNumber = 129,
    kVtImsEnabledFieldNumber = 130,
    kWaitForDebuggerFieldNumber = 131,
    kWebviewFieldNumber = 132,
    kWfcFieldNumber = 133,
    kWifiFieldNumber = 134,
    kWimaxNetworksAvailableNotificationOnFieldNumber = 135,
    kWindowAnimationScaleFieldNumber = 136,
    kWtfIsFatalFieldNumber = 137,
    kZenFieldNumber = 138,
    kZramEnabledFieldNumber = 139,
    kAutofillFieldNumber = 140,
    kShowHiddenLauncherIconAppsEnabledFieldNumber = 141,
    kShowNewAppInstalledNotificationEnabledFieldNumber = 142,
    kDynamicPowerSavingsFieldNumber = 143,
    kNativeFlagsHealthCheckEnabledFieldNumber = 144,
    kTextClassifierActionModelParamsFieldNumber = 145,
    kBackupFieldNumber = 146,
    kApplyRampingRingerFieldNumber = 147,
    kAppOpsConstantsFieldNumber = 148,
    kCachedAppsFreezerEnabledFieldNumber = 152,
    kNrNsaTrackingScreenOffModeFieldNumber = 153,
    kPowerButtonLongPressDurationMsFieldNumber = 154,
    kUwbEnabledFieldNumber = 155,
  };
  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  int historical_operations_size() const;
  void clear_historical_operations();
  ::android::providers::settings::SettingsOperationProto* mutable_historical_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >*
      mutable_historical_operations();
  const ::android::providers::settings::SettingsOperationProto& historical_operations(int index) const;
  ::android::providers::settings::SettingsOperationProto* add_historical_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >&
      historical_operations() const;

  // repeated .android.providers.settings.SettingProto error_logcat_lines = 51;
  int error_logcat_lines_size() const;
  void clear_error_logcat_lines();
  ::android::providers::settings::SettingProto* mutable_error_logcat_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_error_logcat_lines();
  const ::android::providers::settings::SettingProto& error_logcat_lines(int index) const;
  ::android::providers::settings::SettingProto* add_error_logcat_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      error_logcat_lines() const;

  // repeated .android.providers.settings.SettingProto max_error_bytes = 151;
  int max_error_bytes_size() const;
  void clear_max_error_bytes();
  ::android::providers::settings::SettingProto* mutable_max_error_bytes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_max_error_bytes();
  const ::android::providers::settings::SettingProto& max_error_bytes(int index) const;
  ::android::providers::settings::SettingProto* add_max_error_bytes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      max_error_bytes() const;

  // optional .android.providers.settings.SettingProto activity_manager_constants = 2;
  bool has_activity_manager_constants() const;
  void clear_activity_manager_constants();
  const ::android::providers::settings::SettingProto& activity_manager_constants() const;
  ::android::providers::settings::SettingProto* release_activity_manager_constants();
  ::android::providers::settings::SettingProto* mutable_activity_manager_constants();
  void set_allocated_activity_manager_constants(::android::providers::settings::SettingProto* activity_manager_constants);

  // optional .android.providers.settings.SettingProto adb_enabled = 3 [(.android.privacy) = {
  bool has_adb_enabled() const;
  void clear_adb_enabled();
  const ::android::providers::settings::SettingProto& adb_enabled() const;
  ::android::providers::settings::SettingProto* release_adb_enabled();
  ::android::providers::settings::SettingProto* mutable_adb_enabled();
  void set_allocated_adb_enabled(::android::providers::settings::SettingProto* adb_enabled);

  // optional .android.providers.settings.SettingProto add_users_when_locked = 4 [(.android.privacy) = {
  bool has_add_users_when_locked() const;
  void clear_add_users_when_locked();
  const ::android::providers::settings::SettingProto& add_users_when_locked() const;
  ::android::providers::settings::SettingProto* release_add_users_when_locked();
  ::android::providers::settings::SettingProto* mutable_add_users_when_locked();
  void set_allocated_add_users_when_locked(::android::providers::settings::SettingProto* add_users_when_locked);

  // optional .android.providers.settings.GlobalSettingsProto.AirplaneMode airplane_mode = 5;
  bool has_airplane_mode() const;
  void clear_airplane_mode();
  const ::android::providers::settings::GlobalSettingsProto_AirplaneMode& airplane_mode() const;
  ::android::providers::settings::GlobalSettingsProto_AirplaneMode* release_airplane_mode();
  ::android::providers::settings::GlobalSettingsProto_AirplaneMode* mutable_airplane_mode();
  void set_allocated_airplane_mode(::android::providers::settings::GlobalSettingsProto_AirplaneMode* airplane_mode);

  // optional .android.providers.settings.SettingProto allow_user_switching_when_system_user_locked = 7 [(.android.privacy) = {
  bool has_allow_user_switching_when_system_user_locked() const;
  void clear_allow_user_switching_when_system_user_locked();
  const ::android::providers::settings::SettingProto& allow_user_switching_when_system_user_locked() const;
  ::android::providers::settings::SettingProto* release_allow_user_switching_when_system_user_locked();
  ::android::providers::settings::SettingProto* mutable_allow_user_switching_when_system_user_locked();
  void set_allocated_allow_user_switching_when_system_user_locked(::android::providers::settings::SettingProto* allow_user_switching_when_system_user_locked);

  // optional .android.providers.settings.SettingProto always_on_display_constants = 8;
  bool has_always_on_display_constants() const;
  void clear_always_on_display_constants();
  const ::android::providers::settings::SettingProto& always_on_display_constants() const;
  ::android::providers::settings::SettingProto* release_always_on_display_constants();
  ::android::providers::settings::SettingProto* mutable_always_on_display_constants();
  void set_allocated_always_on_display_constants(::android::providers::settings::SettingProto* always_on_display_constants);

  // optional .android.providers.settings.SettingProto always_finish_activities = 9 [(.android.privacy) = {
  bool has_always_finish_activities() const;
  void clear_always_finish_activities();
  const ::android::providers::settings::SettingProto& always_finish_activities() const;
  ::android::providers::settings::SettingProto* release_always_finish_activities();
  ::android::providers::settings::SettingProto* mutable_always_finish_activities();
  void set_allocated_always_finish_activities(::android::providers::settings::SettingProto* always_finish_activities);

  // optional .android.providers.settings.SettingProto animator_duration_scale = 10 [(.android.privacy) = {
  bool has_animator_duration_scale() const;
  void clear_animator_duration_scale();
  const ::android::providers::settings::SettingProto& animator_duration_scale() const;
  ::android::providers::settings::SettingProto* release_animator_duration_scale();
  ::android::providers::settings::SettingProto* mutable_animator_duration_scale();
  void set_allocated_animator_duration_scale(::android::providers::settings::SettingProto* animator_duration_scale);

  // optional .android.providers.settings.GlobalSettingsProto.Anomaly anomaly = 11;
  bool has_anomaly() const;
  void clear_anomaly();
  const ::android::providers::settings::GlobalSettingsProto_Anomaly& anomaly() const;
  ::android::providers::settings::GlobalSettingsProto_Anomaly* release_anomaly();
  ::android::providers::settings::GlobalSettingsProto_Anomaly* mutable_anomaly();
  void set_allocated_anomaly(::android::providers::settings::GlobalSettingsProto_Anomaly* anomaly);

  // optional .android.providers.settings.GlobalSettingsProto.ApnDb apn_db = 12;
  bool has_apn_db() const;
  void clear_apn_db();
  const ::android::providers::settings::GlobalSettingsProto_ApnDb& apn_db() const;
  ::android::providers::settings::GlobalSettingsProto_ApnDb* release_apn_db();
  ::android::providers::settings::GlobalSettingsProto_ApnDb* mutable_apn_db();
  void set_allocated_apn_db(::android::providers::settings::GlobalSettingsProto_ApnDb* apn_db);

  // optional .android.providers.settings.GlobalSettingsProto.App app = 13;
  bool has_app() const;
  void clear_app();
  const ::android::providers::settings::GlobalSettingsProto_App& app() const;
  ::android::providers::settings::GlobalSettingsProto_App* release_app();
  ::android::providers::settings::GlobalSettingsProto_App* mutable_app();
  void set_allocated_app(::android::providers::settings::GlobalSettingsProto_App* app);

  // optional .android.providers.settings.SettingProto assisted_gps_enabled = 14 [(.android.privacy) = {
  bool has_assisted_gps_enabled() const;
  void clear_assisted_gps_enabled();
  const ::android::providers::settings::SettingProto& assisted_gps_enabled() const;
  ::android::providers::settings::SettingProto* release_assisted_gps_enabled();
  ::android::providers::settings::SettingProto* mutable_assisted_gps_enabled();
  void set_allocated_assisted_gps_enabled(::android::providers::settings::SettingProto* assisted_gps_enabled);

  // optional .android.providers.settings.SettingProto audio_safe_volume_state = 15 [(.android.privacy) = {
  bool has_audio_safe_volume_state() const;
  void clear_audio_safe_volume_state();
  const ::android::providers::settings::SettingProto& audio_safe_volume_state() const;
  ::android::providers::settings::SettingProto* release_audio_safe_volume_state();
  ::android::providers::settings::SettingProto* mutable_audio_safe_volume_state();
  void set_allocated_audio_safe_volume_state(::android::providers::settings::SettingProto* audio_safe_volume_state);

  // optional .android.providers.settings.GlobalSettingsProto.DateTime date_time = 16;
  bool has_date_time() const;
  void clear_date_time();
  const ::android::providers::settings::GlobalSettingsProto_DateTime& date_time() const;
  ::android::providers::settings::GlobalSettingsProto_DateTime* release_date_time();
  ::android::providers::settings::GlobalSettingsProto_DateTime* mutable_date_time();
  void set_allocated_date_time(::android::providers::settings::GlobalSettingsProto_DateTime* date_time);

  // optional .android.providers.settings.GlobalSettingsProto.Battery battery = 19;
  bool has_battery() const;
  void clear_battery();
  const ::android::providers::settings::GlobalSettingsProto_Battery& battery() const;
  ::android::providers::settings::GlobalSettingsProto_Battery* release_battery();
  ::android::providers::settings::GlobalSettingsProto_Battery* mutable_battery();
  void set_allocated_battery(::android::providers::settings::GlobalSettingsProto_Battery* battery);

  // optional .android.providers.settings.GlobalSettingsProto.BleScan ble_scan = 20;
  bool has_ble_scan() const;
  void clear_ble_scan();
  const ::android::providers::settings::GlobalSettingsProto_BleScan& ble_scan() const;
  ::android::providers::settings::GlobalSettingsProto_BleScan* release_ble_scan();
  ::android::providers::settings::GlobalSettingsProto_BleScan* mutable_ble_scan();
  void set_allocated_ble_scan(::android::providers::settings::GlobalSettingsProto_BleScan* ble_scan);

  // optional .android.providers.settings.GlobalSettingsProto.Bluetooth bluetooth = 21;
  bool has_bluetooth() const;
  void clear_bluetooth();
  const ::android::providers::settings::GlobalSettingsProto_Bluetooth& bluetooth() const;
  ::android::providers::settings::GlobalSettingsProto_Bluetooth* release_bluetooth();
  ::android::providers::settings::GlobalSettingsProto_Bluetooth* mutable_bluetooth();
  void set_allocated_bluetooth(::android::providers::settings::GlobalSettingsProto_Bluetooth* bluetooth);

  // optional .android.providers.settings.SettingProto boot_count = 22 [(.android.privacy) = {
  bool has_boot_count() const;
  void clear_boot_count();
  const ::android::providers::settings::SettingProto& boot_count() const;
  ::android::providers::settings::SettingProto* release_boot_count();
  ::android::providers::settings::SettingProto* mutable_boot_count();
  void set_allocated_boot_count(::android::providers::settings::SettingProto* boot_count);

  // optional .android.providers.settings.SettingProto bugreport_in_power_menu = 23 [(.android.privacy) = {
  bool has_bugreport_in_power_menu() const;
  void clear_bugreport_in_power_menu();
  const ::android::providers::settings::SettingProto& bugreport_in_power_menu() const;
  ::android::providers::settings::SettingProto* release_bugreport_in_power_menu();
  ::android::providers::settings::SettingProto* mutable_bugreport_in_power_menu();
  void set_allocated_bugreport_in_power_menu(::android::providers::settings::SettingProto* bugreport_in_power_menu);

  // optional .android.providers.settings.SettingProto call_auto_retry = 24 [(.android.privacy) = {
  bool has_call_auto_retry() const;
  void clear_call_auto_retry();
  const ::android::providers::settings::SettingProto& call_auto_retry() const;
  ::android::providers::settings::SettingProto* release_call_auto_retry();
  ::android::providers::settings::SettingProto* mutable_call_auto_retry();
  void set_allocated_call_auto_retry(::android::providers::settings::SettingProto* call_auto_retry);

  // optional .android.providers.settings.GlobalSettingsProto.CaptivePortal captive_portal = 25;
  bool has_captive_portal() const;
  void clear_captive_portal();
  const ::android::providers::settings::GlobalSettingsProto_CaptivePortal& captive_portal() const;
  ::android::providers::settings::GlobalSettingsProto_CaptivePortal* release_captive_portal();
  ::android::providers::settings::GlobalSettingsProto_CaptivePortal* mutable_captive_portal();
  void set_allocated_captive_portal(::android::providers::settings::GlobalSettingsProto_CaptivePortal* captive_portal);

  // optional .android.providers.settings.GlobalSettingsProto.Carrier carrier = 26;
  bool has_carrier() const;
  void clear_carrier();
  const ::android::providers::settings::GlobalSettingsProto_Carrier& carrier() const;
  ::android::providers::settings::GlobalSettingsProto_Carrier* release_carrier();
  ::android::providers::settings::GlobalSettingsProto_Carrier* mutable_carrier();
  void set_allocated_carrier(::android::providers::settings::GlobalSettingsProto_Carrier* carrier);

  // optional .android.providers.settings.GlobalSettingsProto.Cdma cdma = 27;
  bool has_cdma() const;
  void clear_cdma();
  const ::android::providers::settings::GlobalSettingsProto_Cdma& cdma() const;
  ::android::providers::settings::GlobalSettingsProto_Cdma* release_cdma();
  ::android::providers::settings::GlobalSettingsProto_Cdma* mutable_cdma();
  void set_allocated_cdma(::android::providers::settings::GlobalSettingsProto_Cdma* cdma);

  // optional .android.providers.settings.SettingProto cell_on = 28 [(.android.privacy) = {
  bool has_cell_on() const;
  void clear_cell_on();
  const ::android::providers::settings::SettingProto& cell_on() const;
  ::android::providers::settings::SettingProto* release_cell_on();
  ::android::providers::settings::SettingProto* mutable_cell_on();
  void set_allocated_cell_on(::android::providers::settings::SettingProto* cell_on);

  // optional .android.providers.settings.GlobalSettingsProto.CertPin cert_pin = 29;
  bool has_cert_pin() const;
  void clear_cert_pin();
  const ::android::providers::settings::GlobalSettingsProto_CertPin& cert_pin() const;
  ::android::providers::settings::GlobalSettingsProto_CertPin* release_cert_pin();
  ::android::providers::settings::GlobalSettingsProto_CertPin* mutable_cert_pin();
  void set_allocated_cert_pin(::android::providers::settings::GlobalSettingsProto_CertPin* cert_pin);

  // optional .android.providers.settings.SettingProto chained_battery_attribution_enabled = 30 [(.android.privacy) = {
  bool has_chained_battery_attribution_enabled() const;
  void clear_chained_battery_attribution_enabled();
  const ::android::providers::settings::SettingProto& chained_battery_attribution_enabled() const;
  ::android::providers::settings::SettingProto* release_chained_battery_attribution_enabled();
  ::android::providers::settings::SettingProto* mutable_chained_battery_attribution_enabled();
  void set_allocated_chained_battery_attribution_enabled(::android::providers::settings::SettingProto* chained_battery_attribution_enabled);

  // optional .android.providers.settings.SettingProto compatibility_mode = 31 [(.android.privacy) = {
  bool has_compatibility_mode() const;
  void clear_compatibility_mode();
  const ::android::providers::settings::SettingProto& compatibility_mode() const;
  ::android::providers::settings::SettingProto* release_compatibility_mode();
  ::android::providers::settings::SettingProto* mutable_compatibility_mode();
  void set_allocated_compatibility_mode(::android::providers::settings::SettingProto* compatibility_mode);

  // optional .android.providers.settings.GlobalSettingsProto.Connectivity connectivity = 32;
  bool has_connectivity() const;
  void clear_connectivity();
  const ::android::providers::settings::GlobalSettingsProto_Connectivity& connectivity() const;
  ::android::providers::settings::GlobalSettingsProto_Connectivity* release_connectivity();
  ::android::providers::settings::GlobalSettingsProto_Connectivity* mutable_connectivity();
  void set_allocated_connectivity(::android::providers::settings::GlobalSettingsProto_Connectivity* connectivity);

  // optional .android.providers.settings.SettingProto contact_metadata_sync_enabled = 33 [(.android.privacy) = {
  bool has_contact_metadata_sync_enabled() const;
  void clear_contact_metadata_sync_enabled();
  const ::android::providers::settings::SettingProto& contact_metadata_sync_enabled() const;
  ::android::providers::settings::SettingProto* release_contact_metadata_sync_enabled();
  ::android::providers::settings::SettingProto* mutable_contact_metadata_sync_enabled();
  void set_allocated_contact_metadata_sync_enabled(::android::providers::settings::SettingProto* contact_metadata_sync_enabled);

  // optional .android.providers.settings.SettingProto contacts_database_wal_enabled = 34 [(.android.privacy) = {
  bool has_contacts_database_wal_enabled() const;
  void clear_contacts_database_wal_enabled();
  const ::android::providers::settings::SettingProto& contacts_database_wal_enabled() const;
  ::android::providers::settings::SettingProto* release_contacts_database_wal_enabled();
  ::android::providers::settings::SettingProto* mutable_contacts_database_wal_enabled();
  void set_allocated_contacts_database_wal_enabled(::android::providers::settings::SettingProto* contacts_database_wal_enabled);

  // optional .android.providers.settings.GlobalSettingsProto.Data data = 35;
  bool has_data() const;
  void clear_data();
  const ::android::providers::settings::GlobalSettingsProto_Data& data() const;
  ::android::providers::settings::GlobalSettingsProto_Data* release_data();
  ::android::providers::settings::GlobalSettingsProto_Data* mutable_data();
  void set_allocated_data(::android::providers::settings::GlobalSettingsProto_Data* data);

  // optional .android.providers.settings.GlobalSettingsProto.Database database = 36;
  bool has_database() const;
  void clear_database();
  const ::android::providers::settings::GlobalSettingsProto_Database& database() const;
  ::android::providers::settings::GlobalSettingsProto_Database* release_database();
  ::android::providers::settings::GlobalSettingsProto_Database* mutable_database();
  void set_allocated_database(::android::providers::settings::GlobalSettingsProto_Database* database);

  // optional .android.providers.settings.GlobalSettingsProto.Debug debug = 37;
  bool has_debug() const;
  void clear_debug();
  const ::android::providers::settings::GlobalSettingsProto_Debug& debug() const;
  ::android::providers::settings::GlobalSettingsProto_Debug* release_debug();
  ::android::providers::settings::GlobalSettingsProto_Debug* mutable_debug();
  void set_allocated_debug(::android::providers::settings::GlobalSettingsProto_Debug* debug);

  // optional .android.providers.settings.GlobalSettingsProto.Default default = 38;
  bool has_default_() const;
  void clear_default_();
  const ::android::providers::settings::GlobalSettingsProto_Default& default_() const;
  ::android::providers::settings::GlobalSettingsProto_Default* release_default_();
  ::android::providers::settings::GlobalSettingsProto_Default* mutable_default_();
  void set_allocated_default_(::android::providers::settings::GlobalSettingsProto_Default* default_);

  // optional .android.providers.settings.GlobalSettingsProto.Development development = 39;
  bool has_development() const;
  void clear_development();
  const ::android::providers::settings::GlobalSettingsProto_Development& development() const;
  ::android::providers::settings::GlobalSettingsProto_Development* release_development();
  ::android::providers::settings::GlobalSettingsProto_Development* mutable_development();
  void set_allocated_development(::android::providers::settings::GlobalSettingsProto_Development* development);

  // optional .android.providers.settings.GlobalSettingsProto.Device device = 40;
  bool has_device() const;
  void clear_device();
  const ::android::providers::settings::GlobalSettingsProto_Device& device() const;
  ::android::providers::settings::GlobalSettingsProto_Device* release_device();
  ::android::providers::settings::GlobalSettingsProto_Device* mutable_device();
  void set_allocated_device(::android::providers::settings::GlobalSettingsProto_Device* device);

  // optional .android.providers.settings.SettingProto disk_free_change_reporting_threshold = 41 [(.android.privacy) = {
  bool has_disk_free_change_reporting_threshold() const;
  void clear_disk_free_change_reporting_threshold();
  const ::android::providers::settings::SettingProto& disk_free_change_reporting_threshold() const;
  ::android::providers::settings::SettingProto* release_disk_free_change_reporting_threshold();
  ::android::providers::settings::SettingProto* mutable_disk_free_change_reporting_threshold();
  void set_allocated_disk_free_change_reporting_threshold(::android::providers::settings::SettingProto* disk_free_change_reporting_threshold);

  // optional .android.providers.settings.GlobalSettingsProto.Display display = 42;
  bool has_display() const;
  void clear_display();
  const ::android::providers::settings::GlobalSettingsProto_Display& display() const;
  ::android::providers::settings::GlobalSettingsProto_Display* release_display();
  ::android::providers::settings::GlobalSettingsProto_Display* mutable_display();
  void set_allocated_display(::android::providers::settings::GlobalSettingsProto_Display* display);

  // optional .android.providers.settings.GlobalSettingsProto.DnsResolver dns_resolver = 43;
  bool has_dns_resolver() const;
  void clear_dns_resolver();
  const ::android::providers::settings::GlobalSettingsProto_DnsResolver& dns_resolver() const;
  ::android::providers::settings::GlobalSettingsProto_DnsResolver* release_dns_resolver();
  ::android::providers::settings::GlobalSettingsProto_DnsResolver* mutable_dns_resolver();
  void set_allocated_dns_resolver(::android::providers::settings::GlobalSettingsProto_DnsResolver* dns_resolver);

  // optional .android.providers.settings.SettingProto dock_audio_media_enabled = 44 [(.android.privacy) = {
  bool has_dock_audio_media_enabled() const;
  void clear_dock_audio_media_enabled();
  const ::android::providers::settings::SettingProto& dock_audio_media_enabled() const;
  ::android::providers::settings::SettingProto* release_dock_audio_media_enabled();
  ::android::providers::settings::SettingProto* mutable_dock_audio_media_enabled();
  void set_allocated_dock_audio_media_enabled(::android::providers::settings::SettingProto* dock_audio_media_enabled);

  // optional .android.providers.settings.GlobalSettingsProto.Download download = 45;
  bool has_download() const;
  void clear_download();
  const ::android::providers::settings::GlobalSettingsProto_Download& download() const;
  ::android::providers::settings::GlobalSettingsProto_Download* release_download();
  ::android::providers::settings::GlobalSettingsProto_Download* mutable_download();
  void set_allocated_download(::android::providers::settings::GlobalSettingsProto_Download* download);

  // optional .android.providers.settings.GlobalSettingsProto.Dropbox dropbox = 46;
  bool has_dropbox() const;
  void clear_dropbox();
  const ::android::providers::settings::GlobalSettingsProto_Dropbox& dropbox() const;
  ::android::providers::settings::GlobalSettingsProto_Dropbox* release_dropbox();
  ::android::providers::settings::GlobalSettingsProto_Dropbox* mutable_dropbox();
  void set_allocated_dropbox(::android::providers::settings::GlobalSettingsProto_Dropbox* dropbox);

  // optional .android.providers.settings.GlobalSettingsProto.Emergency emergency = 47;
  bool has_emergency() const;
  void clear_emergency();
  const ::android::providers::settings::GlobalSettingsProto_Emergency& emergency() const;
  ::android::providers::settings::GlobalSettingsProto_Emergency* release_emergency();
  ::android::providers::settings::GlobalSettingsProto_Emergency* mutable_emergency();
  void set_allocated_emergency(::android::providers::settings::GlobalSettingsProto_Emergency* emergency);

  // optional .android.providers.settings.GlobalSettingsProto.Enable enable = 48;
  bool has_enable() const;
  void clear_enable();
  const ::android::providers::settings::GlobalSettingsProto_Enable& enable() const;
  ::android::providers::settings::GlobalSettingsProto_Enable* release_enable();
  ::android::providers::settings::GlobalSettingsProto_Enable* mutable_enable();
  void set_allocated_enable(::android::providers::settings::GlobalSettingsProto_Enable* enable);

  // optional .android.providers.settings.SettingProto encoded_surround_output = 49 [(.android.privacy) = {
  bool has_encoded_surround_output() const;
  void clear_encoded_surround_output();
  const ::android::providers::settings::SettingProto& encoded_surround_output() const;
  ::android::providers::settings::SettingProto* release_encoded_surround_output();
  ::android::providers::settings::SettingProto* mutable_encoded_surround_output();
  void set_allocated_encoded_surround_output(::android::providers::settings::SettingProto* encoded_surround_output);

  // optional .android.providers.settings.SettingProto enhanced_4g_mode_enabled = 50 [(.android.privacy) = {
  bool has_enhanced_4g_mode_enabled() const;
  void clear_enhanced_4g_mode_enabled();
  const ::android::providers::settings::SettingProto& enhanced_4g_mode_enabled() const;
  ::android::providers::settings::SettingProto* release_enhanced_4g_mode_enabled();
  ::android::providers::settings::SettingProto* mutable_enhanced_4g_mode_enabled();
  void set_allocated_enhanced_4g_mode_enabled(::android::providers::settings::SettingProto* enhanced_4g_mode_enabled);

  // optional .android.providers.settings.GlobalSettingsProto.Euicc euicc = 52;
  bool has_euicc() const;
  void clear_euicc();
  const ::android::providers::settings::GlobalSettingsProto_Euicc& euicc() const;
  ::android::providers::settings::GlobalSettingsProto_Euicc* release_euicc();
  ::android::providers::settings::GlobalSettingsProto_Euicc* mutable_euicc();
  void set_allocated_euicc(::android::providers::settings::GlobalSettingsProto_Euicc* euicc);

  // optional .android.providers.settings.SettingProto fancy_ime_animations = 53 [(.android.privacy) = {
  bool has_fancy_ime_animations() const;
  void clear_fancy_ime_animations();
  const ::android::providers::settings::SettingProto& fancy_ime_animations() const;
  ::android::providers::settings::SettingProto* release_fancy_ime_animations();
  ::android::providers::settings::SettingProto* mutable_fancy_ime_animations();
  void set_allocated_fancy_ime_animations(::android::providers::settings::SettingProto* fancy_ime_animations);

  // optional .android.providers.settings.SettingProto force_allow_on_external = 54 [(.android.privacy) = {
  bool has_force_allow_on_external() const;
  void clear_force_allow_on_external();
  const ::android::providers::settings::SettingProto& force_allow_on_external() const;
  ::android::providers::settings::SettingProto* release_force_allow_on_external();
  ::android::providers::settings::SettingProto* mutable_force_allow_on_external();
  void set_allocated_force_allow_on_external(::android::providers::settings::SettingProto* force_allow_on_external);

  // optional .android.providers.settings.SettingProto fps_divisor = 55 [(.android.privacy) = {
  bool has_fps_divisor() const;
  void clear_fps_divisor();
  const ::android::providers::settings::SettingProto& fps_divisor() const;
  ::android::providers::settings::SettingProto* release_fps_divisor();
  ::android::providers::settings::SettingProto* mutable_fps_divisor();
  void set_allocated_fps_divisor(::android::providers::settings::SettingProto* fps_divisor);

  // optional .android.providers.settings.SettingProto fstrim_mandatory_interval = 56 [(.android.privacy) = {
  bool has_fstrim_mandatory_interval() const;
  void clear_fstrim_mandatory_interval();
  const ::android::providers::settings::SettingProto& fstrim_mandatory_interval() const;
  ::android::providers::settings::SettingProto* release_fstrim_mandatory_interval();
  ::android::providers::settings::SettingProto* mutable_fstrim_mandatory_interval();
  void set_allocated_fstrim_mandatory_interval(::android::providers::settings::SettingProto* fstrim_mandatory_interval);

  // optional .android.providers.settings.GlobalSettingsProto.GlobalHttpProxy global_http_proxy = 57;
  bool has_global_http_proxy() const;
  void clear_global_http_proxy();
  const ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy& global_http_proxy() const;
  ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* release_global_http_proxy();
  ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* mutable_global_http_proxy();
  void set_allocated_global_http_proxy(::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* global_http_proxy);

  // optional .android.providers.settings.SettingProto gprs_register_check_period_ms = 58 [(.android.privacy) = {
  bool has_gprs_register_check_period_ms() const;
  void clear_gprs_register_check_period_ms();
  const ::android::providers::settings::SettingProto& gprs_register_check_period_ms() const;
  ::android::providers::settings::SettingProto* release_gprs_register_check_period_ms();
  ::android::providers::settings::SettingProto* mutable_gprs_register_check_period_ms();
  void set_allocated_gprs_register_check_period_ms(::android::providers::settings::SettingProto* gprs_register_check_period_ms);

  // optional .android.providers.settings.GlobalSettingsProto.Gpu gpu = 59;
  bool has_gpu() const;
  void clear_gpu();
  const ::android::providers::settings::GlobalSettingsProto_Gpu& gpu() const;
  ::android::providers::settings::GlobalSettingsProto_Gpu* release_gpu();
  ::android::providers::settings::GlobalSettingsProto_Gpu* mutable_gpu();
  void set_allocated_gpu(::android::providers::settings::GlobalSettingsProto_Gpu* gpu);

  // optional .android.providers.settings.GlobalSettingsProto.Hdmi hdmi = 60;
  bool has_hdmi() const;
  void clear_hdmi();
  const ::android::providers::settings::GlobalSettingsProto_Hdmi& hdmi() const;
  ::android::providers::settings::GlobalSettingsProto_Hdmi* release_hdmi();
  ::android::providers::settings::GlobalSettingsProto_Hdmi* mutable_hdmi();
  void set_allocated_hdmi(::android::providers::settings::GlobalSettingsProto_Hdmi* hdmi);

  // optional .android.providers.settings.SettingProto heads_up_notifications_enabled = 61 [(.android.privacy) = {
  bool has_heads_up_notifications_enabled() const;
  void clear_heads_up_notifications_enabled();
  const ::android::providers::settings::SettingProto& heads_up_notifications_enabled() const;
  ::android::providers::settings::SettingProto* release_heads_up_notifications_enabled();
  ::android::providers::settings::SettingProto* mutable_heads_up_notifications_enabled();
  void set_allocated_heads_up_notifications_enabled(::android::providers::settings::SettingProto* heads_up_notifications_enabled);

  // optional .android.providers.settings.SettingProto hidden_api_blacklist_exemptions = 62 [(.android.privacy) = {
  bool has_hidden_api_blacklist_exemptions() const;
  void clear_hidden_api_blacklist_exemptions();
  const ::android::providers::settings::SettingProto& hidden_api_blacklist_exemptions() const;
  ::android::providers::settings::SettingProto* release_hidden_api_blacklist_exemptions();
  ::android::providers::settings::SettingProto* mutable_hidden_api_blacklist_exemptions();
  void set_allocated_hidden_api_blacklist_exemptions(::android::providers::settings::SettingProto* hidden_api_blacklist_exemptions);

  // optional .android.providers.settings.GlobalSettingsProto.InetCondition inet_condition = 63;
  bool has_inet_condition() const;
  void clear_inet_condition();
  const ::android::providers::settings::GlobalSettingsProto_InetCondition& inet_condition() const;
  ::android::providers::settings::GlobalSettingsProto_InetCondition* release_inet_condition();
  ::android::providers::settings::GlobalSettingsProto_InetCondition* mutable_inet_condition();
  void set_allocated_inet_condition(::android::providers::settings::GlobalSettingsProto_InetCondition* inet_condition);

  // optional .android.providers.settings.GlobalSettingsProto.InstantApp instant_app = 64;
  bool has_instant_app() const;
  void clear_instant_app();
  const ::android::providers::settings::GlobalSettingsProto_InstantApp& instant_app() const;
  ::android::providers::settings::GlobalSettingsProto_InstantApp* release_instant_app();
  ::android::providers::settings::GlobalSettingsProto_InstantApp* mutable_instant_app();
  void set_allocated_instant_app(::android::providers::settings::GlobalSettingsProto_InstantApp* instant_app);

  // optional .android.providers.settings.GlobalSettingsProto.IntentFirewall intent_firewall = 65;
  bool has_intent_firewall() const;
  void clear_intent_firewall();
  const ::android::providers::settings::GlobalSettingsProto_IntentFirewall& intent_firewall() const;
  ::android::providers::settings::GlobalSettingsProto_IntentFirewall* release_intent_firewall();
  ::android::providers::settings::GlobalSettingsProto_IntentFirewall* mutable_intent_firewall();
  void set_allocated_intent_firewall(::android::providers::settings::GlobalSettingsProto_IntentFirewall* intent_firewall);

  // optional .android.providers.settings.SettingProto keep_profile_in_background = 67 [(.android.privacy) = {
  bool has_keep_profile_in_background() const;
  void clear_keep_profile_in_background();
  const ::android::providers::settings::SettingProto& keep_profile_in_background() const;
  ::android::providers::settings::SettingProto* release_keep_profile_in_background();
  ::android::providers::settings::SettingProto* mutable_keep_profile_in_background();
  void set_allocated_keep_profile_in_background(::android::providers::settings::SettingProto* keep_profile_in_background);

  // optional .android.providers.settings.GlobalSettingsProto.LangId lang_id = 68;
  bool has_lang_id() const;
  void clear_lang_id();
  const ::android::providers::settings::GlobalSettingsProto_LangId& lang_id() const;
  ::android::providers::settings::GlobalSettingsProto_LangId* release_lang_id();
  ::android::providers::settings::GlobalSettingsProto_LangId* mutable_lang_id();
  void set_allocated_lang_id(::android::providers::settings::GlobalSettingsProto_LangId* lang_id);

  // optional .android.providers.settings.GlobalSettingsProto.Location location = 69;
  bool has_location() const;
  void clear_location();
  const ::android::providers::settings::GlobalSettingsProto_Location& location() const;
  ::android::providers::settings::GlobalSettingsProto_Location* release_location();
  ::android::providers::settings::GlobalSettingsProto_Location* mutable_location();
  void set_allocated_location(::android::providers::settings::GlobalSettingsProto_Location* location);

  // optional .android.providers.settings.GlobalSettingsProto.LowPowerMode low_power_mode = 70;
  bool has_low_power_mode() const;
  void clear_low_power_mode();
  const ::android::providers::settings::GlobalSettingsProto_LowPowerMode& low_power_mode() const;
  ::android::providers::settings::GlobalSettingsProto_LowPowerMode* release_low_power_mode();
  ::android::providers::settings::GlobalSettingsProto_LowPowerMode* mutable_low_power_mode();
  void set_allocated_low_power_mode(::android::providers::settings::GlobalSettingsProto_LowPowerMode* low_power_mode);

  // optional .android.providers.settings.SettingProto lte_service_forced = 71 [(.android.privacy) = {
  bool has_lte_service_forced() const;
  void clear_lte_service_forced();
  const ::android::providers::settings::SettingProto& lte_service_forced() const;
  ::android::providers::settings::SettingProto* release_lte_service_forced();
  ::android::providers::settings::SettingProto* mutable_lte_service_forced();
  void set_allocated_lte_service_forced(::android::providers::settings::SettingProto* lte_service_forced);

  // optional .android.providers.settings.SettingProto mdc_initial_max_retry = 72 [(.android.privacy) = {
  bool has_mdc_initial_max_retry() const;
  void clear_mdc_initial_max_retry();
  const ::android::providers::settings::SettingProto& mdc_initial_max_retry() const;
  ::android::providers::settings::SettingProto* release_mdc_initial_max_retry();
  ::android::providers::settings::SettingProto* mutable_mdc_initial_max_retry();
  void set_allocated_mdc_initial_max_retry(::android::providers::settings::SettingProto* mdc_initial_max_retry);

  // optional .android.providers.settings.GlobalSettingsProto.Mhl mhl = 73;
  bool has_mhl() const;
  void clear_mhl();
  const ::android::providers::settings::GlobalSettingsProto_Mhl& mhl() const;
  ::android::providers::settings::GlobalSettingsProto_Mhl* release_mhl();
  ::android::providers::settings::GlobalSettingsProto_Mhl* mutable_mhl();
  void set_allocated_mhl(::android::providers::settings::GlobalSettingsProto_Mhl* mhl);

  // optional .android.providers.settings.GlobalSettingsProto.MobileData mobile_data = 74;
  bool has_mobile_data() const;
  void clear_mobile_data();
  const ::android::providers::settings::GlobalSettingsProto_MobileData& mobile_data() const;
  ::android::providers::settings::GlobalSettingsProto_MobileData* release_mobile_data();
  ::android::providers::settings::GlobalSettingsProto_MobileData* mutable_mobile_data();
  void set_allocated_mobile_data(::android::providers::settings::GlobalSettingsProto_MobileData* mobile_data);

  // optional .android.providers.settings.SettingProto mode_ringer = 75 [(.android.privacy) = {
  bool has_mode_ringer() const;
  void clear_mode_ringer();
  const ::android::providers::settings::SettingProto& mode_ringer() const;
  ::android::providers::settings::SettingProto* release_mode_ringer();
  ::android::providers::settings::SettingProto* mutable_mode_ringer();
  void set_allocated_mode_ringer(::android::providers::settings::SettingProto* mode_ringer);

  // optional .android.providers.settings.GlobalSettingsProto.MultiSim multi_sim = 76;
  bool has_multi_sim() const;
  void clear_multi_sim();
  const ::android::providers::settings::GlobalSettingsProto_MultiSim& multi_sim() const;
  ::android::providers::settings::GlobalSettingsProto_MultiSim* release_multi_sim();
  ::android::providers::settings::GlobalSettingsProto_MultiSim* mutable_multi_sim();
  void set_allocated_multi_sim(::android::providers::settings::GlobalSettingsProto_MultiSim* multi_sim);

  // optional .android.providers.settings.GlobalSettingsProto.Netstats netstats = 77;
  bool has_netstats() const;
  void clear_netstats();
  const ::android::providers::settings::GlobalSettingsProto_Netstats& netstats() const;
  ::android::providers::settings::GlobalSettingsProto_Netstats* release_netstats();
  ::android::providers::settings::GlobalSettingsProto_Netstats* mutable_netstats();
  void set_allocated_netstats(::android::providers::settings::GlobalSettingsProto_Netstats* netstats);

  // optional .android.providers.settings.GlobalSettingsProto.Network network = 78;
  bool has_network() const;
  void clear_network();
  const ::android::providers::settings::GlobalSettingsProto_Network& network() const;
  ::android::providers::settings::GlobalSettingsProto_Network* release_network();
  ::android::providers::settings::GlobalSettingsProto_Network* mutable_network();
  void set_allocated_network(::android::providers::settings::GlobalSettingsProto_Network* network);

  // optional .android.providers.settings.SettingProto new_contact_aggregator = 79 [(.android.privacy) = {
  bool has_new_contact_aggregator() const;
  void clear_new_contact_aggregator();
  const ::android::providers::settings::SettingProto& new_contact_aggregator() const;
  ::android::providers::settings::SettingProto* release_new_contact_aggregator();
  ::android::providers::settings::SettingProto* mutable_new_contact_aggregator();
  void set_allocated_new_contact_aggregator(::android::providers::settings::SettingProto* new_contact_aggregator);

  // optional .android.providers.settings.SettingProto night_display_forced_auto_mode_available = 80 [(.android.privacy) = {
  bool has_night_display_forced_auto_mode_available() const;
  void clear_night_display_forced_auto_mode_available();
  const ::android::providers::settings::SettingProto& night_display_forced_auto_mode_available() const;
  ::android::providers::settings::SettingProto* release_night_display_forced_auto_mode_available();
  ::android::providers::settings::SettingProto* mutable_night_display_forced_auto_mode_available();
  void set_allocated_night_display_forced_auto_mode_available(::android::providers::settings::SettingProto* night_display_forced_auto_mode_available);

  // optional .android.providers.settings.GlobalSettingsProto.NitzUpdate nitz_update = 81;
  bool has_nitz_update() const;
  void clear_nitz_update();
  const ::android::providers::settings::GlobalSettingsProto_NitzUpdate& nitz_update() const;
  ::android::providers::settings::GlobalSettingsProto_NitzUpdate* release_nitz_update();
  ::android::providers::settings::GlobalSettingsProto_NitzUpdate* mutable_nitz_update();
  void set_allocated_nitz_update(::android::providers::settings::GlobalSettingsProto_NitzUpdate* nitz_update);

  // optional .android.providers.settings.GlobalSettingsProto.Notification notification = 82;
  bool has_notification() const;
  void clear_notification();
  const ::android::providers::settings::GlobalSettingsProto_Notification& notification() const;
  ::android::providers::settings::GlobalSettingsProto_Notification* release_notification();
  ::android::providers::settings::GlobalSettingsProto_Notification* mutable_notification();
  void set_allocated_notification(::android::providers::settings::GlobalSettingsProto_Notification* notification);

  // optional .android.providers.settings.SettingProto nsd_on = 83 [(.android.privacy) = {
  bool has_nsd_on() const;
  void clear_nsd_on();
  const ::android::providers::settings::SettingProto& nsd_on() const;
  ::android::providers::settings::SettingProto* release_nsd_on();
  ::android::providers::settings::SettingProto* mutable_nsd_on();
  void set_allocated_nsd_on(::android::providers::settings::SettingProto* nsd_on);

  // optional .android.providers.settings.GlobalSettingsProto.Ntp ntp = 84;
  bool has_ntp() const;
  void clear_ntp();
  const ::android::providers::settings::GlobalSettingsProto_Ntp& ntp() const;
  ::android::providers::settings::GlobalSettingsProto_Ntp* release_ntp();
  ::android::providers::settings::GlobalSettingsProto_Ntp* mutable_ntp();
  void set_allocated_ntp(::android::providers::settings::GlobalSettingsProto_Ntp* ntp);

  // optional .android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery user_absent_small_battery = 85;
  bool has_user_absent_small_battery() const;
  void clear_user_absent_small_battery();
  const ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery& user_absent_small_battery() const;
  ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* release_user_absent_small_battery();
  ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* mutable_user_absent_small_battery();
  void set_allocated_user_absent_small_battery(::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* user_absent_small_battery);

  // optional .android.providers.settings.SettingProto ota_disable_automatic_update = 86 [(.android.privacy) = {
  bool has_ota_disable_automatic_update() const;
  void clear_ota_disable_automatic_update();
  const ::android::providers::settings::SettingProto& ota_disable_automatic_update() const;
  ::android::providers::settings::SettingProto* release_ota_disable_automatic_update();
  ::android::providers::settings::SettingProto* mutable_ota_disable_automatic_update();
  void set_allocated_ota_disable_automatic_update(::android::providers::settings::SettingProto* ota_disable_automatic_update);

  // optional .android.providers.settings.SettingProto overlay_display_devices = 87 [(.android.privacy) = {
  bool has_overlay_display_devices() const;
  void clear_overlay_display_devices();
  const ::android::providers::settings::SettingProto& overlay_display_devices() const;
  ::android::providers::settings::SettingProto* release_overlay_display_devices();
  ::android::providers::settings::SettingProto* mutable_overlay_display_devices();
  void set_allocated_overlay_display_devices(::android::providers::settings::SettingProto* overlay_display_devices);

  // optional .android.providers.settings.SettingProto override_settings_provider_restore_any_version = 88 [(.android.privacy) = {
  bool has_override_settings_provider_restore_any_version() const;
  void clear_override_settings_provider_restore_any_version();
  const ::android::providers::settings::SettingProto& override_settings_provider_restore_any_version() const;
  ::android::providers::settings::SettingProto* release_override_settings_provider_restore_any_version();
  ::android::providers::settings::SettingProto* mutable_override_settings_provider_restore_any_version();
  void set_allocated_override_settings_provider_restore_any_version(::android::providers::settings::SettingProto* override_settings_provider_restore_any_version);

  // optional .android.providers.settings.SettingProto pac_change_delay = 89 [(.android.privacy) = {
  bool has_pac_change_delay() const;
  void clear_pac_change_delay();
  const ::android::providers::settings::SettingProto& pac_change_delay() const;
  ::android::providers::settings::SettingProto* release_pac_change_delay();
  ::android::providers::settings::SettingProto* mutable_pac_change_delay();
  void set_allocated_pac_change_delay(::android::providers::settings::SettingProto* pac_change_delay);

  // optional .android.providers.settings.GlobalSettingsProto.PackageVerifier package_verifier = 90;
  bool has_package_verifier() const;
  void clear_package_verifier();
  const ::android::providers::settings::GlobalSettingsProto_PackageVerifier& package_verifier() const;
  ::android::providers::settings::GlobalSettingsProto_PackageVerifier* release_package_verifier();
  ::android::providers::settings::GlobalSettingsProto_PackageVerifier* mutable_package_verifier();
  void set_allocated_package_verifier(::android::providers::settings::GlobalSettingsProto_PackageVerifier* package_verifier);

  // optional .android.providers.settings.GlobalSettingsProto.PdpWatchdog pdp_watchdog = 91;
  bool has_pdp_watchdog() const;
  void clear_pdp_watchdog();
  const ::android::providers::settings::GlobalSettingsProto_PdpWatchdog& pdp_watchdog() const;
  ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* release_pdp_watchdog();
  ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* mutable_pdp_watchdog();
  void set_allocated_pdp_watchdog(::android::providers::settings::GlobalSettingsProto_PdpWatchdog* pdp_watchdog);

  // optional .android.providers.settings.SettingProto policy_control = 92;
  bool has_policy_control() const;
  void clear_policy_control();
  const ::android::providers::settings::SettingProto& policy_control() const;
  ::android::providers::settings::SettingProto* release_policy_control();
  ::android::providers::settings::SettingProto* mutable_policy_control();
  void set_allocated_policy_control(::android::providers::settings::SettingProto* policy_control);

  // optional .android.providers.settings.SettingProto power_manager_constants = 93;
  bool has_power_manager_constants() const;
  void clear_power_manager_constants();
  const ::android::providers::settings::SettingProto& power_manager_constants() const;
  ::android::providers::settings::SettingProto* release_power_manager_constants();
  ::android::providers::settings::SettingProto* mutable_power_manager_constants();
  void set_allocated_power_manager_constants(::android::providers::settings::SettingProto* power_manager_constants);

  // optional .android.providers.settings.GlobalSettingsProto.PrepaidSetup prepaid_setup = 95;
  bool has_prepaid_setup() const;
  void clear_prepaid_setup();
  const ::android::providers::settings::GlobalSettingsProto_PrepaidSetup& prepaid_setup() const;
  ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* release_prepaid_setup();
  ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* mutable_prepaid_setup();
  void set_allocated_prepaid_setup(::android::providers::settings::GlobalSettingsProto_PrepaidSetup* prepaid_setup);

  // optional .android.providers.settings.GlobalSettingsProto.Private private = 96;
  bool has_private_() const;
  void clear_private_();
  const ::android::providers::settings::GlobalSettingsProto_Private& private_() const;
  ::android::providers::settings::GlobalSettingsProto_Private* release_private_();
  ::android::providers::settings::GlobalSettingsProto_Private* mutable_private_();
  void set_allocated_private_(::android::providers::settings::GlobalSettingsProto_Private* private_);

  // optional .android.providers.settings.SettingProto provisioning_apn_alarm_delay_in_ms = 97 [(.android.privacy) = {
  bool has_provisioning_apn_alarm_delay_in_ms() const;
  void clear_provisioning_apn_alarm_delay_in_ms();
  const ::android::providers::settings::SettingProto& provisioning_apn_alarm_delay_in_ms() const;
  ::android::providers::settings::SettingProto* release_provisioning_apn_alarm_delay_in_ms();
  ::android::providers::settings::SettingProto* mutable_provisioning_apn_alarm_delay_in_ms();
  void set_allocated_provisioning_apn_alarm_delay_in_ms(::android::providers::settings::SettingProto* provisioning_apn_alarm_delay_in_ms);

  // optional .android.providers.settings.SettingProto read_external_storage_enforced_default = 98 [(.android.privacy) = {
  bool has_read_external_storage_enforced_default() const;
  void clear_read_external_storage_enforced_default();
  const ::android::providers::settings::SettingProto& read_external_storage_enforced_default() const;
  ::android::providers::settings::SettingProto* release_read_external_storage_enforced_default();
  ::android::providers::settings::SettingProto* mutable_read_external_storage_enforced_default();
  void set_allocated_read_external_storage_enforced_default(::android::providers::settings::SettingProto* read_external_storage_enforced_default);

  // optional .android.providers.settings.SettingProto require_password_to_decrypt = 99 [(.android.privacy) = {
  bool has_require_password_to_decrypt() const;
  void clear_require_password_to_decrypt();
  const ::android::providers::settings::SettingProto& require_password_to_decrypt() const;
  ::android::providers::settings::SettingProto* release_require_password_to_decrypt();
  ::android::providers::settings::SettingProto* mutable_require_password_to_decrypt();
  void set_allocated_require_password_to_decrypt(::android::providers::settings::SettingProto* require_password_to_decrypt);

  // optional .android.providers.settings.SettingProto safe_boot_disallowed = 100 [(.android.privacy) = {
  bool has_safe_boot_disallowed() const;
  void clear_safe_boot_disallowed();
  const ::android::providers::settings::SettingProto& safe_boot_disallowed() const;
  ::android::providers::settings::SettingProto* release_safe_boot_disallowed();
  ::android::providers::settings::SettingProto* mutable_safe_boot_disallowed();
  void set_allocated_safe_boot_disallowed(::android::providers::settings::SettingProto* safe_boot_disallowed);

  // optional .android.providers.settings.GlobalSettingsProto.Selinux selinux = 101;
  bool has_selinux() const;
  void clear_selinux();
  const ::android::providers::settings::GlobalSettingsProto_Selinux& selinux() const;
  ::android::providers::settings::GlobalSettingsProto_Selinux* release_selinux();
  ::android::providers::settings::GlobalSettingsProto_Selinux* mutable_selinux();
  void set_allocated_selinux(::android::providers::settings::GlobalSettingsProto_Selinux* selinux);

  // optional .android.providers.settings.SettingProto send_action_app_error = 102 [(.android.privacy) = {
  bool has_send_action_app_error() const;
  void clear_send_action_app_error();
  const ::android::providers::settings::SettingProto& send_action_app_error() const;
  ::android::providers::settings::SettingProto* release_send_action_app_error();
  ::android::providers::settings::SettingProto* mutable_send_action_app_error();
  void set_allocated_send_action_app_error(::android::providers::settings::SettingProto* send_action_app_error);

  // optional .android.providers.settings.SettingProto set_install_location = 103 [(.android.privacy) = {
  bool has_set_install_location() const;
  void clear_set_install_location();
  const ::android::providers::settings::SettingProto& set_install_location() const;
  ::android::providers::settings::SettingProto* release_set_install_location();
  ::android::providers::settings::SettingProto* mutable_set_install_location();
  void set_allocated_set_install_location(::android::providers::settings::SettingProto* set_install_location);

  // optional .android.providers.settings.SettingProto shortcut_manager_constants = 104;
  bool has_shortcut_manager_constants() const;
  void clear_shortcut_manager_constants();
  const ::android::providers::settings::SettingProto& shortcut_manager_constants() const;
  ::android::providers::settings::SettingProto* release_shortcut_manager_constants();
  ::android::providers::settings::SettingProto* mutable_shortcut_manager_constants();
  void set_allocated_shortcut_manager_constants(::android::providers::settings::SettingProto* shortcut_manager_constants);

  // optional .android.providers.settings.SettingProto show_first_crash_dialog = 105 [(.android.privacy) = {
  bool has_show_first_crash_dialog() const;
  void clear_show_first_crash_dialog();
  const ::android::providers::settings::SettingProto& show_first_crash_dialog() const;
  ::android::providers::settings::SettingProto* release_show_first_crash_dialog();
  ::android::providers::settings::SettingProto* mutable_show_first_crash_dialog();
  void set_allocated_show_first_crash_dialog(::android::providers::settings::SettingProto* show_first_crash_dialog);

  // optional .android.providers.settings.SettingProto show_restart_in_crash_dialog = 106 [(.android.privacy) = {
  bool has_show_restart_in_crash_dialog() const;
  void clear_show_restart_in_crash_dialog();
  const ::android::providers::settings::SettingProto& show_restart_in_crash_dialog() const;
  ::android::providers::settings::SettingProto* release_show_restart_in_crash_dialog();
  ::android::providers::settings::SettingProto* mutable_show_restart_in_crash_dialog();
  void set_allocated_show_restart_in_crash_dialog(::android::providers::settings::SettingProto* show_restart_in_crash_dialog);

  // optional .android.providers.settings.SettingProto show_mute_in_crash_dialog = 107 [(.android.privacy) = {
  bool has_show_mute_in_crash_dialog() const;
  void clear_show_mute_in_crash_dialog();
  const ::android::providers::settings::SettingProto& show_mute_in_crash_dialog() const;
  ::android::providers::settings::SettingProto* release_show_mute_in_crash_dialog();
  ::android::providers::settings::SettingProto* mutable_show_mute_in_crash_dialog();
  void set_allocated_show_mute_in_crash_dialog(::android::providers::settings::SettingProto* show_mute_in_crash_dialog);

  // optional .android.providers.settings.GlobalSettingsProto.SmartSelection smart_selection = 108;
  bool has_smart_selection() const;
  void clear_smart_selection();
  const ::android::providers::settings::GlobalSettingsProto_SmartSelection& smart_selection() const;
  ::android::providers::settings::GlobalSettingsProto_SmartSelection* release_smart_selection();
  ::android::providers::settings::GlobalSettingsProto_SmartSelection* mutable_smart_selection();
  void set_allocated_smart_selection(::android::providers::settings::GlobalSettingsProto_SmartSelection* smart_selection);

  // optional .android.providers.settings.GlobalSettingsProto.Sms sms = 109;
  bool has_sms() const;
  void clear_sms();
  const ::android::providers::settings::GlobalSettingsProto_Sms& sms() const;
  ::android::providers::settings::GlobalSettingsProto_Sms* release_sms();
  ::android::providers::settings::GlobalSettingsProto_Sms* mutable_sms();
  void set_allocated_sms(::android::providers::settings::GlobalSettingsProto_Sms* sms);

  // optional .android.providers.settings.GlobalSettingsProto.Sounds sounds = 110;
  bool has_sounds() const;
  void clear_sounds();
  const ::android::providers::settings::GlobalSettingsProto_Sounds& sounds() const;
  ::android::providers::settings::GlobalSettingsProto_Sounds* release_sounds();
  ::android::providers::settings::GlobalSettingsProto_Sounds* mutable_sounds();
  void set_allocated_sounds(::android::providers::settings::GlobalSettingsProto_Sounds* sounds);

  // optional .android.providers.settings.GlobalSettingsProto.SoundTrigger sound_trigger = 111;
  bool has_sound_trigger() const;
  void clear_sound_trigger();
  const ::android::providers::settings::GlobalSettingsProto_SoundTrigger& sound_trigger() const;
  ::android::providers::settings::GlobalSettingsProto_SoundTrigger* release_sound_trigger();
  ::android::providers::settings::GlobalSettingsProto_SoundTrigger* mutable_sound_trigger();
  void set_allocated_sound_trigger(::android::providers::settings::GlobalSettingsProto_SoundTrigger* sound_trigger);

  // optional .android.providers.settings.SettingProto speed_label_cache_eviction_age_ms = 112 [(.android.privacy) = {
  bool has_speed_label_cache_eviction_age_ms() const;
  void clear_speed_label_cache_eviction_age_ms();
  const ::android::providers::settings::SettingProto& speed_label_cache_eviction_age_ms() const;
  ::android::providers::settings::SettingProto* release_speed_label_cache_eviction_age_ms();
  ::android::providers::settings::SettingProto* mutable_speed_label_cache_eviction_age_ms();
  void set_allocated_speed_label_cache_eviction_age_ms(::android::providers::settings::SettingProto* speed_label_cache_eviction_age_ms);

  // optional .android.providers.settings.SettingProto sqlite_compatibility_wal_flags = 113 [(.android.privacy) = {
  bool has_sqlite_compatibility_wal_flags() const;
  void clear_sqlite_compatibility_wal_flags();
  const ::android::providers::settings::SettingProto& sqlite_compatibility_wal_flags() const;
  ::android::providers::settings::SettingProto* release_sqlite_compatibility_wal_flags();
  ::android::providers::settings::SettingProto* mutable_sqlite_compatibility_wal_flags();
  void set_allocated_sqlite_compatibility_wal_flags(::android::providers::settings::SettingProto* sqlite_compatibility_wal_flags);

  // optional .android.providers.settings.SettingProto stay_on_while_plugged_in = 114 [(.android.privacy) = {
  bool has_stay_on_while_plugged_in() const;
  void clear_stay_on_while_plugged_in();
  const ::android::providers::settings::SettingProto& stay_on_while_plugged_in() const;
  ::android::providers::settings::SettingProto* release_stay_on_while_plugged_in();
  ::android::providers::settings::SettingProto* mutable_stay_on_while_plugged_in();
  void set_allocated_stay_on_while_plugged_in(::android::providers::settings::SettingProto* stay_on_while_plugged_in);

  // optional .android.providers.settings.GlobalSettingsProto.Storage storage = 115;
  bool has_storage() const;
  void clear_storage();
  const ::android::providers::settings::GlobalSettingsProto_Storage& storage() const;
  ::android::providers::settings::GlobalSettingsProto_Storage* release_storage();
  ::android::providers::settings::GlobalSettingsProto_Storage* mutable_storage();
  void set_allocated_storage(::android::providers::settings::GlobalSettingsProto_Storage* storage);

  // optional .android.providers.settings.GlobalSettingsProto.Sync sync = 116;
  bool has_sync() const;
  void clear_sync();
  const ::android::providers::settings::GlobalSettingsProto_Sync& sync() const;
  ::android::providers::settings::GlobalSettingsProto_Sync* release_sync();
  ::android::providers::settings::GlobalSettingsProto_Sync* mutable_sync();
  void set_allocated_sync(::android::providers::settings::GlobalSettingsProto_Sync* sync);

  // optional .android.providers.settings.GlobalSettingsProto.Sys sys = 117;
  bool has_sys() const;
  void clear_sys();
  const ::android::providers::settings::GlobalSettingsProto_Sys& sys() const;
  ::android::providers::settings::GlobalSettingsProto_Sys* release_sys();
  ::android::providers::settings::GlobalSettingsProto_Sys* mutable_sys();
  void set_allocated_sys(::android::providers::settings::GlobalSettingsProto_Sys* sys);

  // optional .android.providers.settings.SettingProto tcp_default_init_rwnd = 118 [(.android.privacy) = {
  bool has_tcp_default_init_rwnd() const;
  void clear_tcp_default_init_rwnd();
  const ::android::providers::settings::SettingProto& tcp_default_init_rwnd() const;
  ::android::providers::settings::SettingProto* release_tcp_default_init_rwnd();
  ::android::providers::settings::SettingProto* mutable_tcp_default_init_rwnd();
  void set_allocated_tcp_default_init_rwnd(::android::providers::settings::SettingProto* tcp_default_init_rwnd);

  // optional .android.providers.settings.GlobalSettingsProto.TemperatureWarning temperature_warning = 119;
  bool has_temperature_warning() const;
  void clear_temperature_warning();
  const ::android::providers::settings::GlobalSettingsProto_TemperatureWarning& temperature_warning() const;
  ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* release_temperature_warning();
  ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* mutable_temperature_warning();
  void set_allocated_temperature_warning(::android::providers::settings::GlobalSettingsProto_TemperatureWarning* temperature_warning);

  // optional .android.providers.settings.GlobalSettingsProto.Tether tether = 120;
  bool has_tether() const;
  void clear_tether();
  const ::android::providers::settings::GlobalSettingsProto_Tether& tether() const;
  ::android::providers::settings::GlobalSettingsProto_Tether* release_tether();
  ::android::providers::settings::GlobalSettingsProto_Tether* mutable_tether();
  void set_allocated_tether(::android::providers::settings::GlobalSettingsProto_Tether* tether);

  // optional .android.providers.settings.SettingProto text_classifier_constants = 121;
  bool has_text_classifier_constants() const;
  void clear_text_classifier_constants();
  const ::android::providers::settings::SettingProto& text_classifier_constants() const;
  ::android::providers::settings::SettingProto* release_text_classifier_constants();
  ::android::providers::settings::SettingProto* mutable_text_classifier_constants();
  void set_allocated_text_classifier_constants(::android::providers::settings::SettingProto* text_classifier_constants);

  // optional .android.providers.settings.SettingProto theater_mode_on = 122 [(.android.privacy) = {
  bool has_theater_mode_on() const;
  void clear_theater_mode_on();
  const ::android::providers::settings::SettingProto& theater_mode_on() const;
  ::android::providers::settings::SettingProto* release_theater_mode_on();
  ::android::providers::settings::SettingProto* mutable_theater_mode_on();
  void set_allocated_theater_mode_on(::android::providers::settings::SettingProto* theater_mode_on);

  // optional .android.providers.settings.SettingProto time_only_mode_constants = 123 [(.android.privacy) = {
  bool has_time_only_mode_constants() const;
  void clear_time_only_mode_constants();
  const ::android::providers::settings::SettingProto& time_only_mode_constants() const;
  ::android::providers::settings::SettingProto* release_time_only_mode_constants();
  ::android::providers::settings::SettingProto* mutable_time_only_mode_constants();
  void set_allocated_time_only_mode_constants(::android::providers::settings::SettingProto* time_only_mode_constants);

  // optional .android.providers.settings.SettingProto transition_animation_scale = 124 [(.android.privacy) = {
  bool has_transition_animation_scale() const;
  void clear_transition_animation_scale();
  const ::android::providers::settings::SettingProto& transition_animation_scale() const;
  ::android::providers::settings::SettingProto* release_transition_animation_scale();
  ::android::providers::settings::SettingProto* mutable_transition_animation_scale();
  void set_allocated_transition_animation_scale(::android::providers::settings::SettingProto* transition_animation_scale);

  // optional .android.providers.settings.GlobalSettingsProto.Tzinfo tzinfo = 125;
  bool has_tzinfo() const;
  void clear_tzinfo();
  const ::android::providers::settings::GlobalSettingsProto_Tzinfo& tzinfo() const;
  ::android::providers::settings::GlobalSettingsProto_Tzinfo* release_tzinfo();
  ::android::providers::settings::GlobalSettingsProto_Tzinfo* mutable_tzinfo();
  void set_allocated_tzinfo(::android::providers::settings::GlobalSettingsProto_Tzinfo* tzinfo);

  // optional .android.providers.settings.SettingProto unused_static_shared_lib_min_cache_period_ms = 126 [(.android.privacy) = {
  bool has_unused_static_shared_lib_min_cache_period_ms() const;
  void clear_unused_static_shared_lib_min_cache_period_ms();
  const ::android::providers::settings::SettingProto& unused_static_shared_lib_min_cache_period_ms() const;
  ::android::providers::settings::SettingProto* release_unused_static_shared_lib_min_cache_period_ms();
  ::android::providers::settings::SettingProto* mutable_unused_static_shared_lib_min_cache_period_ms();
  void set_allocated_unused_static_shared_lib_min_cache_period_ms(::android::providers::settings::SettingProto* unused_static_shared_lib_min_cache_period_ms);

  // optional .android.providers.settings.SettingProto usb_mass_storage_enabled = 127 [(.android.privacy) = {
  bool has_usb_mass_storage_enabled() const;
  void clear_usb_mass_storage_enabled();
  const ::android::providers::settings::SettingProto& usb_mass_storage_enabled() const;
  ::android::providers::settings::SettingProto* release_usb_mass_storage_enabled();
  ::android::providers::settings::SettingProto* mutable_usb_mass_storage_enabled();
  void set_allocated_usb_mass_storage_enabled(::android::providers::settings::SettingProto* usb_mass_storage_enabled);

  // optional .android.providers.settings.SettingProto use_google_mail = 128 [(.android.privacy) = {
  bool has_use_google_mail() const;
  void clear_use_google_mail();
  const ::android::providers::settings::SettingProto& use_google_mail() const;
  ::android::providers::settings::SettingProto* release_use_google_mail();
  ::android::providers::settings::SettingProto* mutable_use_google_mail();
  void set_allocated_use_google_mail(::android::providers::settings::SettingProto* use_google_mail);

  // optional .android.providers.settings.SettingProto use_open_wifi_package = 129 [(.android.privacy) = {
  bool has_use_open_wifi_package() const;
  void clear_use_open_wifi_package();
  const ::android::providers::settings::SettingProto& use_open_wifi_package() const;
  ::android::providers::settings::SettingProto* release_use_open_wifi_package();
  ::android::providers::settings::SettingProto* mutable_use_open_wifi_package();
  void set_allocated_use_open_wifi_package(::android::providers::settings::SettingProto* use_open_wifi_package);

  // optional .android.providers.settings.SettingProto vt_ims_enabled = 130 [(.android.privacy) = {
  bool has_vt_ims_enabled() const;
  void clear_vt_ims_enabled();
  const ::android::providers::settings::SettingProto& vt_ims_enabled() const;
  ::android::providers::settings::SettingProto* release_vt_ims_enabled();
  ::android::providers::settings::SettingProto* mutable_vt_ims_enabled();
  void set_allocated_vt_ims_enabled(::android::providers::settings::SettingProto* vt_ims_enabled);

  // optional .android.providers.settings.SettingProto wait_for_debugger = 131 [(.android.privacy) = {
  bool has_wait_for_debugger() const;
  void clear_wait_for_debugger();
  const ::android::providers::settings::SettingProto& wait_for_debugger() const;
  ::android::providers::settings::SettingProto* release_wait_for_debugger();
  ::android::providers::settings::SettingProto* mutable_wait_for_debugger();
  void set_allocated_wait_for_debugger(::android::providers::settings::SettingProto* wait_for_debugger);

  // optional .android.providers.settings.GlobalSettingsProto.Webview webview = 132;
  bool has_webview() const;
  void clear_webview();
  const ::android::providers::settings::GlobalSettingsProto_Webview& webview() const;
  ::android::providers::settings::GlobalSettingsProto_Webview* release_webview();
  ::android::providers::settings::GlobalSettingsProto_Webview* mutable_webview();
  void set_allocated_webview(::android::providers::settings::GlobalSettingsProto_Webview* webview);

  // optional .android.providers.settings.GlobalSettingsProto.Wfc wfc = 133;
  bool has_wfc() const;
  void clear_wfc();
  const ::android::providers::settings::GlobalSettingsProto_Wfc& wfc() const;
  ::android::providers::settings::GlobalSettingsProto_Wfc* release_wfc();
  ::android::providers::settings::GlobalSettingsProto_Wfc* mutable_wfc();
  void set_allocated_wfc(::android::providers::settings::GlobalSettingsProto_Wfc* wfc);

  // optional .android.providers.settings.GlobalSettingsProto.Wifi wifi = 134;
  bool has_wifi() const;
  void clear_wifi();
  const ::android::providers::settings::GlobalSettingsProto_Wifi& wifi() const;
  ::android::providers::settings::GlobalSettingsProto_Wifi* release_wifi();
  ::android::providers::settings::GlobalSettingsProto_Wifi* mutable_wifi();
  void set_allocated_wifi(::android::providers::settings::GlobalSettingsProto_Wifi* wifi);

  // optional .android.providers.settings.SettingProto wimax_networks_available_notification_on = 135 [(.android.privacy) = {
  bool has_wimax_networks_available_notification_on() const;
  void clear_wimax_networks_available_notification_on();
  const ::android::providers::settings::SettingProto& wimax_networks_available_notification_on() const;
  ::android::providers::settings::SettingProto* release_wimax_networks_available_notification_on();
  ::android::providers::settings::SettingProto* mutable_wimax_networks_available_notification_on();
  void set_allocated_wimax_networks_available_notification_on(::android::providers::settings::SettingProto* wimax_networks_available_notification_on);

  // optional .android.providers.settings.SettingProto window_animation_scale = 136 [(.android.privacy) = {
  bool has_window_animation_scale() const;
  void clear_window_animation_scale();
  const ::android::providers::settings::SettingProto& window_animation_scale() const;
  ::android::providers::settings::SettingProto* release_window_animation_scale();
  ::android::providers::settings::SettingProto* mutable_window_animation_scale();
  void set_allocated_window_animation_scale(::android::providers::settings::SettingProto* window_animation_scale);

  // optional .android.providers.settings.SettingProto wtf_is_fatal = 137 [(.android.privacy) = {
  bool has_wtf_is_fatal() const;
  void clear_wtf_is_fatal();
  const ::android::providers::settings::SettingProto& wtf_is_fatal() const;
  ::android::providers::settings::SettingProto* release_wtf_is_fatal();
  ::android::providers::settings::SettingProto* mutable_wtf_is_fatal();
  void set_allocated_wtf_is_fatal(::android::providers::settings::SettingProto* wtf_is_fatal);

  // optional .android.providers.settings.GlobalSettingsProto.Zen zen = 138;
  bool has_zen() const;
  void clear_zen();
  const ::android::providers::settings::GlobalSettingsProto_Zen& zen() const;
  ::android::providers::settings::GlobalSettingsProto_Zen* release_zen();
  ::android::providers::settings::GlobalSettingsProto_Zen* mutable_zen();
  void set_allocated_zen(::android::providers::settings::GlobalSettingsProto_Zen* zen);

  // optional .android.providers.settings.SettingProto zram_enabled = 139 [(.android.privacy) = {
  bool has_zram_enabled() const;
  void clear_zram_enabled();
  const ::android::providers::settings::SettingProto& zram_enabled() const;
  ::android::providers::settings::SettingProto* release_zram_enabled();
  ::android::providers::settings::SettingProto* mutable_zram_enabled();
  void set_allocated_zram_enabled(::android::providers::settings::SettingProto* zram_enabled);

  // optional .android.providers.settings.GlobalSettingsProto.Autofill autofill = 140;
  bool has_autofill() const;
  void clear_autofill();
  const ::android::providers::settings::GlobalSettingsProto_Autofill& autofill() const;
  ::android::providers::settings::GlobalSettingsProto_Autofill* release_autofill();
  ::android::providers::settings::GlobalSettingsProto_Autofill* mutable_autofill();
  void set_allocated_autofill(::android::providers::settings::GlobalSettingsProto_Autofill* autofill);

  // optional .android.providers.settings.SettingProto show_hidden_launcher_icon_apps_enabled = 141 [(.android.privacy) = {
  bool has_show_hidden_launcher_icon_apps_enabled() const;
  void clear_show_hidden_launcher_icon_apps_enabled();
  const ::android::providers::settings::SettingProto& show_hidden_launcher_icon_apps_enabled() const;
  ::android::providers::settings::SettingProto* release_show_hidden_launcher_icon_apps_enabled();
  ::android::providers::settings::SettingProto* mutable_show_hidden_launcher_icon_apps_enabled();
  void set_allocated_show_hidden_launcher_icon_apps_enabled(::android::providers::settings::SettingProto* show_hidden_launcher_icon_apps_enabled);

  // optional .android.providers.settings.SettingProto show_new_app_installed_notification_enabled = 142 [(.android.privacy) = {
  bool has_show_new_app_installed_notification_enabled() const;
  void clear_show_new_app_installed_notification_enabled();
  const ::android::providers::settings::SettingProto& show_new_app_installed_notification_enabled() const;
  ::android::providers::settings::SettingProto* release_show_new_app_installed_notification_enabled();
  ::android::providers::settings::SettingProto* mutable_show_new_app_installed_notification_enabled();
  void set_allocated_show_new_app_installed_notification_enabled(::android::providers::settings::SettingProto* show_new_app_installed_notification_enabled);

  // optional .android.providers.settings.GlobalSettingsProto.DynamicPowerSavings dynamic_power_savings = 143;
  bool has_dynamic_power_savings() const;
  void clear_dynamic_power_savings();
  const ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings& dynamic_power_savings() const;
  ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* release_dynamic_power_savings();
  ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* mutable_dynamic_power_savings();
  void set_allocated_dynamic_power_savings(::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* dynamic_power_savings);

  // optional .android.providers.settings.SettingProto native_flags_health_check_enabled = 144 [(.android.privacy) = {
  bool has_native_flags_health_check_enabled() const;
  void clear_native_flags_health_check_enabled();
  const ::android::providers::settings::SettingProto& native_flags_health_check_enabled() const;
  ::android::providers::settings::SettingProto* release_native_flags_health_check_enabled();
  ::android::providers::settings::SettingProto* mutable_native_flags_health_check_enabled();
  void set_allocated_native_flags_health_check_enabled(::android::providers::settings::SettingProto* native_flags_health_check_enabled);

  // optional .android.providers.settings.SettingProto text_classifier_action_model_params = 145 [(.android.privacy) = {
  bool has_text_classifier_action_model_params() const;
  void clear_text_classifier_action_model_params();
  const ::android::providers::settings::SettingProto& text_classifier_action_model_params() const;
  ::android::providers::settings::SettingProto* release_text_classifier_action_model_params();
  ::android::providers::settings::SettingProto* mutable_text_classifier_action_model_params();
  void set_allocated_text_classifier_action_model_params(::android::providers::settings::SettingProto* text_classifier_action_model_params);

  // optional .android.providers.settings.GlobalSettingsProto.Backup backup = 146;
  bool has_backup() const;
  void clear_backup();
  const ::android::providers::settings::GlobalSettingsProto_Backup& backup() const;
  ::android::providers::settings::GlobalSettingsProto_Backup* release_backup();
  ::android::providers::settings::GlobalSettingsProto_Backup* mutable_backup();
  void set_allocated_backup(::android::providers::settings::GlobalSettingsProto_Backup* backup);

  // optional .android.providers.settings.SettingProto apply_ramping_ringer = 147 [(.android.privacy) = {
  bool has_apply_ramping_ringer() const;
  void clear_apply_ramping_ringer();
  const ::android::providers::settings::SettingProto& apply_ramping_ringer() const;
  ::android::providers::settings::SettingProto* release_apply_ramping_ringer();
  ::android::providers::settings::SettingProto* mutable_apply_ramping_ringer();
  void set_allocated_apply_ramping_ringer(::android::providers::settings::SettingProto* apply_ramping_ringer);

  // optional .android.providers.settings.SettingProto app_ops_constants = 148 [(.android.privacy) = {
  bool has_app_ops_constants() const;
  void clear_app_ops_constants();
  const ::android::providers::settings::SettingProto& app_ops_constants() const;
  ::android::providers::settings::SettingProto* release_app_ops_constants();
  ::android::providers::settings::SettingProto* mutable_app_ops_constants();
  void set_allocated_app_ops_constants(::android::providers::settings::SettingProto* app_ops_constants);

  // optional .android.providers.settings.SettingProto cached_apps_freezer_enabled = 152 [(.android.privacy) = {
  bool has_cached_apps_freezer_enabled() const;
  void clear_cached_apps_freezer_enabled();
  const ::android::providers::settings::SettingProto& cached_apps_freezer_enabled() const;
  ::android::providers::settings::SettingProto* release_cached_apps_freezer_enabled();
  ::android::providers::settings::SettingProto* mutable_cached_apps_freezer_enabled();
  void set_allocated_cached_apps_freezer_enabled(::android::providers::settings::SettingProto* cached_apps_freezer_enabled);

  // optional .android.providers.settings.SettingProto nr_nsa_tracking_screen_off_mode = 153 [(.android.privacy) = {
  bool has_nr_nsa_tracking_screen_off_mode() const;
  void clear_nr_nsa_tracking_screen_off_mode();
  const ::android::providers::settings::SettingProto& nr_nsa_tracking_screen_off_mode() const;
  ::android::providers::settings::SettingProto* release_nr_nsa_tracking_screen_off_mode();
  ::android::providers::settings::SettingProto* mutable_nr_nsa_tracking_screen_off_mode();
  void set_allocated_nr_nsa_tracking_screen_off_mode(::android::providers::settings::SettingProto* nr_nsa_tracking_screen_off_mode);

  // optional .android.providers.settings.SettingProto power_button_long_press_duration_ms = 154 [(.android.privacy) = {
  bool has_power_button_long_press_duration_ms() const;
  void clear_power_button_long_press_duration_ms();
  const ::android::providers::settings::SettingProto& power_button_long_press_duration_ms() const;
  ::android::providers::settings::SettingProto* release_power_button_long_press_duration_ms();
  ::android::providers::settings::SettingProto* mutable_power_button_long_press_duration_ms();
  void set_allocated_power_button_long_press_duration_ms(::android::providers::settings::SettingProto* power_button_long_press_duration_ms);

  // optional .android.providers.settings.SettingProto uwb_enabled = 155 [(.android.privacy) = {
  bool has_uwb_enabled() const;
  void clear_uwb_enabled();
  const ::android::providers::settings::SettingProto& uwb_enabled() const;
  ::android::providers::settings::SettingProto* release_uwb_enabled();
  ::android::providers::settings::SettingProto* mutable_uwb_enabled();
  void set_allocated_uwb_enabled(::android::providers::settings::SettingProto* uwb_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.GlobalSettingsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<5> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto > historical_operations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > error_logcat_lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > max_error_bytes_;
  ::android::providers::settings::SettingProto* activity_manager_constants_;
  ::android::providers::settings::SettingProto* adb_enabled_;
  ::android::providers::settings::SettingProto* add_users_when_locked_;
  ::android::providers::settings::GlobalSettingsProto_AirplaneMode* airplane_mode_;
  ::android::providers::settings::SettingProto* allow_user_switching_when_system_user_locked_;
  ::android::providers::settings::SettingProto* always_on_display_constants_;
  ::android::providers::settings::SettingProto* always_finish_activities_;
  ::android::providers::settings::SettingProto* animator_duration_scale_;
  ::android::providers::settings::GlobalSettingsProto_Anomaly* anomaly_;
  ::android::providers::settings::GlobalSettingsProto_ApnDb* apn_db_;
  ::android::providers::settings::GlobalSettingsProto_App* app_;
  ::android::providers::settings::SettingProto* assisted_gps_enabled_;
  ::android::providers::settings::SettingProto* audio_safe_volume_state_;
  ::android::providers::settings::GlobalSettingsProto_DateTime* date_time_;
  ::android::providers::settings::GlobalSettingsProto_Battery* battery_;
  ::android::providers::settings::GlobalSettingsProto_BleScan* ble_scan_;
  ::android::providers::settings::GlobalSettingsProto_Bluetooth* bluetooth_;
  ::android::providers::settings::SettingProto* boot_count_;
  ::android::providers::settings::SettingProto* bugreport_in_power_menu_;
  ::android::providers::settings::SettingProto* call_auto_retry_;
  ::android::providers::settings::GlobalSettingsProto_CaptivePortal* captive_portal_;
  ::android::providers::settings::GlobalSettingsProto_Carrier* carrier_;
  ::android::providers::settings::GlobalSettingsProto_Cdma* cdma_;
  ::android::providers::settings::SettingProto* cell_on_;
  ::android::providers::settings::GlobalSettingsProto_CertPin* cert_pin_;
  ::android::providers::settings::SettingProto* chained_battery_attribution_enabled_;
  ::android::providers::settings::SettingProto* compatibility_mode_;
  ::android::providers::settings::GlobalSettingsProto_Connectivity* connectivity_;
  ::android::providers::settings::SettingProto* contact_metadata_sync_enabled_;
  ::android::providers::settings::SettingProto* contacts_database_wal_enabled_;
  ::android::providers::settings::GlobalSettingsProto_Data* data_;
  ::android::providers::settings::GlobalSettingsProto_Database* database_;
  ::android::providers::settings::GlobalSettingsProto_Debug* debug_;
  ::android::providers::settings::GlobalSettingsProto_Default* default__;
  ::android::providers::settings::GlobalSettingsProto_Development* development_;
  ::android::providers::settings::GlobalSettingsProto_Device* device_;
  ::android::providers::settings::SettingProto* disk_free_change_reporting_threshold_;
  ::android::providers::settings::GlobalSettingsProto_Display* display_;
  ::android::providers::settings::GlobalSettingsProto_DnsResolver* dns_resolver_;
  ::android::providers::settings::SettingProto* dock_audio_media_enabled_;
  ::android::providers::settings::GlobalSettingsProto_Download* download_;
  ::android::providers::settings::GlobalSettingsProto_Dropbox* dropbox_;
  ::android::providers::settings::GlobalSettingsProto_Emergency* emergency_;
  ::android::providers::settings::GlobalSettingsProto_Enable* enable_;
  ::android::providers::settings::SettingProto* encoded_surround_output_;
  ::android::providers::settings::SettingProto* enhanced_4g_mode_enabled_;
  ::android::providers::settings::GlobalSettingsProto_Euicc* euicc_;
  ::android::providers::settings::SettingProto* fancy_ime_animations_;
  ::android::providers::settings::SettingProto* force_allow_on_external_;
  ::android::providers::settings::SettingProto* fps_divisor_;
  ::android::providers::settings::SettingProto* fstrim_mandatory_interval_;
  ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* global_http_proxy_;
  ::android::providers::settings::SettingProto* gprs_register_check_period_ms_;
  ::android::providers::settings::GlobalSettingsProto_Gpu* gpu_;
  ::android::providers::settings::GlobalSettingsProto_Hdmi* hdmi_;
  ::android::providers::settings::SettingProto* heads_up_notifications_enabled_;
  ::android::providers::settings::SettingProto* hidden_api_blacklist_exemptions_;
  ::android::providers::settings::GlobalSettingsProto_InetCondition* inet_condition_;
  ::android::providers::settings::GlobalSettingsProto_InstantApp* instant_app_;
  ::android::providers::settings::GlobalSettingsProto_IntentFirewall* intent_firewall_;
  ::android::providers::settings::SettingProto* keep_profile_in_background_;
  ::android::providers::settings::GlobalSettingsProto_LangId* lang_id_;
  ::android::providers::settings::GlobalSettingsProto_Location* location_;
  ::android::providers::settings::GlobalSettingsProto_LowPowerMode* low_power_mode_;
  ::android::providers::settings::SettingProto* lte_service_forced_;
  ::android::providers::settings::SettingProto* mdc_initial_max_retry_;
  ::android::providers::settings::GlobalSettingsProto_Mhl* mhl_;
  ::android::providers::settings::GlobalSettingsProto_MobileData* mobile_data_;
  ::android::providers::settings::SettingProto* mode_ringer_;
  ::android::providers::settings::GlobalSettingsProto_MultiSim* multi_sim_;
  ::android::providers::settings::GlobalSettingsProto_Netstats* netstats_;
  ::android::providers::settings::GlobalSettingsProto_Network* network_;
  ::android::providers::settings::SettingProto* new_contact_aggregator_;
  ::android::providers::settings::SettingProto* night_display_forced_auto_mode_available_;
  ::android::providers::settings::GlobalSettingsProto_NitzUpdate* nitz_update_;
  ::android::providers::settings::GlobalSettingsProto_Notification* notification_;
  ::android::providers::settings::SettingProto* nsd_on_;
  ::android::providers::settings::GlobalSettingsProto_Ntp* ntp_;
  ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* user_absent_small_battery_;
  ::android::providers::settings::SettingProto* ota_disable_automatic_update_;
  ::android::providers::settings::SettingProto* overlay_display_devices_;
  ::android::providers::settings::SettingProto* override_settings_provider_restore_any_version_;
  ::android::providers::settings::SettingProto* pac_change_delay_;
  ::android::providers::settings::GlobalSettingsProto_PackageVerifier* package_verifier_;
  ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* pdp_watchdog_;
  ::android::providers::settings::SettingProto* policy_control_;
  ::android::providers::settings::SettingProto* power_manager_constants_;
  ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* prepaid_setup_;
  ::android::providers::settings::GlobalSettingsProto_Private* private__;
  ::android::providers::settings::SettingProto* provisioning_apn_alarm_delay_in_ms_;
  ::android::providers::settings::SettingProto* read_external_storage_enforced_default_;
  ::android::providers::settings::SettingProto* require_password_to_decrypt_;
  ::android::providers::settings::SettingProto* safe_boot_disallowed_;
  ::android::providers::settings::GlobalSettingsProto_Selinux* selinux_;
  ::android::providers::settings::SettingProto* send_action_app_error_;
  ::android::providers::settings::SettingProto* set_install_location_;
  ::android::providers::settings::SettingProto* shortcut_manager_constants_;
  ::android::providers::settings::SettingProto* show_first_crash_dialog_;
  ::android::providers::settings::SettingProto* show_restart_in_crash_dialog_;
  ::android::providers::settings::SettingProto* show_mute_in_crash_dialog_;
  ::android::providers::settings::GlobalSettingsProto_SmartSelection* smart_selection_;
  ::android::providers::settings::GlobalSettingsProto_Sms* sms_;
  ::android::providers::settings::GlobalSettingsProto_Sounds* sounds_;
  ::android::providers::settings::GlobalSettingsProto_SoundTrigger* sound_trigger_;
  ::android::providers::settings::SettingProto* speed_label_cache_eviction_age_ms_;
  ::android::providers::settings::SettingProto* sqlite_compatibility_wal_flags_;
  ::android::providers::settings::SettingProto* stay_on_while_plugged_in_;
  ::android::providers::settings::GlobalSettingsProto_Storage* storage_;
  ::android::providers::settings::GlobalSettingsProto_Sync* sync_;
  ::android::providers::settings::GlobalSettingsProto_Sys* sys_;
  ::android::providers::settings::SettingProto* tcp_default_init_rwnd_;
  ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* temperature_warning_;
  ::android::providers::settings::GlobalSettingsProto_Tether* tether_;
  ::android::providers::settings::SettingProto* text_classifier_constants_;
  ::android::providers::settings::SettingProto* theater_mode_on_;
  ::android::providers::settings::SettingProto* time_only_mode_constants_;
  ::android::providers::settings::SettingProto* transition_animation_scale_;
  ::android::providers::settings::GlobalSettingsProto_Tzinfo* tzinfo_;
  ::android::providers::settings::SettingProto* unused_static_shared_lib_min_cache_period_ms_;
  ::android::providers::settings::SettingProto* usb_mass_storage_enabled_;
  ::android::providers::settings::SettingProto* use_google_mail_;
  ::android::providers::settings::SettingProto* use_open_wifi_package_;
  ::android::providers::settings::SettingProto* vt_ims_enabled_;
  ::android::providers::settings::SettingProto* wait_for_debugger_;
  ::android::providers::settings::GlobalSettingsProto_Webview* webview_;
  ::android::providers::settings::GlobalSettingsProto_Wfc* wfc_;
  ::android::providers::settings::GlobalSettingsProto_Wifi* wifi_;
  ::android::providers::settings::SettingProto* wimax_networks_available_notification_on_;
  ::android::providers::settings::SettingProto* window_animation_scale_;
  ::android::providers::settings::SettingProto* wtf_is_fatal_;
  ::android::providers::settings::GlobalSettingsProto_Zen* zen_;
  ::android::providers::settings::SettingProto* zram_enabled_;
  ::android::providers::settings::GlobalSettingsProto_Autofill* autofill_;
  ::android::providers::settings::SettingProto* show_hidden_launcher_icon_apps_enabled_;
  ::android::providers::settings::SettingProto* show_new_app_installed_notification_enabled_;
  ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* dynamic_power_savings_;
  ::android::providers::settings::SettingProto* native_flags_health_check_enabled_;
  ::android::providers::settings::SettingProto* text_classifier_action_model_params_;
  ::android::providers::settings::GlobalSettingsProto_Backup* backup_;
  ::android::providers::settings::SettingProto* apply_ramping_ringer_;
  ::android::providers::settings::SettingProto* app_ops_constants_;
  ::android::providers::settings::SettingProto* cached_apps_freezer_enabled_;
  ::android::providers::settings::SettingProto* nr_nsa_tracking_screen_off_mode_;
  ::android::providers::settings::SettingProto* power_button_long_press_duration_ms_;
  ::android::providers::settings::SettingProto* uwb_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GlobalSettingsProto_AirplaneMode

// optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_AirplaneMode::has_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_AirplaneMode::on() const {
  const ::android::providers::settings::SettingProto* p = on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.AirplaneMode.on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_AirplaneMode::release_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.AirplaneMode.on)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = on_;
  on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_AirplaneMode::mutable_on() {
  _has_bits_[0] |= 0x00000001u;
  if (on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.AirplaneMode.on)
  return on_;
}
inline void GlobalSettingsProto_AirplaneMode::set_allocated_on(::android::providers::settings::SettingProto* on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(on_);
  }
  if (on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  on_ = on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.AirplaneMode.on)
}

// optional .android.providers.settings.SettingProto radios = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_AirplaneMode::has_radios() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_AirplaneMode::radios() const {
  const ::android::providers::settings::SettingProto* p = radios_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.AirplaneMode.radios)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_AirplaneMode::release_radios() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.AirplaneMode.radios)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = radios_;
  radios_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_AirplaneMode::mutable_radios() {
  _has_bits_[0] |= 0x00000002u;
  if (radios_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    radios_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.AirplaneMode.radios)
  return radios_;
}
inline void GlobalSettingsProto_AirplaneMode::set_allocated_radios(::android::providers::settings::SettingProto* radios) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(radios_);
  }
  if (radios) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      radios = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radios, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  radios_ = radios;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.AirplaneMode.radios)
}

// optional .android.providers.settings.SettingProto toggleable_radios = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_AirplaneMode::has_toggleable_radios() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_AirplaneMode::toggleable_radios() const {
  const ::android::providers::settings::SettingProto* p = toggleable_radios_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.AirplaneMode.toggleable_radios)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_AirplaneMode::release_toggleable_radios() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.AirplaneMode.toggleable_radios)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = toggleable_radios_;
  toggleable_radios_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_AirplaneMode::mutable_toggleable_radios() {
  _has_bits_[0] |= 0x00000004u;
  if (toggleable_radios_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    toggleable_radios_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.AirplaneMode.toggleable_radios)
  return toggleable_radios_;
}
inline void GlobalSettingsProto_AirplaneMode::set_allocated_toggleable_radios(::android::providers::settings::SettingProto* toggleable_radios) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(toggleable_radios_);
  }
  if (toggleable_radios) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      toggleable_radios = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toggleable_radios, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  toggleable_radios_ = toggleable_radios;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.AirplaneMode.toggleable_radios)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Anomaly

// optional .android.providers.settings.SettingProto detection_constants = 1;
inline bool GlobalSettingsProto_Anomaly::has_detection_constants() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Anomaly::detection_constants() const {
  const ::android::providers::settings::SettingProto* p = detection_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Anomaly.detection_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Anomaly::release_detection_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Anomaly.detection_constants)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = detection_constants_;
  detection_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Anomaly::mutable_detection_constants() {
  _has_bits_[0] |= 0x00000001u;
  if (detection_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    detection_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Anomaly.detection_constants)
  return detection_constants_;
}
inline void GlobalSettingsProto_Anomaly::set_allocated_detection_constants(::android::providers::settings::SettingProto* detection_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_constants_);
  }
  if (detection_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  detection_constants_ = detection_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Anomaly.detection_constants)
}

// optional .android.providers.settings.SettingProto config_version = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Anomaly::has_config_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Anomaly::config_version() const {
  const ::android::providers::settings::SettingProto* p = config_version_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Anomaly.config_version)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Anomaly::release_config_version() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Anomaly.config_version)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = config_version_;
  config_version_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Anomaly::mutable_config_version() {
  _has_bits_[0] |= 0x00000002u;
  if (config_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    config_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Anomaly.config_version)
  return config_version_;
}
inline void GlobalSettingsProto_Anomaly::set_allocated_config_version(::android::providers::settings::SettingProto* config_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_version_);
  }
  if (config_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  config_version_ = config_version;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Anomaly.config_version)
}

// optional .android.providers.settings.SettingProto config = 3;
inline bool GlobalSettingsProto_Anomaly::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Anomaly::config() const {
  const ::android::providers::settings::SettingProto* p = config_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Anomaly.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Anomaly::release_config() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Anomaly.config)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Anomaly::mutable_config() {
  _has_bits_[0] |= 0x00000004u;
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Anomaly.config)
  return config_;
}
inline void GlobalSettingsProto_Anomaly::set_allocated_config(::android::providers::settings::SettingProto* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Anomaly.config)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_ApnDb

// optional .android.providers.settings.SettingProto update_content_url = 1;
inline bool GlobalSettingsProto_ApnDb::has_update_content_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_ApnDb::update_content_url() const {
  const ::android::providers::settings::SettingProto* p = update_content_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.ApnDb.update_content_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_ApnDb::release_update_content_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.ApnDb.update_content_url)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = update_content_url_;
  update_content_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_ApnDb::mutable_update_content_url() {
  _has_bits_[0] |= 0x00000001u;
  if (update_content_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_content_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.ApnDb.update_content_url)
  return update_content_url_;
}
inline void GlobalSettingsProto_ApnDb::set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_content_url_);
  }
  if (update_content_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_content_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_content_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_content_url_ = update_content_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.ApnDb.update_content_url)
}

// optional .android.providers.settings.SettingProto update_metadata_url = 2;
inline bool GlobalSettingsProto_ApnDb::has_update_metadata_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_ApnDb::update_metadata_url() const {
  const ::android::providers::settings::SettingProto* p = update_metadata_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.ApnDb.update_metadata_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_ApnDb::release_update_metadata_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.ApnDb.update_metadata_url)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = update_metadata_url_;
  update_metadata_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_ApnDb::mutable_update_metadata_url() {
  _has_bits_[0] |= 0x00000002u;
  if (update_metadata_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_metadata_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.ApnDb.update_metadata_url)
  return update_metadata_url_;
}
inline void GlobalSettingsProto_ApnDb::set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_metadata_url_);
  }
  if (update_metadata_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_metadata_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_metadata_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_metadata_url_ = update_metadata_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.ApnDb.update_metadata_url)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_App

// optional .android.providers.settings.SettingProto standby_enabled = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_App::has_standby_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_App::standby_enabled() const {
  const ::android::providers::settings::SettingProto* p = standby_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.App.standby_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_App::release_standby_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.App.standby_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = standby_enabled_;
  standby_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_App::mutable_standby_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (standby_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    standby_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.App.standby_enabled)
  return standby_enabled_;
}
inline void GlobalSettingsProto_App::set_allocated_standby_enabled(::android::providers::settings::SettingProto* standby_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(standby_enabled_);
  }
  if (standby_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      standby_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standby_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  standby_enabled_ = standby_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.App.standby_enabled)
}

// optional .android.providers.settings.SettingProto auto_restriction_enabled = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_App::has_auto_restriction_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_App::auto_restriction_enabled() const {
  const ::android::providers::settings::SettingProto* p = auto_restriction_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.App.auto_restriction_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_App::release_auto_restriction_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.App.auto_restriction_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = auto_restriction_enabled_;
  auto_restriction_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_App::mutable_auto_restriction_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (auto_restriction_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_restriction_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.App.auto_restriction_enabled)
  return auto_restriction_enabled_;
}
inline void GlobalSettingsProto_App::set_allocated_auto_restriction_enabled(::android::providers::settings::SettingProto* auto_restriction_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_restriction_enabled_);
  }
  if (auto_restriction_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_restriction_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_restriction_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auto_restriction_enabled_ = auto_restriction_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.App.auto_restriction_enabled)
}

// optional .android.providers.settings.SettingProto forced_app_standby_enabled = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_App::has_forced_app_standby_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_App::forced_app_standby_enabled() const {
  const ::android::providers::settings::SettingProto* p = forced_app_standby_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.App.forced_app_standby_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_App::release_forced_app_standby_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.App.forced_app_standby_enabled)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = forced_app_standby_enabled_;
  forced_app_standby_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_App::mutable_forced_app_standby_enabled() {
  _has_bits_[0] |= 0x00000004u;
  if (forced_app_standby_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    forced_app_standby_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.App.forced_app_standby_enabled)
  return forced_app_standby_enabled_;
}
inline void GlobalSettingsProto_App::set_allocated_forced_app_standby_enabled(::android::providers::settings::SettingProto* forced_app_standby_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forced_app_standby_enabled_);
  }
  if (forced_app_standby_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forced_app_standby_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forced_app_standby_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  forced_app_standby_enabled_ = forced_app_standby_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.App.forced_app_standby_enabled)
}

// optional .android.providers.settings.SettingProto forced_app_standby_for_small_battery_enabled = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_App::has_forced_app_standby_for_small_battery_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_App::forced_app_standby_for_small_battery_enabled() const {
  const ::android::providers::settings::SettingProto* p = forced_app_standby_for_small_battery_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.App.forced_app_standby_for_small_battery_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_App::release_forced_app_standby_for_small_battery_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.App.forced_app_standby_for_small_battery_enabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = forced_app_standby_for_small_battery_enabled_;
  forced_app_standby_for_small_battery_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_App::mutable_forced_app_standby_for_small_battery_enabled() {
  _has_bits_[0] |= 0x00000008u;
  if (forced_app_standby_for_small_battery_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    forced_app_standby_for_small_battery_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.App.forced_app_standby_for_small_battery_enabled)
  return forced_app_standby_for_small_battery_enabled_;
}
inline void GlobalSettingsProto_App::set_allocated_forced_app_standby_for_small_battery_enabled(::android::providers::settings::SettingProto* forced_app_standby_for_small_battery_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(forced_app_standby_for_small_battery_enabled_);
  }
  if (forced_app_standby_for_small_battery_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forced_app_standby_for_small_battery_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forced_app_standby_for_small_battery_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  forced_app_standby_for_small_battery_enabled_ = forced_app_standby_for_small_battery_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.App.forced_app_standby_for_small_battery_enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Autofill

// optional .android.providers.settings.SettingProto compat_mode_allowed_packages = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Autofill::has_compat_mode_allowed_packages() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Autofill::compat_mode_allowed_packages() const {
  const ::android::providers::settings::SettingProto* p = compat_mode_allowed_packages_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Autofill.compat_mode_allowed_packages)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Autofill::release_compat_mode_allowed_packages() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Autofill.compat_mode_allowed_packages)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = compat_mode_allowed_packages_;
  compat_mode_allowed_packages_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Autofill::mutable_compat_mode_allowed_packages() {
  _has_bits_[0] |= 0x00000001u;
  if (compat_mode_allowed_packages_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    compat_mode_allowed_packages_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Autofill.compat_mode_allowed_packages)
  return compat_mode_allowed_packages_;
}
inline void GlobalSettingsProto_Autofill::set_allocated_compat_mode_allowed_packages(::android::providers::settings::SettingProto* compat_mode_allowed_packages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compat_mode_allowed_packages_);
  }
  if (compat_mode_allowed_packages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compat_mode_allowed_packages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compat_mode_allowed_packages, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  compat_mode_allowed_packages_ = compat_mode_allowed_packages;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Autofill.compat_mode_allowed_packages)
}

// optional .android.providers.settings.SettingProto logging_level = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Autofill::has_logging_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Autofill::logging_level() const {
  const ::android::providers::settings::SettingProto* p = logging_level_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Autofill.logging_level)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Autofill::release_logging_level() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Autofill.logging_level)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = logging_level_;
  logging_level_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Autofill::mutable_logging_level() {
  _has_bits_[0] |= 0x00000002u;
  if (logging_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    logging_level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Autofill.logging_level)
  return logging_level_;
}
inline void GlobalSettingsProto_Autofill::set_allocated_logging_level(::android::providers::settings::SettingProto* logging_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logging_level_);
  }
  if (logging_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logging_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging_level, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  logging_level_ = logging_level;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Autofill.logging_level)
}

// optional .android.providers.settings.SettingProto max_partitions_size = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Autofill::has_max_partitions_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Autofill::max_partitions_size() const {
  const ::android::providers::settings::SettingProto* p = max_partitions_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Autofill.max_partitions_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Autofill::release_max_partitions_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Autofill.max_partitions_size)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = max_partitions_size_;
  max_partitions_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Autofill::mutable_max_partitions_size() {
  _has_bits_[0] |= 0x00000004u;
  if (max_partitions_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_partitions_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Autofill.max_partitions_size)
  return max_partitions_size_;
}
inline void GlobalSettingsProto_Autofill::set_allocated_max_partitions_size(::android::providers::settings::SettingProto* max_partitions_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_partitions_size_);
  }
  if (max_partitions_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_partitions_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_partitions_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  max_partitions_size_ = max_partitions_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Autofill.max_partitions_size)
}

// optional .android.providers.settings.SettingProto max_visible_datasets = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Autofill::has_max_visible_datasets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Autofill::max_visible_datasets() const {
  const ::android::providers::settings::SettingProto* p = max_visible_datasets_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Autofill.max_visible_datasets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Autofill::release_max_visible_datasets() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Autofill.max_visible_datasets)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = max_visible_datasets_;
  max_visible_datasets_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Autofill::mutable_max_visible_datasets() {
  _has_bits_[0] |= 0x00000008u;
  if (max_visible_datasets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_visible_datasets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Autofill.max_visible_datasets)
  return max_visible_datasets_;
}
inline void GlobalSettingsProto_Autofill::set_allocated_max_visible_datasets(::android::providers::settings::SettingProto* max_visible_datasets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_visible_datasets_);
  }
  if (max_visible_datasets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_visible_datasets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_visible_datasets, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  max_visible_datasets_ = max_visible_datasets;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Autofill.max_visible_datasets)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Backup

// optional .android.providers.settings.SettingProto backup_agent_timeout_parameters = 1;
inline bool GlobalSettingsProto_Backup::has_backup_agent_timeout_parameters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Backup::backup_agent_timeout_parameters() const {
  const ::android::providers::settings::SettingProto* p = backup_agent_timeout_parameters_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Backup.backup_agent_timeout_parameters)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Backup::release_backup_agent_timeout_parameters() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Backup.backup_agent_timeout_parameters)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = backup_agent_timeout_parameters_;
  backup_agent_timeout_parameters_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Backup::mutable_backup_agent_timeout_parameters() {
  _has_bits_[0] |= 0x00000001u;
  if (backup_agent_timeout_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    backup_agent_timeout_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Backup.backup_agent_timeout_parameters)
  return backup_agent_timeout_parameters_;
}
inline void GlobalSettingsProto_Backup::set_allocated_backup_agent_timeout_parameters(::android::providers::settings::SettingProto* backup_agent_timeout_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(backup_agent_timeout_parameters_);
  }
  if (backup_agent_timeout_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      backup_agent_timeout_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup_agent_timeout_parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  backup_agent_timeout_parameters_ = backup_agent_timeout_parameters;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Backup.backup_agent_timeout_parameters)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Battery

// optional .android.providers.settings.SettingProto discharge_duration_threshold = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Battery::has_discharge_duration_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Battery::discharge_duration_threshold() const {
  const ::android::providers::settings::SettingProto* p = discharge_duration_threshold_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Battery.discharge_duration_threshold)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::release_discharge_duration_threshold() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Battery.discharge_duration_threshold)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = discharge_duration_threshold_;
  discharge_duration_threshold_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::mutable_discharge_duration_threshold() {
  _has_bits_[0] |= 0x00000001u;
  if (discharge_duration_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    discharge_duration_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Battery.discharge_duration_threshold)
  return discharge_duration_threshold_;
}
inline void GlobalSettingsProto_Battery::set_allocated_discharge_duration_threshold(::android::providers::settings::SettingProto* discharge_duration_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(discharge_duration_threshold_);
  }
  if (discharge_duration_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      discharge_duration_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discharge_duration_threshold, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  discharge_duration_threshold_ = discharge_duration_threshold;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Battery.discharge_duration_threshold)
}

// optional .android.providers.settings.SettingProto discharge_threshold = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Battery::has_discharge_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Battery::discharge_threshold() const {
  const ::android::providers::settings::SettingProto* p = discharge_threshold_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Battery.discharge_threshold)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::release_discharge_threshold() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Battery.discharge_threshold)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = discharge_threshold_;
  discharge_threshold_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::mutable_discharge_threshold() {
  _has_bits_[0] |= 0x00000002u;
  if (discharge_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    discharge_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Battery.discharge_threshold)
  return discharge_threshold_;
}
inline void GlobalSettingsProto_Battery::set_allocated_discharge_threshold(::android::providers::settings::SettingProto* discharge_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(discharge_threshold_);
  }
  if (discharge_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      discharge_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discharge_threshold, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  discharge_threshold_ = discharge_threshold;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Battery.discharge_threshold)
}

// optional .android.providers.settings.SettingProto saver_constants = 3;
inline bool GlobalSettingsProto_Battery::has_saver_constants() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Battery::saver_constants() const {
  const ::android::providers::settings::SettingProto* p = saver_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Battery.saver_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::release_saver_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Battery.saver_constants)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = saver_constants_;
  saver_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::mutable_saver_constants() {
  _has_bits_[0] |= 0x00000004u;
  if (saver_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    saver_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Battery.saver_constants)
  return saver_constants_;
}
inline void GlobalSettingsProto_Battery::set_allocated_saver_constants(::android::providers::settings::SettingProto* saver_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(saver_constants_);
  }
  if (saver_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      saver_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saver_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  saver_constants_ = saver_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Battery.saver_constants)
}

// optional .android.providers.settings.SettingProto saver_device_specific_constants = 4;
inline bool GlobalSettingsProto_Battery::has_saver_device_specific_constants() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Battery::saver_device_specific_constants() const {
  const ::android::providers::settings::SettingProto* p = saver_device_specific_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Battery.saver_device_specific_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::release_saver_device_specific_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Battery.saver_device_specific_constants)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = saver_device_specific_constants_;
  saver_device_specific_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::mutable_saver_device_specific_constants() {
  _has_bits_[0] |= 0x00000008u;
  if (saver_device_specific_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    saver_device_specific_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Battery.saver_device_specific_constants)
  return saver_device_specific_constants_;
}
inline void GlobalSettingsProto_Battery::set_allocated_saver_device_specific_constants(::android::providers::settings::SettingProto* saver_device_specific_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(saver_device_specific_constants_);
  }
  if (saver_device_specific_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      saver_device_specific_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saver_device_specific_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  saver_device_specific_constants_ = saver_device_specific_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Battery.saver_device_specific_constants)
}

// optional .android.providers.settings.SettingProto stats_constants = 5;
inline bool GlobalSettingsProto_Battery::has_stats_constants() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Battery::stats_constants() const {
  const ::android::providers::settings::SettingProto* p = stats_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Battery.stats_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::release_stats_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Battery.stats_constants)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = stats_constants_;
  stats_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::mutable_stats_constants() {
  _has_bits_[0] |= 0x00000010u;
  if (stats_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    stats_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Battery.stats_constants)
  return stats_constants_;
}
inline void GlobalSettingsProto_Battery::set_allocated_stats_constants(::android::providers::settings::SettingProto* stats_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_constants_);
  }
  if (stats_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  stats_constants_ = stats_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Battery.stats_constants)
}

// optional .android.providers.settings.SettingProto tip_constants = 6;
inline bool GlobalSettingsProto_Battery::has_tip_constants() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Battery::tip_constants() const {
  const ::android::providers::settings::SettingProto* p = tip_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Battery.tip_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::release_tip_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Battery.tip_constants)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = tip_constants_;
  tip_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Battery::mutable_tip_constants() {
  _has_bits_[0] |= 0x00000020u;
  if (tip_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    tip_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Battery.tip_constants)
  return tip_constants_;
}
inline void GlobalSettingsProto_Battery::set_allocated_tip_constants(::android::providers::settings::SettingProto* tip_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tip_constants_);
  }
  if (tip_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tip_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tip_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  tip_constants_ = tip_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Battery.tip_constants)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_BleScan

// optional .android.providers.settings.SettingProto always_available = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_BleScan::has_always_available() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_BleScan::always_available() const {
  const ::android::providers::settings::SettingProto* p = always_available_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.BleScan.always_available)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::release_always_available() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.BleScan.always_available)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = always_available_;
  always_available_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::mutable_always_available() {
  _has_bits_[0] |= 0x00000001u;
  if (always_available_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    always_available_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.BleScan.always_available)
  return always_available_;
}
inline void GlobalSettingsProto_BleScan::set_allocated_always_available(::android::providers::settings::SettingProto* always_available) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(always_available_);
  }
  if (always_available) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      always_available = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, always_available, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  always_available_ = always_available;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.BleScan.always_available)
}

// optional .android.providers.settings.SettingProto low_power_window_ms = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_BleScan::has_low_power_window_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_BleScan::low_power_window_ms() const {
  const ::android::providers::settings::SettingProto* p = low_power_window_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.BleScan.low_power_window_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::release_low_power_window_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.BleScan.low_power_window_ms)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = low_power_window_ms_;
  low_power_window_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::mutable_low_power_window_ms() {
  _has_bits_[0] |= 0x00000002u;
  if (low_power_window_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    low_power_window_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.BleScan.low_power_window_ms)
  return low_power_window_ms_;
}
inline void GlobalSettingsProto_BleScan::set_allocated_low_power_window_ms(::android::providers::settings::SettingProto* low_power_window_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_power_window_ms_);
  }
  if (low_power_window_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_power_window_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_power_window_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  low_power_window_ms_ = low_power_window_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.BleScan.low_power_window_ms)
}

// optional .android.providers.settings.SettingProto balanced_window_ms = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_BleScan::has_balanced_window_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_BleScan::balanced_window_ms() const {
  const ::android::providers::settings::SettingProto* p = balanced_window_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.BleScan.balanced_window_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::release_balanced_window_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.BleScan.balanced_window_ms)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = balanced_window_ms_;
  balanced_window_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::mutable_balanced_window_ms() {
  _has_bits_[0] |= 0x00000004u;
  if (balanced_window_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    balanced_window_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.BleScan.balanced_window_ms)
  return balanced_window_ms_;
}
inline void GlobalSettingsProto_BleScan::set_allocated_balanced_window_ms(::android::providers::settings::SettingProto* balanced_window_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(balanced_window_ms_);
  }
  if (balanced_window_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      balanced_window_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balanced_window_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  balanced_window_ms_ = balanced_window_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.BleScan.balanced_window_ms)
}

// optional .android.providers.settings.SettingProto low_latency_window_ms = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_BleScan::has_low_latency_window_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_BleScan::low_latency_window_ms() const {
  const ::android::providers::settings::SettingProto* p = low_latency_window_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.BleScan.low_latency_window_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::release_low_latency_window_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.BleScan.low_latency_window_ms)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = low_latency_window_ms_;
  low_latency_window_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::mutable_low_latency_window_ms() {
  _has_bits_[0] |= 0x00000008u;
  if (low_latency_window_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    low_latency_window_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.BleScan.low_latency_window_ms)
  return low_latency_window_ms_;
}
inline void GlobalSettingsProto_BleScan::set_allocated_low_latency_window_ms(::android::providers::settings::SettingProto* low_latency_window_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_latency_window_ms_);
  }
  if (low_latency_window_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_latency_window_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_latency_window_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  low_latency_window_ms_ = low_latency_window_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.BleScan.low_latency_window_ms)
}

// optional .android.providers.settings.SettingProto low_power_interval_ms = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_BleScan::has_low_power_interval_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_BleScan::low_power_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = low_power_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.BleScan.low_power_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::release_low_power_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.BleScan.low_power_interval_ms)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = low_power_interval_ms_;
  low_power_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::mutable_low_power_interval_ms() {
  _has_bits_[0] |= 0x00000010u;
  if (low_power_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    low_power_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.BleScan.low_power_interval_ms)
  return low_power_interval_ms_;
}
inline void GlobalSettingsProto_BleScan::set_allocated_low_power_interval_ms(::android::providers::settings::SettingProto* low_power_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_power_interval_ms_);
  }
  if (low_power_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_power_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_power_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  low_power_interval_ms_ = low_power_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.BleScan.low_power_interval_ms)
}

// optional .android.providers.settings.SettingProto balanced_interval_ms = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_BleScan::has_balanced_interval_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_BleScan::balanced_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = balanced_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.BleScan.balanced_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::release_balanced_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.BleScan.balanced_interval_ms)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = balanced_interval_ms_;
  balanced_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::mutable_balanced_interval_ms() {
  _has_bits_[0] |= 0x00000020u;
  if (balanced_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    balanced_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.BleScan.balanced_interval_ms)
  return balanced_interval_ms_;
}
inline void GlobalSettingsProto_BleScan::set_allocated_balanced_interval_ms(::android::providers::settings::SettingProto* balanced_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(balanced_interval_ms_);
  }
  if (balanced_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      balanced_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balanced_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  balanced_interval_ms_ = balanced_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.BleScan.balanced_interval_ms)
}

// optional .android.providers.settings.SettingProto low_latency_interval_ms = 7 [(.android.privacy) = {
inline bool GlobalSettingsProto_BleScan::has_low_latency_interval_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_BleScan::low_latency_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = low_latency_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.BleScan.low_latency_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::release_low_latency_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.BleScan.low_latency_interval_ms)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = low_latency_interval_ms_;
  low_latency_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::mutable_low_latency_interval_ms() {
  _has_bits_[0] |= 0x00000040u;
  if (low_latency_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    low_latency_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.BleScan.low_latency_interval_ms)
  return low_latency_interval_ms_;
}
inline void GlobalSettingsProto_BleScan::set_allocated_low_latency_interval_ms(::android::providers::settings::SettingProto* low_latency_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_latency_interval_ms_);
  }
  if (low_latency_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_latency_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_latency_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  low_latency_interval_ms_ = low_latency_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.BleScan.low_latency_interval_ms)
}

// optional .android.providers.settings.SettingProto background_mode = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_BleScan::has_background_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_BleScan::background_mode() const {
  const ::android::providers::settings::SettingProto* p = background_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.BleScan.background_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::release_background_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.BleScan.background_mode)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = background_mode_;
  background_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_BleScan::mutable_background_mode() {
  _has_bits_[0] |= 0x00000080u;
  if (background_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    background_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.BleScan.background_mode)
  return background_mode_;
}
inline void GlobalSettingsProto_BleScan::set_allocated_background_mode(::android::providers::settings::SettingProto* background_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_mode_);
  }
  if (background_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  background_mode_ = background_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.BleScan.background_mode)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Bluetooth

// optional .android.providers.settings.SettingProto class_of_device = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Bluetooth::has_class_of_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::class_of_device() const {
  const ::android::providers::settings::SettingProto* p = class_of_device_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.class_of_device)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::release_class_of_device() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Bluetooth.class_of_device)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = class_of_device_;
  class_of_device_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_class_of_device() {
  _has_bits_[0] |= 0x00000001u;
  if (class_of_device_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    class_of_device_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.class_of_device)
  return class_of_device_;
}
inline void GlobalSettingsProto_Bluetooth::set_allocated_class_of_device(::android::providers::settings::SettingProto* class_of_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(class_of_device_);
  }
  if (class_of_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      class_of_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, class_of_device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  class_of_device_ = class_of_device;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Bluetooth.class_of_device)
}

// optional .android.providers.settings.SettingProto disabled_profiles = 2;
inline bool GlobalSettingsProto_Bluetooth::has_disabled_profiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::disabled_profiles() const {
  const ::android::providers::settings::SettingProto* p = disabled_profiles_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.disabled_profiles)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::release_disabled_profiles() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Bluetooth.disabled_profiles)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = disabled_profiles_;
  disabled_profiles_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_disabled_profiles() {
  _has_bits_[0] |= 0x00000002u;
  if (disabled_profiles_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    disabled_profiles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.disabled_profiles)
  return disabled_profiles_;
}
inline void GlobalSettingsProto_Bluetooth::set_allocated_disabled_profiles(::android::providers::settings::SettingProto* disabled_profiles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disabled_profiles_);
  }
  if (disabled_profiles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disabled_profiles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disabled_profiles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  disabled_profiles_ = disabled_profiles;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Bluetooth.disabled_profiles)
}

// optional .android.providers.settings.SettingProto interoperability_list = 3;
inline bool GlobalSettingsProto_Bluetooth::has_interoperability_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::interoperability_list() const {
  const ::android::providers::settings::SettingProto* p = interoperability_list_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.interoperability_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::release_interoperability_list() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Bluetooth.interoperability_list)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = interoperability_list_;
  interoperability_list_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_interoperability_list() {
  _has_bits_[0] |= 0x00000004u;
  if (interoperability_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    interoperability_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.interoperability_list)
  return interoperability_list_;
}
inline void GlobalSettingsProto_Bluetooth::set_allocated_interoperability_list(::android::providers::settings::SettingProto* interoperability_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interoperability_list_);
  }
  if (interoperability_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interoperability_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interoperability_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  interoperability_list_ = interoperability_list;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Bluetooth.interoperability_list)
}

// optional .android.providers.settings.SettingProto on = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Bluetooth::has_on() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::on() const {
  const ::android::providers::settings::SettingProto* p = on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::release_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Bluetooth.on)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = on_;
  on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_on() {
  _has_bits_[0] |= 0x00000008u;
  if (on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.on)
  return on_;
}
inline void GlobalSettingsProto_Bluetooth::set_allocated_on(::android::providers::settings::SettingProto* on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(on_);
  }
  if (on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  on_ = on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Bluetooth.on)
}

// repeated .android.providers.settings.SettingProto headset_priorities = 5;
inline int GlobalSettingsProto_Bluetooth::headset_priorities_size() const {
  return headset_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_headset_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.headset_priorities)
  return headset_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_headset_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.headset_priorities)
  return &headset_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::headset_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.headset_priorities)
  return headset_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_headset_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.headset_priorities)
  return headset_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::headset_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.headset_priorities)
  return headset_priorities_;
}

// repeated .android.providers.settings.SettingProto a2dp_sink_priorities = 6;
inline int GlobalSettingsProto_Bluetooth::a2dp_sink_priorities_size() const {
  return a2dp_sink_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_a2dp_sink_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_sink_priorities)
  return a2dp_sink_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_a2dp_sink_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_sink_priorities)
  return &a2dp_sink_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::a2dp_sink_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_sink_priorities)
  return a2dp_sink_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_a2dp_sink_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_sink_priorities)
  return a2dp_sink_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::a2dp_sink_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_sink_priorities)
  return a2dp_sink_priorities_;
}

// repeated .android.providers.settings.SettingProto a2dp_src_priorities = 7;
inline int GlobalSettingsProto_Bluetooth::a2dp_src_priorities_size() const {
  return a2dp_src_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_a2dp_src_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_src_priorities)
  return a2dp_src_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_a2dp_src_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_src_priorities)
  return &a2dp_src_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::a2dp_src_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_src_priorities)
  return a2dp_src_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_a2dp_src_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_src_priorities)
  return a2dp_src_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::a2dp_src_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_src_priorities)
  return a2dp_src_priorities_;
}

// repeated .android.providers.settings.SettingProto a2dp_supports_optional_codecs = 8;
inline int GlobalSettingsProto_Bluetooth::a2dp_supports_optional_codecs_size() const {
  return a2dp_supports_optional_codecs_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_a2dp_supports_optional_codecs(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_supports_optional_codecs)
  return a2dp_supports_optional_codecs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_a2dp_supports_optional_codecs() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_supports_optional_codecs)
  return &a2dp_supports_optional_codecs_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::a2dp_supports_optional_codecs(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_supports_optional_codecs)
  return a2dp_supports_optional_codecs_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_a2dp_supports_optional_codecs() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_supports_optional_codecs)
  return a2dp_supports_optional_codecs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::a2dp_supports_optional_codecs() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_supports_optional_codecs)
  return a2dp_supports_optional_codecs_;
}

// repeated .android.providers.settings.SettingProto a2dp_optional_codecs_enabled = 9;
inline int GlobalSettingsProto_Bluetooth::a2dp_optional_codecs_enabled_size() const {
  return a2dp_optional_codecs_enabled_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_a2dp_optional_codecs_enabled(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_optional_codecs_enabled)
  return a2dp_optional_codecs_enabled_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_a2dp_optional_codecs_enabled() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_optional_codecs_enabled)
  return &a2dp_optional_codecs_enabled_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::a2dp_optional_codecs_enabled(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_optional_codecs_enabled)
  return a2dp_optional_codecs_enabled_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_a2dp_optional_codecs_enabled() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_optional_codecs_enabled)
  return a2dp_optional_codecs_enabled_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::a2dp_optional_codecs_enabled() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.a2dp_optional_codecs_enabled)
  return a2dp_optional_codecs_enabled_;
}

// repeated .android.providers.settings.SettingProto input_device_priorities = 10;
inline int GlobalSettingsProto_Bluetooth::input_device_priorities_size() const {
  return input_device_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_input_device_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.input_device_priorities)
  return input_device_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_input_device_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.input_device_priorities)
  return &input_device_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::input_device_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.input_device_priorities)
  return input_device_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_input_device_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.input_device_priorities)
  return input_device_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::input_device_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.input_device_priorities)
  return input_device_priorities_;
}

// repeated .android.providers.settings.SettingProto map_priorities = 11;
inline int GlobalSettingsProto_Bluetooth::map_priorities_size() const {
  return map_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_map_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.map_priorities)
  return map_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_map_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.map_priorities)
  return &map_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::map_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.map_priorities)
  return map_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_map_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.map_priorities)
  return map_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::map_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.map_priorities)
  return map_priorities_;
}

// repeated .android.providers.settings.SettingProto map_client_priorities = 12;
inline int GlobalSettingsProto_Bluetooth::map_client_priorities_size() const {
  return map_client_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_map_client_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.map_client_priorities)
  return map_client_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_map_client_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.map_client_priorities)
  return &map_client_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::map_client_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.map_client_priorities)
  return map_client_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_map_client_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.map_client_priorities)
  return map_client_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::map_client_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.map_client_priorities)
  return map_client_priorities_;
}

// repeated .android.providers.settings.SettingProto pbap_client_priorities = 13;
inline int GlobalSettingsProto_Bluetooth::pbap_client_priorities_size() const {
  return pbap_client_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_pbap_client_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.pbap_client_priorities)
  return pbap_client_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_pbap_client_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.pbap_client_priorities)
  return &pbap_client_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::pbap_client_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.pbap_client_priorities)
  return pbap_client_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_pbap_client_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.pbap_client_priorities)
  return pbap_client_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::pbap_client_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.pbap_client_priorities)
  return pbap_client_priorities_;
}

// repeated .android.providers.settings.SettingProto sap_priorities = 14;
inline int GlobalSettingsProto_Bluetooth::sap_priorities_size() const {
  return sap_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_sap_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.sap_priorities)
  return sap_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_sap_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.sap_priorities)
  return &sap_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::sap_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.sap_priorities)
  return sap_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_sap_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.sap_priorities)
  return sap_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::sap_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.sap_priorities)
  return sap_priorities_;
}

// repeated .android.providers.settings.SettingProto pan_priorities = 15;
inline int GlobalSettingsProto_Bluetooth::pan_priorities_size() const {
  return pan_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_pan_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.pan_priorities)
  return pan_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_pan_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.pan_priorities)
  return &pan_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::pan_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.pan_priorities)
  return pan_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_pan_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.pan_priorities)
  return pan_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::pan_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.pan_priorities)
  return pan_priorities_;
}

// repeated .android.providers.settings.SettingProto hearing_aid_priorities = 16;
inline int GlobalSettingsProto_Bluetooth::hearing_aid_priorities_size() const {
  return hearing_aid_priorities_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::mutable_hearing_aid_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Bluetooth.hearing_aid_priorities)
  return hearing_aid_priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Bluetooth::mutable_hearing_aid_priorities() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Bluetooth.hearing_aid_priorities)
  return &hearing_aid_priorities_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Bluetooth::hearing_aid_priorities(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Bluetooth.hearing_aid_priorities)
  return hearing_aid_priorities_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Bluetooth::add_hearing_aid_priorities() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Bluetooth.hearing_aid_priorities)
  return hearing_aid_priorities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Bluetooth::hearing_aid_priorities() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Bluetooth.hearing_aid_priorities)
  return hearing_aid_priorities_;
}

// -------------------------------------------------------------------

// GlobalSettingsProto_CaptivePortal

// optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_CaptivePortal::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::mode() const {
  const ::android::providers::settings::SettingProto* p = mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.mode)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_mode() {
  _has_bits_[0] |= 0x00000001u;
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.mode)
  return mode_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_mode(::android::providers::settings::SettingProto* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.mode)
}

// optional .android.providers.settings.SettingProto detection_enabled = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_CaptivePortal::has_detection_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::detection_enabled() const {
  const ::android::providers::settings::SettingProto* p = detection_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.detection_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_detection_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.detection_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = detection_enabled_;
  detection_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_detection_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (detection_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    detection_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.detection_enabled)
  return detection_enabled_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_detection_enabled(::android::providers::settings::SettingProto* detection_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_enabled_);
  }
  if (detection_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  detection_enabled_ = detection_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.detection_enabled)
}

// optional .android.providers.settings.SettingProto server = 3;
inline bool GlobalSettingsProto_CaptivePortal::has_server() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::server() const {
  const ::android::providers::settings::SettingProto* p = server_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.server)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_server() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.server)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_server() {
  _has_bits_[0] |= 0x00000004u;
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.server)
  return server_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_server(::android::providers::settings::SettingProto* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.server)
}

// optional .android.providers.settings.SettingProto https_url = 4;
inline bool GlobalSettingsProto_CaptivePortal::has_https_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::https_url() const {
  const ::android::providers::settings::SettingProto* p = https_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.https_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_https_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.https_url)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = https_url_;
  https_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_https_url() {
  _has_bits_[0] |= 0x00000008u;
  if (https_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    https_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.https_url)
  return https_url_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_https_url(::android::providers::settings::SettingProto* https_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(https_url_);
  }
  if (https_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      https_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, https_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  https_url_ = https_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.https_url)
}

// optional .android.providers.settings.SettingProto http_url = 5;
inline bool GlobalSettingsProto_CaptivePortal::has_http_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::http_url() const {
  const ::android::providers::settings::SettingProto* p = http_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.http_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_http_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.http_url)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = http_url_;
  http_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_http_url() {
  _has_bits_[0] |= 0x00000010u;
  if (http_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    http_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.http_url)
  return http_url_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_http_url(::android::providers::settings::SettingProto* http_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_url_);
  }
  if (http_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      http_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  http_url_ = http_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.http_url)
}

// optional .android.providers.settings.SettingProto fallback_url = 6;
inline bool GlobalSettingsProto_CaptivePortal::has_fallback_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::fallback_url() const {
  const ::android::providers::settings::SettingProto* p = fallback_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.fallback_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_fallback_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.fallback_url)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = fallback_url_;
  fallback_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_fallback_url() {
  _has_bits_[0] |= 0x00000020u;
  if (fallback_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    fallback_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.fallback_url)
  return fallback_url_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_fallback_url(::android::providers::settings::SettingProto* fallback_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fallback_url_);
  }
  if (fallback_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fallback_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fallback_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  fallback_url_ = fallback_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.fallback_url)
}

// optional .android.providers.settings.SettingProto other_fallback_urls = 7;
inline bool GlobalSettingsProto_CaptivePortal::has_other_fallback_urls() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::other_fallback_urls() const {
  const ::android::providers::settings::SettingProto* p = other_fallback_urls_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.other_fallback_urls)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_other_fallback_urls() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.other_fallback_urls)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = other_fallback_urls_;
  other_fallback_urls_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_other_fallback_urls() {
  _has_bits_[0] |= 0x00000040u;
  if (other_fallback_urls_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    other_fallback_urls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.other_fallback_urls)
  return other_fallback_urls_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_other_fallback_urls(::android::providers::settings::SettingProto* other_fallback_urls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_fallback_urls_);
  }
  if (other_fallback_urls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      other_fallback_urls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_fallback_urls, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  other_fallback_urls_ = other_fallback_urls;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.other_fallback_urls)
}

// optional .android.providers.settings.SettingProto use_https = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_CaptivePortal::has_use_https() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::use_https() const {
  const ::android::providers::settings::SettingProto* p = use_https_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.use_https)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_use_https() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.use_https)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = use_https_;
  use_https_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_use_https() {
  _has_bits_[0] |= 0x00000080u;
  if (use_https_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    use_https_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.use_https)
  return use_https_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_use_https(::android::providers::settings::SettingProto* use_https) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_https_);
  }
  if (use_https) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      use_https = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_https, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  use_https_ = use_https;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.use_https)
}

// optional .android.providers.settings.SettingProto user_agent = 9;
inline bool GlobalSettingsProto_CaptivePortal::has_user_agent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CaptivePortal::user_agent() const {
  const ::android::providers::settings::SettingProto* p = user_agent_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CaptivePortal.user_agent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::release_user_agent() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CaptivePortal.user_agent)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = user_agent_;
  user_agent_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CaptivePortal::mutable_user_agent() {
  _has_bits_[0] |= 0x00000100u;
  if (user_agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_agent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CaptivePortal.user_agent)
  return user_agent_;
}
inline void GlobalSettingsProto_CaptivePortal::set_allocated_user_agent(::android::providers::settings::SettingProto* user_agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_agent_);
  }
  if (user_agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_agent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  user_agent_ = user_agent;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CaptivePortal.user_agent)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Carrier

// optional .android.providers.settings.SettingProto app_whitelist = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Carrier::has_app_whitelist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Carrier::app_whitelist() const {
  const ::android::providers::settings::SettingProto* p = app_whitelist_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Carrier.app_whitelist)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Carrier::release_app_whitelist() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Carrier.app_whitelist)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = app_whitelist_;
  app_whitelist_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Carrier::mutable_app_whitelist() {
  _has_bits_[0] |= 0x00000001u;
  if (app_whitelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    app_whitelist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Carrier.app_whitelist)
  return app_whitelist_;
}
inline void GlobalSettingsProto_Carrier::set_allocated_app_whitelist(::android::providers::settings::SettingProto* app_whitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_whitelist_);
  }
  if (app_whitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_whitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_whitelist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_whitelist_ = app_whitelist;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Carrier.app_whitelist)
}

// optional .android.providers.settings.SettingProto app_names = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Carrier::has_app_names() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Carrier::app_names() const {
  const ::android::providers::settings::SettingProto* p = app_names_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Carrier.app_names)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Carrier::release_app_names() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Carrier.app_names)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = app_names_;
  app_names_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Carrier::mutable_app_names() {
  _has_bits_[0] |= 0x00000002u;
  if (app_names_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    app_names_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Carrier.app_names)
  return app_names_;
}
inline void GlobalSettingsProto_Carrier::set_allocated_app_names(::android::providers::settings::SettingProto* app_names) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_names_);
  }
  if (app_names) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_names = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_names, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_names_ = app_names;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Carrier.app_names)
}

// optional .android.providers.settings.SettingProto install_carrier_app_notification_persistent = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Carrier::has_install_carrier_app_notification_persistent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Carrier::install_carrier_app_notification_persistent() const {
  const ::android::providers::settings::SettingProto* p = install_carrier_app_notification_persistent_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Carrier.install_carrier_app_notification_persistent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Carrier::release_install_carrier_app_notification_persistent() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Carrier.install_carrier_app_notification_persistent)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = install_carrier_app_notification_persistent_;
  install_carrier_app_notification_persistent_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Carrier::mutable_install_carrier_app_notification_persistent() {
  _has_bits_[0] |= 0x00000004u;
  if (install_carrier_app_notification_persistent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    install_carrier_app_notification_persistent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Carrier.install_carrier_app_notification_persistent)
  return install_carrier_app_notification_persistent_;
}
inline void GlobalSettingsProto_Carrier::set_allocated_install_carrier_app_notification_persistent(::android::providers::settings::SettingProto* install_carrier_app_notification_persistent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_carrier_app_notification_persistent_);
  }
  if (install_carrier_app_notification_persistent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      install_carrier_app_notification_persistent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_carrier_app_notification_persistent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  install_carrier_app_notification_persistent_ = install_carrier_app_notification_persistent;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Carrier.install_carrier_app_notification_persistent)
}

// optional .android.providers.settings.SettingProto install_carrier_app_notification_sleep_millis = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Carrier::has_install_carrier_app_notification_sleep_millis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Carrier::install_carrier_app_notification_sleep_millis() const {
  const ::android::providers::settings::SettingProto* p = install_carrier_app_notification_sleep_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Carrier.install_carrier_app_notification_sleep_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Carrier::release_install_carrier_app_notification_sleep_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Carrier.install_carrier_app_notification_sleep_millis)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = install_carrier_app_notification_sleep_millis_;
  install_carrier_app_notification_sleep_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Carrier::mutable_install_carrier_app_notification_sleep_millis() {
  _has_bits_[0] |= 0x00000008u;
  if (install_carrier_app_notification_sleep_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    install_carrier_app_notification_sleep_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Carrier.install_carrier_app_notification_sleep_millis)
  return install_carrier_app_notification_sleep_millis_;
}
inline void GlobalSettingsProto_Carrier::set_allocated_install_carrier_app_notification_sleep_millis(::android::providers::settings::SettingProto* install_carrier_app_notification_sleep_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_carrier_app_notification_sleep_millis_);
  }
  if (install_carrier_app_notification_sleep_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      install_carrier_app_notification_sleep_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_carrier_app_notification_sleep_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  install_carrier_app_notification_sleep_millis_ = install_carrier_app_notification_sleep_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Carrier.install_carrier_app_notification_sleep_millis)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Cdma

// optional .android.providers.settings.SettingProto cell_broadcast_sms = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Cdma::has_cell_broadcast_sms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Cdma::cell_broadcast_sms() const {
  const ::android::providers::settings::SettingProto* p = cell_broadcast_sms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Cdma.cell_broadcast_sms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Cdma::release_cell_broadcast_sms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Cdma.cell_broadcast_sms)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = cell_broadcast_sms_;
  cell_broadcast_sms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Cdma::mutable_cell_broadcast_sms() {
  _has_bits_[0] |= 0x00000001u;
  if (cell_broadcast_sms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    cell_broadcast_sms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Cdma.cell_broadcast_sms)
  return cell_broadcast_sms_;
}
inline void GlobalSettingsProto_Cdma::set_allocated_cell_broadcast_sms(::android::providers::settings::SettingProto* cell_broadcast_sms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_broadcast_sms_);
  }
  if (cell_broadcast_sms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cell_broadcast_sms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_broadcast_sms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cell_broadcast_sms_ = cell_broadcast_sms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Cdma.cell_broadcast_sms)
}

// optional .android.providers.settings.SettingProto roaming_mode = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Cdma::has_roaming_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Cdma::roaming_mode() const {
  const ::android::providers::settings::SettingProto* p = roaming_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Cdma.roaming_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Cdma::release_roaming_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Cdma.roaming_mode)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = roaming_mode_;
  roaming_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Cdma::mutable_roaming_mode() {
  _has_bits_[0] |= 0x00000002u;
  if (roaming_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    roaming_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Cdma.roaming_mode)
  return roaming_mode_;
}
inline void GlobalSettingsProto_Cdma::set_allocated_roaming_mode(::android::providers::settings::SettingProto* roaming_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roaming_mode_);
  }
  if (roaming_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roaming_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roaming_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  roaming_mode_ = roaming_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Cdma.roaming_mode)
}

// optional .android.providers.settings.SettingProto subscription_mode = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Cdma::has_subscription_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Cdma::subscription_mode() const {
  const ::android::providers::settings::SettingProto* p = subscription_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Cdma.subscription_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Cdma::release_subscription_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Cdma.subscription_mode)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = subscription_mode_;
  subscription_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Cdma::mutable_subscription_mode() {
  _has_bits_[0] |= 0x00000004u;
  if (subscription_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    subscription_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Cdma.subscription_mode)
  return subscription_mode_;
}
inline void GlobalSettingsProto_Cdma::set_allocated_subscription_mode(::android::providers::settings::SettingProto* subscription_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subscription_mode_);
  }
  if (subscription_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscription_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscription_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  subscription_mode_ = subscription_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Cdma.subscription_mode)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_CertPin

// optional .android.providers.settings.SettingProto update_content_url = 1;
inline bool GlobalSettingsProto_CertPin::has_update_content_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CertPin::update_content_url() const {
  const ::android::providers::settings::SettingProto* p = update_content_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CertPin.update_content_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CertPin::release_update_content_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CertPin.update_content_url)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = update_content_url_;
  update_content_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CertPin::mutable_update_content_url() {
  _has_bits_[0] |= 0x00000001u;
  if (update_content_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_content_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CertPin.update_content_url)
  return update_content_url_;
}
inline void GlobalSettingsProto_CertPin::set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_content_url_);
  }
  if (update_content_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_content_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_content_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_content_url_ = update_content_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CertPin.update_content_url)
}

// optional .android.providers.settings.SettingProto update_metadata_url = 2;
inline bool GlobalSettingsProto_CertPin::has_update_metadata_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_CertPin::update_metadata_url() const {
  const ::android::providers::settings::SettingProto* p = update_metadata_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.CertPin.update_metadata_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CertPin::release_update_metadata_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.CertPin.update_metadata_url)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = update_metadata_url_;
  update_metadata_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_CertPin::mutable_update_metadata_url() {
  _has_bits_[0] |= 0x00000002u;
  if (update_metadata_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_metadata_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.CertPin.update_metadata_url)
  return update_metadata_url_;
}
inline void GlobalSettingsProto_CertPin::set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_metadata_url_);
  }
  if (update_metadata_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_metadata_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_metadata_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_metadata_url_ = update_metadata_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.CertPin.update_metadata_url)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Connectivity

// optional .android.providers.settings.SettingProto metrics_buffer_size = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Connectivity::has_metrics_buffer_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Connectivity::metrics_buffer_size() const {
  const ::android::providers::settings::SettingProto* p = metrics_buffer_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Connectivity.metrics_buffer_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Connectivity::release_metrics_buffer_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Connectivity.metrics_buffer_size)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = metrics_buffer_size_;
  metrics_buffer_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Connectivity::mutable_metrics_buffer_size() {
  _has_bits_[0] |= 0x00000001u;
  if (metrics_buffer_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    metrics_buffer_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Connectivity.metrics_buffer_size)
  return metrics_buffer_size_;
}
inline void GlobalSettingsProto_Connectivity::set_allocated_metrics_buffer_size(::android::providers::settings::SettingProto* metrics_buffer_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_buffer_size_);
  }
  if (metrics_buffer_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metrics_buffer_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics_buffer_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metrics_buffer_size_ = metrics_buffer_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Connectivity.metrics_buffer_size)
}

// optional .android.providers.settings.SettingProto change_delay = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Connectivity::has_change_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Connectivity::change_delay() const {
  const ::android::providers::settings::SettingProto* p = change_delay_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Connectivity.change_delay)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Connectivity::release_change_delay() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Connectivity.change_delay)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = change_delay_;
  change_delay_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Connectivity::mutable_change_delay() {
  _has_bits_[0] |= 0x00000002u;
  if (change_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    change_delay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Connectivity.change_delay)
  return change_delay_;
}
inline void GlobalSettingsProto_Connectivity::set_allocated_change_delay(::android::providers::settings::SettingProto* change_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_delay_);
  }
  if (change_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_delay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  change_delay_ = change_delay;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Connectivity.change_delay)
}

// optional .android.providers.settings.SettingProto sampling_interval_in_seconds = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Connectivity::has_sampling_interval_in_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Connectivity::sampling_interval_in_seconds() const {
  const ::android::providers::settings::SettingProto* p = sampling_interval_in_seconds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Connectivity.sampling_interval_in_seconds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Connectivity::release_sampling_interval_in_seconds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Connectivity.sampling_interval_in_seconds)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = sampling_interval_in_seconds_;
  sampling_interval_in_seconds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Connectivity::mutable_sampling_interval_in_seconds() {
  _has_bits_[0] |= 0x00000004u;
  if (sampling_interval_in_seconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sampling_interval_in_seconds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Connectivity.sampling_interval_in_seconds)
  return sampling_interval_in_seconds_;
}
inline void GlobalSettingsProto_Connectivity::set_allocated_sampling_interval_in_seconds(::android::providers::settings::SettingProto* sampling_interval_in_seconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampling_interval_in_seconds_);
  }
  if (sampling_interval_in_seconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sampling_interval_in_seconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampling_interval_in_seconds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sampling_interval_in_seconds_ = sampling_interval_in_seconds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Connectivity.sampling_interval_in_seconds)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Data

// optional .android.providers.settings.SettingProto activity_timeout_mobile = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Data::has_activity_timeout_mobile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Data::activity_timeout_mobile() const {
  const ::android::providers::settings::SettingProto* p = activity_timeout_mobile_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Data.activity_timeout_mobile)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::release_activity_timeout_mobile() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Data.activity_timeout_mobile)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = activity_timeout_mobile_;
  activity_timeout_mobile_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::mutable_activity_timeout_mobile() {
  _has_bits_[0] |= 0x00000001u;
  if (activity_timeout_mobile_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    activity_timeout_mobile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Data.activity_timeout_mobile)
  return activity_timeout_mobile_;
}
inline void GlobalSettingsProto_Data::set_allocated_activity_timeout_mobile(::android::providers::settings::SettingProto* activity_timeout_mobile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_timeout_mobile_);
  }
  if (activity_timeout_mobile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activity_timeout_mobile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity_timeout_mobile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activity_timeout_mobile_ = activity_timeout_mobile;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Data.activity_timeout_mobile)
}

// optional .android.providers.settings.SettingProto activity_timeout_wifi = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Data::has_activity_timeout_wifi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Data::activity_timeout_wifi() const {
  const ::android::providers::settings::SettingProto* p = activity_timeout_wifi_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Data.activity_timeout_wifi)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::release_activity_timeout_wifi() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Data.activity_timeout_wifi)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = activity_timeout_wifi_;
  activity_timeout_wifi_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::mutable_activity_timeout_wifi() {
  _has_bits_[0] |= 0x00000002u;
  if (activity_timeout_wifi_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    activity_timeout_wifi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Data.activity_timeout_wifi)
  return activity_timeout_wifi_;
}
inline void GlobalSettingsProto_Data::set_allocated_activity_timeout_wifi(::android::providers::settings::SettingProto* activity_timeout_wifi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_timeout_wifi_);
  }
  if (activity_timeout_wifi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activity_timeout_wifi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity_timeout_wifi, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activity_timeout_wifi_ = activity_timeout_wifi;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Data.activity_timeout_wifi)
}

// optional .android.providers.settings.SettingProto roaming = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Data::has_roaming() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Data::roaming() const {
  const ::android::providers::settings::SettingProto* p = roaming_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Data.roaming)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::release_roaming() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Data.roaming)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = roaming_;
  roaming_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::mutable_roaming() {
  _has_bits_[0] |= 0x00000004u;
  if (roaming_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    roaming_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Data.roaming)
  return roaming_;
}
inline void GlobalSettingsProto_Data::set_allocated_roaming(::android::providers::settings::SettingProto* roaming) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roaming_);
  }
  if (roaming) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      roaming = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roaming, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  roaming_ = roaming;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Data.roaming)
}

// optional .android.providers.settings.SettingProto stall_alarm_non_aggressive_delay_in_ms = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Data::has_stall_alarm_non_aggressive_delay_in_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Data::stall_alarm_non_aggressive_delay_in_ms() const {
  const ::android::providers::settings::SettingProto* p = stall_alarm_non_aggressive_delay_in_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Data.stall_alarm_non_aggressive_delay_in_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::release_stall_alarm_non_aggressive_delay_in_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Data.stall_alarm_non_aggressive_delay_in_ms)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = stall_alarm_non_aggressive_delay_in_ms_;
  stall_alarm_non_aggressive_delay_in_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::mutable_stall_alarm_non_aggressive_delay_in_ms() {
  _has_bits_[0] |= 0x00000008u;
  if (stall_alarm_non_aggressive_delay_in_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    stall_alarm_non_aggressive_delay_in_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Data.stall_alarm_non_aggressive_delay_in_ms)
  return stall_alarm_non_aggressive_delay_in_ms_;
}
inline void GlobalSettingsProto_Data::set_allocated_stall_alarm_non_aggressive_delay_in_ms(::android::providers::settings::SettingProto* stall_alarm_non_aggressive_delay_in_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stall_alarm_non_aggressive_delay_in_ms_);
  }
  if (stall_alarm_non_aggressive_delay_in_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stall_alarm_non_aggressive_delay_in_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stall_alarm_non_aggressive_delay_in_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stall_alarm_non_aggressive_delay_in_ms_ = stall_alarm_non_aggressive_delay_in_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Data.stall_alarm_non_aggressive_delay_in_ms)
}

// optional .android.providers.settings.SettingProto stall_alarm_aggressive_delay_in_ms = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Data::has_stall_alarm_aggressive_delay_in_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Data::stall_alarm_aggressive_delay_in_ms() const {
  const ::android::providers::settings::SettingProto* p = stall_alarm_aggressive_delay_in_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Data.stall_alarm_aggressive_delay_in_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::release_stall_alarm_aggressive_delay_in_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Data.stall_alarm_aggressive_delay_in_ms)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = stall_alarm_aggressive_delay_in_ms_;
  stall_alarm_aggressive_delay_in_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Data::mutable_stall_alarm_aggressive_delay_in_ms() {
  _has_bits_[0] |= 0x00000010u;
  if (stall_alarm_aggressive_delay_in_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    stall_alarm_aggressive_delay_in_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Data.stall_alarm_aggressive_delay_in_ms)
  return stall_alarm_aggressive_delay_in_ms_;
}
inline void GlobalSettingsProto_Data::set_allocated_stall_alarm_aggressive_delay_in_ms(::android::providers::settings::SettingProto* stall_alarm_aggressive_delay_in_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stall_alarm_aggressive_delay_in_ms_);
  }
  if (stall_alarm_aggressive_delay_in_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stall_alarm_aggressive_delay_in_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stall_alarm_aggressive_delay_in_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  stall_alarm_aggressive_delay_in_ms_ = stall_alarm_aggressive_delay_in_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Data.stall_alarm_aggressive_delay_in_ms)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Database

// optional .android.providers.settings.SettingProto downgrade_reason = 1;
inline bool GlobalSettingsProto_Database::has_downgrade_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Database::downgrade_reason() const {
  const ::android::providers::settings::SettingProto* p = downgrade_reason_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Database.downgrade_reason)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Database::release_downgrade_reason() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Database.downgrade_reason)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = downgrade_reason_;
  downgrade_reason_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Database::mutable_downgrade_reason() {
  _has_bits_[0] |= 0x00000001u;
  if (downgrade_reason_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    downgrade_reason_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Database.downgrade_reason)
  return downgrade_reason_;
}
inline void GlobalSettingsProto_Database::set_allocated_downgrade_reason(::android::providers::settings::SettingProto* downgrade_reason) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(downgrade_reason_);
  }
  if (downgrade_reason) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      downgrade_reason = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, downgrade_reason, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  downgrade_reason_ = downgrade_reason;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Database.downgrade_reason)
}

// optional .android.providers.settings.SettingProto creation_buildid = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Database::has_creation_buildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Database::creation_buildid() const {
  const ::android::providers::settings::SettingProto* p = creation_buildid_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Database.creation_buildid)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Database::release_creation_buildid() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Database.creation_buildid)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = creation_buildid_;
  creation_buildid_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Database::mutable_creation_buildid() {
  _has_bits_[0] |= 0x00000002u;
  if (creation_buildid_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    creation_buildid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Database.creation_buildid)
  return creation_buildid_;
}
inline void GlobalSettingsProto_Database::set_allocated_creation_buildid(::android::providers::settings::SettingProto* creation_buildid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(creation_buildid_);
  }
  if (creation_buildid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      creation_buildid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creation_buildid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  creation_buildid_ = creation_buildid;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Database.creation_buildid)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_DateTime

// optional .android.providers.settings.SettingProto auto_time = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_DateTime::has_auto_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_DateTime::auto_time() const {
  const ::android::providers::settings::SettingProto* p = auto_time_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.DateTime.auto_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DateTime::release_auto_time() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.DateTime.auto_time)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = auto_time_;
  auto_time_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DateTime::mutable_auto_time() {
  _has_bits_[0] |= 0x00000001u;
  if (auto_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.DateTime.auto_time)
  return auto_time_;
}
inline void GlobalSettingsProto_DateTime::set_allocated_auto_time(::android::providers::settings::SettingProto* auto_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_time_);
  }
  if (auto_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auto_time_ = auto_time;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.DateTime.auto_time)
}

// optional .android.providers.settings.SettingProto auto_time_zone = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_DateTime::has_auto_time_zone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_DateTime::auto_time_zone() const {
  const ::android::providers::settings::SettingProto* p = auto_time_zone_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.DateTime.auto_time_zone)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DateTime::release_auto_time_zone() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.DateTime.auto_time_zone)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = auto_time_zone_;
  auto_time_zone_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DateTime::mutable_auto_time_zone() {
  _has_bits_[0] |= 0x00000002u;
  if (auto_time_zone_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_time_zone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.DateTime.auto_time_zone)
  return auto_time_zone_;
}
inline void GlobalSettingsProto_DateTime::set_allocated_auto_time_zone(::android::providers::settings::SettingProto* auto_time_zone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_time_zone_);
  }
  if (auto_time_zone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_time_zone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_time_zone, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auto_time_zone_ = auto_time_zone;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.DateTime.auto_time_zone)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Debug

// optional .android.providers.settings.SettingProto app = 1;
inline bool GlobalSettingsProto_Debug::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Debug::app() const {
  const ::android::providers::settings::SettingProto* p = app_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Debug.app)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Debug::release_app() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Debug.app)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Debug::mutable_app() {
  _has_bits_[0] |= 0x00000001u;
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Debug.app)
  return app_;
}
inline void GlobalSettingsProto_Debug::set_allocated_app(::android::providers::settings::SettingProto* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Debug.app)
}

// optional .android.providers.settings.SettingProto view_attributes = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Debug::has_view_attributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Debug::view_attributes() const {
  const ::android::providers::settings::SettingProto* p = view_attributes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Debug.view_attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Debug::release_view_attributes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Debug.view_attributes)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = view_attributes_;
  view_attributes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Debug::mutable_view_attributes() {
  _has_bits_[0] |= 0x00000002u;
  if (view_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    view_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Debug.view_attributes)
  return view_attributes_;
}
inline void GlobalSettingsProto_Debug::set_allocated_view_attributes(::android::providers::settings::SettingProto* view_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_attributes_);
  }
  if (view_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      view_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  view_attributes_ = view_attributes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Debug.view_attributes)
}

// optional .android.providers.settings.SettingProto view_attributes_application_package = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Debug::has_view_attributes_application_package() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Debug::view_attributes_application_package() const {
  const ::android::providers::settings::SettingProto* p = view_attributes_application_package_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Debug.view_attributes_application_package)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Debug::release_view_attributes_application_package() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Debug.view_attributes_application_package)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = view_attributes_application_package_;
  view_attributes_application_package_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Debug::mutable_view_attributes_application_package() {
  _has_bits_[0] |= 0x00000004u;
  if (view_attributes_application_package_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    view_attributes_application_package_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Debug.view_attributes_application_package)
  return view_attributes_application_package_;
}
inline void GlobalSettingsProto_Debug::set_allocated_view_attributes_application_package(::android::providers::settings::SettingProto* view_attributes_application_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_attributes_application_package_);
  }
  if (view_attributes_application_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      view_attributes_application_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_attributes_application_package, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  view_attributes_application_package_ = view_attributes_application_package;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Debug.view_attributes_application_package)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Default

// optional .android.providers.settings.SettingProto install_location = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Default::has_install_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Default::install_location() const {
  const ::android::providers::settings::SettingProto* p = install_location_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Default.install_location)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Default::release_install_location() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Default.install_location)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = install_location_;
  install_location_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Default::mutable_install_location() {
  _has_bits_[0] |= 0x00000001u;
  if (install_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    install_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Default.install_location)
  return install_location_;
}
inline void GlobalSettingsProto_Default::set_allocated_install_location(::android::providers::settings::SettingProto* install_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_location_);
  }
  if (install_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      install_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  install_location_ = install_location;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Default.install_location)
}

// optional .android.providers.settings.SettingProto dns_server = 2;
inline bool GlobalSettingsProto_Default::has_dns_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Default::dns_server() const {
  const ::android::providers::settings::SettingProto* p = dns_server_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Default.dns_server)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Default::release_dns_server() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Default.dns_server)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = dns_server_;
  dns_server_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Default::mutable_dns_server() {
  _has_bits_[0] |= 0x00000002u;
  if (dns_server_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dns_server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Default.dns_server)
  return dns_server_;
}
inline void GlobalSettingsProto_Default::set_allocated_dns_server(::android::providers::settings::SettingProto* dns_server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dns_server_);
  }
  if (dns_server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dns_server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_server, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dns_server_ = dns_server;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Default.dns_server)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Development

// optional .android.providers.settings.SettingProto settings_enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_settings_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::settings_enabled() const {
  const ::android::providers::settings::SettingProto* p = settings_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.settings_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_settings_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.settings_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = settings_enabled_;
  settings_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_settings_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (settings_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    settings_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.settings_enabled)
  return settings_enabled_;
}
inline void GlobalSettingsProto_Development::set_allocated_settings_enabled(::android::providers::settings::SettingProto* settings_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_enabled_);
  }
  if (settings_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  settings_enabled_ = settings_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.settings_enabled)
}

// optional .android.providers.settings.SettingProto force_resizable_activities = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_force_resizable_activities() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::force_resizable_activities() const {
  const ::android::providers::settings::SettingProto* p = force_resizable_activities_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.force_resizable_activities)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_force_resizable_activities() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.force_resizable_activities)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = force_resizable_activities_;
  force_resizable_activities_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_force_resizable_activities() {
  _has_bits_[0] |= 0x00000002u;
  if (force_resizable_activities_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    force_resizable_activities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.force_resizable_activities)
  return force_resizable_activities_;
}
inline void GlobalSettingsProto_Development::set_allocated_force_resizable_activities(::android::providers::settings::SettingProto* force_resizable_activities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_resizable_activities_);
  }
  if (force_resizable_activities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      force_resizable_activities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force_resizable_activities, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  force_resizable_activities_ = force_resizable_activities;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.force_resizable_activities)
}

// optional .android.providers.settings.SettingProto enable_freeform_windows_support = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_enable_freeform_windows_support() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::enable_freeform_windows_support() const {
  const ::android::providers::settings::SettingProto* p = enable_freeform_windows_support_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.enable_freeform_windows_support)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_enable_freeform_windows_support() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.enable_freeform_windows_support)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = enable_freeform_windows_support_;
  enable_freeform_windows_support_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_enable_freeform_windows_support() {
  _has_bits_[0] |= 0x00000004u;
  if (enable_freeform_windows_support_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enable_freeform_windows_support_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.enable_freeform_windows_support)
  return enable_freeform_windows_support_;
}
inline void GlobalSettingsProto_Development::set_allocated_enable_freeform_windows_support(::android::providers::settings::SettingProto* enable_freeform_windows_support) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_freeform_windows_support_);
  }
  if (enable_freeform_windows_support) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enable_freeform_windows_support = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_freeform_windows_support, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  enable_freeform_windows_support_ = enable_freeform_windows_support;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.enable_freeform_windows_support)
}

// optional .android.providers.settings.SettingProto force_rtl = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_force_rtl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::force_rtl() const {
  const ::android::providers::settings::SettingProto* p = force_rtl_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.force_rtl)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_force_rtl() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.force_rtl)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = force_rtl_;
  force_rtl_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_force_rtl() {
  _has_bits_[0] |= 0x00000008u;
  if (force_rtl_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    force_rtl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.force_rtl)
  return force_rtl_;
}
inline void GlobalSettingsProto_Development::set_allocated_force_rtl(::android::providers::settings::SettingProto* force_rtl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_rtl_);
  }
  if (force_rtl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      force_rtl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force_rtl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  force_rtl_ = force_rtl;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.force_rtl)
}

// optional .android.providers.settings.SettingProto emulate_display_cutout = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_emulate_display_cutout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::emulate_display_cutout() const {
  const ::android::providers::settings::SettingProto* p = emulate_display_cutout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.emulate_display_cutout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_emulate_display_cutout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.emulate_display_cutout)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = emulate_display_cutout_;
  emulate_display_cutout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_emulate_display_cutout() {
  _has_bits_[0] |= 0x00000010u;
  if (emulate_display_cutout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    emulate_display_cutout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.emulate_display_cutout)
  return emulate_display_cutout_;
}
inline void GlobalSettingsProto_Development::set_allocated_emulate_display_cutout(::android::providers::settings::SettingProto* emulate_display_cutout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emulate_display_cutout_);
  }
  if (emulate_display_cutout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emulate_display_cutout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emulate_display_cutout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  emulate_display_cutout_ = emulate_display_cutout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.emulate_display_cutout)
}

// optional .android.providers.settings.SettingProto force_desktop_mode_on_external_displays = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_force_desktop_mode_on_external_displays() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::force_desktop_mode_on_external_displays() const {
  const ::android::providers::settings::SettingProto* p = force_desktop_mode_on_external_displays_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.force_desktop_mode_on_external_displays)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_force_desktop_mode_on_external_displays() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.force_desktop_mode_on_external_displays)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = force_desktop_mode_on_external_displays_;
  force_desktop_mode_on_external_displays_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_force_desktop_mode_on_external_displays() {
  _has_bits_[0] |= 0x00000020u;
  if (force_desktop_mode_on_external_displays_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    force_desktop_mode_on_external_displays_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.force_desktop_mode_on_external_displays)
  return force_desktop_mode_on_external_displays_;
}
inline void GlobalSettingsProto_Development::set_allocated_force_desktop_mode_on_external_displays(::android::providers::settings::SettingProto* force_desktop_mode_on_external_displays) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_desktop_mode_on_external_displays_);
  }
  if (force_desktop_mode_on_external_displays) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      force_desktop_mode_on_external_displays = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force_desktop_mode_on_external_displays, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  force_desktop_mode_on_external_displays_ = force_desktop_mode_on_external_displays;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.force_desktop_mode_on_external_displays)
}

// optional .android.providers.settings.SettingProto enable_sizecompat_freeform = 7 [deprecated = true, (.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_enable_sizecompat_freeform() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::enable_sizecompat_freeform() const {
  const ::android::providers::settings::SettingProto* p = enable_sizecompat_freeform_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.enable_sizecompat_freeform)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_enable_sizecompat_freeform() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.enable_sizecompat_freeform)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = enable_sizecompat_freeform_;
  enable_sizecompat_freeform_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_enable_sizecompat_freeform() {
  _has_bits_[0] |= 0x00000040u;
  if (enable_sizecompat_freeform_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enable_sizecompat_freeform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.enable_sizecompat_freeform)
  return enable_sizecompat_freeform_;
}
inline void GlobalSettingsProto_Development::set_allocated_enable_sizecompat_freeform(::android::providers::settings::SettingProto* enable_sizecompat_freeform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_sizecompat_freeform_);
  }
  if (enable_sizecompat_freeform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enable_sizecompat_freeform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_sizecompat_freeform, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  enable_sizecompat_freeform_ = enable_sizecompat_freeform;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.enable_sizecompat_freeform)
}

// optional .android.providers.settings.SettingProto enable_non_resizable_multi_window = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_enable_non_resizable_multi_window() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::enable_non_resizable_multi_window() const {
  const ::android::providers::settings::SettingProto* p = enable_non_resizable_multi_window_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.enable_non_resizable_multi_window)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_enable_non_resizable_multi_window() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.enable_non_resizable_multi_window)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = enable_non_resizable_multi_window_;
  enable_non_resizable_multi_window_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_enable_non_resizable_multi_window() {
  _has_bits_[0] |= 0x00000080u;
  if (enable_non_resizable_multi_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enable_non_resizable_multi_window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.enable_non_resizable_multi_window)
  return enable_non_resizable_multi_window_;
}
inline void GlobalSettingsProto_Development::set_allocated_enable_non_resizable_multi_window(::android::providers::settings::SettingProto* enable_non_resizable_multi_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enable_non_resizable_multi_window_);
  }
  if (enable_non_resizable_multi_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enable_non_resizable_multi_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable_non_resizable_multi_window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  enable_non_resizable_multi_window_ = enable_non_resizable_multi_window;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.enable_non_resizable_multi_window)
}

// optional .android.providers.settings.SettingProto disable_window_blurs = 9 [(.android.privacy) = {
inline bool GlobalSettingsProto_Development::has_disable_window_blurs() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Development::disable_window_blurs() const {
  const ::android::providers::settings::SettingProto* p = disable_window_blurs_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Development.disable_window_blurs)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::release_disable_window_blurs() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Development.disable_window_blurs)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = disable_window_blurs_;
  disable_window_blurs_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Development::mutable_disable_window_blurs() {
  _has_bits_[0] |= 0x00000100u;
  if (disable_window_blurs_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    disable_window_blurs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Development.disable_window_blurs)
  return disable_window_blurs_;
}
inline void GlobalSettingsProto_Development::set_allocated_disable_window_blurs(::android::providers::settings::SettingProto* disable_window_blurs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable_window_blurs_);
  }
  if (disable_window_blurs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disable_window_blurs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disable_window_blurs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  disable_window_blurs_ = disable_window_blurs;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Development.disable_window_blurs)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Device

// optional .android.providers.settings.SettingProto name = 1;
inline bool GlobalSettingsProto_Device::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Device::name() const {
  const ::android::providers::settings::SettingProto* p = name_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Device.name)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::release_name() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Device.name)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Device.name)
  return name_;
}
inline void GlobalSettingsProto_Device::set_allocated_name(::android::providers::settings::SettingProto* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Device.name)
}

// optional .android.providers.settings.SettingProto provisioned = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Device::has_provisioned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Device::provisioned() const {
  const ::android::providers::settings::SettingProto* p = provisioned_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Device.provisioned)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::release_provisioned() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Device.provisioned)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = provisioned_;
  provisioned_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::mutable_provisioned() {
  _has_bits_[0] |= 0x00000002u;
  if (provisioned_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    provisioned_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Device.provisioned)
  return provisioned_;
}
inline void GlobalSettingsProto_Device::set_allocated_provisioned(::android::providers::settings::SettingProto* provisioned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provisioned_);
  }
  if (provisioned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provisioned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provisioned, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  provisioned_ = provisioned;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Device.provisioned)
}

// optional .android.providers.settings.SettingProto provisioning_mobile_data_enabled = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Device::has_provisioning_mobile_data_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Device::provisioning_mobile_data_enabled() const {
  const ::android::providers::settings::SettingProto* p = provisioning_mobile_data_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Device.provisioning_mobile_data_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::release_provisioning_mobile_data_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Device.provisioning_mobile_data_enabled)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = provisioning_mobile_data_enabled_;
  provisioning_mobile_data_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::mutable_provisioning_mobile_data_enabled() {
  _has_bits_[0] |= 0x00000004u;
  if (provisioning_mobile_data_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    provisioning_mobile_data_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Device.provisioning_mobile_data_enabled)
  return provisioning_mobile_data_enabled_;
}
inline void GlobalSettingsProto_Device::set_allocated_provisioning_mobile_data_enabled(::android::providers::settings::SettingProto* provisioning_mobile_data_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provisioning_mobile_data_enabled_);
  }
  if (provisioning_mobile_data_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provisioning_mobile_data_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provisioning_mobile_data_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  provisioning_mobile_data_enabled_ = provisioning_mobile_data_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Device.provisioning_mobile_data_enabled)
}

// optional .android.providers.settings.SettingProto policy_constants = 5;
inline bool GlobalSettingsProto_Device::has_policy_constants() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Device::policy_constants() const {
  const ::android::providers::settings::SettingProto* p = policy_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Device.policy_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::release_policy_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Device.policy_constants)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = policy_constants_;
  policy_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::mutable_policy_constants() {
  _has_bits_[0] |= 0x00000008u;
  if (policy_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    policy_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Device.policy_constants)
  return policy_constants_;
}
inline void GlobalSettingsProto_Device::set_allocated_policy_constants(::android::providers::settings::SettingProto* policy_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_constants_);
  }
  if (policy_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  policy_constants_ = policy_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Device.policy_constants)
}

// optional .android.providers.settings.SettingProto demo_mode = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Device::has_demo_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Device::demo_mode() const {
  const ::android::providers::settings::SettingProto* p = demo_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Device.demo_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::release_demo_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Device.demo_mode)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = demo_mode_;
  demo_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Device::mutable_demo_mode() {
  _has_bits_[0] |= 0x00000010u;
  if (demo_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    demo_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Device.demo_mode)
  return demo_mode_;
}
inline void GlobalSettingsProto_Device::set_allocated_demo_mode(::android::providers::settings::SettingProto* demo_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(demo_mode_);
  }
  if (demo_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      demo_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demo_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  demo_mode_ = demo_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Device.demo_mode)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Display

// optional .android.providers.settings.SettingProto size_forced = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Display::has_size_forced() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Display::size_forced() const {
  const ::android::providers::settings::SettingProto* p = size_forced_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Display.size_forced)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Display::release_size_forced() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Display.size_forced)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = size_forced_;
  size_forced_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Display::mutable_size_forced() {
  _has_bits_[0] |= 0x00000001u;
  if (size_forced_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    size_forced_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Display.size_forced)
  return size_forced_;
}
inline void GlobalSettingsProto_Display::set_allocated_size_forced(::android::providers::settings::SettingProto* size_forced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_forced_);
  }
  if (size_forced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size_forced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size_forced, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  size_forced_ = size_forced;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Display.size_forced)
}

// optional .android.providers.settings.SettingProto scaling_force = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Display::has_scaling_force() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Display::scaling_force() const {
  const ::android::providers::settings::SettingProto* p = scaling_force_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Display.scaling_force)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Display::release_scaling_force() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Display.scaling_force)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = scaling_force_;
  scaling_force_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Display::mutable_scaling_force() {
  _has_bits_[0] |= 0x00000002u;
  if (scaling_force_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    scaling_force_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Display.scaling_force)
  return scaling_force_;
}
inline void GlobalSettingsProto_Display::set_allocated_scaling_force(::android::providers::settings::SettingProto* scaling_force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scaling_force_);
  }
  if (scaling_force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scaling_force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scaling_force, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scaling_force_ = scaling_force;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Display.scaling_force)
}

// optional .android.providers.settings.SettingProto panel_lpm = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Display::has_panel_lpm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Display::panel_lpm() const {
  const ::android::providers::settings::SettingProto* p = panel_lpm_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Display.panel_lpm)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Display::release_panel_lpm() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Display.panel_lpm)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = panel_lpm_;
  panel_lpm_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Display::mutable_panel_lpm() {
  _has_bits_[0] |= 0x00000004u;
  if (panel_lpm_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    panel_lpm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Display.panel_lpm)
  return panel_lpm_;
}
inline void GlobalSettingsProto_Display::set_allocated_panel_lpm(::android::providers::settings::SettingProto* panel_lpm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(panel_lpm_);
  }
  if (panel_lpm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      panel_lpm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panel_lpm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  panel_lpm_ = panel_lpm;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Display.panel_lpm)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_DnsResolver

// optional .android.providers.settings.SettingProto sample_validity_seconds = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_DnsResolver::has_sample_validity_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_DnsResolver::sample_validity_seconds() const {
  const ::android::providers::settings::SettingProto* p = sample_validity_seconds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.DnsResolver.sample_validity_seconds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DnsResolver::release_sample_validity_seconds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.DnsResolver.sample_validity_seconds)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = sample_validity_seconds_;
  sample_validity_seconds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DnsResolver::mutable_sample_validity_seconds() {
  _has_bits_[0] |= 0x00000001u;
  if (sample_validity_seconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sample_validity_seconds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.DnsResolver.sample_validity_seconds)
  return sample_validity_seconds_;
}
inline void GlobalSettingsProto_DnsResolver::set_allocated_sample_validity_seconds(::android::providers::settings::SettingProto* sample_validity_seconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_validity_seconds_);
  }
  if (sample_validity_seconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sample_validity_seconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_validity_seconds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sample_validity_seconds_ = sample_validity_seconds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.DnsResolver.sample_validity_seconds)
}

// optional .android.providers.settings.SettingProto success_threshold_percent = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_DnsResolver::has_success_threshold_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_DnsResolver::success_threshold_percent() const {
  const ::android::providers::settings::SettingProto* p = success_threshold_percent_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.DnsResolver.success_threshold_percent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DnsResolver::release_success_threshold_percent() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.DnsResolver.success_threshold_percent)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = success_threshold_percent_;
  success_threshold_percent_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DnsResolver::mutable_success_threshold_percent() {
  _has_bits_[0] |= 0x00000002u;
  if (success_threshold_percent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    success_threshold_percent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.DnsResolver.success_threshold_percent)
  return success_threshold_percent_;
}
inline void GlobalSettingsProto_DnsResolver::set_allocated_success_threshold_percent(::android::providers::settings::SettingProto* success_threshold_percent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_threshold_percent_);
  }
  if (success_threshold_percent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      success_threshold_percent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success_threshold_percent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  success_threshold_percent_ = success_threshold_percent;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.DnsResolver.success_threshold_percent)
}

// optional .android.providers.settings.SettingProto min_samples = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_DnsResolver::has_min_samples() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_DnsResolver::min_samples() const {
  const ::android::providers::settings::SettingProto* p = min_samples_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.DnsResolver.min_samples)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DnsResolver::release_min_samples() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.DnsResolver.min_samples)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = min_samples_;
  min_samples_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DnsResolver::mutable_min_samples() {
  _has_bits_[0] |= 0x00000004u;
  if (min_samples_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    min_samples_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.DnsResolver.min_samples)
  return min_samples_;
}
inline void GlobalSettingsProto_DnsResolver::set_allocated_min_samples(::android::providers::settings::SettingProto* min_samples) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_samples_);
  }
  if (min_samples) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      min_samples = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_samples, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  min_samples_ = min_samples;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.DnsResolver.min_samples)
}

// optional .android.providers.settings.SettingProto max_samples = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_DnsResolver::has_max_samples() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_DnsResolver::max_samples() const {
  const ::android::providers::settings::SettingProto* p = max_samples_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.DnsResolver.max_samples)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DnsResolver::release_max_samples() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.DnsResolver.max_samples)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = max_samples_;
  max_samples_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DnsResolver::mutable_max_samples() {
  _has_bits_[0] |= 0x00000008u;
  if (max_samples_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_samples_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.DnsResolver.max_samples)
  return max_samples_;
}
inline void GlobalSettingsProto_DnsResolver::set_allocated_max_samples(::android::providers::settings::SettingProto* max_samples) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_samples_);
  }
  if (max_samples) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_samples = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_samples, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  max_samples_ = max_samples;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.DnsResolver.max_samples)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Download

// optional .android.providers.settings.SettingProto max_bytes_over_mobile = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Download::has_max_bytes_over_mobile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Download::max_bytes_over_mobile() const {
  const ::android::providers::settings::SettingProto* p = max_bytes_over_mobile_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Download.max_bytes_over_mobile)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Download::release_max_bytes_over_mobile() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Download.max_bytes_over_mobile)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = max_bytes_over_mobile_;
  max_bytes_over_mobile_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Download::mutable_max_bytes_over_mobile() {
  _has_bits_[0] |= 0x00000001u;
  if (max_bytes_over_mobile_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_bytes_over_mobile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Download.max_bytes_over_mobile)
  return max_bytes_over_mobile_;
}
inline void GlobalSettingsProto_Download::set_allocated_max_bytes_over_mobile(::android::providers::settings::SettingProto* max_bytes_over_mobile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_bytes_over_mobile_);
  }
  if (max_bytes_over_mobile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_bytes_over_mobile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_bytes_over_mobile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_bytes_over_mobile_ = max_bytes_over_mobile;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Download.max_bytes_over_mobile)
}

// optional .android.providers.settings.SettingProto recommended_max_bytes_over_mobile = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Download::has_recommended_max_bytes_over_mobile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Download::recommended_max_bytes_over_mobile() const {
  const ::android::providers::settings::SettingProto* p = recommended_max_bytes_over_mobile_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Download.recommended_max_bytes_over_mobile)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Download::release_recommended_max_bytes_over_mobile() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Download.recommended_max_bytes_over_mobile)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = recommended_max_bytes_over_mobile_;
  recommended_max_bytes_over_mobile_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Download::mutable_recommended_max_bytes_over_mobile() {
  _has_bits_[0] |= 0x00000002u;
  if (recommended_max_bytes_over_mobile_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    recommended_max_bytes_over_mobile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Download.recommended_max_bytes_over_mobile)
  return recommended_max_bytes_over_mobile_;
}
inline void GlobalSettingsProto_Download::set_allocated_recommended_max_bytes_over_mobile(::android::providers::settings::SettingProto* recommended_max_bytes_over_mobile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommended_max_bytes_over_mobile_);
  }
  if (recommended_max_bytes_over_mobile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recommended_max_bytes_over_mobile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommended_max_bytes_over_mobile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  recommended_max_bytes_over_mobile_ = recommended_max_bytes_over_mobile;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Download.recommended_max_bytes_over_mobile)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Dropbox

// optional .android.providers.settings.SettingProto age_seconds = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Dropbox::has_age_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Dropbox::age_seconds() const {
  const ::android::providers::settings::SettingProto* p = age_seconds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Dropbox.age_seconds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::release_age_seconds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Dropbox.age_seconds)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = age_seconds_;
  age_seconds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::mutable_age_seconds() {
  _has_bits_[0] |= 0x00000001u;
  if (age_seconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    age_seconds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Dropbox.age_seconds)
  return age_seconds_;
}
inline void GlobalSettingsProto_Dropbox::set_allocated_age_seconds(::android::providers::settings::SettingProto* age_seconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(age_seconds_);
  }
  if (age_seconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      age_seconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, age_seconds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  age_seconds_ = age_seconds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Dropbox.age_seconds)
}

// optional .android.providers.settings.SettingProto max_files = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Dropbox::has_max_files() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Dropbox::max_files() const {
  const ::android::providers::settings::SettingProto* p = max_files_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Dropbox.max_files)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::release_max_files() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Dropbox.max_files)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = max_files_;
  max_files_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::mutable_max_files() {
  _has_bits_[0] |= 0x00000002u;
  if (max_files_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_files_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Dropbox.max_files)
  return max_files_;
}
inline void GlobalSettingsProto_Dropbox::set_allocated_max_files(::android::providers::settings::SettingProto* max_files) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_files_);
  }
  if (max_files) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_files = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_files, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  max_files_ = max_files;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Dropbox.max_files)
}

// optional .android.providers.settings.SettingProto quota_kb = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Dropbox::has_quota_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Dropbox::quota_kb() const {
  const ::android::providers::settings::SettingProto* p = quota_kb_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Dropbox.quota_kb)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::release_quota_kb() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Dropbox.quota_kb)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = quota_kb_;
  quota_kb_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::mutable_quota_kb() {
  _has_bits_[0] |= 0x00000004u;
  if (quota_kb_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    quota_kb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Dropbox.quota_kb)
  return quota_kb_;
}
inline void GlobalSettingsProto_Dropbox::set_allocated_quota_kb(::android::providers::settings::SettingProto* quota_kb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quota_kb_);
  }
  if (quota_kb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quota_kb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quota_kb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  quota_kb_ = quota_kb;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Dropbox.quota_kb)
}

// optional .android.providers.settings.SettingProto quota_percent = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Dropbox::has_quota_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Dropbox::quota_percent() const {
  const ::android::providers::settings::SettingProto* p = quota_percent_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Dropbox.quota_percent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::release_quota_percent() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Dropbox.quota_percent)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = quota_percent_;
  quota_percent_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::mutable_quota_percent() {
  _has_bits_[0] |= 0x00000008u;
  if (quota_percent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    quota_percent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Dropbox.quota_percent)
  return quota_percent_;
}
inline void GlobalSettingsProto_Dropbox::set_allocated_quota_percent(::android::providers::settings::SettingProto* quota_percent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quota_percent_);
  }
  if (quota_percent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quota_percent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quota_percent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  quota_percent_ = quota_percent;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Dropbox.quota_percent)
}

// optional .android.providers.settings.SettingProto reserve_percent = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Dropbox::has_reserve_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Dropbox::reserve_percent() const {
  const ::android::providers::settings::SettingProto* p = reserve_percent_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Dropbox.reserve_percent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::release_reserve_percent() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Dropbox.reserve_percent)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = reserve_percent_;
  reserve_percent_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::mutable_reserve_percent() {
  _has_bits_[0] |= 0x00000010u;
  if (reserve_percent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    reserve_percent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Dropbox.reserve_percent)
  return reserve_percent_;
}
inline void GlobalSettingsProto_Dropbox::set_allocated_reserve_percent(::android::providers::settings::SettingProto* reserve_percent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserve_percent_);
  }
  if (reserve_percent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reserve_percent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserve_percent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  reserve_percent_ = reserve_percent;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Dropbox.reserve_percent)
}

// repeated .android.providers.settings.SettingProto settings = 6;
inline int GlobalSettingsProto_Dropbox::settings_size() const {
  return settings_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Dropbox.settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto_Dropbox::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.Dropbox.settings)
  return &settings_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Dropbox::settings(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Dropbox.settings)
  return settings_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Dropbox::add_settings() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.Dropbox.settings)
  return settings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto_Dropbox::settings() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.Dropbox.settings)
  return settings_;
}

// -------------------------------------------------------------------

// GlobalSettingsProto_DynamicPowerSavings

// optional .android.providers.settings.SettingProto disable_threshold = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_DynamicPowerSavings::has_disable_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_DynamicPowerSavings::disable_threshold() const {
  const ::android::providers::settings::SettingProto* p = disable_threshold_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings.disable_threshold)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DynamicPowerSavings::release_disable_threshold() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings.disable_threshold)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = disable_threshold_;
  disable_threshold_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DynamicPowerSavings::mutable_disable_threshold() {
  _has_bits_[0] |= 0x00000001u;
  if (disable_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    disable_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings.disable_threshold)
  return disable_threshold_;
}
inline void GlobalSettingsProto_DynamicPowerSavings::set_allocated_disable_threshold(::android::providers::settings::SettingProto* disable_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disable_threshold_);
  }
  if (disable_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disable_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disable_threshold, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  disable_threshold_ = disable_threshold;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings.disable_threshold)
}

// optional .android.providers.settings.SettingProto enabled = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_DynamicPowerSavings::has_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_DynamicPowerSavings::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DynamicPowerSavings::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings.enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_DynamicPowerSavings::mutable_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings.enabled)
  return enabled_;
}
inline void GlobalSettingsProto_DynamicPowerSavings::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings.enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Emergency

// optional .android.providers.settings.SettingProto tone = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Emergency::has_tone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Emergency::tone() const {
  const ::android::providers::settings::SettingProto* p = tone_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Emergency.tone)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Emergency::release_tone() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Emergency.tone)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = tone_;
  tone_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Emergency::mutable_tone() {
  _has_bits_[0] |= 0x00000001u;
  if (tone_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    tone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Emergency.tone)
  return tone_;
}
inline void GlobalSettingsProto_Emergency::set_allocated_tone(::android::providers::settings::SettingProto* tone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tone_);
  }
  if (tone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tone, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tone_ = tone;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Emergency.tone)
}

// optional .android.providers.settings.SettingProto affordance_needed = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Emergency::has_affordance_needed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Emergency::affordance_needed() const {
  const ::android::providers::settings::SettingProto* p = affordance_needed_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Emergency.affordance_needed)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Emergency::release_affordance_needed() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Emergency.affordance_needed)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = affordance_needed_;
  affordance_needed_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Emergency::mutable_affordance_needed() {
  _has_bits_[0] |= 0x00000002u;
  if (affordance_needed_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    affordance_needed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Emergency.affordance_needed)
  return affordance_needed_;
}
inline void GlobalSettingsProto_Emergency::set_allocated_affordance_needed(::android::providers::settings::SettingProto* affordance_needed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affordance_needed_);
  }
  if (affordance_needed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      affordance_needed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affordance_needed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  affordance_needed_ = affordance_needed;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Emergency.affordance_needed)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Enable

// optional .android.providers.settings.SettingProto accessibility_global_gesture_enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Enable::has_accessibility_global_gesture_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Enable::accessibility_global_gesture_enabled() const {
  const ::android::providers::settings::SettingProto* p = accessibility_global_gesture_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Enable.accessibility_global_gesture_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::release_accessibility_global_gesture_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Enable.accessibility_global_gesture_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = accessibility_global_gesture_enabled_;
  accessibility_global_gesture_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::mutable_accessibility_global_gesture_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (accessibility_global_gesture_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_global_gesture_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Enable.accessibility_global_gesture_enabled)
  return accessibility_global_gesture_enabled_;
}
inline void GlobalSettingsProto_Enable::set_allocated_accessibility_global_gesture_enabled(::android::providers::settings::SettingProto* accessibility_global_gesture_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_global_gesture_enabled_);
  }
  if (accessibility_global_gesture_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_global_gesture_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_global_gesture_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accessibility_global_gesture_enabled_ = accessibility_global_gesture_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Enable.accessibility_global_gesture_enabled)
}

// optional .android.providers.settings.SettingProto gpu_debug_layers = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Enable::has_gpu_debug_layers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Enable::gpu_debug_layers() const {
  const ::android::providers::settings::SettingProto* p = gpu_debug_layers_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Enable.gpu_debug_layers)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::release_gpu_debug_layers() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Enable.gpu_debug_layers)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = gpu_debug_layers_;
  gpu_debug_layers_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::mutable_gpu_debug_layers() {
  _has_bits_[0] |= 0x00000002u;
  if (gpu_debug_layers_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gpu_debug_layers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Enable.gpu_debug_layers)
  return gpu_debug_layers_;
}
inline void GlobalSettingsProto_Enable::set_allocated_gpu_debug_layers(::android::providers::settings::SettingProto* gpu_debug_layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_debug_layers_);
  }
  if (gpu_debug_layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu_debug_layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu_debug_layers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gpu_debug_layers_ = gpu_debug_layers;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Enable.gpu_debug_layers)
}

// optional .android.providers.settings.SettingProto ephemeral_feature = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Enable::has_ephemeral_feature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Enable::ephemeral_feature() const {
  const ::android::providers::settings::SettingProto* p = ephemeral_feature_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Enable.ephemeral_feature)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::release_ephemeral_feature() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Enable.ephemeral_feature)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = ephemeral_feature_;
  ephemeral_feature_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::mutable_ephemeral_feature() {
  _has_bits_[0] |= 0x00000004u;
  if (ephemeral_feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ephemeral_feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Enable.ephemeral_feature)
  return ephemeral_feature_;
}
inline void GlobalSettingsProto_Enable::set_allocated_ephemeral_feature(::android::providers::settings::SettingProto* ephemeral_feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ephemeral_feature_);
  }
  if (ephemeral_feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ephemeral_feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ephemeral_feature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ephemeral_feature_ = ephemeral_feature;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Enable.ephemeral_feature)
}

// optional .android.providers.settings.SettingProto cellular_on_boot = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Enable::has_cellular_on_boot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Enable::cellular_on_boot() const {
  const ::android::providers::settings::SettingProto* p = cellular_on_boot_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Enable.cellular_on_boot)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::release_cellular_on_boot() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Enable.cellular_on_boot)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = cellular_on_boot_;
  cellular_on_boot_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::mutable_cellular_on_boot() {
  _has_bits_[0] |= 0x00000008u;
  if (cellular_on_boot_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    cellular_on_boot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Enable.cellular_on_boot)
  return cellular_on_boot_;
}
inline void GlobalSettingsProto_Enable::set_allocated_cellular_on_boot(::android::providers::settings::SettingProto* cellular_on_boot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellular_on_boot_);
  }
  if (cellular_on_boot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cellular_on_boot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellular_on_boot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cellular_on_boot_ = cellular_on_boot;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Enable.cellular_on_boot)
}

// optional .android.providers.settings.SettingProto diskstats_logging = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Enable::has_diskstats_logging() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Enable::diskstats_logging() const {
  const ::android::providers::settings::SettingProto* p = diskstats_logging_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Enable.diskstats_logging)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::release_diskstats_logging() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Enable.diskstats_logging)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = diskstats_logging_;
  diskstats_logging_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::mutable_diskstats_logging() {
  _has_bits_[0] |= 0x00000010u;
  if (diskstats_logging_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    diskstats_logging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Enable.diskstats_logging)
  return diskstats_logging_;
}
inline void GlobalSettingsProto_Enable::set_allocated_diskstats_logging(::android::providers::settings::SettingProto* diskstats_logging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diskstats_logging_);
  }
  if (diskstats_logging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diskstats_logging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diskstats_logging, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  diskstats_logging_ = diskstats_logging;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Enable.diskstats_logging)
}

// optional .android.providers.settings.SettingProto cache_quota_calculation = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Enable::has_cache_quota_calculation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Enable::cache_quota_calculation() const {
  const ::android::providers::settings::SettingProto* p = cache_quota_calculation_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Enable.cache_quota_calculation)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::release_cache_quota_calculation() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Enable.cache_quota_calculation)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = cache_quota_calculation_;
  cache_quota_calculation_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::mutable_cache_quota_calculation() {
  _has_bits_[0] |= 0x00000020u;
  if (cache_quota_calculation_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    cache_quota_calculation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Enable.cache_quota_calculation)
  return cache_quota_calculation_;
}
inline void GlobalSettingsProto_Enable::set_allocated_cache_quota_calculation(::android::providers::settings::SettingProto* cache_quota_calculation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cache_quota_calculation_);
  }
  if (cache_quota_calculation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cache_quota_calculation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cache_quota_calculation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  cache_quota_calculation_ = cache_quota_calculation;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Enable.cache_quota_calculation)
}

// optional .android.providers.settings.SettingProto deletion_helper_no_threshold_toggle = 7 [(.android.privacy) = {
inline bool GlobalSettingsProto_Enable::has_deletion_helper_no_threshold_toggle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Enable::deletion_helper_no_threshold_toggle() const {
  const ::android::providers::settings::SettingProto* p = deletion_helper_no_threshold_toggle_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Enable.deletion_helper_no_threshold_toggle)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::release_deletion_helper_no_threshold_toggle() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Enable.deletion_helper_no_threshold_toggle)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = deletion_helper_no_threshold_toggle_;
  deletion_helper_no_threshold_toggle_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::mutable_deletion_helper_no_threshold_toggle() {
  _has_bits_[0] |= 0x00000040u;
  if (deletion_helper_no_threshold_toggle_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    deletion_helper_no_threshold_toggle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Enable.deletion_helper_no_threshold_toggle)
  return deletion_helper_no_threshold_toggle_;
}
inline void GlobalSettingsProto_Enable::set_allocated_deletion_helper_no_threshold_toggle(::android::providers::settings::SettingProto* deletion_helper_no_threshold_toggle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deletion_helper_no_threshold_toggle_);
  }
  if (deletion_helper_no_threshold_toggle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deletion_helper_no_threshold_toggle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deletion_helper_no_threshold_toggle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  deletion_helper_no_threshold_toggle_ = deletion_helper_no_threshold_toggle;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Enable.deletion_helper_no_threshold_toggle)
}

// optional .android.providers.settings.SettingProto gnss_raw_meas_full_tracking = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_Enable::has_gnss_raw_meas_full_tracking() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Enable::gnss_raw_meas_full_tracking() const {
  const ::android::providers::settings::SettingProto* p = gnss_raw_meas_full_tracking_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Enable.gnss_raw_meas_full_tracking)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::release_gnss_raw_meas_full_tracking() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Enable.gnss_raw_meas_full_tracking)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = gnss_raw_meas_full_tracking_;
  gnss_raw_meas_full_tracking_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Enable::mutable_gnss_raw_meas_full_tracking() {
  _has_bits_[0] |= 0x00000080u;
  if (gnss_raw_meas_full_tracking_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gnss_raw_meas_full_tracking_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Enable.gnss_raw_meas_full_tracking)
  return gnss_raw_meas_full_tracking_;
}
inline void GlobalSettingsProto_Enable::set_allocated_gnss_raw_meas_full_tracking(::android::providers::settings::SettingProto* gnss_raw_meas_full_tracking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnss_raw_meas_full_tracking_);
  }
  if (gnss_raw_meas_full_tracking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss_raw_meas_full_tracking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_raw_meas_full_tracking, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  gnss_raw_meas_full_tracking_ = gnss_raw_meas_full_tracking;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Enable.gnss_raw_meas_full_tracking)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Euicc

// optional .android.providers.settings.SettingProto provisioned = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Euicc::has_provisioned() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Euicc::provisioned() const {
  const ::android::providers::settings::SettingProto* p = provisioned_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Euicc.provisioned)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Euicc::release_provisioned() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Euicc.provisioned)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = provisioned_;
  provisioned_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Euicc::mutable_provisioned() {
  _has_bits_[0] |= 0x00000001u;
  if (provisioned_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    provisioned_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Euicc.provisioned)
  return provisioned_;
}
inline void GlobalSettingsProto_Euicc::set_allocated_provisioned(::android::providers::settings::SettingProto* provisioned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provisioned_);
  }
  if (provisioned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provisioned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provisioned, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  provisioned_ = provisioned;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Euicc.provisioned)
}

// optional .android.providers.settings.SettingProto factory_reset_timeout_millis = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Euicc::has_factory_reset_timeout_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Euicc::factory_reset_timeout_millis() const {
  const ::android::providers::settings::SettingProto* p = factory_reset_timeout_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Euicc.factory_reset_timeout_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Euicc::release_factory_reset_timeout_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Euicc.factory_reset_timeout_millis)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = factory_reset_timeout_millis_;
  factory_reset_timeout_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Euicc::mutable_factory_reset_timeout_millis() {
  _has_bits_[0] |= 0x00000002u;
  if (factory_reset_timeout_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    factory_reset_timeout_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Euicc.factory_reset_timeout_millis)
  return factory_reset_timeout_millis_;
}
inline void GlobalSettingsProto_Euicc::set_allocated_factory_reset_timeout_millis(::android::providers::settings::SettingProto* factory_reset_timeout_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(factory_reset_timeout_millis_);
  }
  if (factory_reset_timeout_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      factory_reset_timeout_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, factory_reset_timeout_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  factory_reset_timeout_millis_ = factory_reset_timeout_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Euicc.factory_reset_timeout_millis)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_GlobalHttpProxy

// optional .android.providers.settings.SettingProto host = 1;
inline bool GlobalSettingsProto_GlobalHttpProxy::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_GlobalHttpProxy::host() const {
  const ::android::providers::settings::SettingProto* p = host_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.host)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::release_host() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.host)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    host_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.host)
  return host_;
}
inline void GlobalSettingsProto_GlobalHttpProxy::set_allocated_host(::android::providers::settings::SettingProto* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.host)
}

// optional .android.providers.settings.SettingProto port = 2;
inline bool GlobalSettingsProto_GlobalHttpProxy::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_GlobalHttpProxy::port() const {
  const ::android::providers::settings::SettingProto* p = port_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.port)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::release_port() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.port)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = port_;
  port_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::mutable_port() {
  _has_bits_[0] |= 0x00000002u;
  if (port_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    port_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.port)
  return port_;
}
inline void GlobalSettingsProto_GlobalHttpProxy::set_allocated_port(::android::providers::settings::SettingProto* port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_);
  }
  if (port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  port_ = port;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.port)
}

// optional .android.providers.settings.SettingProto exclusion_list = 3;
inline bool GlobalSettingsProto_GlobalHttpProxy::has_exclusion_list() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_GlobalHttpProxy::exclusion_list() const {
  const ::android::providers::settings::SettingProto* p = exclusion_list_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.exclusion_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::release_exclusion_list() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.exclusion_list)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = exclusion_list_;
  exclusion_list_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::mutable_exclusion_list() {
  _has_bits_[0] |= 0x00000004u;
  if (exclusion_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    exclusion_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.exclusion_list)
  return exclusion_list_;
}
inline void GlobalSettingsProto_GlobalHttpProxy::set_allocated_exclusion_list(::android::providers::settings::SettingProto* exclusion_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exclusion_list_);
  }
  if (exclusion_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exclusion_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exclusion_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  exclusion_list_ = exclusion_list;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.exclusion_list)
}

// optional .android.providers.settings.SettingProto pac = 4;
inline bool GlobalSettingsProto_GlobalHttpProxy::has_pac() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_GlobalHttpProxy::pac() const {
  const ::android::providers::settings::SettingProto* p = pac_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.pac)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::release_pac() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.pac)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = pac_;
  pac_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::mutable_pac() {
  _has_bits_[0] |= 0x00000008u;
  if (pac_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    pac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.pac)
  return pac_;
}
inline void GlobalSettingsProto_GlobalHttpProxy::set_allocated_pac(::android::providers::settings::SettingProto* pac) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pac_);
  }
  if (pac) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pac = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pac, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pac_ = pac;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.pac)
}

// optional .android.providers.settings.SettingProto setting_ui_enabled = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_GlobalHttpProxy::has_setting_ui_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_GlobalHttpProxy::setting_ui_enabled() const {
  const ::android::providers::settings::SettingProto* p = setting_ui_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.setting_ui_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::release_setting_ui_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.setting_ui_enabled)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = setting_ui_enabled_;
  setting_ui_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_GlobalHttpProxy::mutable_setting_ui_enabled() {
  _has_bits_[0] |= 0x00000010u;
  if (setting_ui_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    setting_ui_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.setting_ui_enabled)
  return setting_ui_enabled_;
}
inline void GlobalSettingsProto_GlobalHttpProxy::set_allocated_setting_ui_enabled(::android::providers::settings::SettingProto* setting_ui_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(setting_ui_enabled_);
  }
  if (setting_ui_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      setting_ui_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting_ui_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  setting_ui_enabled_ = setting_ui_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy.setting_ui_enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Gpu

// optional .android.providers.settings.SettingProto debug_app = 1;
inline bool GlobalSettingsProto_Gpu::has_debug_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::debug_app() const {
  const ::android::providers::settings::SettingProto* p = debug_app_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.debug_app)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_debug_app() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.debug_app)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = debug_app_;
  debug_app_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_debug_app() {
  _has_bits_[0] |= 0x00000001u;
  if (debug_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    debug_app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.debug_app)
  return debug_app_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_debug_app(::android::providers::settings::SettingProto* debug_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_app_);
  }
  if (debug_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debug_app_ = debug_app;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.debug_app)
}

// optional .android.providers.settings.SettingProto debug_layers = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Gpu::has_debug_layers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::debug_layers() const {
  const ::android::providers::settings::SettingProto* p = debug_layers_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.debug_layers)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_debug_layers() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.debug_layers)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = debug_layers_;
  debug_layers_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_debug_layers() {
  _has_bits_[0] |= 0x00000002u;
  if (debug_layers_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    debug_layers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.debug_layers)
  return debug_layers_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_debug_layers(::android::providers::settings::SettingProto* debug_layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_layers_);
  }
  if (debug_layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug_layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_layers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  debug_layers_ = debug_layers;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.debug_layers)
}

// optional .android.providers.settings.SettingProto angle_gl_driver_all_angle = 3;
inline bool GlobalSettingsProto_Gpu::has_angle_gl_driver_all_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::angle_gl_driver_all_angle() const {
  const ::android::providers::settings::SettingProto* p = angle_gl_driver_all_angle_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_all_angle)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_angle_gl_driver_all_angle() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_all_angle)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = angle_gl_driver_all_angle_;
  angle_gl_driver_all_angle_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_angle_gl_driver_all_angle() {
  _has_bits_[0] |= 0x00000004u;
  if (angle_gl_driver_all_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    angle_gl_driver_all_angle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_all_angle)
  return angle_gl_driver_all_angle_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_angle_gl_driver_all_angle(::android::providers::settings::SettingProto* angle_gl_driver_all_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_gl_driver_all_angle_);
  }
  if (angle_gl_driver_all_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angle_gl_driver_all_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle_gl_driver_all_angle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  angle_gl_driver_all_angle_ = angle_gl_driver_all_angle;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_all_angle)
}

// optional .android.providers.settings.SettingProto angle_gl_driver_selection_pkgs = 4;
inline bool GlobalSettingsProto_Gpu::has_angle_gl_driver_selection_pkgs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::angle_gl_driver_selection_pkgs() const {
  const ::android::providers::settings::SettingProto* p = angle_gl_driver_selection_pkgs_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_selection_pkgs)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_angle_gl_driver_selection_pkgs() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_selection_pkgs)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = angle_gl_driver_selection_pkgs_;
  angle_gl_driver_selection_pkgs_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_angle_gl_driver_selection_pkgs() {
  _has_bits_[0] |= 0x00000008u;
  if (angle_gl_driver_selection_pkgs_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    angle_gl_driver_selection_pkgs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_selection_pkgs)
  return angle_gl_driver_selection_pkgs_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_angle_gl_driver_selection_pkgs(::android::providers::settings::SettingProto* angle_gl_driver_selection_pkgs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_gl_driver_selection_pkgs_);
  }
  if (angle_gl_driver_selection_pkgs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angle_gl_driver_selection_pkgs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle_gl_driver_selection_pkgs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  angle_gl_driver_selection_pkgs_ = angle_gl_driver_selection_pkgs;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_selection_pkgs)
}

// optional .android.providers.settings.SettingProto angle_gl_driver_selection_values = 5;
inline bool GlobalSettingsProto_Gpu::has_angle_gl_driver_selection_values() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::angle_gl_driver_selection_values() const {
  const ::android::providers::settings::SettingProto* p = angle_gl_driver_selection_values_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_selection_values)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_angle_gl_driver_selection_values() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_selection_values)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = angle_gl_driver_selection_values_;
  angle_gl_driver_selection_values_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_angle_gl_driver_selection_values() {
  _has_bits_[0] |= 0x00000010u;
  if (angle_gl_driver_selection_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    angle_gl_driver_selection_values_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_selection_values)
  return angle_gl_driver_selection_values_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_angle_gl_driver_selection_values(::android::providers::settings::SettingProto* angle_gl_driver_selection_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_gl_driver_selection_values_);
  }
  if (angle_gl_driver_selection_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angle_gl_driver_selection_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle_gl_driver_selection_values, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  angle_gl_driver_selection_values_ = angle_gl_driver_selection_values;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.angle_gl_driver_selection_values)
}

// optional .android.providers.settings.SettingProto debug_layer_app = 6;
inline bool GlobalSettingsProto_Gpu::has_debug_layer_app() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::debug_layer_app() const {
  const ::android::providers::settings::SettingProto* p = debug_layer_app_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.debug_layer_app)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_debug_layer_app() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.debug_layer_app)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = debug_layer_app_;
  debug_layer_app_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_debug_layer_app() {
  _has_bits_[0] |= 0x00000020u;
  if (debug_layer_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    debug_layer_app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.debug_layer_app)
  return debug_layer_app_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_debug_layer_app(::android::providers::settings::SettingProto* debug_layer_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_layer_app_);
  }
  if (debug_layer_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug_layer_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_layer_app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  debug_layer_app_ = debug_layer_app;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.debug_layer_app)
}

// optional .android.providers.settings.SettingProto debug_layers_gles = 7;
inline bool GlobalSettingsProto_Gpu::has_debug_layers_gles() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::debug_layers_gles() const {
  const ::android::providers::settings::SettingProto* p = debug_layers_gles_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.debug_layers_gles)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_debug_layers_gles() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.debug_layers_gles)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = debug_layers_gles_;
  debug_layers_gles_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_debug_layers_gles() {
  _has_bits_[0] |= 0x00000040u;
  if (debug_layers_gles_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    debug_layers_gles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.debug_layers_gles)
  return debug_layers_gles_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_debug_layers_gles(::android::providers::settings::SettingProto* debug_layers_gles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug_layers_gles_);
  }
  if (debug_layers_gles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug_layers_gles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_layers_gles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  debug_layers_gles_ = debug_layers_gles;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.debug_layers_gles)
}

// optional .android.providers.settings.SettingProto updatable_driver_all_apps = 8;
inline bool GlobalSettingsProto_Gpu::has_updatable_driver_all_apps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::updatable_driver_all_apps() const {
  const ::android::providers::settings::SettingProto* p = updatable_driver_all_apps_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_all_apps)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_updatable_driver_all_apps() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_all_apps)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = updatable_driver_all_apps_;
  updatable_driver_all_apps_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_updatable_driver_all_apps() {
  _has_bits_[0] |= 0x00000080u;
  if (updatable_driver_all_apps_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    updatable_driver_all_apps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_all_apps)
  return updatable_driver_all_apps_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_updatable_driver_all_apps(::android::providers::settings::SettingProto* updatable_driver_all_apps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_driver_all_apps_);
  }
  if (updatable_driver_all_apps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatable_driver_all_apps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable_driver_all_apps, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  updatable_driver_all_apps_ = updatable_driver_all_apps;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_all_apps)
}

// optional .android.providers.settings.SettingProto updatable_driver_production_opt_in_apps = 9;
inline bool GlobalSettingsProto_Gpu::has_updatable_driver_production_opt_in_apps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::updatable_driver_production_opt_in_apps() const {
  const ::android::providers::settings::SettingProto* p = updatable_driver_production_opt_in_apps_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_opt_in_apps)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_updatable_driver_production_opt_in_apps() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_opt_in_apps)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = updatable_driver_production_opt_in_apps_;
  updatable_driver_production_opt_in_apps_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_updatable_driver_production_opt_in_apps() {
  _has_bits_[0] |= 0x00000100u;
  if (updatable_driver_production_opt_in_apps_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    updatable_driver_production_opt_in_apps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_opt_in_apps)
  return updatable_driver_production_opt_in_apps_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_updatable_driver_production_opt_in_apps(::android::providers::settings::SettingProto* updatable_driver_production_opt_in_apps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_driver_production_opt_in_apps_);
  }
  if (updatable_driver_production_opt_in_apps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatable_driver_production_opt_in_apps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable_driver_production_opt_in_apps, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  updatable_driver_production_opt_in_apps_ = updatable_driver_production_opt_in_apps;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_opt_in_apps)
}

// optional .android.providers.settings.SettingProto updatable_driver_production_opt_out_apps = 10;
inline bool GlobalSettingsProto_Gpu::has_updatable_driver_production_opt_out_apps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::updatable_driver_production_opt_out_apps() const {
  const ::android::providers::settings::SettingProto* p = updatable_driver_production_opt_out_apps_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_opt_out_apps)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_updatable_driver_production_opt_out_apps() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_opt_out_apps)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = updatable_driver_production_opt_out_apps_;
  updatable_driver_production_opt_out_apps_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_updatable_driver_production_opt_out_apps() {
  _has_bits_[0] |= 0x00000200u;
  if (updatable_driver_production_opt_out_apps_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    updatable_driver_production_opt_out_apps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_opt_out_apps)
  return updatable_driver_production_opt_out_apps_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_updatable_driver_production_opt_out_apps(::android::providers::settings::SettingProto* updatable_driver_production_opt_out_apps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_driver_production_opt_out_apps_);
  }
  if (updatable_driver_production_opt_out_apps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatable_driver_production_opt_out_apps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable_driver_production_opt_out_apps, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  updatable_driver_production_opt_out_apps_ = updatable_driver_production_opt_out_apps;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_opt_out_apps)
}

// optional .android.providers.settings.SettingProto updatable_driver_production_denylist = 11;
inline bool GlobalSettingsProto_Gpu::has_updatable_driver_production_denylist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::updatable_driver_production_denylist() const {
  const ::android::providers::settings::SettingProto* p = updatable_driver_production_denylist_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_denylist)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_updatable_driver_production_denylist() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_denylist)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = updatable_driver_production_denylist_;
  updatable_driver_production_denylist_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_updatable_driver_production_denylist() {
  _has_bits_[0] |= 0x00000400u;
  if (updatable_driver_production_denylist_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    updatable_driver_production_denylist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_denylist)
  return updatable_driver_production_denylist_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_updatable_driver_production_denylist(::android::providers::settings::SettingProto* updatable_driver_production_denylist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_driver_production_denylist_);
  }
  if (updatable_driver_production_denylist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatable_driver_production_denylist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable_driver_production_denylist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  updatable_driver_production_denylist_ = updatable_driver_production_denylist;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_denylist)
}

// optional .android.providers.settings.SettingProto updatable_driver_production_allowlist = 12;
inline bool GlobalSettingsProto_Gpu::has_updatable_driver_production_allowlist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::updatable_driver_production_allowlist() const {
  const ::android::providers::settings::SettingProto* p = updatable_driver_production_allowlist_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_allowlist)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_updatable_driver_production_allowlist() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_allowlist)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = updatable_driver_production_allowlist_;
  updatable_driver_production_allowlist_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_updatable_driver_production_allowlist() {
  _has_bits_[0] |= 0x00000800u;
  if (updatable_driver_production_allowlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    updatable_driver_production_allowlist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_allowlist)
  return updatable_driver_production_allowlist_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_updatable_driver_production_allowlist(::android::providers::settings::SettingProto* updatable_driver_production_allowlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_driver_production_allowlist_);
  }
  if (updatable_driver_production_allowlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatable_driver_production_allowlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable_driver_production_allowlist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  updatable_driver_production_allowlist_ = updatable_driver_production_allowlist;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_allowlist)
}

// optional .android.providers.settings.SettingProto angle_allowlist = 13;
inline bool GlobalSettingsProto_Gpu::has_angle_allowlist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::angle_allowlist() const {
  const ::android::providers::settings::SettingProto* p = angle_allowlist_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.angle_allowlist)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_angle_allowlist() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.angle_allowlist)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = angle_allowlist_;
  angle_allowlist_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_angle_allowlist() {
  _has_bits_[0] |= 0x00001000u;
  if (angle_allowlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    angle_allowlist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.angle_allowlist)
  return angle_allowlist_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_angle_allowlist(::android::providers::settings::SettingProto* angle_allowlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_allowlist_);
  }
  if (angle_allowlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angle_allowlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle_allowlist, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  angle_allowlist_ = angle_allowlist;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.angle_allowlist)
}

// optional .android.providers.settings.SettingProto updatable_driver_production_denylists = 14;
inline bool GlobalSettingsProto_Gpu::has_updatable_driver_production_denylists() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::updatable_driver_production_denylists() const {
  const ::android::providers::settings::SettingProto* p = updatable_driver_production_denylists_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_denylists)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_updatable_driver_production_denylists() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_denylists)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = updatable_driver_production_denylists_;
  updatable_driver_production_denylists_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_updatable_driver_production_denylists() {
  _has_bits_[0] |= 0x00002000u;
  if (updatable_driver_production_denylists_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    updatable_driver_production_denylists_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_denylists)
  return updatable_driver_production_denylists_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_updatable_driver_production_denylists(::android::providers::settings::SettingProto* updatable_driver_production_denylists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_driver_production_denylists_);
  }
  if (updatable_driver_production_denylists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatable_driver_production_denylists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable_driver_production_denylists, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  updatable_driver_production_denylists_ = updatable_driver_production_denylists;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_production_denylists)
}

// optional .android.providers.settings.SettingProto show_angle_in_use_dialog = 15;
inline bool GlobalSettingsProto_Gpu::has_show_angle_in_use_dialog() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::show_angle_in_use_dialog() const {
  const ::android::providers::settings::SettingProto* p = show_angle_in_use_dialog_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.show_angle_in_use_dialog)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_show_angle_in_use_dialog() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.show_angle_in_use_dialog)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = show_angle_in_use_dialog_;
  show_angle_in_use_dialog_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_show_angle_in_use_dialog() {
  _has_bits_[0] |= 0x00004000u;
  if (show_angle_in_use_dialog_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_angle_in_use_dialog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.show_angle_in_use_dialog)
  return show_angle_in_use_dialog_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_show_angle_in_use_dialog(::android::providers::settings::SettingProto* show_angle_in_use_dialog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_angle_in_use_dialog_);
  }
  if (show_angle_in_use_dialog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_angle_in_use_dialog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_angle_in_use_dialog, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  show_angle_in_use_dialog_ = show_angle_in_use_dialog;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.show_angle_in_use_dialog)
}

// optional .android.providers.settings.SettingProto updatable_driver_sphal_libraries = 16;
inline bool GlobalSettingsProto_Gpu::has_updatable_driver_sphal_libraries() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::updatable_driver_sphal_libraries() const {
  const ::android::providers::settings::SettingProto* p = updatable_driver_sphal_libraries_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_sphal_libraries)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_updatable_driver_sphal_libraries() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_sphal_libraries)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = updatable_driver_sphal_libraries_;
  updatable_driver_sphal_libraries_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_updatable_driver_sphal_libraries() {
  _has_bits_[0] |= 0x00008000u;
  if (updatable_driver_sphal_libraries_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    updatable_driver_sphal_libraries_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_sphal_libraries)
  return updatable_driver_sphal_libraries_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_updatable_driver_sphal_libraries(::android::providers::settings::SettingProto* updatable_driver_sphal_libraries) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_driver_sphal_libraries_);
  }
  if (updatable_driver_sphal_libraries) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatable_driver_sphal_libraries = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable_driver_sphal_libraries, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  updatable_driver_sphal_libraries_ = updatable_driver_sphal_libraries;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_sphal_libraries)
}

// optional .android.providers.settings.SettingProto angle_debug_package = 17;
inline bool GlobalSettingsProto_Gpu::has_angle_debug_package() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::angle_debug_package() const {
  const ::android::providers::settings::SettingProto* p = angle_debug_package_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.angle_debug_package)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_angle_debug_package() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.angle_debug_package)
  _has_bits_[0] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = angle_debug_package_;
  angle_debug_package_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_angle_debug_package() {
  _has_bits_[0] |= 0x00010000u;
  if (angle_debug_package_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    angle_debug_package_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.angle_debug_package)
  return angle_debug_package_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_angle_debug_package(::android::providers::settings::SettingProto* angle_debug_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_debug_package_);
  }
  if (angle_debug_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angle_debug_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle_debug_package, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  angle_debug_package_ = angle_debug_package;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.angle_debug_package)
}

// optional .android.providers.settings.SettingProto updatable_driver_prerelease_opt_in_apps = 18;
inline bool GlobalSettingsProto_Gpu::has_updatable_driver_prerelease_opt_in_apps() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::updatable_driver_prerelease_opt_in_apps() const {
  const ::android::providers::settings::SettingProto* p = updatable_driver_prerelease_opt_in_apps_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_prerelease_opt_in_apps)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_updatable_driver_prerelease_opt_in_apps() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_prerelease_opt_in_apps)
  _has_bits_[0] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = updatable_driver_prerelease_opt_in_apps_;
  updatable_driver_prerelease_opt_in_apps_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_updatable_driver_prerelease_opt_in_apps() {
  _has_bits_[0] |= 0x00020000u;
  if (updatable_driver_prerelease_opt_in_apps_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    updatable_driver_prerelease_opt_in_apps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_prerelease_opt_in_apps)
  return updatable_driver_prerelease_opt_in_apps_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_updatable_driver_prerelease_opt_in_apps(::android::providers::settings::SettingProto* updatable_driver_prerelease_opt_in_apps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatable_driver_prerelease_opt_in_apps_);
  }
  if (updatable_driver_prerelease_opt_in_apps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updatable_driver_prerelease_opt_in_apps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatable_driver_prerelease_opt_in_apps, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  updatable_driver_prerelease_opt_in_apps_ = updatable_driver_prerelease_opt_in_apps;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.updatable_driver_prerelease_opt_in_apps)
}

// optional .android.providers.settings.SettingProto angle_egl_features = 19;
inline bool GlobalSettingsProto_Gpu::has_angle_egl_features() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Gpu::angle_egl_features() const {
  const ::android::providers::settings::SettingProto* p = angle_egl_features_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Gpu.angle_egl_features)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::release_angle_egl_features() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Gpu.angle_egl_features)
  _has_bits_[0] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = angle_egl_features_;
  angle_egl_features_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Gpu::mutable_angle_egl_features() {
  _has_bits_[0] |= 0x00040000u;
  if (angle_egl_features_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    angle_egl_features_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Gpu.angle_egl_features)
  return angle_egl_features_;
}
inline void GlobalSettingsProto_Gpu::set_allocated_angle_egl_features(::android::providers::settings::SettingProto* angle_egl_features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_egl_features_);
  }
  if (angle_egl_features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angle_egl_features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle_egl_features, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  angle_egl_features_ = angle_egl_features;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Gpu.angle_egl_features)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Hdmi

// optional .android.providers.settings.SettingProto control_enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Hdmi::has_control_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Hdmi::control_enabled() const {
  const ::android::providers::settings::SettingProto* p = control_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Hdmi.control_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Hdmi::release_control_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Hdmi.control_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = control_enabled_;
  control_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Hdmi::mutable_control_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (control_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    control_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Hdmi.control_enabled)
  return control_enabled_;
}
inline void GlobalSettingsProto_Hdmi::set_allocated_control_enabled(::android::providers::settings::SettingProto* control_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_enabled_);
  }
  if (control_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  control_enabled_ = control_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Hdmi.control_enabled)
}

// optional .android.providers.settings.SettingProto system_audio_control_enabled = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Hdmi::has_system_audio_control_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Hdmi::system_audio_control_enabled() const {
  const ::android::providers::settings::SettingProto* p = system_audio_control_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Hdmi.system_audio_control_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Hdmi::release_system_audio_control_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Hdmi.system_audio_control_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = system_audio_control_enabled_;
  system_audio_control_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Hdmi::mutable_system_audio_control_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (system_audio_control_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    system_audio_control_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Hdmi.system_audio_control_enabled)
  return system_audio_control_enabled_;
}
inline void GlobalSettingsProto_Hdmi::set_allocated_system_audio_control_enabled(::android::providers::settings::SettingProto* system_audio_control_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_audio_control_enabled_);
  }
  if (system_audio_control_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system_audio_control_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_audio_control_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  system_audio_control_enabled_ = system_audio_control_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Hdmi.system_audio_control_enabled)
}

// optional .android.providers.settings.SettingProto control_auto_wakeup_enabled = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Hdmi::has_control_auto_wakeup_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Hdmi::control_auto_wakeup_enabled() const {
  const ::android::providers::settings::SettingProto* p = control_auto_wakeup_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Hdmi.control_auto_wakeup_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Hdmi::release_control_auto_wakeup_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Hdmi.control_auto_wakeup_enabled)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = control_auto_wakeup_enabled_;
  control_auto_wakeup_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Hdmi::mutable_control_auto_wakeup_enabled() {
  _has_bits_[0] |= 0x00000004u;
  if (control_auto_wakeup_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    control_auto_wakeup_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Hdmi.control_auto_wakeup_enabled)
  return control_auto_wakeup_enabled_;
}
inline void GlobalSettingsProto_Hdmi::set_allocated_control_auto_wakeup_enabled(::android::providers::settings::SettingProto* control_auto_wakeup_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_auto_wakeup_enabled_);
  }
  if (control_auto_wakeup_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_auto_wakeup_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_auto_wakeup_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  control_auto_wakeup_enabled_ = control_auto_wakeup_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Hdmi.control_auto_wakeup_enabled)
}

// optional .android.providers.settings.SettingProto control_auto_device_off_enabled = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Hdmi::has_control_auto_device_off_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Hdmi::control_auto_device_off_enabled() const {
  const ::android::providers::settings::SettingProto* p = control_auto_device_off_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Hdmi.control_auto_device_off_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Hdmi::release_control_auto_device_off_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Hdmi.control_auto_device_off_enabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = control_auto_device_off_enabled_;
  control_auto_device_off_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Hdmi::mutable_control_auto_device_off_enabled() {
  _has_bits_[0] |= 0x00000008u;
  if (control_auto_device_off_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    control_auto_device_off_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Hdmi.control_auto_device_off_enabled)
  return control_auto_device_off_enabled_;
}
inline void GlobalSettingsProto_Hdmi::set_allocated_control_auto_device_off_enabled(::android::providers::settings::SettingProto* control_auto_device_off_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_auto_device_off_enabled_);
  }
  if (control_auto_device_off_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_auto_device_off_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_auto_device_off_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  control_auto_device_off_enabled_ = control_auto_device_off_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Hdmi.control_auto_device_off_enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_InetCondition

// optional .android.providers.settings.SettingProto debounce_up_delay = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_InetCondition::has_debounce_up_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_InetCondition::debounce_up_delay() const {
  const ::android::providers::settings::SettingProto* p = debounce_up_delay_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.InetCondition.debounce_up_delay)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InetCondition::release_debounce_up_delay() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.InetCondition.debounce_up_delay)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = debounce_up_delay_;
  debounce_up_delay_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InetCondition::mutable_debounce_up_delay() {
  _has_bits_[0] |= 0x00000001u;
  if (debounce_up_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    debounce_up_delay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.InetCondition.debounce_up_delay)
  return debounce_up_delay_;
}
inline void GlobalSettingsProto_InetCondition::set_allocated_debounce_up_delay(::android::providers::settings::SettingProto* debounce_up_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debounce_up_delay_);
  }
  if (debounce_up_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debounce_up_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debounce_up_delay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debounce_up_delay_ = debounce_up_delay;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.InetCondition.debounce_up_delay)
}

// optional .android.providers.settings.SettingProto debounce_down_delay = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_InetCondition::has_debounce_down_delay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_InetCondition::debounce_down_delay() const {
  const ::android::providers::settings::SettingProto* p = debounce_down_delay_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.InetCondition.debounce_down_delay)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InetCondition::release_debounce_down_delay() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.InetCondition.debounce_down_delay)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = debounce_down_delay_;
  debounce_down_delay_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InetCondition::mutable_debounce_down_delay() {
  _has_bits_[0] |= 0x00000002u;
  if (debounce_down_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    debounce_down_delay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.InetCondition.debounce_down_delay)
  return debounce_down_delay_;
}
inline void GlobalSettingsProto_InetCondition::set_allocated_debounce_down_delay(::android::providers::settings::SettingProto* debounce_down_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debounce_down_delay_);
  }
  if (debounce_down_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debounce_down_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debounce_down_delay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  debounce_down_delay_ = debounce_down_delay;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.InetCondition.debounce_down_delay)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_InstantApp

// optional .android.providers.settings.SettingProto dexopt_enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_InstantApp::has_dexopt_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_InstantApp::dexopt_enabled() const {
  const ::android::providers::settings::SettingProto* p = dexopt_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.InstantApp.dexopt_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::release_dexopt_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.InstantApp.dexopt_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = dexopt_enabled_;
  dexopt_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::mutable_dexopt_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (dexopt_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dexopt_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.InstantApp.dexopt_enabled)
  return dexopt_enabled_;
}
inline void GlobalSettingsProto_InstantApp::set_allocated_dexopt_enabled(::android::providers::settings::SettingProto* dexopt_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dexopt_enabled_);
  }
  if (dexopt_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dexopt_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dexopt_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dexopt_enabled_ = dexopt_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.InstantApp.dexopt_enabled)
}

// optional .android.providers.settings.SettingProto ephemeral_cookie_max_size_bytes = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_InstantApp::has_ephemeral_cookie_max_size_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_InstantApp::ephemeral_cookie_max_size_bytes() const {
  const ::android::providers::settings::SettingProto* p = ephemeral_cookie_max_size_bytes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.InstantApp.ephemeral_cookie_max_size_bytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::release_ephemeral_cookie_max_size_bytes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.InstantApp.ephemeral_cookie_max_size_bytes)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = ephemeral_cookie_max_size_bytes_;
  ephemeral_cookie_max_size_bytes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::mutable_ephemeral_cookie_max_size_bytes() {
  _has_bits_[0] |= 0x00000002u;
  if (ephemeral_cookie_max_size_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ephemeral_cookie_max_size_bytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.InstantApp.ephemeral_cookie_max_size_bytes)
  return ephemeral_cookie_max_size_bytes_;
}
inline void GlobalSettingsProto_InstantApp::set_allocated_ephemeral_cookie_max_size_bytes(::android::providers::settings::SettingProto* ephemeral_cookie_max_size_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ephemeral_cookie_max_size_bytes_);
  }
  if (ephemeral_cookie_max_size_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ephemeral_cookie_max_size_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ephemeral_cookie_max_size_bytes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ephemeral_cookie_max_size_bytes_ = ephemeral_cookie_max_size_bytes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.InstantApp.ephemeral_cookie_max_size_bytes)
}

// optional .android.providers.settings.SettingProto installed_min_cache_period = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_InstantApp::has_installed_min_cache_period() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_InstantApp::installed_min_cache_period() const {
  const ::android::providers::settings::SettingProto* p = installed_min_cache_period_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.InstantApp.installed_min_cache_period)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::release_installed_min_cache_period() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.InstantApp.installed_min_cache_period)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = installed_min_cache_period_;
  installed_min_cache_period_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::mutable_installed_min_cache_period() {
  _has_bits_[0] |= 0x00000004u;
  if (installed_min_cache_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    installed_min_cache_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.InstantApp.installed_min_cache_period)
  return installed_min_cache_period_;
}
inline void GlobalSettingsProto_InstantApp::set_allocated_installed_min_cache_period(::android::providers::settings::SettingProto* installed_min_cache_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(installed_min_cache_period_);
  }
  if (installed_min_cache_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      installed_min_cache_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, installed_min_cache_period, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  installed_min_cache_period_ = installed_min_cache_period;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.InstantApp.installed_min_cache_period)
}

// optional .android.providers.settings.SettingProto installed_max_cache_period = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_InstantApp::has_installed_max_cache_period() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_InstantApp::installed_max_cache_period() const {
  const ::android::providers::settings::SettingProto* p = installed_max_cache_period_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.InstantApp.installed_max_cache_period)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::release_installed_max_cache_period() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.InstantApp.installed_max_cache_period)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = installed_max_cache_period_;
  installed_max_cache_period_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::mutable_installed_max_cache_period() {
  _has_bits_[0] |= 0x00000008u;
  if (installed_max_cache_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    installed_max_cache_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.InstantApp.installed_max_cache_period)
  return installed_max_cache_period_;
}
inline void GlobalSettingsProto_InstantApp::set_allocated_installed_max_cache_period(::android::providers::settings::SettingProto* installed_max_cache_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(installed_max_cache_period_);
  }
  if (installed_max_cache_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      installed_max_cache_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, installed_max_cache_period, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  installed_max_cache_period_ = installed_max_cache_period;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.InstantApp.installed_max_cache_period)
}

// optional .android.providers.settings.SettingProto uninstalled_min_cache_period = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_InstantApp::has_uninstalled_min_cache_period() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_InstantApp::uninstalled_min_cache_period() const {
  const ::android::providers::settings::SettingProto* p = uninstalled_min_cache_period_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.InstantApp.uninstalled_min_cache_period)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::release_uninstalled_min_cache_period() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.InstantApp.uninstalled_min_cache_period)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = uninstalled_min_cache_period_;
  uninstalled_min_cache_period_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::mutable_uninstalled_min_cache_period() {
  _has_bits_[0] |= 0x00000010u;
  if (uninstalled_min_cache_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uninstalled_min_cache_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.InstantApp.uninstalled_min_cache_period)
  return uninstalled_min_cache_period_;
}
inline void GlobalSettingsProto_InstantApp::set_allocated_uninstalled_min_cache_period(::android::providers::settings::SettingProto* uninstalled_min_cache_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uninstalled_min_cache_period_);
  }
  if (uninstalled_min_cache_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uninstalled_min_cache_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uninstalled_min_cache_period, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  uninstalled_min_cache_period_ = uninstalled_min_cache_period;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.InstantApp.uninstalled_min_cache_period)
}

// optional .android.providers.settings.SettingProto uninstalled_max_cache_period = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_InstantApp::has_uninstalled_max_cache_period() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_InstantApp::uninstalled_max_cache_period() const {
  const ::android::providers::settings::SettingProto* p = uninstalled_max_cache_period_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.InstantApp.uninstalled_max_cache_period)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::release_uninstalled_max_cache_period() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.InstantApp.uninstalled_max_cache_period)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = uninstalled_max_cache_period_;
  uninstalled_max_cache_period_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_InstantApp::mutable_uninstalled_max_cache_period() {
  _has_bits_[0] |= 0x00000020u;
  if (uninstalled_max_cache_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uninstalled_max_cache_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.InstantApp.uninstalled_max_cache_period)
  return uninstalled_max_cache_period_;
}
inline void GlobalSettingsProto_InstantApp::set_allocated_uninstalled_max_cache_period(::android::providers::settings::SettingProto* uninstalled_max_cache_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uninstalled_max_cache_period_);
  }
  if (uninstalled_max_cache_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uninstalled_max_cache_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uninstalled_max_cache_period, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  uninstalled_max_cache_period_ = uninstalled_max_cache_period;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.InstantApp.uninstalled_max_cache_period)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_IntentFirewall

// optional .android.providers.settings.SettingProto update_content_url = 1;
inline bool GlobalSettingsProto_IntentFirewall::has_update_content_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_IntentFirewall::update_content_url() const {
  const ::android::providers::settings::SettingProto* p = update_content_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.IntentFirewall.update_content_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_IntentFirewall::release_update_content_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.IntentFirewall.update_content_url)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = update_content_url_;
  update_content_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_IntentFirewall::mutable_update_content_url() {
  _has_bits_[0] |= 0x00000001u;
  if (update_content_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_content_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.IntentFirewall.update_content_url)
  return update_content_url_;
}
inline void GlobalSettingsProto_IntentFirewall::set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_content_url_);
  }
  if (update_content_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_content_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_content_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_content_url_ = update_content_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.IntentFirewall.update_content_url)
}

// optional .android.providers.settings.SettingProto update_metadata_url = 2;
inline bool GlobalSettingsProto_IntentFirewall::has_update_metadata_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_IntentFirewall::update_metadata_url() const {
  const ::android::providers::settings::SettingProto* p = update_metadata_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.IntentFirewall.update_metadata_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_IntentFirewall::release_update_metadata_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.IntentFirewall.update_metadata_url)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = update_metadata_url_;
  update_metadata_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_IntentFirewall::mutable_update_metadata_url() {
  _has_bits_[0] |= 0x00000002u;
  if (update_metadata_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_metadata_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.IntentFirewall.update_metadata_url)
  return update_metadata_url_;
}
inline void GlobalSettingsProto_IntentFirewall::set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_metadata_url_);
  }
  if (update_metadata_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_metadata_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_metadata_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_metadata_url_ = update_metadata_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.IntentFirewall.update_metadata_url)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_LangId

// optional .android.providers.settings.SettingProto update_content_url = 1;
inline bool GlobalSettingsProto_LangId::has_update_content_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LangId::update_content_url() const {
  const ::android::providers::settings::SettingProto* p = update_content_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LangId.update_content_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LangId::release_update_content_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LangId.update_content_url)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = update_content_url_;
  update_content_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LangId::mutable_update_content_url() {
  _has_bits_[0] |= 0x00000001u;
  if (update_content_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_content_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LangId.update_content_url)
  return update_content_url_;
}
inline void GlobalSettingsProto_LangId::set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_content_url_);
  }
  if (update_content_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_content_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_content_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_content_url_ = update_content_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LangId.update_content_url)
}

// optional .android.providers.settings.SettingProto update_metadata_url = 2;
inline bool GlobalSettingsProto_LangId::has_update_metadata_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LangId::update_metadata_url() const {
  const ::android::providers::settings::SettingProto* p = update_metadata_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LangId.update_metadata_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LangId::release_update_metadata_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LangId.update_metadata_url)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = update_metadata_url_;
  update_metadata_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LangId::mutable_update_metadata_url() {
  _has_bits_[0] |= 0x00000002u;
  if (update_metadata_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_metadata_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LangId.update_metadata_url)
  return update_metadata_url_;
}
inline void GlobalSettingsProto_LangId::set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_metadata_url_);
  }
  if (update_metadata_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_metadata_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_metadata_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_metadata_url_ = update_metadata_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LangId.update_metadata_url)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Location

// optional .android.providers.settings.SettingProto background_throttle_interval_ms = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Location::has_background_throttle_interval_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Location::background_throttle_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = background_throttle_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Location.background_throttle_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::release_background_throttle_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Location.background_throttle_interval_ms)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = background_throttle_interval_ms_;
  background_throttle_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::mutable_background_throttle_interval_ms() {
  _has_bits_[0] |= 0x00000001u;
  if (background_throttle_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    background_throttle_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Location.background_throttle_interval_ms)
  return background_throttle_interval_ms_;
}
inline void GlobalSettingsProto_Location::set_allocated_background_throttle_interval_ms(::android::providers::settings::SettingProto* background_throttle_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_throttle_interval_ms_);
  }
  if (background_throttle_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_throttle_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_throttle_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  background_throttle_interval_ms_ = background_throttle_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Location.background_throttle_interval_ms)
}

// optional .android.providers.settings.SettingProto background_throttle_proximity_alert_interval_ms = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Location::has_background_throttle_proximity_alert_interval_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Location::background_throttle_proximity_alert_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = background_throttle_proximity_alert_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Location.background_throttle_proximity_alert_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::release_background_throttle_proximity_alert_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Location.background_throttle_proximity_alert_interval_ms)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = background_throttle_proximity_alert_interval_ms_;
  background_throttle_proximity_alert_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::mutable_background_throttle_proximity_alert_interval_ms() {
  _has_bits_[0] |= 0x00000002u;
  if (background_throttle_proximity_alert_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    background_throttle_proximity_alert_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Location.background_throttle_proximity_alert_interval_ms)
  return background_throttle_proximity_alert_interval_ms_;
}
inline void GlobalSettingsProto_Location::set_allocated_background_throttle_proximity_alert_interval_ms(::android::providers::settings::SettingProto* background_throttle_proximity_alert_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_throttle_proximity_alert_interval_ms_);
  }
  if (background_throttle_proximity_alert_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_throttle_proximity_alert_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_throttle_proximity_alert_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_throttle_proximity_alert_interval_ms_ = background_throttle_proximity_alert_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Location.background_throttle_proximity_alert_interval_ms)
}

// optional .android.providers.settings.SettingProto background_throttle_package_whitelist = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Location::has_background_throttle_package_whitelist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Location::background_throttle_package_whitelist() const {
  const ::android::providers::settings::SettingProto* p = background_throttle_package_whitelist_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Location.background_throttle_package_whitelist)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::release_background_throttle_package_whitelist() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Location.background_throttle_package_whitelist)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = background_throttle_package_whitelist_;
  background_throttle_package_whitelist_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::mutable_background_throttle_package_whitelist() {
  _has_bits_[0] |= 0x00000004u;
  if (background_throttle_package_whitelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    background_throttle_package_whitelist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Location.background_throttle_package_whitelist)
  return background_throttle_package_whitelist_;
}
inline void GlobalSettingsProto_Location::set_allocated_background_throttle_package_whitelist(::android::providers::settings::SettingProto* background_throttle_package_whitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_throttle_package_whitelist_);
  }
  if (background_throttle_package_whitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_throttle_package_whitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_throttle_package_whitelist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  background_throttle_package_whitelist_ = background_throttle_package_whitelist;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Location.background_throttle_package_whitelist)
}

// optional .android.providers.settings.SettingProto settings_link_to_permissions_enabled = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Location::has_settings_link_to_permissions_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Location::settings_link_to_permissions_enabled() const {
  const ::android::providers::settings::SettingProto* p = settings_link_to_permissions_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Location.settings_link_to_permissions_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::release_settings_link_to_permissions_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Location.settings_link_to_permissions_enabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = settings_link_to_permissions_enabled_;
  settings_link_to_permissions_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::mutable_settings_link_to_permissions_enabled() {
  _has_bits_[0] |= 0x00000008u;
  if (settings_link_to_permissions_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    settings_link_to_permissions_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Location.settings_link_to_permissions_enabled)
  return settings_link_to_permissions_enabled_;
}
inline void GlobalSettingsProto_Location::set_allocated_settings_link_to_permissions_enabled(::android::providers::settings::SettingProto* settings_link_to_permissions_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_link_to_permissions_enabled_);
  }
  if (settings_link_to_permissions_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings_link_to_permissions_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_link_to_permissions_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  settings_link_to_permissions_enabled_ = settings_link_to_permissions_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Location.settings_link_to_permissions_enabled)
}

// optional .android.providers.settings.SettingProto global_kill_switch = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Location::has_global_kill_switch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Location::global_kill_switch() const {
  const ::android::providers::settings::SettingProto* p = global_kill_switch_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Location.global_kill_switch)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::release_global_kill_switch() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Location.global_kill_switch)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = global_kill_switch_;
  global_kill_switch_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::mutable_global_kill_switch() {
  _has_bits_[0] |= 0x00000010u;
  if (global_kill_switch_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    global_kill_switch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Location.global_kill_switch)
  return global_kill_switch_;
}
inline void GlobalSettingsProto_Location::set_allocated_global_kill_switch(::android::providers::settings::SettingProto* global_kill_switch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_kill_switch_);
  }
  if (global_kill_switch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_kill_switch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_kill_switch, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  global_kill_switch_ = global_kill_switch;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Location.global_kill_switch)
}

// optional .android.providers.settings.SettingProto gnss_satellite_blocklist = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Location::has_gnss_satellite_blocklist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Location::gnss_satellite_blocklist() const {
  const ::android::providers::settings::SettingProto* p = gnss_satellite_blocklist_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Location.gnss_satellite_blocklist)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::release_gnss_satellite_blocklist() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Location.gnss_satellite_blocklist)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = gnss_satellite_blocklist_;
  gnss_satellite_blocklist_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::mutable_gnss_satellite_blocklist() {
  _has_bits_[0] |= 0x00000020u;
  if (gnss_satellite_blocklist_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gnss_satellite_blocklist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Location.gnss_satellite_blocklist)
  return gnss_satellite_blocklist_;
}
inline void GlobalSettingsProto_Location::set_allocated_gnss_satellite_blocklist(::android::providers::settings::SettingProto* gnss_satellite_blocklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnss_satellite_blocklist_);
  }
  if (gnss_satellite_blocklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss_satellite_blocklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_satellite_blocklist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  gnss_satellite_blocklist_ = gnss_satellite_blocklist;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Location.gnss_satellite_blocklist)
}

// optional .android.providers.settings.SettingProto gnss_hal_location_request_duration_millis = 7 [(.android.privacy) = {
inline bool GlobalSettingsProto_Location::has_gnss_hal_location_request_duration_millis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Location::gnss_hal_location_request_duration_millis() const {
  const ::android::providers::settings::SettingProto* p = gnss_hal_location_request_duration_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Location.gnss_hal_location_request_duration_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::release_gnss_hal_location_request_duration_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Location.gnss_hal_location_request_duration_millis)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = gnss_hal_location_request_duration_millis_;
  gnss_hal_location_request_duration_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::mutable_gnss_hal_location_request_duration_millis() {
  _has_bits_[0] |= 0x00000040u;
  if (gnss_hal_location_request_duration_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gnss_hal_location_request_duration_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Location.gnss_hal_location_request_duration_millis)
  return gnss_hal_location_request_duration_millis_;
}
inline void GlobalSettingsProto_Location::set_allocated_gnss_hal_location_request_duration_millis(::android::providers::settings::SettingProto* gnss_hal_location_request_duration_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gnss_hal_location_request_duration_millis_);
  }
  if (gnss_hal_location_request_duration_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss_hal_location_request_duration_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss_hal_location_request_duration_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  gnss_hal_location_request_duration_millis_ = gnss_hal_location_request_duration_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Location.gnss_hal_location_request_duration_millis)
}

// optional .android.providers.settings.SettingProto ignore_settings_package_whitelist = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_Location::has_ignore_settings_package_whitelist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Location::ignore_settings_package_whitelist() const {
  const ::android::providers::settings::SettingProto* p = ignore_settings_package_whitelist_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Location.ignore_settings_package_whitelist)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::release_ignore_settings_package_whitelist() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Location.ignore_settings_package_whitelist)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = ignore_settings_package_whitelist_;
  ignore_settings_package_whitelist_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Location::mutable_ignore_settings_package_whitelist() {
  _has_bits_[0] |= 0x00000080u;
  if (ignore_settings_package_whitelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ignore_settings_package_whitelist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Location.ignore_settings_package_whitelist)
  return ignore_settings_package_whitelist_;
}
inline void GlobalSettingsProto_Location::set_allocated_ignore_settings_package_whitelist(::android::providers::settings::SettingProto* ignore_settings_package_whitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ignore_settings_package_whitelist_);
  }
  if (ignore_settings_package_whitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ignore_settings_package_whitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ignore_settings_package_whitelist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  ignore_settings_package_whitelist_ = ignore_settings_package_whitelist;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Location.ignore_settings_package_whitelist)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_LowPowerMode

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_LowPowerMode::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LowPowerMode::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LowPowerMode.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LowPowerMode.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LowPowerMode.enabled)
  return enabled_;
}
inline void GlobalSettingsProto_LowPowerMode::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LowPowerMode.enabled)
}

// optional .android.providers.settings.SettingProto trigger_level = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_LowPowerMode::has_trigger_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LowPowerMode::trigger_level() const {
  const ::android::providers::settings::SettingProto* p = trigger_level_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LowPowerMode.trigger_level)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::release_trigger_level() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LowPowerMode.trigger_level)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = trigger_level_;
  trigger_level_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::mutable_trigger_level() {
  _has_bits_[0] |= 0x00000002u;
  if (trigger_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    trigger_level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LowPowerMode.trigger_level)
  return trigger_level_;
}
inline void GlobalSettingsProto_LowPowerMode::set_allocated_trigger_level(::android::providers::settings::SettingProto* trigger_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_level_);
  }
  if (trigger_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trigger_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_level, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trigger_level_ = trigger_level;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LowPowerMode.trigger_level)
}

// optional .android.providers.settings.SettingProto trigger_level_max = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_LowPowerMode::has_trigger_level_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LowPowerMode::trigger_level_max() const {
  const ::android::providers::settings::SettingProto* p = trigger_level_max_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LowPowerMode.trigger_level_max)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::release_trigger_level_max() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LowPowerMode.trigger_level_max)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = trigger_level_max_;
  trigger_level_max_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::mutable_trigger_level_max() {
  _has_bits_[0] |= 0x00000004u;
  if (trigger_level_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    trigger_level_max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LowPowerMode.trigger_level_max)
  return trigger_level_max_;
}
inline void GlobalSettingsProto_LowPowerMode::set_allocated_trigger_level_max(::android::providers::settings::SettingProto* trigger_level_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_level_max_);
  }
  if (trigger_level_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trigger_level_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_level_max, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trigger_level_max_ = trigger_level_max;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LowPowerMode.trigger_level_max)
}

// optional .android.providers.settings.SettingProto automatic_power_saver_mode = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_LowPowerMode::has_automatic_power_saver_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LowPowerMode::automatic_power_saver_mode() const {
  const ::android::providers::settings::SettingProto* p = automatic_power_saver_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LowPowerMode.automatic_power_saver_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::release_automatic_power_saver_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LowPowerMode.automatic_power_saver_mode)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = automatic_power_saver_mode_;
  automatic_power_saver_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::mutable_automatic_power_saver_mode() {
  _has_bits_[0] |= 0x00000008u;
  if (automatic_power_saver_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    automatic_power_saver_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LowPowerMode.automatic_power_saver_mode)
  return automatic_power_saver_mode_;
}
inline void GlobalSettingsProto_LowPowerMode::set_allocated_automatic_power_saver_mode(::android::providers::settings::SettingProto* automatic_power_saver_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(automatic_power_saver_mode_);
  }
  if (automatic_power_saver_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      automatic_power_saver_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, automatic_power_saver_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  automatic_power_saver_mode_ = automatic_power_saver_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LowPowerMode.automatic_power_saver_mode)
}

// optional .android.providers.settings.SettingProto sticky_enabled = 5;
inline bool GlobalSettingsProto_LowPowerMode::has_sticky_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LowPowerMode::sticky_enabled() const {
  const ::android::providers::settings::SettingProto* p = sticky_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::release_sticky_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_enabled)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = sticky_enabled_;
  sticky_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::mutable_sticky_enabled() {
  _has_bits_[0] |= 0x00000010u;
  if (sticky_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sticky_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_enabled)
  return sticky_enabled_;
}
inline void GlobalSettingsProto_LowPowerMode::set_allocated_sticky_enabled(::android::providers::settings::SettingProto* sticky_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sticky_enabled_);
  }
  if (sticky_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sticky_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sticky_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sticky_enabled_ = sticky_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_enabled)
}

// optional .android.providers.settings.SettingProto sticky_auto_disable_enabled = 6;
inline bool GlobalSettingsProto_LowPowerMode::has_sticky_auto_disable_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LowPowerMode::sticky_auto_disable_enabled() const {
  const ::android::providers::settings::SettingProto* p = sticky_auto_disable_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_auto_disable_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::release_sticky_auto_disable_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_auto_disable_enabled)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = sticky_auto_disable_enabled_;
  sticky_auto_disable_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::mutable_sticky_auto_disable_enabled() {
  _has_bits_[0] |= 0x00000020u;
  if (sticky_auto_disable_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sticky_auto_disable_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_auto_disable_enabled)
  return sticky_auto_disable_enabled_;
}
inline void GlobalSettingsProto_LowPowerMode::set_allocated_sticky_auto_disable_enabled(::android::providers::settings::SettingProto* sticky_auto_disable_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sticky_auto_disable_enabled_);
  }
  if (sticky_auto_disable_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sticky_auto_disable_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sticky_auto_disable_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  sticky_auto_disable_enabled_ = sticky_auto_disable_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_auto_disable_enabled)
}

// optional .android.providers.settings.SettingProto sticky_auto_disable_level = 7;
inline bool GlobalSettingsProto_LowPowerMode::has_sticky_auto_disable_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_LowPowerMode::sticky_auto_disable_level() const {
  const ::android::providers::settings::SettingProto* p = sticky_auto_disable_level_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_auto_disable_level)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::release_sticky_auto_disable_level() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_auto_disable_level)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = sticky_auto_disable_level_;
  sticky_auto_disable_level_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_LowPowerMode::mutable_sticky_auto_disable_level() {
  _has_bits_[0] |= 0x00000040u;
  if (sticky_auto_disable_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sticky_auto_disable_level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_auto_disable_level)
  return sticky_auto_disable_level_;
}
inline void GlobalSettingsProto_LowPowerMode::set_allocated_sticky_auto_disable_level(::android::providers::settings::SettingProto* sticky_auto_disable_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sticky_auto_disable_level_);
  }
  if (sticky_auto_disable_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sticky_auto_disable_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sticky_auto_disable_level, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  sticky_auto_disable_level_ = sticky_auto_disable_level;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.LowPowerMode.sticky_auto_disable_level)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Mhl

// optional .android.providers.settings.SettingProto input_switching_enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Mhl::has_input_switching_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Mhl::input_switching_enabled() const {
  const ::android::providers::settings::SettingProto* p = input_switching_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Mhl.input_switching_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Mhl::release_input_switching_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Mhl.input_switching_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = input_switching_enabled_;
  input_switching_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Mhl::mutable_input_switching_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (input_switching_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    input_switching_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Mhl.input_switching_enabled)
  return input_switching_enabled_;
}
inline void GlobalSettingsProto_Mhl::set_allocated_input_switching_enabled(::android::providers::settings::SettingProto* input_switching_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_switching_enabled_);
  }
  if (input_switching_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_switching_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_switching_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  input_switching_enabled_ = input_switching_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Mhl.input_switching_enabled)
}

// optional .android.providers.settings.SettingProto power_charge_enabled = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Mhl::has_power_charge_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Mhl::power_charge_enabled() const {
  const ::android::providers::settings::SettingProto* p = power_charge_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Mhl.power_charge_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Mhl::release_power_charge_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Mhl.power_charge_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = power_charge_enabled_;
  power_charge_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Mhl::mutable_power_charge_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (power_charge_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    power_charge_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Mhl.power_charge_enabled)
  return power_charge_enabled_;
}
inline void GlobalSettingsProto_Mhl::set_allocated_power_charge_enabled(::android::providers::settings::SettingProto* power_charge_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_charge_enabled_);
  }
  if (power_charge_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_charge_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_charge_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  power_charge_enabled_ = power_charge_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Mhl.power_charge_enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_MobileData

// optional .android.providers.settings.SettingProto allowed = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_MobileData::has_allowed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_MobileData::allowed() const {
  const ::android::providers::settings::SettingProto* p = allowed_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.MobileData.allowed)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MobileData::release_allowed() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.MobileData.allowed)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = allowed_;
  allowed_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MobileData::mutable_allowed() {
  _has_bits_[0] |= 0x00000001u;
  if (allowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    allowed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.MobileData.allowed)
  return allowed_;
}
inline void GlobalSettingsProto_MobileData::set_allocated_allowed(::android::providers::settings::SettingProto* allowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowed_);
  }
  if (allowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  allowed_ = allowed;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.MobileData.allowed)
}

// optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_MobileData::has_always_on() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_MobileData::always_on() const {
  const ::android::providers::settings::SettingProto* p = always_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.MobileData.always_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MobileData::release_always_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.MobileData.always_on)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = always_on_;
  always_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MobileData::mutable_always_on() {
  _has_bits_[0] |= 0x00000002u;
  if (always_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    always_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.MobileData.always_on)
  return always_on_;
}
inline void GlobalSettingsProto_MobileData::set_allocated_always_on(::android::providers::settings::SettingProto* always_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(always_on_);
  }
  if (always_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      always_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, always_on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  always_on_ = always_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.MobileData.always_on)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_MultiSim

// optional .android.providers.settings.SettingProto voice_call_subscription = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_MultiSim::has_voice_call_subscription() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_MultiSim::voice_call_subscription() const {
  const ::android::providers::settings::SettingProto* p = voice_call_subscription_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.MultiSim.voice_call_subscription)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::release_voice_call_subscription() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.MultiSim.voice_call_subscription)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = voice_call_subscription_;
  voice_call_subscription_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::mutable_voice_call_subscription() {
  _has_bits_[0] |= 0x00000001u;
  if (voice_call_subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    voice_call_subscription_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.MultiSim.voice_call_subscription)
  return voice_call_subscription_;
}
inline void GlobalSettingsProto_MultiSim::set_allocated_voice_call_subscription(::android::providers::settings::SettingProto* voice_call_subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_call_subscription_);
  }
  if (voice_call_subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice_call_subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice_call_subscription, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  voice_call_subscription_ = voice_call_subscription;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.MultiSim.voice_call_subscription)
}

// optional .android.providers.settings.SettingProto voice_prompt = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_MultiSim::has_voice_prompt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_MultiSim::voice_prompt() const {
  const ::android::providers::settings::SettingProto* p = voice_prompt_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.MultiSim.voice_prompt)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::release_voice_prompt() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.MultiSim.voice_prompt)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = voice_prompt_;
  voice_prompt_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::mutable_voice_prompt() {
  _has_bits_[0] |= 0x00000002u;
  if (voice_prompt_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    voice_prompt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.MultiSim.voice_prompt)
  return voice_prompt_;
}
inline void GlobalSettingsProto_MultiSim::set_allocated_voice_prompt(::android::providers::settings::SettingProto* voice_prompt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_prompt_);
  }
  if (voice_prompt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice_prompt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice_prompt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  voice_prompt_ = voice_prompt;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.MultiSim.voice_prompt)
}

// optional .android.providers.settings.SettingProto data_call_subscription = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_MultiSim::has_data_call_subscription() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_MultiSim::data_call_subscription() const {
  const ::android::providers::settings::SettingProto* p = data_call_subscription_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.MultiSim.data_call_subscription)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::release_data_call_subscription() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.MultiSim.data_call_subscription)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = data_call_subscription_;
  data_call_subscription_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::mutable_data_call_subscription() {
  _has_bits_[0] |= 0x00000004u;
  if (data_call_subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    data_call_subscription_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.MultiSim.data_call_subscription)
  return data_call_subscription_;
}
inline void GlobalSettingsProto_MultiSim::set_allocated_data_call_subscription(::android::providers::settings::SettingProto* data_call_subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_call_subscription_);
  }
  if (data_call_subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_call_subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_call_subscription, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_call_subscription_ = data_call_subscription;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.MultiSim.data_call_subscription)
}

// optional .android.providers.settings.SettingProto sms_subscription = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_MultiSim::has_sms_subscription() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_MultiSim::sms_subscription() const {
  const ::android::providers::settings::SettingProto* p = sms_subscription_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.MultiSim.sms_subscription)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::release_sms_subscription() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.MultiSim.sms_subscription)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = sms_subscription_;
  sms_subscription_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::mutable_sms_subscription() {
  _has_bits_[0] |= 0x00000008u;
  if (sms_subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sms_subscription_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.MultiSim.sms_subscription)
  return sms_subscription_;
}
inline void GlobalSettingsProto_MultiSim::set_allocated_sms_subscription(::android::providers::settings::SettingProto* sms_subscription) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sms_subscription_);
  }
  if (sms_subscription) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sms_subscription = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_subscription, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sms_subscription_ = sms_subscription;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.MultiSim.sms_subscription)
}

// optional .android.providers.settings.SettingProto sms_prompt = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_MultiSim::has_sms_prompt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_MultiSim::sms_prompt() const {
  const ::android::providers::settings::SettingProto* p = sms_prompt_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.MultiSim.sms_prompt)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::release_sms_prompt() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.MultiSim.sms_prompt)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = sms_prompt_;
  sms_prompt_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_MultiSim::mutable_sms_prompt() {
  _has_bits_[0] |= 0x00000010u;
  if (sms_prompt_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sms_prompt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.MultiSim.sms_prompt)
  return sms_prompt_;
}
inline void GlobalSettingsProto_MultiSim::set_allocated_sms_prompt(::android::providers::settings::SettingProto* sms_prompt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sms_prompt_);
  }
  if (sms_prompt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sms_prompt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_prompt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sms_prompt_ = sms_prompt;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.MultiSim.sms_prompt)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Netstats

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.enabled)
  return enabled_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.enabled)
}

// optional .android.providers.settings.SettingProto poll_interval = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_poll_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::poll_interval() const {
  const ::android::providers::settings::SettingProto* p = poll_interval_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.poll_interval)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_poll_interval() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.poll_interval)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = poll_interval_;
  poll_interval_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_poll_interval() {
  _has_bits_[0] |= 0x00000002u;
  if (poll_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    poll_interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.poll_interval)
  return poll_interval_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_poll_interval(::android::providers::settings::SettingProto* poll_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(poll_interval_);
  }
  if (poll_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      poll_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poll_interval, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  poll_interval_ = poll_interval;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.poll_interval)
}

// optional .android.providers.settings.SettingProto time_cache_max_age = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_time_cache_max_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::time_cache_max_age() const {
  const ::android::providers::settings::SettingProto* p = time_cache_max_age_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.time_cache_max_age)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_time_cache_max_age() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.time_cache_max_age)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = time_cache_max_age_;
  time_cache_max_age_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_time_cache_max_age() {
  _has_bits_[0] |= 0x00000004u;
  if (time_cache_max_age_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    time_cache_max_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.time_cache_max_age)
  return time_cache_max_age_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_time_cache_max_age(::android::providers::settings::SettingProto* time_cache_max_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_cache_max_age_);
  }
  if (time_cache_max_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_cache_max_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_cache_max_age, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  time_cache_max_age_ = time_cache_max_age;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.time_cache_max_age)
}

// optional .android.providers.settings.SettingProto global_alert_bytes = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_global_alert_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::global_alert_bytes() const {
  const ::android::providers::settings::SettingProto* p = global_alert_bytes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.global_alert_bytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_global_alert_bytes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.global_alert_bytes)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = global_alert_bytes_;
  global_alert_bytes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_global_alert_bytes() {
  _has_bits_[0] |= 0x00000008u;
  if (global_alert_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    global_alert_bytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.global_alert_bytes)
  return global_alert_bytes_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_global_alert_bytes(::android::providers::settings::SettingProto* global_alert_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_alert_bytes_);
  }
  if (global_alert_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_alert_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_alert_bytes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  global_alert_bytes_ = global_alert_bytes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.global_alert_bytes)
}

// optional .android.providers.settings.SettingProto sample_enabled = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_sample_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::sample_enabled() const {
  const ::android::providers::settings::SettingProto* p = sample_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.sample_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_sample_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.sample_enabled)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = sample_enabled_;
  sample_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_sample_enabled() {
  _has_bits_[0] |= 0x00000010u;
  if (sample_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sample_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.sample_enabled)
  return sample_enabled_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_sample_enabled(::android::providers::settings::SettingProto* sample_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_enabled_);
  }
  if (sample_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sample_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sample_enabled_ = sample_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.sample_enabled)
}

// optional .android.providers.settings.SettingProto augment_enabled = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_augment_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::augment_enabled() const {
  const ::android::providers::settings::SettingProto* p = augment_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.augment_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_augment_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.augment_enabled)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = augment_enabled_;
  augment_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_augment_enabled() {
  _has_bits_[0] |= 0x00000020u;
  if (augment_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    augment_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.augment_enabled)
  return augment_enabled_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_augment_enabled(::android::providers::settings::SettingProto* augment_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(augment_enabled_);
  }
  if (augment_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      augment_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, augment_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  augment_enabled_ = augment_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.augment_enabled)
}

// optional .android.providers.settings.SettingProto dev_bucket_duration = 7 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_dev_bucket_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::dev_bucket_duration() const {
  const ::android::providers::settings::SettingProto* p = dev_bucket_duration_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.dev_bucket_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_dev_bucket_duration() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.dev_bucket_duration)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = dev_bucket_duration_;
  dev_bucket_duration_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_dev_bucket_duration() {
  _has_bits_[0] |= 0x00000040u;
  if (dev_bucket_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dev_bucket_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.dev_bucket_duration)
  return dev_bucket_duration_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_dev_bucket_duration(::android::providers::settings::SettingProto* dev_bucket_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dev_bucket_duration_);
  }
  if (dev_bucket_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dev_bucket_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dev_bucket_duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  dev_bucket_duration_ = dev_bucket_duration;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.dev_bucket_duration)
}

// optional .android.providers.settings.SettingProto dev_persist_bytes = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_dev_persist_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::dev_persist_bytes() const {
  const ::android::providers::settings::SettingProto* p = dev_persist_bytes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.dev_persist_bytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_dev_persist_bytes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.dev_persist_bytes)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = dev_persist_bytes_;
  dev_persist_bytes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_dev_persist_bytes() {
  _has_bits_[0] |= 0x00000080u;
  if (dev_persist_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dev_persist_bytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.dev_persist_bytes)
  return dev_persist_bytes_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_dev_persist_bytes(::android::providers::settings::SettingProto* dev_persist_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dev_persist_bytes_);
  }
  if (dev_persist_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dev_persist_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dev_persist_bytes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  dev_persist_bytes_ = dev_persist_bytes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.dev_persist_bytes)
}

// optional .android.providers.settings.SettingProto dev_rotate_age = 9 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_dev_rotate_age() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::dev_rotate_age() const {
  const ::android::providers::settings::SettingProto* p = dev_rotate_age_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.dev_rotate_age)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_dev_rotate_age() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.dev_rotate_age)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = dev_rotate_age_;
  dev_rotate_age_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_dev_rotate_age() {
  _has_bits_[0] |= 0x00000100u;
  if (dev_rotate_age_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dev_rotate_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.dev_rotate_age)
  return dev_rotate_age_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_dev_rotate_age(::android::providers::settings::SettingProto* dev_rotate_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dev_rotate_age_);
  }
  if (dev_rotate_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dev_rotate_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dev_rotate_age, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  dev_rotate_age_ = dev_rotate_age;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.dev_rotate_age)
}

// optional .android.providers.settings.SettingProto dev_delete_age = 10 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_dev_delete_age() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::dev_delete_age() const {
  const ::android::providers::settings::SettingProto* p = dev_delete_age_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.dev_delete_age)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_dev_delete_age() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.dev_delete_age)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = dev_delete_age_;
  dev_delete_age_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_dev_delete_age() {
  _has_bits_[0] |= 0x00000200u;
  if (dev_delete_age_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dev_delete_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.dev_delete_age)
  return dev_delete_age_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_dev_delete_age(::android::providers::settings::SettingProto* dev_delete_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dev_delete_age_);
  }
  if (dev_delete_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dev_delete_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dev_delete_age, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  dev_delete_age_ = dev_delete_age;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.dev_delete_age)
}

// optional .android.providers.settings.SettingProto uid_bucket_duration = 11 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_uid_bucket_duration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::uid_bucket_duration() const {
  const ::android::providers::settings::SettingProto* p = uid_bucket_duration_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.uid_bucket_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_uid_bucket_duration() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.uid_bucket_duration)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = uid_bucket_duration_;
  uid_bucket_duration_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_uid_bucket_duration() {
  _has_bits_[0] |= 0x00000400u;
  if (uid_bucket_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uid_bucket_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.uid_bucket_duration)
  return uid_bucket_duration_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_uid_bucket_duration(::android::providers::settings::SettingProto* uid_bucket_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_bucket_duration_);
  }
  if (uid_bucket_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_bucket_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_bucket_duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  uid_bucket_duration_ = uid_bucket_duration;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.uid_bucket_duration)
}

// optional .android.providers.settings.SettingProto uid_persist_bytes = 12 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_uid_persist_bytes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::uid_persist_bytes() const {
  const ::android::providers::settings::SettingProto* p = uid_persist_bytes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.uid_persist_bytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_uid_persist_bytes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.uid_persist_bytes)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = uid_persist_bytes_;
  uid_persist_bytes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_uid_persist_bytes() {
  _has_bits_[0] |= 0x00000800u;
  if (uid_persist_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uid_persist_bytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.uid_persist_bytes)
  return uid_persist_bytes_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_uid_persist_bytes(::android::providers::settings::SettingProto* uid_persist_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_persist_bytes_);
  }
  if (uid_persist_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_persist_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_persist_bytes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  uid_persist_bytes_ = uid_persist_bytes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.uid_persist_bytes)
}

// optional .android.providers.settings.SettingProto uid_rotate_age = 13 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_uid_rotate_age() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::uid_rotate_age() const {
  const ::android::providers::settings::SettingProto* p = uid_rotate_age_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.uid_rotate_age)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_uid_rotate_age() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.uid_rotate_age)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = uid_rotate_age_;
  uid_rotate_age_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_uid_rotate_age() {
  _has_bits_[0] |= 0x00001000u;
  if (uid_rotate_age_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uid_rotate_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.uid_rotate_age)
  return uid_rotate_age_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_uid_rotate_age(::android::providers::settings::SettingProto* uid_rotate_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_rotate_age_);
  }
  if (uid_rotate_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_rotate_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_rotate_age, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  uid_rotate_age_ = uid_rotate_age;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.uid_rotate_age)
}

// optional .android.providers.settings.SettingProto uid_delete_age = 14 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_uid_delete_age() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::uid_delete_age() const {
  const ::android::providers::settings::SettingProto* p = uid_delete_age_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.uid_delete_age)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_uid_delete_age() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.uid_delete_age)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = uid_delete_age_;
  uid_delete_age_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_uid_delete_age() {
  _has_bits_[0] |= 0x00002000u;
  if (uid_delete_age_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uid_delete_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.uid_delete_age)
  return uid_delete_age_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_uid_delete_age(::android::providers::settings::SettingProto* uid_delete_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_delete_age_);
  }
  if (uid_delete_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_delete_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_delete_age, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  uid_delete_age_ = uid_delete_age;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.uid_delete_age)
}

// optional .android.providers.settings.SettingProto uid_tag_bucket_duration = 15 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_uid_tag_bucket_duration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::uid_tag_bucket_duration() const {
  const ::android::providers::settings::SettingProto* p = uid_tag_bucket_duration_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_bucket_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_uid_tag_bucket_duration() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_bucket_duration)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = uid_tag_bucket_duration_;
  uid_tag_bucket_duration_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_uid_tag_bucket_duration() {
  _has_bits_[0] |= 0x00004000u;
  if (uid_tag_bucket_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uid_tag_bucket_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_bucket_duration)
  return uid_tag_bucket_duration_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_uid_tag_bucket_duration(::android::providers::settings::SettingProto* uid_tag_bucket_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_tag_bucket_duration_);
  }
  if (uid_tag_bucket_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_tag_bucket_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_tag_bucket_duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  uid_tag_bucket_duration_ = uid_tag_bucket_duration;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_bucket_duration)
}

// optional .android.providers.settings.SettingProto uid_tag_persist_bytes = 16 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_uid_tag_persist_bytes() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::uid_tag_persist_bytes() const {
  const ::android::providers::settings::SettingProto* p = uid_tag_persist_bytes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_persist_bytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_uid_tag_persist_bytes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_persist_bytes)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = uid_tag_persist_bytes_;
  uid_tag_persist_bytes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_uid_tag_persist_bytes() {
  _has_bits_[0] |= 0x00008000u;
  if (uid_tag_persist_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uid_tag_persist_bytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_persist_bytes)
  return uid_tag_persist_bytes_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_uid_tag_persist_bytes(::android::providers::settings::SettingProto* uid_tag_persist_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_tag_persist_bytes_);
  }
  if (uid_tag_persist_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_tag_persist_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_tag_persist_bytes, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  uid_tag_persist_bytes_ = uid_tag_persist_bytes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_persist_bytes)
}

// optional .android.providers.settings.SettingProto uid_tag_rotate_age = 17 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_uid_tag_rotate_age() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::uid_tag_rotate_age() const {
  const ::android::providers::settings::SettingProto* p = uid_tag_rotate_age_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_rotate_age)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_uid_tag_rotate_age() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_rotate_age)
  _has_bits_[0] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = uid_tag_rotate_age_;
  uid_tag_rotate_age_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_uid_tag_rotate_age() {
  _has_bits_[0] |= 0x00010000u;
  if (uid_tag_rotate_age_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uid_tag_rotate_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_rotate_age)
  return uid_tag_rotate_age_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_uid_tag_rotate_age(::android::providers::settings::SettingProto* uid_tag_rotate_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_tag_rotate_age_);
  }
  if (uid_tag_rotate_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_tag_rotate_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_tag_rotate_age, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  uid_tag_rotate_age_ = uid_tag_rotate_age;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_rotate_age)
}

// optional .android.providers.settings.SettingProto uid_tag_delete_age = 18 [(.android.privacy) = {
inline bool GlobalSettingsProto_Netstats::has_uid_tag_delete_age() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Netstats::uid_tag_delete_age() const {
  const ::android::providers::settings::SettingProto* p = uid_tag_delete_age_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_delete_age)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::release_uid_tag_delete_age() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_delete_age)
  _has_bits_[0] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = uid_tag_delete_age_;
  uid_tag_delete_age_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Netstats::mutable_uid_tag_delete_age() {
  _has_bits_[0] |= 0x00020000u;
  if (uid_tag_delete_age_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uid_tag_delete_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_delete_age)
  return uid_tag_delete_age_;
}
inline void GlobalSettingsProto_Netstats::set_allocated_uid_tag_delete_age(::android::providers::settings::SettingProto* uid_tag_delete_age) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uid_tag_delete_age_);
  }
  if (uid_tag_delete_age) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uid_tag_delete_age = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uid_tag_delete_age, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  uid_tag_delete_age_ = uid_tag_delete_age;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Netstats.uid_tag_delete_age)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Network

// optional .android.providers.settings.SettingProto preference = 1;
inline bool GlobalSettingsProto_Network::has_preference() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::preference() const {
  const ::android::providers::settings::SettingProto* p = preference_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.preference)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_preference() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.preference)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = preference_;
  preference_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_preference() {
  _has_bits_[0] |= 0x00000001u;
  if (preference_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    preference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.preference)
  return preference_;
}
inline void GlobalSettingsProto_Network::set_allocated_preference(::android::providers::settings::SettingProto* preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preference_);
  }
  if (preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preference_ = preference;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.preference)
}

// optional .android.providers.settings.SettingProto preferred_network_mode = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_preferred_network_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::preferred_network_mode() const {
  const ::android::providers::settings::SettingProto* p = preferred_network_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.preferred_network_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_preferred_network_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.preferred_network_mode)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = preferred_network_mode_;
  preferred_network_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_preferred_network_mode() {
  _has_bits_[0] |= 0x00000002u;
  if (preferred_network_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    preferred_network_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.preferred_network_mode)
  return preferred_network_mode_;
}
inline void GlobalSettingsProto_Network::set_allocated_preferred_network_mode(::android::providers::settings::SettingProto* preferred_network_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferred_network_mode_);
  }
  if (preferred_network_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferred_network_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferred_network_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preferred_network_mode_ = preferred_network_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.preferred_network_mode)
}

// optional .android.providers.settings.SettingProto scorer_app = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_scorer_app() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::scorer_app() const {
  const ::android::providers::settings::SettingProto* p = scorer_app_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.scorer_app)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_scorer_app() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.scorer_app)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = scorer_app_;
  scorer_app_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_scorer_app() {
  _has_bits_[0] |= 0x00000004u;
  if (scorer_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    scorer_app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.scorer_app)
  return scorer_app_;
}
inline void GlobalSettingsProto_Network::set_allocated_scorer_app(::android::providers::settings::SettingProto* scorer_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scorer_app_);
  }
  if (scorer_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scorer_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scorer_app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  scorer_app_ = scorer_app;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.scorer_app)
}

// optional .android.providers.settings.SettingProto switch_notification_daily_limit = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_switch_notification_daily_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::switch_notification_daily_limit() const {
  const ::android::providers::settings::SettingProto* p = switch_notification_daily_limit_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.switch_notification_daily_limit)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_switch_notification_daily_limit() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.switch_notification_daily_limit)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = switch_notification_daily_limit_;
  switch_notification_daily_limit_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_switch_notification_daily_limit() {
  _has_bits_[0] |= 0x00000008u;
  if (switch_notification_daily_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    switch_notification_daily_limit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.switch_notification_daily_limit)
  return switch_notification_daily_limit_;
}
inline void GlobalSettingsProto_Network::set_allocated_switch_notification_daily_limit(::android::providers::settings::SettingProto* switch_notification_daily_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(switch_notification_daily_limit_);
  }
  if (switch_notification_daily_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      switch_notification_daily_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_notification_daily_limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  switch_notification_daily_limit_ = switch_notification_daily_limit;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.switch_notification_daily_limit)
}

// optional .android.providers.settings.SettingProto switch_notification_rate_limit_millis = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_switch_notification_rate_limit_millis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::switch_notification_rate_limit_millis() const {
  const ::android::providers::settings::SettingProto* p = switch_notification_rate_limit_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.switch_notification_rate_limit_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_switch_notification_rate_limit_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.switch_notification_rate_limit_millis)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = switch_notification_rate_limit_millis_;
  switch_notification_rate_limit_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_switch_notification_rate_limit_millis() {
  _has_bits_[0] |= 0x00000010u;
  if (switch_notification_rate_limit_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    switch_notification_rate_limit_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.switch_notification_rate_limit_millis)
  return switch_notification_rate_limit_millis_;
}
inline void GlobalSettingsProto_Network::set_allocated_switch_notification_rate_limit_millis(::android::providers::settings::SettingProto* switch_notification_rate_limit_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(switch_notification_rate_limit_millis_);
  }
  if (switch_notification_rate_limit_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      switch_notification_rate_limit_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_notification_rate_limit_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  switch_notification_rate_limit_millis_ = switch_notification_rate_limit_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.switch_notification_rate_limit_millis)
}

// optional .android.providers.settings.SettingProto avoid_bad_wifi = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_avoid_bad_wifi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::avoid_bad_wifi() const {
  const ::android::providers::settings::SettingProto* p = avoid_bad_wifi_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.avoid_bad_wifi)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_avoid_bad_wifi() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.avoid_bad_wifi)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = avoid_bad_wifi_;
  avoid_bad_wifi_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_avoid_bad_wifi() {
  _has_bits_[0] |= 0x00000020u;
  if (avoid_bad_wifi_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    avoid_bad_wifi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.avoid_bad_wifi)
  return avoid_bad_wifi_;
}
inline void GlobalSettingsProto_Network::set_allocated_avoid_bad_wifi(::android::providers::settings::SettingProto* avoid_bad_wifi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(avoid_bad_wifi_);
  }
  if (avoid_bad_wifi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      avoid_bad_wifi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avoid_bad_wifi, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  avoid_bad_wifi_ = avoid_bad_wifi;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.avoid_bad_wifi)
}

// optional .android.providers.settings.SettingProto metered_multipath_preference = 7 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_metered_multipath_preference() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::metered_multipath_preference() const {
  const ::android::providers::settings::SettingProto* p = metered_multipath_preference_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.metered_multipath_preference)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_metered_multipath_preference() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.metered_multipath_preference)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = metered_multipath_preference_;
  metered_multipath_preference_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_metered_multipath_preference() {
  _has_bits_[0] |= 0x00000040u;
  if (metered_multipath_preference_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    metered_multipath_preference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.metered_multipath_preference)
  return metered_multipath_preference_;
}
inline void GlobalSettingsProto_Network::set_allocated_metered_multipath_preference(::android::providers::settings::SettingProto* metered_multipath_preference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metered_multipath_preference_);
  }
  if (metered_multipath_preference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metered_multipath_preference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metered_multipath_preference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  metered_multipath_preference_ = metered_multipath_preference;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.metered_multipath_preference)
}

// optional .android.providers.settings.SettingProto watchlist_last_report_time = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_watchlist_last_report_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::watchlist_last_report_time() const {
  const ::android::providers::settings::SettingProto* p = watchlist_last_report_time_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.watchlist_last_report_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_watchlist_last_report_time() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.watchlist_last_report_time)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = watchlist_last_report_time_;
  watchlist_last_report_time_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_watchlist_last_report_time() {
  _has_bits_[0] |= 0x00000080u;
  if (watchlist_last_report_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    watchlist_last_report_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.watchlist_last_report_time)
  return watchlist_last_report_time_;
}
inline void GlobalSettingsProto_Network::set_allocated_watchlist_last_report_time(::android::providers::settings::SettingProto* watchlist_last_report_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(watchlist_last_report_time_);
  }
  if (watchlist_last_report_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      watchlist_last_report_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchlist_last_report_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  watchlist_last_report_time_ = watchlist_last_report_time;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.watchlist_last_report_time)
}

// optional .android.providers.settings.SettingProto scoring_ui_enabled = 9 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_scoring_ui_enabled() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::scoring_ui_enabled() const {
  const ::android::providers::settings::SettingProto* p = scoring_ui_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.scoring_ui_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_scoring_ui_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.scoring_ui_enabled)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = scoring_ui_enabled_;
  scoring_ui_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_scoring_ui_enabled() {
  _has_bits_[0] |= 0x00000100u;
  if (scoring_ui_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    scoring_ui_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.scoring_ui_enabled)
  return scoring_ui_enabled_;
}
inline void GlobalSettingsProto_Network::set_allocated_scoring_ui_enabled(::android::providers::settings::SettingProto* scoring_ui_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scoring_ui_enabled_);
  }
  if (scoring_ui_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scoring_ui_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoring_ui_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  scoring_ui_enabled_ = scoring_ui_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.scoring_ui_enabled)
}

// optional .android.providers.settings.SettingProto recommendations_enabled = 10 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_recommendations_enabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::recommendations_enabled() const {
  const ::android::providers::settings::SettingProto* p = recommendations_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.recommendations_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_recommendations_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.recommendations_enabled)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = recommendations_enabled_;
  recommendations_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_recommendations_enabled() {
  _has_bits_[0] |= 0x00000200u;
  if (recommendations_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    recommendations_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.recommendations_enabled)
  return recommendations_enabled_;
}
inline void GlobalSettingsProto_Network::set_allocated_recommendations_enabled(::android::providers::settings::SettingProto* recommendations_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendations_enabled_);
  }
  if (recommendations_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recommendations_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendations_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  recommendations_enabled_ = recommendations_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.recommendations_enabled)
}

// optional .android.providers.settings.SettingProto recommendations_package = 11 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_recommendations_package() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::recommendations_package() const {
  const ::android::providers::settings::SettingProto* p = recommendations_package_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.recommendations_package)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_recommendations_package() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.recommendations_package)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = recommendations_package_;
  recommendations_package_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_recommendations_package() {
  _has_bits_[0] |= 0x00000400u;
  if (recommendations_package_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    recommendations_package_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.recommendations_package)
  return recommendations_package_;
}
inline void GlobalSettingsProto_Network::set_allocated_recommendations_package(::android::providers::settings::SettingProto* recommendations_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendations_package_);
  }
  if (recommendations_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recommendations_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendations_package, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  recommendations_package_ = recommendations_package;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.recommendations_package)
}

// optional .android.providers.settings.SettingProto recommendation_request_timeout_ms = 12 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_recommendation_request_timeout_ms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::recommendation_request_timeout_ms() const {
  const ::android::providers::settings::SettingProto* p = recommendation_request_timeout_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.recommendation_request_timeout_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_recommendation_request_timeout_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.recommendation_request_timeout_ms)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = recommendation_request_timeout_ms_;
  recommendation_request_timeout_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_recommendation_request_timeout_ms() {
  _has_bits_[0] |= 0x00000800u;
  if (recommendation_request_timeout_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    recommendation_request_timeout_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.recommendation_request_timeout_ms)
  return recommendation_request_timeout_ms_;
}
inline void GlobalSettingsProto_Network::set_allocated_recommendation_request_timeout_ms(::android::providers::settings::SettingProto* recommendation_request_timeout_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendation_request_timeout_ms_);
  }
  if (recommendation_request_timeout_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recommendation_request_timeout_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendation_request_timeout_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  recommendation_request_timeout_ms_ = recommendation_request_timeout_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.recommendation_request_timeout_ms)
}

// optional .android.providers.settings.SettingProto watchlist_enabled = 13 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_watchlist_enabled() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::watchlist_enabled() const {
  const ::android::providers::settings::SettingProto* p = watchlist_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.watchlist_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_watchlist_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.watchlist_enabled)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = watchlist_enabled_;
  watchlist_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_watchlist_enabled() {
  _has_bits_[0] |= 0x00001000u;
  if (watchlist_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    watchlist_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.watchlist_enabled)
  return watchlist_enabled_;
}
inline void GlobalSettingsProto_Network::set_allocated_watchlist_enabled(::android::providers::settings::SettingProto* watchlist_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(watchlist_enabled_);
  }
  if (watchlist_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      watchlist_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchlist_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  watchlist_enabled_ = watchlist_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.watchlist_enabled)
}

// optional .android.providers.settings.SettingProto scoring_provisioned = 14 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_scoring_provisioned() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::scoring_provisioned() const {
  const ::android::providers::settings::SettingProto* p = scoring_provisioned_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.scoring_provisioned)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_scoring_provisioned() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.scoring_provisioned)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = scoring_provisioned_;
  scoring_provisioned_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_scoring_provisioned() {
  _has_bits_[0] |= 0x00002000u;
  if (scoring_provisioned_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    scoring_provisioned_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.scoring_provisioned)
  return scoring_provisioned_;
}
inline void GlobalSettingsProto_Network::set_allocated_scoring_provisioned(::android::providers::settings::SettingProto* scoring_provisioned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scoring_provisioned_);
  }
  if (scoring_provisioned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scoring_provisioned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoring_provisioned, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  scoring_provisioned_ = scoring_provisioned;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.scoring_provisioned)
}

// optional .android.providers.settings.SettingProto access_timeout_ms = 15 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_access_timeout_ms() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::access_timeout_ms() const {
  const ::android::providers::settings::SettingProto* p = access_timeout_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.access_timeout_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_access_timeout_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.access_timeout_ms)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = access_timeout_ms_;
  access_timeout_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_access_timeout_ms() {
  _has_bits_[0] |= 0x00004000u;
  if (access_timeout_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    access_timeout_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.access_timeout_ms)
  return access_timeout_ms_;
}
inline void GlobalSettingsProto_Network::set_allocated_access_timeout_ms(::android::providers::settings::SettingProto* access_timeout_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_timeout_ms_);
  }
  if (access_timeout_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      access_timeout_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_timeout_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  access_timeout_ms_ = access_timeout_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.access_timeout_ms)
}

// optional .android.providers.settings.SettingProto recommended_network_evaluator_cache_expiry_ms = 16 [(.android.privacy) = {
inline bool GlobalSettingsProto_Network::has_recommended_network_evaluator_cache_expiry_ms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Network::recommended_network_evaluator_cache_expiry_ms() const {
  const ::android::providers::settings::SettingProto* p = recommended_network_evaluator_cache_expiry_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Network.recommended_network_evaluator_cache_expiry_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::release_recommended_network_evaluator_cache_expiry_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Network.recommended_network_evaluator_cache_expiry_ms)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = recommended_network_evaluator_cache_expiry_ms_;
  recommended_network_evaluator_cache_expiry_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Network::mutable_recommended_network_evaluator_cache_expiry_ms() {
  _has_bits_[0] |= 0x00008000u;
  if (recommended_network_evaluator_cache_expiry_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    recommended_network_evaluator_cache_expiry_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Network.recommended_network_evaluator_cache_expiry_ms)
  return recommended_network_evaluator_cache_expiry_ms_;
}
inline void GlobalSettingsProto_Network::set_allocated_recommended_network_evaluator_cache_expiry_ms(::android::providers::settings::SettingProto* recommended_network_evaluator_cache_expiry_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommended_network_evaluator_cache_expiry_ms_);
  }
  if (recommended_network_evaluator_cache_expiry_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recommended_network_evaluator_cache_expiry_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommended_network_evaluator_cache_expiry_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  recommended_network_evaluator_cache_expiry_ms_ = recommended_network_evaluator_cache_expiry_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Network.recommended_network_evaluator_cache_expiry_ms)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_NitzUpdate

// optional .android.providers.settings.SettingProto diff = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_NitzUpdate::has_diff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_NitzUpdate::diff() const {
  const ::android::providers::settings::SettingProto* p = diff_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.NitzUpdate.diff)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_NitzUpdate::release_diff() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.NitzUpdate.diff)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = diff_;
  diff_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_NitzUpdate::mutable_diff() {
  _has_bits_[0] |= 0x00000001u;
  if (diff_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    diff_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.NitzUpdate.diff)
  return diff_;
}
inline void GlobalSettingsProto_NitzUpdate::set_allocated_diff(::android::providers::settings::SettingProto* diff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diff_);
  }
  if (diff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diff, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  diff_ = diff;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.NitzUpdate.diff)
}

// optional .android.providers.settings.SettingProto spacing = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_NitzUpdate::has_spacing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_NitzUpdate::spacing() const {
  const ::android::providers::settings::SettingProto* p = spacing_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.NitzUpdate.spacing)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_NitzUpdate::release_spacing() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.NitzUpdate.spacing)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = spacing_;
  spacing_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_NitzUpdate::mutable_spacing() {
  _has_bits_[0] |= 0x00000002u;
  if (spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    spacing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.NitzUpdate.spacing)
  return spacing_;
}
inline void GlobalSettingsProto_NitzUpdate::set_allocated_spacing(::android::providers::settings::SettingProto* spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spacing_);
  }
  if (spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  spacing_ = spacing;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.NitzUpdate.spacing)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Notification

// optional .android.providers.settings.SettingProto max_notification_enqueue_rate = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Notification::has_max_notification_enqueue_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Notification::max_notification_enqueue_rate() const {
  const ::android::providers::settings::SettingProto* p = max_notification_enqueue_rate_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Notification.max_notification_enqueue_rate)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::release_max_notification_enqueue_rate() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Notification.max_notification_enqueue_rate)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = max_notification_enqueue_rate_;
  max_notification_enqueue_rate_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::mutable_max_notification_enqueue_rate() {
  _has_bits_[0] |= 0x00000001u;
  if (max_notification_enqueue_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_notification_enqueue_rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Notification.max_notification_enqueue_rate)
  return max_notification_enqueue_rate_;
}
inline void GlobalSettingsProto_Notification::set_allocated_max_notification_enqueue_rate(::android::providers::settings::SettingProto* max_notification_enqueue_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_notification_enqueue_rate_);
  }
  if (max_notification_enqueue_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_notification_enqueue_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_notification_enqueue_rate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_notification_enqueue_rate_ = max_notification_enqueue_rate;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Notification.max_notification_enqueue_rate)
}

// optional .android.providers.settings.SettingProto show_notification_channel_warnings = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Notification::has_show_notification_channel_warnings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Notification::show_notification_channel_warnings() const {
  const ::android::providers::settings::SettingProto* p = show_notification_channel_warnings_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Notification.show_notification_channel_warnings)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::release_show_notification_channel_warnings() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Notification.show_notification_channel_warnings)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = show_notification_channel_warnings_;
  show_notification_channel_warnings_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::mutable_show_notification_channel_warnings() {
  _has_bits_[0] |= 0x00000002u;
  if (show_notification_channel_warnings_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_notification_channel_warnings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Notification.show_notification_channel_warnings)
  return show_notification_channel_warnings_;
}
inline void GlobalSettingsProto_Notification::set_allocated_show_notification_channel_warnings(::android::providers::settings::SettingProto* show_notification_channel_warnings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_notification_channel_warnings_);
  }
  if (show_notification_channel_warnings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_notification_channel_warnings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_notification_channel_warnings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  show_notification_channel_warnings_ = show_notification_channel_warnings;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Notification.show_notification_channel_warnings)
}

// optional .android.providers.settings.SettingProto snooze_options = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Notification::has_snooze_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Notification::snooze_options() const {
  const ::android::providers::settings::SettingProto* p = snooze_options_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Notification.snooze_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::release_snooze_options() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Notification.snooze_options)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = snooze_options_;
  snooze_options_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::mutable_snooze_options() {
  _has_bits_[0] |= 0x00000004u;
  if (snooze_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    snooze_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Notification.snooze_options)
  return snooze_options_;
}
inline void GlobalSettingsProto_Notification::set_allocated_snooze_options(::android::providers::settings::SettingProto* snooze_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(snooze_options_);
  }
  if (snooze_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snooze_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snooze_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  snooze_options_ = snooze_options;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Notification.snooze_options)
}

// optional .android.providers.settings.SettingProto smart_replies_in_notifications_flags = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Notification::has_smart_replies_in_notifications_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Notification::smart_replies_in_notifications_flags() const {
  const ::android::providers::settings::SettingProto* p = smart_replies_in_notifications_flags_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Notification.smart_replies_in_notifications_flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::release_smart_replies_in_notifications_flags() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Notification.smart_replies_in_notifications_flags)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = smart_replies_in_notifications_flags_;
  smart_replies_in_notifications_flags_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::mutable_smart_replies_in_notifications_flags() {
  _has_bits_[0] |= 0x00000008u;
  if (smart_replies_in_notifications_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    smart_replies_in_notifications_flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Notification.smart_replies_in_notifications_flags)
  return smart_replies_in_notifications_flags_;
}
inline void GlobalSettingsProto_Notification::set_allocated_smart_replies_in_notifications_flags(::android::providers::settings::SettingProto* smart_replies_in_notifications_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(smart_replies_in_notifications_flags_);
  }
  if (smart_replies_in_notifications_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smart_replies_in_notifications_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smart_replies_in_notifications_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  smart_replies_in_notifications_flags_ = smart_replies_in_notifications_flags;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Notification.smart_replies_in_notifications_flags)
}

// optional .android.providers.settings.SettingProto smart_suggestions_in_notifications_flags = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Notification::has_smart_suggestions_in_notifications_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Notification::smart_suggestions_in_notifications_flags() const {
  const ::android::providers::settings::SettingProto* p = smart_suggestions_in_notifications_flags_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Notification.smart_suggestions_in_notifications_flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::release_smart_suggestions_in_notifications_flags() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Notification.smart_suggestions_in_notifications_flags)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = smart_suggestions_in_notifications_flags_;
  smart_suggestions_in_notifications_flags_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::mutable_smart_suggestions_in_notifications_flags() {
  _has_bits_[0] |= 0x00000010u;
  if (smart_suggestions_in_notifications_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    smart_suggestions_in_notifications_flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Notification.smart_suggestions_in_notifications_flags)
  return smart_suggestions_in_notifications_flags_;
}
inline void GlobalSettingsProto_Notification::set_allocated_smart_suggestions_in_notifications_flags(::android::providers::settings::SettingProto* smart_suggestions_in_notifications_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(smart_suggestions_in_notifications_flags_);
  }
  if (smart_suggestions_in_notifications_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smart_suggestions_in_notifications_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smart_suggestions_in_notifications_flags, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  smart_suggestions_in_notifications_flags_ = smart_suggestions_in_notifications_flags;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Notification.smart_suggestions_in_notifications_flags)
}

// optional .android.providers.settings.SettingProto bubbles = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Notification::has_bubbles() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Notification::bubbles() const {
  const ::android::providers::settings::SettingProto* p = bubbles_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Notification.bubbles)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::release_bubbles() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Notification.bubbles)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = bubbles_;
  bubbles_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Notification::mutable_bubbles() {
  _has_bits_[0] |= 0x00000020u;
  if (bubbles_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    bubbles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Notification.bubbles)
  return bubbles_;
}
inline void GlobalSettingsProto_Notification::set_allocated_bubbles(::android::providers::settings::SettingProto* bubbles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bubbles_);
  }
  if (bubbles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bubbles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bubbles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  bubbles_ = bubbles;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Notification.bubbles)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Ntp

// optional .android.providers.settings.SettingProto server = 1;
inline bool GlobalSettingsProto_Ntp::has_server() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Ntp::server() const {
  const ::android::providers::settings::SettingProto* p = server_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Ntp.server)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Ntp::release_server() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Ntp.server)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Ntp::mutable_server() {
  _has_bits_[0] |= 0x00000001u;
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Ntp.server)
  return server_;
}
inline void GlobalSettingsProto_Ntp::set_allocated_server(::android::providers::settings::SettingProto* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_);
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Ntp.server)
}

// optional .android.providers.settings.SettingProto timeout_ms = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Ntp::has_timeout_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Ntp::timeout_ms() const {
  const ::android::providers::settings::SettingProto* p = timeout_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Ntp.timeout_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Ntp::release_timeout_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Ntp.timeout_ms)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = timeout_ms_;
  timeout_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Ntp::mutable_timeout_ms() {
  _has_bits_[0] |= 0x00000002u;
  if (timeout_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    timeout_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Ntp.timeout_ms)
  return timeout_ms_;
}
inline void GlobalSettingsProto_Ntp::set_allocated_timeout_ms(::android::providers::settings::SettingProto* timeout_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_ms_);
  }
  if (timeout_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeout_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timeout_ms_ = timeout_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Ntp.timeout_ms)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_UserAbsentSmallBattery

// optional .android.providers.settings.SettingProto radios_off_enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_UserAbsentSmallBattery::has_radios_off_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_UserAbsentSmallBattery::radios_off_enabled() const {
  const ::android::providers::settings::SettingProto* p = radios_off_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery.radios_off_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_UserAbsentSmallBattery::release_radios_off_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery.radios_off_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = radios_off_enabled_;
  radios_off_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_UserAbsentSmallBattery::mutable_radios_off_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (radios_off_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    radios_off_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery.radios_off_enabled)
  return radios_off_enabled_;
}
inline void GlobalSettingsProto_UserAbsentSmallBattery::set_allocated_radios_off_enabled(::android::providers::settings::SettingProto* radios_off_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(radios_off_enabled_);
  }
  if (radios_off_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      radios_off_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radios_off_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radios_off_enabled_ = radios_off_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery.radios_off_enabled)
}

// optional .android.providers.settings.SettingProto touch_off_enabled = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_UserAbsentSmallBattery::has_touch_off_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_UserAbsentSmallBattery::touch_off_enabled() const {
  const ::android::providers::settings::SettingProto* p = touch_off_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery.touch_off_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_UserAbsentSmallBattery::release_touch_off_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery.touch_off_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = touch_off_enabled_;
  touch_off_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_UserAbsentSmallBattery::mutable_touch_off_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (touch_off_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    touch_off_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery.touch_off_enabled)
  return touch_off_enabled_;
}
inline void GlobalSettingsProto_UserAbsentSmallBattery::set_allocated_touch_off_enabled(::android::providers::settings::SettingProto* touch_off_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_off_enabled_);
  }
  if (touch_off_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touch_off_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_off_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  touch_off_enabled_ = touch_off_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery.touch_off_enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_PackageVerifier

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_PackageVerifier::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PackageVerifier::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PackageVerifier.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PackageVerifier.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PackageVerifier.enabled)
  return enabled_;
}
inline void GlobalSettingsProto_PackageVerifier::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PackageVerifier.enabled)
}

// optional .android.providers.settings.SettingProto timeout = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_PackageVerifier::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PackageVerifier::timeout() const {
  const ::android::providers::settings::SettingProto* p = timeout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PackageVerifier.timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::release_timeout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PackageVerifier.timeout)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::mutable_timeout() {
  _has_bits_[0] |= 0x00000002u;
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PackageVerifier.timeout)
  return timeout_;
}
inline void GlobalSettingsProto_PackageVerifier::set_allocated_timeout(::android::providers::settings::SettingProto* timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PackageVerifier.timeout)
}

// optional .android.providers.settings.SettingProto default_response = 3;
inline bool GlobalSettingsProto_PackageVerifier::has_default_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PackageVerifier::default_response() const {
  const ::android::providers::settings::SettingProto* p = default_response_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PackageVerifier.default_response)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::release_default_response() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PackageVerifier.default_response)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = default_response_;
  default_response_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::mutable_default_response() {
  _has_bits_[0] |= 0x00000004u;
  if (default_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PackageVerifier.default_response)
  return default_response_;
}
inline void GlobalSettingsProto_PackageVerifier::set_allocated_default_response(::android::providers::settings::SettingProto* default_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_response_);
  }
  if (default_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  default_response_ = default_response;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PackageVerifier.default_response)
}

// optional .android.providers.settings.SettingProto setting_visible = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_PackageVerifier::has_setting_visible() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PackageVerifier::setting_visible() const {
  const ::android::providers::settings::SettingProto* p = setting_visible_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PackageVerifier.setting_visible)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::release_setting_visible() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PackageVerifier.setting_visible)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = setting_visible_;
  setting_visible_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::mutable_setting_visible() {
  _has_bits_[0] |= 0x00000008u;
  if (setting_visible_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    setting_visible_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PackageVerifier.setting_visible)
  return setting_visible_;
}
inline void GlobalSettingsProto_PackageVerifier::set_allocated_setting_visible(::android::providers::settings::SettingProto* setting_visible) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(setting_visible_);
  }
  if (setting_visible) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      setting_visible = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setting_visible, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  setting_visible_ = setting_visible;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PackageVerifier.setting_visible)
}

// optional .android.providers.settings.SettingProto include_adb = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_PackageVerifier::has_include_adb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PackageVerifier::include_adb() const {
  const ::android::providers::settings::SettingProto* p = include_adb_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PackageVerifier.include_adb)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::release_include_adb() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PackageVerifier.include_adb)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = include_adb_;
  include_adb_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PackageVerifier::mutable_include_adb() {
  _has_bits_[0] |= 0x00000010u;
  if (include_adb_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    include_adb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PackageVerifier.include_adb)
  return include_adb_;
}
inline void GlobalSettingsProto_PackageVerifier::set_allocated_include_adb(::android::providers::settings::SettingProto* include_adb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(include_adb_);
  }
  if (include_adb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      include_adb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, include_adb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  include_adb_ = include_adb;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PackageVerifier.include_adb)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_PdpWatchdog

// optional .android.providers.settings.SettingProto poll_interval_ms = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_PdpWatchdog::has_poll_interval_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PdpWatchdog::poll_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = poll_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PdpWatchdog.poll_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::release_poll_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PdpWatchdog.poll_interval_ms)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = poll_interval_ms_;
  poll_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::mutable_poll_interval_ms() {
  _has_bits_[0] |= 0x00000001u;
  if (poll_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    poll_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PdpWatchdog.poll_interval_ms)
  return poll_interval_ms_;
}
inline void GlobalSettingsProto_PdpWatchdog::set_allocated_poll_interval_ms(::android::providers::settings::SettingProto* poll_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(poll_interval_ms_);
  }
  if (poll_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      poll_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poll_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  poll_interval_ms_ = poll_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PdpWatchdog.poll_interval_ms)
}

// optional .android.providers.settings.SettingProto long_poll_interval_ms = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_PdpWatchdog::has_long_poll_interval_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PdpWatchdog::long_poll_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = long_poll_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PdpWatchdog.long_poll_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::release_long_poll_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PdpWatchdog.long_poll_interval_ms)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = long_poll_interval_ms_;
  long_poll_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::mutable_long_poll_interval_ms() {
  _has_bits_[0] |= 0x00000002u;
  if (long_poll_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    long_poll_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PdpWatchdog.long_poll_interval_ms)
  return long_poll_interval_ms_;
}
inline void GlobalSettingsProto_PdpWatchdog::set_allocated_long_poll_interval_ms(::android::providers::settings::SettingProto* long_poll_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(long_poll_interval_ms_);
  }
  if (long_poll_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      long_poll_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, long_poll_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  long_poll_interval_ms_ = long_poll_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PdpWatchdog.long_poll_interval_ms)
}

// optional .android.providers.settings.SettingProto error_poll_interval_ms = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_PdpWatchdog::has_error_poll_interval_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PdpWatchdog::error_poll_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = error_poll_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PdpWatchdog.error_poll_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::release_error_poll_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PdpWatchdog.error_poll_interval_ms)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = error_poll_interval_ms_;
  error_poll_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::mutable_error_poll_interval_ms() {
  _has_bits_[0] |= 0x00000004u;
  if (error_poll_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    error_poll_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PdpWatchdog.error_poll_interval_ms)
  return error_poll_interval_ms_;
}
inline void GlobalSettingsProto_PdpWatchdog::set_allocated_error_poll_interval_ms(::android::providers::settings::SettingProto* error_poll_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_poll_interval_ms_);
  }
  if (error_poll_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error_poll_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_poll_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_poll_interval_ms_ = error_poll_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PdpWatchdog.error_poll_interval_ms)
}

// optional .android.providers.settings.SettingProto trigger_packet_count = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_PdpWatchdog::has_trigger_packet_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PdpWatchdog::trigger_packet_count() const {
  const ::android::providers::settings::SettingProto* p = trigger_packet_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PdpWatchdog.trigger_packet_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::release_trigger_packet_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PdpWatchdog.trigger_packet_count)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = trigger_packet_count_;
  trigger_packet_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::mutable_trigger_packet_count() {
  _has_bits_[0] |= 0x00000008u;
  if (trigger_packet_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    trigger_packet_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PdpWatchdog.trigger_packet_count)
  return trigger_packet_count_;
}
inline void GlobalSettingsProto_PdpWatchdog::set_allocated_trigger_packet_count(::android::providers::settings::SettingProto* trigger_packet_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_packet_count_);
  }
  if (trigger_packet_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trigger_packet_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_packet_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  trigger_packet_count_ = trigger_packet_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PdpWatchdog.trigger_packet_count)
}

// optional .android.providers.settings.SettingProto error_poll_count = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_PdpWatchdog::has_error_poll_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PdpWatchdog::error_poll_count() const {
  const ::android::providers::settings::SettingProto* p = error_poll_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PdpWatchdog.error_poll_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::release_error_poll_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PdpWatchdog.error_poll_count)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = error_poll_count_;
  error_poll_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::mutable_error_poll_count() {
  _has_bits_[0] |= 0x00000010u;
  if (error_poll_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    error_poll_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PdpWatchdog.error_poll_count)
  return error_poll_count_;
}
inline void GlobalSettingsProto_PdpWatchdog::set_allocated_error_poll_count(::android::providers::settings::SettingProto* error_poll_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_poll_count_);
  }
  if (error_poll_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error_poll_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_poll_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  error_poll_count_ = error_poll_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PdpWatchdog.error_poll_count)
}

// optional .android.providers.settings.SettingProto max_pdp_reset_fail_count = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_PdpWatchdog::has_max_pdp_reset_fail_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PdpWatchdog::max_pdp_reset_fail_count() const {
  const ::android::providers::settings::SettingProto* p = max_pdp_reset_fail_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PdpWatchdog.max_pdp_reset_fail_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::release_max_pdp_reset_fail_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PdpWatchdog.max_pdp_reset_fail_count)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = max_pdp_reset_fail_count_;
  max_pdp_reset_fail_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PdpWatchdog::mutable_max_pdp_reset_fail_count() {
  _has_bits_[0] |= 0x00000020u;
  if (max_pdp_reset_fail_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_pdp_reset_fail_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PdpWatchdog.max_pdp_reset_fail_count)
  return max_pdp_reset_fail_count_;
}
inline void GlobalSettingsProto_PdpWatchdog::set_allocated_max_pdp_reset_fail_count(::android::providers::settings::SettingProto* max_pdp_reset_fail_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_pdp_reset_fail_count_);
  }
  if (max_pdp_reset_fail_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_pdp_reset_fail_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_pdp_reset_fail_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  max_pdp_reset_fail_count_ = max_pdp_reset_fail_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PdpWatchdog.max_pdp_reset_fail_count)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_PrepaidSetup

// optional .android.providers.settings.SettingProto data_service_url = 1;
inline bool GlobalSettingsProto_PrepaidSetup::has_data_service_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PrepaidSetup::data_service_url() const {
  const ::android::providers::settings::SettingProto* p = data_service_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PrepaidSetup.data_service_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PrepaidSetup::release_data_service_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PrepaidSetup.data_service_url)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = data_service_url_;
  data_service_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PrepaidSetup::mutable_data_service_url() {
  _has_bits_[0] |= 0x00000001u;
  if (data_service_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    data_service_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PrepaidSetup.data_service_url)
  return data_service_url_;
}
inline void GlobalSettingsProto_PrepaidSetup::set_allocated_data_service_url(::android::providers::settings::SettingProto* data_service_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_service_url_);
  }
  if (data_service_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_service_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_service_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_service_url_ = data_service_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PrepaidSetup.data_service_url)
}

// optional .android.providers.settings.SettingProto detection_target_url = 2;
inline bool GlobalSettingsProto_PrepaidSetup::has_detection_target_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PrepaidSetup::detection_target_url() const {
  const ::android::providers::settings::SettingProto* p = detection_target_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PrepaidSetup.detection_target_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PrepaidSetup::release_detection_target_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PrepaidSetup.detection_target_url)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = detection_target_url_;
  detection_target_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PrepaidSetup::mutable_detection_target_url() {
  _has_bits_[0] |= 0x00000002u;
  if (detection_target_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    detection_target_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PrepaidSetup.detection_target_url)
  return detection_target_url_;
}
inline void GlobalSettingsProto_PrepaidSetup::set_allocated_detection_target_url(::android::providers::settings::SettingProto* detection_target_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_target_url_);
  }
  if (detection_target_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_target_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_target_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  detection_target_url_ = detection_target_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PrepaidSetup.detection_target_url)
}

// optional .android.providers.settings.SettingProto detection_redir_host = 3;
inline bool GlobalSettingsProto_PrepaidSetup::has_detection_redir_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_PrepaidSetup::detection_redir_host() const {
  const ::android::providers::settings::SettingProto* p = detection_redir_host_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.PrepaidSetup.detection_redir_host)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PrepaidSetup::release_detection_redir_host() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.PrepaidSetup.detection_redir_host)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = detection_redir_host_;
  detection_redir_host_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_PrepaidSetup::mutable_detection_redir_host() {
  _has_bits_[0] |= 0x00000004u;
  if (detection_redir_host_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    detection_redir_host_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.PrepaidSetup.detection_redir_host)
  return detection_redir_host_;
}
inline void GlobalSettingsProto_PrepaidSetup::set_allocated_detection_redir_host(::android::providers::settings::SettingProto* detection_redir_host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_redir_host_);
  }
  if (detection_redir_host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_redir_host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_redir_host, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  detection_redir_host_ = detection_redir_host;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.PrepaidSetup.detection_redir_host)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Private

// optional .android.providers.settings.SettingProto dns_mode = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Private::has_dns_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Private::dns_mode() const {
  const ::android::providers::settings::SettingProto* p = dns_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Private.dns_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Private::release_dns_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Private.dns_mode)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = dns_mode_;
  dns_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Private::mutable_dns_mode() {
  _has_bits_[0] |= 0x00000001u;
  if (dns_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dns_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Private.dns_mode)
  return dns_mode_;
}
inline void GlobalSettingsProto_Private::set_allocated_dns_mode(::android::providers::settings::SettingProto* dns_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dns_mode_);
  }
  if (dns_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dns_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dns_mode_ = dns_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Private.dns_mode)
}

// optional .android.providers.settings.SettingProto dns_specifier = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Private::has_dns_specifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Private::dns_specifier() const {
  const ::android::providers::settings::SettingProto* p = dns_specifier_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Private.dns_specifier)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Private::release_dns_specifier() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Private.dns_specifier)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = dns_specifier_;
  dns_specifier_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Private::mutable_dns_specifier() {
  _has_bits_[0] |= 0x00000002u;
  if (dns_specifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dns_specifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Private.dns_specifier)
  return dns_specifier_;
}
inline void GlobalSettingsProto_Private::set_allocated_dns_specifier(::android::providers::settings::SettingProto* dns_specifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dns_specifier_);
  }
  if (dns_specifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dns_specifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_specifier, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dns_specifier_ = dns_specifier;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Private.dns_specifier)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Selinux

// optional .android.providers.settings.SettingProto update_content_url = 1;
inline bool GlobalSettingsProto_Selinux::has_update_content_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Selinux::update_content_url() const {
  const ::android::providers::settings::SettingProto* p = update_content_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Selinux.update_content_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Selinux::release_update_content_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Selinux.update_content_url)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = update_content_url_;
  update_content_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Selinux::mutable_update_content_url() {
  _has_bits_[0] |= 0x00000001u;
  if (update_content_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_content_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Selinux.update_content_url)
  return update_content_url_;
}
inline void GlobalSettingsProto_Selinux::set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_content_url_);
  }
  if (update_content_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_content_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_content_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_content_url_ = update_content_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Selinux.update_content_url)
}

// optional .android.providers.settings.SettingProto update_metadata_url = 2;
inline bool GlobalSettingsProto_Selinux::has_update_metadata_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Selinux::update_metadata_url() const {
  const ::android::providers::settings::SettingProto* p = update_metadata_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Selinux.update_metadata_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Selinux::release_update_metadata_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Selinux.update_metadata_url)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = update_metadata_url_;
  update_metadata_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Selinux::mutable_update_metadata_url() {
  _has_bits_[0] |= 0x00000002u;
  if (update_metadata_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_metadata_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Selinux.update_metadata_url)
  return update_metadata_url_;
}
inline void GlobalSettingsProto_Selinux::set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_metadata_url_);
  }
  if (update_metadata_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_metadata_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_metadata_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_metadata_url_ = update_metadata_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Selinux.update_metadata_url)
}

// optional .android.providers.settings.SettingProto status = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Selinux::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Selinux::status() const {
  const ::android::providers::settings::SettingProto* p = status_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Selinux.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Selinux::release_status() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Selinux.status)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Selinux::mutable_status() {
  _has_bits_[0] |= 0x00000004u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Selinux.status)
  return status_;
}
inline void GlobalSettingsProto_Selinux::set_allocated_status(::android::providers::settings::SettingProto* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Selinux.status)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_SmartSelection

// optional .android.providers.settings.SettingProto update_content_url = 1;
inline bool GlobalSettingsProto_SmartSelection::has_update_content_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_SmartSelection::update_content_url() const {
  const ::android::providers::settings::SettingProto* p = update_content_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.SmartSelection.update_content_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_SmartSelection::release_update_content_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.SmartSelection.update_content_url)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = update_content_url_;
  update_content_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_SmartSelection::mutable_update_content_url() {
  _has_bits_[0] |= 0x00000001u;
  if (update_content_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_content_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.SmartSelection.update_content_url)
  return update_content_url_;
}
inline void GlobalSettingsProto_SmartSelection::set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_content_url_);
  }
  if (update_content_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_content_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_content_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_content_url_ = update_content_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.SmartSelection.update_content_url)
}

// optional .android.providers.settings.SettingProto update_metadata_url = 2;
inline bool GlobalSettingsProto_SmartSelection::has_update_metadata_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_SmartSelection::update_metadata_url() const {
  const ::android::providers::settings::SettingProto* p = update_metadata_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.SmartSelection.update_metadata_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_SmartSelection::release_update_metadata_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.SmartSelection.update_metadata_url)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = update_metadata_url_;
  update_metadata_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_SmartSelection::mutable_update_metadata_url() {
  _has_bits_[0] |= 0x00000002u;
  if (update_metadata_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_metadata_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.SmartSelection.update_metadata_url)
  return update_metadata_url_;
}
inline void GlobalSettingsProto_SmartSelection::set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_metadata_url_);
  }
  if (update_metadata_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_metadata_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_metadata_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_metadata_url_ = update_metadata_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.SmartSelection.update_metadata_url)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Sms

// optional .android.providers.settings.SettingProto outgoing_check_interval_ms = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sms::has_outgoing_check_interval_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sms::outgoing_check_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = outgoing_check_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sms.outgoing_check_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::release_outgoing_check_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sms.outgoing_check_interval_ms)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = outgoing_check_interval_ms_;
  outgoing_check_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::mutable_outgoing_check_interval_ms() {
  _has_bits_[0] |= 0x00000001u;
  if (outgoing_check_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    outgoing_check_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sms.outgoing_check_interval_ms)
  return outgoing_check_interval_ms_;
}
inline void GlobalSettingsProto_Sms::set_allocated_outgoing_check_interval_ms(::android::providers::settings::SettingProto* outgoing_check_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outgoing_check_interval_ms_);
  }
  if (outgoing_check_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outgoing_check_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outgoing_check_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  outgoing_check_interval_ms_ = outgoing_check_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sms.outgoing_check_interval_ms)
}

// optional .android.providers.settings.SettingProto outgoing_check_max_count = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sms::has_outgoing_check_max_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sms::outgoing_check_max_count() const {
  const ::android::providers::settings::SettingProto* p = outgoing_check_max_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sms.outgoing_check_max_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::release_outgoing_check_max_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sms.outgoing_check_max_count)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = outgoing_check_max_count_;
  outgoing_check_max_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::mutable_outgoing_check_max_count() {
  _has_bits_[0] |= 0x00000002u;
  if (outgoing_check_max_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    outgoing_check_max_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sms.outgoing_check_max_count)
  return outgoing_check_max_count_;
}
inline void GlobalSettingsProto_Sms::set_allocated_outgoing_check_max_count(::android::providers::settings::SettingProto* outgoing_check_max_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(outgoing_check_max_count_);
  }
  if (outgoing_check_max_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outgoing_check_max_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outgoing_check_max_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  outgoing_check_max_count_ = outgoing_check_max_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sms.outgoing_check_max_count)
}

// optional .android.providers.settings.SettingProto short_code_confirmation = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sms::has_short_code_confirmation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sms::short_code_confirmation() const {
  const ::android::providers::settings::SettingProto* p = short_code_confirmation_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sms.short_code_confirmation)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::release_short_code_confirmation() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sms.short_code_confirmation)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = short_code_confirmation_;
  short_code_confirmation_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::mutable_short_code_confirmation() {
  _has_bits_[0] |= 0x00000004u;
  if (short_code_confirmation_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    short_code_confirmation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sms.short_code_confirmation)
  return short_code_confirmation_;
}
inline void GlobalSettingsProto_Sms::set_allocated_short_code_confirmation(::android::providers::settings::SettingProto* short_code_confirmation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_code_confirmation_);
  }
  if (short_code_confirmation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      short_code_confirmation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_code_confirmation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  short_code_confirmation_ = short_code_confirmation;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sms.short_code_confirmation)
}

// optional .android.providers.settings.SettingProto short_code_rule = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sms::has_short_code_rule() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sms::short_code_rule() const {
  const ::android::providers::settings::SettingProto* p = short_code_rule_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sms.short_code_rule)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::release_short_code_rule() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sms.short_code_rule)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = short_code_rule_;
  short_code_rule_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::mutable_short_code_rule() {
  _has_bits_[0] |= 0x00000008u;
  if (short_code_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    short_code_rule_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sms.short_code_rule)
  return short_code_rule_;
}
inline void GlobalSettingsProto_Sms::set_allocated_short_code_rule(::android::providers::settings::SettingProto* short_code_rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_code_rule_);
  }
  if (short_code_rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      short_code_rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_code_rule, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  short_code_rule_ = short_code_rule;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sms.short_code_rule)
}

// optional .android.providers.settings.SettingProto short_codes_update_content_url = 5;
inline bool GlobalSettingsProto_Sms::has_short_codes_update_content_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sms::short_codes_update_content_url() const {
  const ::android::providers::settings::SettingProto* p = short_codes_update_content_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sms.short_codes_update_content_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::release_short_codes_update_content_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sms.short_codes_update_content_url)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = short_codes_update_content_url_;
  short_codes_update_content_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::mutable_short_codes_update_content_url() {
  _has_bits_[0] |= 0x00000010u;
  if (short_codes_update_content_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    short_codes_update_content_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sms.short_codes_update_content_url)
  return short_codes_update_content_url_;
}
inline void GlobalSettingsProto_Sms::set_allocated_short_codes_update_content_url(::android::providers::settings::SettingProto* short_codes_update_content_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_codes_update_content_url_);
  }
  if (short_codes_update_content_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      short_codes_update_content_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_codes_update_content_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  short_codes_update_content_url_ = short_codes_update_content_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sms.short_codes_update_content_url)
}

// optional .android.providers.settings.SettingProto short_codes_update_metadata_url = 6;
inline bool GlobalSettingsProto_Sms::has_short_codes_update_metadata_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sms::short_codes_update_metadata_url() const {
  const ::android::providers::settings::SettingProto* p = short_codes_update_metadata_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sms.short_codes_update_metadata_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::release_short_codes_update_metadata_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sms.short_codes_update_metadata_url)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = short_codes_update_metadata_url_;
  short_codes_update_metadata_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::mutable_short_codes_update_metadata_url() {
  _has_bits_[0] |= 0x00000020u;
  if (short_codes_update_metadata_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    short_codes_update_metadata_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sms.short_codes_update_metadata_url)
  return short_codes_update_metadata_url_;
}
inline void GlobalSettingsProto_Sms::set_allocated_short_codes_update_metadata_url(::android::providers::settings::SettingProto* short_codes_update_metadata_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_codes_update_metadata_url_);
  }
  if (short_codes_update_metadata_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      short_codes_update_metadata_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_codes_update_metadata_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  short_codes_update_metadata_url_ = short_codes_update_metadata_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sms.short_codes_update_metadata_url)
}

// optional .android.providers.settings.SettingProto access_restriction_enabled = 7 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sms::has_access_restriction_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sms::access_restriction_enabled() const {
  const ::android::providers::settings::SettingProto* p = access_restriction_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sms.access_restriction_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::release_access_restriction_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sms.access_restriction_enabled)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = access_restriction_enabled_;
  access_restriction_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sms::mutable_access_restriction_enabled() {
  _has_bits_[0] |= 0x00000040u;
  if (access_restriction_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    access_restriction_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sms.access_restriction_enabled)
  return access_restriction_enabled_;
}
inline void GlobalSettingsProto_Sms::set_allocated_access_restriction_enabled(::android::providers::settings::SettingProto* access_restriction_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_restriction_enabled_);
  }
  if (access_restriction_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      access_restriction_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access_restriction_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  access_restriction_enabled_ = access_restriction_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sms.access_restriction_enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Sounds

// optional .android.providers.settings.SettingProto car_dock = 1;
inline bool GlobalSettingsProto_Sounds::has_car_dock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::car_dock() const {
  const ::android::providers::settings::SettingProto* p = car_dock_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.car_dock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_car_dock() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.car_dock)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = car_dock_;
  car_dock_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_car_dock() {
  _has_bits_[0] |= 0x00000001u;
  if (car_dock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    car_dock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.car_dock)
  return car_dock_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_car_dock(::android::providers::settings::SettingProto* car_dock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(car_dock_);
  }
  if (car_dock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      car_dock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, car_dock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  car_dock_ = car_dock;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.car_dock)
}

// optional .android.providers.settings.SettingProto car_undock = 2;
inline bool GlobalSettingsProto_Sounds::has_car_undock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::car_undock() const {
  const ::android::providers::settings::SettingProto* p = car_undock_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.car_undock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_car_undock() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.car_undock)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = car_undock_;
  car_undock_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_car_undock() {
  _has_bits_[0] |= 0x00000002u;
  if (car_undock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    car_undock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.car_undock)
  return car_undock_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_car_undock(::android::providers::settings::SettingProto* car_undock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(car_undock_);
  }
  if (car_undock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      car_undock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, car_undock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  car_undock_ = car_undock;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.car_undock)
}

// optional .android.providers.settings.SettingProto charging_started = 4;
inline bool GlobalSettingsProto_Sounds::has_charging_started() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::charging_started() const {
  const ::android::providers::settings::SettingProto* p = charging_started_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.charging_started)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_charging_started() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.charging_started)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = charging_started_;
  charging_started_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_charging_started() {
  _has_bits_[0] |= 0x00000004u;
  if (charging_started_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    charging_started_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.charging_started)
  return charging_started_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_charging_started(::android::providers::settings::SettingProto* charging_started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(charging_started_);
  }
  if (charging_started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      charging_started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charging_started, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  charging_started_ = charging_started;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.charging_started)
}

// optional .android.providers.settings.SettingProto desk_dock = 5;
inline bool GlobalSettingsProto_Sounds::has_desk_dock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::desk_dock() const {
  const ::android::providers::settings::SettingProto* p = desk_dock_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.desk_dock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_desk_dock() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.desk_dock)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = desk_dock_;
  desk_dock_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_desk_dock() {
  _has_bits_[0] |= 0x00000008u;
  if (desk_dock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    desk_dock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.desk_dock)
  return desk_dock_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_desk_dock(::android::providers::settings::SettingProto* desk_dock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desk_dock_);
  }
  if (desk_dock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desk_dock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desk_dock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  desk_dock_ = desk_dock;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.desk_dock)
}

// optional .android.providers.settings.SettingProto desk_undock = 6;
inline bool GlobalSettingsProto_Sounds::has_desk_undock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::desk_undock() const {
  const ::android::providers::settings::SettingProto* p = desk_undock_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.desk_undock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_desk_undock() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.desk_undock)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = desk_undock_;
  desk_undock_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_desk_undock() {
  _has_bits_[0] |= 0x00000010u;
  if (desk_undock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    desk_undock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.desk_undock)
  return desk_undock_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_desk_undock(::android::providers::settings::SettingProto* desk_undock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desk_undock_);
  }
  if (desk_undock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desk_undock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desk_undock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  desk_undock_ = desk_undock;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.desk_undock)
}

// optional .android.providers.settings.SettingProto dock_sounds_enabled = 7 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sounds::has_dock_sounds_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::dock_sounds_enabled() const {
  const ::android::providers::settings::SettingProto* p = dock_sounds_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.dock_sounds_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_dock_sounds_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.dock_sounds_enabled)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = dock_sounds_enabled_;
  dock_sounds_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_dock_sounds_enabled() {
  _has_bits_[0] |= 0x00000020u;
  if (dock_sounds_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dock_sounds_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.dock_sounds_enabled)
  return dock_sounds_enabled_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_dock_sounds_enabled(::android::providers::settings::SettingProto* dock_sounds_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dock_sounds_enabled_);
  }
  if (dock_sounds_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dock_sounds_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dock_sounds_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dock_sounds_enabled_ = dock_sounds_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.dock_sounds_enabled)
}

// optional .android.providers.settings.SettingProto dock_sounds_enabled_when_accessibility = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sounds::has_dock_sounds_enabled_when_accessibility() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::dock_sounds_enabled_when_accessibility() const {
  const ::android::providers::settings::SettingProto* p = dock_sounds_enabled_when_accessibility_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.dock_sounds_enabled_when_accessibility)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_dock_sounds_enabled_when_accessibility() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.dock_sounds_enabled_when_accessibility)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = dock_sounds_enabled_when_accessibility_;
  dock_sounds_enabled_when_accessibility_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_dock_sounds_enabled_when_accessibility() {
  _has_bits_[0] |= 0x00000040u;
  if (dock_sounds_enabled_when_accessibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dock_sounds_enabled_when_accessibility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.dock_sounds_enabled_when_accessibility)
  return dock_sounds_enabled_when_accessibility_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_dock_sounds_enabled_when_accessibility(::android::providers::settings::SettingProto* dock_sounds_enabled_when_accessibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dock_sounds_enabled_when_accessibility_);
  }
  if (dock_sounds_enabled_when_accessibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dock_sounds_enabled_when_accessibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dock_sounds_enabled_when_accessibility, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  dock_sounds_enabled_when_accessibility_ = dock_sounds_enabled_when_accessibility;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.dock_sounds_enabled_when_accessibility)
}

// optional .android.providers.settings.SettingProto lock = 9;
inline bool GlobalSettingsProto_Sounds::has_lock() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::lock() const {
  const ::android::providers::settings::SettingProto* p = lock_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.lock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_lock() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.lock)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = lock_;
  lock_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_lock() {
  _has_bits_[0] |= 0x00000080u;
  if (lock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    lock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.lock)
  return lock_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_lock(::android::providers::settings::SettingProto* lock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_);
  }
  if (lock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  lock_ = lock;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.lock)
}

// optional .android.providers.settings.SettingProto low_battery = 10;
inline bool GlobalSettingsProto_Sounds::has_low_battery() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::low_battery() const {
  const ::android::providers::settings::SettingProto* p = low_battery_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.low_battery)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_low_battery() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.low_battery)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = low_battery_;
  low_battery_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_low_battery() {
  _has_bits_[0] |= 0x00000100u;
  if (low_battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    low_battery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.low_battery)
  return low_battery_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_low_battery(::android::providers::settings::SettingProto* low_battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_battery_);
  }
  if (low_battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_battery, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  low_battery_ = low_battery;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.low_battery)
}

// optional .android.providers.settings.SettingProto low_battery_sound_timeout = 11 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sounds::has_low_battery_sound_timeout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::low_battery_sound_timeout() const {
  const ::android::providers::settings::SettingProto* p = low_battery_sound_timeout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.low_battery_sound_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_low_battery_sound_timeout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.low_battery_sound_timeout)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = low_battery_sound_timeout_;
  low_battery_sound_timeout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_low_battery_sound_timeout() {
  _has_bits_[0] |= 0x00000200u;
  if (low_battery_sound_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    low_battery_sound_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.low_battery_sound_timeout)
  return low_battery_sound_timeout_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_low_battery_sound_timeout(::android::providers::settings::SettingProto* low_battery_sound_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_battery_sound_timeout_);
  }
  if (low_battery_sound_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_battery_sound_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_battery_sound_timeout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  low_battery_sound_timeout_ = low_battery_sound_timeout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.low_battery_sound_timeout)
}

// optional .android.providers.settings.SettingProto low_battery_sounds_enabled = 12 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sounds::has_low_battery_sounds_enabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::low_battery_sounds_enabled() const {
  const ::android::providers::settings::SettingProto* p = low_battery_sounds_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.low_battery_sounds_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_low_battery_sounds_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.low_battery_sounds_enabled)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = low_battery_sounds_enabled_;
  low_battery_sounds_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_low_battery_sounds_enabled() {
  _has_bits_[0] |= 0x00000400u;
  if (low_battery_sounds_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    low_battery_sounds_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.low_battery_sounds_enabled)
  return low_battery_sounds_enabled_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_low_battery_sounds_enabled(::android::providers::settings::SettingProto* low_battery_sounds_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_battery_sounds_enabled_);
  }
  if (low_battery_sounds_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_battery_sounds_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_battery_sounds_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  low_battery_sounds_enabled_ = low_battery_sounds_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.low_battery_sounds_enabled)
}

// optional .android.providers.settings.SettingProto trusted = 13;
inline bool GlobalSettingsProto_Sounds::has_trusted() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::trusted() const {
  const ::android::providers::settings::SettingProto* p = trusted_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.trusted)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_trusted() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.trusted)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = trusted_;
  trusted_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_trusted() {
  _has_bits_[0] |= 0x00000800u;
  if (trusted_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    trusted_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.trusted)
  return trusted_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_trusted(::android::providers::settings::SettingProto* trusted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusted_);
  }
  if (trusted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trusted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusted, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  trusted_ = trusted;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.trusted)
}

// optional .android.providers.settings.SettingProto unlock = 14;
inline bool GlobalSettingsProto_Sounds::has_unlock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::unlock() const {
  const ::android::providers::settings::SettingProto* p = unlock_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.unlock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_unlock() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.unlock)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = unlock_;
  unlock_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_unlock() {
  _has_bits_[0] |= 0x00001000u;
  if (unlock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    unlock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.unlock)
  return unlock_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_unlock(::android::providers::settings::SettingProto* unlock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unlock_);
  }
  if (unlock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unlock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unlock, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  unlock_ = unlock;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.unlock)
}

// optional .android.providers.settings.SettingProto wireless_charging_started = 15;
inline bool GlobalSettingsProto_Sounds::has_wireless_charging_started() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sounds::wireless_charging_started() const {
  const ::android::providers::settings::SettingProto* p = wireless_charging_started_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sounds.wireless_charging_started)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::release_wireless_charging_started() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sounds.wireless_charging_started)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = wireless_charging_started_;
  wireless_charging_started_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sounds::mutable_wireless_charging_started() {
  _has_bits_[0] |= 0x00002000u;
  if (wireless_charging_started_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    wireless_charging_started_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sounds.wireless_charging_started)
  return wireless_charging_started_;
}
inline void GlobalSettingsProto_Sounds::set_allocated_wireless_charging_started(::android::providers::settings::SettingProto* wireless_charging_started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wireless_charging_started_);
  }
  if (wireless_charging_started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wireless_charging_started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wireless_charging_started, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  wireless_charging_started_ = wireless_charging_started;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sounds.wireless_charging_started)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_SoundTrigger

// optional .android.providers.settings.SettingProto max_sound_trigger_detection_service_ops_per_day = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_SoundTrigger::has_max_sound_trigger_detection_service_ops_per_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_SoundTrigger::max_sound_trigger_detection_service_ops_per_day() const {
  const ::android::providers::settings::SettingProto* p = max_sound_trigger_detection_service_ops_per_day_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.SoundTrigger.max_sound_trigger_detection_service_ops_per_day)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_SoundTrigger::release_max_sound_trigger_detection_service_ops_per_day() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.SoundTrigger.max_sound_trigger_detection_service_ops_per_day)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = max_sound_trigger_detection_service_ops_per_day_;
  max_sound_trigger_detection_service_ops_per_day_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_SoundTrigger::mutable_max_sound_trigger_detection_service_ops_per_day() {
  _has_bits_[0] |= 0x00000001u;
  if (max_sound_trigger_detection_service_ops_per_day_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_sound_trigger_detection_service_ops_per_day_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.SoundTrigger.max_sound_trigger_detection_service_ops_per_day)
  return max_sound_trigger_detection_service_ops_per_day_;
}
inline void GlobalSettingsProto_SoundTrigger::set_allocated_max_sound_trigger_detection_service_ops_per_day(::android::providers::settings::SettingProto* max_sound_trigger_detection_service_ops_per_day) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_sound_trigger_detection_service_ops_per_day_);
  }
  if (max_sound_trigger_detection_service_ops_per_day) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_sound_trigger_detection_service_ops_per_day = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_sound_trigger_detection_service_ops_per_day, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_sound_trigger_detection_service_ops_per_day_ = max_sound_trigger_detection_service_ops_per_day;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.SoundTrigger.max_sound_trigger_detection_service_ops_per_day)
}

// optional .android.providers.settings.SettingProto detection_service_op_timeout_ms = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_SoundTrigger::has_detection_service_op_timeout_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_SoundTrigger::detection_service_op_timeout_ms() const {
  const ::android::providers::settings::SettingProto* p = detection_service_op_timeout_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.SoundTrigger.detection_service_op_timeout_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_SoundTrigger::release_detection_service_op_timeout_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.SoundTrigger.detection_service_op_timeout_ms)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = detection_service_op_timeout_ms_;
  detection_service_op_timeout_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_SoundTrigger::mutable_detection_service_op_timeout_ms() {
  _has_bits_[0] |= 0x00000002u;
  if (detection_service_op_timeout_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    detection_service_op_timeout_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.SoundTrigger.detection_service_op_timeout_ms)
  return detection_service_op_timeout_ms_;
}
inline void GlobalSettingsProto_SoundTrigger::set_allocated_detection_service_op_timeout_ms(::android::providers::settings::SettingProto* detection_service_op_timeout_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_service_op_timeout_ms_);
  }
  if (detection_service_op_timeout_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detection_service_op_timeout_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_service_op_timeout_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  detection_service_op_timeout_ms_ = detection_service_op_timeout_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.SoundTrigger.detection_service_op_timeout_ms)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Storage

// optional .android.providers.settings.SettingProto benchmark_interval = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Storage::has_benchmark_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Storage::benchmark_interval() const {
  const ::android::providers::settings::SettingProto* p = benchmark_interval_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Storage.benchmark_interval)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Storage::release_benchmark_interval() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Storage.benchmark_interval)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = benchmark_interval_;
  benchmark_interval_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Storage::mutable_benchmark_interval() {
  _has_bits_[0] |= 0x00000001u;
  if (benchmark_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    benchmark_interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Storage.benchmark_interval)
  return benchmark_interval_;
}
inline void GlobalSettingsProto_Storage::set_allocated_benchmark_interval(::android::providers::settings::SettingProto* benchmark_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(benchmark_interval_);
  }
  if (benchmark_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      benchmark_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, benchmark_interval, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  benchmark_interval_ = benchmark_interval;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Storage.benchmark_interval)
}

// optional .android.providers.settings.SettingProto settings_clobber_threshold = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Storage::has_settings_clobber_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Storage::settings_clobber_threshold() const {
  const ::android::providers::settings::SettingProto* p = settings_clobber_threshold_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Storage.settings_clobber_threshold)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Storage::release_settings_clobber_threshold() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Storage.settings_clobber_threshold)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = settings_clobber_threshold_;
  settings_clobber_threshold_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Storage::mutable_settings_clobber_threshold() {
  _has_bits_[0] |= 0x00000002u;
  if (settings_clobber_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    settings_clobber_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Storage.settings_clobber_threshold)
  return settings_clobber_threshold_;
}
inline void GlobalSettingsProto_Storage::set_allocated_settings_clobber_threshold(::android::providers::settings::SettingProto* settings_clobber_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_clobber_threshold_);
  }
  if (settings_clobber_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings_clobber_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_clobber_threshold, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  settings_clobber_threshold_ = settings_clobber_threshold;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Storage.settings_clobber_threshold)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Sync

// optional .android.providers.settings.SettingProto max_retry_delay_in_seconds = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sync::has_max_retry_delay_in_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sync::max_retry_delay_in_seconds() const {
  const ::android::providers::settings::SettingProto* p = max_retry_delay_in_seconds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sync.max_retry_delay_in_seconds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sync::release_max_retry_delay_in_seconds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sync.max_retry_delay_in_seconds)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = max_retry_delay_in_seconds_;
  max_retry_delay_in_seconds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sync::mutable_max_retry_delay_in_seconds() {
  _has_bits_[0] |= 0x00000001u;
  if (max_retry_delay_in_seconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_retry_delay_in_seconds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sync.max_retry_delay_in_seconds)
  return max_retry_delay_in_seconds_;
}
inline void GlobalSettingsProto_Sync::set_allocated_max_retry_delay_in_seconds(::android::providers::settings::SettingProto* max_retry_delay_in_seconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_retry_delay_in_seconds_);
  }
  if (max_retry_delay_in_seconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_retry_delay_in_seconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_retry_delay_in_seconds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_retry_delay_in_seconds_ = max_retry_delay_in_seconds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sync.max_retry_delay_in_seconds)
}

// optional .android.providers.settings.SettingProto manager_constants = 2;
inline bool GlobalSettingsProto_Sync::has_manager_constants() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sync::manager_constants() const {
  const ::android::providers::settings::SettingProto* p = manager_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sync.manager_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sync::release_manager_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sync.manager_constants)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = manager_constants_;
  manager_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sync::mutable_manager_constants() {
  _has_bits_[0] |= 0x00000002u;
  if (manager_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    manager_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sync.manager_constants)
  return manager_constants_;
}
inline void GlobalSettingsProto_Sync::set_allocated_manager_constants(::android::providers::settings::SettingProto* manager_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(manager_constants_);
  }
  if (manager_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manager_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manager_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  manager_constants_ = manager_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sync.manager_constants)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Sys

// optional .android.providers.settings.SettingProto free_storage_log_interval_mins = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sys::has_free_storage_log_interval_mins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sys::free_storage_log_interval_mins() const {
  const ::android::providers::settings::SettingProto* p = free_storage_log_interval_mins_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sys.free_storage_log_interval_mins)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::release_free_storage_log_interval_mins() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sys.free_storage_log_interval_mins)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = free_storage_log_interval_mins_;
  free_storage_log_interval_mins_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::mutable_free_storage_log_interval_mins() {
  _has_bits_[0] |= 0x00000001u;
  if (free_storage_log_interval_mins_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    free_storage_log_interval_mins_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sys.free_storage_log_interval_mins)
  return free_storage_log_interval_mins_;
}
inline void GlobalSettingsProto_Sys::set_allocated_free_storage_log_interval_mins(::android::providers::settings::SettingProto* free_storage_log_interval_mins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(free_storage_log_interval_mins_);
  }
  if (free_storage_log_interval_mins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      free_storage_log_interval_mins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, free_storage_log_interval_mins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  free_storage_log_interval_mins_ = free_storage_log_interval_mins;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sys.free_storage_log_interval_mins)
}

// optional .android.providers.settings.SettingProto storage_threshold_percentage = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sys::has_storage_threshold_percentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sys::storage_threshold_percentage() const {
  const ::android::providers::settings::SettingProto* p = storage_threshold_percentage_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sys.storage_threshold_percentage)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::release_storage_threshold_percentage() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sys.storage_threshold_percentage)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = storage_threshold_percentage_;
  storage_threshold_percentage_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::mutable_storage_threshold_percentage() {
  _has_bits_[0] |= 0x00000002u;
  if (storage_threshold_percentage_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    storage_threshold_percentage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sys.storage_threshold_percentage)
  return storage_threshold_percentage_;
}
inline void GlobalSettingsProto_Sys::set_allocated_storage_threshold_percentage(::android::providers::settings::SettingProto* storage_threshold_percentage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_threshold_percentage_);
  }
  if (storage_threshold_percentage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_threshold_percentage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_threshold_percentage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_threshold_percentage_ = storage_threshold_percentage;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sys.storage_threshold_percentage)
}

// optional .android.providers.settings.SettingProto storage_threshold_max_bytes = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sys::has_storage_threshold_max_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sys::storage_threshold_max_bytes() const {
  const ::android::providers::settings::SettingProto* p = storage_threshold_max_bytes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sys.storage_threshold_max_bytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::release_storage_threshold_max_bytes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sys.storage_threshold_max_bytes)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = storage_threshold_max_bytes_;
  storage_threshold_max_bytes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::mutable_storage_threshold_max_bytes() {
  _has_bits_[0] |= 0x00000004u;
  if (storage_threshold_max_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    storage_threshold_max_bytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sys.storage_threshold_max_bytes)
  return storage_threshold_max_bytes_;
}
inline void GlobalSettingsProto_Sys::set_allocated_storage_threshold_max_bytes(::android::providers::settings::SettingProto* storage_threshold_max_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_threshold_max_bytes_);
  }
  if (storage_threshold_max_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_threshold_max_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_threshold_max_bytes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storage_threshold_max_bytes_ = storage_threshold_max_bytes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sys.storage_threshold_max_bytes)
}

// optional .android.providers.settings.SettingProto storage_full_threshold_bytes = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sys::has_storage_full_threshold_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sys::storage_full_threshold_bytes() const {
  const ::android::providers::settings::SettingProto* p = storage_full_threshold_bytes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sys.storage_full_threshold_bytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::release_storage_full_threshold_bytes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sys.storage_full_threshold_bytes)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = storage_full_threshold_bytes_;
  storage_full_threshold_bytes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::mutable_storage_full_threshold_bytes() {
  _has_bits_[0] |= 0x00000008u;
  if (storage_full_threshold_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    storage_full_threshold_bytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sys.storage_full_threshold_bytes)
  return storage_full_threshold_bytes_;
}
inline void GlobalSettingsProto_Sys::set_allocated_storage_full_threshold_bytes(::android::providers::settings::SettingProto* storage_full_threshold_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_full_threshold_bytes_);
  }
  if (storage_full_threshold_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_full_threshold_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_full_threshold_bytes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  storage_full_threshold_bytes_ = storage_full_threshold_bytes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sys.storage_full_threshold_bytes)
}

// optional .android.providers.settings.SettingProto storage_cache_percentage = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sys::has_storage_cache_percentage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sys::storage_cache_percentage() const {
  const ::android::providers::settings::SettingProto* p = storage_cache_percentage_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sys.storage_cache_percentage)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::release_storage_cache_percentage() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sys.storage_cache_percentage)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = storage_cache_percentage_;
  storage_cache_percentage_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::mutable_storage_cache_percentage() {
  _has_bits_[0] |= 0x00000010u;
  if (storage_cache_percentage_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    storage_cache_percentage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sys.storage_cache_percentage)
  return storage_cache_percentage_;
}
inline void GlobalSettingsProto_Sys::set_allocated_storage_cache_percentage(::android::providers::settings::SettingProto* storage_cache_percentage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_cache_percentage_);
  }
  if (storage_cache_percentage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_cache_percentage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_cache_percentage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  storage_cache_percentage_ = storage_cache_percentage;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sys.storage_cache_percentage)
}

// optional .android.providers.settings.SettingProto storage_cache_max_bytes = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sys::has_storage_cache_max_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sys::storage_cache_max_bytes() const {
  const ::android::providers::settings::SettingProto* p = storage_cache_max_bytes_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sys.storage_cache_max_bytes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::release_storage_cache_max_bytes() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sys.storage_cache_max_bytes)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = storage_cache_max_bytes_;
  storage_cache_max_bytes_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::mutable_storage_cache_max_bytes() {
  _has_bits_[0] |= 0x00000020u;
  if (storage_cache_max_bytes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    storage_cache_max_bytes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sys.storage_cache_max_bytes)
  return storage_cache_max_bytes_;
}
inline void GlobalSettingsProto_Sys::set_allocated_storage_cache_max_bytes(::android::providers::settings::SettingProto* storage_cache_max_bytes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_cache_max_bytes_);
  }
  if (storage_cache_max_bytes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage_cache_max_bytes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_cache_max_bytes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  storage_cache_max_bytes_ = storage_cache_max_bytes;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sys.storage_cache_max_bytes)
}

// optional .android.providers.settings.SettingProto uidcpupower = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_Sys::has_uidcpupower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Sys::uidcpupower() const {
  const ::android::providers::settings::SettingProto* p = uidcpupower_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Sys.uidcpupower)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::release_uidcpupower() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Sys.uidcpupower)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = uidcpupower_;
  uidcpupower_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Sys::mutable_uidcpupower() {
  _has_bits_[0] |= 0x00000040u;
  if (uidcpupower_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uidcpupower_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Sys.uidcpupower)
  return uidcpupower_;
}
inline void GlobalSettingsProto_Sys::set_allocated_uidcpupower(::android::providers::settings::SettingProto* uidcpupower) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uidcpupower_);
  }
  if (uidcpupower) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uidcpupower = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uidcpupower, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  uidcpupower_ = uidcpupower;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Sys.uidcpupower)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_TemperatureWarning

// optional .android.providers.settings.SettingProto show_temperature_warning = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_TemperatureWarning::has_show_temperature_warning() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_TemperatureWarning::show_temperature_warning() const {
  const ::android::providers::settings::SettingProto* p = show_temperature_warning_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.TemperatureWarning.show_temperature_warning)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_TemperatureWarning::release_show_temperature_warning() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.TemperatureWarning.show_temperature_warning)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = show_temperature_warning_;
  show_temperature_warning_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_TemperatureWarning::mutable_show_temperature_warning() {
  _has_bits_[0] |= 0x00000001u;
  if (show_temperature_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_temperature_warning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.TemperatureWarning.show_temperature_warning)
  return show_temperature_warning_;
}
inline void GlobalSettingsProto_TemperatureWarning::set_allocated_show_temperature_warning(::android::providers::settings::SettingProto* show_temperature_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_temperature_warning_);
  }
  if (show_temperature_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_temperature_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_temperature_warning, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  show_temperature_warning_ = show_temperature_warning;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.TemperatureWarning.show_temperature_warning)
}

// optional .android.providers.settings.SettingProto warning_temperature_level = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_TemperatureWarning::has_warning_temperature_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_TemperatureWarning::warning_temperature_level() const {
  const ::android::providers::settings::SettingProto* p = warning_temperature_level_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.TemperatureWarning.warning_temperature_level)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_TemperatureWarning::release_warning_temperature_level() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.TemperatureWarning.warning_temperature_level)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = warning_temperature_level_;
  warning_temperature_level_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_TemperatureWarning::mutable_warning_temperature_level() {
  _has_bits_[0] |= 0x00000002u;
  if (warning_temperature_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    warning_temperature_level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.TemperatureWarning.warning_temperature_level)
  return warning_temperature_level_;
}
inline void GlobalSettingsProto_TemperatureWarning::set_allocated_warning_temperature_level(::android::providers::settings::SettingProto* warning_temperature_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(warning_temperature_level_);
  }
  if (warning_temperature_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      warning_temperature_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warning_temperature_level, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  warning_temperature_level_ = warning_temperature_level;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.TemperatureWarning.warning_temperature_level)
}

// optional .android.providers.settings.SettingProto show_usb_temperature_alarm = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_TemperatureWarning::has_show_usb_temperature_alarm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_TemperatureWarning::show_usb_temperature_alarm() const {
  const ::android::providers::settings::SettingProto* p = show_usb_temperature_alarm_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.TemperatureWarning.show_usb_temperature_alarm)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_TemperatureWarning::release_show_usb_temperature_alarm() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.TemperatureWarning.show_usb_temperature_alarm)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = show_usb_temperature_alarm_;
  show_usb_temperature_alarm_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_TemperatureWarning::mutable_show_usb_temperature_alarm() {
  _has_bits_[0] |= 0x00000004u;
  if (show_usb_temperature_alarm_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_usb_temperature_alarm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.TemperatureWarning.show_usb_temperature_alarm)
  return show_usb_temperature_alarm_;
}
inline void GlobalSettingsProto_TemperatureWarning::set_allocated_show_usb_temperature_alarm(::android::providers::settings::SettingProto* show_usb_temperature_alarm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_usb_temperature_alarm_);
  }
  if (show_usb_temperature_alarm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_usb_temperature_alarm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_usb_temperature_alarm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  show_usb_temperature_alarm_ = show_usb_temperature_alarm;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.TemperatureWarning.show_usb_temperature_alarm)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Tether

// optional .android.providers.settings.SettingProto supported = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Tether::has_supported() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Tether::supported() const {
  const ::android::providers::settings::SettingProto* p = supported_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Tether.supported)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::release_supported() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Tether.supported)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = supported_;
  supported_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::mutable_supported() {
  _has_bits_[0] |= 0x00000001u;
  if (supported_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    supported_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Tether.supported)
  return supported_;
}
inline void GlobalSettingsProto_Tether::set_allocated_supported(::android::providers::settings::SettingProto* supported) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(supported_);
  }
  if (supported) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      supported = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supported, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  supported_ = supported;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Tether.supported)
}

// optional .android.providers.settings.SettingProto dun_required = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Tether::has_dun_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Tether::dun_required() const {
  const ::android::providers::settings::SettingProto* p = dun_required_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Tether.dun_required)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::release_dun_required() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Tether.dun_required)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = dun_required_;
  dun_required_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::mutable_dun_required() {
  _has_bits_[0] |= 0x00000002u;
  if (dun_required_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dun_required_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Tether.dun_required)
  return dun_required_;
}
inline void GlobalSettingsProto_Tether::set_allocated_dun_required(::android::providers::settings::SettingProto* dun_required) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dun_required_);
  }
  if (dun_required) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dun_required = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dun_required, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dun_required_ = dun_required;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Tether.dun_required)
}

// optional .android.providers.settings.SettingProto dun_apn = 3;
inline bool GlobalSettingsProto_Tether::has_dun_apn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Tether::dun_apn() const {
  const ::android::providers::settings::SettingProto* p = dun_apn_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Tether.dun_apn)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::release_dun_apn() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Tether.dun_apn)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = dun_apn_;
  dun_apn_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::mutable_dun_apn() {
  _has_bits_[0] |= 0x00000004u;
  if (dun_apn_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dun_apn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Tether.dun_apn)
  return dun_apn_;
}
inline void GlobalSettingsProto_Tether::set_allocated_dun_apn(::android::providers::settings::SettingProto* dun_apn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dun_apn_);
  }
  if (dun_apn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dun_apn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dun_apn, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dun_apn_ = dun_apn;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Tether.dun_apn)
}

// optional .android.providers.settings.SettingProto offload_disabled = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Tether::has_offload_disabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Tether::offload_disabled() const {
  const ::android::providers::settings::SettingProto* p = offload_disabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Tether.offload_disabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::release_offload_disabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Tether.offload_disabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = offload_disabled_;
  offload_disabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::mutable_offload_disabled() {
  _has_bits_[0] |= 0x00000008u;
  if (offload_disabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    offload_disabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Tether.offload_disabled)
  return offload_disabled_;
}
inline void GlobalSettingsProto_Tether::set_allocated_offload_disabled(::android::providers::settings::SettingProto* offload_disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offload_disabled_);
  }
  if (offload_disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offload_disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offload_disabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  offload_disabled_ = offload_disabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Tether.offload_disabled)
}

// optional .android.providers.settings.SettingProto timeout_enabled = 112 [(.android.privacy) = {
inline bool GlobalSettingsProto_Tether::has_timeout_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Tether::timeout_enabled() const {
  const ::android::providers::settings::SettingProto* p = timeout_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Tether.timeout_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::release_timeout_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Tether.timeout_enabled)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = timeout_enabled_;
  timeout_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tether::mutable_timeout_enabled() {
  _has_bits_[0] |= 0x00000010u;
  if (timeout_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    timeout_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Tether.timeout_enabled)
  return timeout_enabled_;
}
inline void GlobalSettingsProto_Tether::set_allocated_timeout_enabled(::android::providers::settings::SettingProto* timeout_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_enabled_);
  }
  if (timeout_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeout_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  timeout_enabled_ = timeout_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Tether.timeout_enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Tzinfo

// optional .android.providers.settings.SettingProto update_content_url = 1;
inline bool GlobalSettingsProto_Tzinfo::has_update_content_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Tzinfo::update_content_url() const {
  const ::android::providers::settings::SettingProto* p = update_content_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Tzinfo.update_content_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tzinfo::release_update_content_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Tzinfo.update_content_url)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = update_content_url_;
  update_content_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tzinfo::mutable_update_content_url() {
  _has_bits_[0] |= 0x00000001u;
  if (update_content_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_content_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Tzinfo.update_content_url)
  return update_content_url_;
}
inline void GlobalSettingsProto_Tzinfo::set_allocated_update_content_url(::android::providers::settings::SettingProto* update_content_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_content_url_);
  }
  if (update_content_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_content_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_content_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  update_content_url_ = update_content_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Tzinfo.update_content_url)
}

// optional .android.providers.settings.SettingProto update_metadata_url = 2;
inline bool GlobalSettingsProto_Tzinfo::has_update_metadata_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Tzinfo::update_metadata_url() const {
  const ::android::providers::settings::SettingProto* p = update_metadata_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Tzinfo.update_metadata_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tzinfo::release_update_metadata_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Tzinfo.update_metadata_url)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = update_metadata_url_;
  update_metadata_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Tzinfo::mutable_update_metadata_url() {
  _has_bits_[0] |= 0x00000002u;
  if (update_metadata_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    update_metadata_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Tzinfo.update_metadata_url)
  return update_metadata_url_;
}
inline void GlobalSettingsProto_Tzinfo::set_allocated_update_metadata_url(::android::providers::settings::SettingProto* update_metadata_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_metadata_url_);
  }
  if (update_metadata_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_metadata_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_metadata_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  update_metadata_url_ = update_metadata_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Tzinfo.update_metadata_url)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Webview

// optional .android.providers.settings.SettingProto data_reduction_proxy_key = 1;
inline bool GlobalSettingsProto_Webview::has_data_reduction_proxy_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Webview::data_reduction_proxy_key() const {
  const ::android::providers::settings::SettingProto* p = data_reduction_proxy_key_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Webview.data_reduction_proxy_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Webview::release_data_reduction_proxy_key() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Webview.data_reduction_proxy_key)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = data_reduction_proxy_key_;
  data_reduction_proxy_key_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Webview::mutable_data_reduction_proxy_key() {
  _has_bits_[0] |= 0x00000001u;
  if (data_reduction_proxy_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    data_reduction_proxy_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Webview.data_reduction_proxy_key)
  return data_reduction_proxy_key_;
}
inline void GlobalSettingsProto_Webview::set_allocated_data_reduction_proxy_key(::android::providers::settings::SettingProto* data_reduction_proxy_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_reduction_proxy_key_);
  }
  if (data_reduction_proxy_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_reduction_proxy_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_reduction_proxy_key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_reduction_proxy_key_ = data_reduction_proxy_key;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Webview.data_reduction_proxy_key)
}

// optional .android.providers.settings.SettingProto fallback_logic_enabled = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Webview::has_fallback_logic_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Webview::fallback_logic_enabled() const {
  const ::android::providers::settings::SettingProto* p = fallback_logic_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Webview.fallback_logic_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Webview::release_fallback_logic_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Webview.fallback_logic_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = fallback_logic_enabled_;
  fallback_logic_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Webview::mutable_fallback_logic_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (fallback_logic_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    fallback_logic_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Webview.fallback_logic_enabled)
  return fallback_logic_enabled_;
}
inline void GlobalSettingsProto_Webview::set_allocated_fallback_logic_enabled(::android::providers::settings::SettingProto* fallback_logic_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fallback_logic_enabled_);
  }
  if (fallback_logic_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fallback_logic_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fallback_logic_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fallback_logic_enabled_ = fallback_logic_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Webview.fallback_logic_enabled)
}

// optional .android.providers.settings.SettingProto provider = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Webview::has_provider() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Webview::provider() const {
  const ::android::providers::settings::SettingProto* p = provider_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Webview.provider)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Webview::release_provider() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Webview.provider)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = provider_;
  provider_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Webview::mutable_provider() {
  _has_bits_[0] |= 0x00000004u;
  if (provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    provider_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Webview.provider)
  return provider_;
}
inline void GlobalSettingsProto_Webview::set_allocated_provider(::android::providers::settings::SettingProto* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_);
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Webview.provider)
}

// optional .android.providers.settings.SettingProto multiprocess = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Webview::has_multiprocess() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Webview::multiprocess() const {
  const ::android::providers::settings::SettingProto* p = multiprocess_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Webview.multiprocess)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Webview::release_multiprocess() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Webview.multiprocess)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = multiprocess_;
  multiprocess_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Webview::mutable_multiprocess() {
  _has_bits_[0] |= 0x00000008u;
  if (multiprocess_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    multiprocess_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Webview.multiprocess)
  return multiprocess_;
}
inline void GlobalSettingsProto_Webview::set_allocated_multiprocess(::android::providers::settings::SettingProto* multiprocess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(multiprocess_);
  }
  if (multiprocess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multiprocess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiprocess, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  multiprocess_ = multiprocess;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Webview.multiprocess)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Wfc

// optional .android.providers.settings.SettingProto ims_enabled = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wfc::has_ims_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wfc::ims_enabled() const {
  const ::android::providers::settings::SettingProto* p = ims_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wfc.ims_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wfc::release_ims_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wfc.ims_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = ims_enabled_;
  ims_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wfc::mutable_ims_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (ims_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ims_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wfc.ims_enabled)
  return ims_enabled_;
}
inline void GlobalSettingsProto_Wfc::set_allocated_ims_enabled(::android::providers::settings::SettingProto* ims_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ims_enabled_);
  }
  if (ims_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ims_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ims_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ims_enabled_ = ims_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wfc.ims_enabled)
}

// optional .android.providers.settings.SettingProto ims_mode = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wfc::has_ims_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wfc::ims_mode() const {
  const ::android::providers::settings::SettingProto* p = ims_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wfc.ims_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wfc::release_ims_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wfc.ims_mode)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = ims_mode_;
  ims_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wfc::mutable_ims_mode() {
  _has_bits_[0] |= 0x00000002u;
  if (ims_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ims_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wfc.ims_mode)
  return ims_mode_;
}
inline void GlobalSettingsProto_Wfc::set_allocated_ims_mode(::android::providers::settings::SettingProto* ims_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ims_mode_);
  }
  if (ims_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ims_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ims_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ims_mode_ = ims_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wfc.ims_mode)
}

// optional .android.providers.settings.SettingProto ims_roaming_mode = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wfc::has_ims_roaming_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wfc::ims_roaming_mode() const {
  const ::android::providers::settings::SettingProto* p = ims_roaming_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wfc.ims_roaming_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wfc::release_ims_roaming_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wfc.ims_roaming_mode)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = ims_roaming_mode_;
  ims_roaming_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wfc::mutable_ims_roaming_mode() {
  _has_bits_[0] |= 0x00000004u;
  if (ims_roaming_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ims_roaming_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wfc.ims_roaming_mode)
  return ims_roaming_mode_;
}
inline void GlobalSettingsProto_Wfc::set_allocated_ims_roaming_mode(::android::providers::settings::SettingProto* ims_roaming_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ims_roaming_mode_);
  }
  if (ims_roaming_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ims_roaming_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ims_roaming_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ims_roaming_mode_ = ims_roaming_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wfc.ims_roaming_mode)
}

// optional .android.providers.settings.SettingProto ims_roaming_enabled = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wfc::has_ims_roaming_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wfc::ims_roaming_enabled() const {
  const ::android::providers::settings::SettingProto* p = ims_roaming_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wfc.ims_roaming_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wfc::release_ims_roaming_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wfc.ims_roaming_enabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = ims_roaming_enabled_;
  ims_roaming_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wfc::mutable_ims_roaming_enabled() {
  _has_bits_[0] |= 0x00000008u;
  if (ims_roaming_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ims_roaming_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wfc.ims_roaming_enabled)
  return ims_roaming_enabled_;
}
inline void GlobalSettingsProto_Wfc::set_allocated_ims_roaming_enabled(::android::providers::settings::SettingProto* ims_roaming_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ims_roaming_enabled_);
  }
  if (ims_roaming_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ims_roaming_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ims_roaming_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ims_roaming_enabled_ = ims_roaming_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wfc.ims_roaming_enabled)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Wifi

// optional .android.providers.settings.SettingProto sleep_policy = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_sleep_policy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::sleep_policy() const {
  const ::android::providers::settings::SettingProto* p = sleep_policy_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.sleep_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_sleep_policy() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.sleep_policy)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = sleep_policy_;
  sleep_policy_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_sleep_policy() {
  _has_bits_[0] |= 0x00000001u;
  if (sleep_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sleep_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.sleep_policy)
  return sleep_policy_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_sleep_policy(::android::providers::settings::SettingProto* sleep_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sleep_policy_);
  }
  if (sleep_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sleep_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sleep_policy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sleep_policy_ = sleep_policy;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.sleep_policy)
}

// optional .android.providers.settings.SettingProto badging_thresholds = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_badging_thresholds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::badging_thresholds() const {
  const ::android::providers::settings::SettingProto* p = badging_thresholds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.badging_thresholds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_badging_thresholds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.badging_thresholds)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = badging_thresholds_;
  badging_thresholds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_badging_thresholds() {
  _has_bits_[0] |= 0x00000002u;
  if (badging_thresholds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    badging_thresholds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.badging_thresholds)
  return badging_thresholds_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_badging_thresholds(::android::providers::settings::SettingProto* badging_thresholds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(badging_thresholds_);
  }
  if (badging_thresholds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      badging_thresholds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, badging_thresholds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  badging_thresholds_ = badging_thresholds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.badging_thresholds)
}

// optional .android.providers.settings.SettingProto display_on = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_display_on() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::display_on() const {
  const ::android::providers::settings::SettingProto* p = display_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.display_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_display_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.display_on)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = display_on_;
  display_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_display_on() {
  _has_bits_[0] |= 0x00000004u;
  if (display_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.display_on)
  return display_on_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_display_on(::android::providers::settings::SettingProto* display_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_on_);
  }
  if (display_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  display_on_ = display_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.display_on)
}

// optional .android.providers.settings.SettingProto display_certification_on = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_display_certification_on() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::display_certification_on() const {
  const ::android::providers::settings::SettingProto* p = display_certification_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.display_certification_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_display_certification_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.display_certification_on)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = display_certification_on_;
  display_certification_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_display_certification_on() {
  _has_bits_[0] |= 0x00000008u;
  if (display_certification_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_certification_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.display_certification_on)
  return display_certification_on_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_display_certification_on(::android::providers::settings::SettingProto* display_certification_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_certification_on_);
  }
  if (display_certification_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_certification_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_certification_on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  display_certification_on_ = display_certification_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.display_certification_on)
}

// optional .android.providers.settings.SettingProto display_wps_config = 5 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_display_wps_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::display_wps_config() const {
  const ::android::providers::settings::SettingProto* p = display_wps_config_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.display_wps_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_display_wps_config() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.display_wps_config)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = display_wps_config_;
  display_wps_config_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_display_wps_config() {
  _has_bits_[0] |= 0x00000010u;
  if (display_wps_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_wps_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.display_wps_config)
  return display_wps_config_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_display_wps_config(::android::providers::settings::SettingProto* display_wps_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_wps_config_);
  }
  if (display_wps_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_wps_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_wps_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  display_wps_config_ = display_wps_config;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.display_wps_config)
}

// optional .android.providers.settings.SettingProto networks_available_notification_on = 6 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_networks_available_notification_on() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::networks_available_notification_on() const {
  const ::android::providers::settings::SettingProto* p = networks_available_notification_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.networks_available_notification_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_networks_available_notification_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.networks_available_notification_on)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = networks_available_notification_on_;
  networks_available_notification_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_networks_available_notification_on() {
  _has_bits_[0] |= 0x00000020u;
  if (networks_available_notification_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    networks_available_notification_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.networks_available_notification_on)
  return networks_available_notification_on_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_networks_available_notification_on(::android::providers::settings::SettingProto* networks_available_notification_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(networks_available_notification_on_);
  }
  if (networks_available_notification_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      networks_available_notification_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networks_available_notification_on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  networks_available_notification_on_ = networks_available_notification_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.networks_available_notification_on)
}

// optional .android.providers.settings.SettingProto networks_available_repeat_delay = 8 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_networks_available_repeat_delay() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::networks_available_repeat_delay() const {
  const ::android::providers::settings::SettingProto* p = networks_available_repeat_delay_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.networks_available_repeat_delay)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_networks_available_repeat_delay() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.networks_available_repeat_delay)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = networks_available_repeat_delay_;
  networks_available_repeat_delay_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_networks_available_repeat_delay() {
  _has_bits_[0] |= 0x00000040u;
  if (networks_available_repeat_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    networks_available_repeat_delay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.networks_available_repeat_delay)
  return networks_available_repeat_delay_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_networks_available_repeat_delay(::android::providers::settings::SettingProto* networks_available_repeat_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(networks_available_repeat_delay_);
  }
  if (networks_available_repeat_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      networks_available_repeat_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networks_available_repeat_delay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  networks_available_repeat_delay_ = networks_available_repeat_delay;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.networks_available_repeat_delay)
}

// optional .android.providers.settings.SettingProto country_code = 9;
inline bool GlobalSettingsProto_Wifi::has_country_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::country_code() const {
  const ::android::providers::settings::SettingProto* p = country_code_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.country_code)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_country_code() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.country_code)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = country_code_;
  country_code_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_country_code() {
  _has_bits_[0] |= 0x00000080u;
  if (country_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    country_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.country_code)
  return country_code_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_country_code(::android::providers::settings::SettingProto* country_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(country_code_);
  }
  if (country_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      country_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, country_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  country_code_ = country_code;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.country_code)
}

// optional .android.providers.settings.SettingProto framework_scan_interval_ms = 10 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_framework_scan_interval_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::framework_scan_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = framework_scan_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.framework_scan_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_framework_scan_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.framework_scan_interval_ms)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = framework_scan_interval_ms_;
  framework_scan_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_framework_scan_interval_ms() {
  _has_bits_[0] |= 0x00000100u;
  if (framework_scan_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    framework_scan_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.framework_scan_interval_ms)
  return framework_scan_interval_ms_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_framework_scan_interval_ms(::android::providers::settings::SettingProto* framework_scan_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(framework_scan_interval_ms_);
  }
  if (framework_scan_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      framework_scan_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, framework_scan_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  framework_scan_interval_ms_ = framework_scan_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.framework_scan_interval_ms)
}

// optional .android.providers.settings.SettingProto idle_ms = 11 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_idle_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::idle_ms() const {
  const ::android::providers::settings::SettingProto* p = idle_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.idle_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_idle_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.idle_ms)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = idle_ms_;
  idle_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_idle_ms() {
  _has_bits_[0] |= 0x00000200u;
  if (idle_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    idle_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.idle_ms)
  return idle_ms_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_idle_ms(::android::providers::settings::SettingProto* idle_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(idle_ms_);
  }
  if (idle_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      idle_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idle_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  idle_ms_ = idle_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.idle_ms)
}

// optional .android.providers.settings.SettingProto num_open_networks_kept = 12 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_num_open_networks_kept() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::num_open_networks_kept() const {
  const ::android::providers::settings::SettingProto* p = num_open_networks_kept_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.num_open_networks_kept)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_num_open_networks_kept() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.num_open_networks_kept)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = num_open_networks_kept_;
  num_open_networks_kept_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_num_open_networks_kept() {
  _has_bits_[0] |= 0x00000400u;
  if (num_open_networks_kept_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    num_open_networks_kept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.num_open_networks_kept)
  return num_open_networks_kept_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_num_open_networks_kept(::android::providers::settings::SettingProto* num_open_networks_kept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_open_networks_kept_);
  }
  if (num_open_networks_kept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      num_open_networks_kept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num_open_networks_kept, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  num_open_networks_kept_ = num_open_networks_kept;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.num_open_networks_kept)
}

// optional .android.providers.settings.SettingProto on = 13 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_on() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::on() const {
  const ::android::providers::settings::SettingProto* p = on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.on)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = on_;
  on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_on() {
  _has_bits_[0] |= 0x00000800u;
  if (on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.on)
  return on_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_on(::android::providers::settings::SettingProto* on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(on_);
  }
  if (on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  on_ = on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.on)
}

// optional .android.providers.settings.SettingProto scan_always_available = 14 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_scan_always_available() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::scan_always_available() const {
  const ::android::providers::settings::SettingProto* p = scan_always_available_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.scan_always_available)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_scan_always_available() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.scan_always_available)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = scan_always_available_;
  scan_always_available_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_scan_always_available() {
  _has_bits_[0] |= 0x00001000u;
  if (scan_always_available_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    scan_always_available_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.scan_always_available)
  return scan_always_available_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_scan_always_available(::android::providers::settings::SettingProto* scan_always_available) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_always_available_);
  }
  if (scan_always_available) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scan_always_available = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_always_available, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  scan_always_available_ = scan_always_available;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.scan_always_available)
}

// optional .android.providers.settings.SettingProto wakeup_enabled = 15 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_wakeup_enabled() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::wakeup_enabled() const {
  const ::android::providers::settings::SettingProto* p = wakeup_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.wakeup_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_wakeup_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.wakeup_enabled)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = wakeup_enabled_;
  wakeup_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_wakeup_enabled() {
  _has_bits_[0] |= 0x00002000u;
  if (wakeup_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    wakeup_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.wakeup_enabled)
  return wakeup_enabled_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_wakeup_enabled(::android::providers::settings::SettingProto* wakeup_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wakeup_enabled_);
  }
  if (wakeup_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wakeup_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wakeup_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  wakeup_enabled_ = wakeup_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.wakeup_enabled)
}

// optional .android.providers.settings.SettingProto saved_state = 16 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_saved_state() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::saved_state() const {
  const ::android::providers::settings::SettingProto* p = saved_state_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.saved_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_saved_state() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.saved_state)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = saved_state_;
  saved_state_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_saved_state() {
  _has_bits_[0] |= 0x00004000u;
  if (saved_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    saved_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.saved_state)
  return saved_state_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_saved_state(::android::providers::settings::SettingProto* saved_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(saved_state_);
  }
  if (saved_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      saved_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, saved_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  saved_state_ = saved_state;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.saved_state)
}

// optional .android.providers.settings.SettingProto supplicant_scan_interval_ms = 17 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_supplicant_scan_interval_ms() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::supplicant_scan_interval_ms() const {
  const ::android::providers::settings::SettingProto* p = supplicant_scan_interval_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.supplicant_scan_interval_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_supplicant_scan_interval_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.supplicant_scan_interval_ms)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = supplicant_scan_interval_ms_;
  supplicant_scan_interval_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_supplicant_scan_interval_ms() {
  _has_bits_[0] |= 0x00008000u;
  if (supplicant_scan_interval_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    supplicant_scan_interval_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.supplicant_scan_interval_ms)
  return supplicant_scan_interval_ms_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_supplicant_scan_interval_ms(::android::providers::settings::SettingProto* supplicant_scan_interval_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(supplicant_scan_interval_ms_);
  }
  if (supplicant_scan_interval_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      supplicant_scan_interval_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supplicant_scan_interval_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  supplicant_scan_interval_ms_ = supplicant_scan_interval_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.supplicant_scan_interval_ms)
}

// optional .android.providers.settings.SettingProto enhanced_auto_join = 18 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_enhanced_auto_join() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::enhanced_auto_join() const {
  const ::android::providers::settings::SettingProto* p = enhanced_auto_join_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.enhanced_auto_join)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_enhanced_auto_join() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.enhanced_auto_join)
  _has_bits_[0] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = enhanced_auto_join_;
  enhanced_auto_join_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_enhanced_auto_join() {
  _has_bits_[0] |= 0x00010000u;
  if (enhanced_auto_join_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enhanced_auto_join_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.enhanced_auto_join)
  return enhanced_auto_join_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_enhanced_auto_join(::android::providers::settings::SettingProto* enhanced_auto_join) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhanced_auto_join_);
  }
  if (enhanced_auto_join) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enhanced_auto_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enhanced_auto_join, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  enhanced_auto_join_ = enhanced_auto_join;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.enhanced_auto_join)
}

// optional .android.providers.settings.SettingProto network_show_rssi = 19 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_network_show_rssi() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::network_show_rssi() const {
  const ::android::providers::settings::SettingProto* p = network_show_rssi_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.network_show_rssi)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_network_show_rssi() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.network_show_rssi)
  _has_bits_[0] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = network_show_rssi_;
  network_show_rssi_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_network_show_rssi() {
  _has_bits_[0] |= 0x00020000u;
  if (network_show_rssi_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    network_show_rssi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.network_show_rssi)
  return network_show_rssi_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_network_show_rssi(::android::providers::settings::SettingProto* network_show_rssi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_show_rssi_);
  }
  if (network_show_rssi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_show_rssi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_show_rssi, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  network_show_rssi_ = network_show_rssi;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.network_show_rssi)
}

// optional .android.providers.settings.SettingProto scan_interval_when_p2p_connected_ms = 20 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_scan_interval_when_p2p_connected_ms() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::scan_interval_when_p2p_connected_ms() const {
  const ::android::providers::settings::SettingProto* p = scan_interval_when_p2p_connected_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.scan_interval_when_p2p_connected_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_scan_interval_when_p2p_connected_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.scan_interval_when_p2p_connected_ms)
  _has_bits_[0] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = scan_interval_when_p2p_connected_ms_;
  scan_interval_when_p2p_connected_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_scan_interval_when_p2p_connected_ms() {
  _has_bits_[0] |= 0x00040000u;
  if (scan_interval_when_p2p_connected_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    scan_interval_when_p2p_connected_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.scan_interval_when_p2p_connected_ms)
  return scan_interval_when_p2p_connected_ms_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_scan_interval_when_p2p_connected_ms(::android::providers::settings::SettingProto* scan_interval_when_p2p_connected_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_interval_when_p2p_connected_ms_);
  }
  if (scan_interval_when_p2p_connected_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scan_interval_when_p2p_connected_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_interval_when_p2p_connected_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  scan_interval_when_p2p_connected_ms_ = scan_interval_when_p2p_connected_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.scan_interval_when_p2p_connected_ms)
}

// optional .android.providers.settings.SettingProto watchdog_on = 21 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_watchdog_on() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::watchdog_on() const {
  const ::android::providers::settings::SettingProto* p = watchdog_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.watchdog_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_watchdog_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.watchdog_on)
  _has_bits_[0] &= ~0x00080000u;
  ::android::providers::settings::SettingProto* temp = watchdog_on_;
  watchdog_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_watchdog_on() {
  _has_bits_[0] |= 0x00080000u;
  if (watchdog_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    watchdog_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.watchdog_on)
  return watchdog_on_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_watchdog_on(::android::providers::settings::SettingProto* watchdog_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(watchdog_on_);
  }
  if (watchdog_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      watchdog_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchdog_on, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  watchdog_on_ = watchdog_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.watchdog_on)
}

// optional .android.providers.settings.SettingProto watchdog_poor_network_test_enabled = 22 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_watchdog_poor_network_test_enabled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::watchdog_poor_network_test_enabled() const {
  const ::android::providers::settings::SettingProto* p = watchdog_poor_network_test_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.watchdog_poor_network_test_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_watchdog_poor_network_test_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.watchdog_poor_network_test_enabled)
  _has_bits_[0] &= ~0x00100000u;
  ::android::providers::settings::SettingProto* temp = watchdog_poor_network_test_enabled_;
  watchdog_poor_network_test_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_watchdog_poor_network_test_enabled() {
  _has_bits_[0] |= 0x00100000u;
  if (watchdog_poor_network_test_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    watchdog_poor_network_test_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.watchdog_poor_network_test_enabled)
  return watchdog_poor_network_test_enabled_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_watchdog_poor_network_test_enabled(::android::providers::settings::SettingProto* watchdog_poor_network_test_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(watchdog_poor_network_test_enabled_);
  }
  if (watchdog_poor_network_test_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      watchdog_poor_network_test_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchdog_poor_network_test_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  watchdog_poor_network_test_enabled_ = watchdog_poor_network_test_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.watchdog_poor_network_test_enabled)
}

// optional .android.providers.settings.SettingProto suspend_optimizations_enabled = 23 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_suspend_optimizations_enabled() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::suspend_optimizations_enabled() const {
  const ::android::providers::settings::SettingProto* p = suspend_optimizations_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.suspend_optimizations_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_suspend_optimizations_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.suspend_optimizations_enabled)
  _has_bits_[0] &= ~0x00200000u;
  ::android::providers::settings::SettingProto* temp = suspend_optimizations_enabled_;
  suspend_optimizations_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_suspend_optimizations_enabled() {
  _has_bits_[0] |= 0x00200000u;
  if (suspend_optimizations_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    suspend_optimizations_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.suspend_optimizations_enabled)
  return suspend_optimizations_enabled_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_suspend_optimizations_enabled(::android::providers::settings::SettingProto* suspend_optimizations_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(suspend_optimizations_enabled_);
  }
  if (suspend_optimizations_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suspend_optimizations_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suspend_optimizations_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  suspend_optimizations_enabled_ = suspend_optimizations_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.suspend_optimizations_enabled)
}

// optional .android.providers.settings.SettingProto verbose_logging_enabled = 24 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_verbose_logging_enabled() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::verbose_logging_enabled() const {
  const ::android::providers::settings::SettingProto* p = verbose_logging_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.verbose_logging_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_verbose_logging_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.verbose_logging_enabled)
  _has_bits_[0] &= ~0x00400000u;
  ::android::providers::settings::SettingProto* temp = verbose_logging_enabled_;
  verbose_logging_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_verbose_logging_enabled() {
  _has_bits_[0] |= 0x00400000u;
  if (verbose_logging_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    verbose_logging_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.verbose_logging_enabled)
  return verbose_logging_enabled_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_verbose_logging_enabled(::android::providers::settings::SettingProto* verbose_logging_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(verbose_logging_enabled_);
  }
  if (verbose_logging_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      verbose_logging_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verbose_logging_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  verbose_logging_enabled_ = verbose_logging_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.verbose_logging_enabled)
}

// optional .android.providers.settings.SettingProto max_dhcp_retry_count = 26 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_max_dhcp_retry_count() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::max_dhcp_retry_count() const {
  const ::android::providers::settings::SettingProto* p = max_dhcp_retry_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.max_dhcp_retry_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_max_dhcp_retry_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.max_dhcp_retry_count)
  _has_bits_[0] &= ~0x00800000u;
  ::android::providers::settings::SettingProto* temp = max_dhcp_retry_count_;
  max_dhcp_retry_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_max_dhcp_retry_count() {
  _has_bits_[0] |= 0x00800000u;
  if (max_dhcp_retry_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_dhcp_retry_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.max_dhcp_retry_count)
  return max_dhcp_retry_count_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_max_dhcp_retry_count(::android::providers::settings::SettingProto* max_dhcp_retry_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_dhcp_retry_count_);
  }
  if (max_dhcp_retry_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_dhcp_retry_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_dhcp_retry_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  max_dhcp_retry_count_ = max_dhcp_retry_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.max_dhcp_retry_count)
}

// optional .android.providers.settings.SettingProto mobile_data_transition_wakelock_timeout_ms = 27 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_mobile_data_transition_wakelock_timeout_ms() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::mobile_data_transition_wakelock_timeout_ms() const {
  const ::android::providers::settings::SettingProto* p = mobile_data_transition_wakelock_timeout_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.mobile_data_transition_wakelock_timeout_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_mobile_data_transition_wakelock_timeout_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.mobile_data_transition_wakelock_timeout_ms)
  _has_bits_[0] &= ~0x01000000u;
  ::android::providers::settings::SettingProto* temp = mobile_data_transition_wakelock_timeout_ms_;
  mobile_data_transition_wakelock_timeout_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_mobile_data_transition_wakelock_timeout_ms() {
  _has_bits_[0] |= 0x01000000u;
  if (mobile_data_transition_wakelock_timeout_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mobile_data_transition_wakelock_timeout_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.mobile_data_transition_wakelock_timeout_ms)
  return mobile_data_transition_wakelock_timeout_ms_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_mobile_data_transition_wakelock_timeout_ms(::android::providers::settings::SettingProto* mobile_data_transition_wakelock_timeout_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mobile_data_transition_wakelock_timeout_ms_);
  }
  if (mobile_data_transition_wakelock_timeout_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mobile_data_transition_wakelock_timeout_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobile_data_transition_wakelock_timeout_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  mobile_data_transition_wakelock_timeout_ms_ = mobile_data_transition_wakelock_timeout_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.mobile_data_transition_wakelock_timeout_ms)
}

// optional .android.providers.settings.SettingProto device_owner_configs_lockdown = 28 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_device_owner_configs_lockdown() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::device_owner_configs_lockdown() const {
  const ::android::providers::settings::SettingProto* p = device_owner_configs_lockdown_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.device_owner_configs_lockdown)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_device_owner_configs_lockdown() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.device_owner_configs_lockdown)
  _has_bits_[0] &= ~0x02000000u;
  ::android::providers::settings::SettingProto* temp = device_owner_configs_lockdown_;
  device_owner_configs_lockdown_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_device_owner_configs_lockdown() {
  _has_bits_[0] |= 0x02000000u;
  if (device_owner_configs_lockdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    device_owner_configs_lockdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.device_owner_configs_lockdown)
  return device_owner_configs_lockdown_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_device_owner_configs_lockdown(::android::providers::settings::SettingProto* device_owner_configs_lockdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_owner_configs_lockdown_);
  }
  if (device_owner_configs_lockdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_owner_configs_lockdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_owner_configs_lockdown, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  device_owner_configs_lockdown_ = device_owner_configs_lockdown;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.device_owner_configs_lockdown)
}

// optional .android.providers.settings.SettingProto frequency_band = 29 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_frequency_band() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::frequency_band() const {
  const ::android::providers::settings::SettingProto* p = frequency_band_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.frequency_band)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_frequency_band() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.frequency_band)
  _has_bits_[0] &= ~0x04000000u;
  ::android::providers::settings::SettingProto* temp = frequency_band_;
  frequency_band_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_frequency_band() {
  _has_bits_[0] |= 0x04000000u;
  if (frequency_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    frequency_band_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.frequency_band)
  return frequency_band_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_frequency_band(::android::providers::settings::SettingProto* frequency_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frequency_band_);
  }
  if (frequency_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frequency_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frequency_band, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  frequency_band_ = frequency_band;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.frequency_band)
}

// optional .android.providers.settings.SettingProto p2p_device_name = 30;
inline bool GlobalSettingsProto_Wifi::has_p2p_device_name() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::p2p_device_name() const {
  const ::android::providers::settings::SettingProto* p = p2p_device_name_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.p2p_device_name)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_p2p_device_name() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.p2p_device_name)
  _has_bits_[0] &= ~0x08000000u;
  ::android::providers::settings::SettingProto* temp = p2p_device_name_;
  p2p_device_name_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_p2p_device_name() {
  _has_bits_[0] |= 0x08000000u;
  if (p2p_device_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    p2p_device_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.p2p_device_name)
  return p2p_device_name_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_p2p_device_name(::android::providers::settings::SettingProto* p2p_device_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(p2p_device_name_);
  }
  if (p2p_device_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p2p_device_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p2p_device_name, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  p2p_device_name_ = p2p_device_name;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.p2p_device_name)
}

// optional .android.providers.settings.SettingProto ephemeral_out_of_range_timeout_ms = 32 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_ephemeral_out_of_range_timeout_ms() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::ephemeral_out_of_range_timeout_ms() const {
  const ::android::providers::settings::SettingProto* p = ephemeral_out_of_range_timeout_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.ephemeral_out_of_range_timeout_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_ephemeral_out_of_range_timeout_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.ephemeral_out_of_range_timeout_ms)
  _has_bits_[0] &= ~0x10000000u;
  ::android::providers::settings::SettingProto* temp = ephemeral_out_of_range_timeout_ms_;
  ephemeral_out_of_range_timeout_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_ephemeral_out_of_range_timeout_ms() {
  _has_bits_[0] |= 0x10000000u;
  if (ephemeral_out_of_range_timeout_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ephemeral_out_of_range_timeout_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.ephemeral_out_of_range_timeout_ms)
  return ephemeral_out_of_range_timeout_ms_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_ephemeral_out_of_range_timeout_ms(::android::providers::settings::SettingProto* ephemeral_out_of_range_timeout_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ephemeral_out_of_range_timeout_ms_);
  }
  if (ephemeral_out_of_range_timeout_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ephemeral_out_of_range_timeout_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ephemeral_out_of_range_timeout_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  ephemeral_out_of_range_timeout_ms_ = ephemeral_out_of_range_timeout_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.ephemeral_out_of_range_timeout_ms)
}

// optional .android.providers.settings.SettingProto on_when_proxy_disconnected = 33 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_on_when_proxy_disconnected() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::on_when_proxy_disconnected() const {
  const ::android::providers::settings::SettingProto* p = on_when_proxy_disconnected_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.on_when_proxy_disconnected)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_on_when_proxy_disconnected() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.on_when_proxy_disconnected)
  _has_bits_[0] &= ~0x20000000u;
  ::android::providers::settings::SettingProto* temp = on_when_proxy_disconnected_;
  on_when_proxy_disconnected_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_on_when_proxy_disconnected() {
  _has_bits_[0] |= 0x20000000u;
  if (on_when_proxy_disconnected_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    on_when_proxy_disconnected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.on_when_proxy_disconnected)
  return on_when_proxy_disconnected_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_on_when_proxy_disconnected(::android::providers::settings::SettingProto* on_when_proxy_disconnected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(on_when_proxy_disconnected_);
  }
  if (on_when_proxy_disconnected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      on_when_proxy_disconnected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, on_when_proxy_disconnected, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  on_when_proxy_disconnected_ = on_when_proxy_disconnected;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.on_when_proxy_disconnected)
}

// optional .android.providers.settings.SettingProto bounce_delay_override_ms = 34 [(.android.privacy) = {
inline bool GlobalSettingsProto_Wifi::has_bounce_delay_override_ms() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Wifi::bounce_delay_override_ms() const {
  const ::android::providers::settings::SettingProto* p = bounce_delay_override_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Wifi.bounce_delay_override_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::release_bounce_delay_override_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Wifi.bounce_delay_override_ms)
  _has_bits_[0] &= ~0x40000000u;
  ::android::providers::settings::SettingProto* temp = bounce_delay_override_ms_;
  bounce_delay_override_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Wifi::mutable_bounce_delay_override_ms() {
  _has_bits_[0] |= 0x40000000u;
  if (bounce_delay_override_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    bounce_delay_override_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Wifi.bounce_delay_override_ms)
  return bounce_delay_override_ms_;
}
inline void GlobalSettingsProto_Wifi::set_allocated_bounce_delay_override_ms(::android::providers::settings::SettingProto* bounce_delay_override_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounce_delay_override_ms_);
  }
  if (bounce_delay_override_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounce_delay_override_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounce_delay_override_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  bounce_delay_override_ms_ = bounce_delay_override_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Wifi.bounce_delay_override_ms)
}

// -------------------------------------------------------------------

// GlobalSettingsProto_Zen

// optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
inline bool GlobalSettingsProto_Zen::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Zen::mode() const {
  const ::android::providers::settings::SettingProto* p = mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Zen.mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Zen::release_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Zen.mode)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Zen::mutable_mode() {
  _has_bits_[0] |= 0x00000001u;
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Zen.mode)
  return mode_;
}
inline void GlobalSettingsProto_Zen::set_allocated_mode(::android::providers::settings::SettingProto* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Zen.mode)
}

// optional .android.providers.settings.SettingProto mode_ringer_level = 2 [(.android.privacy) = {
inline bool GlobalSettingsProto_Zen::has_mode_ringer_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Zen::mode_ringer_level() const {
  const ::android::providers::settings::SettingProto* p = mode_ringer_level_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Zen.mode_ringer_level)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Zen::release_mode_ringer_level() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Zen.mode_ringer_level)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = mode_ringer_level_;
  mode_ringer_level_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Zen::mutable_mode_ringer_level() {
  _has_bits_[0] |= 0x00000002u;
  if (mode_ringer_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mode_ringer_level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Zen.mode_ringer_level)
  return mode_ringer_level_;
}
inline void GlobalSettingsProto_Zen::set_allocated_mode_ringer_level(::android::providers::settings::SettingProto* mode_ringer_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_ringer_level_);
  }
  if (mode_ringer_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mode_ringer_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode_ringer_level, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mode_ringer_level_ = mode_ringer_level;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Zen.mode_ringer_level)
}

// optional .android.providers.settings.SettingProto mode_config_etag = 3;
inline bool GlobalSettingsProto_Zen::has_mode_config_etag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto_Zen::mode_config_etag() const {
  const ::android::providers::settings::SettingProto* p = mode_config_etag_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.Zen.mode_config_etag)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Zen::release_mode_config_etag() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.Zen.mode_config_etag)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = mode_config_etag_;
  mode_config_etag_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto_Zen::mutable_mode_config_etag() {
  _has_bits_[0] |= 0x00000004u;
  if (mode_config_etag_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mode_config_etag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.Zen.mode_config_etag)
  return mode_config_etag_;
}
inline void GlobalSettingsProto_Zen::set_allocated_mode_config_etag(::android::providers::settings::SettingProto* mode_config_etag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_config_etag_);
  }
  if (mode_config_etag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mode_config_etag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode_config_etag, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mode_config_etag_ = mode_config_etag;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.Zen.mode_config_etag)
}

// -------------------------------------------------------------------

// GlobalSettingsProto

// repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
inline int GlobalSettingsProto::historical_operations_size() const {
  return historical_operations_.size();
}
inline ::android::providers::settings::SettingsOperationProto* GlobalSettingsProto::mutable_historical_operations(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.historical_operations)
  return historical_operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >*
GlobalSettingsProto::mutable_historical_operations() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.historical_operations)
  return &historical_operations_;
}
inline const ::android::providers::settings::SettingsOperationProto& GlobalSettingsProto::historical_operations(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.historical_operations)
  return historical_operations_.Get(index);
}
inline ::android::providers::settings::SettingsOperationProto* GlobalSettingsProto::add_historical_operations() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.historical_operations)
  return historical_operations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >&
GlobalSettingsProto::historical_operations() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.historical_operations)
  return historical_operations_;
}

// optional .android.providers.settings.SettingProto activity_manager_constants = 2;
inline bool GlobalSettingsProto::has_activity_manager_constants() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::activity_manager_constants() const {
  const ::android::providers::settings::SettingProto* p = activity_manager_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.activity_manager_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_activity_manager_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.activity_manager_constants)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = activity_manager_constants_;
  activity_manager_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_activity_manager_constants() {
  _has_bits_[0] |= 0x00000001u;
  if (activity_manager_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    activity_manager_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.activity_manager_constants)
  return activity_manager_constants_;
}
inline void GlobalSettingsProto::set_allocated_activity_manager_constants(::android::providers::settings::SettingProto* activity_manager_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_manager_constants_);
  }
  if (activity_manager_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activity_manager_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity_manager_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activity_manager_constants_ = activity_manager_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.activity_manager_constants)
}

// optional .android.providers.settings.SettingProto adb_enabled = 3 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_adb_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::adb_enabled() const {
  const ::android::providers::settings::SettingProto* p = adb_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.adb_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_adb_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.adb_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = adb_enabled_;
  adb_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_adb_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (adb_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    adb_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.adb_enabled)
  return adb_enabled_;
}
inline void GlobalSettingsProto::set_allocated_adb_enabled(::android::providers::settings::SettingProto* adb_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adb_enabled_);
  }
  if (adb_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adb_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adb_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  adb_enabled_ = adb_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.adb_enabled)
}

// optional .android.providers.settings.SettingProto add_users_when_locked = 4 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_add_users_when_locked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::add_users_when_locked() const {
  const ::android::providers::settings::SettingProto* p = add_users_when_locked_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.add_users_when_locked)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_add_users_when_locked() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.add_users_when_locked)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = add_users_when_locked_;
  add_users_when_locked_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_add_users_when_locked() {
  _has_bits_[0] |= 0x00000004u;
  if (add_users_when_locked_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    add_users_when_locked_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.add_users_when_locked)
  return add_users_when_locked_;
}
inline void GlobalSettingsProto::set_allocated_add_users_when_locked(::android::providers::settings::SettingProto* add_users_when_locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_users_when_locked_);
  }
  if (add_users_when_locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      add_users_when_locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_users_when_locked, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  add_users_when_locked_ = add_users_when_locked;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.add_users_when_locked)
}

// optional .android.providers.settings.GlobalSettingsProto.AirplaneMode airplane_mode = 5;
inline bool GlobalSettingsProto::has_airplane_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GlobalSettingsProto::clear_airplane_mode() {
  if (airplane_mode_ != nullptr) airplane_mode_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::providers::settings::GlobalSettingsProto_AirplaneMode& GlobalSettingsProto::airplane_mode() const {
  const ::android::providers::settings::GlobalSettingsProto_AirplaneMode* p = airplane_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.airplane_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_AirplaneMode*>(
      &::android::providers::settings::_GlobalSettingsProto_AirplaneMode_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_AirplaneMode* GlobalSettingsProto::release_airplane_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.airplane_mode)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::GlobalSettingsProto_AirplaneMode* temp = airplane_mode_;
  airplane_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_AirplaneMode* GlobalSettingsProto::mutable_airplane_mode() {
  _has_bits_[0] |= 0x00000008u;
  if (airplane_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_AirplaneMode>(GetArenaNoVirtual());
    airplane_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.airplane_mode)
  return airplane_mode_;
}
inline void GlobalSettingsProto::set_allocated_airplane_mode(::android::providers::settings::GlobalSettingsProto_AirplaneMode* airplane_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete airplane_mode_;
  }
  if (airplane_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      airplane_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airplane_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  airplane_mode_ = airplane_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.airplane_mode)
}

// optional .android.providers.settings.SettingProto allow_user_switching_when_system_user_locked = 7 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_allow_user_switching_when_system_user_locked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::allow_user_switching_when_system_user_locked() const {
  const ::android::providers::settings::SettingProto* p = allow_user_switching_when_system_user_locked_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.allow_user_switching_when_system_user_locked)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_allow_user_switching_when_system_user_locked() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.allow_user_switching_when_system_user_locked)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = allow_user_switching_when_system_user_locked_;
  allow_user_switching_when_system_user_locked_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_allow_user_switching_when_system_user_locked() {
  _has_bits_[0] |= 0x00000010u;
  if (allow_user_switching_when_system_user_locked_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    allow_user_switching_when_system_user_locked_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.allow_user_switching_when_system_user_locked)
  return allow_user_switching_when_system_user_locked_;
}
inline void GlobalSettingsProto::set_allocated_allow_user_switching_when_system_user_locked(::android::providers::settings::SettingProto* allow_user_switching_when_system_user_locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allow_user_switching_when_system_user_locked_);
  }
  if (allow_user_switching_when_system_user_locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allow_user_switching_when_system_user_locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_user_switching_when_system_user_locked, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  allow_user_switching_when_system_user_locked_ = allow_user_switching_when_system_user_locked;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.allow_user_switching_when_system_user_locked)
}

// optional .android.providers.settings.SettingProto always_on_display_constants = 8;
inline bool GlobalSettingsProto::has_always_on_display_constants() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::always_on_display_constants() const {
  const ::android::providers::settings::SettingProto* p = always_on_display_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.always_on_display_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_always_on_display_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.always_on_display_constants)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = always_on_display_constants_;
  always_on_display_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_always_on_display_constants() {
  _has_bits_[0] |= 0x00000020u;
  if (always_on_display_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    always_on_display_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.always_on_display_constants)
  return always_on_display_constants_;
}
inline void GlobalSettingsProto::set_allocated_always_on_display_constants(::android::providers::settings::SettingProto* always_on_display_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(always_on_display_constants_);
  }
  if (always_on_display_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      always_on_display_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, always_on_display_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  always_on_display_constants_ = always_on_display_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.always_on_display_constants)
}

// optional .android.providers.settings.SettingProto always_finish_activities = 9 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_always_finish_activities() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::always_finish_activities() const {
  const ::android::providers::settings::SettingProto* p = always_finish_activities_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.always_finish_activities)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_always_finish_activities() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.always_finish_activities)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = always_finish_activities_;
  always_finish_activities_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_always_finish_activities() {
  _has_bits_[0] |= 0x00000040u;
  if (always_finish_activities_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    always_finish_activities_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.always_finish_activities)
  return always_finish_activities_;
}
inline void GlobalSettingsProto::set_allocated_always_finish_activities(::android::providers::settings::SettingProto* always_finish_activities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(always_finish_activities_);
  }
  if (always_finish_activities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      always_finish_activities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, always_finish_activities, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  always_finish_activities_ = always_finish_activities;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.always_finish_activities)
}

// optional .android.providers.settings.SettingProto animator_duration_scale = 10 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_animator_duration_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::animator_duration_scale() const {
  const ::android::providers::settings::SettingProto* p = animator_duration_scale_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.animator_duration_scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_animator_duration_scale() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.animator_duration_scale)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = animator_duration_scale_;
  animator_duration_scale_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_animator_duration_scale() {
  _has_bits_[0] |= 0x00000080u;
  if (animator_duration_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    animator_duration_scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.animator_duration_scale)
  return animator_duration_scale_;
}
inline void GlobalSettingsProto::set_allocated_animator_duration_scale(::android::providers::settings::SettingProto* animator_duration_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(animator_duration_scale_);
  }
  if (animator_duration_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      animator_duration_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animator_duration_scale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  animator_duration_scale_ = animator_duration_scale;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.animator_duration_scale)
}

// optional .android.providers.settings.GlobalSettingsProto.Anomaly anomaly = 11;
inline bool GlobalSettingsProto::has_anomaly() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GlobalSettingsProto::clear_anomaly() {
  if (anomaly_ != nullptr) anomaly_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Anomaly& GlobalSettingsProto::anomaly() const {
  const ::android::providers::settings::GlobalSettingsProto_Anomaly* p = anomaly_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.anomaly)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Anomaly*>(
      &::android::providers::settings::_GlobalSettingsProto_Anomaly_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Anomaly* GlobalSettingsProto::release_anomaly() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.anomaly)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::GlobalSettingsProto_Anomaly* temp = anomaly_;
  anomaly_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Anomaly* GlobalSettingsProto::mutable_anomaly() {
  _has_bits_[0] |= 0x00000100u;
  if (anomaly_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Anomaly>(GetArenaNoVirtual());
    anomaly_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.anomaly)
  return anomaly_;
}
inline void GlobalSettingsProto::set_allocated_anomaly(::android::providers::settings::GlobalSettingsProto_Anomaly* anomaly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete anomaly_;
  }
  if (anomaly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anomaly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anomaly, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  anomaly_ = anomaly;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.anomaly)
}

// optional .android.providers.settings.GlobalSettingsProto.ApnDb apn_db = 12;
inline bool GlobalSettingsProto::has_apn_db() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GlobalSettingsProto::clear_apn_db() {
  if (apn_db_ != nullptr) apn_db_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::android::providers::settings::GlobalSettingsProto_ApnDb& GlobalSettingsProto::apn_db() const {
  const ::android::providers::settings::GlobalSettingsProto_ApnDb* p = apn_db_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.apn_db)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_ApnDb*>(
      &::android::providers::settings::_GlobalSettingsProto_ApnDb_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_ApnDb* GlobalSettingsProto::release_apn_db() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.apn_db)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::GlobalSettingsProto_ApnDb* temp = apn_db_;
  apn_db_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_ApnDb* GlobalSettingsProto::mutable_apn_db() {
  _has_bits_[0] |= 0x00000200u;
  if (apn_db_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_ApnDb>(GetArenaNoVirtual());
    apn_db_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.apn_db)
  return apn_db_;
}
inline void GlobalSettingsProto::set_allocated_apn_db(::android::providers::settings::GlobalSettingsProto_ApnDb* apn_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete apn_db_;
  }
  if (apn_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apn_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apn_db, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  apn_db_ = apn_db;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.apn_db)
}

// optional .android.providers.settings.GlobalSettingsProto.App app = 13;
inline bool GlobalSettingsProto::has_app() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GlobalSettingsProto::clear_app() {
  if (app_ != nullptr) app_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::android::providers::settings::GlobalSettingsProto_App& GlobalSettingsProto::app() const {
  const ::android::providers::settings::GlobalSettingsProto_App* p = app_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.app)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_App*>(
      &::android::providers::settings::_GlobalSettingsProto_App_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_App* GlobalSettingsProto::release_app() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.app)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::GlobalSettingsProto_App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_App* GlobalSettingsProto::mutable_app() {
  _has_bits_[0] |= 0x00000400u;
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_App>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.app)
  return app_;
}
inline void GlobalSettingsProto::set_allocated_app(::android::providers::settings::GlobalSettingsProto_App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.app)
}

// optional .android.providers.settings.SettingProto assisted_gps_enabled = 14 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_assisted_gps_enabled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::assisted_gps_enabled() const {
  const ::android::providers::settings::SettingProto* p = assisted_gps_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.assisted_gps_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_assisted_gps_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.assisted_gps_enabled)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = assisted_gps_enabled_;
  assisted_gps_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_assisted_gps_enabled() {
  _has_bits_[0] |= 0x00000800u;
  if (assisted_gps_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    assisted_gps_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.assisted_gps_enabled)
  return assisted_gps_enabled_;
}
inline void GlobalSettingsProto::set_allocated_assisted_gps_enabled(::android::providers::settings::SettingProto* assisted_gps_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(assisted_gps_enabled_);
  }
  if (assisted_gps_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assisted_gps_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assisted_gps_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  assisted_gps_enabled_ = assisted_gps_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.assisted_gps_enabled)
}

// optional .android.providers.settings.SettingProto audio_safe_volume_state = 15 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_audio_safe_volume_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::audio_safe_volume_state() const {
  const ::android::providers::settings::SettingProto* p = audio_safe_volume_state_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.audio_safe_volume_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_audio_safe_volume_state() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.audio_safe_volume_state)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = audio_safe_volume_state_;
  audio_safe_volume_state_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_audio_safe_volume_state() {
  _has_bits_[0] |= 0x00001000u;
  if (audio_safe_volume_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    audio_safe_volume_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.audio_safe_volume_state)
  return audio_safe_volume_state_;
}
inline void GlobalSettingsProto::set_allocated_audio_safe_volume_state(::android::providers::settings::SettingProto* audio_safe_volume_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_safe_volume_state_);
  }
  if (audio_safe_volume_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio_safe_volume_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_safe_volume_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  audio_safe_volume_state_ = audio_safe_volume_state;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.audio_safe_volume_state)
}

// optional .android.providers.settings.GlobalSettingsProto.Autofill autofill = 140;
inline bool GlobalSettingsProto::has_autofill() const {
  return (_has_bits_[4] & 0x00000010u) != 0;
}
inline void GlobalSettingsProto::clear_autofill() {
  if (autofill_ != nullptr) autofill_->Clear();
  _has_bits_[4] &= ~0x00000010u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Autofill& GlobalSettingsProto::autofill() const {
  const ::android::providers::settings::GlobalSettingsProto_Autofill* p = autofill_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.autofill)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Autofill*>(
      &::android::providers::settings::_GlobalSettingsProto_Autofill_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Autofill* GlobalSettingsProto::release_autofill() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.autofill)
  _has_bits_[4] &= ~0x00000010u;
  ::android::providers::settings::GlobalSettingsProto_Autofill* temp = autofill_;
  autofill_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Autofill* GlobalSettingsProto::mutable_autofill() {
  _has_bits_[4] |= 0x00000010u;
  if (autofill_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Autofill>(GetArenaNoVirtual());
    autofill_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.autofill)
  return autofill_;
}
inline void GlobalSettingsProto::set_allocated_autofill(::android::providers::settings::GlobalSettingsProto_Autofill* autofill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete autofill_;
  }
  if (autofill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autofill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill, submessage_arena);
    }
    _has_bits_[4] |= 0x00000010u;
  } else {
    _has_bits_[4] &= ~0x00000010u;
  }
  autofill_ = autofill;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.autofill)
}

// optional .android.providers.settings.GlobalSettingsProto.Backup backup = 146;
inline bool GlobalSettingsProto::has_backup() const {
  return (_has_bits_[4] & 0x00000400u) != 0;
}
inline void GlobalSettingsProto::clear_backup() {
  if (backup_ != nullptr) backup_->Clear();
  _has_bits_[4] &= ~0x00000400u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Backup& GlobalSettingsProto::backup() const {
  const ::android::providers::settings::GlobalSettingsProto_Backup* p = backup_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.backup)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Backup*>(
      &::android::providers::settings::_GlobalSettingsProto_Backup_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Backup* GlobalSettingsProto::release_backup() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.backup)
  _has_bits_[4] &= ~0x00000400u;
  ::android::providers::settings::GlobalSettingsProto_Backup* temp = backup_;
  backup_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Backup* GlobalSettingsProto::mutable_backup() {
  _has_bits_[4] |= 0x00000400u;
  if (backup_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Backup>(GetArenaNoVirtual());
    backup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.backup)
  return backup_;
}
inline void GlobalSettingsProto::set_allocated_backup(::android::providers::settings::GlobalSettingsProto_Backup* backup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete backup_;
  }
  if (backup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      backup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup, submessage_arena);
    }
    _has_bits_[4] |= 0x00000400u;
  } else {
    _has_bits_[4] &= ~0x00000400u;
  }
  backup_ = backup;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.backup)
}

// optional .android.providers.settings.GlobalSettingsProto.Battery battery = 19;
inline bool GlobalSettingsProto::has_battery() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GlobalSettingsProto::clear_battery() {
  if (battery_ != nullptr) battery_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Battery& GlobalSettingsProto::battery() const {
  const ::android::providers::settings::GlobalSettingsProto_Battery* p = battery_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.battery)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Battery*>(
      &::android::providers::settings::_GlobalSettingsProto_Battery_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Battery* GlobalSettingsProto::release_battery() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.battery)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::GlobalSettingsProto_Battery* temp = battery_;
  battery_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Battery* GlobalSettingsProto::mutable_battery() {
  _has_bits_[0] |= 0x00004000u;
  if (battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Battery>(GetArenaNoVirtual());
    battery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.battery)
  return battery_;
}
inline void GlobalSettingsProto::set_allocated_battery(::android::providers::settings::GlobalSettingsProto_Battery* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete battery_;
  }
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.battery)
}

// optional .android.providers.settings.GlobalSettingsProto.BleScan ble_scan = 20;
inline bool GlobalSettingsProto::has_ble_scan() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GlobalSettingsProto::clear_ble_scan() {
  if (ble_scan_ != nullptr) ble_scan_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_BleScan& GlobalSettingsProto::ble_scan() const {
  const ::android::providers::settings::GlobalSettingsProto_BleScan* p = ble_scan_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.ble_scan)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_BleScan*>(
      &::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_BleScan* GlobalSettingsProto::release_ble_scan() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.ble_scan)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::GlobalSettingsProto_BleScan* temp = ble_scan_;
  ble_scan_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_BleScan* GlobalSettingsProto::mutable_ble_scan() {
  _has_bits_[0] |= 0x00008000u;
  if (ble_scan_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_BleScan>(GetArenaNoVirtual());
    ble_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.ble_scan)
  return ble_scan_;
}
inline void GlobalSettingsProto::set_allocated_ble_scan(::android::providers::settings::GlobalSettingsProto_BleScan* ble_scan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ble_scan_;
  }
  if (ble_scan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ble_scan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ble_scan, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  ble_scan_ = ble_scan;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.ble_scan)
}

// optional .android.providers.settings.GlobalSettingsProto.Bluetooth bluetooth = 21;
inline bool GlobalSettingsProto::has_bluetooth() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GlobalSettingsProto::clear_bluetooth() {
  if (bluetooth_ != nullptr) bluetooth_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Bluetooth& GlobalSettingsProto::bluetooth() const {
  const ::android::providers::settings::GlobalSettingsProto_Bluetooth* p = bluetooth_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.bluetooth)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Bluetooth*>(
      &::android::providers::settings::_GlobalSettingsProto_Bluetooth_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Bluetooth* GlobalSettingsProto::release_bluetooth() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.bluetooth)
  _has_bits_[0] &= ~0x00010000u;
  ::android::providers::settings::GlobalSettingsProto_Bluetooth* temp = bluetooth_;
  bluetooth_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Bluetooth* GlobalSettingsProto::mutable_bluetooth() {
  _has_bits_[0] |= 0x00010000u;
  if (bluetooth_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Bluetooth>(GetArenaNoVirtual());
    bluetooth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.bluetooth)
  return bluetooth_;
}
inline void GlobalSettingsProto::set_allocated_bluetooth(::android::providers::settings::GlobalSettingsProto_Bluetooth* bluetooth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bluetooth_;
  }
  if (bluetooth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bluetooth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  bluetooth_ = bluetooth;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.bluetooth)
}

// optional .android.providers.settings.SettingProto boot_count = 22 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_boot_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::boot_count() const {
  const ::android::providers::settings::SettingProto* p = boot_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.boot_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_boot_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.boot_count)
  _has_bits_[0] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = boot_count_;
  boot_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_boot_count() {
  _has_bits_[0] |= 0x00020000u;
  if (boot_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    boot_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.boot_count)
  return boot_count_;
}
inline void GlobalSettingsProto::set_allocated_boot_count(::android::providers::settings::SettingProto* boot_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(boot_count_);
  }
  if (boot_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      boot_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boot_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  boot_count_ = boot_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.boot_count)
}

// optional .android.providers.settings.SettingProto bugreport_in_power_menu = 23 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_bugreport_in_power_menu() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::bugreport_in_power_menu() const {
  const ::android::providers::settings::SettingProto* p = bugreport_in_power_menu_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.bugreport_in_power_menu)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_bugreport_in_power_menu() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.bugreport_in_power_menu)
  _has_bits_[0] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = bugreport_in_power_menu_;
  bugreport_in_power_menu_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_bugreport_in_power_menu() {
  _has_bits_[0] |= 0x00040000u;
  if (bugreport_in_power_menu_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    bugreport_in_power_menu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.bugreport_in_power_menu)
  return bugreport_in_power_menu_;
}
inline void GlobalSettingsProto::set_allocated_bugreport_in_power_menu(::android::providers::settings::SettingProto* bugreport_in_power_menu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bugreport_in_power_menu_);
  }
  if (bugreport_in_power_menu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bugreport_in_power_menu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bugreport_in_power_menu, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  bugreport_in_power_menu_ = bugreport_in_power_menu;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.bugreport_in_power_menu)
}

// optional .android.providers.settings.SettingProto cached_apps_freezer_enabled = 152 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_cached_apps_freezer_enabled() const {
  return (_has_bits_[4] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::cached_apps_freezer_enabled() const {
  const ::android::providers::settings::SettingProto* p = cached_apps_freezer_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.cached_apps_freezer_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_cached_apps_freezer_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.cached_apps_freezer_enabled)
  _has_bits_[4] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = cached_apps_freezer_enabled_;
  cached_apps_freezer_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_cached_apps_freezer_enabled() {
  _has_bits_[4] |= 0x00002000u;
  if (cached_apps_freezer_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    cached_apps_freezer_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.cached_apps_freezer_enabled)
  return cached_apps_freezer_enabled_;
}
inline void GlobalSettingsProto::set_allocated_cached_apps_freezer_enabled(::android::providers::settings::SettingProto* cached_apps_freezer_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cached_apps_freezer_enabled_);
  }
  if (cached_apps_freezer_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cached_apps_freezer_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cached_apps_freezer_enabled, submessage_arena);
    }
    _has_bits_[4] |= 0x00002000u;
  } else {
    _has_bits_[4] &= ~0x00002000u;
  }
  cached_apps_freezer_enabled_ = cached_apps_freezer_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.cached_apps_freezer_enabled)
}

// optional .android.providers.settings.SettingProto call_auto_retry = 24 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_call_auto_retry() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::call_auto_retry() const {
  const ::android::providers::settings::SettingProto* p = call_auto_retry_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.call_auto_retry)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_call_auto_retry() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.call_auto_retry)
  _has_bits_[0] &= ~0x00080000u;
  ::android::providers::settings::SettingProto* temp = call_auto_retry_;
  call_auto_retry_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_call_auto_retry() {
  _has_bits_[0] |= 0x00080000u;
  if (call_auto_retry_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    call_auto_retry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.call_auto_retry)
  return call_auto_retry_;
}
inline void GlobalSettingsProto::set_allocated_call_auto_retry(::android::providers::settings::SettingProto* call_auto_retry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_auto_retry_);
  }
  if (call_auto_retry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      call_auto_retry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_auto_retry, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  call_auto_retry_ = call_auto_retry;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.call_auto_retry)
}

// optional .android.providers.settings.GlobalSettingsProto.CaptivePortal captive_portal = 25;
inline bool GlobalSettingsProto::has_captive_portal() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GlobalSettingsProto::clear_captive_portal() {
  if (captive_portal_ != nullptr) captive_portal_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_CaptivePortal& GlobalSettingsProto::captive_portal() const {
  const ::android::providers::settings::GlobalSettingsProto_CaptivePortal* p = captive_portal_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.captive_portal)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_CaptivePortal*>(
      &::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_CaptivePortal* GlobalSettingsProto::release_captive_portal() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.captive_portal)
  _has_bits_[0] &= ~0x00100000u;
  ::android::providers::settings::GlobalSettingsProto_CaptivePortal* temp = captive_portal_;
  captive_portal_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_CaptivePortal* GlobalSettingsProto::mutable_captive_portal() {
  _has_bits_[0] |= 0x00100000u;
  if (captive_portal_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_CaptivePortal>(GetArenaNoVirtual());
    captive_portal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.captive_portal)
  return captive_portal_;
}
inline void GlobalSettingsProto::set_allocated_captive_portal(::android::providers::settings::GlobalSettingsProto_CaptivePortal* captive_portal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete captive_portal_;
  }
  if (captive_portal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captive_portal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captive_portal, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  captive_portal_ = captive_portal;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.captive_portal)
}

// optional .android.providers.settings.GlobalSettingsProto.Carrier carrier = 26;
inline bool GlobalSettingsProto::has_carrier() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GlobalSettingsProto::clear_carrier() {
  if (carrier_ != nullptr) carrier_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Carrier& GlobalSettingsProto::carrier() const {
  const ::android::providers::settings::GlobalSettingsProto_Carrier* p = carrier_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.carrier)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Carrier*>(
      &::android::providers::settings::_GlobalSettingsProto_Carrier_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Carrier* GlobalSettingsProto::release_carrier() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.carrier)
  _has_bits_[0] &= ~0x00200000u;
  ::android::providers::settings::GlobalSettingsProto_Carrier* temp = carrier_;
  carrier_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Carrier* GlobalSettingsProto::mutable_carrier() {
  _has_bits_[0] |= 0x00200000u;
  if (carrier_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Carrier>(GetArenaNoVirtual());
    carrier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.carrier)
  return carrier_;
}
inline void GlobalSettingsProto::set_allocated_carrier(::android::providers::settings::GlobalSettingsProto_Carrier* carrier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete carrier_;
  }
  if (carrier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      carrier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carrier, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  carrier_ = carrier;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.carrier)
}

// optional .android.providers.settings.GlobalSettingsProto.Cdma cdma = 27;
inline bool GlobalSettingsProto::has_cdma() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GlobalSettingsProto::clear_cdma() {
  if (cdma_ != nullptr) cdma_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Cdma& GlobalSettingsProto::cdma() const {
  const ::android::providers::settings::GlobalSettingsProto_Cdma* p = cdma_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.cdma)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Cdma*>(
      &::android::providers::settings::_GlobalSettingsProto_Cdma_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Cdma* GlobalSettingsProto::release_cdma() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.cdma)
  _has_bits_[0] &= ~0x00400000u;
  ::android::providers::settings::GlobalSettingsProto_Cdma* temp = cdma_;
  cdma_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Cdma* GlobalSettingsProto::mutable_cdma() {
  _has_bits_[0] |= 0x00400000u;
  if (cdma_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Cdma>(GetArenaNoVirtual());
    cdma_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.cdma)
  return cdma_;
}
inline void GlobalSettingsProto::set_allocated_cdma(::android::providers::settings::GlobalSettingsProto_Cdma* cdma) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cdma_;
  }
  if (cdma) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdma = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdma, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  cdma_ = cdma;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.cdma)
}

// optional .android.providers.settings.SettingProto cell_on = 28 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_cell_on() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::cell_on() const {
  const ::android::providers::settings::SettingProto* p = cell_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.cell_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_cell_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.cell_on)
  _has_bits_[0] &= ~0x00800000u;
  ::android::providers::settings::SettingProto* temp = cell_on_;
  cell_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_cell_on() {
  _has_bits_[0] |= 0x00800000u;
  if (cell_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    cell_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.cell_on)
  return cell_on_;
}
inline void GlobalSettingsProto::set_allocated_cell_on(::android::providers::settings::SettingProto* cell_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_on_);
  }
  if (cell_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cell_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_on, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  cell_on_ = cell_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.cell_on)
}

// optional .android.providers.settings.GlobalSettingsProto.CertPin cert_pin = 29;
inline bool GlobalSettingsProto::has_cert_pin() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GlobalSettingsProto::clear_cert_pin() {
  if (cert_pin_ != nullptr) cert_pin_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_CertPin& GlobalSettingsProto::cert_pin() const {
  const ::android::providers::settings::GlobalSettingsProto_CertPin* p = cert_pin_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.cert_pin)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_CertPin*>(
      &::android::providers::settings::_GlobalSettingsProto_CertPin_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_CertPin* GlobalSettingsProto::release_cert_pin() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.cert_pin)
  _has_bits_[0] &= ~0x01000000u;
  ::android::providers::settings::GlobalSettingsProto_CertPin* temp = cert_pin_;
  cert_pin_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_CertPin* GlobalSettingsProto::mutable_cert_pin() {
  _has_bits_[0] |= 0x01000000u;
  if (cert_pin_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_CertPin>(GetArenaNoVirtual());
    cert_pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.cert_pin)
  return cert_pin_;
}
inline void GlobalSettingsProto::set_allocated_cert_pin(::android::providers::settings::GlobalSettingsProto_CertPin* cert_pin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cert_pin_;
  }
  if (cert_pin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cert_pin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cert_pin, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  cert_pin_ = cert_pin;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.cert_pin)
}

// optional .android.providers.settings.SettingProto chained_battery_attribution_enabled = 30 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_chained_battery_attribution_enabled() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::chained_battery_attribution_enabled() const {
  const ::android::providers::settings::SettingProto* p = chained_battery_attribution_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.chained_battery_attribution_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_chained_battery_attribution_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.chained_battery_attribution_enabled)
  _has_bits_[0] &= ~0x02000000u;
  ::android::providers::settings::SettingProto* temp = chained_battery_attribution_enabled_;
  chained_battery_attribution_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_chained_battery_attribution_enabled() {
  _has_bits_[0] |= 0x02000000u;
  if (chained_battery_attribution_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    chained_battery_attribution_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.chained_battery_attribution_enabled)
  return chained_battery_attribution_enabled_;
}
inline void GlobalSettingsProto::set_allocated_chained_battery_attribution_enabled(::android::providers::settings::SettingProto* chained_battery_attribution_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chained_battery_attribution_enabled_);
  }
  if (chained_battery_attribution_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chained_battery_attribution_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chained_battery_attribution_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  chained_battery_attribution_enabled_ = chained_battery_attribution_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.chained_battery_attribution_enabled)
}

// optional .android.providers.settings.SettingProto compatibility_mode = 31 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_compatibility_mode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::compatibility_mode() const {
  const ::android::providers::settings::SettingProto* p = compatibility_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.compatibility_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_compatibility_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.compatibility_mode)
  _has_bits_[0] &= ~0x04000000u;
  ::android::providers::settings::SettingProto* temp = compatibility_mode_;
  compatibility_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_compatibility_mode() {
  _has_bits_[0] |= 0x04000000u;
  if (compatibility_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    compatibility_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.compatibility_mode)
  return compatibility_mode_;
}
inline void GlobalSettingsProto::set_allocated_compatibility_mode(::android::providers::settings::SettingProto* compatibility_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(compatibility_mode_);
  }
  if (compatibility_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compatibility_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compatibility_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  compatibility_mode_ = compatibility_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.compatibility_mode)
}

// optional .android.providers.settings.GlobalSettingsProto.Connectivity connectivity = 32;
inline bool GlobalSettingsProto::has_connectivity() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void GlobalSettingsProto::clear_connectivity() {
  if (connectivity_ != nullptr) connectivity_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Connectivity& GlobalSettingsProto::connectivity() const {
  const ::android::providers::settings::GlobalSettingsProto_Connectivity* p = connectivity_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.connectivity)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Connectivity*>(
      &::android::providers::settings::_GlobalSettingsProto_Connectivity_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Connectivity* GlobalSettingsProto::release_connectivity() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.connectivity)
  _has_bits_[0] &= ~0x08000000u;
  ::android::providers::settings::GlobalSettingsProto_Connectivity* temp = connectivity_;
  connectivity_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Connectivity* GlobalSettingsProto::mutable_connectivity() {
  _has_bits_[0] |= 0x08000000u;
  if (connectivity_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Connectivity>(GetArenaNoVirtual());
    connectivity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.connectivity)
  return connectivity_;
}
inline void GlobalSettingsProto::set_allocated_connectivity(::android::providers::settings::GlobalSettingsProto_Connectivity* connectivity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connectivity_;
  }
  if (connectivity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connectivity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connectivity, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  connectivity_ = connectivity;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.connectivity)
}

// optional .android.providers.settings.SettingProto contact_metadata_sync_enabled = 33 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_contact_metadata_sync_enabled() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::contact_metadata_sync_enabled() const {
  const ::android::providers::settings::SettingProto* p = contact_metadata_sync_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.contact_metadata_sync_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_contact_metadata_sync_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.contact_metadata_sync_enabled)
  _has_bits_[0] &= ~0x10000000u;
  ::android::providers::settings::SettingProto* temp = contact_metadata_sync_enabled_;
  contact_metadata_sync_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_contact_metadata_sync_enabled() {
  _has_bits_[0] |= 0x10000000u;
  if (contact_metadata_sync_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    contact_metadata_sync_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.contact_metadata_sync_enabled)
  return contact_metadata_sync_enabled_;
}
inline void GlobalSettingsProto::set_allocated_contact_metadata_sync_enabled(::android::providers::settings::SettingProto* contact_metadata_sync_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact_metadata_sync_enabled_);
  }
  if (contact_metadata_sync_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contact_metadata_sync_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contact_metadata_sync_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  contact_metadata_sync_enabled_ = contact_metadata_sync_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.contact_metadata_sync_enabled)
}

// optional .android.providers.settings.SettingProto contacts_database_wal_enabled = 34 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_contacts_database_wal_enabled() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::contacts_database_wal_enabled() const {
  const ::android::providers::settings::SettingProto* p = contacts_database_wal_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.contacts_database_wal_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_contacts_database_wal_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.contacts_database_wal_enabled)
  _has_bits_[0] &= ~0x20000000u;
  ::android::providers::settings::SettingProto* temp = contacts_database_wal_enabled_;
  contacts_database_wal_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_contacts_database_wal_enabled() {
  _has_bits_[0] |= 0x20000000u;
  if (contacts_database_wal_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    contacts_database_wal_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.contacts_database_wal_enabled)
  return contacts_database_wal_enabled_;
}
inline void GlobalSettingsProto::set_allocated_contacts_database_wal_enabled(::android::providers::settings::SettingProto* contacts_database_wal_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contacts_database_wal_enabled_);
  }
  if (contacts_database_wal_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contacts_database_wal_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contacts_database_wal_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  contacts_database_wal_enabled_ = contacts_database_wal_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.contacts_database_wal_enabled)
}

// optional .android.providers.settings.GlobalSettingsProto.Data data = 35;
inline bool GlobalSettingsProto::has_data() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void GlobalSettingsProto::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Data& GlobalSettingsProto::data() const {
  const ::android::providers::settings::GlobalSettingsProto_Data* p = data_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Data*>(
      &::android::providers::settings::_GlobalSettingsProto_Data_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Data* GlobalSettingsProto::release_data() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.data)
  _has_bits_[0] &= ~0x40000000u;
  ::android::providers::settings::GlobalSettingsProto_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Data* GlobalSettingsProto::mutable_data() {
  _has_bits_[0] |= 0x40000000u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Data>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.data)
  return data_;
}
inline void GlobalSettingsProto::set_allocated_data(::android::providers::settings::GlobalSettingsProto_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.data)
}

// optional .android.providers.settings.GlobalSettingsProto.Database database = 36;
inline bool GlobalSettingsProto::has_database() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void GlobalSettingsProto::clear_database() {
  if (database_ != nullptr) database_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Database& GlobalSettingsProto::database() const {
  const ::android::providers::settings::GlobalSettingsProto_Database* p = database_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.database)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Database*>(
      &::android::providers::settings::_GlobalSettingsProto_Database_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Database* GlobalSettingsProto::release_database() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.database)
  _has_bits_[0] &= ~0x80000000u;
  ::android::providers::settings::GlobalSettingsProto_Database* temp = database_;
  database_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Database* GlobalSettingsProto::mutable_database() {
  _has_bits_[0] |= 0x80000000u;
  if (database_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Database>(GetArenaNoVirtual());
    database_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.database)
  return database_;
}
inline void GlobalSettingsProto::set_allocated_database(::android::providers::settings::GlobalSettingsProto_Database* database) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete database_;
  }
  if (database) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      database = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, database, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  database_ = database;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.database)
}

// optional .android.providers.settings.GlobalSettingsProto.DateTime date_time = 16;
inline bool GlobalSettingsProto::has_date_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GlobalSettingsProto::clear_date_time() {
  if (date_time_ != nullptr) date_time_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_DateTime& GlobalSettingsProto::date_time() const {
  const ::android::providers::settings::GlobalSettingsProto_DateTime* p = date_time_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.date_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_DateTime*>(
      &::android::providers::settings::_GlobalSettingsProto_DateTime_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_DateTime* GlobalSettingsProto::release_date_time() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.date_time)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::GlobalSettingsProto_DateTime* temp = date_time_;
  date_time_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_DateTime* GlobalSettingsProto::mutable_date_time() {
  _has_bits_[0] |= 0x00002000u;
  if (date_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_DateTime>(GetArenaNoVirtual());
    date_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.date_time)
  return date_time_;
}
inline void GlobalSettingsProto::set_allocated_date_time(::android::providers::settings::GlobalSettingsProto_DateTime* date_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete date_time_;
  }
  if (date_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      date_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  date_time_ = date_time;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.date_time)
}

// optional .android.providers.settings.GlobalSettingsProto.Debug debug = 37;
inline bool GlobalSettingsProto::has_debug() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void GlobalSettingsProto::clear_debug() {
  if (debug_ != nullptr) debug_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Debug& GlobalSettingsProto::debug() const {
  const ::android::providers::settings::GlobalSettingsProto_Debug* p = debug_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.debug)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Debug*>(
      &::android::providers::settings::_GlobalSettingsProto_Debug_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Debug* GlobalSettingsProto::release_debug() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.debug)
  _has_bits_[1] &= ~0x00000001u;
  ::android::providers::settings::GlobalSettingsProto_Debug* temp = debug_;
  debug_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Debug* GlobalSettingsProto::mutable_debug() {
  _has_bits_[1] |= 0x00000001u;
  if (debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Debug>(GetArenaNoVirtual());
    debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.debug)
  return debug_;
}
inline void GlobalSettingsProto::set_allocated_debug(::android::providers::settings::GlobalSettingsProto_Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.debug)
}

// optional .android.providers.settings.GlobalSettingsProto.Default default = 38;
inline bool GlobalSettingsProto::has_default_() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void GlobalSettingsProto::clear_default_() {
  if (default__ != nullptr) default__->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Default& GlobalSettingsProto::default_() const {
  const ::android::providers::settings::GlobalSettingsProto_Default* p = default__;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.default)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Default*>(
      &::android::providers::settings::_GlobalSettingsProto_Default_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Default* GlobalSettingsProto::release_default_() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.default)
  _has_bits_[1] &= ~0x00000002u;
  ::android::providers::settings::GlobalSettingsProto_Default* temp = default__;
  default__ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Default* GlobalSettingsProto::mutable_default_() {
  _has_bits_[1] |= 0x00000002u;
  if (default__ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Default>(GetArenaNoVirtual());
    default__ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.default)
  return default__;
}
inline void GlobalSettingsProto::set_allocated_default_(::android::providers::settings::GlobalSettingsProto_Default* default_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default__;
  }
  if (default_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  default__ = default_;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.default)
}

// optional .android.providers.settings.GlobalSettingsProto.Development development = 39;
inline bool GlobalSettingsProto::has_development() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void GlobalSettingsProto::clear_development() {
  if (development_ != nullptr) development_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Development& GlobalSettingsProto::development() const {
  const ::android::providers::settings::GlobalSettingsProto_Development* p = development_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.development)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Development*>(
      &::android::providers::settings::_GlobalSettingsProto_Development_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Development* GlobalSettingsProto::release_development() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.development)
  _has_bits_[1] &= ~0x00000004u;
  ::android::providers::settings::GlobalSettingsProto_Development* temp = development_;
  development_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Development* GlobalSettingsProto::mutable_development() {
  _has_bits_[1] |= 0x00000004u;
  if (development_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Development>(GetArenaNoVirtual());
    development_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.development)
  return development_;
}
inline void GlobalSettingsProto::set_allocated_development(::android::providers::settings::GlobalSettingsProto_Development* development) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete development_;
  }
  if (development) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      development = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, development, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  development_ = development;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.development)
}

// optional .android.providers.settings.GlobalSettingsProto.Device device = 40;
inline bool GlobalSettingsProto::has_device() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void GlobalSettingsProto::clear_device() {
  if (device_ != nullptr) device_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Device& GlobalSettingsProto::device() const {
  const ::android::providers::settings::GlobalSettingsProto_Device* p = device_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.device)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Device*>(
      &::android::providers::settings::_GlobalSettingsProto_Device_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Device* GlobalSettingsProto::release_device() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.device)
  _has_bits_[1] &= ~0x00000008u;
  ::android::providers::settings::GlobalSettingsProto_Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Device* GlobalSettingsProto::mutable_device() {
  _has_bits_[1] |= 0x00000008u;
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Device>(GetArenaNoVirtual());
    device_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.device)
  return device_;
}
inline void GlobalSettingsProto::set_allocated_device(::android::providers::settings::GlobalSettingsProto_Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.device)
}

// optional .android.providers.settings.SettingProto disk_free_change_reporting_threshold = 41 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_disk_free_change_reporting_threshold() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::disk_free_change_reporting_threshold() const {
  const ::android::providers::settings::SettingProto* p = disk_free_change_reporting_threshold_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.disk_free_change_reporting_threshold)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_disk_free_change_reporting_threshold() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.disk_free_change_reporting_threshold)
  _has_bits_[1] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = disk_free_change_reporting_threshold_;
  disk_free_change_reporting_threshold_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_disk_free_change_reporting_threshold() {
  _has_bits_[1] |= 0x00000010u;
  if (disk_free_change_reporting_threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    disk_free_change_reporting_threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.disk_free_change_reporting_threshold)
  return disk_free_change_reporting_threshold_;
}
inline void GlobalSettingsProto::set_allocated_disk_free_change_reporting_threshold(::android::providers::settings::SettingProto* disk_free_change_reporting_threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disk_free_change_reporting_threshold_);
  }
  if (disk_free_change_reporting_threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disk_free_change_reporting_threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disk_free_change_reporting_threshold, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  disk_free_change_reporting_threshold_ = disk_free_change_reporting_threshold;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.disk_free_change_reporting_threshold)
}

// optional .android.providers.settings.GlobalSettingsProto.Display display = 42;
inline bool GlobalSettingsProto::has_display() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void GlobalSettingsProto::clear_display() {
  if (display_ != nullptr) display_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Display& GlobalSettingsProto::display() const {
  const ::android::providers::settings::GlobalSettingsProto_Display* p = display_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.display)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Display*>(
      &::android::providers::settings::_GlobalSettingsProto_Display_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Display* GlobalSettingsProto::release_display() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.display)
  _has_bits_[1] &= ~0x00000020u;
  ::android::providers::settings::GlobalSettingsProto_Display* temp = display_;
  display_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Display* GlobalSettingsProto::mutable_display() {
  _has_bits_[1] |= 0x00000020u;
  if (display_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Display>(GetArenaNoVirtual());
    display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.display)
  return display_;
}
inline void GlobalSettingsProto::set_allocated_display(::android::providers::settings::GlobalSettingsProto_Display* display) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete display_;
  }
  if (display) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  display_ = display;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.display)
}

// optional .android.providers.settings.GlobalSettingsProto.DnsResolver dns_resolver = 43;
inline bool GlobalSettingsProto::has_dns_resolver() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void GlobalSettingsProto::clear_dns_resolver() {
  if (dns_resolver_ != nullptr) dns_resolver_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::android::providers::settings::GlobalSettingsProto_DnsResolver& GlobalSettingsProto::dns_resolver() const {
  const ::android::providers::settings::GlobalSettingsProto_DnsResolver* p = dns_resolver_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.dns_resolver)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_DnsResolver*>(
      &::android::providers::settings::_GlobalSettingsProto_DnsResolver_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_DnsResolver* GlobalSettingsProto::release_dns_resolver() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.dns_resolver)
  _has_bits_[1] &= ~0x00000040u;
  ::android::providers::settings::GlobalSettingsProto_DnsResolver* temp = dns_resolver_;
  dns_resolver_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_DnsResolver* GlobalSettingsProto::mutable_dns_resolver() {
  _has_bits_[1] |= 0x00000040u;
  if (dns_resolver_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_DnsResolver>(GetArenaNoVirtual());
    dns_resolver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.dns_resolver)
  return dns_resolver_;
}
inline void GlobalSettingsProto::set_allocated_dns_resolver(::android::providers::settings::GlobalSettingsProto_DnsResolver* dns_resolver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dns_resolver_;
  }
  if (dns_resolver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dns_resolver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_resolver, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  dns_resolver_ = dns_resolver;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.dns_resolver)
}

// optional .android.providers.settings.SettingProto dock_audio_media_enabled = 44 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_dock_audio_media_enabled() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::dock_audio_media_enabled() const {
  const ::android::providers::settings::SettingProto* p = dock_audio_media_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.dock_audio_media_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_dock_audio_media_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.dock_audio_media_enabled)
  _has_bits_[1] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = dock_audio_media_enabled_;
  dock_audio_media_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_dock_audio_media_enabled() {
  _has_bits_[1] |= 0x00000080u;
  if (dock_audio_media_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dock_audio_media_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.dock_audio_media_enabled)
  return dock_audio_media_enabled_;
}
inline void GlobalSettingsProto::set_allocated_dock_audio_media_enabled(::android::providers::settings::SettingProto* dock_audio_media_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dock_audio_media_enabled_);
  }
  if (dock_audio_media_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dock_audio_media_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dock_audio_media_enabled, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  dock_audio_media_enabled_ = dock_audio_media_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.dock_audio_media_enabled)
}

// optional .android.providers.settings.GlobalSettingsProto.Download download = 45;
inline bool GlobalSettingsProto::has_download() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void GlobalSettingsProto::clear_download() {
  if (download_ != nullptr) download_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Download& GlobalSettingsProto::download() const {
  const ::android::providers::settings::GlobalSettingsProto_Download* p = download_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.download)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Download*>(
      &::android::providers::settings::_GlobalSettingsProto_Download_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Download* GlobalSettingsProto::release_download() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.download)
  _has_bits_[1] &= ~0x00000100u;
  ::android::providers::settings::GlobalSettingsProto_Download* temp = download_;
  download_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Download* GlobalSettingsProto::mutable_download() {
  _has_bits_[1] |= 0x00000100u;
  if (download_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Download>(GetArenaNoVirtual());
    download_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.download)
  return download_;
}
inline void GlobalSettingsProto::set_allocated_download(::android::providers::settings::GlobalSettingsProto_Download* download) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete download_;
  }
  if (download) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      download = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, download, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  download_ = download;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.download)
}

// optional .android.providers.settings.GlobalSettingsProto.Dropbox dropbox = 46;
inline bool GlobalSettingsProto::has_dropbox() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void GlobalSettingsProto::clear_dropbox() {
  if (dropbox_ != nullptr) dropbox_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Dropbox& GlobalSettingsProto::dropbox() const {
  const ::android::providers::settings::GlobalSettingsProto_Dropbox* p = dropbox_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.dropbox)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Dropbox*>(
      &::android::providers::settings::_GlobalSettingsProto_Dropbox_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Dropbox* GlobalSettingsProto::release_dropbox() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.dropbox)
  _has_bits_[1] &= ~0x00000200u;
  ::android::providers::settings::GlobalSettingsProto_Dropbox* temp = dropbox_;
  dropbox_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Dropbox* GlobalSettingsProto::mutable_dropbox() {
  _has_bits_[1] |= 0x00000200u;
  if (dropbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Dropbox>(GetArenaNoVirtual());
    dropbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.dropbox)
  return dropbox_;
}
inline void GlobalSettingsProto::set_allocated_dropbox(::android::providers::settings::GlobalSettingsProto_Dropbox* dropbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dropbox_;
  }
  if (dropbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dropbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dropbox, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  dropbox_ = dropbox;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.dropbox)
}

// optional .android.providers.settings.GlobalSettingsProto.DynamicPowerSavings dynamic_power_savings = 143;
inline bool GlobalSettingsProto::has_dynamic_power_savings() const {
  return (_has_bits_[4] & 0x00000080u) != 0;
}
inline void GlobalSettingsProto::clear_dynamic_power_savings() {
  if (dynamic_power_savings_ != nullptr) dynamic_power_savings_->Clear();
  _has_bits_[4] &= ~0x00000080u;
}
inline const ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings& GlobalSettingsProto::dynamic_power_savings() const {
  const ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* p = dynamic_power_savings_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.dynamic_power_savings)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings*>(
      &::android::providers::settings::_GlobalSettingsProto_DynamicPowerSavings_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* GlobalSettingsProto::release_dynamic_power_savings() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.dynamic_power_savings)
  _has_bits_[4] &= ~0x00000080u;
  ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* temp = dynamic_power_savings_;
  dynamic_power_savings_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* GlobalSettingsProto::mutable_dynamic_power_savings() {
  _has_bits_[4] |= 0x00000080u;
  if (dynamic_power_savings_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings>(GetArenaNoVirtual());
    dynamic_power_savings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.dynamic_power_savings)
  return dynamic_power_savings_;
}
inline void GlobalSettingsProto::set_allocated_dynamic_power_savings(::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* dynamic_power_savings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dynamic_power_savings_;
  }
  if (dynamic_power_savings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamic_power_savings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_power_savings, submessage_arena);
    }
    _has_bits_[4] |= 0x00000080u;
  } else {
    _has_bits_[4] &= ~0x00000080u;
  }
  dynamic_power_savings_ = dynamic_power_savings;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.dynamic_power_savings)
}

// optional .android.providers.settings.GlobalSettingsProto.Emergency emergency = 47;
inline bool GlobalSettingsProto::has_emergency() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void GlobalSettingsProto::clear_emergency() {
  if (emergency_ != nullptr) emergency_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Emergency& GlobalSettingsProto::emergency() const {
  const ::android::providers::settings::GlobalSettingsProto_Emergency* p = emergency_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.emergency)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Emergency*>(
      &::android::providers::settings::_GlobalSettingsProto_Emergency_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Emergency* GlobalSettingsProto::release_emergency() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.emergency)
  _has_bits_[1] &= ~0x00000400u;
  ::android::providers::settings::GlobalSettingsProto_Emergency* temp = emergency_;
  emergency_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Emergency* GlobalSettingsProto::mutable_emergency() {
  _has_bits_[1] |= 0x00000400u;
  if (emergency_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Emergency>(GetArenaNoVirtual());
    emergency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.emergency)
  return emergency_;
}
inline void GlobalSettingsProto::set_allocated_emergency(::android::providers::settings::GlobalSettingsProto_Emergency* emergency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete emergency_;
  }
  if (emergency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emergency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  emergency_ = emergency;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.emergency)
}

// optional .android.providers.settings.GlobalSettingsProto.Enable enable = 48;
inline bool GlobalSettingsProto::has_enable() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void GlobalSettingsProto::clear_enable() {
  if (enable_ != nullptr) enable_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Enable& GlobalSettingsProto::enable() const {
  const ::android::providers::settings::GlobalSettingsProto_Enable* p = enable_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.enable)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Enable*>(
      &::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Enable* GlobalSettingsProto::release_enable() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.enable)
  _has_bits_[1] &= ~0x00000800u;
  ::android::providers::settings::GlobalSettingsProto_Enable* temp = enable_;
  enable_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Enable* GlobalSettingsProto::mutable_enable() {
  _has_bits_[1] |= 0x00000800u;
  if (enable_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Enable>(GetArenaNoVirtual());
    enable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.enable)
  return enable_;
}
inline void GlobalSettingsProto::set_allocated_enable(::android::providers::settings::GlobalSettingsProto_Enable* enable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete enable_;
  }
  if (enable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enable, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  enable_ = enable;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.enable)
}

// optional .android.providers.settings.SettingProto encoded_surround_output = 49 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_encoded_surround_output() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::encoded_surround_output() const {
  const ::android::providers::settings::SettingProto* p = encoded_surround_output_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.encoded_surround_output)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_encoded_surround_output() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.encoded_surround_output)
  _has_bits_[1] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = encoded_surround_output_;
  encoded_surround_output_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_encoded_surround_output() {
  _has_bits_[1] |= 0x00001000u;
  if (encoded_surround_output_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    encoded_surround_output_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.encoded_surround_output)
  return encoded_surround_output_;
}
inline void GlobalSettingsProto::set_allocated_encoded_surround_output(::android::providers::settings::SettingProto* encoded_surround_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encoded_surround_output_);
  }
  if (encoded_surround_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encoded_surround_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encoded_surround_output, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  encoded_surround_output_ = encoded_surround_output;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.encoded_surround_output)
}

// optional .android.providers.settings.SettingProto enhanced_4g_mode_enabled = 50 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_enhanced_4g_mode_enabled() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::enhanced_4g_mode_enabled() const {
  const ::android::providers::settings::SettingProto* p = enhanced_4g_mode_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.enhanced_4g_mode_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_enhanced_4g_mode_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.enhanced_4g_mode_enabled)
  _has_bits_[1] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = enhanced_4g_mode_enabled_;
  enhanced_4g_mode_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_enhanced_4g_mode_enabled() {
  _has_bits_[1] |= 0x00002000u;
  if (enhanced_4g_mode_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enhanced_4g_mode_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.enhanced_4g_mode_enabled)
  return enhanced_4g_mode_enabled_;
}
inline void GlobalSettingsProto::set_allocated_enhanced_4g_mode_enabled(::android::providers::settings::SettingProto* enhanced_4g_mode_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhanced_4g_mode_enabled_);
  }
  if (enhanced_4g_mode_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enhanced_4g_mode_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enhanced_4g_mode_enabled, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  enhanced_4g_mode_enabled_ = enhanced_4g_mode_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.enhanced_4g_mode_enabled)
}

// repeated .android.providers.settings.SettingProto error_logcat_lines = 51;
inline int GlobalSettingsProto::error_logcat_lines_size() const {
  return error_logcat_lines_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_error_logcat_lines(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.error_logcat_lines)
  return error_logcat_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto::mutable_error_logcat_lines() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.error_logcat_lines)
  return &error_logcat_lines_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::error_logcat_lines(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.error_logcat_lines)
  return error_logcat_lines_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::add_error_logcat_lines() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.error_logcat_lines)
  return error_logcat_lines_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto::error_logcat_lines() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.error_logcat_lines)
  return error_logcat_lines_;
}

// optional .android.providers.settings.GlobalSettingsProto.Euicc euicc = 52;
inline bool GlobalSettingsProto::has_euicc() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void GlobalSettingsProto::clear_euicc() {
  if (euicc_ != nullptr) euicc_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Euicc& GlobalSettingsProto::euicc() const {
  const ::android::providers::settings::GlobalSettingsProto_Euicc* p = euicc_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.euicc)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Euicc*>(
      &::android::providers::settings::_GlobalSettingsProto_Euicc_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Euicc* GlobalSettingsProto::release_euicc() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.euicc)
  _has_bits_[1] &= ~0x00004000u;
  ::android::providers::settings::GlobalSettingsProto_Euicc* temp = euicc_;
  euicc_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Euicc* GlobalSettingsProto::mutable_euicc() {
  _has_bits_[1] |= 0x00004000u;
  if (euicc_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Euicc>(GetArenaNoVirtual());
    euicc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.euicc)
  return euicc_;
}
inline void GlobalSettingsProto::set_allocated_euicc(::android::providers::settings::GlobalSettingsProto_Euicc* euicc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete euicc_;
  }
  if (euicc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      euicc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euicc, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  euicc_ = euicc;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.euicc)
}

// optional .android.providers.settings.SettingProto fancy_ime_animations = 53 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_fancy_ime_animations() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::fancy_ime_animations() const {
  const ::android::providers::settings::SettingProto* p = fancy_ime_animations_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.fancy_ime_animations)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_fancy_ime_animations() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.fancy_ime_animations)
  _has_bits_[1] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = fancy_ime_animations_;
  fancy_ime_animations_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_fancy_ime_animations() {
  _has_bits_[1] |= 0x00008000u;
  if (fancy_ime_animations_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    fancy_ime_animations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.fancy_ime_animations)
  return fancy_ime_animations_;
}
inline void GlobalSettingsProto::set_allocated_fancy_ime_animations(::android::providers::settings::SettingProto* fancy_ime_animations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fancy_ime_animations_);
  }
  if (fancy_ime_animations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fancy_ime_animations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fancy_ime_animations, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  fancy_ime_animations_ = fancy_ime_animations;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.fancy_ime_animations)
}

// optional .android.providers.settings.SettingProto force_allow_on_external = 54 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_force_allow_on_external() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::force_allow_on_external() const {
  const ::android::providers::settings::SettingProto* p = force_allow_on_external_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.force_allow_on_external)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_force_allow_on_external() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.force_allow_on_external)
  _has_bits_[1] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = force_allow_on_external_;
  force_allow_on_external_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_force_allow_on_external() {
  _has_bits_[1] |= 0x00010000u;
  if (force_allow_on_external_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    force_allow_on_external_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.force_allow_on_external)
  return force_allow_on_external_;
}
inline void GlobalSettingsProto::set_allocated_force_allow_on_external(::android::providers::settings::SettingProto* force_allow_on_external) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_allow_on_external_);
  }
  if (force_allow_on_external) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      force_allow_on_external = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force_allow_on_external, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  force_allow_on_external_ = force_allow_on_external;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.force_allow_on_external)
}

// optional .android.providers.settings.SettingProto fps_divisor = 55 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_fps_divisor() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::fps_divisor() const {
  const ::android::providers::settings::SettingProto* p = fps_divisor_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.fps_divisor)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_fps_divisor() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.fps_divisor)
  _has_bits_[1] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = fps_divisor_;
  fps_divisor_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_fps_divisor() {
  _has_bits_[1] |= 0x00020000u;
  if (fps_divisor_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    fps_divisor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.fps_divisor)
  return fps_divisor_;
}
inline void GlobalSettingsProto::set_allocated_fps_divisor(::android::providers::settings::SettingProto* fps_divisor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fps_divisor_);
  }
  if (fps_divisor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fps_divisor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fps_divisor, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  fps_divisor_ = fps_divisor;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.fps_divisor)
}

// optional .android.providers.settings.SettingProto fstrim_mandatory_interval = 56 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_fstrim_mandatory_interval() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::fstrim_mandatory_interval() const {
  const ::android::providers::settings::SettingProto* p = fstrim_mandatory_interval_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.fstrim_mandatory_interval)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_fstrim_mandatory_interval() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.fstrim_mandatory_interval)
  _has_bits_[1] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = fstrim_mandatory_interval_;
  fstrim_mandatory_interval_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_fstrim_mandatory_interval() {
  _has_bits_[1] |= 0x00040000u;
  if (fstrim_mandatory_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    fstrim_mandatory_interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.fstrim_mandatory_interval)
  return fstrim_mandatory_interval_;
}
inline void GlobalSettingsProto::set_allocated_fstrim_mandatory_interval(::android::providers::settings::SettingProto* fstrim_mandatory_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fstrim_mandatory_interval_);
  }
  if (fstrim_mandatory_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fstrim_mandatory_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fstrim_mandatory_interval, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  fstrim_mandatory_interval_ = fstrim_mandatory_interval;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.fstrim_mandatory_interval)
}

// optional .android.providers.settings.GlobalSettingsProto.GlobalHttpProxy global_http_proxy = 57;
inline bool GlobalSettingsProto::has_global_http_proxy() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void GlobalSettingsProto::clear_global_http_proxy() {
  if (global_http_proxy_ != nullptr) global_http_proxy_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy& GlobalSettingsProto::global_http_proxy() const {
  const ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* p = global_http_proxy_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.global_http_proxy)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy*>(
      &::android::providers::settings::_GlobalSettingsProto_GlobalHttpProxy_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* GlobalSettingsProto::release_global_http_proxy() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.global_http_proxy)
  _has_bits_[1] &= ~0x00080000u;
  ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* temp = global_http_proxy_;
  global_http_proxy_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* GlobalSettingsProto::mutable_global_http_proxy() {
  _has_bits_[1] |= 0x00080000u;
  if (global_http_proxy_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy>(GetArenaNoVirtual());
    global_http_proxy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.global_http_proxy)
  return global_http_proxy_;
}
inline void GlobalSettingsProto::set_allocated_global_http_proxy(::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* global_http_proxy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_http_proxy_;
  }
  if (global_http_proxy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_http_proxy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_http_proxy, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  global_http_proxy_ = global_http_proxy;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.global_http_proxy)
}

// optional .android.providers.settings.SettingProto gprs_register_check_period_ms = 58 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_gprs_register_check_period_ms() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::gprs_register_check_period_ms() const {
  const ::android::providers::settings::SettingProto* p = gprs_register_check_period_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.gprs_register_check_period_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_gprs_register_check_period_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.gprs_register_check_period_ms)
  _has_bits_[1] &= ~0x00100000u;
  ::android::providers::settings::SettingProto* temp = gprs_register_check_period_ms_;
  gprs_register_check_period_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_gprs_register_check_period_ms() {
  _has_bits_[1] |= 0x00100000u;
  if (gprs_register_check_period_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gprs_register_check_period_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.gprs_register_check_period_ms)
  return gprs_register_check_period_ms_;
}
inline void GlobalSettingsProto::set_allocated_gprs_register_check_period_ms(::android::providers::settings::SettingProto* gprs_register_check_period_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gprs_register_check_period_ms_);
  }
  if (gprs_register_check_period_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gprs_register_check_period_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gprs_register_check_period_ms, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  gprs_register_check_period_ms_ = gprs_register_check_period_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.gprs_register_check_period_ms)
}

// optional .android.providers.settings.GlobalSettingsProto.Gpu gpu = 59;
inline bool GlobalSettingsProto::has_gpu() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void GlobalSettingsProto::clear_gpu() {
  if (gpu_ != nullptr) gpu_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Gpu& GlobalSettingsProto::gpu() const {
  const ::android::providers::settings::GlobalSettingsProto_Gpu* p = gpu_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.gpu)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Gpu*>(
      &::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Gpu* GlobalSettingsProto::release_gpu() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.gpu)
  _has_bits_[1] &= ~0x00200000u;
  ::android::providers::settings::GlobalSettingsProto_Gpu* temp = gpu_;
  gpu_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Gpu* GlobalSettingsProto::mutable_gpu() {
  _has_bits_[1] |= 0x00200000u;
  if (gpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Gpu>(GetArenaNoVirtual());
    gpu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.gpu)
  return gpu_;
}
inline void GlobalSettingsProto::set_allocated_gpu(::android::providers::settings::GlobalSettingsProto_Gpu* gpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gpu_;
  }
  if (gpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  gpu_ = gpu;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.gpu)
}

// optional .android.providers.settings.GlobalSettingsProto.Hdmi hdmi = 60;
inline bool GlobalSettingsProto::has_hdmi() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void GlobalSettingsProto::clear_hdmi() {
  if (hdmi_ != nullptr) hdmi_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Hdmi& GlobalSettingsProto::hdmi() const {
  const ::android::providers::settings::GlobalSettingsProto_Hdmi* p = hdmi_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.hdmi)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Hdmi*>(
      &::android::providers::settings::_GlobalSettingsProto_Hdmi_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Hdmi* GlobalSettingsProto::release_hdmi() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.hdmi)
  _has_bits_[1] &= ~0x00400000u;
  ::android::providers::settings::GlobalSettingsProto_Hdmi* temp = hdmi_;
  hdmi_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Hdmi* GlobalSettingsProto::mutable_hdmi() {
  _has_bits_[1] |= 0x00400000u;
  if (hdmi_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Hdmi>(GetArenaNoVirtual());
    hdmi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.hdmi)
  return hdmi_;
}
inline void GlobalSettingsProto::set_allocated_hdmi(::android::providers::settings::GlobalSettingsProto_Hdmi* hdmi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdmi_;
  }
  if (hdmi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdmi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdmi, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  hdmi_ = hdmi;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.hdmi)
}

// optional .android.providers.settings.SettingProto heads_up_notifications_enabled = 61 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_heads_up_notifications_enabled() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::heads_up_notifications_enabled() const {
  const ::android::providers::settings::SettingProto* p = heads_up_notifications_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.heads_up_notifications_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_heads_up_notifications_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.heads_up_notifications_enabled)
  _has_bits_[1] &= ~0x00800000u;
  ::android::providers::settings::SettingProto* temp = heads_up_notifications_enabled_;
  heads_up_notifications_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_heads_up_notifications_enabled() {
  _has_bits_[1] |= 0x00800000u;
  if (heads_up_notifications_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    heads_up_notifications_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.heads_up_notifications_enabled)
  return heads_up_notifications_enabled_;
}
inline void GlobalSettingsProto::set_allocated_heads_up_notifications_enabled(::android::providers::settings::SettingProto* heads_up_notifications_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heads_up_notifications_enabled_);
  }
  if (heads_up_notifications_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heads_up_notifications_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heads_up_notifications_enabled, submessage_arena);
    }
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  heads_up_notifications_enabled_ = heads_up_notifications_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.heads_up_notifications_enabled)
}

// optional .android.providers.settings.SettingProto hidden_api_blacklist_exemptions = 62 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_hidden_api_blacklist_exemptions() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::hidden_api_blacklist_exemptions() const {
  const ::android::providers::settings::SettingProto* p = hidden_api_blacklist_exemptions_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.hidden_api_blacklist_exemptions)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_hidden_api_blacklist_exemptions() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.hidden_api_blacklist_exemptions)
  _has_bits_[1] &= ~0x01000000u;
  ::android::providers::settings::SettingProto* temp = hidden_api_blacklist_exemptions_;
  hidden_api_blacklist_exemptions_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_hidden_api_blacklist_exemptions() {
  _has_bits_[1] |= 0x01000000u;
  if (hidden_api_blacklist_exemptions_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    hidden_api_blacklist_exemptions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.hidden_api_blacklist_exemptions)
  return hidden_api_blacklist_exemptions_;
}
inline void GlobalSettingsProto::set_allocated_hidden_api_blacklist_exemptions(::android::providers::settings::SettingProto* hidden_api_blacklist_exemptions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hidden_api_blacklist_exemptions_);
  }
  if (hidden_api_blacklist_exemptions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hidden_api_blacklist_exemptions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_api_blacklist_exemptions, submessage_arena);
    }
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  hidden_api_blacklist_exemptions_ = hidden_api_blacklist_exemptions;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.hidden_api_blacklist_exemptions)
}

// optional .android.providers.settings.GlobalSettingsProto.InetCondition inet_condition = 63;
inline bool GlobalSettingsProto::has_inet_condition() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void GlobalSettingsProto::clear_inet_condition() {
  if (inet_condition_ != nullptr) inet_condition_->Clear();
  _has_bits_[1] &= ~0x02000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_InetCondition& GlobalSettingsProto::inet_condition() const {
  const ::android::providers::settings::GlobalSettingsProto_InetCondition* p = inet_condition_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.inet_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_InetCondition*>(
      &::android::providers::settings::_GlobalSettingsProto_InetCondition_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_InetCondition* GlobalSettingsProto::release_inet_condition() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.inet_condition)
  _has_bits_[1] &= ~0x02000000u;
  ::android::providers::settings::GlobalSettingsProto_InetCondition* temp = inet_condition_;
  inet_condition_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_InetCondition* GlobalSettingsProto::mutable_inet_condition() {
  _has_bits_[1] |= 0x02000000u;
  if (inet_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_InetCondition>(GetArenaNoVirtual());
    inet_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.inet_condition)
  return inet_condition_;
}
inline void GlobalSettingsProto::set_allocated_inet_condition(::android::providers::settings::GlobalSettingsProto_InetCondition* inet_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inet_condition_;
  }
  if (inet_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inet_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inet_condition, submessage_arena);
    }
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  inet_condition_ = inet_condition;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.inet_condition)
}

// optional .android.providers.settings.GlobalSettingsProto.InstantApp instant_app = 64;
inline bool GlobalSettingsProto::has_instant_app() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void GlobalSettingsProto::clear_instant_app() {
  if (instant_app_ != nullptr) instant_app_->Clear();
  _has_bits_[1] &= ~0x04000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_InstantApp& GlobalSettingsProto::instant_app() const {
  const ::android::providers::settings::GlobalSettingsProto_InstantApp* p = instant_app_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.instant_app)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_InstantApp*>(
      &::android::providers::settings::_GlobalSettingsProto_InstantApp_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_InstantApp* GlobalSettingsProto::release_instant_app() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.instant_app)
  _has_bits_[1] &= ~0x04000000u;
  ::android::providers::settings::GlobalSettingsProto_InstantApp* temp = instant_app_;
  instant_app_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_InstantApp* GlobalSettingsProto::mutable_instant_app() {
  _has_bits_[1] |= 0x04000000u;
  if (instant_app_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_InstantApp>(GetArenaNoVirtual());
    instant_app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.instant_app)
  return instant_app_;
}
inline void GlobalSettingsProto::set_allocated_instant_app(::android::providers::settings::GlobalSettingsProto_InstantApp* instant_app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instant_app_;
  }
  if (instant_app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instant_app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instant_app, submessage_arena);
    }
    _has_bits_[1] |= 0x04000000u;
  } else {
    _has_bits_[1] &= ~0x04000000u;
  }
  instant_app_ = instant_app;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.instant_app)
}

// optional .android.providers.settings.GlobalSettingsProto.IntentFirewall intent_firewall = 65;
inline bool GlobalSettingsProto::has_intent_firewall() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void GlobalSettingsProto::clear_intent_firewall() {
  if (intent_firewall_ != nullptr) intent_firewall_->Clear();
  _has_bits_[1] &= ~0x08000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_IntentFirewall& GlobalSettingsProto::intent_firewall() const {
  const ::android::providers::settings::GlobalSettingsProto_IntentFirewall* p = intent_firewall_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.intent_firewall)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_IntentFirewall*>(
      &::android::providers::settings::_GlobalSettingsProto_IntentFirewall_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_IntentFirewall* GlobalSettingsProto::release_intent_firewall() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.intent_firewall)
  _has_bits_[1] &= ~0x08000000u;
  ::android::providers::settings::GlobalSettingsProto_IntentFirewall* temp = intent_firewall_;
  intent_firewall_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_IntentFirewall* GlobalSettingsProto::mutable_intent_firewall() {
  _has_bits_[1] |= 0x08000000u;
  if (intent_firewall_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_IntentFirewall>(GetArenaNoVirtual());
    intent_firewall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.intent_firewall)
  return intent_firewall_;
}
inline void GlobalSettingsProto::set_allocated_intent_firewall(::android::providers::settings::GlobalSettingsProto_IntentFirewall* intent_firewall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete intent_firewall_;
  }
  if (intent_firewall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intent_firewall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intent_firewall, submessage_arena);
    }
    _has_bits_[1] |= 0x08000000u;
  } else {
    _has_bits_[1] &= ~0x08000000u;
  }
  intent_firewall_ = intent_firewall;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.intent_firewall)
}

// optional .android.providers.settings.SettingProto keep_profile_in_background = 67 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_keep_profile_in_background() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::keep_profile_in_background() const {
  const ::android::providers::settings::SettingProto* p = keep_profile_in_background_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.keep_profile_in_background)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_keep_profile_in_background() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.keep_profile_in_background)
  _has_bits_[1] &= ~0x10000000u;
  ::android::providers::settings::SettingProto* temp = keep_profile_in_background_;
  keep_profile_in_background_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_keep_profile_in_background() {
  _has_bits_[1] |= 0x10000000u;
  if (keep_profile_in_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    keep_profile_in_background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.keep_profile_in_background)
  return keep_profile_in_background_;
}
inline void GlobalSettingsProto::set_allocated_keep_profile_in_background(::android::providers::settings::SettingProto* keep_profile_in_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(keep_profile_in_background_);
  }
  if (keep_profile_in_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keep_profile_in_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keep_profile_in_background, submessage_arena);
    }
    _has_bits_[1] |= 0x10000000u;
  } else {
    _has_bits_[1] &= ~0x10000000u;
  }
  keep_profile_in_background_ = keep_profile_in_background;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.keep_profile_in_background)
}

// optional .android.providers.settings.GlobalSettingsProto.LangId lang_id = 68;
inline bool GlobalSettingsProto::has_lang_id() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void GlobalSettingsProto::clear_lang_id() {
  if (lang_id_ != nullptr) lang_id_->Clear();
  _has_bits_[1] &= ~0x20000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_LangId& GlobalSettingsProto::lang_id() const {
  const ::android::providers::settings::GlobalSettingsProto_LangId* p = lang_id_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.lang_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_LangId*>(
      &::android::providers::settings::_GlobalSettingsProto_LangId_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_LangId* GlobalSettingsProto::release_lang_id() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.lang_id)
  _has_bits_[1] &= ~0x20000000u;
  ::android::providers::settings::GlobalSettingsProto_LangId* temp = lang_id_;
  lang_id_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_LangId* GlobalSettingsProto::mutable_lang_id() {
  _has_bits_[1] |= 0x20000000u;
  if (lang_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_LangId>(GetArenaNoVirtual());
    lang_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.lang_id)
  return lang_id_;
}
inline void GlobalSettingsProto::set_allocated_lang_id(::android::providers::settings::GlobalSettingsProto_LangId* lang_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lang_id_;
  }
  if (lang_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lang_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lang_id, submessage_arena);
    }
    _has_bits_[1] |= 0x20000000u;
  } else {
    _has_bits_[1] &= ~0x20000000u;
  }
  lang_id_ = lang_id;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.lang_id)
}

// optional .android.providers.settings.GlobalSettingsProto.Location location = 69;
inline bool GlobalSettingsProto::has_location() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void GlobalSettingsProto::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[1] &= ~0x40000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Location& GlobalSettingsProto::location() const {
  const ::android::providers::settings::GlobalSettingsProto_Location* p = location_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Location*>(
      &::android::providers::settings::_GlobalSettingsProto_Location_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Location* GlobalSettingsProto::release_location() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.location)
  _has_bits_[1] &= ~0x40000000u;
  ::android::providers::settings::GlobalSettingsProto_Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Location* GlobalSettingsProto::mutable_location() {
  _has_bits_[1] |= 0x40000000u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Location>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.location)
  return location_;
}
inline void GlobalSettingsProto::set_allocated_location(::android::providers::settings::GlobalSettingsProto_Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[1] |= 0x40000000u;
  } else {
    _has_bits_[1] &= ~0x40000000u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.location)
}

// optional .android.providers.settings.GlobalSettingsProto.LowPowerMode low_power_mode = 70;
inline bool GlobalSettingsProto::has_low_power_mode() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void GlobalSettingsProto::clear_low_power_mode() {
  if (low_power_mode_ != nullptr) low_power_mode_->Clear();
  _has_bits_[1] &= ~0x80000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_LowPowerMode& GlobalSettingsProto::low_power_mode() const {
  const ::android::providers::settings::GlobalSettingsProto_LowPowerMode* p = low_power_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.low_power_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_LowPowerMode*>(
      &::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_LowPowerMode* GlobalSettingsProto::release_low_power_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.low_power_mode)
  _has_bits_[1] &= ~0x80000000u;
  ::android::providers::settings::GlobalSettingsProto_LowPowerMode* temp = low_power_mode_;
  low_power_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_LowPowerMode* GlobalSettingsProto::mutable_low_power_mode() {
  _has_bits_[1] |= 0x80000000u;
  if (low_power_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_LowPowerMode>(GetArenaNoVirtual());
    low_power_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.low_power_mode)
  return low_power_mode_;
}
inline void GlobalSettingsProto::set_allocated_low_power_mode(::android::providers::settings::GlobalSettingsProto_LowPowerMode* low_power_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete low_power_mode_;
  }
  if (low_power_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      low_power_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_power_mode, submessage_arena);
    }
    _has_bits_[1] |= 0x80000000u;
  } else {
    _has_bits_[1] &= ~0x80000000u;
  }
  low_power_mode_ = low_power_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.low_power_mode)
}

// optional .android.providers.settings.SettingProto lte_service_forced = 71 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_lte_service_forced() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::lte_service_forced() const {
  const ::android::providers::settings::SettingProto* p = lte_service_forced_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.lte_service_forced)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_lte_service_forced() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.lte_service_forced)
  _has_bits_[2] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = lte_service_forced_;
  lte_service_forced_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_lte_service_forced() {
  _has_bits_[2] |= 0x00000001u;
  if (lte_service_forced_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    lte_service_forced_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.lte_service_forced)
  return lte_service_forced_;
}
inline void GlobalSettingsProto::set_allocated_lte_service_forced(::android::providers::settings::SettingProto* lte_service_forced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lte_service_forced_);
  }
  if (lte_service_forced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lte_service_forced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lte_service_forced, submessage_arena);
    }
    _has_bits_[2] |= 0x00000001u;
  } else {
    _has_bits_[2] &= ~0x00000001u;
  }
  lte_service_forced_ = lte_service_forced;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.lte_service_forced)
}

// repeated .android.providers.settings.SettingProto max_error_bytes = 151;
inline int GlobalSettingsProto::max_error_bytes_size() const {
  return max_error_bytes_.size();
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_max_error_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.max_error_bytes)
  return max_error_bytes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
GlobalSettingsProto::mutable_max_error_bytes() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.GlobalSettingsProto.max_error_bytes)
  return &max_error_bytes_;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::max_error_bytes(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.max_error_bytes)
  return max_error_bytes_.Get(index);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::add_max_error_bytes() {
  // @@protoc_insertion_point(field_add:android.providers.settings.GlobalSettingsProto.max_error_bytes)
  return max_error_bytes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
GlobalSettingsProto::max_error_bytes() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.GlobalSettingsProto.max_error_bytes)
  return max_error_bytes_;
}

// optional .android.providers.settings.SettingProto mdc_initial_max_retry = 72 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_mdc_initial_max_retry() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::mdc_initial_max_retry() const {
  const ::android::providers::settings::SettingProto* p = mdc_initial_max_retry_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.mdc_initial_max_retry)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_mdc_initial_max_retry() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.mdc_initial_max_retry)
  _has_bits_[2] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = mdc_initial_max_retry_;
  mdc_initial_max_retry_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_mdc_initial_max_retry() {
  _has_bits_[2] |= 0x00000002u;
  if (mdc_initial_max_retry_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mdc_initial_max_retry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.mdc_initial_max_retry)
  return mdc_initial_max_retry_;
}
inline void GlobalSettingsProto::set_allocated_mdc_initial_max_retry(::android::providers::settings::SettingProto* mdc_initial_max_retry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mdc_initial_max_retry_);
  }
  if (mdc_initial_max_retry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdc_initial_max_retry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdc_initial_max_retry, submessage_arena);
    }
    _has_bits_[2] |= 0x00000002u;
  } else {
    _has_bits_[2] &= ~0x00000002u;
  }
  mdc_initial_max_retry_ = mdc_initial_max_retry;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.mdc_initial_max_retry)
}

// optional .android.providers.settings.GlobalSettingsProto.Mhl mhl = 73;
inline bool GlobalSettingsProto::has_mhl() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void GlobalSettingsProto::clear_mhl() {
  if (mhl_ != nullptr) mhl_->Clear();
  _has_bits_[2] &= ~0x00000004u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Mhl& GlobalSettingsProto::mhl() const {
  const ::android::providers::settings::GlobalSettingsProto_Mhl* p = mhl_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.mhl)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Mhl*>(
      &::android::providers::settings::_GlobalSettingsProto_Mhl_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Mhl* GlobalSettingsProto::release_mhl() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.mhl)
  _has_bits_[2] &= ~0x00000004u;
  ::android::providers::settings::GlobalSettingsProto_Mhl* temp = mhl_;
  mhl_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Mhl* GlobalSettingsProto::mutable_mhl() {
  _has_bits_[2] |= 0x00000004u;
  if (mhl_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Mhl>(GetArenaNoVirtual());
    mhl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.mhl)
  return mhl_;
}
inline void GlobalSettingsProto::set_allocated_mhl(::android::providers::settings::GlobalSettingsProto_Mhl* mhl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mhl_;
  }
  if (mhl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mhl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mhl, submessage_arena);
    }
    _has_bits_[2] |= 0x00000004u;
  } else {
    _has_bits_[2] &= ~0x00000004u;
  }
  mhl_ = mhl;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.mhl)
}

// optional .android.providers.settings.GlobalSettingsProto.MobileData mobile_data = 74;
inline bool GlobalSettingsProto::has_mobile_data() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void GlobalSettingsProto::clear_mobile_data() {
  if (mobile_data_ != nullptr) mobile_data_->Clear();
  _has_bits_[2] &= ~0x00000008u;
}
inline const ::android::providers::settings::GlobalSettingsProto_MobileData& GlobalSettingsProto::mobile_data() const {
  const ::android::providers::settings::GlobalSettingsProto_MobileData* p = mobile_data_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.mobile_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_MobileData*>(
      &::android::providers::settings::_GlobalSettingsProto_MobileData_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_MobileData* GlobalSettingsProto::release_mobile_data() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.mobile_data)
  _has_bits_[2] &= ~0x00000008u;
  ::android::providers::settings::GlobalSettingsProto_MobileData* temp = mobile_data_;
  mobile_data_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_MobileData* GlobalSettingsProto::mutable_mobile_data() {
  _has_bits_[2] |= 0x00000008u;
  if (mobile_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_MobileData>(GetArenaNoVirtual());
    mobile_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.mobile_data)
  return mobile_data_;
}
inline void GlobalSettingsProto::set_allocated_mobile_data(::android::providers::settings::GlobalSettingsProto_MobileData* mobile_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mobile_data_;
  }
  if (mobile_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mobile_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mobile_data, submessage_arena);
    }
    _has_bits_[2] |= 0x00000008u;
  } else {
    _has_bits_[2] &= ~0x00000008u;
  }
  mobile_data_ = mobile_data;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.mobile_data)
}

// optional .android.providers.settings.SettingProto mode_ringer = 75 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_mode_ringer() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::mode_ringer() const {
  const ::android::providers::settings::SettingProto* p = mode_ringer_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.mode_ringer)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_mode_ringer() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.mode_ringer)
  _has_bits_[2] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = mode_ringer_;
  mode_ringer_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_mode_ringer() {
  _has_bits_[2] |= 0x00000010u;
  if (mode_ringer_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mode_ringer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.mode_ringer)
  return mode_ringer_;
}
inline void GlobalSettingsProto::set_allocated_mode_ringer(::android::providers::settings::SettingProto* mode_ringer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_ringer_);
  }
  if (mode_ringer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mode_ringer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode_ringer, submessage_arena);
    }
    _has_bits_[2] |= 0x00000010u;
  } else {
    _has_bits_[2] &= ~0x00000010u;
  }
  mode_ringer_ = mode_ringer;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.mode_ringer)
}

// optional .android.providers.settings.SettingProto apply_ramping_ringer = 147 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_apply_ramping_ringer() const {
  return (_has_bits_[4] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::apply_ramping_ringer() const {
  const ::android::providers::settings::SettingProto* p = apply_ramping_ringer_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.apply_ramping_ringer)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_apply_ramping_ringer() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.apply_ramping_ringer)
  _has_bits_[4] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = apply_ramping_ringer_;
  apply_ramping_ringer_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_apply_ramping_ringer() {
  _has_bits_[4] |= 0x00000800u;
  if (apply_ramping_ringer_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    apply_ramping_ringer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.apply_ramping_ringer)
  return apply_ramping_ringer_;
}
inline void GlobalSettingsProto::set_allocated_apply_ramping_ringer(::android::providers::settings::SettingProto* apply_ramping_ringer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(apply_ramping_ringer_);
  }
  if (apply_ramping_ringer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apply_ramping_ringer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_ramping_ringer, submessage_arena);
    }
    _has_bits_[4] |= 0x00000800u;
  } else {
    _has_bits_[4] &= ~0x00000800u;
  }
  apply_ramping_ringer_ = apply_ramping_ringer;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.apply_ramping_ringer)
}

// optional .android.providers.settings.GlobalSettingsProto.MultiSim multi_sim = 76;
inline bool GlobalSettingsProto::has_multi_sim() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void GlobalSettingsProto::clear_multi_sim() {
  if (multi_sim_ != nullptr) multi_sim_->Clear();
  _has_bits_[2] &= ~0x00000020u;
}
inline const ::android::providers::settings::GlobalSettingsProto_MultiSim& GlobalSettingsProto::multi_sim() const {
  const ::android::providers::settings::GlobalSettingsProto_MultiSim* p = multi_sim_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.multi_sim)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_MultiSim*>(
      &::android::providers::settings::_GlobalSettingsProto_MultiSim_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_MultiSim* GlobalSettingsProto::release_multi_sim() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.multi_sim)
  _has_bits_[2] &= ~0x00000020u;
  ::android::providers::settings::GlobalSettingsProto_MultiSim* temp = multi_sim_;
  multi_sim_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_MultiSim* GlobalSettingsProto::mutable_multi_sim() {
  _has_bits_[2] |= 0x00000020u;
  if (multi_sim_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_MultiSim>(GetArenaNoVirtual());
    multi_sim_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.multi_sim)
  return multi_sim_;
}
inline void GlobalSettingsProto::set_allocated_multi_sim(::android::providers::settings::GlobalSettingsProto_MultiSim* multi_sim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete multi_sim_;
  }
  if (multi_sim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multi_sim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_sim, submessage_arena);
    }
    _has_bits_[2] |= 0x00000020u;
  } else {
    _has_bits_[2] &= ~0x00000020u;
  }
  multi_sim_ = multi_sim;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.multi_sim)
}

// optional .android.providers.settings.SettingProto native_flags_health_check_enabled = 144 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_native_flags_health_check_enabled() const {
  return (_has_bits_[4] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::native_flags_health_check_enabled() const {
  const ::android::providers::settings::SettingProto* p = native_flags_health_check_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.native_flags_health_check_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_native_flags_health_check_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.native_flags_health_check_enabled)
  _has_bits_[4] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = native_flags_health_check_enabled_;
  native_flags_health_check_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_native_flags_health_check_enabled() {
  _has_bits_[4] |= 0x00000100u;
  if (native_flags_health_check_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    native_flags_health_check_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.native_flags_health_check_enabled)
  return native_flags_health_check_enabled_;
}
inline void GlobalSettingsProto::set_allocated_native_flags_health_check_enabled(::android::providers::settings::SettingProto* native_flags_health_check_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(native_flags_health_check_enabled_);
  }
  if (native_flags_health_check_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      native_flags_health_check_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native_flags_health_check_enabled, submessage_arena);
    }
    _has_bits_[4] |= 0x00000100u;
  } else {
    _has_bits_[4] &= ~0x00000100u;
  }
  native_flags_health_check_enabled_ = native_flags_health_check_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.native_flags_health_check_enabled)
}

// optional .android.providers.settings.GlobalSettingsProto.Netstats netstats = 77;
inline bool GlobalSettingsProto::has_netstats() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void GlobalSettingsProto::clear_netstats() {
  if (netstats_ != nullptr) netstats_->Clear();
  _has_bits_[2] &= ~0x00000040u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Netstats& GlobalSettingsProto::netstats() const {
  const ::android::providers::settings::GlobalSettingsProto_Netstats* p = netstats_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.netstats)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Netstats*>(
      &::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Netstats* GlobalSettingsProto::release_netstats() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.netstats)
  _has_bits_[2] &= ~0x00000040u;
  ::android::providers::settings::GlobalSettingsProto_Netstats* temp = netstats_;
  netstats_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Netstats* GlobalSettingsProto::mutable_netstats() {
  _has_bits_[2] |= 0x00000040u;
  if (netstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Netstats>(GetArenaNoVirtual());
    netstats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.netstats)
  return netstats_;
}
inline void GlobalSettingsProto::set_allocated_netstats(::android::providers::settings::GlobalSettingsProto_Netstats* netstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete netstats_;
  }
  if (netstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      netstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, netstats, submessage_arena);
    }
    _has_bits_[2] |= 0x00000040u;
  } else {
    _has_bits_[2] &= ~0x00000040u;
  }
  netstats_ = netstats;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.netstats)
}

// optional .android.providers.settings.GlobalSettingsProto.Network network = 78;
inline bool GlobalSettingsProto::has_network() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void GlobalSettingsProto::clear_network() {
  if (network_ != nullptr) network_->Clear();
  _has_bits_[2] &= ~0x00000080u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Network& GlobalSettingsProto::network() const {
  const ::android::providers::settings::GlobalSettingsProto_Network* p = network_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.network)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Network*>(
      &::android::providers::settings::_GlobalSettingsProto_Network_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Network* GlobalSettingsProto::release_network() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.network)
  _has_bits_[2] &= ~0x00000080u;
  ::android::providers::settings::GlobalSettingsProto_Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Network* GlobalSettingsProto::mutable_network() {
  _has_bits_[2] |= 0x00000080u;
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Network>(GetArenaNoVirtual());
    network_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.network)
  return network_;
}
inline void GlobalSettingsProto::set_allocated_network(::android::providers::settings::GlobalSettingsProto_Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    _has_bits_[2] |= 0x00000080u;
  } else {
    _has_bits_[2] &= ~0x00000080u;
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.network)
}

// optional .android.providers.settings.SettingProto new_contact_aggregator = 79 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_new_contact_aggregator() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::new_contact_aggregator() const {
  const ::android::providers::settings::SettingProto* p = new_contact_aggregator_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.new_contact_aggregator)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_new_contact_aggregator() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.new_contact_aggregator)
  _has_bits_[2] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = new_contact_aggregator_;
  new_contact_aggregator_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_new_contact_aggregator() {
  _has_bits_[2] |= 0x00000100u;
  if (new_contact_aggregator_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    new_contact_aggregator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.new_contact_aggregator)
  return new_contact_aggregator_;
}
inline void GlobalSettingsProto::set_allocated_new_contact_aggregator(::android::providers::settings::SettingProto* new_contact_aggregator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_contact_aggregator_);
  }
  if (new_contact_aggregator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_contact_aggregator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_contact_aggregator, submessage_arena);
    }
    _has_bits_[2] |= 0x00000100u;
  } else {
    _has_bits_[2] &= ~0x00000100u;
  }
  new_contact_aggregator_ = new_contact_aggregator;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.new_contact_aggregator)
}

// optional .android.providers.settings.SettingProto night_display_forced_auto_mode_available = 80 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_night_display_forced_auto_mode_available() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::night_display_forced_auto_mode_available() const {
  const ::android::providers::settings::SettingProto* p = night_display_forced_auto_mode_available_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.night_display_forced_auto_mode_available)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_night_display_forced_auto_mode_available() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.night_display_forced_auto_mode_available)
  _has_bits_[2] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = night_display_forced_auto_mode_available_;
  night_display_forced_auto_mode_available_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_night_display_forced_auto_mode_available() {
  _has_bits_[2] |= 0x00000200u;
  if (night_display_forced_auto_mode_available_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    night_display_forced_auto_mode_available_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.night_display_forced_auto_mode_available)
  return night_display_forced_auto_mode_available_;
}
inline void GlobalSettingsProto::set_allocated_night_display_forced_auto_mode_available(::android::providers::settings::SettingProto* night_display_forced_auto_mode_available) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(night_display_forced_auto_mode_available_);
  }
  if (night_display_forced_auto_mode_available) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      night_display_forced_auto_mode_available = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, night_display_forced_auto_mode_available, submessage_arena);
    }
    _has_bits_[2] |= 0x00000200u;
  } else {
    _has_bits_[2] &= ~0x00000200u;
  }
  night_display_forced_auto_mode_available_ = night_display_forced_auto_mode_available;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.night_display_forced_auto_mode_available)
}

// optional .android.providers.settings.GlobalSettingsProto.NitzUpdate nitz_update = 81;
inline bool GlobalSettingsProto::has_nitz_update() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void GlobalSettingsProto::clear_nitz_update() {
  if (nitz_update_ != nullptr) nitz_update_->Clear();
  _has_bits_[2] &= ~0x00000400u;
}
inline const ::android::providers::settings::GlobalSettingsProto_NitzUpdate& GlobalSettingsProto::nitz_update() const {
  const ::android::providers::settings::GlobalSettingsProto_NitzUpdate* p = nitz_update_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.nitz_update)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_NitzUpdate*>(
      &::android::providers::settings::_GlobalSettingsProto_NitzUpdate_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_NitzUpdate* GlobalSettingsProto::release_nitz_update() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.nitz_update)
  _has_bits_[2] &= ~0x00000400u;
  ::android::providers::settings::GlobalSettingsProto_NitzUpdate* temp = nitz_update_;
  nitz_update_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_NitzUpdate* GlobalSettingsProto::mutable_nitz_update() {
  _has_bits_[2] |= 0x00000400u;
  if (nitz_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_NitzUpdate>(GetArenaNoVirtual());
    nitz_update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.nitz_update)
  return nitz_update_;
}
inline void GlobalSettingsProto::set_allocated_nitz_update(::android::providers::settings::GlobalSettingsProto_NitzUpdate* nitz_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nitz_update_;
  }
  if (nitz_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nitz_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nitz_update, submessage_arena);
    }
    _has_bits_[2] |= 0x00000400u;
  } else {
    _has_bits_[2] &= ~0x00000400u;
  }
  nitz_update_ = nitz_update;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.nitz_update)
}

// optional .android.providers.settings.GlobalSettingsProto.Notification notification = 82;
inline bool GlobalSettingsProto::has_notification() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void GlobalSettingsProto::clear_notification() {
  if (notification_ != nullptr) notification_->Clear();
  _has_bits_[2] &= ~0x00000800u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Notification& GlobalSettingsProto::notification() const {
  const ::android::providers::settings::GlobalSettingsProto_Notification* p = notification_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.notification)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Notification*>(
      &::android::providers::settings::_GlobalSettingsProto_Notification_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Notification* GlobalSettingsProto::release_notification() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.notification)
  _has_bits_[2] &= ~0x00000800u;
  ::android::providers::settings::GlobalSettingsProto_Notification* temp = notification_;
  notification_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Notification* GlobalSettingsProto::mutable_notification() {
  _has_bits_[2] |= 0x00000800u;
  if (notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Notification>(GetArenaNoVirtual());
    notification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.notification)
  return notification_;
}
inline void GlobalSettingsProto::set_allocated_notification(::android::providers::settings::GlobalSettingsProto_Notification* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete notification_;
  }
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    _has_bits_[2] |= 0x00000800u;
  } else {
    _has_bits_[2] &= ~0x00000800u;
  }
  notification_ = notification;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.notification)
}

// optional .android.providers.settings.SettingProto nr_nsa_tracking_screen_off_mode = 153 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_nr_nsa_tracking_screen_off_mode() const {
  return (_has_bits_[4] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::nr_nsa_tracking_screen_off_mode() const {
  const ::android::providers::settings::SettingProto* p = nr_nsa_tracking_screen_off_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.nr_nsa_tracking_screen_off_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_nr_nsa_tracking_screen_off_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.nr_nsa_tracking_screen_off_mode)
  _has_bits_[4] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = nr_nsa_tracking_screen_off_mode_;
  nr_nsa_tracking_screen_off_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_nr_nsa_tracking_screen_off_mode() {
  _has_bits_[4] |= 0x00004000u;
  if (nr_nsa_tracking_screen_off_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    nr_nsa_tracking_screen_off_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.nr_nsa_tracking_screen_off_mode)
  return nr_nsa_tracking_screen_off_mode_;
}
inline void GlobalSettingsProto::set_allocated_nr_nsa_tracking_screen_off_mode(::android::providers::settings::SettingProto* nr_nsa_tracking_screen_off_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nr_nsa_tracking_screen_off_mode_);
  }
  if (nr_nsa_tracking_screen_off_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nr_nsa_tracking_screen_off_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nr_nsa_tracking_screen_off_mode, submessage_arena);
    }
    _has_bits_[4] |= 0x00004000u;
  } else {
    _has_bits_[4] &= ~0x00004000u;
  }
  nr_nsa_tracking_screen_off_mode_ = nr_nsa_tracking_screen_off_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.nr_nsa_tracking_screen_off_mode)
}

// optional .android.providers.settings.SettingProto nsd_on = 83 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_nsd_on() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::nsd_on() const {
  const ::android::providers::settings::SettingProto* p = nsd_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.nsd_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_nsd_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.nsd_on)
  _has_bits_[2] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = nsd_on_;
  nsd_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_nsd_on() {
  _has_bits_[2] |= 0x00001000u;
  if (nsd_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    nsd_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.nsd_on)
  return nsd_on_;
}
inline void GlobalSettingsProto::set_allocated_nsd_on(::android::providers::settings::SettingProto* nsd_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nsd_on_);
  }
  if (nsd_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nsd_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nsd_on, submessage_arena);
    }
    _has_bits_[2] |= 0x00001000u;
  } else {
    _has_bits_[2] &= ~0x00001000u;
  }
  nsd_on_ = nsd_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.nsd_on)
}

// optional .android.providers.settings.GlobalSettingsProto.Ntp ntp = 84;
inline bool GlobalSettingsProto::has_ntp() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void GlobalSettingsProto::clear_ntp() {
  if (ntp_ != nullptr) ntp_->Clear();
  _has_bits_[2] &= ~0x00002000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Ntp& GlobalSettingsProto::ntp() const {
  const ::android::providers::settings::GlobalSettingsProto_Ntp* p = ntp_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.ntp)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Ntp*>(
      &::android::providers::settings::_GlobalSettingsProto_Ntp_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Ntp* GlobalSettingsProto::release_ntp() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.ntp)
  _has_bits_[2] &= ~0x00002000u;
  ::android::providers::settings::GlobalSettingsProto_Ntp* temp = ntp_;
  ntp_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Ntp* GlobalSettingsProto::mutable_ntp() {
  _has_bits_[2] |= 0x00002000u;
  if (ntp_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Ntp>(GetArenaNoVirtual());
    ntp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.ntp)
  return ntp_;
}
inline void GlobalSettingsProto::set_allocated_ntp(::android::providers::settings::GlobalSettingsProto_Ntp* ntp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ntp_;
  }
  if (ntp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ntp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ntp, submessage_arena);
    }
    _has_bits_[2] |= 0x00002000u;
  } else {
    _has_bits_[2] &= ~0x00002000u;
  }
  ntp_ = ntp;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.ntp)
}

// optional .android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery user_absent_small_battery = 85;
inline bool GlobalSettingsProto::has_user_absent_small_battery() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void GlobalSettingsProto::clear_user_absent_small_battery() {
  if (user_absent_small_battery_ != nullptr) user_absent_small_battery_->Clear();
  _has_bits_[2] &= ~0x00004000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery& GlobalSettingsProto::user_absent_small_battery() const {
  const ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* p = user_absent_small_battery_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.user_absent_small_battery)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery*>(
      &::android::providers::settings::_GlobalSettingsProto_UserAbsentSmallBattery_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* GlobalSettingsProto::release_user_absent_small_battery() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.user_absent_small_battery)
  _has_bits_[2] &= ~0x00004000u;
  ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* temp = user_absent_small_battery_;
  user_absent_small_battery_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* GlobalSettingsProto::mutable_user_absent_small_battery() {
  _has_bits_[2] |= 0x00004000u;
  if (user_absent_small_battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery>(GetArenaNoVirtual());
    user_absent_small_battery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.user_absent_small_battery)
  return user_absent_small_battery_;
}
inline void GlobalSettingsProto::set_allocated_user_absent_small_battery(::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* user_absent_small_battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_absent_small_battery_;
  }
  if (user_absent_small_battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_absent_small_battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_absent_small_battery, submessage_arena);
    }
    _has_bits_[2] |= 0x00004000u;
  } else {
    _has_bits_[2] &= ~0x00004000u;
  }
  user_absent_small_battery_ = user_absent_small_battery;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.user_absent_small_battery)
}

// optional .android.providers.settings.SettingProto ota_disable_automatic_update = 86 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_ota_disable_automatic_update() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::ota_disable_automatic_update() const {
  const ::android::providers::settings::SettingProto* p = ota_disable_automatic_update_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.ota_disable_automatic_update)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_ota_disable_automatic_update() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.ota_disable_automatic_update)
  _has_bits_[2] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = ota_disable_automatic_update_;
  ota_disable_automatic_update_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_ota_disable_automatic_update() {
  _has_bits_[2] |= 0x00008000u;
  if (ota_disable_automatic_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ota_disable_automatic_update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.ota_disable_automatic_update)
  return ota_disable_automatic_update_;
}
inline void GlobalSettingsProto::set_allocated_ota_disable_automatic_update(::android::providers::settings::SettingProto* ota_disable_automatic_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ota_disable_automatic_update_);
  }
  if (ota_disable_automatic_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ota_disable_automatic_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ota_disable_automatic_update, submessage_arena);
    }
    _has_bits_[2] |= 0x00008000u;
  } else {
    _has_bits_[2] &= ~0x00008000u;
  }
  ota_disable_automatic_update_ = ota_disable_automatic_update;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.ota_disable_automatic_update)
}

// optional .android.providers.settings.SettingProto overlay_display_devices = 87 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_overlay_display_devices() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::overlay_display_devices() const {
  const ::android::providers::settings::SettingProto* p = overlay_display_devices_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.overlay_display_devices)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_overlay_display_devices() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.overlay_display_devices)
  _has_bits_[2] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = overlay_display_devices_;
  overlay_display_devices_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_overlay_display_devices() {
  _has_bits_[2] |= 0x00010000u;
  if (overlay_display_devices_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    overlay_display_devices_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.overlay_display_devices)
  return overlay_display_devices_;
}
inline void GlobalSettingsProto::set_allocated_overlay_display_devices(::android::providers::settings::SettingProto* overlay_display_devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overlay_display_devices_);
  }
  if (overlay_display_devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overlay_display_devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overlay_display_devices, submessage_arena);
    }
    _has_bits_[2] |= 0x00010000u;
  } else {
    _has_bits_[2] &= ~0x00010000u;
  }
  overlay_display_devices_ = overlay_display_devices;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.overlay_display_devices)
}

// optional .android.providers.settings.SettingProto override_settings_provider_restore_any_version = 88 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_override_settings_provider_restore_any_version() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::override_settings_provider_restore_any_version() const {
  const ::android::providers::settings::SettingProto* p = override_settings_provider_restore_any_version_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.override_settings_provider_restore_any_version)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_override_settings_provider_restore_any_version() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.override_settings_provider_restore_any_version)
  _has_bits_[2] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = override_settings_provider_restore_any_version_;
  override_settings_provider_restore_any_version_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_override_settings_provider_restore_any_version() {
  _has_bits_[2] |= 0x00020000u;
  if (override_settings_provider_restore_any_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    override_settings_provider_restore_any_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.override_settings_provider_restore_any_version)
  return override_settings_provider_restore_any_version_;
}
inline void GlobalSettingsProto::set_allocated_override_settings_provider_restore_any_version(::android::providers::settings::SettingProto* override_settings_provider_restore_any_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(override_settings_provider_restore_any_version_);
  }
  if (override_settings_provider_restore_any_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      override_settings_provider_restore_any_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override_settings_provider_restore_any_version, submessage_arena);
    }
    _has_bits_[2] |= 0x00020000u;
  } else {
    _has_bits_[2] &= ~0x00020000u;
  }
  override_settings_provider_restore_any_version_ = override_settings_provider_restore_any_version;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.override_settings_provider_restore_any_version)
}

// optional .android.providers.settings.SettingProto pac_change_delay = 89 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_pac_change_delay() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::pac_change_delay() const {
  const ::android::providers::settings::SettingProto* p = pac_change_delay_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.pac_change_delay)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_pac_change_delay() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.pac_change_delay)
  _has_bits_[2] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = pac_change_delay_;
  pac_change_delay_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_pac_change_delay() {
  _has_bits_[2] |= 0x00040000u;
  if (pac_change_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    pac_change_delay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.pac_change_delay)
  return pac_change_delay_;
}
inline void GlobalSettingsProto::set_allocated_pac_change_delay(::android::providers::settings::SettingProto* pac_change_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pac_change_delay_);
  }
  if (pac_change_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pac_change_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pac_change_delay, submessage_arena);
    }
    _has_bits_[2] |= 0x00040000u;
  } else {
    _has_bits_[2] &= ~0x00040000u;
  }
  pac_change_delay_ = pac_change_delay;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.pac_change_delay)
}

// optional .android.providers.settings.GlobalSettingsProto.PackageVerifier package_verifier = 90;
inline bool GlobalSettingsProto::has_package_verifier() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void GlobalSettingsProto::clear_package_verifier() {
  if (package_verifier_ != nullptr) package_verifier_->Clear();
  _has_bits_[2] &= ~0x00080000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_PackageVerifier& GlobalSettingsProto::package_verifier() const {
  const ::android::providers::settings::GlobalSettingsProto_PackageVerifier* p = package_verifier_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.package_verifier)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_PackageVerifier*>(
      &::android::providers::settings::_GlobalSettingsProto_PackageVerifier_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_PackageVerifier* GlobalSettingsProto::release_package_verifier() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.package_verifier)
  _has_bits_[2] &= ~0x00080000u;
  ::android::providers::settings::GlobalSettingsProto_PackageVerifier* temp = package_verifier_;
  package_verifier_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_PackageVerifier* GlobalSettingsProto::mutable_package_verifier() {
  _has_bits_[2] |= 0x00080000u;
  if (package_verifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_PackageVerifier>(GetArenaNoVirtual());
    package_verifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.package_verifier)
  return package_verifier_;
}
inline void GlobalSettingsProto::set_allocated_package_verifier(::android::providers::settings::GlobalSettingsProto_PackageVerifier* package_verifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete package_verifier_;
  }
  if (package_verifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      package_verifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package_verifier, submessage_arena);
    }
    _has_bits_[2] |= 0x00080000u;
  } else {
    _has_bits_[2] &= ~0x00080000u;
  }
  package_verifier_ = package_verifier;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.package_verifier)
}

// optional .android.providers.settings.GlobalSettingsProto.PdpWatchdog pdp_watchdog = 91;
inline bool GlobalSettingsProto::has_pdp_watchdog() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void GlobalSettingsProto::clear_pdp_watchdog() {
  if (pdp_watchdog_ != nullptr) pdp_watchdog_->Clear();
  _has_bits_[2] &= ~0x00100000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_PdpWatchdog& GlobalSettingsProto::pdp_watchdog() const {
  const ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* p = pdp_watchdog_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.pdp_watchdog)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_PdpWatchdog*>(
      &::android::providers::settings::_GlobalSettingsProto_PdpWatchdog_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* GlobalSettingsProto::release_pdp_watchdog() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.pdp_watchdog)
  _has_bits_[2] &= ~0x00100000u;
  ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* temp = pdp_watchdog_;
  pdp_watchdog_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* GlobalSettingsProto::mutable_pdp_watchdog() {
  _has_bits_[2] |= 0x00100000u;
  if (pdp_watchdog_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_PdpWatchdog>(GetArenaNoVirtual());
    pdp_watchdog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.pdp_watchdog)
  return pdp_watchdog_;
}
inline void GlobalSettingsProto::set_allocated_pdp_watchdog(::android::providers::settings::GlobalSettingsProto_PdpWatchdog* pdp_watchdog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pdp_watchdog_;
  }
  if (pdp_watchdog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pdp_watchdog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pdp_watchdog, submessage_arena);
    }
    _has_bits_[2] |= 0x00100000u;
  } else {
    _has_bits_[2] &= ~0x00100000u;
  }
  pdp_watchdog_ = pdp_watchdog;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.pdp_watchdog)
}

// optional .android.providers.settings.SettingProto policy_control = 92;
inline bool GlobalSettingsProto::has_policy_control() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::policy_control() const {
  const ::android::providers::settings::SettingProto* p = policy_control_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.policy_control)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_policy_control() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.policy_control)
  _has_bits_[2] &= ~0x00200000u;
  ::android::providers::settings::SettingProto* temp = policy_control_;
  policy_control_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_policy_control() {
  _has_bits_[2] |= 0x00200000u;
  if (policy_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    policy_control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.policy_control)
  return policy_control_;
}
inline void GlobalSettingsProto::set_allocated_policy_control(::android::providers::settings::SettingProto* policy_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_control_);
  }
  if (policy_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_control, submessage_arena);
    }
    _has_bits_[2] |= 0x00200000u;
  } else {
    _has_bits_[2] &= ~0x00200000u;
  }
  policy_control_ = policy_control;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.policy_control)
}

// optional .android.providers.settings.SettingProto power_manager_constants = 93;
inline bool GlobalSettingsProto::has_power_manager_constants() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::power_manager_constants() const {
  const ::android::providers::settings::SettingProto* p = power_manager_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.power_manager_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_power_manager_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.power_manager_constants)
  _has_bits_[2] &= ~0x00400000u;
  ::android::providers::settings::SettingProto* temp = power_manager_constants_;
  power_manager_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_power_manager_constants() {
  _has_bits_[2] |= 0x00400000u;
  if (power_manager_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    power_manager_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.power_manager_constants)
  return power_manager_constants_;
}
inline void GlobalSettingsProto::set_allocated_power_manager_constants(::android::providers::settings::SettingProto* power_manager_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_manager_constants_);
  }
  if (power_manager_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_manager_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_manager_constants, submessage_arena);
    }
    _has_bits_[2] |= 0x00400000u;
  } else {
    _has_bits_[2] &= ~0x00400000u;
  }
  power_manager_constants_ = power_manager_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.power_manager_constants)
}

// optional .android.providers.settings.SettingProto power_button_long_press_duration_ms = 154 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_power_button_long_press_duration_ms() const {
  return (_has_bits_[4] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::power_button_long_press_duration_ms() const {
  const ::android::providers::settings::SettingProto* p = power_button_long_press_duration_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.power_button_long_press_duration_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_power_button_long_press_duration_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.power_button_long_press_duration_ms)
  _has_bits_[4] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = power_button_long_press_duration_ms_;
  power_button_long_press_duration_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_power_button_long_press_duration_ms() {
  _has_bits_[4] |= 0x00008000u;
  if (power_button_long_press_duration_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    power_button_long_press_duration_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.power_button_long_press_duration_ms)
  return power_button_long_press_duration_ms_;
}
inline void GlobalSettingsProto::set_allocated_power_button_long_press_duration_ms(::android::providers::settings::SettingProto* power_button_long_press_duration_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_button_long_press_duration_ms_);
  }
  if (power_button_long_press_duration_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_button_long_press_duration_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_button_long_press_duration_ms, submessage_arena);
    }
    _has_bits_[4] |= 0x00008000u;
  } else {
    _has_bits_[4] &= ~0x00008000u;
  }
  power_button_long_press_duration_ms_ = power_button_long_press_duration_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.power_button_long_press_duration_ms)
}

// optional .android.providers.settings.GlobalSettingsProto.PrepaidSetup prepaid_setup = 95;
inline bool GlobalSettingsProto::has_prepaid_setup() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void GlobalSettingsProto::clear_prepaid_setup() {
  if (prepaid_setup_ != nullptr) prepaid_setup_->Clear();
  _has_bits_[2] &= ~0x00800000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_PrepaidSetup& GlobalSettingsProto::prepaid_setup() const {
  const ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* p = prepaid_setup_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.prepaid_setup)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_PrepaidSetup*>(
      &::android::providers::settings::_GlobalSettingsProto_PrepaidSetup_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* GlobalSettingsProto::release_prepaid_setup() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.prepaid_setup)
  _has_bits_[2] &= ~0x00800000u;
  ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* temp = prepaid_setup_;
  prepaid_setup_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* GlobalSettingsProto::mutable_prepaid_setup() {
  _has_bits_[2] |= 0x00800000u;
  if (prepaid_setup_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_PrepaidSetup>(GetArenaNoVirtual());
    prepaid_setup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.prepaid_setup)
  return prepaid_setup_;
}
inline void GlobalSettingsProto::set_allocated_prepaid_setup(::android::providers::settings::GlobalSettingsProto_PrepaidSetup* prepaid_setup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prepaid_setup_;
  }
  if (prepaid_setup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prepaid_setup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepaid_setup, submessage_arena);
    }
    _has_bits_[2] |= 0x00800000u;
  } else {
    _has_bits_[2] &= ~0x00800000u;
  }
  prepaid_setup_ = prepaid_setup;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.prepaid_setup)
}

// optional .android.providers.settings.GlobalSettingsProto.Private private = 96;
inline bool GlobalSettingsProto::has_private_() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void GlobalSettingsProto::clear_private_() {
  if (private__ != nullptr) private__->Clear();
  _has_bits_[2] &= ~0x01000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Private& GlobalSettingsProto::private_() const {
  const ::android::providers::settings::GlobalSettingsProto_Private* p = private__;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.private)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Private*>(
      &::android::providers::settings::_GlobalSettingsProto_Private_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Private* GlobalSettingsProto::release_private_() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.private)
  _has_bits_[2] &= ~0x01000000u;
  ::android::providers::settings::GlobalSettingsProto_Private* temp = private__;
  private__ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Private* GlobalSettingsProto::mutable_private_() {
  _has_bits_[2] |= 0x01000000u;
  if (private__ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Private>(GetArenaNoVirtual());
    private__ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.private)
  return private__;
}
inline void GlobalSettingsProto::set_allocated_private_(::android::providers::settings::GlobalSettingsProto_Private* private_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete private__;
  }
  if (private_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      private_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, private_, submessage_arena);
    }
    _has_bits_[2] |= 0x01000000u;
  } else {
    _has_bits_[2] &= ~0x01000000u;
  }
  private__ = private_;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.private)
}

// optional .android.providers.settings.SettingProto provisioning_apn_alarm_delay_in_ms = 97 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_provisioning_apn_alarm_delay_in_ms() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::provisioning_apn_alarm_delay_in_ms() const {
  const ::android::providers::settings::SettingProto* p = provisioning_apn_alarm_delay_in_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.provisioning_apn_alarm_delay_in_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_provisioning_apn_alarm_delay_in_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.provisioning_apn_alarm_delay_in_ms)
  _has_bits_[2] &= ~0x02000000u;
  ::android::providers::settings::SettingProto* temp = provisioning_apn_alarm_delay_in_ms_;
  provisioning_apn_alarm_delay_in_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_provisioning_apn_alarm_delay_in_ms() {
  _has_bits_[2] |= 0x02000000u;
  if (provisioning_apn_alarm_delay_in_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    provisioning_apn_alarm_delay_in_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.provisioning_apn_alarm_delay_in_ms)
  return provisioning_apn_alarm_delay_in_ms_;
}
inline void GlobalSettingsProto::set_allocated_provisioning_apn_alarm_delay_in_ms(::android::providers::settings::SettingProto* provisioning_apn_alarm_delay_in_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provisioning_apn_alarm_delay_in_ms_);
  }
  if (provisioning_apn_alarm_delay_in_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provisioning_apn_alarm_delay_in_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provisioning_apn_alarm_delay_in_ms, submessage_arena);
    }
    _has_bits_[2] |= 0x02000000u;
  } else {
    _has_bits_[2] &= ~0x02000000u;
  }
  provisioning_apn_alarm_delay_in_ms_ = provisioning_apn_alarm_delay_in_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.provisioning_apn_alarm_delay_in_ms)
}

// optional .android.providers.settings.SettingProto read_external_storage_enforced_default = 98 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_read_external_storage_enforced_default() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::read_external_storage_enforced_default() const {
  const ::android::providers::settings::SettingProto* p = read_external_storage_enforced_default_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.read_external_storage_enforced_default)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_read_external_storage_enforced_default() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.read_external_storage_enforced_default)
  _has_bits_[2] &= ~0x04000000u;
  ::android::providers::settings::SettingProto* temp = read_external_storage_enforced_default_;
  read_external_storage_enforced_default_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_read_external_storage_enforced_default() {
  _has_bits_[2] |= 0x04000000u;
  if (read_external_storage_enforced_default_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    read_external_storage_enforced_default_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.read_external_storage_enforced_default)
  return read_external_storage_enforced_default_;
}
inline void GlobalSettingsProto::set_allocated_read_external_storage_enforced_default(::android::providers::settings::SettingProto* read_external_storage_enforced_default) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_external_storage_enforced_default_);
  }
  if (read_external_storage_enforced_default) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_external_storage_enforced_default = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_external_storage_enforced_default, submessage_arena);
    }
    _has_bits_[2] |= 0x04000000u;
  } else {
    _has_bits_[2] &= ~0x04000000u;
  }
  read_external_storage_enforced_default_ = read_external_storage_enforced_default;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.read_external_storage_enforced_default)
}

// optional .android.providers.settings.SettingProto require_password_to_decrypt = 99 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_require_password_to_decrypt() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::require_password_to_decrypt() const {
  const ::android::providers::settings::SettingProto* p = require_password_to_decrypt_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.require_password_to_decrypt)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_require_password_to_decrypt() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.require_password_to_decrypt)
  _has_bits_[2] &= ~0x08000000u;
  ::android::providers::settings::SettingProto* temp = require_password_to_decrypt_;
  require_password_to_decrypt_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_require_password_to_decrypt() {
  _has_bits_[2] |= 0x08000000u;
  if (require_password_to_decrypt_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    require_password_to_decrypt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.require_password_to_decrypt)
  return require_password_to_decrypt_;
}
inline void GlobalSettingsProto::set_allocated_require_password_to_decrypt(::android::providers::settings::SettingProto* require_password_to_decrypt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(require_password_to_decrypt_);
  }
  if (require_password_to_decrypt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      require_password_to_decrypt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, require_password_to_decrypt, submessage_arena);
    }
    _has_bits_[2] |= 0x08000000u;
  } else {
    _has_bits_[2] &= ~0x08000000u;
  }
  require_password_to_decrypt_ = require_password_to_decrypt;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.require_password_to_decrypt)
}

// optional .android.providers.settings.SettingProto safe_boot_disallowed = 100 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_safe_boot_disallowed() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::safe_boot_disallowed() const {
  const ::android::providers::settings::SettingProto* p = safe_boot_disallowed_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.safe_boot_disallowed)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_safe_boot_disallowed() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.safe_boot_disallowed)
  _has_bits_[2] &= ~0x10000000u;
  ::android::providers::settings::SettingProto* temp = safe_boot_disallowed_;
  safe_boot_disallowed_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_safe_boot_disallowed() {
  _has_bits_[2] |= 0x10000000u;
  if (safe_boot_disallowed_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    safe_boot_disallowed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.safe_boot_disallowed)
  return safe_boot_disallowed_;
}
inline void GlobalSettingsProto::set_allocated_safe_boot_disallowed(::android::providers::settings::SettingProto* safe_boot_disallowed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(safe_boot_disallowed_);
  }
  if (safe_boot_disallowed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      safe_boot_disallowed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, safe_boot_disallowed, submessage_arena);
    }
    _has_bits_[2] |= 0x10000000u;
  } else {
    _has_bits_[2] &= ~0x10000000u;
  }
  safe_boot_disallowed_ = safe_boot_disallowed;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.safe_boot_disallowed)
}

// optional .android.providers.settings.GlobalSettingsProto.Selinux selinux = 101;
inline bool GlobalSettingsProto::has_selinux() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void GlobalSettingsProto::clear_selinux() {
  if (selinux_ != nullptr) selinux_->Clear();
  _has_bits_[2] &= ~0x20000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Selinux& GlobalSettingsProto::selinux() const {
  const ::android::providers::settings::GlobalSettingsProto_Selinux* p = selinux_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.selinux)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Selinux*>(
      &::android::providers::settings::_GlobalSettingsProto_Selinux_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Selinux* GlobalSettingsProto::release_selinux() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.selinux)
  _has_bits_[2] &= ~0x20000000u;
  ::android::providers::settings::GlobalSettingsProto_Selinux* temp = selinux_;
  selinux_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Selinux* GlobalSettingsProto::mutable_selinux() {
  _has_bits_[2] |= 0x20000000u;
  if (selinux_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Selinux>(GetArenaNoVirtual());
    selinux_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.selinux)
  return selinux_;
}
inline void GlobalSettingsProto::set_allocated_selinux(::android::providers::settings::GlobalSettingsProto_Selinux* selinux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete selinux_;
  }
  if (selinux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selinux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selinux, submessage_arena);
    }
    _has_bits_[2] |= 0x20000000u;
  } else {
    _has_bits_[2] &= ~0x20000000u;
  }
  selinux_ = selinux;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.selinux)
}

// optional .android.providers.settings.SettingProto send_action_app_error = 102 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_send_action_app_error() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::send_action_app_error() const {
  const ::android::providers::settings::SettingProto* p = send_action_app_error_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.send_action_app_error)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_send_action_app_error() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.send_action_app_error)
  _has_bits_[2] &= ~0x40000000u;
  ::android::providers::settings::SettingProto* temp = send_action_app_error_;
  send_action_app_error_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_send_action_app_error() {
  _has_bits_[2] |= 0x40000000u;
  if (send_action_app_error_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    send_action_app_error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.send_action_app_error)
  return send_action_app_error_;
}
inline void GlobalSettingsProto::set_allocated_send_action_app_error(::android::providers::settings::SettingProto* send_action_app_error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(send_action_app_error_);
  }
  if (send_action_app_error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      send_action_app_error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_action_app_error, submessage_arena);
    }
    _has_bits_[2] |= 0x40000000u;
  } else {
    _has_bits_[2] &= ~0x40000000u;
  }
  send_action_app_error_ = send_action_app_error;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.send_action_app_error)
}

// optional .android.providers.settings.SettingProto set_install_location = 103 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_set_install_location() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::set_install_location() const {
  const ::android::providers::settings::SettingProto* p = set_install_location_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.set_install_location)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_set_install_location() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.set_install_location)
  _has_bits_[2] &= ~0x80000000u;
  ::android::providers::settings::SettingProto* temp = set_install_location_;
  set_install_location_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_set_install_location() {
  _has_bits_[2] |= 0x80000000u;
  if (set_install_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    set_install_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.set_install_location)
  return set_install_location_;
}
inline void GlobalSettingsProto::set_allocated_set_install_location(::android::providers::settings::SettingProto* set_install_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_install_location_);
  }
  if (set_install_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_install_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_install_location, submessage_arena);
    }
    _has_bits_[2] |= 0x80000000u;
  } else {
    _has_bits_[2] &= ~0x80000000u;
  }
  set_install_location_ = set_install_location;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.set_install_location)
}

// optional .android.providers.settings.SettingProto shortcut_manager_constants = 104;
inline bool GlobalSettingsProto::has_shortcut_manager_constants() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::shortcut_manager_constants() const {
  const ::android::providers::settings::SettingProto* p = shortcut_manager_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.shortcut_manager_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_shortcut_manager_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.shortcut_manager_constants)
  _has_bits_[3] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = shortcut_manager_constants_;
  shortcut_manager_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_shortcut_manager_constants() {
  _has_bits_[3] |= 0x00000001u;
  if (shortcut_manager_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    shortcut_manager_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.shortcut_manager_constants)
  return shortcut_manager_constants_;
}
inline void GlobalSettingsProto::set_allocated_shortcut_manager_constants(::android::providers::settings::SettingProto* shortcut_manager_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_manager_constants_);
  }
  if (shortcut_manager_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shortcut_manager_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_manager_constants, submessage_arena);
    }
    _has_bits_[3] |= 0x00000001u;
  } else {
    _has_bits_[3] &= ~0x00000001u;
  }
  shortcut_manager_constants_ = shortcut_manager_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.shortcut_manager_constants)
}

// optional .android.providers.settings.SettingProto show_first_crash_dialog = 105 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_show_first_crash_dialog() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::show_first_crash_dialog() const {
  const ::android::providers::settings::SettingProto* p = show_first_crash_dialog_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.show_first_crash_dialog)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_show_first_crash_dialog() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.show_first_crash_dialog)
  _has_bits_[3] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = show_first_crash_dialog_;
  show_first_crash_dialog_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_show_first_crash_dialog() {
  _has_bits_[3] |= 0x00000002u;
  if (show_first_crash_dialog_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_first_crash_dialog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.show_first_crash_dialog)
  return show_first_crash_dialog_;
}
inline void GlobalSettingsProto::set_allocated_show_first_crash_dialog(::android::providers::settings::SettingProto* show_first_crash_dialog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_first_crash_dialog_);
  }
  if (show_first_crash_dialog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_first_crash_dialog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_first_crash_dialog, submessage_arena);
    }
    _has_bits_[3] |= 0x00000002u;
  } else {
    _has_bits_[3] &= ~0x00000002u;
  }
  show_first_crash_dialog_ = show_first_crash_dialog;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.show_first_crash_dialog)
}

// optional .android.providers.settings.SettingProto show_hidden_launcher_icon_apps_enabled = 141 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_show_hidden_launcher_icon_apps_enabled() const {
  return (_has_bits_[4] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::show_hidden_launcher_icon_apps_enabled() const {
  const ::android::providers::settings::SettingProto* p = show_hidden_launcher_icon_apps_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.show_hidden_launcher_icon_apps_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_show_hidden_launcher_icon_apps_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.show_hidden_launcher_icon_apps_enabled)
  _has_bits_[4] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = show_hidden_launcher_icon_apps_enabled_;
  show_hidden_launcher_icon_apps_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_show_hidden_launcher_icon_apps_enabled() {
  _has_bits_[4] |= 0x00000020u;
  if (show_hidden_launcher_icon_apps_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_hidden_launcher_icon_apps_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.show_hidden_launcher_icon_apps_enabled)
  return show_hidden_launcher_icon_apps_enabled_;
}
inline void GlobalSettingsProto::set_allocated_show_hidden_launcher_icon_apps_enabled(::android::providers::settings::SettingProto* show_hidden_launcher_icon_apps_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_hidden_launcher_icon_apps_enabled_);
  }
  if (show_hidden_launcher_icon_apps_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_hidden_launcher_icon_apps_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_hidden_launcher_icon_apps_enabled, submessage_arena);
    }
    _has_bits_[4] |= 0x00000020u;
  } else {
    _has_bits_[4] &= ~0x00000020u;
  }
  show_hidden_launcher_icon_apps_enabled_ = show_hidden_launcher_icon_apps_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.show_hidden_launcher_icon_apps_enabled)
}

// optional .android.providers.settings.SettingProto show_restart_in_crash_dialog = 106 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_show_restart_in_crash_dialog() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::show_restart_in_crash_dialog() const {
  const ::android::providers::settings::SettingProto* p = show_restart_in_crash_dialog_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.show_restart_in_crash_dialog)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_show_restart_in_crash_dialog() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.show_restart_in_crash_dialog)
  _has_bits_[3] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = show_restart_in_crash_dialog_;
  show_restart_in_crash_dialog_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_show_restart_in_crash_dialog() {
  _has_bits_[3] |= 0x00000004u;
  if (show_restart_in_crash_dialog_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_restart_in_crash_dialog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.show_restart_in_crash_dialog)
  return show_restart_in_crash_dialog_;
}
inline void GlobalSettingsProto::set_allocated_show_restart_in_crash_dialog(::android::providers::settings::SettingProto* show_restart_in_crash_dialog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_restart_in_crash_dialog_);
  }
  if (show_restart_in_crash_dialog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_restart_in_crash_dialog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_restart_in_crash_dialog, submessage_arena);
    }
    _has_bits_[3] |= 0x00000004u;
  } else {
    _has_bits_[3] &= ~0x00000004u;
  }
  show_restart_in_crash_dialog_ = show_restart_in_crash_dialog;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.show_restart_in_crash_dialog)
}

// optional .android.providers.settings.SettingProto show_mute_in_crash_dialog = 107 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_show_mute_in_crash_dialog() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::show_mute_in_crash_dialog() const {
  const ::android::providers::settings::SettingProto* p = show_mute_in_crash_dialog_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.show_mute_in_crash_dialog)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_show_mute_in_crash_dialog() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.show_mute_in_crash_dialog)
  _has_bits_[3] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = show_mute_in_crash_dialog_;
  show_mute_in_crash_dialog_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_show_mute_in_crash_dialog() {
  _has_bits_[3] |= 0x00000008u;
  if (show_mute_in_crash_dialog_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_mute_in_crash_dialog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.show_mute_in_crash_dialog)
  return show_mute_in_crash_dialog_;
}
inline void GlobalSettingsProto::set_allocated_show_mute_in_crash_dialog(::android::providers::settings::SettingProto* show_mute_in_crash_dialog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_mute_in_crash_dialog_);
  }
  if (show_mute_in_crash_dialog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_mute_in_crash_dialog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_mute_in_crash_dialog, submessage_arena);
    }
    _has_bits_[3] |= 0x00000008u;
  } else {
    _has_bits_[3] &= ~0x00000008u;
  }
  show_mute_in_crash_dialog_ = show_mute_in_crash_dialog;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.show_mute_in_crash_dialog)
}

// optional .android.providers.settings.SettingProto show_new_app_installed_notification_enabled = 142 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_show_new_app_installed_notification_enabled() const {
  return (_has_bits_[4] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::show_new_app_installed_notification_enabled() const {
  const ::android::providers::settings::SettingProto* p = show_new_app_installed_notification_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.show_new_app_installed_notification_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_show_new_app_installed_notification_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.show_new_app_installed_notification_enabled)
  _has_bits_[4] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = show_new_app_installed_notification_enabled_;
  show_new_app_installed_notification_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_show_new_app_installed_notification_enabled() {
  _has_bits_[4] |= 0x00000040u;
  if (show_new_app_installed_notification_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_new_app_installed_notification_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.show_new_app_installed_notification_enabled)
  return show_new_app_installed_notification_enabled_;
}
inline void GlobalSettingsProto::set_allocated_show_new_app_installed_notification_enabled(::android::providers::settings::SettingProto* show_new_app_installed_notification_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_new_app_installed_notification_enabled_);
  }
  if (show_new_app_installed_notification_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_new_app_installed_notification_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_new_app_installed_notification_enabled, submessage_arena);
    }
    _has_bits_[4] |= 0x00000040u;
  } else {
    _has_bits_[4] &= ~0x00000040u;
  }
  show_new_app_installed_notification_enabled_ = show_new_app_installed_notification_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.show_new_app_installed_notification_enabled)
}

// optional .android.providers.settings.GlobalSettingsProto.SmartSelection smart_selection = 108;
inline bool GlobalSettingsProto::has_smart_selection() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void GlobalSettingsProto::clear_smart_selection() {
  if (smart_selection_ != nullptr) smart_selection_->Clear();
  _has_bits_[3] &= ~0x00000010u;
}
inline const ::android::providers::settings::GlobalSettingsProto_SmartSelection& GlobalSettingsProto::smart_selection() const {
  const ::android::providers::settings::GlobalSettingsProto_SmartSelection* p = smart_selection_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.smart_selection)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_SmartSelection*>(
      &::android::providers::settings::_GlobalSettingsProto_SmartSelection_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_SmartSelection* GlobalSettingsProto::release_smart_selection() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.smart_selection)
  _has_bits_[3] &= ~0x00000010u;
  ::android::providers::settings::GlobalSettingsProto_SmartSelection* temp = smart_selection_;
  smart_selection_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_SmartSelection* GlobalSettingsProto::mutable_smart_selection() {
  _has_bits_[3] |= 0x00000010u;
  if (smart_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_SmartSelection>(GetArenaNoVirtual());
    smart_selection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.smart_selection)
  return smart_selection_;
}
inline void GlobalSettingsProto::set_allocated_smart_selection(::android::providers::settings::GlobalSettingsProto_SmartSelection* smart_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete smart_selection_;
  }
  if (smart_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      smart_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smart_selection, submessage_arena);
    }
    _has_bits_[3] |= 0x00000010u;
  } else {
    _has_bits_[3] &= ~0x00000010u;
  }
  smart_selection_ = smart_selection;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.smart_selection)
}

// optional .android.providers.settings.GlobalSettingsProto.Sms sms = 109;
inline bool GlobalSettingsProto::has_sms() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void GlobalSettingsProto::clear_sms() {
  if (sms_ != nullptr) sms_->Clear();
  _has_bits_[3] &= ~0x00000020u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Sms& GlobalSettingsProto::sms() const {
  const ::android::providers::settings::GlobalSettingsProto_Sms* p = sms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.sms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Sms*>(
      &::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Sms* GlobalSettingsProto::release_sms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.sms)
  _has_bits_[3] &= ~0x00000020u;
  ::android::providers::settings::GlobalSettingsProto_Sms* temp = sms_;
  sms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Sms* GlobalSettingsProto::mutable_sms() {
  _has_bits_[3] |= 0x00000020u;
  if (sms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Sms>(GetArenaNoVirtual());
    sms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.sms)
  return sms_;
}
inline void GlobalSettingsProto::set_allocated_sms(::android::providers::settings::GlobalSettingsProto_Sms* sms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sms_;
  }
  if (sms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms, submessage_arena);
    }
    _has_bits_[3] |= 0x00000020u;
  } else {
    _has_bits_[3] &= ~0x00000020u;
  }
  sms_ = sms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.sms)
}

// optional .android.providers.settings.GlobalSettingsProto.Sounds sounds = 110;
inline bool GlobalSettingsProto::has_sounds() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void GlobalSettingsProto::clear_sounds() {
  if (sounds_ != nullptr) sounds_->Clear();
  _has_bits_[3] &= ~0x00000040u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Sounds& GlobalSettingsProto::sounds() const {
  const ::android::providers::settings::GlobalSettingsProto_Sounds* p = sounds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.sounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Sounds*>(
      &::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Sounds* GlobalSettingsProto::release_sounds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.sounds)
  _has_bits_[3] &= ~0x00000040u;
  ::android::providers::settings::GlobalSettingsProto_Sounds* temp = sounds_;
  sounds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Sounds* GlobalSettingsProto::mutable_sounds() {
  _has_bits_[3] |= 0x00000040u;
  if (sounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Sounds>(GetArenaNoVirtual());
    sounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.sounds)
  return sounds_;
}
inline void GlobalSettingsProto::set_allocated_sounds(::android::providers::settings::GlobalSettingsProto_Sounds* sounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sounds_;
  }
  if (sounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sounds, submessage_arena);
    }
    _has_bits_[3] |= 0x00000040u;
  } else {
    _has_bits_[3] &= ~0x00000040u;
  }
  sounds_ = sounds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.sounds)
}

// optional .android.providers.settings.GlobalSettingsProto.SoundTrigger sound_trigger = 111;
inline bool GlobalSettingsProto::has_sound_trigger() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void GlobalSettingsProto::clear_sound_trigger() {
  if (sound_trigger_ != nullptr) sound_trigger_->Clear();
  _has_bits_[3] &= ~0x00000080u;
}
inline const ::android::providers::settings::GlobalSettingsProto_SoundTrigger& GlobalSettingsProto::sound_trigger() const {
  const ::android::providers::settings::GlobalSettingsProto_SoundTrigger* p = sound_trigger_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.sound_trigger)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_SoundTrigger*>(
      &::android::providers::settings::_GlobalSettingsProto_SoundTrigger_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_SoundTrigger* GlobalSettingsProto::release_sound_trigger() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.sound_trigger)
  _has_bits_[3] &= ~0x00000080u;
  ::android::providers::settings::GlobalSettingsProto_SoundTrigger* temp = sound_trigger_;
  sound_trigger_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_SoundTrigger* GlobalSettingsProto::mutable_sound_trigger() {
  _has_bits_[3] |= 0x00000080u;
  if (sound_trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_SoundTrigger>(GetArenaNoVirtual());
    sound_trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.sound_trigger)
  return sound_trigger_;
}
inline void GlobalSettingsProto::set_allocated_sound_trigger(::android::providers::settings::GlobalSettingsProto_SoundTrigger* sound_trigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sound_trigger_;
  }
  if (sound_trigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sound_trigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound_trigger, submessage_arena);
    }
    _has_bits_[3] |= 0x00000080u;
  } else {
    _has_bits_[3] &= ~0x00000080u;
  }
  sound_trigger_ = sound_trigger;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.sound_trigger)
}

// optional .android.providers.settings.SettingProto speed_label_cache_eviction_age_ms = 112 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_speed_label_cache_eviction_age_ms() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::speed_label_cache_eviction_age_ms() const {
  const ::android::providers::settings::SettingProto* p = speed_label_cache_eviction_age_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.speed_label_cache_eviction_age_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_speed_label_cache_eviction_age_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.speed_label_cache_eviction_age_ms)
  _has_bits_[3] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = speed_label_cache_eviction_age_ms_;
  speed_label_cache_eviction_age_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_speed_label_cache_eviction_age_ms() {
  _has_bits_[3] |= 0x00000100u;
  if (speed_label_cache_eviction_age_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    speed_label_cache_eviction_age_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.speed_label_cache_eviction_age_ms)
  return speed_label_cache_eviction_age_ms_;
}
inline void GlobalSettingsProto::set_allocated_speed_label_cache_eviction_age_ms(::android::providers::settings::SettingProto* speed_label_cache_eviction_age_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_label_cache_eviction_age_ms_);
  }
  if (speed_label_cache_eviction_age_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed_label_cache_eviction_age_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_label_cache_eviction_age_ms, submessage_arena);
    }
    _has_bits_[3] |= 0x00000100u;
  } else {
    _has_bits_[3] &= ~0x00000100u;
  }
  speed_label_cache_eviction_age_ms_ = speed_label_cache_eviction_age_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.speed_label_cache_eviction_age_ms)
}

// optional .android.providers.settings.SettingProto sqlite_compatibility_wal_flags = 113 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_sqlite_compatibility_wal_flags() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::sqlite_compatibility_wal_flags() const {
  const ::android::providers::settings::SettingProto* p = sqlite_compatibility_wal_flags_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.sqlite_compatibility_wal_flags)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_sqlite_compatibility_wal_flags() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.sqlite_compatibility_wal_flags)
  _has_bits_[3] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = sqlite_compatibility_wal_flags_;
  sqlite_compatibility_wal_flags_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_sqlite_compatibility_wal_flags() {
  _has_bits_[3] |= 0x00000200u;
  if (sqlite_compatibility_wal_flags_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sqlite_compatibility_wal_flags_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.sqlite_compatibility_wal_flags)
  return sqlite_compatibility_wal_flags_;
}
inline void GlobalSettingsProto::set_allocated_sqlite_compatibility_wal_flags(::android::providers::settings::SettingProto* sqlite_compatibility_wal_flags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sqlite_compatibility_wal_flags_);
  }
  if (sqlite_compatibility_wal_flags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sqlite_compatibility_wal_flags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sqlite_compatibility_wal_flags, submessage_arena);
    }
    _has_bits_[3] |= 0x00000200u;
  } else {
    _has_bits_[3] &= ~0x00000200u;
  }
  sqlite_compatibility_wal_flags_ = sqlite_compatibility_wal_flags;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.sqlite_compatibility_wal_flags)
}

// optional .android.providers.settings.SettingProto stay_on_while_plugged_in = 114 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_stay_on_while_plugged_in() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::stay_on_while_plugged_in() const {
  const ::android::providers::settings::SettingProto* p = stay_on_while_plugged_in_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.stay_on_while_plugged_in)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_stay_on_while_plugged_in() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.stay_on_while_plugged_in)
  _has_bits_[3] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = stay_on_while_plugged_in_;
  stay_on_while_plugged_in_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_stay_on_while_plugged_in() {
  _has_bits_[3] |= 0x00000400u;
  if (stay_on_while_plugged_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    stay_on_while_plugged_in_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.stay_on_while_plugged_in)
  return stay_on_while_plugged_in_;
}
inline void GlobalSettingsProto::set_allocated_stay_on_while_plugged_in(::android::providers::settings::SettingProto* stay_on_while_plugged_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stay_on_while_plugged_in_);
  }
  if (stay_on_while_plugged_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stay_on_while_plugged_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stay_on_while_plugged_in, submessage_arena);
    }
    _has_bits_[3] |= 0x00000400u;
  } else {
    _has_bits_[3] &= ~0x00000400u;
  }
  stay_on_while_plugged_in_ = stay_on_while_plugged_in;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.stay_on_while_plugged_in)
}

// optional .android.providers.settings.GlobalSettingsProto.Storage storage = 115;
inline bool GlobalSettingsProto::has_storage() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void GlobalSettingsProto::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[3] &= ~0x00000800u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Storage& GlobalSettingsProto::storage() const {
  const ::android::providers::settings::GlobalSettingsProto_Storage* p = storage_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.storage)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Storage*>(
      &::android::providers::settings::_GlobalSettingsProto_Storage_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Storage* GlobalSettingsProto::release_storage() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.storage)
  _has_bits_[3] &= ~0x00000800u;
  ::android::providers::settings::GlobalSettingsProto_Storage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Storage* GlobalSettingsProto::mutable_storage() {
  _has_bits_[3] |= 0x00000800u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Storage>(GetArenaNoVirtual());
    storage_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.storage)
  return storage_;
}
inline void GlobalSettingsProto::set_allocated_storage(::android::providers::settings::GlobalSettingsProto_Storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[3] |= 0x00000800u;
  } else {
    _has_bits_[3] &= ~0x00000800u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.storage)
}

// optional .android.providers.settings.GlobalSettingsProto.Sync sync = 116;
inline bool GlobalSettingsProto::has_sync() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void GlobalSettingsProto::clear_sync() {
  if (sync_ != nullptr) sync_->Clear();
  _has_bits_[3] &= ~0x00001000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Sync& GlobalSettingsProto::sync() const {
  const ::android::providers::settings::GlobalSettingsProto_Sync* p = sync_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.sync)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Sync*>(
      &::android::providers::settings::_GlobalSettingsProto_Sync_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Sync* GlobalSettingsProto::release_sync() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.sync)
  _has_bits_[3] &= ~0x00001000u;
  ::android::providers::settings::GlobalSettingsProto_Sync* temp = sync_;
  sync_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Sync* GlobalSettingsProto::mutable_sync() {
  _has_bits_[3] |= 0x00001000u;
  if (sync_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Sync>(GetArenaNoVirtual());
    sync_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.sync)
  return sync_;
}
inline void GlobalSettingsProto::set_allocated_sync(::android::providers::settings::GlobalSettingsProto_Sync* sync) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sync_;
  }
  if (sync) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync, submessage_arena);
    }
    _has_bits_[3] |= 0x00001000u;
  } else {
    _has_bits_[3] &= ~0x00001000u;
  }
  sync_ = sync;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.sync)
}

// optional .android.providers.settings.GlobalSettingsProto.Sys sys = 117;
inline bool GlobalSettingsProto::has_sys() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
inline void GlobalSettingsProto::clear_sys() {
  if (sys_ != nullptr) sys_->Clear();
  _has_bits_[3] &= ~0x00002000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Sys& GlobalSettingsProto::sys() const {
  const ::android::providers::settings::GlobalSettingsProto_Sys* p = sys_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.sys)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Sys*>(
      &::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Sys* GlobalSettingsProto::release_sys() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.sys)
  _has_bits_[3] &= ~0x00002000u;
  ::android::providers::settings::GlobalSettingsProto_Sys* temp = sys_;
  sys_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Sys* GlobalSettingsProto::mutable_sys() {
  _has_bits_[3] |= 0x00002000u;
  if (sys_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Sys>(GetArenaNoVirtual());
    sys_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.sys)
  return sys_;
}
inline void GlobalSettingsProto::set_allocated_sys(::android::providers::settings::GlobalSettingsProto_Sys* sys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sys_;
  }
  if (sys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys, submessage_arena);
    }
    _has_bits_[3] |= 0x00002000u;
  } else {
    _has_bits_[3] &= ~0x00002000u;
  }
  sys_ = sys;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.sys)
}

// optional .android.providers.settings.SettingProto tcp_default_init_rwnd = 118 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_tcp_default_init_rwnd() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::tcp_default_init_rwnd() const {
  const ::android::providers::settings::SettingProto* p = tcp_default_init_rwnd_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.tcp_default_init_rwnd)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_tcp_default_init_rwnd() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.tcp_default_init_rwnd)
  _has_bits_[3] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = tcp_default_init_rwnd_;
  tcp_default_init_rwnd_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_tcp_default_init_rwnd() {
  _has_bits_[3] |= 0x00004000u;
  if (tcp_default_init_rwnd_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    tcp_default_init_rwnd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.tcp_default_init_rwnd)
  return tcp_default_init_rwnd_;
}
inline void GlobalSettingsProto::set_allocated_tcp_default_init_rwnd(::android::providers::settings::SettingProto* tcp_default_init_rwnd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tcp_default_init_rwnd_);
  }
  if (tcp_default_init_rwnd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tcp_default_init_rwnd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp_default_init_rwnd, submessage_arena);
    }
    _has_bits_[3] |= 0x00004000u;
  } else {
    _has_bits_[3] &= ~0x00004000u;
  }
  tcp_default_init_rwnd_ = tcp_default_init_rwnd;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.tcp_default_init_rwnd)
}

// optional .android.providers.settings.GlobalSettingsProto.TemperatureWarning temperature_warning = 119;
inline bool GlobalSettingsProto::has_temperature_warning() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void GlobalSettingsProto::clear_temperature_warning() {
  if (temperature_warning_ != nullptr) temperature_warning_->Clear();
  _has_bits_[3] &= ~0x00008000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_TemperatureWarning& GlobalSettingsProto::temperature_warning() const {
  const ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* p = temperature_warning_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.temperature_warning)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_TemperatureWarning*>(
      &::android::providers::settings::_GlobalSettingsProto_TemperatureWarning_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* GlobalSettingsProto::release_temperature_warning() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.temperature_warning)
  _has_bits_[3] &= ~0x00008000u;
  ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* temp = temperature_warning_;
  temperature_warning_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* GlobalSettingsProto::mutable_temperature_warning() {
  _has_bits_[3] |= 0x00008000u;
  if (temperature_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_TemperatureWarning>(GetArenaNoVirtual());
    temperature_warning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.temperature_warning)
  return temperature_warning_;
}
inline void GlobalSettingsProto::set_allocated_temperature_warning(::android::providers::settings::GlobalSettingsProto_TemperatureWarning* temperature_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete temperature_warning_;
  }
  if (temperature_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      temperature_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temperature_warning, submessage_arena);
    }
    _has_bits_[3] |= 0x00008000u;
  } else {
    _has_bits_[3] &= ~0x00008000u;
  }
  temperature_warning_ = temperature_warning;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.temperature_warning)
}

// optional .android.providers.settings.GlobalSettingsProto.Tether tether = 120;
inline bool GlobalSettingsProto::has_tether() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void GlobalSettingsProto::clear_tether() {
  if (tether_ != nullptr) tether_->Clear();
  _has_bits_[3] &= ~0x00010000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Tether& GlobalSettingsProto::tether() const {
  const ::android::providers::settings::GlobalSettingsProto_Tether* p = tether_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.tether)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Tether*>(
      &::android::providers::settings::_GlobalSettingsProto_Tether_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Tether* GlobalSettingsProto::release_tether() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.tether)
  _has_bits_[3] &= ~0x00010000u;
  ::android::providers::settings::GlobalSettingsProto_Tether* temp = tether_;
  tether_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Tether* GlobalSettingsProto::mutable_tether() {
  _has_bits_[3] |= 0x00010000u;
  if (tether_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Tether>(GetArenaNoVirtual());
    tether_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.tether)
  return tether_;
}
inline void GlobalSettingsProto::set_allocated_tether(::android::providers::settings::GlobalSettingsProto_Tether* tether) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tether_;
  }
  if (tether) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tether = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tether, submessage_arena);
    }
    _has_bits_[3] |= 0x00010000u;
  } else {
    _has_bits_[3] &= ~0x00010000u;
  }
  tether_ = tether;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.tether)
}

// optional .android.providers.settings.SettingProto text_classifier_constants = 121;
inline bool GlobalSettingsProto::has_text_classifier_constants() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::text_classifier_constants() const {
  const ::android::providers::settings::SettingProto* p = text_classifier_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.text_classifier_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_text_classifier_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.text_classifier_constants)
  _has_bits_[3] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = text_classifier_constants_;
  text_classifier_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_text_classifier_constants() {
  _has_bits_[3] |= 0x00020000u;
  if (text_classifier_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    text_classifier_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.text_classifier_constants)
  return text_classifier_constants_;
}
inline void GlobalSettingsProto::set_allocated_text_classifier_constants(::android::providers::settings::SettingProto* text_classifier_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_classifier_constants_);
  }
  if (text_classifier_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text_classifier_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_classifier_constants, submessage_arena);
    }
    _has_bits_[3] |= 0x00020000u;
  } else {
    _has_bits_[3] &= ~0x00020000u;
  }
  text_classifier_constants_ = text_classifier_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.text_classifier_constants)
}

// optional .android.providers.settings.SettingProto theater_mode_on = 122 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_theater_mode_on() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::theater_mode_on() const {
  const ::android::providers::settings::SettingProto* p = theater_mode_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.theater_mode_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_theater_mode_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.theater_mode_on)
  _has_bits_[3] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = theater_mode_on_;
  theater_mode_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_theater_mode_on() {
  _has_bits_[3] |= 0x00040000u;
  if (theater_mode_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    theater_mode_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.theater_mode_on)
  return theater_mode_on_;
}
inline void GlobalSettingsProto::set_allocated_theater_mode_on(::android::providers::settings::SettingProto* theater_mode_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theater_mode_on_);
  }
  if (theater_mode_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      theater_mode_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theater_mode_on, submessage_arena);
    }
    _has_bits_[3] |= 0x00040000u;
  } else {
    _has_bits_[3] &= ~0x00040000u;
  }
  theater_mode_on_ = theater_mode_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.theater_mode_on)
}

// optional .android.providers.settings.SettingProto time_only_mode_constants = 123 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_time_only_mode_constants() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::time_only_mode_constants() const {
  const ::android::providers::settings::SettingProto* p = time_only_mode_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.time_only_mode_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_time_only_mode_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.time_only_mode_constants)
  _has_bits_[3] &= ~0x00080000u;
  ::android::providers::settings::SettingProto* temp = time_only_mode_constants_;
  time_only_mode_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_time_only_mode_constants() {
  _has_bits_[3] |= 0x00080000u;
  if (time_only_mode_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    time_only_mode_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.time_only_mode_constants)
  return time_only_mode_constants_;
}
inline void GlobalSettingsProto::set_allocated_time_only_mode_constants(::android::providers::settings::SettingProto* time_only_mode_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_only_mode_constants_);
  }
  if (time_only_mode_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_only_mode_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_only_mode_constants, submessage_arena);
    }
    _has_bits_[3] |= 0x00080000u;
  } else {
    _has_bits_[3] &= ~0x00080000u;
  }
  time_only_mode_constants_ = time_only_mode_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.time_only_mode_constants)
}

// optional .android.providers.settings.SettingProto transition_animation_scale = 124 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_transition_animation_scale() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::transition_animation_scale() const {
  const ::android::providers::settings::SettingProto* p = transition_animation_scale_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.transition_animation_scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_transition_animation_scale() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.transition_animation_scale)
  _has_bits_[3] &= ~0x00100000u;
  ::android::providers::settings::SettingProto* temp = transition_animation_scale_;
  transition_animation_scale_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_transition_animation_scale() {
  _has_bits_[3] |= 0x00100000u;
  if (transition_animation_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    transition_animation_scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.transition_animation_scale)
  return transition_animation_scale_;
}
inline void GlobalSettingsProto::set_allocated_transition_animation_scale(::android::providers::settings::SettingProto* transition_animation_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transition_animation_scale_);
  }
  if (transition_animation_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transition_animation_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transition_animation_scale, submessage_arena);
    }
    _has_bits_[3] |= 0x00100000u;
  } else {
    _has_bits_[3] &= ~0x00100000u;
  }
  transition_animation_scale_ = transition_animation_scale;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.transition_animation_scale)
}

// optional .android.providers.settings.GlobalSettingsProto.Tzinfo tzinfo = 125;
inline bool GlobalSettingsProto::has_tzinfo() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
inline void GlobalSettingsProto::clear_tzinfo() {
  if (tzinfo_ != nullptr) tzinfo_->Clear();
  _has_bits_[3] &= ~0x00200000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Tzinfo& GlobalSettingsProto::tzinfo() const {
  const ::android::providers::settings::GlobalSettingsProto_Tzinfo* p = tzinfo_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.tzinfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Tzinfo*>(
      &::android::providers::settings::_GlobalSettingsProto_Tzinfo_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Tzinfo* GlobalSettingsProto::release_tzinfo() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.tzinfo)
  _has_bits_[3] &= ~0x00200000u;
  ::android::providers::settings::GlobalSettingsProto_Tzinfo* temp = tzinfo_;
  tzinfo_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Tzinfo* GlobalSettingsProto::mutable_tzinfo() {
  _has_bits_[3] |= 0x00200000u;
  if (tzinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Tzinfo>(GetArenaNoVirtual());
    tzinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.tzinfo)
  return tzinfo_;
}
inline void GlobalSettingsProto::set_allocated_tzinfo(::android::providers::settings::GlobalSettingsProto_Tzinfo* tzinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tzinfo_;
  }
  if (tzinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tzinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tzinfo, submessage_arena);
    }
    _has_bits_[3] |= 0x00200000u;
  } else {
    _has_bits_[3] &= ~0x00200000u;
  }
  tzinfo_ = tzinfo;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.tzinfo)
}

// optional .android.providers.settings.SettingProto unused_static_shared_lib_min_cache_period_ms = 126 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_unused_static_shared_lib_min_cache_period_ms() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::unused_static_shared_lib_min_cache_period_ms() const {
  const ::android::providers::settings::SettingProto* p = unused_static_shared_lib_min_cache_period_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.unused_static_shared_lib_min_cache_period_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_unused_static_shared_lib_min_cache_period_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.unused_static_shared_lib_min_cache_period_ms)
  _has_bits_[3] &= ~0x00400000u;
  ::android::providers::settings::SettingProto* temp = unused_static_shared_lib_min_cache_period_ms_;
  unused_static_shared_lib_min_cache_period_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_unused_static_shared_lib_min_cache_period_ms() {
  _has_bits_[3] |= 0x00400000u;
  if (unused_static_shared_lib_min_cache_period_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    unused_static_shared_lib_min_cache_period_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.unused_static_shared_lib_min_cache_period_ms)
  return unused_static_shared_lib_min_cache_period_ms_;
}
inline void GlobalSettingsProto::set_allocated_unused_static_shared_lib_min_cache_period_ms(::android::providers::settings::SettingProto* unused_static_shared_lib_min_cache_period_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unused_static_shared_lib_min_cache_period_ms_);
  }
  if (unused_static_shared_lib_min_cache_period_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unused_static_shared_lib_min_cache_period_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unused_static_shared_lib_min_cache_period_ms, submessage_arena);
    }
    _has_bits_[3] |= 0x00400000u;
  } else {
    _has_bits_[3] &= ~0x00400000u;
  }
  unused_static_shared_lib_min_cache_period_ms_ = unused_static_shared_lib_min_cache_period_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.unused_static_shared_lib_min_cache_period_ms)
}

// optional .android.providers.settings.SettingProto usb_mass_storage_enabled = 127 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_usb_mass_storage_enabled() const {
  return (_has_bits_[3] & 0x00800000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::usb_mass_storage_enabled() const {
  const ::android::providers::settings::SettingProto* p = usb_mass_storage_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.usb_mass_storage_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_usb_mass_storage_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.usb_mass_storage_enabled)
  _has_bits_[3] &= ~0x00800000u;
  ::android::providers::settings::SettingProto* temp = usb_mass_storage_enabled_;
  usb_mass_storage_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_usb_mass_storage_enabled() {
  _has_bits_[3] |= 0x00800000u;
  if (usb_mass_storage_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    usb_mass_storage_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.usb_mass_storage_enabled)
  return usb_mass_storage_enabled_;
}
inline void GlobalSettingsProto::set_allocated_usb_mass_storage_enabled(::android::providers::settings::SettingProto* usb_mass_storage_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(usb_mass_storage_enabled_);
  }
  if (usb_mass_storage_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      usb_mass_storage_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usb_mass_storage_enabled, submessage_arena);
    }
    _has_bits_[3] |= 0x00800000u;
  } else {
    _has_bits_[3] &= ~0x00800000u;
  }
  usb_mass_storage_enabled_ = usb_mass_storage_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.usb_mass_storage_enabled)
}

// optional .android.providers.settings.SettingProto use_google_mail = 128 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_use_google_mail() const {
  return (_has_bits_[3] & 0x01000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::use_google_mail() const {
  const ::android::providers::settings::SettingProto* p = use_google_mail_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.use_google_mail)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_use_google_mail() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.use_google_mail)
  _has_bits_[3] &= ~0x01000000u;
  ::android::providers::settings::SettingProto* temp = use_google_mail_;
  use_google_mail_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_use_google_mail() {
  _has_bits_[3] |= 0x01000000u;
  if (use_google_mail_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    use_google_mail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.use_google_mail)
  return use_google_mail_;
}
inline void GlobalSettingsProto::set_allocated_use_google_mail(::android::providers::settings::SettingProto* use_google_mail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_google_mail_);
  }
  if (use_google_mail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      use_google_mail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_google_mail, submessage_arena);
    }
    _has_bits_[3] |= 0x01000000u;
  } else {
    _has_bits_[3] &= ~0x01000000u;
  }
  use_google_mail_ = use_google_mail;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.use_google_mail)
}

// optional .android.providers.settings.SettingProto use_open_wifi_package = 129 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_use_open_wifi_package() const {
  return (_has_bits_[3] & 0x02000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::use_open_wifi_package() const {
  const ::android::providers::settings::SettingProto* p = use_open_wifi_package_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.use_open_wifi_package)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_use_open_wifi_package() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.use_open_wifi_package)
  _has_bits_[3] &= ~0x02000000u;
  ::android::providers::settings::SettingProto* temp = use_open_wifi_package_;
  use_open_wifi_package_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_use_open_wifi_package() {
  _has_bits_[3] |= 0x02000000u;
  if (use_open_wifi_package_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    use_open_wifi_package_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.use_open_wifi_package)
  return use_open_wifi_package_;
}
inline void GlobalSettingsProto::set_allocated_use_open_wifi_package(::android::providers::settings::SettingProto* use_open_wifi_package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_open_wifi_package_);
  }
  if (use_open_wifi_package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      use_open_wifi_package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_open_wifi_package, submessage_arena);
    }
    _has_bits_[3] |= 0x02000000u;
  } else {
    _has_bits_[3] &= ~0x02000000u;
  }
  use_open_wifi_package_ = use_open_wifi_package;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.use_open_wifi_package)
}

// optional .android.providers.settings.SettingProto uwb_enabled = 155 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_uwb_enabled() const {
  return (_has_bits_[4] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::uwb_enabled() const {
  const ::android::providers::settings::SettingProto* p = uwb_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.uwb_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_uwb_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.uwb_enabled)
  _has_bits_[4] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = uwb_enabled_;
  uwb_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_uwb_enabled() {
  _has_bits_[4] |= 0x00010000u;
  if (uwb_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    uwb_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.uwb_enabled)
  return uwb_enabled_;
}
inline void GlobalSettingsProto::set_allocated_uwb_enabled(::android::providers::settings::SettingProto* uwb_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uwb_enabled_);
  }
  if (uwb_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uwb_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uwb_enabled, submessage_arena);
    }
    _has_bits_[4] |= 0x00010000u;
  } else {
    _has_bits_[4] &= ~0x00010000u;
  }
  uwb_enabled_ = uwb_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.uwb_enabled)
}

// optional .android.providers.settings.SettingProto vt_ims_enabled = 130 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_vt_ims_enabled() const {
  return (_has_bits_[3] & 0x04000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::vt_ims_enabled() const {
  const ::android::providers::settings::SettingProto* p = vt_ims_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.vt_ims_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_vt_ims_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.vt_ims_enabled)
  _has_bits_[3] &= ~0x04000000u;
  ::android::providers::settings::SettingProto* temp = vt_ims_enabled_;
  vt_ims_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_vt_ims_enabled() {
  _has_bits_[3] |= 0x04000000u;
  if (vt_ims_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    vt_ims_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.vt_ims_enabled)
  return vt_ims_enabled_;
}
inline void GlobalSettingsProto::set_allocated_vt_ims_enabled(::android::providers::settings::SettingProto* vt_ims_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vt_ims_enabled_);
  }
  if (vt_ims_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vt_ims_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vt_ims_enabled, submessage_arena);
    }
    _has_bits_[3] |= 0x04000000u;
  } else {
    _has_bits_[3] &= ~0x04000000u;
  }
  vt_ims_enabled_ = vt_ims_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.vt_ims_enabled)
}

// optional .android.providers.settings.SettingProto wait_for_debugger = 131 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_wait_for_debugger() const {
  return (_has_bits_[3] & 0x08000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::wait_for_debugger() const {
  const ::android::providers::settings::SettingProto* p = wait_for_debugger_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.wait_for_debugger)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_wait_for_debugger() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.wait_for_debugger)
  _has_bits_[3] &= ~0x08000000u;
  ::android::providers::settings::SettingProto* temp = wait_for_debugger_;
  wait_for_debugger_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_wait_for_debugger() {
  _has_bits_[3] |= 0x08000000u;
  if (wait_for_debugger_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    wait_for_debugger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.wait_for_debugger)
  return wait_for_debugger_;
}
inline void GlobalSettingsProto::set_allocated_wait_for_debugger(::android::providers::settings::SettingProto* wait_for_debugger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wait_for_debugger_);
  }
  if (wait_for_debugger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wait_for_debugger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_for_debugger, submessage_arena);
    }
    _has_bits_[3] |= 0x08000000u;
  } else {
    _has_bits_[3] &= ~0x08000000u;
  }
  wait_for_debugger_ = wait_for_debugger;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.wait_for_debugger)
}

// optional .android.providers.settings.GlobalSettingsProto.Webview webview = 132;
inline bool GlobalSettingsProto::has_webview() const {
  return (_has_bits_[3] & 0x10000000u) != 0;
}
inline void GlobalSettingsProto::clear_webview() {
  if (webview_ != nullptr) webview_->Clear();
  _has_bits_[3] &= ~0x10000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Webview& GlobalSettingsProto::webview() const {
  const ::android::providers::settings::GlobalSettingsProto_Webview* p = webview_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.webview)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Webview*>(
      &::android::providers::settings::_GlobalSettingsProto_Webview_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Webview* GlobalSettingsProto::release_webview() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.webview)
  _has_bits_[3] &= ~0x10000000u;
  ::android::providers::settings::GlobalSettingsProto_Webview* temp = webview_;
  webview_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Webview* GlobalSettingsProto::mutable_webview() {
  _has_bits_[3] |= 0x10000000u;
  if (webview_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Webview>(GetArenaNoVirtual());
    webview_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.webview)
  return webview_;
}
inline void GlobalSettingsProto::set_allocated_webview(::android::providers::settings::GlobalSettingsProto_Webview* webview) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete webview_;
  }
  if (webview) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      webview = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, webview, submessage_arena);
    }
    _has_bits_[3] |= 0x10000000u;
  } else {
    _has_bits_[3] &= ~0x10000000u;
  }
  webview_ = webview;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.webview)
}

// optional .android.providers.settings.GlobalSettingsProto.Wfc wfc = 133;
inline bool GlobalSettingsProto::has_wfc() const {
  return (_has_bits_[3] & 0x20000000u) != 0;
}
inline void GlobalSettingsProto::clear_wfc() {
  if (wfc_ != nullptr) wfc_->Clear();
  _has_bits_[3] &= ~0x20000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Wfc& GlobalSettingsProto::wfc() const {
  const ::android::providers::settings::GlobalSettingsProto_Wfc* p = wfc_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.wfc)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Wfc*>(
      &::android::providers::settings::_GlobalSettingsProto_Wfc_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Wfc* GlobalSettingsProto::release_wfc() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.wfc)
  _has_bits_[3] &= ~0x20000000u;
  ::android::providers::settings::GlobalSettingsProto_Wfc* temp = wfc_;
  wfc_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Wfc* GlobalSettingsProto::mutable_wfc() {
  _has_bits_[3] |= 0x20000000u;
  if (wfc_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Wfc>(GetArenaNoVirtual());
    wfc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.wfc)
  return wfc_;
}
inline void GlobalSettingsProto::set_allocated_wfc(::android::providers::settings::GlobalSettingsProto_Wfc* wfc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wfc_;
  }
  if (wfc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wfc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wfc, submessage_arena);
    }
    _has_bits_[3] |= 0x20000000u;
  } else {
    _has_bits_[3] &= ~0x20000000u;
  }
  wfc_ = wfc;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.wfc)
}

// optional .android.providers.settings.GlobalSettingsProto.Wifi wifi = 134;
inline bool GlobalSettingsProto::has_wifi() const {
  return (_has_bits_[3] & 0x40000000u) != 0;
}
inline void GlobalSettingsProto::clear_wifi() {
  if (wifi_ != nullptr) wifi_->Clear();
  _has_bits_[3] &= ~0x40000000u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Wifi& GlobalSettingsProto::wifi() const {
  const ::android::providers::settings::GlobalSettingsProto_Wifi* p = wifi_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.wifi)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Wifi*>(
      &::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Wifi* GlobalSettingsProto::release_wifi() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.wifi)
  _has_bits_[3] &= ~0x40000000u;
  ::android::providers::settings::GlobalSettingsProto_Wifi* temp = wifi_;
  wifi_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Wifi* GlobalSettingsProto::mutable_wifi() {
  _has_bits_[3] |= 0x40000000u;
  if (wifi_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Wifi>(GetArenaNoVirtual());
    wifi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.wifi)
  return wifi_;
}
inline void GlobalSettingsProto::set_allocated_wifi(::android::providers::settings::GlobalSettingsProto_Wifi* wifi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wifi_;
  }
  if (wifi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi, submessage_arena);
    }
    _has_bits_[3] |= 0x40000000u;
  } else {
    _has_bits_[3] &= ~0x40000000u;
  }
  wifi_ = wifi;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.wifi)
}

// optional .android.providers.settings.SettingProto wimax_networks_available_notification_on = 135 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_wimax_networks_available_notification_on() const {
  return (_has_bits_[3] & 0x80000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::wimax_networks_available_notification_on() const {
  const ::android::providers::settings::SettingProto* p = wimax_networks_available_notification_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.wimax_networks_available_notification_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_wimax_networks_available_notification_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.wimax_networks_available_notification_on)
  _has_bits_[3] &= ~0x80000000u;
  ::android::providers::settings::SettingProto* temp = wimax_networks_available_notification_on_;
  wimax_networks_available_notification_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_wimax_networks_available_notification_on() {
  _has_bits_[3] |= 0x80000000u;
  if (wimax_networks_available_notification_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    wimax_networks_available_notification_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.wimax_networks_available_notification_on)
  return wimax_networks_available_notification_on_;
}
inline void GlobalSettingsProto::set_allocated_wimax_networks_available_notification_on(::android::providers::settings::SettingProto* wimax_networks_available_notification_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wimax_networks_available_notification_on_);
  }
  if (wimax_networks_available_notification_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wimax_networks_available_notification_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wimax_networks_available_notification_on, submessage_arena);
    }
    _has_bits_[3] |= 0x80000000u;
  } else {
    _has_bits_[3] &= ~0x80000000u;
  }
  wimax_networks_available_notification_on_ = wimax_networks_available_notification_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.wimax_networks_available_notification_on)
}

// optional .android.providers.settings.SettingProto window_animation_scale = 136 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_window_animation_scale() const {
  return (_has_bits_[4] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::window_animation_scale() const {
  const ::android::providers::settings::SettingProto* p = window_animation_scale_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.window_animation_scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_window_animation_scale() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.window_animation_scale)
  _has_bits_[4] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = window_animation_scale_;
  window_animation_scale_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_window_animation_scale() {
  _has_bits_[4] |= 0x00000001u;
  if (window_animation_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    window_animation_scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.window_animation_scale)
  return window_animation_scale_;
}
inline void GlobalSettingsProto::set_allocated_window_animation_scale(::android::providers::settings::SettingProto* window_animation_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_animation_scale_);
  }
  if (window_animation_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_animation_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_animation_scale, submessage_arena);
    }
    _has_bits_[4] |= 0x00000001u;
  } else {
    _has_bits_[4] &= ~0x00000001u;
  }
  window_animation_scale_ = window_animation_scale;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.window_animation_scale)
}

// optional .android.providers.settings.SettingProto wtf_is_fatal = 137 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_wtf_is_fatal() const {
  return (_has_bits_[4] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::wtf_is_fatal() const {
  const ::android::providers::settings::SettingProto* p = wtf_is_fatal_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.wtf_is_fatal)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_wtf_is_fatal() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.wtf_is_fatal)
  _has_bits_[4] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = wtf_is_fatal_;
  wtf_is_fatal_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_wtf_is_fatal() {
  _has_bits_[4] |= 0x00000002u;
  if (wtf_is_fatal_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    wtf_is_fatal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.wtf_is_fatal)
  return wtf_is_fatal_;
}
inline void GlobalSettingsProto::set_allocated_wtf_is_fatal(::android::providers::settings::SettingProto* wtf_is_fatal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wtf_is_fatal_);
  }
  if (wtf_is_fatal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wtf_is_fatal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wtf_is_fatal, submessage_arena);
    }
    _has_bits_[4] |= 0x00000002u;
  } else {
    _has_bits_[4] &= ~0x00000002u;
  }
  wtf_is_fatal_ = wtf_is_fatal;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.wtf_is_fatal)
}

// optional .android.providers.settings.GlobalSettingsProto.Zen zen = 138;
inline bool GlobalSettingsProto::has_zen() const {
  return (_has_bits_[4] & 0x00000004u) != 0;
}
inline void GlobalSettingsProto::clear_zen() {
  if (zen_ != nullptr) zen_->Clear();
  _has_bits_[4] &= ~0x00000004u;
}
inline const ::android::providers::settings::GlobalSettingsProto_Zen& GlobalSettingsProto::zen() const {
  const ::android::providers::settings::GlobalSettingsProto_Zen* p = zen_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.zen)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::GlobalSettingsProto_Zen*>(
      &::android::providers::settings::_GlobalSettingsProto_Zen_default_instance_);
}
inline ::android::providers::settings::GlobalSettingsProto_Zen* GlobalSettingsProto::release_zen() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.zen)
  _has_bits_[4] &= ~0x00000004u;
  ::android::providers::settings::GlobalSettingsProto_Zen* temp = zen_;
  zen_ = nullptr;
  return temp;
}
inline ::android::providers::settings::GlobalSettingsProto_Zen* GlobalSettingsProto::mutable_zen() {
  _has_bits_[4] |= 0x00000004u;
  if (zen_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::GlobalSettingsProto_Zen>(GetArenaNoVirtual());
    zen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.zen)
  return zen_;
}
inline void GlobalSettingsProto::set_allocated_zen(::android::providers::settings::GlobalSettingsProto_Zen* zen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zen_;
  }
  if (zen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zen, submessage_arena);
    }
    _has_bits_[4] |= 0x00000004u;
  } else {
    _has_bits_[4] &= ~0x00000004u;
  }
  zen_ = zen;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.zen)
}

// optional .android.providers.settings.SettingProto zram_enabled = 139 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_zram_enabled() const {
  return (_has_bits_[4] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::zram_enabled() const {
  const ::android::providers::settings::SettingProto* p = zram_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.zram_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_zram_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.zram_enabled)
  _has_bits_[4] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = zram_enabled_;
  zram_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_zram_enabled() {
  _has_bits_[4] |= 0x00000008u;
  if (zram_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    zram_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.zram_enabled)
  return zram_enabled_;
}
inline void GlobalSettingsProto::set_allocated_zram_enabled(::android::providers::settings::SettingProto* zram_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(zram_enabled_);
  }
  if (zram_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zram_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zram_enabled, submessage_arena);
    }
    _has_bits_[4] |= 0x00000008u;
  } else {
    _has_bits_[4] &= ~0x00000008u;
  }
  zram_enabled_ = zram_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.zram_enabled)
}

// optional .android.providers.settings.SettingProto app_ops_constants = 148 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_app_ops_constants() const {
  return (_has_bits_[4] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::app_ops_constants() const {
  const ::android::providers::settings::SettingProto* p = app_ops_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.app_ops_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_app_ops_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.app_ops_constants)
  _has_bits_[4] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = app_ops_constants_;
  app_ops_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_app_ops_constants() {
  _has_bits_[4] |= 0x00001000u;
  if (app_ops_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    app_ops_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.app_ops_constants)
  return app_ops_constants_;
}
inline void GlobalSettingsProto::set_allocated_app_ops_constants(::android::providers::settings::SettingProto* app_ops_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_ops_constants_);
  }
  if (app_ops_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app_ops_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_ops_constants, submessage_arena);
    }
    _has_bits_[4] |= 0x00001000u;
  } else {
    _has_bits_[4] &= ~0x00001000u;
  }
  app_ops_constants_ = app_ops_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.app_ops_constants)
}

// optional .android.providers.settings.SettingProto text_classifier_action_model_params = 145 [(.android.privacy) = {
inline bool GlobalSettingsProto::has_text_classifier_action_model_params() const {
  return (_has_bits_[4] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& GlobalSettingsProto::text_classifier_action_model_params() const {
  const ::android::providers::settings::SettingProto* p = text_classifier_action_model_params_;
  // @@protoc_insertion_point(field_get:android.providers.settings.GlobalSettingsProto.text_classifier_action_model_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::release_text_classifier_action_model_params() {
  // @@protoc_insertion_point(field_release:android.providers.settings.GlobalSettingsProto.text_classifier_action_model_params)
  _has_bits_[4] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = text_classifier_action_model_params_;
  text_classifier_action_model_params_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* GlobalSettingsProto::mutable_text_classifier_action_model_params() {
  _has_bits_[4] |= 0x00000200u;
  if (text_classifier_action_model_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    text_classifier_action_model_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.GlobalSettingsProto.text_classifier_action_model_params)
  return text_classifier_action_model_params_;
}
inline void GlobalSettingsProto::set_allocated_text_classifier_action_model_params(::android::providers::settings::SettingProto* text_classifier_action_model_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_classifier_action_model_params_);
  }
  if (text_classifier_action_model_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text_classifier_action_model_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_classifier_action_model_params, submessage_arena);
    }
    _has_bits_[4] |= 0x00000200u;
  } else {
    _has_bits_[4] &= ~0x00000200u;
  }
  text_classifier_action_model_params_ = text_classifier_action_model_params;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.GlobalSettingsProto.text_classifier_action_model_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace settings
}  // namespace providers
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto
