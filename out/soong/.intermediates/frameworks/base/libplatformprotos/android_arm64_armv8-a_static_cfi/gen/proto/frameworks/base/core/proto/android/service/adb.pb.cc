// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/adb.proto

#include "frameworks/base/core/proto/android/service/adb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdbDebuggingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto;
namespace android {
namespace service {
namespace adb {
class AdbServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdbServiceDumpProto> _instance;
} _AdbServiceDumpProto_default_instance_;
class AdbDebuggingManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdbDebuggingManagerProto> _instance;
} _AdbDebuggingManagerProto_default_instance_;
}  // namespace adb
}  // namespace service
}  // namespace android
static void InitDefaultsscc_info_AdbDebuggingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::adb::_AdbDebuggingManagerProto_default_instance_;
    new (ptr) ::android::service::adb::AdbDebuggingManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::adb::AdbDebuggingManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdbDebuggingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AdbDebuggingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto}, {}};

static void InitDefaultsscc_info_AdbServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::adb::_AdbServiceDumpProto_default_instance_;
    new (ptr) ::android::service::adb::AdbServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::adb::AdbServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdbServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AdbServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto}, {
      &scc_info_AdbDebuggingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto.base,}};

namespace android {
namespace service {
namespace adb {

// ===================================================================

void AdbServiceDumpProto::InitAsDefaultInstance() {
  ::android::service::adb::_AdbServiceDumpProto_default_instance_._instance.get_mutable()->debugging_manager_ = const_cast< ::android::service::adb::AdbDebuggingManagerProto*>(
      ::android::service::adb::AdbDebuggingManagerProto::internal_default_instance());
}
class AdbServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AdbServiceDumpProto>()._has_bits_);
  static const ::android::service::adb::AdbDebuggingManagerProto& debugging_manager(const AdbServiceDumpProto* msg);
  static void set_has_debugging_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::service::adb::AdbDebuggingManagerProto&
AdbServiceDumpProto::_Internal::debugging_manager(const AdbServiceDumpProto* msg) {
  return *msg->debugging_manager_;
}
AdbServiceDumpProto::AdbServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.adb.AdbServiceDumpProto)
}
AdbServiceDumpProto::AdbServiceDumpProto(const AdbServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_debugging_manager()) {
    debugging_manager_ = new ::android::service::adb::AdbDebuggingManagerProto(*from.debugging_manager_);
  } else {
    debugging_manager_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.service.adb.AdbServiceDumpProto)
}

void AdbServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdbServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto.base);
  debugging_manager_ = nullptr;
}

AdbServiceDumpProto::~AdbServiceDumpProto() {
  // @@protoc_insertion_point(destructor:android.service.adb.AdbServiceDumpProto)
  SharedDtor();
}

void AdbServiceDumpProto::SharedDtor() {
  if (this != internal_default_instance()) delete debugging_manager_;
}

void AdbServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdbServiceDumpProto& AdbServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdbServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto.base);
  return *internal_default_instance();
}


void AdbServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.adb.AdbServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(debugging_manager_ != nullptr);
    debugging_manager_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdbServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.service.adb.AdbDebuggingManagerProto debugging_manager = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_debugging_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdbServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.adb.AdbServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.service.adb.AdbDebuggingManagerProto debugging_manager = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debugging_manager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.adb.AdbServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.adb.AdbServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdbServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.adb.AdbServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.service.adb.AdbDebuggingManagerProto debugging_manager = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::debugging_manager(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.adb.AdbServiceDumpProto)
}

size_t AdbServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.adb.AdbServiceDumpProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.service.adb.AdbDebuggingManagerProto debugging_manager = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debugging_manager_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdbServiceDumpProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AdbServiceDumpProto*>(
      &from));
}

void AdbServiceDumpProto::MergeFrom(const AdbServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.adb.AdbServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_debugging_manager()) {
    mutable_debugging_manager()->::android::service::adb::AdbDebuggingManagerProto::MergeFrom(from.debugging_manager());
  }
}

void AdbServiceDumpProto::CopyFrom(const AdbServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.adb.AdbServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdbServiceDumpProto::IsInitialized() const {
  return true;
}

void AdbServiceDumpProto::InternalSwap(AdbServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(debugging_manager_, other->debugging_manager_);
}

std::string AdbServiceDumpProto::GetTypeName() const {
  return "android.service.adb.AdbServiceDumpProto";
}


// ===================================================================

void AdbDebuggingManagerProto::InitAsDefaultInstance() {
}
class AdbDebuggingManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AdbDebuggingManagerProto>()._has_bits_);
  static void set_has_connected_to_adb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_key_recevied(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_system_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_keystore(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AdbDebuggingManagerProto::AdbDebuggingManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.adb.AdbDebuggingManagerProto)
}
AdbDebuggingManagerProto::AdbDebuggingManagerProto(const AdbDebuggingManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_key_recevied_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_key_recevied()) {
    last_key_recevied_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_key_recevied_);
  }
  user_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_keys()) {
    user_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_keys_);
  }
  system_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_keys()) {
    system_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_keys_);
  }
  keystore_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_keystore()) {
    keystore_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.keystore_);
  }
  connected_to_adb_ = from.connected_to_adb_;
  // @@protoc_insertion_point(copy_constructor:android.service.adb.AdbDebuggingManagerProto)
}

void AdbDebuggingManagerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdbDebuggingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto.base);
  last_key_recevied_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_keys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keystore_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connected_to_adb_ = false;
}

AdbDebuggingManagerProto::~AdbDebuggingManagerProto() {
  // @@protoc_insertion_point(destructor:android.service.adb.AdbDebuggingManagerProto)
  SharedDtor();
}

void AdbDebuggingManagerProto::SharedDtor() {
  last_key_recevied_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_keys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  system_keys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keystore_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdbDebuggingManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdbDebuggingManagerProto& AdbDebuggingManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdbDebuggingManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto.base);
  return *internal_default_instance();
}


void AdbDebuggingManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.adb.AdbDebuggingManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      last_key_recevied_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_keys_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      system_keys_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      keystore_.ClearNonDefaultToEmptyNoArena();
    }
  }
  connected_to_adb_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdbDebuggingManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool connected_to_adb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_connected_to_adb(&has_bits);
          connected_to_adb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_key_recevied = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_last_key_recevied(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_keys = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_keys(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string system_keys = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_system_keys(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string keystore = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_keystore(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdbDebuggingManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.adb.AdbDebuggingManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool connected_to_adb = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_connected_to_adb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_to_adb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_key_recevied = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_key_recevied()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_keys = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_keys = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_system_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string keystore = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_keystore()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.adb.AdbDebuggingManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.adb.AdbDebuggingManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdbDebuggingManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.adb.AdbDebuggingManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connected_to_adb = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->connected_to_adb(), output);
  }

  // optional string last_key_recevied = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->last_key_recevied(), output);
  }

  // optional string user_keys = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_keys(), output);
  }

  // optional string system_keys = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->system_keys(), output);
  }

  // optional string keystore = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->keystore(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.adb.AdbDebuggingManagerProto)
}

size_t AdbDebuggingManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.adb.AdbDebuggingManagerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string last_key_recevied = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_key_recevied());
    }

    // optional string user_keys = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->user_keys());
    }

    // optional string system_keys = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->system_keys());
    }

    // optional string keystore = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->keystore());
    }

    // optional bool connected_to_adb = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdbDebuggingManagerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AdbDebuggingManagerProto*>(
      &from));
}

void AdbDebuggingManagerProto::MergeFrom(const AdbDebuggingManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.adb.AdbDebuggingManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      last_key_recevied_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_key_recevied_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      user_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_keys_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      system_keys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.system_keys_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      keystore_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.keystore_);
    }
    if (cached_has_bits & 0x00000010u) {
      connected_to_adb_ = from.connected_to_adb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdbDebuggingManagerProto::CopyFrom(const AdbDebuggingManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.adb.AdbDebuggingManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdbDebuggingManagerProto::IsInitialized() const {
  return true;
}

void AdbDebuggingManagerProto::InternalSwap(AdbDebuggingManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  last_key_recevied_.Swap(&other->last_key_recevied_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_keys_.Swap(&other->user_keys_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_keys_.Swap(&other->system_keys_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  keystore_.Swap(&other->keystore_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connected_to_adb_, other->connected_to_adb_);
}

std::string AdbDebuggingManagerProto::GetTypeName() const {
  return "android.service.adb.AdbDebuggingManagerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace adb
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::service::adb::AdbServiceDumpProto* Arena::CreateMaybeMessage< ::android::service::adb::AdbServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::adb::AdbServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::adb::AdbDebuggingManagerProto* Arena::CreateMaybeMessage< ::android::service::adb::AdbDebuggingManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::adb::AdbDebuggingManagerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
