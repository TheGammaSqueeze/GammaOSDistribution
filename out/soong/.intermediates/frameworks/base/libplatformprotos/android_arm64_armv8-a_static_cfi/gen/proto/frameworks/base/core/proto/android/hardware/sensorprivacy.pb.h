// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/hardware/sensorprivacy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace service {
class SensorPrivacyIndividualEnabledSensorProto;
class SensorPrivacyIndividualEnabledSensorProtoDefaultTypeInternal;
extern SensorPrivacyIndividualEnabledSensorProtoDefaultTypeInternal _SensorPrivacyIndividualEnabledSensorProto_default_instance_;
class SensorPrivacyServiceDumpProto;
class SensorPrivacyServiceDumpProtoDefaultTypeInternal;
extern SensorPrivacyServiceDumpProtoDefaultTypeInternal _SensorPrivacyServiceDumpProto_default_instance_;
class SensorPrivacyToggleSourceProto;
class SensorPrivacyToggleSourceProtoDefaultTypeInternal;
extern SensorPrivacyToggleSourceProtoDefaultTypeInternal _SensorPrivacyToggleSourceProto_default_instance_;
class SensorPrivacyUserProto;
class SensorPrivacyUserProtoDefaultTypeInternal;
extern SensorPrivacyUserProtoDefaultTypeInternal _SensorPrivacyUserProto_default_instance_;
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::SensorPrivacyIndividualEnabledSensorProto* Arena::CreateMaybeMessage<::android::service::SensorPrivacyIndividualEnabledSensorProto>(Arena*);
template<> ::android::service::SensorPrivacyServiceDumpProto* Arena::CreateMaybeMessage<::android::service::SensorPrivacyServiceDumpProto>(Arena*);
template<> ::android::service::SensorPrivacyToggleSourceProto* Arena::CreateMaybeMessage<::android::service::SensorPrivacyToggleSourceProto>(Arena*);
template<> ::android::service::SensorPrivacyUserProto* Arena::CreateMaybeMessage<::android::service::SensorPrivacyUserProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {

enum SensorPrivacyIndividualEnabledSensorProto_Sensor : int {
  SensorPrivacyIndividualEnabledSensorProto_Sensor_UNKNOWN = 0,
  SensorPrivacyIndividualEnabledSensorProto_Sensor_MICROPHONE = 1,
  SensorPrivacyIndividualEnabledSensorProto_Sensor_CAMERA = 2
};
bool SensorPrivacyIndividualEnabledSensorProto_Sensor_IsValid(int value);
constexpr SensorPrivacyIndividualEnabledSensorProto_Sensor SensorPrivacyIndividualEnabledSensorProto_Sensor_Sensor_MIN = SensorPrivacyIndividualEnabledSensorProto_Sensor_UNKNOWN;
constexpr SensorPrivacyIndividualEnabledSensorProto_Sensor SensorPrivacyIndividualEnabledSensorProto_Sensor_Sensor_MAX = SensorPrivacyIndividualEnabledSensorProto_Sensor_CAMERA;
constexpr int SensorPrivacyIndividualEnabledSensorProto_Sensor_Sensor_ARRAYSIZE = SensorPrivacyIndividualEnabledSensorProto_Sensor_Sensor_MAX + 1;

const std::string& SensorPrivacyIndividualEnabledSensorProto_Sensor_Name(SensorPrivacyIndividualEnabledSensorProto_Sensor value);
template<typename T>
inline const std::string& SensorPrivacyIndividualEnabledSensorProto_Sensor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorPrivacyIndividualEnabledSensorProto_Sensor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorPrivacyIndividualEnabledSensorProto_Sensor_Name.");
  return SensorPrivacyIndividualEnabledSensorProto_Sensor_Name(static_cast<SensorPrivacyIndividualEnabledSensorProto_Sensor>(enum_t_value));
}
bool SensorPrivacyIndividualEnabledSensorProto_Sensor_Parse(
    const std::string& name, SensorPrivacyIndividualEnabledSensorProto_Sensor* value);
enum SensorPrivacyToggleSourceProto_Source : int {
  SensorPrivacyToggleSourceProto_Source_UNKNOWN = 0,
  SensorPrivacyToggleSourceProto_Source_QS_TILE = 1,
  SensorPrivacyToggleSourceProto_Source_SETTINGS = 2,
  SensorPrivacyToggleSourceProto_Source_DIALOG = 3,
  SensorPrivacyToggleSourceProto_Source_SHELL = 4,
  SensorPrivacyToggleSourceProto_Source_OTHER = 5
};
bool SensorPrivacyToggleSourceProto_Source_IsValid(int value);
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto_Source_Source_MIN = SensorPrivacyToggleSourceProto_Source_UNKNOWN;
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto_Source_Source_MAX = SensorPrivacyToggleSourceProto_Source_OTHER;
constexpr int SensorPrivacyToggleSourceProto_Source_Source_ARRAYSIZE = SensorPrivacyToggleSourceProto_Source_Source_MAX + 1;

const std::string& SensorPrivacyToggleSourceProto_Source_Name(SensorPrivacyToggleSourceProto_Source value);
template<typename T>
inline const std::string& SensorPrivacyToggleSourceProto_Source_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorPrivacyToggleSourceProto_Source>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorPrivacyToggleSourceProto_Source_Name.");
  return SensorPrivacyToggleSourceProto_Source_Name(static_cast<SensorPrivacyToggleSourceProto_Source>(enum_t_value));
}
bool SensorPrivacyToggleSourceProto_Source_Parse(
    const std::string& name, SensorPrivacyToggleSourceProto_Source* value);
// ===================================================================

class SensorPrivacyServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.SensorPrivacyServiceDumpProto) */ {
 public:
  SensorPrivacyServiceDumpProto();
  virtual ~SensorPrivacyServiceDumpProto();

  SensorPrivacyServiceDumpProto(const SensorPrivacyServiceDumpProto& from);
  SensorPrivacyServiceDumpProto(SensorPrivacyServiceDumpProto&& from) noexcept
    : SensorPrivacyServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline SensorPrivacyServiceDumpProto& operator=(const SensorPrivacyServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorPrivacyServiceDumpProto& operator=(SensorPrivacyServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SensorPrivacyServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorPrivacyServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const SensorPrivacyServiceDumpProto*>(
               &_SensorPrivacyServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorPrivacyServiceDumpProto& a, SensorPrivacyServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorPrivacyServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorPrivacyServiceDumpProto* New() const final {
    return CreateMaybeMessage<SensorPrivacyServiceDumpProto>(nullptr);
  }

  SensorPrivacyServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorPrivacyServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SensorPrivacyServiceDumpProto& from);
  void MergeFrom(const SensorPrivacyServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorPrivacyServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorPrivacyServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndividualEnabledSensorFieldNumber = 2,
    kUserFieldNumber = 3,
    kIsEnabledFieldNumber = 1,
  };
  // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 2;
  int individual_enabled_sensor_size() const;
  void clear_individual_enabled_sensor();
  ::android::service::SensorPrivacyIndividualEnabledSensorProto* mutable_individual_enabled_sensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto >*
      mutable_individual_enabled_sensor();
  const ::android::service::SensorPrivacyIndividualEnabledSensorProto& individual_enabled_sensor(int index) const;
  ::android::service::SensorPrivacyIndividualEnabledSensorProto* add_individual_enabled_sensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto >&
      individual_enabled_sensor() const;

  // repeated .android.service.SensorPrivacyUserProto user = 3;
  int user_size() const;
  void clear_user();
  ::android::service::SensorPrivacyUserProto* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyUserProto >*
      mutable_user();
  const ::android::service::SensorPrivacyUserProto& user(int index) const;
  ::android::service::SensorPrivacyUserProto* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyUserProto >&
      user() const;

  // optional bool is_enabled = 1;
  bool has_is_enabled() const;
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);

  // @@protoc_insertion_point(class_scope:android.service.SensorPrivacyServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto > individual_enabled_sensor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyUserProto > user_;
  bool is_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto;
};
// -------------------------------------------------------------------

class SensorPrivacyUserProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.SensorPrivacyUserProto) */ {
 public:
  SensorPrivacyUserProto();
  virtual ~SensorPrivacyUserProto();

  SensorPrivacyUserProto(const SensorPrivacyUserProto& from);
  SensorPrivacyUserProto(SensorPrivacyUserProto&& from) noexcept
    : SensorPrivacyUserProto() {
    *this = ::std::move(from);
  }

  inline SensorPrivacyUserProto& operator=(const SensorPrivacyUserProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorPrivacyUserProto& operator=(SensorPrivacyUserProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SensorPrivacyUserProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorPrivacyUserProto* internal_default_instance() {
    return reinterpret_cast<const SensorPrivacyUserProto*>(
               &_SensorPrivacyUserProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorPrivacyUserProto& a, SensorPrivacyUserProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorPrivacyUserProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorPrivacyUserProto* New() const final {
    return CreateMaybeMessage<SensorPrivacyUserProto>(nullptr);
  }

  SensorPrivacyUserProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorPrivacyUserProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SensorPrivacyUserProto& from);
  void MergeFrom(const SensorPrivacyUserProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorPrivacyUserProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorPrivacyUserProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndividualEnabledSensorFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kIsEnabledFieldNumber = 2,
  };
  // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 3;
  int individual_enabled_sensor_size() const;
  void clear_individual_enabled_sensor();
  ::android::service::SensorPrivacyIndividualEnabledSensorProto* mutable_individual_enabled_sensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto >*
      mutable_individual_enabled_sensor();
  const ::android::service::SensorPrivacyIndividualEnabledSensorProto& individual_enabled_sensor(int index) const;
  ::android::service::SensorPrivacyIndividualEnabledSensorProto* add_individual_enabled_sensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto >&
      individual_enabled_sensor() const;

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_enabled = 2;
  bool has_is_enabled() const;
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);

  // @@protoc_insertion_point(class_scope:android.service.SensorPrivacyUserProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto > individual_enabled_sensor_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  bool is_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto;
};
// -------------------------------------------------------------------

class SensorPrivacyIndividualEnabledSensorProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.SensorPrivacyIndividualEnabledSensorProto) */ {
 public:
  SensorPrivacyIndividualEnabledSensorProto();
  virtual ~SensorPrivacyIndividualEnabledSensorProto();

  SensorPrivacyIndividualEnabledSensorProto(const SensorPrivacyIndividualEnabledSensorProto& from);
  SensorPrivacyIndividualEnabledSensorProto(SensorPrivacyIndividualEnabledSensorProto&& from) noexcept
    : SensorPrivacyIndividualEnabledSensorProto() {
    *this = ::std::move(from);
  }

  inline SensorPrivacyIndividualEnabledSensorProto& operator=(const SensorPrivacyIndividualEnabledSensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorPrivacyIndividualEnabledSensorProto& operator=(SensorPrivacyIndividualEnabledSensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SensorPrivacyIndividualEnabledSensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorPrivacyIndividualEnabledSensorProto* internal_default_instance() {
    return reinterpret_cast<const SensorPrivacyIndividualEnabledSensorProto*>(
               &_SensorPrivacyIndividualEnabledSensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensorPrivacyIndividualEnabledSensorProto& a, SensorPrivacyIndividualEnabledSensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorPrivacyIndividualEnabledSensorProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorPrivacyIndividualEnabledSensorProto* New() const final {
    return CreateMaybeMessage<SensorPrivacyIndividualEnabledSensorProto>(nullptr);
  }

  SensorPrivacyIndividualEnabledSensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorPrivacyIndividualEnabledSensorProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SensorPrivacyIndividualEnabledSensorProto& from);
  void MergeFrom(const SensorPrivacyIndividualEnabledSensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorPrivacyIndividualEnabledSensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorPrivacyIndividualEnabledSensorProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SensorPrivacyIndividualEnabledSensorProto_Sensor Sensor;
  static constexpr Sensor UNKNOWN =
    SensorPrivacyIndividualEnabledSensorProto_Sensor_UNKNOWN;
  static constexpr Sensor MICROPHONE =
    SensorPrivacyIndividualEnabledSensorProto_Sensor_MICROPHONE;
  static constexpr Sensor CAMERA =
    SensorPrivacyIndividualEnabledSensorProto_Sensor_CAMERA;
  static inline bool Sensor_IsValid(int value) {
    return SensorPrivacyIndividualEnabledSensorProto_Sensor_IsValid(value);
  }
  static constexpr Sensor Sensor_MIN =
    SensorPrivacyIndividualEnabledSensorProto_Sensor_Sensor_MIN;
  static constexpr Sensor Sensor_MAX =
    SensorPrivacyIndividualEnabledSensorProto_Sensor_Sensor_MAX;
  static constexpr int Sensor_ARRAYSIZE =
    SensorPrivacyIndividualEnabledSensorProto_Sensor_Sensor_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Sensor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sensor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sensor_Name.");
    return SensorPrivacyIndividualEnabledSensorProto_Sensor_Name(enum_t_value);
  }
  static inline bool Sensor_Parse(const std::string& name,
      Sensor* value) {
    return SensorPrivacyIndividualEnabledSensorProto_Sensor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSensorFieldNumber = 1,
    kIsEnabledFieldNumber = 2,
  };
  // optional .android.service.SensorPrivacyIndividualEnabledSensorProto.Sensor sensor = 1;
  bool has_sensor() const;
  void clear_sensor();
  ::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor sensor() const;
  void set_sensor(::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor value);

  // optional bool is_enabled = 2;
  bool has_is_enabled() const;
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);

  // @@protoc_insertion_point(class_scope:android.service.SensorPrivacyIndividualEnabledSensorProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int sensor_;
  bool is_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto;
};
// -------------------------------------------------------------------

class SensorPrivacyToggleSourceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.SensorPrivacyToggleSourceProto) */ {
 public:
  SensorPrivacyToggleSourceProto();
  virtual ~SensorPrivacyToggleSourceProto();

  SensorPrivacyToggleSourceProto(const SensorPrivacyToggleSourceProto& from);
  SensorPrivacyToggleSourceProto(SensorPrivacyToggleSourceProto&& from) noexcept
    : SensorPrivacyToggleSourceProto() {
    *this = ::std::move(from);
  }

  inline SensorPrivacyToggleSourceProto& operator=(const SensorPrivacyToggleSourceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorPrivacyToggleSourceProto& operator=(SensorPrivacyToggleSourceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SensorPrivacyToggleSourceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorPrivacyToggleSourceProto* internal_default_instance() {
    return reinterpret_cast<const SensorPrivacyToggleSourceProto*>(
               &_SensorPrivacyToggleSourceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SensorPrivacyToggleSourceProto& a, SensorPrivacyToggleSourceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorPrivacyToggleSourceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorPrivacyToggleSourceProto* New() const final {
    return CreateMaybeMessage<SensorPrivacyToggleSourceProto>(nullptr);
  }

  SensorPrivacyToggleSourceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorPrivacyToggleSourceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SensorPrivacyToggleSourceProto& from);
  void MergeFrom(const SensorPrivacyToggleSourceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SensorPrivacyToggleSourceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.SensorPrivacyToggleSourceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SensorPrivacyToggleSourceProto_Source Source;
  static constexpr Source UNKNOWN =
    SensorPrivacyToggleSourceProto_Source_UNKNOWN;
  static constexpr Source QS_TILE =
    SensorPrivacyToggleSourceProto_Source_QS_TILE;
  static constexpr Source SETTINGS =
    SensorPrivacyToggleSourceProto_Source_SETTINGS;
  static constexpr Source DIALOG =
    SensorPrivacyToggleSourceProto_Source_DIALOG;
  static constexpr Source SHELL =
    SensorPrivacyToggleSourceProto_Source_SHELL;
  static constexpr Source OTHER =
    SensorPrivacyToggleSourceProto_Source_OTHER;
  static inline bool Source_IsValid(int value) {
    return SensorPrivacyToggleSourceProto_Source_IsValid(value);
  }
  static constexpr Source Source_MIN =
    SensorPrivacyToggleSourceProto_Source_Source_MIN;
  static constexpr Source Source_MAX =
    SensorPrivacyToggleSourceProto_Source_Source_MAX;
  static constexpr int Source_ARRAYSIZE =
    SensorPrivacyToggleSourceProto_Source_Source_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Source_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Source>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Source_Name.");
    return SensorPrivacyToggleSourceProto_Source_Name(enum_t_value);
  }
  static inline bool Source_Parse(const std::string& name,
      Source* value) {
    return SensorPrivacyToggleSourceProto_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // optional .android.service.SensorPrivacyToggleSourceProto.Source source = 1;
  bool has_source() const;
  void clear_source();
  ::android::service::SensorPrivacyToggleSourceProto_Source source() const;
  void set_source(::android::service::SensorPrivacyToggleSourceProto_Source value);

  // @@protoc_insertion_point(class_scope:android.service.SensorPrivacyToggleSourceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int source_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorPrivacyServiceDumpProto

// optional bool is_enabled = 1;
inline bool SensorPrivacyServiceDumpProto::has_is_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorPrivacyServiceDumpProto::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SensorPrivacyServiceDumpProto::is_enabled() const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyServiceDumpProto.is_enabled)
  return is_enabled_;
}
inline void SensorPrivacyServiceDumpProto::set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_enabled_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorPrivacyServiceDumpProto.is_enabled)
}

// repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 2;
inline int SensorPrivacyServiceDumpProto::individual_enabled_sensor_size() const {
  return individual_enabled_sensor_.size();
}
inline void SensorPrivacyServiceDumpProto::clear_individual_enabled_sensor() {
  individual_enabled_sensor_.Clear();
}
inline ::android::service::SensorPrivacyIndividualEnabledSensorProto* SensorPrivacyServiceDumpProto::mutable_individual_enabled_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorPrivacyServiceDumpProto.individual_enabled_sensor)
  return individual_enabled_sensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto >*
SensorPrivacyServiceDumpProto::mutable_individual_enabled_sensor() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorPrivacyServiceDumpProto.individual_enabled_sensor)
  return &individual_enabled_sensor_;
}
inline const ::android::service::SensorPrivacyIndividualEnabledSensorProto& SensorPrivacyServiceDumpProto::individual_enabled_sensor(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyServiceDumpProto.individual_enabled_sensor)
  return individual_enabled_sensor_.Get(index);
}
inline ::android::service::SensorPrivacyIndividualEnabledSensorProto* SensorPrivacyServiceDumpProto::add_individual_enabled_sensor() {
  // @@protoc_insertion_point(field_add:android.service.SensorPrivacyServiceDumpProto.individual_enabled_sensor)
  return individual_enabled_sensor_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto >&
SensorPrivacyServiceDumpProto::individual_enabled_sensor() const {
  // @@protoc_insertion_point(field_list:android.service.SensorPrivacyServiceDumpProto.individual_enabled_sensor)
  return individual_enabled_sensor_;
}

// repeated .android.service.SensorPrivacyUserProto user = 3;
inline int SensorPrivacyServiceDumpProto::user_size() const {
  return user_.size();
}
inline void SensorPrivacyServiceDumpProto::clear_user() {
  user_.Clear();
}
inline ::android::service::SensorPrivacyUserProto* SensorPrivacyServiceDumpProto::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorPrivacyServiceDumpProto.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyUserProto >*
SensorPrivacyServiceDumpProto::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorPrivacyServiceDumpProto.user)
  return &user_;
}
inline const ::android::service::SensorPrivacyUserProto& SensorPrivacyServiceDumpProto::user(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyServiceDumpProto.user)
  return user_.Get(index);
}
inline ::android::service::SensorPrivacyUserProto* SensorPrivacyServiceDumpProto::add_user() {
  // @@protoc_insertion_point(field_add:android.service.SensorPrivacyServiceDumpProto.user)
  return user_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyUserProto >&
SensorPrivacyServiceDumpProto::user() const {
  // @@protoc_insertion_point(field_list:android.service.SensorPrivacyServiceDumpProto.user)
  return user_;
}

// -------------------------------------------------------------------

// SensorPrivacyUserProto

// optional int32 user_id = 1;
inline bool SensorPrivacyUserProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorPrivacyUserProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SensorPrivacyUserProto::user_id() const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyUserProto.user_id)
  return user_id_;
}
inline void SensorPrivacyUserProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorPrivacyUserProto.user_id)
}

// optional bool is_enabled = 2;
inline bool SensorPrivacyUserProto::has_is_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorPrivacyUserProto::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SensorPrivacyUserProto::is_enabled() const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyUserProto.is_enabled)
  return is_enabled_;
}
inline void SensorPrivacyUserProto::set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_enabled_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorPrivacyUserProto.is_enabled)
}

// repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 3;
inline int SensorPrivacyUserProto::individual_enabled_sensor_size() const {
  return individual_enabled_sensor_.size();
}
inline void SensorPrivacyUserProto::clear_individual_enabled_sensor() {
  individual_enabled_sensor_.Clear();
}
inline ::android::service::SensorPrivacyIndividualEnabledSensorProto* SensorPrivacyUserProto::mutable_individual_enabled_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.SensorPrivacyUserProto.individual_enabled_sensor)
  return individual_enabled_sensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto >*
SensorPrivacyUserProto::mutable_individual_enabled_sensor() {
  // @@protoc_insertion_point(field_mutable_list:android.service.SensorPrivacyUserProto.individual_enabled_sensor)
  return &individual_enabled_sensor_;
}
inline const ::android::service::SensorPrivacyIndividualEnabledSensorProto& SensorPrivacyUserProto::individual_enabled_sensor(int index) const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyUserProto.individual_enabled_sensor)
  return individual_enabled_sensor_.Get(index);
}
inline ::android::service::SensorPrivacyIndividualEnabledSensorProto* SensorPrivacyUserProto::add_individual_enabled_sensor() {
  // @@protoc_insertion_point(field_add:android.service.SensorPrivacyUserProto.individual_enabled_sensor)
  return individual_enabled_sensor_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::SensorPrivacyIndividualEnabledSensorProto >&
SensorPrivacyUserProto::individual_enabled_sensor() const {
  // @@protoc_insertion_point(field_list:android.service.SensorPrivacyUserProto.individual_enabled_sensor)
  return individual_enabled_sensor_;
}

// -------------------------------------------------------------------

// SensorPrivacyIndividualEnabledSensorProto

// optional .android.service.SensorPrivacyIndividualEnabledSensorProto.Sensor sensor = 1;
inline bool SensorPrivacyIndividualEnabledSensorProto::has_sensor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorPrivacyIndividualEnabledSensorProto::clear_sensor() {
  sensor_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor SensorPrivacyIndividualEnabledSensorProto::sensor() const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyIndividualEnabledSensorProto.sensor)
  return static_cast< ::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor >(sensor_);
}
inline void SensorPrivacyIndividualEnabledSensorProto::set_sensor(::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor value) {
  assert(::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  sensor_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorPrivacyIndividualEnabledSensorProto.sensor)
}

// optional bool is_enabled = 2;
inline bool SensorPrivacyIndividualEnabledSensorProto::has_is_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorPrivacyIndividualEnabledSensorProto::clear_is_enabled() {
  is_enabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SensorPrivacyIndividualEnabledSensorProto::is_enabled() const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyIndividualEnabledSensorProto.is_enabled)
  return is_enabled_;
}
inline void SensorPrivacyIndividualEnabledSensorProto::set_is_enabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_enabled_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorPrivacyIndividualEnabledSensorProto.is_enabled)
}

// -------------------------------------------------------------------

// SensorPrivacyToggleSourceProto

// optional .android.service.SensorPrivacyToggleSourceProto.Source source = 1;
inline bool SensorPrivacyToggleSourceProto::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorPrivacyToggleSourceProto::clear_source() {
  source_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::service::SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::source() const {
  // @@protoc_insertion_point(field_get:android.service.SensorPrivacyToggleSourceProto.source)
  return static_cast< ::android::service::SensorPrivacyToggleSourceProto_Source >(source_);
}
inline void SensorPrivacyToggleSourceProto::set_source(::android::service::SensorPrivacyToggleSourceProto_Source value) {
  assert(::android::service::SensorPrivacyToggleSourceProto_Source_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  source_ = value;
  // @@protoc_insertion_point(field_set:android.service.SensorPrivacyToggleSourceProto.source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::SensorPrivacyToggleSourceProto_Source> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto
